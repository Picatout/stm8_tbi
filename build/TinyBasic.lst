ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     35     .list 
                                     36 
                                     37 ;_dbg 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
                           0000A0    43 	STACK_SIZE=160
                           0017FF    44 	STACK_EMPTY=RAM_SIZE-1  
                           000000    45 	FRUN=0 ; flags run code in variable flags
                           000001    46 	FTRAP=1 ; inside trap handler 
                           000002    47 	FLOOP=2 ; FOR loop in preparation 
                           000003    48 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    49 	FBREAK=4 ; break point flag 
                           000005    50 	FCOMP=5  ; compiling flags 
                           000006    51 	FAUTORUN=6; auto start program running 
                                     52 
                           004000    53 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     54 
                           000006    55     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     56 
                           007FFF    57 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     58 
                           000008    59 	RX_QUEUE_SIZE=8 
                                     60 
                                     61 
      000000                         62 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         63 in:    .blkb 1 ; low byte of in.w 
      000002                         64 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         65 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         66 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         67 data_ptr:  .blkw 1  ; point to DATA address
      000008                         68 data_ofs:  .blkb 1  ; index to next data item 
      000009                         69 data_len:  .blkb 1  ; length of data line 
      00000A                         70 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         71 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      00000C                         72 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         73 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         74 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         75 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         76 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         77 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         78 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         79 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         80 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         81 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         82 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         83 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         84 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         85 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         86 flags: .blkb 1 ; various boolean flags
      000024                         87 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         88 rx_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         89 rx_head:  .blkb 1 ; rx_queue head pointer
      00002E                         90 rx_tail:   .blkb 1 ; rx_queue tail pointer  
      00002F                         91 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     92 ; keep 'free_ram' as last variable 
      000063                         93 free_ram: ; from here RAM free for BASIC text 
                                     94 
                                     95 ;;-----------------------------------
                                     96     .area SSEG (ABS)
                                     97 ;; working buffers and stack at end of RAM. 	
                                     98 ;;-----------------------------------
      001690                         99     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                        100 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                        101 pad: .ds PAD_SIZE             ; working buffer
      001760                        102 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        103 stack_unf: ; stack underflow ; control_stack bottom 
                                    104 
                                    105 ;;--------------------------------------
                                    106     .area HOME 
                                    107 ;; interrupt vector table at 0x8000
                                    108 ;;--------------------------------------
      000000 82 00 05 DA            109     int cold_start			; RESET vector 
                           000000   110 .if DEBUG
                                    111 	int TrapHandler 		;TRAP  software interrupt
                           000001   112 .else
      000004 82 00 00 00            113 	int NonHandledInterrupt ;TRAP  software interrupt
                                    114 .endif
      000008 82 00 00 00            115 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            116 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            117 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            118 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            119 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            120 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            121 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 65            122 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            123 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            124 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            125 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            126 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000038 82 00 00 00            127 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            128 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            129 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            130 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            131 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            132 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            133 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            134 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            135 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            136 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            137 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 4F            138 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            139 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            140 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            141 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            142 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            143 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            144 	int NonHandledInterrupt ;int29  not used
                                    145 
                                    146 ;---------------------------------------
                                    147     .area CODE
                                    148 ;---------------------------------------
                           000000   149 .if DEBUG
                                    150 .asciz "STM8_TBI" ; I like to put module name here.
                                    151 .endif 
                                    152 
                                    153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    154 ; non handled interrupt 
                                    155 ; reset MCU
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        157 NonHandledInterrupt:
      000000 71                     158     .byte 0x71  ; invalid opcode reinitialize MCU
                                    159 
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    161 ; auto wakeup from halt
                                    162 ; at iret, program continue 
                                    163 ; after hatl instruction
                                    164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        165 AWUHandler:
      000001 72 19 50 F0      [ 1]  166 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  167 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  168 	clr AWU_TBR 
      00000E 80               [11]  169 	iret
                                    170 
                                    171 ;--------------------------
                                    172 ; UART1 receive character
                                    173 ; CTRL-C (ASCII 3)
                                    174 ; cancel program execution
                                    175 ; and fall back to command line
                                    176 ;--------------------------
      00000F                        177 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  178 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  179 	ld a,UART1_DR 
      000017 A1 03            [ 1]  180 	cp a,#CTRL_C 
      000019 26 0B            [ 1]  181 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      00001B 72 5F 00 2D      [ 1]  182 	clr rx_head 
      00001F 72 5F 00 2E      [ 1]  183 	clr rx_tail 
      000023 CC 00 78         [ 2]  184 	jp user_interrupted
      000026                        185 1$:
      000026 A1 18            [ 1]  186 	cp a,#CAN ; CTRL_X 
      000028 26 03            [ 1]  187 	jrne 2$
      00002A CC 05 DA         [ 2]  188 	jp cold_start 	
      00002D                        189 2$: 
      00002D A1 1A            [ 1]  190 	cp a,#CTRL_Z
      00002F 26 06            [ 1]  191 	jrne 3$
      000031 CD 06 9C         [ 4]  192 	call cancel_autorun 
      000034 CC 05 DA         [ 2]  193 	jp cold_start 
      000037 AE 00 25         [ 2]  194 3$:	ldw x,#rx_queue  
      00003A 88               [ 1]  195 	push a 
      00003B 9F               [ 1]  196 	ld a,xl 
      00003C CB 00 2E         [ 1]  197 	add a,rx_tail 
      00003F 97               [ 1]  198 	ld xl,a
      000040 84               [ 1]  199 	pop a  
      000041 F7               [ 1]  200 	ld (x),a
      000042 72 5C 00 2E      [ 1]  201 	inc rx_tail 
      000046 A6 07            [ 1]  202 	ld a,#RX_QUEUE_SIZE-1
      000048 C4 00 2E         [ 1]  203 	and a,rx_tail 
      00004B C7 00 2E         [ 1]  204 	ld rx_tail,a  	
      00004E 80               [11]  205 	iret 
                                    206 
                                    207 ;------------------------------------
                                    208 ; software interrupt handler  
                                    209 ;------------------------------------
                           000000   210 .if DEBUG 
                                    211 TrapHandler:
                                    212 	bset flags,#FTRAP 
                                    213 	call print_registers
                                    214 	call cmd_itf
                                    215 	bres flags,#FTRAP 	
                                    216 	iret
                                    217 .endif 
                                    218 
                                    219 ;------------------------------
                                    220 ; TIMER 4 is used to maintain 
                                    221 ; a milliseconds 'ticks' counter
                                    222 ; and decrement 'timer' varaiable
                                    223 ;--------------------------------
      00004F                        224 Timer4UpdateHandler:
      00004F 72 5F 53 42      [ 1]  225 	clr TIM4_SR 
      000053 CE 00 0E         [ 2]  226 	ldw x,ticks
      000056 5C               [ 2]  227 	incw x
      000057 CF 00 0E         [ 2]  228 	ldw ticks,x 
      00005A CE 00 10         [ 2]  229 	ldw x,timer
      00005D 5D               [ 2]  230 	tnzw x 
      00005E 27 04            [ 1]  231 	jreq 1$
      000060 5A               [ 2]  232 	decw x 
      000061 CF 00 10         [ 2]  233 	ldw timer,x 
      000064                        234 1$:	
      000064 80               [11]  235 	iret 
                                    236 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    237 
                                    238 ;------------------------------------
                                    239 ; Triggered by pressing USER UserButton 
                                    240 ; on NUCLEO card.
                                    241 ; This is used to abort a progam lock 
                                    242 ; in infinite loop. 
                                    243 ;------------------------------------
      000065                        244 UserButtonHandler:
                                    245 ; wait button release
      000065 5F               [ 1]  246 	clrw x
      000066 5A               [ 2]  247 1$: decw x 
      000067 26 FD            [ 1]  248 	jrne 1$
      000069 72 09 50 15 F8   [ 2]  249 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    250 ; if MCU suspended by SLEEP resume program
      00006E 72 07 00 23 05   [ 2]  251     btjf flags,#FSLEEP,2$
      000073 72 17 00 23      [ 1]  252 	bres flags,#FSLEEP 
      000077 80               [11]  253 	iret
      000078                        254 2$:	
      000078                        255 user_interrupted:
      000078 72 00 00 23 02   [ 2]  256     btjt flags,#FRUN,4$
      00007D 20 13            [ 2]  257 	jra UBTN_Handler_exit 
      00007F                        258 4$:	; program interrupted by user 
      00007F 72 11 00 23      [ 1]  259 	bres flags,#FRUN 
      000083 AE 00 9A         [ 2]  260 	ldw x,#USER_ABORT
      000086 CD 00 00         [ 4]  261 	call puts 
      000089 CE 00 04         [ 2]  262 	ldw x,basicptr 
      00008C C6 00 01         [ 1]  263 	ld a,in 
      00008F CD 15 23         [ 4]  264 	call prt_basic_line
      000092                        265 UBTN_Handler_exit:
      000092 AE 17 FF         [ 2]  266     ldw x,#STACK_EMPTY 
      000095 94               [ 1]  267     ldw sp,x
      000096 9A               [ 1]  268 	rim 
      000097 CC 09 06         [ 2]  269 	jp warm_start
                                    270 
      00009A 0A 50 72 6F 67 72 61   271 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    272 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    274 ;    peripherals initialization
                                    275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    276 
                                    277 ;----------------------------------------
                                    278 ; inialize MCU clock 
                                    279 ; input:
                                    280 ;   A 		source  HSI | 1 HSE 
                                    281 ;   XL      CLK_CKDIVR , clock divisor 
                                    282 ; output:
                                    283 ;   none 
                                    284 ;----------------------------------------
      0000B5                        285 clock_init:	
      0000B5 C1 50 C3         [ 1]  286 	cp a,CLK_CMSR 
      0000B8 27 0C            [ 1]  287 	jreq 2$ ; no switching required 
                                    288 ; select clock source 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000BA 72 12 50 C5      [ 1]  289 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000BE C7 50 C4         [ 1]  290 	ld CLK_SWR,a
      0000C1 C1 50 C3         [ 1]  291 1$:	cp a,CLK_CMSR
      0000C4 26 FB            [ 1]  292 	jrne 1$
      0000C6                        293 2$: 	
                                    294 ; HSI and cpu clock divisor 
      0000C6 9F               [ 1]  295 	ld a,xl 
      0000C7 C7 50 C6         [ 1]  296 	ld CLK_CKDIVR,a  
      0000CA 81               [ 4]  297 	ret
                                    298 
                                    299 ;----------------------------------
                                    300 ; TIMER2 used as audio tone output 
                                    301 ; on port D:5.
                                    302 ; channel 1 configured as PWM mode 1 
                                    303 ;-----------------------------------  
                           00F424   304 TIM2_CLK_FREQ=62500
      0000CB                        305 timer2_init:
      0000CB 72 1A 50 C7      [ 1]  306 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000CF 35 60 53 05      [ 1]  307  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000D3 35 08 53 0C      [ 1]  308 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000D7 81               [ 4]  309 	ret 
                                    310 
                                    311 ;---------------------------------
                                    312 ; TIM4 is configured to generate an 
                                    313 ; interrupt every millisecond 
                                    314 ;----------------------------------
      0000D8                        315 timer4_init:
      0000D8 72 18 50 C7      [ 1]  316 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000DC 35 07 53 45      [ 1]  317 	mov TIM4_PSCR,#7 ; prescale 128  
      0000E0 35 7D 53 46      [ 1]  318 	mov TIM4_ARR,#125 ; set for 1msec.
      0000E4 35 05 53 40      [ 1]  319 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000E8 72 10 53 41      [ 1]  320 	bset TIM4_IER,#TIM4_IER_UIE
      0000EC 81               [ 4]  321 	ret
                                    322 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    324 ;  routines to write to FLASH, EEPROM 
                                    325 ;  and OPTION 
                                    326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    327 
                                    328 ;----------------------------------
                                    329 ; unlock EEPROM/OPT for writing/erasing
                                    330 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    331 ; input:
                                    332 ;  none
                                    333 ; output:
                                    334 ;  none 
                                    335 ;----------------------------------
      0000ED                        336 unlock_eeprom:
      0000ED 35 00 50 5B      [ 1]  337 	mov FLASH_CR2,#0 
      0000F1 35 FF 50 5C      [ 1]  338 	mov FLASH_NCR2,#0xFF 
      0000F5 35 AE 50 64      [ 1]  339 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000F9 35 56 50 64      [ 1]  340     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000FD 72 07 50 5F FB   [ 2]  341 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000102 81               [ 4]  342 	ret
                                    343 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    344 ;----------------------------------
                                    345 ; unlock FLASH for writing/erasing
                                    346 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    347 ; input:
                                    348 ;  none
                                    349 ; output:
                                    350 ;  none
                                    351 ;----------------------------------
      000103                        352 unlock_flash:
      000103 35 00 50 5B      [ 1]  353 	mov FLASH_CR2,#0 
      000107 35 FF 50 5C      [ 1]  354 	mov FLASH_NCR2,#0xFF 
      00010B 35 56 50 62      [ 1]  355 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00010F 35 AE 50 62      [ 1]  356 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000113 72 03 50 5F FB   [ 2]  357 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000118 81               [ 4]  358 	ret
                                    359 
                                    360 ;----------------------------
                                    361 ; erase block code must be 
                                    362 ; executed from RAM
                                    363 ; input:
                                    364 ;-----------------------------
      000119                        365 row_erase:
      000119 35 20 50 5B      [ 1]  366 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00011D 35 DF 50 5C      [ 1]  367 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000121 4F               [ 1]  368 	clr a 
      000122 90 5F            [ 1]  369 	clrw y 
      000124 91 A7 00 16      [ 1]  370 	ldf ([farptr],y),a
      000128 90 5C            [ 2]  371     incw y
      00012A 91 A7 00 16      [ 1]  372 	ldf ([farptr],y),a
      00012E 90 5C            [ 2]  373     incw y
      000130 91 A7 00 16      [ 1]  374 	ldf ([farptr],y),a
      000134 90 5C            [ 2]  375     incw y
      000136 91 A7 00 16      [ 1]  376 	ldf ([farptr],y),a
      00013A 72 05 50 5F FB   [ 2]  377 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00013F 81               [ 4]  378 	ret
      000140                        379 row_erase_end:
                                    380 
                                    381 ; copy erase_start in RAM 
      000140                        382 move_erase_to_ram:
      000140 AE 01 40         [ 2]  383 	ldw x,#row_erase_end 
      000143 1D 01 19         [ 2]  384 	subw x,#row_erase
      000146 CF 00 0C         [ 2]  385 	ldw acc16,x 
      000149 AE 16 90         [ 2]  386 	ldw x,#tib 
      00014C 90 AE 01 19      [ 2]  387 	ldw y,#row_erase 
      000150 CD 03 C0         [ 4]  388 	call move 
      000153 81               [ 4]  389 	ret 
                                    390 
                                    391 ;-----------------------------------
                                    392 ; block programming must be 
                                    393 ; executed from RAM 
                                    394 ; initial contidions: 
                                    395 ; 	memory unlocked
                                    396 ;   bit PRG set in 
                                    397 ; input:
                                    398 ;   x        128 bytes row to program 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    399 ;   farptr   row address 
                                    400 ; output:
                                    401 ;   none 
                                    402 ;----------------------------------
                           000001   403 	BCNT=1 
      000154                        404 program_row:
      000154 4B 80            [ 1]  405 	push #BLOCK_SIZE  
                                    406 ;enable block programming 
      000156 72 10 50 5B      [ 1]  407 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00015A 72 11 50 5C      [ 1]  408 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00015E 90 5F            [ 1]  409 	clrw y 
      000160 F6               [ 1]  410 1$:	ld a,(x)
      000161 91 A7 00 16      [ 1]  411 	ldf ([farptr],y),a
      000165 5C               [ 2]  412 	incw x 
      000166 90 5C            [ 2]  413 	incw y 
      000168 0A 01            [ 1]  414 	dec (BCNT,sp)
      00016A 26 F4            [ 1]  415 	jrne 1$
                                    416 ; wait EOP bit 
      00016C 72 05 50 5F FB   [ 2]  417 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000171                        418 	_drop 1 
      000171 5B 01            [ 2]    1     addw sp,#1 
      000173 81               [ 4]  419 	ret 
      000174                        420 program_row_end:
                                    421 
                                    422 ;-------------------------
                                    423 ; move program_row to RAM 
                                    424 ; at txtubound address 
                                    425 ;------------------------
      000174                        426 move_prg_to_ram:
      000174 AE 01 74         [ 2]  427 	ldw x,#program_row_end 
      000177 1D 01 54         [ 2]  428 	subw x,#program_row 
      00017A CF 00 0C         [ 2]  429 	ldw acc16,x 
      00017D AE 16 90         [ 2]  430 	ldw x,#tib 
      000180 90 AE 01 54      [ 2]  431 	ldw y,#program_row 
      000184 CD 03 C0         [ 4]  432 	call move 
      000187 81               [ 4]  433 	ret 
                                    434 
                                    435 
                                    436 ;-----------------------------
                                    437 ; write a row in FLASH/EEPROM 
                                    438 ; input:
                                    439 ;    farptr   destination address 
                                    440 ;    x        source address 
                                    441 ;-----------------------------
      000188                        442 write_row:
      000188 89               [ 2]  443 	pushw x 
      000189 72 5D 00 16      [ 1]  444 	tnz farptr 
      00018D 26 1C            [ 1]  445 	jrne to_flash 
      00018F AE 80 00         [ 2]  446 	ldw x,#FLASH_BASE 
      000192 C3 00 17         [ 2]  447 	cpw x,farptr+1 
      000195 24 14            [ 1]  448 	jruge to_flash 
      000197                        449 to_eeprom:
      000197 AE 40 00         [ 2]  450 	ldw x,#EEPROM_BASE 
      00019A C3 00 17         [ 2]  451 	cpw x,farptr+1 
      00019D 24 01            [ 1]  452 	jruge 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00019F 81               [ 4]  453 	ret ; bad address 
      0001A0 AE 47 FF         [ 2]  454 1$: ldw x,#EEPROM_END 
      0001A3 23 01            [ 2]  455 	jrule 2$ 
      0001A5 81               [ 4]  456 	ret ; bad address 
      0001A6 CD 00 ED         [ 4]  457 2$:	call unlock_eeprom
      0001A9 20 03            [ 2]  458 	jra do_programming
      0001AB                        459 to_flash:
      0001AB CD 01 03         [ 4]  460 	call unlock_flash 
      0001AE                        461 do_programming:
      0001AE 85               [ 2]  462 	popw x 
      0001AF CD 16 90         [ 4]  463 	call tib
      0001B2 72 13 50 5F      [ 1]  464 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001B6 72 17 50 5F      [ 1]  465 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001BA 81               [ 4]  466 	ret 
                                    467 
                                    468 
                                    469 ;-----------------------------------
                                    470 ; erase flash or EEPROM block
                                    471 ; a blow is 128 bytes 
                                    472 ; input:
                                    473 ;   farptr  address row begin
                                    474 ; output:
                                    475 ;   none
                                    476 ;--------------------------------------
      0001BB                        477 block_erase:
      0001BB CE 00 17         [ 2]  478 	ldw x,farptr+1
      0001BE A3 28 00         [ 2]  479 	cpw x,#user_space 
      0001C1 2A 17            [ 1]  480 	jrpl erase_flash 
                                    481 ; erase eeprom block
      0001C3 A3 40 00         [ 2]  482 	cpw x,#EEPROM_BASE 
      0001C6 24 01            [ 1]  483 	jruge 1$
      0001C8 81               [ 4]  484 	ret ; bad address 
      0001C9 AE 47 FF         [ 2]  485 1$: ldw x,#EEPROM_END 
      0001CC 23 01            [ 2]  486 	jrule 2$ 
      0001CE 81               [ 4]  487 	ret ; bad address 
      0001CF CD 00 ED         [ 4]  488 2$:	call unlock_eeprom 
      0001D2 CD 16 90         [ 4]  489 	call tib 
      0001D5 72 17 50 5F      [ 1]  490 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001D9 81               [ 4]  491 	ret 
                                    492 ; erase flash block:
      0001DA                        493 erase_flash:
      0001DA CD 01 03         [ 4]  494 	call unlock_flash 
      0001DD CD 16 90         [ 4]  495 	call tib 
      0001E0 72 13 50 5F      [ 1]  496     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001E4 81               [ 4]  497 	ret 
                                    498 
                                    499 
                                    500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    501 ; write a byte to FLASH or EEPROM/OPTION  
                                    502 ; input:
                                    503 ;    a  		byte to write
                                    504 ;    farptr  	address
                                    505 ;    x          farptr[x]
                                    506 ; output:
                                    507 ;    none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    509 	; variables locales
                           000001   510 	BTW = 1   ; byte to write offset on stack
                           000002   511 	OPT = 2   ; OPTION flag offset on stack
                           000002   512 	VSIZE = 2
      0001E5                        513 write_byte:
      0001E5 90 89            [ 2]  514 	pushw y
      0001E7                        515 	_vars VSIZE
      0001E7 52 02            [ 2]    1     sub sp,#VSIZE 
      0001E9 6B 01            [ 1]  516 	ld (BTW,sp),a ; byte to write 
      0001EB 0F 02            [ 1]  517 	clr (OPT,sp)  ; OPTION flag
                                    518 ; put addr[15:0] in Y, for bounds check.
      0001ED 90 CE 00 17      [ 2]  519 	ldw y,farptr+1   ; Y=addr15:0
                                    520 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001F1 72 5D 00 16      [ 1]  521 	tnz farptr 
      0001F5 26 14            [ 1]  522 	jrne write_flash
      0001F7 90 A3 28 00      [ 2]  523     cpw y,#user_space
      0001FB 24 0E            [ 1]  524     jruge write_flash
      0001FD 90 A3 40 00      [ 2]  525 	cpw y,#EEPROM_BASE  
      000201 25 52            [ 1]  526     jrult write_exit
      000203 90 A3 48 7F      [ 2]  527 	cpw y,#OPTION_END 
      000207 22 4C            [ 1]  528 	jrugt write_exit
      000209 20 16            [ 2]  529 	jra write_eeprom 
                                    530 ; write program memory
      00020B                        531 write_flash:
      00020B CD 01 03         [ 4]  532 	call unlock_flash 
      00020E 9B               [ 1]  533 1$:	sim 
      00020F 7B 01            [ 1]  534 	ld a,(BTW,sp)
      000211 92 A7 00 16      [ 4]  535 	ldf ([farptr],x),a ; farptr[x]=A
      000215 72 05 50 5F FB   [ 2]  536 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00021A 9A               [ 1]  537     rim 
      00021B 72 13 50 5F      [ 1]  538     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00021F 20 34            [ 2]  539     jra write_exit
                                    540 ; write eeprom and option
      000221                        541 write_eeprom:
      000221 CD 00 ED         [ 4]  542 	call unlock_eeprom
                                    543 	; check for data eeprom or option eeprom
      000224 90 A3 48 00      [ 2]  544 	cpw y,#OPTION_BASE
      000228 2B 08            [ 1]  545 	jrmi 1$
      00022A 90 A3 48 80      [ 2]  546 	cpw y,#OPTION_END+1
      00022E 2A 02            [ 1]  547 	jrpl 1$
      000230 03 02            [ 1]  548 	cpl (OPT,sp)
      000232                        549 1$: 
      000232 0D 02            [ 1]  550     tnz (OPT,sp)
      000234 27 08            [ 1]  551     jreq 2$
                                    552 	; pour modifier une option il faut modifier ces 2 bits
      000236 72 1E 50 5B      [ 1]  553     bset FLASH_CR2,#FLASH_CR2_OPT
      00023A 72 1F 50 5C      [ 1]  554     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00023E                        555 2$: 
      00023E 7B 01            [ 1]  556     ld a,(BTW,sp)
      000240 92 A7 00 16      [ 4]  557     ldf ([farptr],x),a
      000244 0D 02            [ 1]  558     tnz (OPT,sp)
      000246 27 08            [ 1]  559     jreq 3$
      000248 5C               [ 2]  560     incw x
      000249 7B 01            [ 1]  561     ld a,(BTW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00024B 43               [ 1]  562     cpl a
      00024C 92 A7 00 16      [ 4]  563     ldf ([farptr],x),a
      000250 72 05 50 5F FB   [ 2]  564 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000255                        565 write_exit:
      000255                        566 	_drop VSIZE 
      000255 5B 02            [ 2]    1     addw sp,#VSIZE 
      000257 90 85            [ 2]  567 	popw y
      000259 81               [ 4]  568     ret
                                    569 
                                    570 ;--------------------------------------------
                                    571 ; write a data block to eeprom or flash 
                                    572 ; input:
                                    573 ;   Y        source address   
                                    574 ;   X        array index  destination  farptr[x]
                                    575 ;   BSIZE    block size bytes 
                                    576 ;   farptr   write address , byte* 
                                    577 ; output:
                                    578 ;	X 		after last byte written 
                                    579 ;   Y 		after last byte read 
                                    580 ;  farptr   point after block
                                    581 ;---------------------------------------------
      00025A                        582 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00025A                        583 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    584 	; local var 
                           000001   585 	XSAVE=1 
                           000002   586 	VSIZE=2 
      00025A                        587 write_block:
      00025A                        588 	_vars VSIZE
      00025A 52 02            [ 2]    1     sub sp,#VSIZE 
      00025C 1F 01            [ 2]  589 	ldw (XSAVE,sp),x 
      00025E 1E 05            [ 2]  590 	ldw x,(BSIZE,sp) 
      000260 27 13            [ 1]  591 	jreq 9$
      000262 1E 01            [ 2]  592 1$:	ldw x,(XSAVE,sp)
      000264 90 F6            [ 1]  593 	ld a,(y)
      000266 CD 01 E5         [ 4]  594 	call write_byte 
      000269 5C               [ 2]  595 	incw x 
      00026A 90 5C            [ 2]  596 	incw y 
      00026C 1F 01            [ 2]  597 	ldw (XSAVE,sp),x
      00026E 1E 05            [ 2]  598 	ldw x,(BSIZE,sp)
      000270 5A               [ 2]  599 	decw x
      000271 1F 05            [ 2]  600 	ldw (BSIZE,sp),x 
      000273 26 ED            [ 1]  601 	jrne 1$
      000275                        602 9$:
      000275 1E 01            [ 2]  603 	ldw x,(XSAVE,sp)
      000277 CD 1A 29         [ 4]  604 	call incr_farptr
      00027A                        605 	_drop VSIZE
      00027A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027C 81               [ 4]  606 	ret 
                                    607 
                                    608 
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    610 ;;   UART1 subroutines
                                    611 ;;   used for user interface 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    612 ;;   communication channel.
                                    613 ;;   settings: 
                                    614 ;;		115200 8N1 no flow control
                                    615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    616 
                                    617 ;---------------------------------------------
                                    618 ; initialize UART1, 115200 8N1
                                    619 ; input:
                                    620 ;	none
                                    621 ; output:
                                    622 ;   none
                                    623 ;---------------------------------------------
      00027D                        624 uart1_init:
      00027D 72 1A 50 02      [ 1]  625     bset PA_DDR,#UART1_TX_PIN
      000281 72 1A 50 03      [ 1]  626     bset PA_CR1,#UART1_TX_PIN 
      000285 72 1A 50 04      [ 1]  627     bset PA_CR2,#UART1_TX_PIN 
                                    628 ; enable UART1 clock
      000289 72 14 50 C7      [ 1]  629 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00028D                        630 uart1_set_baud: 
                                    631 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    632 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00028D A6 E1            [ 1]  633 	ld a,#CLK_SWR_HSI
      00028F C1 50 C3         [ 1]  634 	cp a,CLK_CMSR 
      000292 27 0A            [ 1]  635 	jreq 2$ 
      000294                        636 1$: ; 8 Mhz 	
      000294 35 05 52 33      [ 1]  637 	mov UART1_BRR2,#0x05 ; must be loaded first
      000298 35 04 52 32      [ 1]  638 	mov UART1_BRR1,#0x4
      00029C 20 08            [ 2]  639 	jra 3$
      00029E                        640 2$: ; 16 Mhz 	
      00029E 35 0B 52 33      [ 1]  641 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002A2 35 08 52 32      [ 1]  642 	mov UART1_BRR1,#0x08
      0002A6                        643 3$:
      0002A6 72 5F 52 31      [ 1]  644     clr UART1_DR
      0002AA 35 2C 52 35      [ 1]  645 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002AE 72 10 52 35      [ 1]  646 	bset UART1_CR2,#UART_CR2_SBK
      0002B2 72 0D 52 30 FB   [ 2]  647     btjf UART1_SR,#UART_SR_TC,.
      0002B7 72 5F 00 2D      [ 1]  648     clr rx_head 
      0002BB 72 5F 00 2E      [ 1]  649 	clr rx_tail 
      0002BF 81               [ 4]  650 	ret
                                    651 
                                    652 ;---------------------------------
                                    653 ; send character to UART1 
                                    654 ; input:
                                    655 ;   A 
                                    656 ; output:
                                    657 ;   none 
                                    658 ;--------------------------------	
      0002C0                        659 putc::
      0002C0 72 0F 52 30 FB   [ 2]  660 	btjf UART1_SR,#UART_SR_TXE,.
      0002C5 C7 52 31         [ 1]  661 	ld UART1_DR,a 
      0002C8 81               [ 4]  662 	ret 
                                    663 
                                    664 ;---------------------------------
                                    665 ; wait character from UART1 
                                    666 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    667 ;   none
                                    668 ; output:
                                    669 ;   A 			char  
                                    670 ;--------------------------------	
      0002C9                        671 getc::
      0002C9 C6 00 2D         [ 1]  672 	ld a,rx_head 
      0002CC C1 00 2E         [ 1]  673 1$:	cp a,rx_tail 
      0002CF 27 FB            [ 1]  674 	jreq 1$
      0002D1 89               [ 2]  675 	pushw x 
      0002D2 AE 00 25         [ 2]  676 	ldw x,#rx_queue
      0002D5 9F               [ 1]  677 	ld a,xl 
      0002D6 CB 00 2D         [ 1]  678 	add a,rx_head 
      0002D9 97               [ 1]  679 	ld xl,a 
      0002DA F6               [ 1]  680 	ld a,(x)
      0002DB 85               [ 2]  681 	popw x
      0002DC 88               [ 1]  682 	push a
      0002DD 72 5C 00 2D      [ 1]  683 	inc rx_head 
      0002E1 A6 07            [ 1]  684 	ld a,#RX_QUEUE_SIZE-1 
      0002E3 C4 00 2D         [ 1]  685 	and a,rx_head 
      0002E6 C7 00 2D         [ 1]  686 	ld rx_head,a 
      0002E9 84               [ 1]  687 	pop a  
      0002EA 81               [ 4]  688 	ret 
                                    689 
                                    690 ;----------------------
                                    691 ; print token id && value
                                    692 ; input:
                                    693 ;   A     token id 
                                    694 ;   X     token value 
                                    695 ;---------------------
                           000001   696 	BSAVE=1
                           000002   697 	AREG=2
                           000003   698 	XREG=3
                           000004   699 	VSIZE=4
      0002EB                        700 prt_tok:
      0002EB                        701 	_vars VSIZE 
      0002EB 52 04            [ 2]    1     sub sp,#VSIZE 
      0002ED 6B 02            [ 1]  702 	ld (AREG,sp),a 
      0002EF 1F 03            [ 2]  703 	ldw (XREG,sp),x 
      0002F1 C6 00 0A         [ 1]  704 	ld a, base
      0002F4 6B 01            [ 1]  705 	ld (BSAVE,sp),a 
      0002F6 35 10 00 0A      [ 1]  706 	mov base,#16  
      0002FA AE 03 22         [ 2]  707 	ldw x,#token_msg
      0002FD CD 00 00         [ 4]  708 	call puts 
      000300 5F               [ 1]  709 	clrw x 
      000301 7B 02            [ 1]  710 	ld a,(AREG,sp)
      000303 97               [ 1]  711 	ld xl,a 
      000304 CD 09 D2         [ 4]  712 	call print_int 
      000307 A6 20            [ 1]  713 	ld a,#SPACE
      000309 CD 02 C0         [ 4]  714 	call putc 
      00030C 1E 03            [ 2]  715 	ldw x,(XREG,sp)
      00030E CD 09 D2         [ 4]  716 	call print_int 
      000311 A6 0D            [ 1]  717 	ld a,#CR 
      000313 CD 02 C0         [ 4]  718 	call putc 
      000316 7B 01            [ 1]  719 	ld a,(BSAVE,sp)
      000318 C7 00 0A         [ 1]  720 	ld base,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00031B 7B 02            [ 1]  721 	ld a,(AREG,sp)
      00031D 1E 03            [ 2]  722 	ldw x,(XREG,sp)
      00031F                        723 	_drop VSIZE 
      00031F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000321 81               [ 4]  724 	ret 
      000322 74 6F 6B 65 6E 3A 20   725 token_msg: .asciz "token: "
             00
                                    726 
                                    727 
                                    728 ;---------------------
                                    729 ; display n bytes row 
                                    730 ; from memory.
                                    731 ; input:
                                    732 ;   A   bytes to print 
                                    733 ;	X   start address 
                                    734 ; output:
                                    735 ;   X   address after last shown  
                                    736 ;---------------------
                           000001   737 	CNT=1 
                           000002   738 	ADR=2 
                           000003   739 	VSIZE=3 
      00032A                        740 show_row:
      00032A 4D               [ 1]  741 	tnz a 
      00032B 26 01            [ 1]  742 	jrne 1$
      00032D 81               [ 4]  743 	ret 
      00032E                        744 1$:	
      00032E 89               [ 2]  745 	pushw x  
      00032F 88               [ 1]  746 	push a 
      000330 35 04 00 24      [ 1]  747 	mov tab_width,#4 
      000334 CD 09 D2         [ 4]  748 	call print_int 
      000337 A6 20            [ 1]  749 	ld a,#SPACE  
      000339 CD 02 C0         [ 4]  750 	call putc
      00033C                        751 row_loop:
      00033C 1E 02            [ 2]  752 	ldw x,(ADR,sp)
      00033E F6               [ 1]  753 	ld a,(x)
      00033F 5F               [ 1]  754 	clrw x 
      000340 97               [ 1]  755 	ld xl,a 
      000341 CD 09 D2         [ 4]  756 	call print_int 
      000344 1E 02            [ 2]  757 	ldw x,(ADR,sp)
      000346 5C               [ 2]  758 	incw x 
      000347 1F 02            [ 2]  759 	ldw (ADR,sp),x 
      000349 0A 01            [ 1]  760 	dec (CNT,sp)
      00034B 26 EF            [ 1]  761 	jrne row_loop
      00034D                        762 	_drop VSIZE  		
      00034D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00034F 35 04 00 24      [ 1]  763 	mov tab_width,#4
      000353 A6 0D            [ 1]  764 	ld a,#CR 
      000355 CD 02 C0         [ 4]  765 	call putc 
      000358 81               [ 4]  766 	ret 
                                    767 
                                    768 ;--------------------------
                                    769 ; print memory content 
                                    770 ; in hexadecimal format
                                    771 ;  input:
                                    772 ;    X    start address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    773 ;    Y    count 
                                    774 ;--------------------------
                           000001   775 	BCNT=1
                           000003   776 	BASE=3
                           000004   777 	TABW=4
                           000004   778 	VSIZE=4   
      000359                        779 hex_dump:
      000359                        780 	_vars VSIZE
      000359 52 04            [ 2]    1     sub sp,#VSIZE 
      00035B C6 00 0A         [ 1]  781 	ld a,base
      00035E 6B 03            [ 1]  782 	ld (BASE,sp),a 
      000360 35 10 00 0A      [ 1]  783 	mov base,#16
      000364 C6 00 24         [ 1]  784 	ld a,tab_width 
      000367 6B 04            [ 1]  785 	ld (TABW,sp),a
      000369 A6 0D            [ 1]  786 	ld a,#CR 
      00036B CD 02 C0         [ 4]  787 	call putc 
      00036E 17 01            [ 2]  788 1$: ldw (BCNT,sp),y
      000370 A6 10            [ 1]  789 	ld a,#16
      000372 90 A3 00 10      [ 2]  790 	cpw y,#16
      000376 2A 02            [ 1]  791 	jrpl 2$
      000378 90 9F            [ 1]  792 	ld a,yl
      00037A                        793 2$: 	
      00037A CD 03 2A         [ 4]  794 	call show_row 
      00037D 16 01            [ 2]  795 	ldw y,(BCNT,sp) 
      00037F 72 A2 00 10      [ 2]  796 	subw y,#16 
      000383 90 A3 00 01      [ 2]  797 	cpw y,#1
      000387 2A E5            [ 1]  798 	jrpl 1$
      000389 7B 03            [ 1]  799 	ld a,(BASE,sp)
      00038B C7 00 0A         [ 1]  800 	ld base,a
      00038E 7B 04            [ 1]  801 	ld a,(TABW,sp)
      000390 C7 00 24         [ 1]  802 	ld tab_width,a 
      000393                        803 	_drop VSIZE
      000393 5B 04            [ 2]    1     addw sp,#VSIZE 
      000395 81               [ 4]  804 	ret 
                                    805 
                                    806 ;-------------------------------------
                                    807 ; retrun string length
                                    808 ; input:
                                    809 ;   X         .asciz  pointer 
                                    810 ; output:
                                    811 ;   X         not affected 
                                    812 ;   A         length 
                                    813 ;-------------------------------------
      000396                        814 strlen::
      000396 89               [ 2]  815 	pushw x 
      000397 4F               [ 1]  816 	clr a
      000398 7D               [ 1]  817 1$:	tnz (x) 
      000399 27 04            [ 1]  818 	jreq 9$ 
      00039B 4C               [ 1]  819 	inc a 
      00039C 5C               [ 2]  820 	incw x 
      00039D 20 F9            [ 2]  821 	jra 1$ 
      00039F 85               [ 2]  822 9$:	popw x 
      0003A0 81               [ 4]  823 	ret 
                                    824 
                                    825 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    826 ; compare 2 strings
                                    827 ; input:
                                    828 ;   X 		char* first string 
                                    829 ;   Y       char* second string 
                                    830 ; output:
                                    831 ;   A 		0|1 
                                    832 ;-------------------------------------
      0003A1                        833 strcmp:
      0003A1 F6               [ 1]  834 	ld a,(x)
      0003A2 27 0B            [ 1]  835 	jreq 5$ 
      0003A4 90 F1            [ 1]  836 	cp a,(y) 
      0003A6 26 05            [ 1]  837 	jrne 4$ 
      0003A8 5C               [ 2]  838 	incw x 
      0003A9 90 5C            [ 2]  839 	incw y 
      0003AB 20 F4            [ 2]  840 	jra strcmp 
      0003AD                        841 4$: ; not same  
      0003AD 4F               [ 1]  842 	clr a 
      0003AE 81               [ 4]  843 	ret 
      0003AF                        844 5$: ; same 
      0003AF A6 01            [ 1]  845 	ld a,#1 
      0003B1 81               [ 4]  846 	ret 
                                    847 
                                    848 
                                    849 ;---------------------------------------
                                    850 ;  copy src to dest 
                                    851 ; input:
                                    852 ;   X 		dest 
                                    853 ;   Y 		src 
                                    854 ; output: 
                                    855 ;   X 		dest 
                                    856 ;----------------------------------
      0003B2                        857 strcpy:
      0003B2 89               [ 2]  858 	pushw x 
      0003B3 90 F6            [ 1]  859 1$: ld a,(y)
      0003B5 27 06            [ 1]  860 	jreq 9$ 
      0003B7 F7               [ 1]  861 	ld (x),a 
      0003B8 5C               [ 2]  862 	incw x 
      0003B9 90 5C            [ 2]  863 	incw y 
      0003BB 20 F6            [ 2]  864 	jra 1$ 
      0003BD 7F               [ 1]  865 9$:	clr (x)
      0003BE 85               [ 2]  866 	popw x 
      0003BF 81               [ 4]  867 	ret 
                                    868 
                                    869 ;---------------------------------------
                                    870 ; move memory block 
                                    871 ; input:
                                    872 ;   X 		destination 
                                    873 ;   Y 	    source 
                                    874 ;   acc16	bytes count 
                                    875 ; output:
                                    876 ;   none 
                                    877 ;--------------------------------------
                           000001   878 	INCR=1 ; increament high byte 
                           000002   879 	LB=2 ; increament low byte 
                           000002   880 	VSIZE=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003C0                        881 move::
      0003C0                        882 	_vars VSIZE 
      0003C0 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C2 0F 01            [ 1]  883 	clr (INCR,sp)
      0003C4 0F 02            [ 1]  884 	clr (LB,sp)
      0003C6 90 89            [ 2]  885 	pushw y 
      0003C8 13 01            [ 2]  886 	cpw x,(1,sp) ; compare DEST to SRC 
      0003CA 90 85            [ 2]  887 	popw y 
      0003CC 27 31            [ 1]  888 	jreq move_exit ; x==y 
      0003CE 2B 0E            [ 1]  889 	jrmi move_down
      0003D0                        890 move_up: ; start from top address with incr=-1
      0003D0 72 BB 00 0C      [ 2]  891 	addw x,acc16
      0003D4 72 B9 00 0C      [ 2]  892 	addw y,acc16
      0003D8 03 01            [ 1]  893 	cpl (INCR,sp)
      0003DA 03 02            [ 1]  894 	cpl (LB,sp)   ; increment = -1 
      0003DC 20 05            [ 2]  895 	jra move_loop  
      0003DE                        896 move_down: ; start from bottom address with incr=1 
      0003DE 5A               [ 2]  897     decw x 
      0003DF 90 5A            [ 2]  898 	decw y
      0003E1 0C 02            [ 1]  899 	inc (LB,sp) ; incr=1 
      0003E3                        900 move_loop:	
      0003E3 C6 00 0C         [ 1]  901     ld a, acc16 
      0003E6 CA 00 0D         [ 1]  902 	or a, acc8
      0003E9 27 14            [ 1]  903 	jreq move_exit 
      0003EB 72 FB 01         [ 2]  904 	addw x,(INCR,sp)
      0003EE 72 F9 01         [ 2]  905 	addw y,(INCR,sp) 
      0003F1 90 F6            [ 1]  906 	ld a,(y)
      0003F3 F7               [ 1]  907 	ld (x),a 
      0003F4 89               [ 2]  908 	pushw x 
      0003F5 CE 00 0C         [ 2]  909 	ldw x,acc16 
      0003F8 5A               [ 2]  910 	decw x 
      0003F9 CF 00 0C         [ 2]  911 	ldw acc16,x 
      0003FC 85               [ 2]  912 	popw x 
      0003FD 20 E4            [ 2]  913 	jra move_loop
      0003FF                        914 move_exit:
      0003FF                        915 	_drop VSIZE
      0003FF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000401 81               [ 4]  916 	ret 	
                                    917 
                                    918 ;-------------------------------------
                                    919 ; search text area for a line#
                                    920 ; input:
                                    921 ;	X 			line# 
                                    922 ; output:
                                    923 ;   X 			addr of line | 0 
                                    924 ;   Y           line#|insert address if not found  
                                    925 ;-------------------------------------
                           000001   926 	LL=1 ; line length 
                           000002   927 	LB=2 ; line length low byte 
                           000002   928 	VSIZE=2 
      000402                        929 search_lineno::
      000402                        930 	_vars VSIZE
      000402 52 02            [ 2]    1     sub sp,#VSIZE 
      000404 0F 01            [ 1]  931 	clr (LL,sp)
      000406 90 CE 00 1C      [ 2]  932 	ldw y,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00040A                        933 search_ln_loop:
      00040A 90 C3 00 1E      [ 2]  934 	cpw y,txtend 
      00040E 2A 10            [ 1]  935 	jrpl 8$
      000410 90 F3            [ 1]  936 	cpw x,(y)
      000412 27 0E            [ 1]  937 	jreq 9$
      000414 2B 0A            [ 1]  938 	jrmi 8$ 
      000416 90 E6 02         [ 1]  939 	ld a,(2,y)
      000419 6B 02            [ 1]  940 	ld (LB,sp),a 
      00041B 72 F9 01         [ 2]  941 	addw y,(LL,sp)
      00041E 20 EA            [ 2]  942 	jra search_ln_loop 
      000420                        943 8$: 
      000420 5F               [ 1]  944 	clrw x 	
      000421 51               [ 1]  945 	exgw x,y 
      000422                        946 9$: _drop VSIZE
      000422 5B 02            [ 2]    1     addw sp,#VSIZE 
      000424 51               [ 1]  947 	exgw x,y   
      000425 81               [ 4]  948 	ret 
                                    949 
                                    950 ;-------------------------------------
                                    951 ; delete line at addr
                                    952 ; input:
                                    953 ;   X 		addr of line i.e DEST for move 
                                    954 ;-------------------------------------
                           000001   955 	LLEN=1
                           000003   956 	SRC=3
                           000004   957 	VSIZE=4
      000426                        958 del_line: 
      000426                        959 	_vars VSIZE 
      000426 52 04            [ 2]    1     sub sp,#VSIZE 
      000428 E6 02            [ 1]  960 	ld a,(2,x) ; line length
      00042A 6B 02            [ 1]  961 	ld (LLEN+1,sp),a 
      00042C 0F 01            [ 1]  962 	clr (LLEN,sp)
      00042E 90 93            [ 1]  963 	ldw y,x  
      000430 72 F9 01         [ 2]  964 	addw y,(LLEN,sp) ;SRC  
      000433 17 03            [ 2]  965 	ldw (SRC,sp),y  ;save source 
      000435 90 CE 00 1E      [ 2]  966 	ldw y,txtend 
      000439 72 F2 03         [ 2]  967 	subw y,(SRC,sp) ; y=count 
      00043C 90 CF 00 0C      [ 2]  968 	ldw acc16,y 
      000440 16 03            [ 2]  969 	ldw y,(SRC,sp)    ; source
      000442 CD 03 C0         [ 4]  970 	call move
      000445 90 CE 00 1E      [ 2]  971 	ldw y,txtend 
      000449 72 F2 01         [ 2]  972 	subw y,(LLEN,sp)
      00044C 90 CF 00 1E      [ 2]  973 	ldw txtend,y  
      000450                        974 	_drop VSIZE     
      000450 5B 04            [ 2]    1     addw sp,#VSIZE 
      000452 81               [ 4]  975 	ret 
                                    976 
                                    977 ;---------------------------------------------
                                    978 ; create a gap in text area to 
                                    979 ; move new line in this gap
                                    980 ; input:
                                    981 ;    X 			addr gap start 
                                    982 ;    Y 			gap length 
                                    983 ; output:
                                    984 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    985 ;--------------------------------------------
                           000001   986 	DEST=1
                           000003   987 	SRC=3
                           000005   988 	LEN=5
                           000006   989 	VSIZE=6 
      000453                        990 create_gap:
      000453                        991 	_vars VSIZE
      000453 52 06            [ 2]    1     sub sp,#VSIZE 
      000455 1F 03            [ 2]  992 	ldw (SRC,sp),x 
      000457 17 05            [ 2]  993 	ldw (LEN,sp),y 
      000459 90 CF 00 0C      [ 2]  994 	ldw acc16,y 
      00045D 90 93            [ 1]  995 	ldw y,x ; SRC
      00045F 72 BB 00 0C      [ 2]  996 	addw x,acc16  
      000463 1F 01            [ 2]  997 	ldw (DEST,sp),x 
                                    998 ;compute size to move 	
      000465 CE 00 1E         [ 2]  999 	ldw x,txtend 
      000468 72 F0 03         [ 2] 1000 	subw x,(SRC,sp)
      00046B CF 00 0C         [ 2] 1001 	ldw acc16,x ; size to move
      00046E 1E 01            [ 2] 1002 	ldw x,(DEST,sp) 
      000470 CD 03 C0         [ 4] 1003 	call move
      000473 CE 00 1E         [ 2] 1004 	ldw x,txtend
      000476 72 FB 05         [ 2] 1005 	addw x,(LEN,sp)
      000479 CF 00 1E         [ 2] 1006 	ldw txtend,x
      00047C                       1007 9$:	_drop VSIZE 
      00047C 5B 06            [ 2]    1     addw sp,#VSIZE 
      00047E 81               [ 4] 1008 	ret 
                                   1009 
                                   1010 ;--------------------------------------------
                                   1011 ; insert line in pad into text area 
                                   1012 ; first search for already existing 
                                   1013 ; replace existing 
                                   1014 ; if new line empty delete existing one. 
                                   1015 ; input:
                                   1016 ;   ptr16		pointer to tokenized line  
                                   1017 ; output:
                                   1018 ;   none
                                   1019 ;---------------------------------------------
                           000001  1020 	DEST=1  ; text area insertion address 
                           000003  1021 	SRC=3   ; str to insert address 
                           000005  1022 	LINENO=5 ; line number 
                           000007  1023 	LLEN=7 ; line length 
                           000008  1024 	VSIZE=8  
      00047F                       1025 insert_line:
      00047F                       1026 	_vars VSIZE 
      00047F 52 08            [ 2]    1     sub sp,#VSIZE 
      000481 CE 00 1E         [ 2] 1027 	ldw x,txtend  
      000484 C3 00 1C         [ 2] 1028 	cpw x,txtbgn 
      000487 26 19            [ 1] 1029 	jrne 0$
                                   1030 ;first text line 
      000489 AE 00 02         [ 2] 1031 	ldw x,#2 
      00048C 72 D6 00 17      [ 4] 1032 	ld a,([ptr16],x)
      000490 A1 03            [ 1] 1033 	cp a,#3
      000492 27 59            [ 1] 1034 	jreq insert_ln_exit
      000494 5F               [ 1] 1035 	clrw x 
      000495 97               [ 1] 1036 	ld xl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000496 1F 07            [ 2] 1037 	ldw (LLEN,sp),x 
      000498 CE 00 1C         [ 2] 1038 	ldw x,txtbgn
      00049B 1F 01            [ 2] 1039 	ldw (DEST,sp),x 
      00049D CE 00 1E         [ 2] 1040 	ldw x,txtend 
      0004A0 20 37            [ 2] 1041 	jra 4$
      0004A2 72 CE 00 17      [ 5] 1042 0$:	ldw x,[ptr16]
                                   1043 ; line number
      0004A6 1F 05            [ 2] 1044 	ldw (LINENO,sp),x 
      0004A8 AE 00 02         [ 2] 1045 	ldw x,#2 
      0004AB 72 D6 00 17      [ 4] 1046 	ld a,([ptr16],x)
      0004AF 97               [ 1] 1047 	ld xl,a
                                   1048 ; line length
      0004B0 1F 07            [ 2] 1049 	ldw (LLEN,sp),x
                                   1050 ; check if that line number already exit 	
      0004B2 1E 05            [ 2] 1051 	ldw x,(LINENO,sp)
      0004B4 CD 04 02         [ 4] 1052 	call search_lineno 
      0004B7 5D               [ 2] 1053 	tnzw x 
      0004B8 26 04            [ 1] 1054 	jrne 2$
                                   1055 ; line doesn't exit
                                   1056 ; it will be inserted at this point.  	
      0004BA 17 01            [ 2] 1057 	ldw (DEST,sp),y 
      0004BC 20 05            [ 2] 1058 	jra 3$
                                   1059 ; line exit delete it.
                                   1060 ; it will be replaced by new one 	
      0004BE 1F 01            [ 2] 1061 2$: ldw (DEST,sp),x 
      0004C0 CD 04 26         [ 4] 1062 	call del_line
      0004C3                       1063 3$: 
                                   1064 ; insert new line or leave if LLEN==3
                                   1065 ; LLEN==3 means empty line 
      0004C3 A6 03            [ 1] 1066 	ld a,#3
      0004C5 11 08            [ 1] 1067 	cp a,(LLEN+1,sp)
      0004C7 27 24            [ 1] 1068 	jreq insert_ln_exit ; empty line exit.
                                   1069 ; if insertion point at txtend 
                                   1070 ; move no need to create a gap 
      0004C9 1E 01            [ 2] 1071 	ldw x,(DEST,sp)
      0004CB C3 00 1E         [ 2] 1072 	cpw x,txtend 
      0004CE 27 09            [ 1] 1073 	jreq 4$ 
                                   1074 ; must create a gap
                                   1075 ; at insertion point  
      0004D0 1E 01            [ 2] 1076 	ldw x,(DEST,sp)
      0004D2 16 07            [ 2] 1077 	ldw y,(LLEN,sp)
      0004D4 CD 04 53         [ 4] 1078 	call create_gap
      0004D7 20 06            [ 2] 1079 	jra 5$
      0004D9                       1080 4$: 
      0004D9 72 FB 07         [ 2] 1081 	addw x,(LLEN,sp)
      0004DC CF 00 1E         [ 2] 1082 	ldw txtend,x 	 
                                   1083 ; move new line in gap 
      0004DF 1E 07            [ 2] 1084 5$:	ldw x,(LLEN,sp)
      0004E1 CF 00 0C         [ 2] 1085 	ldw acc16,x 
      0004E4 90 AE 16 E0      [ 2] 1086 	ldw y,#pad ;SRC 
      0004E8 1E 01            [ 2] 1087 	ldw x,(DEST,sp) ; dest address 
      0004EA CD 03 C0         [ 4] 1088 	call move 
      0004ED                       1089 insert_ln_exit:	
      0004ED                       1090 	_drop VSIZE
      0004ED 5B 08            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004EF 81               [ 4] 1091 	ret
                                   1092 
                                   1093 ;-----------------------------------
                                   1094 ; create token list fromm text line 
                                   1095 ; save this list in pad buffer 
                                   1096 ;  compiled line format: 
                                   1097 ;    line_no  2 bytes {0...32767}
                                   1098 ;    count    1 byte  
                                   1099 ;    tokens   variable length 
                                   1100 ;   
                                   1101 ; input:
                                   1102 ;   none
                                   1103 ; modified variables:
                                   1104 ;   basicptr     token list buffer address 
                                   1105 ;   in.w  		 3|count, i.e. index in buffer
                                   1106 ;   count        length of line | 0  
                                   1107 ;-----------------------------------
                           000001  1108 	XSAVE=1
                           000002  1109 	VSIZE=2
      0004F0                       1110 compile:
      0004F0                       1111 	_vars VSIZE 
      0004F0 52 02            [ 2]    1     sub sp,#VSIZE 
      0004F2 72 1A 00 23      [ 1] 1112 	bset flags,#FCOMP 
      0004F6 A6 00            [ 1] 1113 	ld a,#0
      0004F8 AE 00 00         [ 2] 1114 	ldw x,#0
      0004FB CF 16 E0         [ 2] 1115 	ldw pad,x ; destination buffer 
      0004FE C7 16 E2         [ 1] 1116 	ld pad+2,a ; count 
      000501 AE 16 E3         [ 2] 1117 	ldw x,#pad+3
      000504 72 5F 00 01      [ 1] 1118 	clr in 
      000508 CD 0C 01         [ 4] 1119 	call get_token
      00050B A1 84            [ 1] 1120 	cp a,#TK_INTGR
      00050D 26 11            [ 1] 1121 	jrne 2$
      00050F A3 00 01         [ 2] 1122 	cpw x,#1 
      000512 2A 05            [ 1] 1123 	jrpl 1$
      000514 A6 0A            [ 1] 1124 	ld a,#ERR_BAD_VALUE
      000516 CC 08 81         [ 2] 1125 	jp tb_error
      000519 CF 16 E0         [ 2] 1126 1$:	ldw pad,x 
      00051C 90 AE 16 E3      [ 2] 1127 	ldw y,#pad+3 
      000520 90 A3 17 60      [ 2] 1128 2$:	cpw y,#stack_full 
      000524 25 05            [ 1] 1129 	jrult 3$
      000526 A6 0F            [ 1] 1130 	ld a,#ERR_BUF_FULL 
      000528 CC 08 81         [ 2] 1131 	jp tb_error 
      00052B                       1132 3$:	
      00052B 93               [ 1] 1133 	ldw x,y 
      00052C CD 0C 01         [ 4] 1134 	call get_token 
      00052F A1 00            [ 1] 1135 	cp a,#TK_NONE 
      000531 26 ED            [ 1] 1136 	jrne 2$ 
                                   1137 ; compilation completed  
      000533 72 A2 16 E0      [ 2] 1138 	subw y,#pad
      000537 90 9F            [ 1] 1139     ld a,yl
      000539 AE 16 E0         [ 2] 1140 	ldw x,#pad 
      00053C CF 00 17         [ 2] 1141 	ldw ptr16,x 
      00053F E7 02            [ 1] 1142 	ld (2,x),a 
      000541 FE               [ 2] 1143 	ldw x,(x)
      000542 27 09            [ 1] 1144 	jreq 10$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000544 CD 04 7F         [ 4] 1145 	call insert_line
      000547 72 5F 00 03      [ 1] 1146 	clr  count 
      00054B 20 0F            [ 2] 1147 	jra  11$ 
      00054D                       1148 10$: ; line# is zero 
      00054D CE 00 17         [ 2] 1149 	ldw x,ptr16  
      000550 CF 00 04         [ 2] 1150 	ldw basicptr,x 
      000553 E6 02            [ 1] 1151 	ld a,(2,x)
      000555 C7 00 03         [ 1] 1152 	ld count,a 
      000558 35 03 00 01      [ 1] 1153 	mov in,#3 
      00055C                       1154 11$:
      00055C                       1155 	_drop VSIZE 
      00055C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00055E 72 1B 00 23      [ 1] 1156 	bres flags,#FCOMP 
      000562 81               [ 4] 1157 	ret 
                                   1158 
                                   1159 ;------------------------------------
                                   1160 ;  set all variables to zero 
                                   1161 ; input:
                                   1162 ;   none 
                                   1163 ; output:
                                   1164 ;	none
                                   1165 ;------------------------------------
      000563                       1166 clear_vars:
      000563 AE 00 2F         [ 2] 1167 	ldw x,#vars 
      000566 90 AE 00 34      [ 2] 1168 	ldw y,#2*26 
      00056A 7F               [ 1] 1169 1$:	clr (x)
      00056B 5C               [ 2] 1170 	incw x 
      00056C 90 5A            [ 2] 1171 	decw y 
      00056E 26 FA            [ 1] 1172 	jrne 1$
      000570 81               [ 4] 1173 	ret 
                                   1174 
                                   1175 ;-------------------------------------
                                   1176 ; check if A is a letter 
                                   1177 ; input:
                                   1178 ;   A 			character to test 
                                   1179 ; output:
                                   1180 ;   C flag      1 true, 0 false 
                                   1181 ;-------------------------------------
      000571                       1182 is_alpha:
      000571 A1 41            [ 1] 1183 	cp a,#'A 
      000573 8C               [ 1] 1184 	ccf 
      000574 24 0B            [ 1] 1185 	jrnc 9$ 
      000576 A1 5B            [ 1] 1186 	cp a,#'Z+1 
      000578 25 07            [ 1] 1187 	jrc 9$ 
      00057A A1 61            [ 1] 1188 	cp a,#'a 
      00057C 8C               [ 1] 1189 	ccf 
      00057D 24 02            [ 1] 1190 	jrnc 9$
      00057F A1 7B            [ 1] 1191 	cp a,#'z+1
      000581 81               [ 4] 1192 9$: ret 	
                                   1193 
                                   1194 ;------------------------------------
                                   1195 ; check if character in {'0'..'9'}
                                   1196 ; input:
                                   1197 ;    A  character to test
                                   1198 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1199 ;    Carry  0 not digit | 1 digit
                                   1200 ;------------------------------------
      000582                       1201 is_digit:
      000582 A1 30            [ 1] 1202 	cp a,#'0
      000584 25 03            [ 1] 1203 	jrc 1$
      000586 A1 3A            [ 1] 1204     cp a,#'9+1
      000588 8C               [ 1] 1205 	ccf 
      000589 8C               [ 1] 1206 1$:	ccf 
      00058A 81               [ 4] 1207     ret
                                   1208 
                                   1209 ;-------------------------------------
                                   1210 ; return true if character in  A 
                                   1211 ; is letter or digit.
                                   1212 ; input:
                                   1213 ;   A     ASCII character 
                                   1214 ; output:
                                   1215 ;   A     no change 
                                   1216 ;   Carry    0 false| 1 true 
                                   1217 ;--------------------------------------
      00058B                       1218 is_alnum:
      00058B CD 05 82         [ 4] 1219 	call is_digit
      00058E 25 03            [ 1] 1220 	jrc 1$ 
      000590 CD 05 71         [ 4] 1221 	call is_alpha
      000593 81               [ 4] 1222 1$:	ret 
                                   1223 
                                   1224 
                                   1225 ;-------------------------------------
                                   1226 ;  program initialization entry point 
                                   1227 ;-------------------------------------
                           000001  1228 	MAJOR=1
                           000000  1229 	MINOR=0
      000594 0A 0A 54 69 6E 79 20  1230 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0005DA                       1231 cold_start:
                                   1232 ;set stack 
      0005DA AE 17 FF         [ 2] 1233 	ldw x,#STACK_EMPTY
      0005DD 94               [ 1] 1234 	ldw sp,x   
                                   1235 ; clear all ram 
      0005DE 7F               [ 1] 1236 0$: clr (x)
      0005DF 5A               [ 2] 1237 	decw x 
      0005E0 26 FC            [ 1] 1238 	jrne 0$
                                   1239 ; activate pull up on all inputs 
      0005E2 A6 FF            [ 1] 1240 	ld a,#255 
      0005E4 C7 50 03         [ 1] 1241 	ld PA_CR1,a 
      0005E7 C7 50 08         [ 1] 1242 	ld PB_CR1,a 
      0005EA C7 50 0D         [ 1] 1243 	ld PC_CR1,a 
      0005ED C7 50 12         [ 1] 1244 	ld PD_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005F0 C7 50 17         [ 1] 1245 	ld PE_CR1,a 
      0005F3 C7 50 1C         [ 1] 1246 	ld PF_CR1,a 
      0005F6 C7 50 21         [ 1] 1247 	ld PG_CR1,a 
      0005F9 C7 50 2B         [ 1] 1248 	ld PI_CR1,a
                                   1249 ; set LD2 pin as output and turn it on
      0005FC 72 1A 50 0D      [ 1] 1250     bset PC_CR1,#LED2_BIT
      000600 72 1A 50 0E      [ 1] 1251     bset PC_CR2,#LED2_BIT
      000604 72 1A 50 0C      [ 1] 1252     bset PC_DDR,#LED2_BIT
      000608 72 1A 50 0A      [ 1] 1253 	bset PC_ODR,#LED2_BIT 
                                   1254 ; disable schmitt triggers on Arduino CN4 analog inputs
      00060C 55 00 3F 54 07   [ 1] 1255 	mov ADC_TDRL,0x3f
                                   1256 ; disable peripherals clocks
                                   1257 ;	clr CLK_PCKENR1 
                                   1258 ;	clr CLK_PCKENR2
      000611 72 5F 50 F2      [ 1] 1259 	clr AWU_TBR 
      000615 72 14 50 CA      [ 1] 1260 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1261 ; select internal clock no divisor: 16 Mhz 	
      000619 A6 E1            [ 1] 1262 	ld a,#CLK_SWR_HSI 
      00061B 5F               [ 1] 1263 	clrw x  
      00061C CD 00 B5         [ 4] 1264     call clock_init 
      00061F CD 00 D8         [ 4] 1265 	call timer4_init
      000622 CD 00 CB         [ 4] 1266 	call timer2_init
                                   1267 ; UART1 at 115200 BAUD
      000625 CD 02 7D         [ 4] 1268 	call uart1_init
                                   1269 ; activate PE_4 (user button interrupt)
      000628 72 18 50 18      [ 1] 1270     bset PE_CR2,#USR_BTN_BIT 
                                   1271 ; display system information
      00062C AE 05 94         [ 2] 1272 	ldw x,#software 
      00062F CD 00 00         [ 4] 1273 	call puts 
      000632 A6 01            [ 1] 1274 	ld a,#MAJOR 
      000634 C7 00 0D         [ 1] 1275 	ld acc8,a 
      000637 5F               [ 1] 1276 	clrw x 
      000638 CF 00 0B         [ 2] 1277 	ldw acc24,x
      00063B 72 5F 00 24      [ 1] 1278 	clr tab_width  
      00063F 35 0A 00 0A      [ 1] 1279 	mov base, #10 
      000643 CD 09 E2         [ 4] 1280 	call prti24 
      000646 A6 2E            [ 1] 1281 	ld a,#'.
      000648 CD 02 C0         [ 4] 1282 	call putc 
      00064B A6 00            [ 1] 1283 	ld a,#MINOR 
      00064D C7 00 0D         [ 1] 1284 	ld acc8,a 
      000650 5F               [ 1] 1285 	clrw x 
      000651 CF 00 0B         [ 2] 1286 	ldw acc24,x 
      000654 CD 09 E2         [ 4] 1287 	call prti24
      000657 A6 0D            [ 1] 1288 	ld a,#CR 
      000659 CD 02 C0         [ 4] 1289 	call putc
      00065C CD 1A 37         [ 4] 1290 	call seek_fdrive 
      00065F 9A               [ 1] 1291 	rim 
      000660 72 5C 00 15      [ 1] 1292 	inc seedy+1 
      000664 72 5C 00 13      [ 1] 1293 	inc seedx+1 
      000668 CD 06 E9         [ 4] 1294 	call clear_basic
      00066B CD 12 4F         [ 4] 1295 	call ubound 
                                   1296 ;	jra 2$	
      00066E CD 18 85         [ 4] 1297 	call beep_1khz  
      000671 72 1B 50 0A      [ 1] 1298 2$:	bres PC_ODR,#LED2_BIT	
      000675 CD 06 7E         [ 4] 1299 	call warm_init
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000678 CD 06 AB         [ 4] 1300 	call load_autorun
      00067B CC 09 09         [ 2] 1301     jp cmd_line  
                                   1302 
      00067E                       1303 warm_init:
      00067E 72 5F 00 23      [ 1] 1304 	clr flags 
      000682 72 5F 00 20      [ 1] 1305 	clr loop_depth 
      000686 35 04 00 24      [ 1] 1306 	mov tab_width,#TAB_WIDTH 
      00068A 35 0A 00 0A      [ 1] 1307 	mov base,#10 
      00068E AE 00 00         [ 2] 1308 	ldw x,#0 
      000691 CF 00 04         [ 2] 1309 	ldw basicptr,x 
      000694 CF 00 00         [ 2] 1310 	ldw in.w,x 
      000697 72 5F 00 03      [ 1] 1311 	clr count
      00069B 81               [ 4] 1312 	ret 
                                   1313 
                                   1314 ;--------------------------
                                   1315 ; called by tb_error when
                                   1316 ; flag FAUTORUN is set.
                                   1317 ; There is a bug in autorun 
                                   1318 ; program so cancel it.
                                   1319 ;---------------------------
      00069C                       1320 cancel_autorun:
      00069C AE 40 00         [ 2] 1321 	ldw x,#AUTORUN_NAME 
      00069F CF 00 17         [ 2] 1322 	ldw farptr+1,x 
      0006A2 4F               [ 1] 1323 	clr a
      0006A3 5F               [ 1] 1324 	clrw x  
      0006A4 C7 00 16         [ 1] 1325 	ld farptr,a 
      0006A7 CD 01 E5         [ 4] 1326 	call write_byte 
      0006AA 81               [ 4] 1327 	ret 
                                   1328 
                                   1329 
                                   1330 ;--------------------------
                                   1331 ; if autorun file defined 
                                   1332 ; in eeprom address AUTORUN_NAME 
                                   1333 ; load and run it.
                                   1334 ;-------------------------
      0006AB                       1335 load_autorun:
      0006AB 90 AE 40 00      [ 2] 1336 	ldw y,#AUTORUN_NAME
      0006AF 90 F6            [ 1] 1337 	ld a,(y)
      0006B1 27 20            [ 1] 1338 	jreq 9$
      0006B3 CD 1A 9D         [ 4] 1339 	call search_file
      0006B6 25 05            [ 1] 1340 	jrc 2$ 
                                   1341 ; if file doesn't exit
      0006B8 CD 06 9C         [ 4] 1342 	call cancel_autorun
      0006BB 20 16            [ 2] 1343 	jra 9$ 
      0006BD CD 1B B6         [ 4] 1344 2$:	call load_file
      0006C0 AE 40 00         [ 2] 1345 	ldw x,#AUTORUN_NAME 
      0006C3 CD 00 00         [ 4] 1346 	call puts
      0006C6 AE 06 D4         [ 2] 1347 	ldw x,#autorun_msg 
      0006C9 CD 00 00         [ 4] 1348 	call puts 
      0006CC 72 1C 00 23      [ 1] 1349 	bset flags,#FAUTORUN 
      0006D0 CC 18 57         [ 2] 1350 	jp run_it    
      0006D3 81               [ 4] 1351 9$: ret 	
                                   1352 
      0006D4 20 6C 6F 61 64 65 64  1353 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



             6E 6E 69 6E 67 0A 00
                                   1354 ;---------------------------
                                   1355 ; reset BASIC text variables 
                                   1356 ; and clear variables 
                                   1357 ;---------------------------
      0006E9                       1358 clear_basic:
      0006E9 72 5F 00 03      [ 1] 1359 	clr count
      0006ED 72 5F 00 01      [ 1] 1360 	clr in  
      0006F1 AE 00 63         [ 2] 1361 	ldw x,#free_ram 
      0006F4 CF 00 1C         [ 2] 1362 	ldw txtbgn,x 
      0006F7 CF 00 1E         [ 2] 1363 	ldw txtend,x 
      0006FA CD 05 63         [ 4] 1364 	call clear_vars 
      0006FD 81               [ 4] 1365 	ret 
                                   1366 
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1368 ;;   Tiny BASIC error messages     ;;
                                   1369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006FE                       1370 err_msg:
      0006FE 00 00 07 1E 07 2B 07  1371 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             39 07 52 07 61
      00070A 07 77 07 8D 07 A7 07  1372 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B8 07 C9
      000714 07 D5 08 08 08 18 08  1373 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             2C 08 3F
                                   1374 
      00071E 4D 65 6D 6F 72 79 20  1375 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      00072B 73 79 6E 74 61 78 20  1376 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000739 6D 61 74 68 20 6F 70  1377 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      000752 64 69 76 69 73 69 6F  1378 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000761 69 6E 76 61 6C 69 64  1379 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000777 72 75 6E 20 74 69 6D  1380 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00078D 63 6F 6D 6D 61 6E 64  1381 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0007A7 64 75 70 6C 69 63 61  1382 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0007B8 46 69 6C 65 20 6E 6F  1383 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0007C9 62 61 64 20 76 61 6C  1384 err_bad_value: .asciz "bad value.\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             75 65 2E 0A 00
      0007D5 46 69 6C 65 20 69 6E  1385 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000808 4E 6F 20 64 61 74 61  1386 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000818 4E 6F 20 70 72 6F 67  1387 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      00082C 46 69 6C 65 20 73 79  1388 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      00083F 42 75 66 66 65 72 20  1389 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1390 
      00084C 0A 72 75 6E 20 74 69  1391 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      00085E 0A 63 6F 6D 70 69 6C  1392 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      00086F 6C 61 73 74 20 74 6F  1393 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1394 
      00087F                       1395 syntax_error:
      00087F A6 02            [ 1] 1396 	ld a,#ERR_SYNTAX 
                                   1397 
      000881                       1398 tb_error:
      000881 72 0A 00 23 47   [ 2] 1399 	btjt flags,#FCOMP,1$
      000886 88               [ 1] 1400 	push a 
      000887 AE 08 4C         [ 2] 1401 	ldw x, #rt_msg 
      00088A CD 00 00         [ 4] 1402 	call puts 
      00088D 84               [ 1] 1403 	pop a 
      00088E AE 06 FE         [ 2] 1404 	ldw x, #err_msg 
      000891 72 5F 00 0C      [ 1] 1405 	clr acc16 
      000895 48               [ 1] 1406 	sll a
      000896 72 59 00 0C      [ 1] 1407 	rlc acc16  
      00089A C7 00 0D         [ 1] 1408 	ld acc8, a 
      00089D 72 BB 00 0C      [ 2] 1409 	addw x,acc16 
      0008A1 FE               [ 2] 1410 	ldw x,(x)
      0008A2 CD 00 00         [ 4] 1411 	call puts
      0008A5 CE 00 04         [ 2] 1412 	ldw x,basicptr
      0008A8 C6 00 01         [ 1] 1413 	ld a,in 
      0008AB CD 15 23         [ 4] 1414 	call prt_basic_line
      0008AE AE 08 6F         [ 2] 1415 	ldw x,#tk_id 
      0008B1 CD 00 00         [ 4] 1416 	call puts 
      0008B4 C6 00 02         [ 1] 1417 	ld a,in.saved 
      0008B7 5F               [ 1] 1418 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008B8 97               [ 1] 1419 	ld xl,a 
      0008B9 72 BB 00 04      [ 2] 1420 	addw x,basicptr 
      0008BD F6               [ 1] 1421 	ld a,(x)
      0008BE 5F               [ 1] 1422 	clrw x 
      0008BF 97               [ 1] 1423 	ld xl,a 
      0008C0 CD 09 D2         [ 4] 1424 	call print_int
      0008C3 72 0D 00 23 3A   [ 2] 1425 	btjf flags,#FAUTORUN ,6$
      0008C8 CD 06 9C         [ 4] 1426 	call cancel_autorun  
      0008CB 20 35            [ 2] 1427 	jra 6$
      0008CD                       1428 1$:	
      0008CD 88               [ 1] 1429 	push a 
      0008CE AE 08 5E         [ 2] 1430 	ldw x,#comp_msg
      0008D1 CD 00 00         [ 4] 1431 	call puts 
      0008D4 84               [ 1] 1432 	pop a 
      0008D5 AE 06 FE         [ 2] 1433 	ldw x, #err_msg 
      0008D8 72 5F 00 0C      [ 1] 1434 	clr acc16 
      0008DC 48               [ 1] 1435 	sll a
      0008DD 72 59 00 0C      [ 1] 1436 	rlc acc16  
      0008E1 C7 00 0D         [ 1] 1437 	ld acc8, a 
      0008E4 72 BB 00 0C      [ 2] 1438 	addw x,acc16 
      0008E8 FE               [ 2] 1439 	ldw x,(x)
      0008E9 CD 00 00         [ 4] 1440 	call puts
      0008EC AE 16 90         [ 2] 1441 	ldw x,#tib
      0008EF CD 00 00         [ 4] 1442 	call puts 
      0008F2 A6 0D            [ 1] 1443 	ld a,#CR 
      0008F4 CD 02 C0         [ 4] 1444 	call putc
      0008F7 CE 00 00         [ 2] 1445 	ldw x,in.w
      0008FA CD 00 00         [ 4] 1446 	call spaces
      0008FD A6 5E            [ 1] 1447 	ld a,#'^
      0008FF CD 02 C0         [ 4] 1448 	call putc 
      000902 AE 17 FF         [ 2] 1449 6$: ldw x,#STACK_EMPTY 
      000905 94               [ 1] 1450     ldw sp,x
      000906                       1451 warm_start:
      000906 CD 06 7E         [ 4] 1452 	call warm_init
                                   1453 ;----------------------------
                                   1454 ;   BASIC interpreter
                                   1455 ;----------------------------
      000909                       1456 cmd_line: ; user interface 
      000909 A6 0D            [ 1] 1457 	ld a,#CR 
      00090B CD 02 C0         [ 4] 1458 	call putc 
      00090E A6 3E            [ 1] 1459 	ld a,#'> 
      000910 CD 02 C0         [ 4] 1460 	call putc
      000913 CD 00 00         [ 4] 1461 	call readln
      000916 72 5D 00 03      [ 1] 1462 	tnz count 
      00091A 27 ED            [ 1] 1463 	jreq cmd_line
      00091C CD 04 F0         [ 4] 1464 	call compile
                                   1465 ; if text begin with a line number
                                   1466 ; the compiler set count to zero    
                                   1467 ; so code is not interpreted
      00091F 72 5D 00 03      [ 1] 1468 	tnz count 
      000923 27 E4            [ 1] 1469 	jreq cmd_line
                                   1470 
                                   1471 ; if direct command 
                                   1472 ; it's ready to interpret 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1474 ;; This is the interpreter loop
                                   1475 ;; for each BASIC code line. 
                                   1476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      000925                       1477 interpreter: 
      000925 C6 00 01         [ 1] 1478 	ld a,in 
      000928 C1 00 03         [ 1] 1479 	cp a,count 
      00092B 2B 1D            [ 1] 1480 	jrmi interp_loop
      00092D                       1481 next_line:
      00092D 72 01 00 23 D7   [ 2] 1482 	btjf flags, #FRUN, cmd_line
      000932 CE 00 04         [ 2] 1483 	ldw x,basicptr
      000935 72 BB 00 00      [ 2] 1484 	addw x,in.w 
      000939 C3 00 1E         [ 2] 1485 	cpw x,txtend 
      00093C 2A C8            [ 1] 1486 	jrpl warm_start
      00093E CF 00 04         [ 2] 1487 	ldw basicptr,x ; start of next line  
      000941 E6 02            [ 1] 1488 	ld a,(2,x)
      000943 C7 00 03         [ 1] 1489 	ld count,a 
      000946 35 03 00 01      [ 1] 1490 	mov in,#3 ; skip first 3 bytes of line 
      00094A                       1491 interp_loop: 
      00094A CD 09 71         [ 4] 1492 	call next_token
      00094D A1 00            [ 1] 1493 	cp a,#TK_NONE 
      00094F 27 DC            [ 1] 1494 	jreq next_line 
      000951 A1 80            [ 1] 1495 	cp a,#TK_CMD
      000953 26 03            [ 1] 1496 	jrne 1$
      000955 FD               [ 4] 1497 	call (x) 
      000956 20 F2            [ 2] 1498 	jra interp_loop 
      000958                       1499 1$:	 
      000958 A1 85            [ 1] 1500 	cp a,#TK_VAR
      00095A 26 05            [ 1] 1501 	jrne 2$
      00095C CD 12 82         [ 4] 1502 	call let_var  
      00095F 20 E9            [ 2] 1503 	jra interp_loop 
      000961                       1504 2$:	
      000961 A1 06            [ 1] 1505 	cp a,#TK_ARRAY 
      000963 26 05            [ 1] 1506 	jrne 3$
      000965 CD 12 7F         [ 4] 1507 	call let_array 
      000968 20 E0            [ 2] 1508 	jra interp_loop
      00096A                       1509 3$:	
      00096A A1 01            [ 1] 1510 	cp a,#TK_COLON 
      00096C 27 DC            [ 1] 1511 	jreq interp_loop 
      00096E CC 08 7F         [ 2] 1512 	jp syntax_error 
                                   1513 
                                   1514 		
                                   1515 ;--------------------------
                                   1516 ; extract next token from
                                   1517 ; token list 
                                   1518 ; basicptr -> base address 
                                   1519 ; in  -> offset in list array 
                                   1520 ; output:
                                   1521 ;   A 		token attribute
                                   1522 ;   X 		token value if there is one
                                   1523 ;----------------------------------------
      000971                       1524 next_token:
      000971 5F               [ 1] 1525 	clrw x 
      000972 C6 00 01         [ 1] 1526 	ld a,in 
      000975 C0 00 03         [ 1] 1527 	sub a,count ; don't replace sub by cp!  
      000978 2B 01            [ 1] 1528 	jrmi 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00097A 81               [ 4] 1529 	ret  ; end of BASIC line 
      00097B                       1530 0$: 
      00097B 55 00 01 00 02   [ 1] 1531 	mov in.saved,in 
      000980 90 CE 00 04      [ 2] 1532 	ldw y,basicptr 
      000984 91 D6 00         [ 4] 1533 	ld a,([in.w],y)
      000987 72 5C 00 01      [ 1] 1534 	inc in  
      00098B 4D               [ 1] 1535 	tnz a 
      00098C 2B 2A            [ 1] 1536 	jrmi 6$
      00098E A1 06            [ 1] 1537 	cp a,#TK_ARRAY
      000990 2A 3F            [ 1] 1538 	jrpl 9$  ; no attribute for these
      000992 A1 01            [ 1] 1539 	cp a,#TK_COLON
      000994 27 3B            [ 1] 1540 	jreq 9$  
      000996                       1541 1$: ; 
      000996 A1 03            [ 1] 1542 	cp a,#TK_CHAR
      000998 26 0A            [ 1] 1543 	jrne 2$
      00099A 41               [ 1] 1544 	exg a,xl
      00099B 91 D6 00         [ 4] 1545 	ld a,([in.w],y)
      00099E 72 5C 00 01      [ 1] 1546 	inc in 
      0009A2 41               [ 1] 1547 	exg a,xl  
      0009A3 81               [ 4] 1548 	ret
      0009A4 A1 02            [ 1] 1549 2$:	cp a,#TK_QSTR 
      0009A6 26 29            [ 1] 1550 	jrne 9$
      0009A8 93               [ 1] 1551 	ldw x,y 
      0009A9 72 BB 00 00      [ 2] 1552 	addw x,in.w ; pointer to string 
                                   1553 ; move pointer after string 
      0009AD 91 6D 00         [ 4] 1554 3$:	tnz ([in.w],y)
      0009B0 27 1B            [ 1] 1555 	jreq 8$
      0009B2 72 5C 00 01      [ 1] 1556 	inc in 
      0009B6 20 F5            [ 2] 1557 	jra 3$
      0009B8                       1558 6$: 
      0009B8 72 B9 00 00      [ 2] 1559 	addw y,in.w 
      0009BC 90 FE            [ 2] 1560 	ldw y,(y)
      0009BE A1 84            [ 1] 1561 	cp a,#TK_INTGR
      0009C0 2A 06            [ 1] 1562 	jrpl 7$
      0009C2 72 A9 27 11      [ 2] 1563 	addw y,#code_addr
      0009C6 90 FE            [ 2] 1564 	ldw y,(y) 
      0009C8 51               [ 1] 1565 7$:	exgw x,y 
      0009C9 72 5C 00 01      [ 1] 1566 	inc in
      0009CD 72 5C 00 01      [ 1] 1567 8$:	inc in 
      0009D1                       1568 9$: 
      0009D1 81               [ 4] 1569 	ret	
                                   1570 
                                   1571 ;-----------------------------------
                                   1572 ; print a 16 bit integer 
                                   1573 ; using variable 'base' as conversion
                                   1574 ; format.
                                   1575 ; input:
                                   1576 ;   X       integer to print 
                                   1577 ;   'base'    conversion base 
                                   1578 ; output:
                                   1579 ;   none 
                                   1580 ;-----------------------------------
      0009D2                       1581 print_int:
      0009D2 72 5F 00 0B      [ 1] 1582 	clr acc24 
      0009D6 CF 00 0C         [ 2] 1583 	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009D9 72 0F 00 0C 04   [ 2] 1584 	btjf acc16,#7,prti24
      0009DE 72 53 00 0B      [ 1] 1585 	cpl acc24 
                                   1586 
                                   1587 ;------------------------------------
                                   1588 ; print integer in acc24 
                                   1589 ; input:
                                   1590 ;	acc24 		integer to print 
                                   1591 ;	'base' 		numerical base for conversion 
                                   1592 ;   'tab_width' field width 
                                   1593 ;  output:
                                   1594 ;    A          string length
                                   1595 ;------------------------------------
      0009E2                       1596 prti24:
      0009E2 CD 09 EE         [ 4] 1597     call itoa  ; conversion entier en  .asciz
      0009E5 CD 13 3F         [ 4] 1598 	call right_align  
      0009E8 88               [ 1] 1599 	push a 
      0009E9 CD 00 00         [ 4] 1600 	call puts
      0009EC 84               [ 1] 1601 	pop a 
      0009ED 81               [ 4] 1602     ret	
                                   1603 
                                   1604 ;------------------------------------
                                   1605 ; convert integer in acc24 to string
                                   1606 ; input:
                                   1607 ;   'base'	conversion base 
                                   1608 ;	acc24	integer to convert
                                   1609 ; output:
                                   1610 ;   X  		pointer to first char of string
                                   1611 ;   A       string length
                                   1612 ;------------------------------------
                           000001  1613 	SIGN=1  ; integer sign 
                           000002  1614 	LEN=2 
                           000003  1615 	PSTR=3
                           000004  1616 	VSIZE=4 ;locals size
      0009EE                       1617 itoa:
      0009EE                       1618 	_vars VSIZE
      0009EE 52 04            [ 2]    1     sub sp,#VSIZE 
      0009F0 0F 02            [ 1] 1619 	clr (LEN,sp) ; string length  
      0009F2 0F 01            [ 1] 1620 	clr (SIGN,sp)    ; sign
      0009F4 C6 00 0A         [ 1] 1621 	ld a,base 
      0009F7 A1 0A            [ 1] 1622 	cp a,#10
      0009F9 26 0A            [ 1] 1623 	jrne 1$
                                   1624 	; base 10 string display with negative sign if bit 23==1
      0009FB 72 0F 00 0B 05   [ 2] 1625 	btjf acc24,#7,1$
      000A00 03 01            [ 1] 1626 	cpl (SIGN,sp)
      000A02 CD 0A B5         [ 4] 1627 	call neg_acc24
      000A05                       1628 1$:
                                   1629 ; initialize string pointer 
      000A05 AE 16 90         [ 2] 1630 	ldw x,#tib 
      000A08 1C 00 50         [ 2] 1631 	addw x,#TIB_SIZE
      000A0B 5A               [ 2] 1632 	decw x 
      000A0C 7F               [ 1] 1633 	clr (x)
      000A0D                       1634 itoa_loop:
      000A0D C6 00 0A         [ 1] 1635     ld a,base
      000A10 1F 03            [ 2] 1636 	ldw (PSTR,sp),x 
      000A12 CD 0A 53         [ 4] 1637     call divu24_8 ; acc24/A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000A15 1E 03            [ 2] 1638 	ldw x,(PSTR,sp)
      000A17 AB 30            [ 1] 1639     add a,#'0  ; remainder of division
      000A19 A1 3A            [ 1] 1640     cp a,#'9+1
      000A1B 2B 02            [ 1] 1641     jrmi 2$
      000A1D AB 07            [ 1] 1642     add a,#7 
      000A1F                       1643 2$:	
      000A1F 5A               [ 2] 1644 	decw x
      000A20 F7               [ 1] 1645     ld (x),a
      000A21 0C 02            [ 1] 1646 	inc (LEN,sp)
                                   1647 	; if acc24==0 conversion done
      000A23 C6 00 0B         [ 1] 1648 	ld a,acc24
      000A26 CA 00 0C         [ 1] 1649 	or a,acc16
      000A29 CA 00 0D         [ 1] 1650 	or a,acc8
      000A2C 26 DF            [ 1] 1651     jrne itoa_loop
                                   1652 	;conversion done, next add '$' or '-' as required
      000A2E C6 00 0A         [ 1] 1653 	ld a,base 
      000A31 A1 10            [ 1] 1654 	cp a,#16
      000A33 27 08            [ 1] 1655 	jreq 8$
      000A35 7B 01            [ 1] 1656 	ld a,(SIGN,sp)
      000A37 27 15            [ 1] 1657     jreq 10$
      000A39 A6 2D            [ 1] 1658     ld a,#'-
      000A3B 20 0D            [ 2] 1659 	jra 9$ 
                                   1660 ; don't print more than 4 digits
                                   1661 ; in hexadecimal 	
      000A3D 7B 02            [ 1] 1662 8$: ld a,(LEN,sp) 
      000A3F A1 05            [ 1] 1663 	cp a,#5 
      000A41 2B 05            [ 1] 1664 	jrmi 81$
      000A43 5C               [ 2] 1665 	incw x
      000A44 0A 02            [ 1] 1666 	dec (LEN,sp)
      000A46 20 F5            [ 2] 1667 	jra 8$
      000A48                       1668 81$:	
      000A48 A6 24            [ 1] 1669 	ld a,#'$ 
      000A4A 5A               [ 2] 1670 9$: decw x
      000A4B F7               [ 1] 1671     ld (x),a
      000A4C 0C 02            [ 1] 1672 	inc (LEN,sp)
      000A4E                       1673 10$:
      000A4E 7B 02            [ 1] 1674 	ld a,(LEN,sp)
      000A50                       1675 	_drop VSIZE
      000A50 5B 04            [ 2]    1     addw sp,#VSIZE 
      000A52 81               [ 4] 1676 	ret
                                   1677 
                                   1678 ;-------------------------------------
                                   1679 ; divide uint24_t by uint8_t
                                   1680 ; used to convert uint24_t to string
                                   1681 ; input:
                                   1682 ;	acc24	dividend
                                   1683 ;   A 		divisor
                                   1684 ; output:
                                   1685 ;   acc24	quotient
                                   1686 ;   A		remainder
                                   1687 ;------------------------------------- 
                                   1688 ; offset  on sp of arguments and locals
                           000001  1689 	U8   = 1   ; divisor on stack
                           000001  1690 	VSIZE =1
      000A53                       1691 divu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A53 89               [ 2] 1692 	pushw x ; save x
      000A54 88               [ 1] 1693 	push a 
                                   1694 	; ld dividend UU:MM bytes in X
      000A55 C6 00 0B         [ 1] 1695 	ld a, acc24
      000A58 95               [ 1] 1696 	ld xh,a
      000A59 C6 00 0C         [ 1] 1697 	ld a,acc24+1
      000A5C 97               [ 1] 1698 	ld xl,a
      000A5D 7B 01            [ 1] 1699 	ld a,(U8,SP) ; divisor
      000A5F 62               [ 2] 1700 	div x,a ; UU:MM/U8
      000A60 88               [ 1] 1701 	push a  ;save remainder
      000A61 9E               [ 1] 1702 	ld a,xh
      000A62 C7 00 0B         [ 1] 1703 	ld acc24,a
      000A65 9F               [ 1] 1704 	ld a,xl
      000A66 C7 00 0C         [ 1] 1705 	ld acc24+1,a
      000A69 84               [ 1] 1706 	pop a
      000A6A 95               [ 1] 1707 	ld xh,a
      000A6B C6 00 0D         [ 1] 1708 	ld a,acc24+2
      000A6E 97               [ 1] 1709 	ld xl,a
      000A6F 7B 01            [ 1] 1710 	ld a,(U8,sp) ; divisor
      000A71 62               [ 2] 1711 	div x,a  ; R:LL/U8
      000A72 6B 01            [ 1] 1712 	ld (U8,sp),a ; save remainder
      000A74 9F               [ 1] 1713 	ld a,xl
      000A75 C7 00 0D         [ 1] 1714 	ld acc24+2,a
      000A78 84               [ 1] 1715 	pop a
      000A79 85               [ 2] 1716 	popw x
      000A7A 81               [ 4] 1717 	ret
                                   1718 
                                   1719 ;--------------------------------------
                                   1720 ; unsigned multiply uint24_t by uint8_t
                                   1721 ; use to convert numerical string to uint24_t
                                   1722 ; input:
                                   1723 ;	acc24	uint24_t 
                                   1724 ;   A		uint8_t
                                   1725 ; output:
                                   1726 ;   acc24   A*acc24
                                   1727 ;-------------------------------------
                                   1728 ; local variables offset  on sp
                           000003  1729 	U8   = 3   ; A pushed on stack
                           000002  1730 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1731 	OVFH = 1  ; multiplication overflow high byte
                           000003  1732 	VSIZE = 3
      000A7B                       1733 mulu24_8:
      000A7B 89               [ 2] 1734 	pushw x    ; save X
                                   1735 	; local variables
      000A7C 88               [ 1] 1736 	push a     ; U8
      000A7D 5F               [ 1] 1737 	clrw x     ; initialize overflow to 0
      000A7E 89               [ 2] 1738 	pushw x    ; multiplication overflow
                                   1739 ; multiply low byte.
      000A7F C6 00 0D         [ 1] 1740 	ld a,acc24+2
      000A82 97               [ 1] 1741 	ld xl,a
      000A83 7B 03            [ 1] 1742 	ld a,(U8,sp)
      000A85 42               [ 4] 1743 	mul x,a
      000A86 9F               [ 1] 1744 	ld a,xl
      000A87 C7 00 0D         [ 1] 1745 	ld acc24+2,a
      000A8A 9E               [ 1] 1746 	ld a, xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A8B 6B 02            [ 1] 1747 	ld (OVFL,sp),a
                                   1748 ; multipy middle byte
      000A8D C6 00 0C         [ 1] 1749 	ld a,acc24+1
      000A90 97               [ 1] 1750 	ld xl,a
      000A91 7B 03            [ 1] 1751 	ld a, (U8,sp)
      000A93 42               [ 4] 1752 	mul x,a
                                   1753 ; add overflow to this partial product
      000A94 72 FB 01         [ 2] 1754 	addw x,(OVFH,sp)
      000A97 9F               [ 1] 1755 	ld a,xl
      000A98 C7 00 0C         [ 1] 1756 	ld acc24+1,a
      000A9B 4F               [ 1] 1757 	clr a
      000A9C A9 00            [ 1] 1758 	adc a,#0
      000A9E 6B 01            [ 1] 1759 	ld (OVFH,sp),a
      000AA0 9E               [ 1] 1760 	ld a,xh
      000AA1 6B 02            [ 1] 1761 	ld (OVFL,sp),a
                                   1762 ; multiply most signficant byte	
      000AA3 C6 00 0B         [ 1] 1763 	ld a, acc24
      000AA6 97               [ 1] 1764 	ld xl, a
      000AA7 7B 03            [ 1] 1765 	ld a, (U8,sp)
      000AA9 42               [ 4] 1766 	mul x,a
      000AAA 72 FB 01         [ 2] 1767 	addw x, (OVFH,sp)
      000AAD 9F               [ 1] 1768 	ld a, xl
      000AAE C7 00 0B         [ 1] 1769 	ld acc24,a
      000AB1 5B 03            [ 2] 1770     addw sp,#VSIZE
      000AB3 85               [ 2] 1771 	popw x
      000AB4 81               [ 4] 1772 	ret
                                   1773 
                                   1774 ;------------------------------------
                                   1775 ;  two's complement acc24
                                   1776 ;  input:
                                   1777 ;		acc24 variable
                                   1778 ;  output:
                                   1779 ;		acc24 variable
                                   1780 ;-------------------------------------
      000AB5                       1781 neg_acc24:
      000AB5 72 53 00 0D      [ 1] 1782 	cpl acc24+2
      000AB9 72 53 00 0C      [ 1] 1783 	cpl acc24+1
      000ABD 72 53 00 0B      [ 1] 1784 	cpl acc24
      000AC1 A6 01            [ 1] 1785 	ld a,#1
      000AC3 CB 00 0D         [ 1] 1786 	add a,acc24+2
      000AC6 C7 00 0D         [ 1] 1787 	ld acc24+2,a
      000AC9 4F               [ 1] 1788 	clr a
      000ACA C9 00 0C         [ 1] 1789 	adc a,acc24+1
      000ACD C7 00 0C         [ 1] 1790 	ld acc24+1,a 
      000AD0 4F               [ 1] 1791 	clr a 
      000AD1 C9 00 0B         [ 1] 1792 	adc a,acc24 
      000AD4 C7 00 0B         [ 1] 1793 	ld acc24,a 
      000AD7 81               [ 4] 1794 	ret
                                   1795 
                                   1796 
                                   1797 
                                   1798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1799 ;; compiler routines        ;;
                                   1800 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1801 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1802 ; parse quoted string 
                                   1803 ; input:
                                   1804 ;   Y 	pointer to tib 
                                   1805 ;   X   pointer to output buffer 
                                   1806 ; output:
                                   1807 ;	buffer   parsed string
                                   1808 ;------------------------------------
                           000001  1809 	PREV = 1
                           000002  1810 	CURR =2
                           000002  1811 	VSIZE=2
      000AD8                       1812 parse_quote: 
      000AD8                       1813 	_vars VSIZE 
      000AD8 52 02            [ 2]    1     sub sp,#VSIZE 
      000ADA 4F               [ 1] 1814 	clr a
      000ADB 6B 01            [ 1] 1815 1$:	ld (PREV,sp),a 
      000ADD                       1816 2$:	
      000ADD 91 D6 00         [ 4] 1817 	ld a,([in.w],y)
      000AE0 27 24            [ 1] 1818 	jreq 6$
      000AE2 72 5C 00 01      [ 1] 1819 	inc in 
      000AE6 6B 02            [ 1] 1820 	ld (CURR,sp),a 
      000AE8 A6 5C            [ 1] 1821 	ld a,#'\
      000AEA 11 01            [ 1] 1822 	cp a, (PREV,sp)
      000AEC 26 0A            [ 1] 1823 	jrne 3$
      000AEE 0F 01            [ 1] 1824 	clr (PREV,sp)
      000AF0 7B 02            [ 1] 1825 	ld a,(CURR,sp)
      000AF2 AD 1C            [ 4] 1826 	callr convert_escape
      000AF4 F7               [ 1] 1827 	ld (x),a 
      000AF5 5C               [ 2] 1828 	incw x 
      000AF6 20 E5            [ 2] 1829 	jra 2$
      000AF8                       1830 3$:
      000AF8 7B 02            [ 1] 1831 	ld a,(CURR,sp)
      000AFA A1 5C            [ 1] 1832 	cp a,#'\'
      000AFC 27 DD            [ 1] 1833 	jreq 1$
      000AFE A1 22            [ 1] 1834 	cp a,#'"
      000B00 27 04            [ 1] 1835 	jreq 6$ 
      000B02 F7               [ 1] 1836 	ld (x),a 
      000B03 5C               [ 2] 1837 	incw x 
      000B04 20 D7            [ 2] 1838 	jra 2$
      000B06                       1839 6$:
      000B06 7F               [ 1] 1840 	clr (x)
      000B07 5C               [ 2] 1841 	incw x 
      000B08 90 93            [ 1] 1842 	ldw y,x 
      000B0A 5F               [ 1] 1843 	clrw x 
      000B0B A6 02            [ 1] 1844 	ld a,#TK_QSTR  
      000B0D                       1845 	_drop VSIZE
      000B0D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B0F 81               [ 4] 1846 	ret 
                                   1847 
                                   1848 ;---------------------------------------
                                   1849 ; called by parse_quote
                                   1850 ; subtitute escaped character 
                                   1851 ; by their ASCII value .
                                   1852 ; input:
                                   1853 ;   A  character following '\'
                                   1854 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1855 ;   A  substitued char or same if not valid.
                                   1856 ;---------------------------------------
      000B10                       1857 convert_escape:
      000B10 89               [ 2] 1858 	pushw x 
      000B11 AE 0B 25         [ 2] 1859 	ldw x,#escaped 
      000B14 F1               [ 1] 1860 1$:	cp a,(x)
      000B15 27 06            [ 1] 1861 	jreq 2$
      000B17 7D               [ 1] 1862 	tnz (x)
      000B18 27 09            [ 1] 1863 	jreq 3$
      000B1A 5C               [ 2] 1864 	incw x 
      000B1B 20 F7            [ 2] 1865 	jra 1$
      000B1D 1D 0B 25         [ 2] 1866 2$: subw x,#escaped 
      000B20 9F               [ 1] 1867 	ld a,xl 
      000B21 AB 07            [ 1] 1868 	add a,#7
      000B23 85               [ 2] 1869 3$:	popw x 
      000B24 81               [ 4] 1870 	ret 
                                   1871 
      000B25 61 62 74 6E 76 66 72  1872 escaped: .asciz "abtnvfr"
             00
                                   1873 
                                   1874 ;-------------------------
                                   1875 ; integer parser 
                                   1876 ; input:
                                   1877 ;   X 		point to output buffer  
                                   1878 ;   Y 		point to tib 
                                   1879 ;   A 	    first digit|'$' 
                                   1880 ; output:  
                                   1881 ;   X 		integer 
                                   1882 ;   A 		TK_INTGR
                                   1883 ;   acc24   24 bits integer 
                                   1884 ;-------------------------
                           000001  1885 	BASE=1
                           000002  1886 	TCHAR=2 
                           000003  1887 	XSAVE=3
                           000004  1888 	VSIZE=4 
      000B2D                       1889 parse_integer: ; { -- n }
      000B2D 89               [ 2] 1890 	pushw x 	
      000B2E 4B 00            [ 1] 1891 	push #0 ; TCHAR
      000B30 4B 0A            [ 1] 1892 	push #10 ; BASE=10
      000B32 A1 24            [ 1] 1893 	cp a,#'$
      000B34 26 04            [ 1] 1894 	jrne 2$ 
      000B36                       1895     _drop #1
      000B36 5B 01            [ 2]    1     addw sp,##1 
      000B38 4B 10            [ 1] 1896 	push #16  ; BASE=16
      000B3A F7               [ 1] 1897 2$:	ld (x),a 
      000B3B 5C               [ 2] 1898 	incw x 
      000B3C 91 D6 00         [ 4] 1899 	ld a,([in.w],y)
      000B3F 72 5C 00 01      [ 1] 1900 	inc in 
      000B43 CD 0D C0         [ 4] 1901 	call to_upper 
      000B46 6B 02            [ 1] 1902 	ld (TCHAR,sp),a 
      000B48 CD 05 82         [ 4] 1903 	call is_digit 
      000B4B 25 ED            [ 1] 1904 	jrc 2$
      000B4D A6 10            [ 1] 1905 	ld a,#16 
      000B4F 11 01            [ 1] 1906 	cp a,(BASE,sp)
      000B51 26 0A            [ 1] 1907 	jrne 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B53 7B 02            [ 1] 1908 	ld a,(TCHAR,sp)
      000B55 A1 41            [ 1] 1909 	cp a,#'A 
      000B57 2B 04            [ 1] 1910 	jrmi 3$ 
      000B59 A1 47            [ 1] 1911 	cp a,#'G 
      000B5B 2B DD            [ 1] 1912 	jrmi 2$ 
      000B5D 72 5A 00 01      [ 1] 1913 3$: dec in 	
      000B61 7F               [ 1] 1914     clr (x)
      000B62 1E 03            [ 2] 1915 	ldw x,(XSAVE,sp)
      000B64 CD 0D CC         [ 4] 1916 	call atoi24
      000B67 90 93            [ 1] 1917 	ldw y,x 
      000B69 CE 00 0C         [ 2] 1918 	ldw x,acc16 
      000B6C A6 84            [ 1] 1919 	ld a,#TK_INTGR
      000B6E 90 FF            [ 2] 1920 	ldw (y),x 
      000B70 72 A9 00 02      [ 2] 1921 	addw y,#2
      000B74                       1922 	_drop VSIZE  
      000B74 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B76 81               [ 4] 1923 	ret 	
                                   1924 
                                   1925 ;-------------------------
                                   1926 ; binary integer parser
                                   1927 ; build integer in acc24  
                                   1928 ; input:
                                   1929 ;   X 		point to output buffer  
                                   1930 ;   Y 		point to tib 
                                   1931 ;   A 	    '&' 
                                   1932 ; output:  
                                   1933 ;   buffer  TK_INTGR integer  
                                   1934 ;   X 		int16 
                                   1935 ;   A 		TK_INTGR
                                   1936 ;   acc24    int24 
                                   1937 ;-------------------------
                           000001  1938 	BINARY=1 ; 24 bits integer 
                           000003  1939 	VSIZE=3
      000B77                       1940 parse_binary: ; { -- n }
      000B77 4B 00            [ 1] 1941 	push #0
      000B79 4B 00            [ 1] 1942 	push #0
      000B7B 4B 00            [ 1] 1943 	push #0
      000B7D                       1944 2$:	
      000B7D 91 D6 00         [ 4] 1945 	ld a,([in.w],y)
      000B80 72 5C 00 01      [ 1] 1946 	inc in 
      000B84 A1 30            [ 1] 1947 	cp a,#'0 
      000B86 27 06            [ 1] 1948 	jreq 3$
      000B88 A1 31            [ 1] 1949 	cp a,#'1 
      000B8A 27 02            [ 1] 1950 	jreq 3$ 
      000B8C 20 0B            [ 2] 1951 	jra bin_exit 
      000B8E A0 30            [ 1] 1952 3$: sub a,#'0 
      000B90 46               [ 1] 1953 	rrc a
      000B91 09 03            [ 1] 1954 	rlc (BINARY+2,sp) 
      000B93 09 02            [ 1] 1955 	rlc (BINARY+1,sp)
      000B95 09 01            [ 1] 1956 	rlc (BINARY,sp) 
      000B97 20 E4            [ 2] 1957 	jra 2$  
      000B99                       1958 bin_exit:
      000B99 72 5A 00 01      [ 1] 1959 	dec in 
      000B9D 90 93            [ 1] 1960 	ldw y,x
      000B9F 7B 01            [ 1] 1961 	ld a,(BINARY,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BA1 C7 00 0B         [ 1] 1962 	ld acc24,a 
      000BA4 1E 02            [ 2] 1963 	ldw x,(BINARY+1,sp)
      000BA6 CF 00 0C         [ 2] 1964 	ldw acc16,x
      000BA9 90 FF            [ 2] 1965 	ldw (y),x 
      000BAB 72 A9 00 02      [ 2] 1966 	addw y,#2  
      000BAF A6 84            [ 1] 1967 	ld a,#TK_INTGR 	
      000BB1                       1968 	_drop VSIZE 
      000BB1 5B 03            [ 2]    1     addw sp,#VSIZE 
      000BB3 81               [ 4] 1969 	ret
                                   1970 
                                   1971 ;---------------------------
                                   1972 ;  token begin with a letter,
                                   1973 ;  is keyword or variable. 	
                                   1974 ; input:
                                   1975 ;   X 		point to pad 
                                   1976 ;   Y 		point to text
                                   1977 ;   A 	    first letter  
                                   1978 ; output:
                                   1979 ;   X		exec_addr|var_addr 
                                   1980 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   1981 ;   pad 	keyword|var_name  
                                   1982 ;--------------------------  
                           000001  1983 	XFIRST=1
                           000002  1984 	VSIZE=2
      000BB4                       1985 parse_keyword: 
      000BB4 89               [ 2] 1986 	pushw x 
      000BB5                       1987 kw_loop:	
      000BB5 CD 0D C0         [ 4] 1988 	call to_upper 
      000BB8 F7               [ 1] 1989 	ld (x),a 
      000BB9 5C               [ 2] 1990 	incw x 
      000BBA 91 D6 00         [ 4] 1991 	ld a,([in.w],y)
      000BBD 72 5C 00 01      [ 1] 1992 	inc in 
      000BC1 CD 05 71         [ 4] 1993 	call is_alpha 
      000BC4 25 EF            [ 1] 1994 	jrc kw_loop
      000BC6 72 5A 00 01      [ 1] 1995 	dec in   
      000BCA 7F               [ 1] 1996 1$: clr (x)
      000BCB 1E 01            [ 2] 1997 	ldw x,(XFIRST,sp) 
      000BCD E6 01            [ 1] 1998 	ld a,(1,x)
      000BCF 26 13            [ 1] 1999 	jrne 2$
                                   2000 ; one letter variable name 
      000BD1 F6               [ 1] 2001 	ld a,(x) 
      000BD2 A0 41            [ 1] 2002 	sub a,#'A 
      000BD4 48               [ 1] 2003 	sll a 
      000BD5 88               [ 1] 2004 	push a 
      000BD6 4B 00            [ 1] 2005 	push #0
      000BD8 AE 00 2F         [ 2] 2006 	ldw x,#vars 
      000BDB 72 FB 01         [ 2] 2007 	addw x,(1,sp) ; X=var address 
      000BDE                       2008 	_drop 2 
      000BDE 5B 02            [ 2]    1     addw sp,#2 
      000BE0 A6 85            [ 1] 2009 	ld a,#TK_VAR 
      000BE2 20 0E            [ 2] 2010 	jra 4$ 
      000BE4                       2011 2$: ; check for keyword, otherwise syntax error.
      000BE4                       2012 	_ldx_dict kword_dict ; dictionary entry point
      000BE4 AE 27 0B         [ 2]    1     ldw x,#kword_dict+2
      000BE7 16 01            [ 2] 2013 	ldw y,(XFIRST,sp) ; name to search for
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BE9 CD 0F F8         [ 4] 2014 	call search_dict
      000BEC 4D               [ 1] 2015 	tnz a
      000BED 26 03            [ 1] 2016 	jrne 4$ 
      000BEF CC 08 7F         [ 2] 2017 	jp syntax_error
      000BF2                       2018 4$:	
      000BF2 16 01            [ 2] 2019 	ldw y,(XFIRST,sp)
      000BF4 90 F7            [ 1] 2020 	ld (y),a 
      000BF6 90 5C            [ 2] 2021 	incw y 
      000BF8 90 FF            [ 2] 2022 	ldw (y),x
      000BFA 72 A9 00 02      [ 2] 2023 	addw y,#2  
      000BFE                       2024 	_drop VSIZE 
      000BFE 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C00 81               [ 4] 2025 	ret  	
                                   2026 
                                   2027 
                                   2028 ;------------------------------------
                                   2029 ; scan text for next token
                                   2030 ; input: 
                                   2031 ;	X 		pointer to buffer where 
                                   2032 ;	        token id and value are copied 
                                   2033 ; use:
                                   2034 ;	Y   pointer to text in tib 
                                   2035 ; output:
                                   2036 ;   A       token attribute 
                                   2037 ;   X 		token value
                                   2038 ;   Y       updated position in output buffer   
                                   2039 ;------------------------------------
                                   2040 	; use to check special character 
                                   2041 	.macro _case c t  
                                   2042 	ld a,#c 
                                   2043 	cp a,(TCHAR,sp) 
                                   2044 	jrne t
                                   2045 	.endm 
                                   2046 
                           000001  2047 	TCHAR=1
                           000002  2048 	ATTRIB=2
                           000002  2049 	VSIZE=2
      000C01                       2050 get_token: 
      000C01                       2051 	_vars VSIZE
      000C01 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2052 ;	ld a,in 
                                   2053 ;	sub a,count
                                   2054 ;   jrmi 0$
                                   2055 ;	clr a 
                                   2056 ;	ret 
      000C03                       2057 0$: 
      000C03 90 AE 16 90      [ 2] 2058 	ldw y,#tib    	
      000C07 A6 20            [ 1] 2059 	ld a,#SPACE
      000C09 CD 0E 36         [ 4] 2060 	call skip
      000C0C 55 00 01 00 02   [ 1] 2061 	mov in.saved,in 
      000C11 91 D6 00         [ 4] 2062 	ld a,([in.w],y)
      000C14 26 05            [ 1] 2063 	jrne 1$
      000C16 90 93            [ 1] 2064 	ldw y,x 
      000C18 CC 0D BD         [ 2] 2065 	jp token_exit ; end of line 
      000C1B 72 5C 00 01      [ 1] 2066 1$:	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C1F CD 0D C0         [ 4] 2067 	call to_upper 
      000C22 6B 01            [ 1] 2068 	ld (TCHAR,sp),a 
                                   2069 ; check for quoted string
      000C24                       2070 str_tst:  	
      000C24                       2071 	_case '"' nbr_tst
      000C24 A6 22            [ 1]    1 	ld a,#'"' 
      000C26 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C28 26 0A            [ 1]    3 	jrne nbr_tst
      000C2A A6 02            [ 1] 2072 	ld a,#TK_QSTR
      000C2C F7               [ 1] 2073 	ld (x),a 
      000C2D 5C               [ 2] 2074 	incw x 
      000C2E CD 0A D8         [ 4] 2075 	call parse_quote
      000C31 CC 0D BD         [ 2] 2076 	jp token_exit
      000C34                       2077 nbr_tst:
                                   2078 ; check for hexadecimal number 
      000C34 A6 24            [ 1] 2079 	ld a,#'$'
      000C36 11 01            [ 1] 2080 	cp a,(TCHAR,sp) 
      000C38 27 17            [ 1] 2081 	jreq 1$
                                   2082 ;check for binary number 
      000C3A A6 26            [ 1] 2083 	ld a,#'&
      000C3C 11 01            [ 1] 2084 	cp a,(TCHAR,sp)
      000C3E 26 0A            [ 1] 2085 	jrne 0$
      000C40 A6 84            [ 1] 2086 	ld a,#TK_INTGR
      000C42 F7               [ 1] 2087 	ld (x),a 
      000C43 5C               [ 2] 2088 	incw x 
      000C44 CD 0B 77         [ 4] 2089 	call parse_binary ; expect binary integer 
      000C47 CC 0D BD         [ 2] 2090 	jp token_exit 
                                   2091 ; check for decimal number 	
      000C4A 7B 01            [ 1] 2092 0$:	ld a,(TCHAR,sp)
      000C4C CD 05 82         [ 4] 2093 	call is_digit
      000C4F 24 0C            [ 1] 2094 	jrnc 3$
      000C51 A6 84            [ 1] 2095 1$:	ld a,#TK_INTGR 
      000C53 F7               [ 1] 2096 	ld (x),a 
      000C54 5C               [ 2] 2097 	incw x 
      000C55 7B 01            [ 1] 2098 	ld a,(TCHAR,sp)
      000C57 CD 0B 2D         [ 4] 2099 	call parse_integer 
      000C5A CC 0D BD         [ 2] 2100 	jp token_exit 
      000C5D                       2101 3$: 
      000C5D                       2102 	_case '(' bkslsh_tst 
      000C5D A6 28            [ 1]    1 	ld a,#'(' 
      000C5F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C61 26 05            [ 1]    3 	jrne bkslsh_tst
      000C63 A6 07            [ 1] 2103 	ld a,#TK_LPAREN
      000C65 CC 0D B9         [ 2] 2104 	jp token_char   	
      000C68                       2105 bkslsh_tst: ; character token 
      000C68                       2106 	_case '\',rparnt_tst
      000C68 A6 5C            [ 1]    1 	ld a,#'\' 
      000C6A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C6C 26 16            [ 1]    3 	jrne rparnt_tst
      000C6E A6 03            [ 1] 2107 	ld a,#TK_CHAR 
      000C70 F7               [ 1] 2108 	ld (x),a 
      000C71 5C               [ 2] 2109 	incw x 
      000C72 91 D6 00         [ 4] 2110 	ld a,([in.w],y)
      000C75 F7               [ 1] 2111 	ld (x),a 
      000C76 5C               [ 2] 2112 	incw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C77 90 93            [ 1] 2113 	ldw y,x 	 
      000C79 72 5C 00 01      [ 1] 2114 	inc in  
      000C7D 5F               [ 1] 2115 	clrw x 
      000C7E 97               [ 1] 2116 	ld xl,a 
      000C7F A6 03            [ 1] 2117 	ld a,#TK_CHAR 
      000C81 CC 0D BD         [ 2] 2118 	jp token_exit 
      000C84                       2119 rparnt_tst:		
      000C84                       2120 	_case ')' colon_tst 
      000C84 A6 29            [ 1]    1 	ld a,#')' 
      000C86 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C88 26 05            [ 1]    3 	jrne colon_tst
      000C8A A6 08            [ 1] 2121 	ld a,#TK_RPAREN 
      000C8C CC 0D B9         [ 2] 2122 	jp token_char
      000C8F                       2123 colon_tst:
      000C8F                       2124 	_case ':' comma_tst 
      000C8F A6 3A            [ 1]    1 	ld a,#':' 
      000C91 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C93 26 05            [ 1]    3 	jrne comma_tst
      000C95 A6 01            [ 1] 2125 	ld a,#TK_COLON 
      000C97 CC 0D B9         [ 2] 2126 	jp token_char  
      000C9A                       2127 comma_tst:
      000C9A                       2128 	_case COMMA sharp_tst 
      000C9A A6 2C            [ 1]    1 	ld a,#COMMA 
      000C9C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C9E 26 05            [ 1]    3 	jrne sharp_tst
      000CA0 A6 09            [ 1] 2129 	ld a,#TK_COMMA
      000CA2 CC 0D B9         [ 2] 2130 	jp token_char
      000CA5                       2131 sharp_tst:
      000CA5                       2132 	_case SHARP dash_tst 
      000CA5 A6 23            [ 1]    1 	ld a,#SHARP 
      000CA7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA9 26 05            [ 1]    3 	jrne dash_tst
      000CAB A6 0A            [ 1] 2133 	ld a,#TK_SHARP
      000CAD CC 0D B9         [ 2] 2134 	jp token_char  	 	 
      000CB0                       2135 dash_tst: 	
      000CB0                       2136 	_case '-' at_tst 
      000CB0 A6 2D            [ 1]    1 	ld a,#'-' 
      000CB2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB4 26 05            [ 1]    3 	jrne at_tst
      000CB6 A6 11            [ 1] 2137 	ld a,#TK_MINUS  
      000CB8 CC 0D B9         [ 2] 2138 	jp token_char 
      000CBB                       2139 at_tst:
      000CBB                       2140 	_case '@' qmark_tst 
      000CBB A6 40            [ 1]    1 	ld a,#'@' 
      000CBD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CBF 26 05            [ 1]    3 	jrne qmark_tst
      000CC1 A6 06            [ 1] 2141 	ld a,#TK_ARRAY 
      000CC3 CC 0D B9         [ 2] 2142 	jp token_char
      000CC6                       2143 qmark_tst:
      000CC6                       2144 	_case '?' tick_tst 
      000CC6 A6 3F            [ 1]    1 	ld a,#'?' 
      000CC8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CCA 26 12            [ 1]    3 	jrne tick_tst
      000CCC A6 80            [ 1] 2145 	ld a,#TK_CMD  
      000CCE F7               [ 1] 2146 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CCF 5C               [ 2] 2147 	incw x 
      000CD0 90 93            [ 1] 2148 	ldw y,x 
      000CD2 AE 00 74         [ 2] 2149 	ldw x,#PRT_IDX 
      000CD5 90 FF            [ 2] 2150 	ldw (y),x 
      000CD7 72 A9 00 02      [ 2] 2151 	addw y,#2
      000CDB CC 0D BD         [ 2] 2152 	jp token_exit
      000CDE                       2153 tick_tst: ; comment 
      000CDE                       2154 	_case TICK plus_tst 
      000CDE A6 27            [ 1]    1 	ld a,#TICK 
      000CE0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE2 26 35            [ 1]    3 	jrne plus_tst
      000CE4 A6 80            [ 1] 2155 	ld a,#TK_CMD
      000CE6 F7               [ 1] 2156 	ld (x),a 
      000CE7 5C               [ 2] 2157 	incw x
      000CE8 90 AE 00 8E      [ 2] 2158 	ldw y,#REM_IDX
      000CEC FF               [ 2] 2159 	ldw (x),y 
      000CED 1C 00 02         [ 2] 2160 	addw x,#2  
      000CF0                       2161 copy_comment:
      000CF0 90 AE 16 90      [ 2] 2162 	ldw y,#tib 
      000CF4 72 B9 00 00      [ 2] 2163 	addw y,in.w
      000CF8 90 89            [ 2] 2164 	pushw y
      000CFA CD 03 B2         [ 4] 2165 	call strcpy
      000CFD 72 F2 01         [ 2] 2166     subw y,(1,sp)
      000D00 90 9F            [ 1] 2167 	ld a,yl 
      000D02 CB 00 01         [ 1] 2168 	add a,in
      000D05 C7 00 01         [ 1] 2169 	ld in,a 
      000D08 1F 01            [ 2] 2170 	ldw (1,sp),x
      000D0A 72 F9 01         [ 2] 2171 	addw y,(1,sp)
      000D0D 90 5C            [ 2] 2172 	incw y 
      000D0F                       2173 	_drop 2 
      000D0F 5B 02            [ 2]    1     addw sp,#2 
      000D11 AE 00 8E         [ 2] 2174 	ldw x,#REM_IDX 
      000D14 A6 80            [ 1] 2175 	ld a,#TK_CMD 
      000D16 CC 0D BD         [ 2] 2176 	jp token_exit 
      000D19                       2177 plus_tst:
      000D19                       2178 	_case '+' star_tst 
      000D19 A6 2B            [ 1]    1 	ld a,#'+' 
      000D1B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D1D 26 05            [ 1]    3 	jrne star_tst
      000D1F A6 10            [ 1] 2179 	ld a,#TK_PLUS  
      000D21 CC 0D B9         [ 2] 2180 	jp token_char 
      000D24                       2181 star_tst:
      000D24                       2182 	_case '*' slash_tst 
      000D24 A6 2A            [ 1]    1 	ld a,#'*' 
      000D26 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D28 26 05            [ 1]    3 	jrne slash_tst
      000D2A A6 20            [ 1] 2183 	ld a,#TK_MULT 
      000D2C CC 0D B9         [ 2] 2184 	jp token_char 
      000D2F                       2185 slash_tst: 
      000D2F                       2186 	_case '/' prcnt_tst 
      000D2F A6 2F            [ 1]    1 	ld a,#'/' 
      000D31 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D33 26 05            [ 1]    3 	jrne prcnt_tst
      000D35 A6 21            [ 1] 2187 	ld a,#TK_DIV 
      000D37 CC 0D B9         [ 2] 2188 	jp token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D3A                       2189 prcnt_tst:
      000D3A                       2190 	_case '%' eql_tst 
      000D3A A6 25            [ 1]    1 	ld a,#'%' 
      000D3C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3E 26 05            [ 1]    3 	jrne eql_tst
      000D40 A6 22            [ 1] 2191 	ld a,#TK_MOD
      000D42 CC 0D B9         [ 2] 2192 	jp token_char  
                                   2193 ; 1 or 2 character tokens 	
      000D45                       2194 eql_tst:
      000D45                       2195 	_case '=' gt_tst 		
      000D45 A6 3D            [ 1]    1 	ld a,#'=' 
      000D47 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D49 26 05            [ 1]    3 	jrne gt_tst
      000D4B A6 32            [ 1] 2196 	ld a,#TK_EQUAL
      000D4D CC 0D B9         [ 2] 2197 	jp token_char 
      000D50                       2198 gt_tst:
      000D50                       2199 	_case '>' lt_tst 
      000D50 A6 3E            [ 1]    1 	ld a,#'>' 
      000D52 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D54 26 23            [ 1]    3 	jrne lt_tst
      000D56 A6 31            [ 1] 2200 	ld a,#TK_GT 
      000D58 6B 02            [ 1] 2201 	ld (ATTRIB,sp),a 
      000D5A 91 D6 00         [ 4] 2202 	ld a,([in.w],y)
      000D5D 72 5C 00 01      [ 1] 2203 	inc in 
      000D61 A1 3D            [ 1] 2204 	cp a,#'=
      000D63 26 04            [ 1] 2205 	jrne 1$
      000D65 A6 33            [ 1] 2206 	ld a,#TK_GE 
      000D67 20 50            [ 2] 2207 	jra token_char  
      000D69 A1 3C            [ 1] 2208 1$: cp a,#'<
      000D6B 26 04            [ 1] 2209 	jrne 2$
      000D6D A6 35            [ 1] 2210 	ld a,#TK_NE 
      000D6F 20 48            [ 2] 2211 	jra token_char 
      000D71 72 5A 00 01      [ 1] 2212 2$: dec in
      000D75 7B 02            [ 1] 2213 	ld a,(ATTRIB,sp)
      000D77 20 40            [ 2] 2214 	jra token_char 	 
      000D79                       2215 lt_tst:
      000D79                       2216 	_case '<' other
      000D79 A6 3C            [ 1]    1 	ld a,#'<' 
      000D7B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7D 26 23            [ 1]    3 	jrne other
      000D7F A6 34            [ 1] 2217 	ld a,#TK_LT 
      000D81 6B 02            [ 1] 2218 	ld (ATTRIB,sp),a 
      000D83 91 D6 00         [ 4] 2219 	ld a,([in.w],y)
      000D86 72 5C 00 01      [ 1] 2220 	inc in 
      000D8A A1 3D            [ 1] 2221 	cp a,#'=
      000D8C 26 04            [ 1] 2222 	jrne 1$
      000D8E A6 36            [ 1] 2223 	ld a,#TK_LE 
      000D90 20 27            [ 2] 2224 	jra token_char 
      000D92 A1 3E            [ 1] 2225 1$: cp a,#'>
      000D94 26 04            [ 1] 2226 	jrne 2$
      000D96 A6 35            [ 1] 2227 	ld a,#TK_NE 
      000D98 20 1F            [ 2] 2228 	jra token_char 
      000D9A 72 5A 00 01      [ 1] 2229 2$: dec in 
      000D9E 7B 02            [ 1] 2230 	ld a,(ATTRIB,sp)
      000DA0 20 17            [ 2] 2231 	jra token_char 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000DA2                       2232 other: ; not a special character 	 
      000DA2 7B 01            [ 1] 2233 	ld a,(TCHAR,sp)
      000DA4 CD 05 71         [ 4] 2234 	call is_alpha 
      000DA7 25 03            [ 1] 2235 	jrc 30$ 
      000DA9 CC 08 7F         [ 2] 2236 	jp syntax_error 
      000DAC                       2237 30$: 
      000DAC CD 0B B4         [ 4] 2238 	call parse_keyword
      000DAF A3 16 35         [ 2] 2239 	cpw x,#remark 
      000DB2 26 09            [ 1] 2240 	jrne token_exit 
      000DB4 90 93            [ 1] 2241 	ldw y,x 
      000DB6 CC 0C F0         [ 2] 2242 	jp copy_comment 
      000DB9                       2243 token_char:
      000DB9 F7               [ 1] 2244 	ld (x),a 
      000DBA 5C               [ 2] 2245 	incw x
      000DBB 90 93            [ 1] 2246 	ldw y,x 
      000DBD                       2247 token_exit:
      000DBD                       2248 	_drop VSIZE 
      000DBD 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DBF 81               [ 4] 2249 	ret
                                   2250 
                                   2251 
                                   2252 ;------------------------------------
                                   2253 ; convert alpha to uppercase
                                   2254 ; input:
                                   2255 ;    a  character to convert
                                   2256 ; output:
                                   2257 ;    a  uppercase character
                                   2258 ;------------------------------------
      000DC0                       2259 to_upper::
      000DC0 A1 61            [ 1] 2260 	cp a,#'a
      000DC2 2A 01            [ 1] 2261 	jrpl 1$
      000DC4 81               [ 4] 2262 0$:	ret
      000DC5 A1 7A            [ 1] 2263 1$: cp a,#'z	
      000DC7 22 FB            [ 1] 2264 	jrugt 0$
      000DC9 A0 20            [ 1] 2265 	sub a,#32
      000DCB 81               [ 4] 2266 	ret
                                   2267 	
                                   2268 ;------------------------------------
                                   2269 ; convert pad content in integer
                                   2270 ; input:
                                   2271 ;    x		.asciz to convert
                                   2272 ; output:
                                   2273 ;    acc24      int24_t
                                   2274 ;------------------------------------
                                   2275 	; local variables
                           000001  2276 	SIGN=1 ; 1 byte, 
                           000002  2277 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2278 	TEMP=3 ; 1 byte, temporary storage
                           000003  2279 	VSIZE=3 ; 3 bytes reserved for local storage
      000DCC                       2280 atoi24::
      000DCC 89               [ 2] 2281 	pushw x 
      000DCD                       2282 	_vars VSIZE
      000DCD 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2283 	; acc24=0 
      000DCF 72 5F 00 0B      [ 1] 2284 	clr acc24    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DD3 72 5F 00 0C      [ 1] 2285 	clr acc16
      000DD7 72 5F 00 0D      [ 1] 2286 	clr acc8 
      000DDB 0F 01            [ 1] 2287 	clr (SIGN,sp)
      000DDD A6 0A            [ 1] 2288 	ld a,#10
      000DDF 6B 02            [ 1] 2289 	ld (BASE,sp),a ; default base decimal
      000DE1 F6               [ 1] 2290 	ld a,(x)
      000DE2 27 47            [ 1] 2291 	jreq 9$  ; completed if 0
      000DE4 A1 2D            [ 1] 2292 	cp a,#'-
      000DE6 26 04            [ 1] 2293 	jrne 1$
      000DE8 03 01            [ 1] 2294 	cpl (SIGN,sp)
      000DEA 20 08            [ 2] 2295 	jra 2$
      000DEC A1 24            [ 1] 2296 1$: cp a,#'$
      000DEE 26 06            [ 1] 2297 	jrne 3$
      000DF0 A6 10            [ 1] 2298 	ld a,#16
      000DF2 6B 02            [ 1] 2299 	ld (BASE,sp),a
      000DF4 5C               [ 2] 2300 2$:	incw x
      000DF5 F6               [ 1] 2301 	ld a,(x)
      000DF6                       2302 3$:	
      000DF6 A1 61            [ 1] 2303 	cp a,#'a
      000DF8 2B 02            [ 1] 2304 	jrmi 4$
      000DFA A0 20            [ 1] 2305 	sub a,#32
      000DFC A1 30            [ 1] 2306 4$:	cp a,#'0
      000DFE 2B 2B            [ 1] 2307 	jrmi 9$
      000E00 A0 30            [ 1] 2308 	sub a,#'0
      000E02 A1 0A            [ 1] 2309 	cp a,#10
      000E04 2B 06            [ 1] 2310 	jrmi 5$
      000E06 A0 07            [ 1] 2311 	sub a,#7
      000E08 11 02            [ 1] 2312 	cp a,(BASE,sp)
      000E0A 2A 1F            [ 1] 2313 	jrpl 9$
      000E0C 6B 03            [ 1] 2314 5$:	ld (TEMP,sp),a
      000E0E 7B 02            [ 1] 2315 	ld a,(BASE,sp)
      000E10 CD 0A 7B         [ 4] 2316 	call mulu24_8
      000E13 7B 03            [ 1] 2317 	ld a,(TEMP,sp)
      000E15 CB 00 0D         [ 1] 2318 	add a,acc24+2
      000E18 C7 00 0D         [ 1] 2319 	ld acc24+2,a
      000E1B 4F               [ 1] 2320 	clr a
      000E1C C9 00 0C         [ 1] 2321 	adc a,acc24+1
      000E1F C7 00 0C         [ 1] 2322 	ld acc24+1,a
      000E22 4F               [ 1] 2323 	clr a
      000E23 C9 00 0B         [ 1] 2324 	adc a,acc24
      000E26 C7 00 0B         [ 1] 2325 	ld acc24,a
      000E29 20 C9            [ 2] 2326 	jra 2$
      000E2B 0D 01            [ 1] 2327 9$:	tnz (SIGN,sp)
      000E2D 27 03            [ 1] 2328     jreq atoi_exit
      000E2F CD 0A B5         [ 4] 2329     call neg_acc24
      000E32                       2330 atoi_exit: 
      000E32                       2331 	_drop VSIZE
      000E32 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E34 85               [ 2] 2332 	popw x ; restore x
      000E35 81               [ 4] 2333 	ret
                                   2334 
                                   2335 
                                   2336 ;------------------------------------
                                   2337 ; skip character c in text starting from 'in'
                                   2338 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2339 ;	 y 		point to text buffer
                                   2340 ;    a 		character to skip
                                   2341 ; output:  
                                   2342 ;	'in' ajusted to new position
                                   2343 ;------------------------------------
                           000001  2344 	C = 1 ; local var
      000E36                       2345 skip:
      000E36 88               [ 1] 2346 	push a
      000E37 91 D6 00         [ 4] 2347 1$:	ld a,([in.w],y)
      000E3A 27 0A            [ 1] 2348 	jreq 2$
      000E3C 11 01            [ 1] 2349 	cp a,(C,sp)
      000E3E 26 06            [ 1] 2350 	jrne 2$
      000E40 72 5C 00 01      [ 1] 2351 	inc in
      000E44 20 F1            [ 2] 2352 	jra 1$
      000E46                       2353 2$: _drop 1 
      000E46 5B 01            [ 2]    1     addw sp,#1 
      000E48 81               [ 4] 2354 	ret
                                   2355 	
                                   2356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2357 ;;   TINY BASIC  operators,
                                   2358 ;;   commands and functions 
                                   2359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2360 
                                   2361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2362 ;;  Arithmetic operators
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2364 
                                   2365 ;debug support
                           000001  2366 DEBUG_PRT=1
                           000001  2367 .if DEBUG_PRT 
                           000001  2368 	REGA=1
                           000002  2369 	SAVEB=2
                           000003  2370 	REGX=3
                           000005  2371 	REGY=5
                           000007  2372 	ACC24=7
                           000009  2373 	VSIZE=9 
      000E49                       2374 printxy:
      000E49                       2375 	_vars VSIZE 
      000E49 52 09            [ 2]    1     sub sp,#VSIZE 
      000E4B 6B 01            [ 1] 2376 	ld (REGA,sp),a 
      000E4D C6 00 0A         [ 1] 2377 	ld a,base 
      000E50 6B 02            [ 1] 2378 	ld (SAVEB,sp),a
      000E52 1F 03            [ 2] 2379 	ldw (REGX,sp),x
      000E54 17 05            [ 2] 2380 	ldw (REGY,sp),y
      000E56 CE 00 0B         [ 2] 2381 	ldw x,acc24 
      000E59 C6 00 0D         [ 1] 2382 	ld a,acc8 
      000E5C 1F 07            [ 2] 2383 	ldw (ACC24,sp),x 
      000E5E 6B 09            [ 1] 2384 	ld (ACC24+2,sp),a 
      000E60 35 10 00 0A      [ 1] 2385 	mov base,#16 
      000E64 5F               [ 1] 2386 	clrw x 
      000E65 7B 01            [ 1] 2387 	ld a,(REGA,sp)
      000E67 97               [ 1] 2388 	ld xl,a 
      000E68 CD 09 D2         [ 4] 2389 	call print_int
      000E6B A6 20            [ 1] 2390 	ld a,#SPACE 
      000E6D CD 02 C0         [ 4] 2391 	call putc  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E70 1E 03            [ 2] 2392 	ldw x,(REGX,sp)
      000E72 CD 09 D2         [ 4] 2393 	call print_int 
      000E75 A6 20            [ 1] 2394 	ld a,#SPACE 
      000E77 CD 02 C0         [ 4] 2395 	call putc  
      000E7A 1E 05            [ 2] 2396 	ldw x,(REGY,sp)
      000E7C CD 09 D2         [ 4] 2397 	call print_int 
      000E7F A6 0D            [ 1] 2398 	ld a,#CR 
      000E81 CD 02 C0         [ 4] 2399 	call putc 
      000E84 7B 09            [ 1] 2400 	ld a,(ACC24+2,sp)
      000E86 1E 07            [ 2] 2401 	ldw x,(ACC24,sp)
      000E88 CF 00 0B         [ 2] 2402 	ldw acc24,x 
      000E8B C7 00 0D         [ 1] 2403 	ld acc8,a
      000E8E 7B 02            [ 1] 2404 	ld a,(SAVEB,sp)
      000E90 C7 00 0A         [ 1] 2405 	ld base,a 
      000E93 7B 01            [ 1] 2406 	ld a,(REGA,sp)
      000E95 1E 03            [ 2] 2407 	ldw x,(REGX,sp)
      000E97 16 05            [ 2] 2408 	ldw y,(REGY,sp)
      000E99                       2409 	_drop VSIZE 
      000E99 5B 09            [ 2]    1     addw sp,#VSIZE 
      000E9B 81               [ 4] 2410 	ret 
                                   2411 .endif 
                                   2412 
                                   2413 
                                   2414 ;--------------------------------------
                                   2415 ;  multiply 2 uint16_t return uint32_t
                                   2416 ;  input:
                                   2417 ;     x       uint16_t 
                                   2418 ;     y       uint16_t 
                                   2419 ;  output:
                                   2420 ;     x       product bits 15..0
                                   2421 ;     y       product bits 31..16 
                                   2422 ;---------------------------------------
                           000001  2423 		U1=1  ; uint16_t 
                           000003  2424 		DBL=3 ; uint32_t
                           000006  2425 		VSIZE=6
      000E9C                       2426 umstar:
      000E9C                       2427 	_vars VSIZE 
      000E9C 52 06            [ 2]    1     sub sp,#VSIZE 
      000E9E 1F 01            [ 2] 2428 	ldw (U1,sp),x 
                                   2429 ;initialize bits 31..16 of 
                                   2430 ;product to zero 
      000EA0 0F 03            [ 1] 2431 	clr (DBL,sp)
      000EA2 0F 04            [ 1] 2432 	clr (DBL+1,sp)
                                   2433 ; produc U1L*U2L 
      000EA4 90 9F            [ 1] 2434 	ld a,yl 
      000EA6 42               [ 4] 2435 	mul x,a 
      000EA7 1F 05            [ 2] 2436 	ldw (DBL+2,sp),x
                                   2437 ; product U1H*U2L 
      000EA9 7B 01            [ 1] 2438 	ld a,(U1,sp) ; xh 
      000EAB 93               [ 1] 2439 	ldw x,y
      000EAC 42               [ 4] 2440 	mul x,a 
      000EAD 4F               [ 1] 2441 	clr a 
      000EAE 72 FB 04         [ 2] 2442 	addw x,(DBL+1,sp) 
      000EB1 4F               [ 1] 2443 	clr a 
      000EB2 19 03            [ 1] 2444 	adc a,(DBL,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EB4 6B 03            [ 1] 2445 	ld (DBL,sp),a ; bits 23..17 
      000EB6 1F 04            [ 2] 2446 	ldw (DBL+1,sp),x ; bits 15..0 
                                   2447 ; product U1L*U2H
      000EB8 90 5E            [ 1] 2448 	swapw y 
      000EBA 93               [ 1] 2449 	ldw x,y
      000EBB 7B 02            [ 1] 2450 	ld a,(U1+1,sp)
      000EBD 42               [ 4] 2451 	mul x,a
      000EBE 72 FB 04         [ 2] 2452 	addw x,(DBL+1,sp)
      000EC1 4F               [ 1] 2453 	clr a 
      000EC2 19 03            [ 1] 2454 	adc a,(DBL,sp)
      000EC4 6B 03            [ 1] 2455 	ld (DBL,sp),a 
      000EC6 1F 04            [ 2] 2456 	ldw (DBL+1,sp),x 
                                   2457 ; product U1H*U2H 	
      000EC8 7B 01            [ 1] 2458 	ld a,(U1,sp)
      000ECA 93               [ 1] 2459 	ldw x,y  
      000ECB 42               [ 4] 2460 	mul x,a 
      000ECC 72 FB 03         [ 2] 2461 	addw x,(DBL,sp)
      000ECF 90 93            [ 1] 2462 	ldw y,x 
      000ED1 1E 05            [ 2] 2463 	ldw x,(DBL+2,sp)
      000ED3                       2464 	_drop VSIZE 
      000ED3 5B 06            [ 2]    1     addw sp,#VSIZE 
      000ED5 81               [ 4] 2465 	ret
                                   2466 
                                   2467 
                                   2468 ;-------------------------------------
                                   2469 ; multiply 2 integers
                                   2470 ; input:
                                   2471 ;  	x       n1 
                                   2472 ;   y 		n2 
                                   2473 ; output:
                                   2474 ;	X        N1*N2 bits 15..0
                                   2475 ;   Y        N1*N2 bits 31..16 
                                   2476 ;-------------------------------------
                           000001  2477 	SIGN=1
                           000001  2478 	VSIZE=1
      000ED6                       2479 multiply:
      000ED6                       2480 	_vars VSIZE 
      000ED6 52 01            [ 2]    1     sub sp,#VSIZE 
      000ED8 0F 01            [ 1] 2481 	clr (SIGN,sp)
      000EDA 9E               [ 1] 2482 	ld a,xh 
      000EDB A4 80            [ 1] 2483 	and a,#0x80
      000EDD 2A 03            [ 1] 2484 	jrpl 1$
      000EDF 03 01            [ 1] 2485 	cpl (SIGN,sp)
      000EE1 50               [ 2] 2486 	negw x 
      000EE2                       2487 1$:	
      000EE2 90 9E            [ 1] 2488 	ld a,yh
      000EE4 A4 80            [ 1] 2489 	and a,#0x80  
      000EE6 2A 04            [ 1] 2490 	jrpl 2$ 
      000EE8 03 01            [ 1] 2491 	cpl (SIGN,sp)
      000EEA 90 50            [ 2] 2492 	negw y 
      000EEC                       2493 2$:	
      000EEC CD 0E 9C         [ 4] 2494 	call umstar
      000EEF 7B 01            [ 1] 2495 	ld a,(SIGN,sp)
      000EF1 27 03            [ 1] 2496 	jreq 3$
      000EF3 CD 0F 23         [ 4] 2497 	call dneg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EF6                       2498 3$:	
      000EF6                       2499 	_drop VSIZE 
      000EF6 5B 01            [ 2]    1     addw sp,#VSIZE 
      000EF8 81               [ 4] 2500 	ret
                                   2501 
                                   2502 ;--------------------------------------
                                   2503 ; divide uint32_t/uint16_t
                                   2504 ; return:  quotient and remainder 
                                   2505 ; quotient expected to be uint16_t 
                                   2506 ; input:
                                   2507 ;   DBLDIVDND    on stack 
                                   2508 ;   X            divisor 
                                   2509 ; output:
                                   2510 ;   X            quotient 
                                   2511 ;   Y            remainder 
                                   2512 ;---------------------------------------
                           000003  2513 	VSIZE=3
      000EF9                       2514 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000EF9                       2515 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   2516 	; local variables 
                           000001  2517 	DIVISOR=1 
                           000003  2518 	CNTR=3 
      000EF9                       2519 udiv32_16:
      000EF9                       2520 	_vars VSIZE 
      000EF9 52 03            [ 2]    1     sub sp,#VSIZE 
      000EFB 1F 01            [ 2] 2521 	ldw (DIVISOR,sp),x	; save divisor 
      000EFD 1E 08            [ 2] 2522 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000EFF 16 06            [ 2] 2523 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000F01 90 5D            [ 2] 2524 	tnzw y
      000F03 26 06            [ 1] 2525 	jrne long_division 
      000F05 16 01            [ 2] 2526 	ldw y,(DIVISOR,sp)
      000F07 65               [ 2] 2527 	divw x,y
      000F08                       2528 	_drop VSIZE 
      000F08 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F0A 81               [ 4] 2529 	ret
      000F0B                       2530 long_division:
      000F0B 51               [ 1] 2531 	exgw x,y ; hi in x, lo in y 
      000F0C A6 11            [ 1] 2532 	ld a,#17 
      000F0E 6B 03            [ 1] 2533 	ld (CNTR,sp),a
      000F10                       2534 1$:
      000F10 13 01            [ 2] 2535 	cpw x,(DIVISOR,sp)
      000F12 2B 03            [ 1] 2536 	jrmi 2$
      000F14 72 F0 01         [ 2] 2537 	subw x,(DIVISOR,sp)
      000F17 8C               [ 1] 2538 2$:	ccf 
      000F18 90 59            [ 2] 2539 	rlcw y 
      000F1A 59               [ 2] 2540 	rlcw x 
      000F1B 0A 03            [ 1] 2541 	dec (CNTR,sp)
      000F1D 26 F1            [ 1] 2542 	jrne 1$
      000F1F 51               [ 1] 2543 	exgw x,y 
      000F20                       2544 	_drop VSIZE 
      000F20 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F22 81               [ 4] 2545 	ret
                                   2546 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2547 ;-----------------------------
                                   2548 ; negate double int.
                                   2549 ; input:
                                   2550 ;   x     bits 15..0
                                   2551 ;   y     bits 31..16
                                   2552 ; output: 
                                   2553 ;   x     bits 15..0
                                   2554 ;   y     bits 31..16
                                   2555 ;-----------------------------
      000F23                       2556 dneg:
      000F23 53               [ 2] 2557 	cplw x 
      000F24 90 53            [ 2] 2558 	cplw y 
      000F26 1C 00 01         [ 2] 2559 	addw x,#1 
      000F29 24 02            [ 1] 2560 	jrnc 1$
      000F2B 90 5C            [ 2] 2561 	incw y 
      000F2D 81               [ 4] 2562 1$: ret 
                                   2563 
                                   2564 
                                   2565 ;--------------------------------
                                   2566 ; sign extend single to double
                                   2567 ; input:
                                   2568 ;   x    int16_t
                                   2569 ; output:
                                   2570 ;   x    int32_t bits 15..0
                                   2571 ;   y    int32_t bits 31..16
                                   2572 ;--------------------------------
      000F2E                       2573 dbl_sign_extend:
      000F2E 90 5F            [ 1] 2574 	clrw y
      000F30 9E               [ 1] 2575 	ld a,xh 
      000F31 A4 80            [ 1] 2576 	and a,#0x80 
      000F33 27 02            [ 1] 2577 	jreq 1$
      000F35 90 53            [ 2] 2578 	cplw y
      000F37 81               [ 4] 2579 1$: ret 	
                                   2580 
                                   2581 
                                   2582 ;----------------------------------
                                   2583 ;  euclidian divide dbl/n1 
                                   2584 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   2585 ; input:
                                   2586 ;    dbl    int32_t on stack 
                                   2587 ;    x 		n1   int16_t  disivor  
                                   2588 ; output:
                                   2589 ;    X      dbl/x  int16_t 
                                   2590 ;    Y      remainder int16_t 
                                   2591 ;----------------------------------
                           000008  2592 	VSIZE=8
      000F38                       2593 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000F38                       2594 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000F38                       2595 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   2596 	; local variables
                           000001  2597 	DBLHI=1
                           000003  2598 	DBLLO=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000005  2599 	SDIVSR=5 ; sign divisor
                           000006  2600 	SQUOT=6 ; sign dividend 
                           000007  2601 	DIVISR=7 ; divisor 
      000F38                       2602 div32_16:
      000F38                       2603 	_vars VSIZE 
      000F38 52 08            [ 2]    1     sub sp,#VSIZE 
      000F3A 0F 05            [ 1] 2604 	clr (SDIVSR,sp)
      000F3C 0F 06            [ 1] 2605 	clr (SQUOT,sp)
                                   2606 ; copy arguments 
      000F3E 16 0B            [ 2] 2607 	ldw y,(DIVDNDHI,sp)
      000F40 17 01            [ 2] 2608 	ldw (DBLHI,sp),y
      000F42 16 0D            [ 2] 2609 	ldw y,(DIVDNDLO,sp)
      000F44 17 03            [ 2] 2610 	ldw (DBLLO,sp),y 
                                   2611 ; check for 0 divisor
      000F46 5D               [ 2] 2612 	tnzw x 
      000F47 26 05            [ 1] 2613     jrne 0$
      000F49 A6 04            [ 1] 2614 	ld a,#ERR_DIV0 
      000F4B CC 08 81         [ 2] 2615 	jp tb_error 
                                   2616 ; check divisor sign 	
      000F4E 9E               [ 1] 2617 0$:	ld a,xh 
      000F4F A4 80            [ 1] 2618 	and a,#0x80 
      000F51 27 05            [ 1] 2619 	jreq 1$
      000F53 03 05            [ 1] 2620 	cpl (SDIVSR,sp)
      000F55 03 06            [ 1] 2621 	cpl (SQUOT,sp)
      000F57 50               [ 2] 2622 	negw x
      000F58 1F 07            [ 2] 2623 1$:	ldw (DIVISR,sp),x
                                   2624 ; check dividend sign 	 
      000F5A 7B 01            [ 1] 2625  	ld a,(DBLHI,sp) 
      000F5C A4 80            [ 1] 2626 	and a,#0x80 
      000F5E 27 0D            [ 1] 2627 	jreq 2$ 
      000F60 03 06            [ 1] 2628 	cpl (SQUOT,sp)
      000F62 1E 03            [ 2] 2629 	ldw x,(DBLLO,sp)
      000F64 16 01            [ 2] 2630 	ldw y,(DBLHI,sp)
      000F66 CD 0F 23         [ 4] 2631 	call dneg 
      000F69 1F 03            [ 2] 2632 	ldw (DBLLO,sp),x 
      000F6B 17 01            [ 2] 2633 	ldw (DBLHI,sp),y 
      000F6D 1E 07            [ 2] 2634 2$:	ldw x,(DIVISR,sp)
      000F6F CD 0E F9         [ 4] 2635 	call udiv32_16
      000F72 90 5D            [ 2] 2636 	tnzw y 
      000F74 27 11            [ 1] 2637 	jreq 3$ 
                                   2638 ; x=quotient 
                                   2639 ; y=remainder 
                                   2640 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000F76 7B 06            [ 1] 2641 	ld a,(SQUOT,sp)
      000F78 18 05            [ 1] 2642 	xor a,(SDIVSR,sp)
      000F7A 27 0B            [ 1] 2643 	jreq 3$
      000F7C 5C               [ 2] 2644 	incw x 
      000F7D 90 CF 00 0C      [ 2] 2645 	ldw acc16,y 
      000F81 16 07            [ 2] 2646 	ldw y,(DIVISR,sp)
      000F83 72 B2 00 0C      [ 2] 2647 	subw y,acc16
                                   2648 ; sign quotient
      000F87 7B 06            [ 1] 2649 3$:	ld a,(SQUOT,sp)
      000F89 27 01            [ 1] 2650 	jreq 4$
      000F8B 50               [ 2] 2651 	negw x 
      000F8C                       2652 4$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F8C                       2653 	_drop VSIZE 
      000F8C 5B 08            [ 2]    1     addw sp,#VSIZE 
      000F8E 81               [ 4] 2654 	ret 
                                   2655 
                                   2656 
                                   2657 
                                   2658 ;----------------------------------
                                   2659 ; division x/y 
                                   2660 ; input:
                                   2661 ;    X       dividend
                                   2662 ;    Y       divisor 
                                   2663 ; output:
                                   2664 ;    X       quotient
                                   2665 ;    Y       remainder 
                                   2666 ;-----------------------------------
                           000004  2667 	VSIZE=4 
                                   2668 	; local variables 
                           000001  2669 	DBLHI=1
                           000003  2670 	DBLLO=3
      000F8F                       2671 divide: 
      000F8F                       2672 	_vars VSIZE 
      000F8F 52 04            [ 2]    1     sub sp,#VSIZE 
      000F91 90 CF 00 0C      [ 2] 2673 	ldw acc16,y
      000F95 CD 0F 2E         [ 4] 2674 	call dbl_sign_extend
      000F98 1F 03            [ 2] 2675 	ldw (DBLLO,sp),x 
      000F9A 17 01            [ 2] 2676 	ldw (DBLHI,sp),y 
      000F9C CE 00 0C         [ 2] 2677 	ldw x,acc16 
      000F9F CD 0F 38         [ 4] 2678 	call div32_16 
      000FA2                       2679 	_drop VSIZE 
      000FA2 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FA4 81               [ 4] 2680 	ret
                                   2681 
                                   2682 
                                   2683 ;----------------------------------
                                   2684 ;  remainder resulting from euclidian 
                                   2685 ;  division of x/y 
                                   2686 ; input:
                                   2687 ;   x   	dividend int16_t 
                                   2688 ;   y 		divisor int16_t
                                   2689 ; output:
                                   2690 ;   X       n1%n2 
                                   2691 ;----------------------------------
      000FA5                       2692 modulo:
      000FA5 CD 0F 8F         [ 4] 2693 	call divide
      000FA8 93               [ 1] 2694 	ldw x,y 
      000FA9 81               [ 4] 2695 	ret 
                                   2696 
                                   2697 ;----------------------------------
                                   2698 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2699 ; return expr1*expr2/expr3 
                                   2700 ; product result is int32_t and 
                                   2701 ; divisiont is int32_t/int16_t
                                   2702 ;----------------------------------
                           000004  2703 	DBL_SIZE=4 
      000FAA                       2704 muldiv:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000FAA CD 10 52         [ 4] 2705 	call func_args 
      000FAD A1 03            [ 1] 2706 	cp a,#3 
      000FAF 27 03            [ 1] 2707 	jreq 1$
      000FB1 CC 08 7F         [ 2] 2708 	jp syntax_error
      000FB4                       2709 1$: 
      000FB4 1E 05            [ 2] 2710 	ldw x,(5,sp) ; expr1
      000FB6 16 03            [ 2] 2711 	ldw y,(3,sp) ; expr2
      000FB8 CD 0E D6         [ 4] 2712 	call multiply 
      000FBB 1F 05            [ 2] 2713 	ldw (5,sp),x  ;int32_t 15..0
      000FBD 17 03            [ 2] 2714 	ldw (3,sp),y  ;int32_t 31..16
      000FBF 85               [ 2] 2715 	popw x        ; expr3 
      000FC0 CD 0F 38         [ 4] 2716 	call div32_16 ; int32_t/expr3 
      000FC3                       2717 	_drop DBL_SIZE
      000FC3 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000FC5 81               [ 4] 2718 	ret 
                                   2719 
                                   2720 
                                   2721 ;----------------------------------
                                   2722 ; search in kword_dict name
                                   2723 ; from its execution address 
                                   2724 ; input:
                                   2725 ;   X       	cmd_index 
                                   2726 ; output:
                                   2727 ;   X 			cstr*  | 0 
                                   2728 ;--------------------------------
                           000001  2729 	CMDX=1 
                           000003  2730 	LINK=3 
                           000004  2731 	VSIZE=4
      000FC6                       2732 cmd_name:
      000FC6                       2733 	_vars VSIZE 
      000FC6 52 04            [ 2]    1     sub sp,#VSIZE 
      000FC8 72 5F 00 0C      [ 1] 2734 	clr acc16 
      000FCC 1F 01            [ 2] 2735 	ldw (CMDX,sp),x  
      000FCE AE 27 09         [ 2] 2736 	ldw x,#kword_dict	
      000FD1 1F 03            [ 2] 2737 1$:	ldw (LINK,sp),x
      000FD3 E6 02            [ 1] 2738 	ld a,(2,x)
      000FD5 A4 0F            [ 1] 2739 	and a,#15 
      000FD7 C7 00 0D         [ 1] 2740 	ld acc8,a 
      000FDA 1C 00 03         [ 2] 2741 	addw x,#3
      000FDD 72 BB 00 0C      [ 2] 2742 	addw x,acc16
      000FE1 FE               [ 2] 2743 	ldw x,(x) ; command index  
      000FE2 13 01            [ 2] 2744 	cpw x,(CMDX,sp)
      000FE4 27 0A            [ 1] 2745 	jreq 2$
      000FE6 1E 03            [ 2] 2746 	ldw x,(LINK,sp)
      000FE8 FE               [ 2] 2747 	ldw x,(x) 
      000FE9 1D 00 02         [ 2] 2748 	subw x,#2  
      000FEC 26 E3            [ 1] 2749 	jrne 1$
      000FEE 20 05            [ 2] 2750 	jra 9$
      000FF0 1E 03            [ 2] 2751 2$: ldw x,(LINK,sp)
      000FF2 1C 00 02         [ 2] 2752 	addw x,#2 	
      000FF5                       2753 9$:	_drop VSIZE
      000FF5 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FF7 81               [ 4] 2754 	ret
                                   2755 
                                   2756 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2757 ;---------------------------------
                                   2758 ; dictionary search 
                                   2759 ; input:
                                   2760 ;	X 		dictionary entry point, name field  
                                   2761 ;   y		.asciz name to search 
                                   2762 ; output:
                                   2763 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2764 ;  X		cmd_index ; execution address | 0 
                                   2765 ;---------------------------------
                           000001  2766 	NLEN=1 ; cmd length 
                           000002  2767 	XSAVE=2
                           000004  2768 	YSAVE=4
                           000005  2769 	VSIZE=5 
      000FF8                       2770 search_dict:
      000FF8                       2771 	_vars VSIZE 
      000FF8 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2772 
      000FFA 17 04            [ 2] 2773 	ldw (YSAVE,sp),y 
      000FFC                       2774 search_next:
      000FFC 1F 02            [ 2] 2775 	ldw (XSAVE,sp),x 
                                   2776 ; get name length in dictionary	
      000FFE F6               [ 1] 2777 	ld a,(x)
      000FFF A4 0F            [ 1] 2778 	and a,#0xf 
      001001 6B 01            [ 1] 2779 	ld (NLEN,sp),a  
      001003 16 04            [ 2] 2780 	ldw y,(YSAVE,sp) ; name pointer 
      001005 5C               [ 2] 2781 	incw x 
      001006                       2782 cp_loop:
      001006 90 F6            [ 1] 2783 	ld a,(y)
      001008 27 1B            [ 1] 2784 	jreq str_match 
      00100A 0D 01            [ 1] 2785 	tnz (NLEN,sp)
      00100C 27 0A            [ 1] 2786 	jreq no_match  
      00100E F1               [ 1] 2787 	cp a,(x)
      00100F 26 07            [ 1] 2788 	jrne no_match 
      001011 90 5C            [ 2] 2789 	incw y 
      001013 5C               [ 2] 2790 	incw x
      001014 0A 01            [ 1] 2791 	dec (NLEN,sp)
      001016 20 EE            [ 2] 2792 	jra cp_loop 
      001018                       2793 no_match:
      001018 1E 02            [ 2] 2794 	ldw x,(XSAVE,sp) 
      00101A 1D 00 02         [ 2] 2795 	subw x,#2 ; move X to link field
      00101D 4B 00            [ 1] 2796 	push #TK_NONE 
      00101F FE               [ 2] 2797 	ldw x,(x) ; next word link 
      001020 84               [ 1] 2798 	pop a ; TK_NONE 
      001021 27 1F            [ 1] 2799 	jreq search_exit  ; not found  
                                   2800 ;try next 
      001023 20 D7            [ 2] 2801 	jra search_next
      001025                       2802 str_match:
      001025 1E 02            [ 2] 2803 	ldw x,(XSAVE,sp)
      001027 F6               [ 1] 2804 	ld a,(X)
      001028 6B 01            [ 1] 2805 	ld (NLEN,sp),a ; needed to test keyword type  
      00102A A4 0F            [ 1] 2806 	and a,#0xf 
                                   2807 ; move x to procedure address field 	
      00102C 4C               [ 1] 2808 	inc a 
      00102D C7 00 0D         [ 1] 2809 	ld acc8,a 
      001030 72 5F 00 0C      [ 1] 2810 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001034 72 BB 00 0C      [ 2] 2811 	addw x,acc16 
      001038 FE               [ 2] 2812 	ldw x,(x) ; routine index  
                                   2813 ;determine keyword type bits 7:6 
      001039 7B 01            [ 1] 2814 	ld a,(NLEN,sp)
      00103B 4E               [ 1] 2815 	swap a 
      00103C A4 0C            [ 1] 2816 	and a,#0xc
      00103E 44               [ 1] 2817 	srl a
      00103F 44               [ 1] 2818 	srl a 
      001040 AB 80            [ 1] 2819 	add a,#128
      001042                       2820 search_exit: 
      001042                       2821 	_drop VSIZE 	 
      001042 5B 05            [ 2]    1     addw sp,#VSIZE 
      001044 81               [ 4] 2822 	ret 
                                   2823 
                                   2824 ;---------------------
                                   2825 ; check if next token
                                   2826 ;  is of expected type 
                                   2827 ; input:
                                   2828 ;   A 		 expected token attribute
                                   2829 ;  ouput:
                                   2830 ;   none     if fail call syntax_error 
                                   2831 ;--------------------
      001045                       2832 expect:
      001045 88               [ 1] 2833 	push a 
      001046 CD 09 71         [ 4] 2834 	call next_token 
      001049 11 01            [ 1] 2835 	cp a,(1,sp)
      00104B 27 03            [ 1] 2836 	jreq 1$
      00104D CC 08 7F         [ 2] 2837 	jp syntax_error
      001050 84               [ 1] 2838 1$: pop a 
      001051 81               [ 4] 2839 	ret 
                                   2840 
                                   2841 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2842 ; parse arguments list 
                                   2843 ; between ()
                                   2844 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001052                       2845 func_args:
      001052 A6 07            [ 1] 2846 	ld a,#TK_LPAREN 
      001054 CD 10 45         [ 4] 2847 	call expect 
                                   2848 ; expected to continue in arg_list 
                                   2849 ; caller must check for TK_RPAREN 
                                   2850 
                                   2851 ;-------------------------------
                                   2852 ; parse embedded BASIC routines 
                                   2853 ; arguments list.
                                   2854 ; arg_list::=  rel[','rel]*
                                   2855 ; all arguments are of integer type
                                   2856 ; and pushed on stack 
                                   2857 ; input:
                                   2858 ;   none
                                   2859 ; output:
                                   2860 ;   stack{n}   arguments pushed on stack
                                   2861 ;   A 	number of arguments pushed on stack  
                                   2862 ;--------------------------------
      001057                       2863 arg_list:
      001057 4B 00            [ 1] 2864 	push #0  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001059 CD 11 A2         [ 4] 2865 1$: call relation
      00105C A1 00            [ 1] 2866 	cp a,#TK_NONE 
      00105E 27 20            [ 1] 2867 	jreq 5$
      001060 A1 84            [ 1] 2868 	cp a,#TK_INTGR
      001062 26 13            [ 1] 2869 	jrne 4$
      001064                       2870 3$: 
                                   2871 ; swap return address with argument
      001064 84               [ 1] 2872 	pop a ; arg_count
      001065 90 85            [ 2] 2873 	popw y ; return address 
      001067 89               [ 2] 2874 	pushw x ; new argument 
      001068 90 89            [ 2] 2875 	pushw y 
      00106A 4C               [ 1] 2876     inc a
      00106B 88               [ 1] 2877 	push a 
      00106C CD 09 71         [ 4] 2878 	call next_token 
      00106F A1 09            [ 1] 2879 	cp a,#TK_COMMA 
      001071 27 E6            [ 1] 2880 	jreq 1$ 
      001073 A1 00            [ 1] 2881 	cp a,#TK_NONE 
      001075 27 09            [ 1] 2882 	jreq 5$ 
      001077 A1 08            [ 1] 2883 4$:	cp a,#TK_RPAREN 
      001079 27 05            [ 1] 2884 	jreq 5$
      00107B                       2885 	_unget_token 
      00107B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001080 84               [ 1] 2886 5$:	pop a  
      001081 81               [ 4] 2887 	ret 
                                   2888 
                                   2889 ;--------------------------------
                                   2890 ;   BASIC commnands 
                                   2891 ;--------------------------------
                                   2892 
                                   2893 ;--------------------------------
                                   2894 ;  arithmetic and relational 
                                   2895 ;  routines
                                   2896 ;  operators precedence
                                   2897 ;  highest to lowest
                                   2898 ;  operators on same row have 
                                   2899 ;  same precedence and are executed
                                   2900 ;  from left to right.
                                   2901 ;	'*','/','%'
                                   2902 ;   '-','+'
                                   2903 ;   '=','>','<','>=','<=','<>','><'
                                   2904 ;   '<>' and '><' are equivalent for not equal.
                                   2905 ;--------------------------------
                                   2906 
                                   2907 ;---------------------
                                   2908 ; return array element
                                   2909 ; address from @(expr)
                                   2910 ; input:
                                   2911 ;   A 		TK_ARRAY
                                   2912 ; output:
                                   2913 ;   A 		TK_INTGR
                                   2914 ;	X 		element address 
                                   2915 ;----------------------
      001082                       2916 get_array_element:
      001082 CD 10 52         [ 4] 2917 	call func_args 
      001085 A1 01            [ 1] 2918 	cp a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001087 27 03            [ 1] 2919 	jreq 1$
      001089 CC 08 7F         [ 2] 2920 	jp syntax_error
      00108C 85               [ 2] 2921 1$: popw x 
                                   2922 	; check for bounds 
      00108D C3 00 21         [ 2] 2923 	cpw x,array_size 
      001090 23 05            [ 2] 2924 	jrule 3$
                                   2925 ; bounds {1..array_size}	
      001092 A6 0A            [ 1] 2926 2$: ld a,#ERR_BAD_VALUE 
      001094 CC 08 81         [ 2] 2927 	jp tb_error 
      001097 5D               [ 2] 2928 3$: tnzw  x
      001098 27 F8            [ 1] 2929 	jreq 2$ 
      00109A 58               [ 2] 2930 	sllw x 
      00109B 89               [ 2] 2931 	pushw x 
      00109C AE 16 90         [ 2] 2932 	ldw x,#tib
      00109F 72 F0 01         [ 2] 2933 	subw x,(1,sp)
      0010A2                       2934 	_drop 2   
      0010A2 5B 02            [ 2]    1     addw sp,#2 
      0010A4 A6 84            [ 1] 2935 	ld a,#TK_INTGR
      0010A6 81               [ 4] 2936 	ret 
                                   2937 
                                   2938 
                                   2939 ;***********************************
                                   2940 ;   expression parse,execute 
                                   2941 ;***********************************
                                   2942 ;-----------------------------------
                                   2943 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2944 ;			 integer | function |
                                   2945 ;			 '('relation')' 
                                   2946 ; output:
                                   2947 ;   A    token attribute 
                                   2948 ;   X 	 integer
                                   2949 ; ---------------------------------
                           000001  2950 	NEG=1
                           000001  2951 	VSIZE=1
      0010A7                       2952 factor:
      0010A7                       2953 	_vars VSIZE 
      0010A7 52 01            [ 2]    1     sub sp,#VSIZE 
      0010A9 CD 09 71         [ 4] 2954 	call next_token
      0010AC A1 02            [ 1] 2955 	cp a,#CMD_END  
      0010AE 25 3D            [ 1] 2956 	jrult 16$
      0010B0 6B 01            [ 1] 2957 1$:	ld (NEG,sp),a 
      0010B2 A4 30            [ 1] 2958 	and a,#TK_GRP_MASK
      0010B4 A1 10            [ 1] 2959 	cp a,#TK_GRP_ADD 
      0010B6 27 04            [ 1] 2960 	jreq 2$
      0010B8 7B 01            [ 1] 2961 	ld a,(NEG,sp)
      0010BA 20 03            [ 2] 2962 	jra 4$  
      0010BC                       2963 2$:	
      0010BC CD 09 71         [ 4] 2964 	call next_token 
      0010BF                       2965 4$:	
      0010BF A1 81            [ 1] 2966 	cp a,#TK_IFUNC 
      0010C1 26 03            [ 1] 2967 	jrne 5$ 
      0010C3 FD               [ 4] 2968 	call (x) 
      0010C4 20 32            [ 2] 2969 	jra 18$ 
      0010C6                       2970 5$:
      0010C6 A1 84            [ 1] 2971 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010C8 26 02            [ 1] 2972 	jrne 6$
      0010CA 20 2C            [ 2] 2973 	jra 18$
      0010CC                       2974 6$:
      0010CC A1 06            [ 1] 2975 	cp a,#TK_ARRAY
      0010CE 26 06            [ 1] 2976 	jrne 10$
      0010D0 CD 10 82         [ 4] 2977 	call get_array_element
      0010D3 FE               [ 2] 2978 	ldw x,(x)
      0010D4 20 22            [ 2] 2979 	jra 18$ 
      0010D6                       2980 10$:
      0010D6 A1 85            [ 1] 2981 	cp a,#TK_VAR 
      0010D8 26 03            [ 1] 2982 	jrne 12$
      0010DA FE               [ 2] 2983 	ldw x,(x)
      0010DB 20 1B            [ 2] 2984 	jra 18$
      0010DD                       2985 12$:			
      0010DD A1 07            [ 1] 2986 	cp a,#TK_LPAREN
      0010DF 26 0C            [ 1] 2987 	jrne 16$
      0010E1 CD 11 A2         [ 4] 2988 	call relation
      0010E4 89               [ 2] 2989 	pushw x 
      0010E5 A6 08            [ 1] 2990 	ld a,#TK_RPAREN 
      0010E7 CD 10 45         [ 4] 2991 	call expect
      0010EA 85               [ 2] 2992 	popw x 
      0010EB 20 0B            [ 2] 2993 	jra 18$	
      0010ED                       2994 16$:
      0010ED 4D               [ 1] 2995 	tnz a 
      0010EE 27 11            [ 1] 2996 	jreq 20$ 
      0010F0                       2997 	_unget_token
      0010F0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0010F5 4F               [ 1] 2998 	clr a 
      0010F6 20 09            [ 2] 2999 	jra 20$ 
      0010F8                       3000 18$: 
      0010F8 A6 11            [ 1] 3001 	ld a,#TK_MINUS 
      0010FA 11 01            [ 1] 3002 	cp a,(NEG,sp)
      0010FC 26 01            [ 1] 3003 	jrne 19$
      0010FE 50               [ 2] 3004 	negw x
      0010FF                       3005 19$:
      0010FF A6 84            [ 1] 3006 	ld a,#TK_INTGR
      001101                       3007 20$:
      001101                       3008 	_drop VSIZE
      001101 5B 01            [ 2]    1     addw sp,#VSIZE 
      001103 81               [ 4] 3009 	ret
                                   3010 
                                   3011 ;-----------------------------------
                                   3012 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3013 ; output:
                                   3014 ;   A    	token attribute 
                                   3015 ;	X		integer
                                   3016 ;-----------------------------------
                           000001  3017 	N1=1   ; int16_t
                           000003  3018 	MULOP=3
                           000003  3019 	VSIZE=3
      001104                       3020 term:
      001104                       3021 	_vars VSIZE
      001104 52 03            [ 2]    1     sub sp,#VSIZE 
      001106 CD 10 A7         [ 4] 3022 	call factor
      001109 4D               [ 1] 3023 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00110A 27 47            [ 1] 3024 	jreq term_exit 
      00110C                       3025 term01:	 ; check for  operator 
      00110C 1F 01            [ 2] 3026 	ldw (N1,sp),x  ; save first factor 
      00110E CD 09 71         [ 4] 3027 	call next_token
      001111 6B 03            [ 1] 3028 	ld (MULOP,sp),a
      001113 A1 02            [ 1] 3029 	cp a,#CMD_END
      001115 25 2F            [ 1] 3030 	jrult 8$
      001117 A4 30            [ 1] 3031 	and a,#TK_GRP_MASK
      001119 A1 20            [ 1] 3032 	cp a,#TK_GRP_MULT
      00111B 27 02            [ 1] 3033 	jreq 1$
      00111D 20 27            [ 2] 3034 	jra 8$
      00111F                       3035 1$:	; got *|/|%
      00111F CD 10 A7         [ 4] 3036 	call factor
      001122 A1 84            [ 1] 3037 	cp a,#TK_INTGR
      001124 27 03            [ 1] 3038 	jreq 2$
      001126 CC 08 7F         [ 2] 3039 	jp syntax_error
      001129 90 93            [ 1] 3040 2$:	ldw y,x 
      00112B 1E 01            [ 2] 3041 	ldw x,(N1,sp)
      00112D 7B 03            [ 1] 3042 	ld a,(MULOP,sp) 
      00112F A1 20            [ 1] 3043 	cp a,#TK_MULT 
      001131 26 05            [ 1] 3044 	jrne 3$
      001133 CD 0E D6         [ 4] 3045 	call multiply 
      001136 20 D4            [ 2] 3046 	jra term01
      001138 A1 21            [ 1] 3047 3$: cp a,#TK_DIV 
      00113A 26 05            [ 1] 3048 	jrne 4$ 
      00113C CD 0F 8F         [ 4] 3049 	call divide 
      00113F 20 CB            [ 2] 3050 	jra term01 
      001141 CD 0F A5         [ 4] 3051 4$: call modulo
      001144 20 C6            [ 2] 3052 	jra term01 
      001146 7B 03            [ 1] 3053 8$: ld a,(MULOP,sp)
      001148 27 05            [ 1] 3054 	jreq 9$ 
      00114A                       3055 	_unget_token
      00114A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00114F 1E 01            [ 2] 3056 9$: ldw x,(N1,sp)
      001151 A6 84            [ 1] 3057 	ld a,#TK_INTGR 	
      001153                       3058 term_exit:
      001153                       3059 	_drop VSIZE 
      001153 5B 03            [ 2]    1     addw sp,#VSIZE 
      001155 81               [ 4] 3060 	ret 
                                   3061 
                                   3062 ;-------------------------------
                                   3063 ;  expr ::= term [['+'|'-'] term]*
                                   3064 ;  result range {-32768..32767}
                                   3065 ;  output:
                                   3066 ;   A    token attribute 
                                   3067 ;   X	 integer   
                                   3068 ;-------------------------------
                           000001  3069 	N1=1 
                           000003  3070 	OP=3 
                           000003  3071 	VSIZE=3 
      001156                       3072 expression:
      001156                       3073 	_vars VSIZE 
      001156 52 03            [ 2]    1     sub sp,#VSIZE 
      001158 CD 11 04         [ 4] 3074 	call term
      00115B 4D               [ 1] 3075 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00115C 27 41            [ 1] 3076 	jreq expr_exit 
      00115E 1F 01            [ 2] 3077 1$:	ldw (N1,sp),x 
      001160 CD 09 71         [ 4] 3078 	call next_token
      001163 6B 03            [ 1] 3079 	ld (OP,sp),a 
      001165 A1 02            [ 1] 3080 	cp a,#CMD_END 
      001167 25 29            [ 1] 3081 	jrult 8$ 
      001169 A4 30            [ 1] 3082 	and a,#TK_GRP_MASK
      00116B A1 10            [ 1] 3083 	cp a,#TK_GRP_ADD 
      00116D 27 02            [ 1] 3084 	jreq 2$ 
      00116F 20 21            [ 2] 3085 	jra 8$
      001171                       3086 2$: 
      001171 CD 11 04         [ 4] 3087 	call term
      001174 A1 84            [ 1] 3088 	cp a,#TK_INTGR
      001176 27 03            [ 1] 3089 	jreq 3$
      001178 CC 08 7F         [ 2] 3090 	jp syntax_error
      00117B CF 00 0C         [ 2] 3091 3$:	ldw acc16,x 
      00117E 1E 01            [ 2] 3092 	ldw x,(N1,sp)
      001180 7B 03            [ 1] 3093 	ld a,(OP,sp)
      001182 A1 10            [ 1] 3094 	cp a,#TK_PLUS 
      001184 26 06            [ 1] 3095 	jrne 4$
      001186 72 BB 00 0C      [ 2] 3096 	addw x,acc16
      00118A 20 D2            [ 2] 3097 	jra 1$ 
      00118C 72 B0 00 0C      [ 2] 3098 4$:	subw x,acc16
      001190 20 CC            [ 2] 3099 	jra 1$
      001192 7B 03            [ 1] 3100 8$: ld a,(OP,sp)
      001194 27 05            [ 1] 3101 	jreq 9$ 
      001196                       3102 	_unget_token	
      001196 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00119B 1E 01            [ 2] 3103 9$: ldw x,(N1,sp)
      00119D A6 84            [ 1] 3104 	ld a,#TK_INTGR	
      00119F                       3105 expr_exit:
      00119F                       3106 	_drop VSIZE 
      00119F 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011A1 81               [ 4] 3107 	ret 
                                   3108 
                                   3109 ;---------------------------------------------
                                   3110 ; rel ::= expr rel_op expr
                                   3111 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3112 ;  relation return  integer , zero is false 
                                   3113 ;  output:
                                   3114 ;    A 		token attribute  
                                   3115 ;	 X		integer 
                                   3116 ;---------------------------------------------
                           000001  3117 	N1=1
                           000003  3118 	RELOP=3
                           000003  3119 	VSIZE=3 
      0011A2                       3120 relation: 
      0011A2                       3121 	_vars VSIZE
      0011A2 52 03            [ 2]    1     sub sp,#VSIZE 
      0011A4 CD 11 56         [ 4] 3122 	call expression
      0011A7 4D               [ 1] 3123 	tnz a 
      0011A8 27 4D            [ 1] 3124 	jreq rel_exit
      0011AA 1F 01            [ 2] 3125 	ldw (N1,sp),x 
                                   3126 ; expect rel_op or leave 
      0011AC CD 09 71         [ 4] 3127 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011AF 6B 03            [ 1] 3128 	ld (RELOP,sp),a 
      0011B1 A4 30            [ 1] 3129 	and a,#TK_GRP_MASK
      0011B3 A1 30            [ 1] 3130 	cp a,#TK_GRP_RELOP 
      0011B5 26 33            [ 1] 3131 	jrne 8$
      0011B7                       3132 2$:	; expect another expression
      0011B7 CD 11 56         [ 4] 3133 	call expression
      0011BA A1 84            [ 1] 3134 	cp a,#TK_INTGR
      0011BC 27 03            [ 1] 3135 	jreq 3$
      0011BE CC 08 7F         [ 2] 3136 	jp syntax_error 
      0011C1 CF 00 0C         [ 2] 3137 3$:	ldw acc16,x 
      0011C4 1E 01            [ 2] 3138 	ldw x,(N1,sp) 
      0011C6 72 B0 00 0C      [ 2] 3139 	subw x,acc16
      0011CA 26 06            [ 1] 3140 	jrne 4$
      0011CC 35 02 00 0D      [ 1] 3141 	mov acc8,#2 ; n1==n2
      0011D0 20 0C            [ 2] 3142 	jra 6$ 
      0011D2                       3143 4$: 
      0011D2 2C 06            [ 1] 3144 	jrsgt 5$  
      0011D4 35 04 00 0D      [ 1] 3145 	mov acc8,#4 ; n1<2 
      0011D8 20 04            [ 2] 3146 	jra 6$
      0011DA                       3147 5$:
      0011DA 35 01 00 0D      [ 1] 3148 	mov acc8,#1 ; n1>n2 
      0011DE                       3149 6$:
      0011DE 5F               [ 1] 3150 	clrw x 
      0011DF C6 00 0D         [ 1] 3151 	ld a, acc8  
      0011E2 14 03            [ 1] 3152 	and a,(RELOP,sp)
      0011E4 4D               [ 1] 3153 	tnz a 
      0011E5 27 0E            [ 1] 3154 	jreq 10$
      0011E7 5C               [ 2] 3155 	incw x 
      0011E8 20 0B            [ 2] 3156 	jra 10$  	
      0011EA 7B 03            [ 1] 3157 8$: ld a,(RELOP,sp)
      0011EC 27 05            [ 1] 3158 	jreq 9$
      0011EE                       3159 	_unget_token
      0011EE 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0011F3                       3160 9$: 
      0011F3 1E 01            [ 2] 3161 	ldw x,(N1,sp)
      0011F5                       3162 10$:
      0011F5 A6 84            [ 1] 3163 	ld a,#TK_INTGR
      0011F7                       3164 rel_exit:
      0011F7                       3165 	_drop VSIZE
      0011F7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011F9 81               [ 4] 3166 	ret 
                                   3167 
                                   3168 ;--------------------------------
                                   3169 ; BASIC: SHOW 
                                   3170 ; print stack content in hexadecimal bytes 
                                   3171 ; 16 bytes per row 
                                   3172 ;--------------------------------
      0011FA                       3173 show:
      0011FA AE 12 14         [ 2] 3174 	ldw x,#cstk_prompt
      0011FD CD 00 00         [ 4] 3175 	call puts 
      001200 96               [ 1] 3176 	ldw x,sp 
      001201 1C 00 03         [ 2] 3177 	addw x,#3 ; ignore return address
      001204 90 AE 18 00      [ 2] 3178 	ldw y,#RAM_SIZE  
      001208 CF 00 0C         [ 2] 3179 	ldw acc16,x 
      00120B 72 B2 00 0C      [ 2] 3180 	subw y,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00120F CD 03 59         [ 4] 3181 	call hex_dump
      001212 4F               [ 1] 3182 	clr a 
      001213 81               [ 4] 3183 	ret
                                   3184 
      001214 0A 63 6F 6E 74 65 6E  3185 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3186 
                                   3187 
                                   3188 ;--------------------------------------------
                                   3189 ; BASIC: HEX 
                                   3190 ; select hexadecimal base for integer print
                                   3191 ;---------------------------------------------
      00123B                       3192 hex_base:
      00123B 35 10 00 0A      [ 1] 3193 	mov base,#16 
      00123F 81               [ 4] 3194 	ret 
                                   3195 
                                   3196 ;--------------------------------------------
                                   3197 ; BASIC: DEC 
                                   3198 ; select decimal base for integer print
                                   3199 ;---------------------------------------------
      001240                       3200 dec_base:
      001240 35 0A 00 0A      [ 1] 3201 	mov base,#10
      001244 81               [ 4] 3202 	ret 
                                   3203 
                                   3204 ;------------------------
                                   3205 ; BASIC: SIZE 
                                   3206 ; return free size in text area
                                   3207 ; output:
                                   3208 ;   A 		TK_INTGR
                                   3209 ;   X 	    size integer
                                   3210 ;--------------------------
      001245                       3211 size:
      001245 AE 16 90         [ 2] 3212 	ldw x,#tib 
      001248 72 B0 00 1E      [ 2] 3213 	subw x,txtend 
      00124C A6 84            [ 1] 3214 	ld a,#TK_INTGR
      00124E 81               [ 4] 3215 	ret 
                                   3216 
                                   3217 
                                   3218 ;------------------------
                                   3219 ; BASIC: UBOUND  
                                   3220 ; return array variable size 
                                   3221 ; output:
                                   3222 ;   A 		TK_INTGR
                                   3223 ;   X 	    array size 
                                   3224 ;--------------------------
      00124F                       3225 ubound:
      00124F AE 16 90         [ 2] 3226 	ldw x,#tib
      001252 72 B0 00 1E      [ 2] 3227 	subw x,txtend 
      001256 90 CE 00 04      [ 2] 3228 	ldw y,basicptr 
      00125A 90 C3 00 1E      [ 2] 3229 	cpw y,txtend 
      00125E 25 0A            [ 1] 3230 	jrult 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001260 3B 00 03         [ 1] 3231 	push count 
      001263 4B 00            [ 1] 3232 	push #0 
      001265 72 F0 01         [ 2] 3233 	subw x,(1,sp)
      001268                       3234 	_drop 2 
      001268 5B 02            [ 2]    1     addw sp,#2 
      00126A 54               [ 2] 3235 1$:	srlw x 
      00126B CF 00 21         [ 2] 3236 	ldw array_size,x
      00126E A6 84            [ 1] 3237 	ld a,#TK_INTGR
      001270 81               [ 4] 3238 	ret 
                                   3239 
                                   3240 ;-----------------------------
                                   3241 ; BASIC: LET var=expr 
                                   3242 ; variable assignement 
                                   3243 ; output:
                                   3244 ;   A 		TK_NONE 
                                   3245 ;-----------------------------
      001271                       3246 let:
      001271 CD 09 71         [ 4] 3247 	call next_token 
      001274 A1 85            [ 1] 3248 	cp a,#TK_VAR 
      001276 27 0A            [ 1] 3249 	jreq let_var
      001278 A1 06            [ 1] 3250 	cp a,#TK_ARRAY 
      00127A 27 03            [ 1] 3251 	jreq  let_array
      00127C CC 08 7F         [ 2] 3252 	jp syntax_error
      00127F                       3253 let_array:
      00127F CD 10 82         [ 4] 3254 	call get_array_element
      001282                       3255 let_var:
      001282 89               [ 2] 3256 	pushw x  
      001283 CD 09 71         [ 4] 3257 	call next_token 
      001286 A1 32            [ 1] 3258 	cp a,#TK_EQUAL
      001288 27 03            [ 1] 3259 	jreq 1$
      00128A CC 08 7F         [ 2] 3260 	jp syntax_error
      00128D                       3261 1$:	
      00128D CD 11 A2         [ 4] 3262 	call relation   
      001290 A1 84            [ 1] 3263 	cp a,#TK_INTGR 
      001292 27 03            [ 1] 3264 	jreq 2$
      001294 CC 08 7F         [ 2] 3265 	jp syntax_error
      001297                       3266 2$:	
      001297 90 93            [ 1] 3267 	ldw y,x 
      001299 85               [ 2] 3268 	popw x   
      00129A FF               [ 2] 3269 	ldw (x),y   
      00129B 81               [ 4] 3270 	ret 
                                   3271 
                                   3272 ;----------------------------
                                   3273 ; BASIC: LIST [[start][,end]]
                                   3274 ; list program lines 
                                   3275 ; form start to end 
                                   3276 ; if empty argument list then 
                                   3277 ; list all.
                                   3278 ;----------------------------
                           000001  3279 	FIRST=1
                           000003  3280 	LAST=3 
                           000005  3281 	LN_PTR=5
                           000006  3282 	VSIZE=6 
      00129C                       3283 list:
      00129C CE 00 1C         [ 2] 3284 	ldw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00129F C3 00 1E         [ 2] 3285 	cpw x,txtend 
      0012A2 2B 01            [ 1] 3286 	jrmi 1$
      0012A4 81               [ 4] 3287 	ret 
      0012A5                       3288 1$:	
      0012A5                       3289 	_vars VSIZE
      0012A5 52 06            [ 2]    1     sub sp,#VSIZE 
      0012A7 1F 05            [ 2] 3290 	ldw (LN_PTR,sp),x 
      0012A9 FE               [ 2] 3291 	ldw x,(x) 
      0012AA 1F 01            [ 2] 3292 	ldw (FIRST,sp),x ; list from first line 
      0012AC AE 7F FF         [ 2] 3293 	ldw x,#MAX_LINENO ; biggest line number 
      0012AF 1F 03            [ 2] 3294 	ldw (LAST,sp),x 
      0012B1 CD 10 57         [ 4] 3295 	call arg_list
      0012B4 4D               [ 1] 3296 	tnz a
      0012B5 27 31            [ 1] 3297 	jreq list_loop 
      0012B7 A1 02            [ 1] 3298 	cp a,#2 
      0012B9 27 07            [ 1] 3299 	jreq 4$
      0012BB A1 01            [ 1] 3300 	cp a,#1 
      0012BD 27 06            [ 1] 3301 	jreq first_line 
      0012BF CC 08 7F         [ 2] 3302 	jp syntax_error 
      0012C2 85               [ 2] 3303 4$:	popw x 
      0012C3 1F 05            [ 2] 3304 	ldw (LAST+2,sp),x 
      0012C5                       3305 first_line:
      0012C5 85               [ 2] 3306 	popw x
      0012C6 1F 01            [ 2] 3307 	ldw (FIRST,sp),x 
      0012C8                       3308 lines_skip:
      0012C8 CE 00 1C         [ 2] 3309 	ldw x,txtbgn
      0012CB 1F 05            [ 2] 3310 2$:	ldw (LN_PTR,sp),x 
      0012CD C3 00 1E         [ 2] 3311 	cpw x,txtend 
      0012D0 2A 38            [ 1] 3312 	jrpl list_exit 
      0012D2 FE               [ 2] 3313 	ldw x,(x) ;line# 
      0012D3 13 01            [ 2] 3314 	cpw x,(FIRST,sp)
      0012D5 2A 11            [ 1] 3315 	jrpl list_loop 
      0012D7 1E 05            [ 2] 3316 	ldw x,(LN_PTR,sp) 
      0012D9 E6 02            [ 1] 3317 	ld a,(2,x)
      0012DB C7 00 0D         [ 1] 3318 	ld acc8,a 
      0012DE 72 5F 00 0C      [ 1] 3319 	clr acc16 
      0012E2 72 BB 00 0C      [ 2] 3320 	addw x,acc16
      0012E6 20 E3            [ 2] 3321 	jra 2$ 
                                   3322 ; print loop
      0012E8                       3323 list_loop:
      0012E8 1E 05            [ 2] 3324 	ldw x,(LN_PTR,sp)
      0012EA E6 02            [ 1] 3325 	ld a,(2,x) 
      0012EC CD 15 23         [ 4] 3326 	call prt_basic_line
      0012EF 1E 05            [ 2] 3327 	ldw x,(LN_PTR,sp)
      0012F1 E6 02            [ 1] 3328 	ld a,(2,x)
      0012F3 C7 00 0D         [ 1] 3329 	ld acc8,a 
      0012F6 72 5F 00 0C      [ 1] 3330 	clr acc16 
      0012FA 72 BB 00 0C      [ 2] 3331 	addw x,acc16
      0012FE C3 00 1E         [ 2] 3332 	cpw x,txtend 
      001301 2A 07            [ 1] 3333 	jrpl list_exit
      001303 1F 05            [ 2] 3334 	ldw (LN_PTR,sp),x
      001305 FE               [ 2] 3335 	ldw x,(x)
      001306 13 03            [ 2] 3336 	cpw x,(LAST,sp)  
      001308 2F DE            [ 1] 3337 	jrslt list_loop
      00130A                       3338 list_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00130A 55 00 03 00 01   [ 1] 3339 	mov in,count 
      00130F AE 16 E0         [ 2] 3340 	ldw x,#pad 
      001312 CF 00 04         [ 2] 3341 	ldw basicptr,x 
      001315                       3342 	_drop VSIZE 
      001315 5B 06            [ 2]    1     addw sp,#VSIZE 
      001317 81               [ 4] 3343 	ret
                                   3344 
                                   3345 ;-------------------------
                                   3346 ; copy command name to buffer  
                                   3347 ; input:
                                   3348 ;   X 	name address 
                                   3349 ;   Y   destination buffer 
                                   3350 ; output:
                                   3351 ;   Y   point after name  
                                   3352 ;--------------------------
      001318                       3353 cpy_cmd_name:
      001318 F6               [ 1] 3354 	ld a,(x)
      001319 5C               [ 2] 3355 	incw x
      00131A A4 0F            [ 1] 3356 	and a,#15  
      00131C 88               [ 1] 3357 	push a 
      00131D 0D 01            [ 1] 3358     tnz (1,sp) 
      00131F 27 0A            [ 1] 3359 	jreq 9$
      001321 F6               [ 1] 3360 1$:	ld a,(x)
      001322 90 F7            [ 1] 3361 	ld (y),a  
      001324 5C               [ 2] 3362 	incw x
      001325 90 5C            [ 2] 3363 	incw y 
      001327 0A 01            [ 1] 3364 	dec (1,sp)	 
      001329 26 F6            [ 1] 3365 	jrne 1$
      00132B 84               [ 1] 3366 9$: pop a 
      00132C 81               [ 4] 3367 	ret	
                                   3368 
                                   3369 ;--------------------------
                                   3370 ; add a space after letter or 
                                   3371 ; digit.
                                   3372 ; input:
                                   3373 ;   Y     pointer to buffer 
                                   3374 ; output:
                                   3375 ;   Y    moved to end 
                                   3376 ;--------------------------
      00132D                       3377 add_space:
      00132D 90 5A            [ 2] 3378 	decw y 
      00132F 90 F6            [ 1] 3379 	ld a,(y)
      001331 90 5C            [ 2] 3380 	incw y
      001333 CD 05 8B         [ 4] 3381 	call is_alnum 
      001336 24 06            [ 1] 3382 	jrnc 1$
      001338 A6 20            [ 1] 3383 	ld a,#SPACE 
      00133A 90 F7            [ 1] 3384 	ld (y),a 
      00133C 90 5C            [ 2] 3385 	incw y 
      00133E 81               [ 4] 3386 1$: ret 
                                   3387 
                                   3388 ;--------------------------
                                   3389 ;  align text in buffer 
                                   3390 ;  to tab_width padding 
                                   3391 ;  left with  SPACE 
                                   3392 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3393 ;   X      str*
                                   3394 ;   A      str_length 
                                   3395 ; output:
                                   3396 ;   X      ajusted
                                   3397 ;--------------------------
      00133F                       3398 right_align:
      00133F 88               [ 1] 3399 	push a 
      001340 7B 01            [ 1] 3400 0$: ld a,(1,sp)
      001342 C1 00 24         [ 1] 3401 	cp a,tab_width 
      001345 2A 08            [ 1] 3402 	jrpl 1$
      001347 A6 20            [ 1] 3403 	ld a,#SPACE 
      001349 5A               [ 2] 3404 	decw x
      00134A F7               [ 1] 3405 	ld (x),a  
      00134B 0C 01            [ 1] 3406 	inc (1,sp)
      00134D 20 F1            [ 2] 3407 	jra 0$ 
      00134F 84               [ 1] 3408 1$: pop a 	
      001350 81               [ 4] 3409 	ret 
                                   3410 
                                   3411 ;--------------------------
                                   3412 ; print TK_QSTR
                                   3413 ; converting control character
                                   3414 ; to backslash sequence
                                   3415 ; input:
                                   3416 ;   X        char *
                                   3417 ;   Y        dest. buffer 
                                   3418 ; output:
                                   3419 ;   X        moved forward 
                                   3420 ;   Y        moved forward 
                                   3421 ;-----------------------------
      001351                       3422 cpy_quote:
      001351 A6 22            [ 1] 3423 	ld a,#'"
      001353 90 F7            [ 1] 3424 	ld (y),a 
      001355 90 5C            [ 2] 3425 	incw y 
      001357 F6               [ 1] 3426 1$:	ld a,(x)
      001358 27 30            [ 1] 3427 	jreq 9$
      00135A 5C               [ 2] 3428 	incw x 
      00135B A1 20            [ 1] 3429 	cp a,#SPACE 
      00135D 25 0E            [ 1] 3430 	jrult 3$
      00135F 90 F7            [ 1] 3431 	ld (y),a
      001361 90 5C            [ 2] 3432 	incw y 
      001363 A1 5C            [ 1] 3433 	cp a,#'\ 
      001365 26 F0            [ 1] 3434 	jrne 1$ 
      001367                       3435 2$:
      001367 90 F7            [ 1] 3436 	ld (y),a
      001369 90 5C            [ 2] 3437 	incw y  
      00136B 20 EA            [ 2] 3438 	jra 1$
      00136D 88               [ 1] 3439 3$: push a 
      00136E A6 5C            [ 1] 3440 	ld a,#'\
      001370 90 F7            [ 1] 3441 	ld (y),a 
      001372 90 5C            [ 2] 3442 	incw y  
      001374 84               [ 1] 3443 	pop a 
      001375 A0 07            [ 1] 3444 	sub a,#7
      001377 C7 00 0D         [ 1] 3445 	ld acc8,a 
      00137A 72 5F 00 0C      [ 1] 3446 	clr acc16
      00137E 89               [ 2] 3447 	pushw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00137F AE 0B 25         [ 2] 3448 	ldw x,#escaped 
      001382 72 BB 00 0C      [ 2] 3449 	addw x,acc16 
      001386 F6               [ 1] 3450 	ld a,(x)
      001387 85               [ 2] 3451 	popw x
      001388 20 DD            [ 2] 3452 	jra 2$
      00138A A6 22            [ 1] 3453 9$: ld a,#'"
      00138C 90 F7            [ 1] 3454 	ld (y),a 
      00138E 90 5C            [ 2] 3455 	incw y  
      001390 5C               [ 2] 3456 	incw x 
      001391 81               [ 4] 3457 	ret
                                   3458 
                                   3459 ;--------------------------
                                   3460 ; return variable name 
                                   3461 ; from its address.
                                   3462 ; input:
                                   3463 ;   X    variable address
                                   3464 ; output:
                                   3465 ;   A     variable letter
                                   3466 ;--------------------------
      001392                       3467 var_name:
      001392 1D 00 2F         [ 2] 3468 		subw x,#vars 
      001395 9F               [ 1] 3469 		ld a,xl 
      001396 44               [ 1] 3470 		srl a 
      001397 AB 41            [ 1] 3471 		add a,#'A 
      001399 81               [ 4] 3472 		ret 
                                   3473 
                                   3474 ;-----------------------------
                                   3475 ; return cmd  idx from its 
                                   3476 ; code address 
                                   3477 ; input:
                                   3478 ;   X      code address 
                                   3479 ; output:
                                   3480 ;   X      cmd_idx
                                   3481 ;-----------------------------
      00139A                       3482 get_cmd_idx:
      00139A 90 89            [ 2] 3483 	pushw y
      00139C 90 AE 27 11      [ 2] 3484 	ldw y,#code_addr 
      0013A0 90 CF 00 17      [ 2] 3485 	ldw ptr16,y 
      0013A4 90 5F            [ 1] 3486 	clrw y 
      0013A6 91 D3 17         [ 5] 3487 1$:	cpw x,([ptr16],y)
      0013A9 27 0C            [ 1] 3488 	jreq 3$ 
      0013AB 90 5C            [ 2] 3489 	incw y 
      0013AD 91 D6 17         [ 4] 3490 	ld a,([ptr16],y)
      0013B0 90 5C            [ 2] 3491 	incw y
      0013B2 91 DA 17         [ 4] 3492 	or a,([ptr16],y)	
      0013B5 26 EF            [ 1] 3493 	jrne 1$
      0013B7 93               [ 1] 3494 3$: ldw x,y 
      0013B8 90 85            [ 2] 3495 	popw y 
      0013BA 81               [ 4] 3496 	ret
                                   3497 
                                   3498 ;-------------------------------------
                                   3499 ; decompile tokens list 
                                   3500 ; to original text line 
                                   3501 ; input:
                                   3502 ;   [basicptr]  pointer at line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3503 ;   Y           destination buffer
                                   3504 ; output:
                                   3505 ;   A           length 
                                   3506 ;   Y           after string  
                                   3507 ;------------------------------------
                           000001  3508 	BASE_SAV=1
                           000002  3509 	WIDTH_SAV=2
                           000003  3510 	STR=3
                           000004  3511 	VSIZE=4 
      0013BB                       3512 decompile::
      0013BB                       3513 	_vars VSIZE
      0013BB 52 04            [ 2]    1     sub sp,#VSIZE 
      0013BD C6 00 0A         [ 1] 3514 	ld a,base
      0013C0 6B 01            [ 1] 3515 	ld (BASE_SAV,sp),a  
      0013C2 C6 00 24         [ 1] 3516 	ld a,tab_width 
      0013C5 6B 02            [ 1] 3517 	ld (WIDTH_SAV,sp),a 
      0013C7 17 03            [ 2] 3518 	ldw (STR,sp),y   
      0013C9 72 CE 00 04      [ 5] 3519 	ldw x,[basicptr] ; line number 
      0013CD 35 0A 00 0A      [ 1] 3520 	mov base,#10
      0013D1 35 05 00 24      [ 1] 3521 	mov tab_width,#5
      0013D5 72 5F 00 0B      [ 1] 3522 	clr acc24 
      0013D9 CF 00 0C         [ 2] 3523 	ldw acc16,x
      0013DC CD 09 EE         [ 4] 3524 	call itoa  
      0013DF CD 13 3F         [ 4] 3525 	call right_align 
      0013E2 88               [ 1] 3526 	push a 
      0013E3 90 93            [ 1] 3527 1$:	ldw y,x ; source
      0013E5 1E 04            [ 2] 3528 	ldw x,(STR+1,sp) ; destination
      0013E7 CD 03 B2         [ 4] 3529 	call strcpy 
      0013EA 90 5F            [ 1] 3530 	clrw y 
      0013EC 84               [ 1] 3531 	pop a 
      0013ED 90 97            [ 1] 3532 	ld yl,a 
      0013EF 72 F9 03         [ 2] 3533 	addw y,(STR,sp)
      0013F2 A6 20            [ 1] 3534 	ld a,#SPACE 
      0013F4 90 F7            [ 1] 3535 	ld (y),a 
      0013F6 90 5C            [ 2] 3536 	incw y 
      0013F8 72 5F 00 24      [ 1] 3537 	clr tab_width
      0013FC AE 00 03         [ 2] 3538 	ldw x,#3
      0013FF CF 00 00         [ 2] 3539 	ldw in.w,x 
      001402                       3540 decomp_loop:
      001402 90 89            [ 2] 3541 	pushw y
      001404 CD 09 71         [ 4] 3542 	call next_token 
      001407 90 85            [ 2] 3543 	popw y 
      001409 4D               [ 1] 3544 	tnz a  
      00140A 26 03            [ 1] 3545 	jrne 1$
      00140C CC 14 E8         [ 2] 3546 	jp 20$
      00140F 2A 6F            [ 1] 3547 1$:	jrpl 6$
                                   3548 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      001411 A1 85            [ 1] 3549 	cp a,#TK_VAR 
      001413 26 0C            [ 1] 3550 	jrne 3$
                                   3551 ;; TK_VAR 
      001415 CD 13 2D         [ 4] 3552 	call add_space  
      001418 CD 13 92         [ 4] 3553 	call var_name
      00141B 90 F7            [ 1] 3554 	ld (y),a 
      00141D 90 5C            [ 2] 3555 	incw y  
      00141F 20 E1            [ 2] 3556 	jra decomp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001421                       3557 3$:
      001421 A1 84            [ 1] 3558 	cp a,#TK_INTGR
      001423 26 22            [ 1] 3559 	jrne 4$
                                   3560 ;; TK_INTGR
      001425 CD 13 2D         [ 4] 3561 	call add_space
      001428 72 5F 00 0B      [ 1] 3562 	clr acc24 
      00142C CF 00 0C         [ 2] 3563 	ldw acc16,x 
      00142F 90 89            [ 2] 3564 	pushw y 
      001431 CD 09 EE         [ 4] 3565 	call itoa  
      001434 16 01            [ 2] 3566 	ldw y,(1,sp) 
      001436 88               [ 1] 3567 	push a 
      001437 51               [ 1] 3568 	exgw x,y 
      001438 CD 03 B2         [ 4] 3569 	call strcpy 
      00143B 90 5F            [ 1] 3570 	clrw y
      00143D 84               [ 1] 3571 	pop a  
      00143E 90 97            [ 1] 3572 	ld yl,a 
      001440 72 F9 01         [ 2] 3573 	addw y,(1,sp)
      001443                       3574 	_drop 2 
      001443 5B 02            [ 2]    1     addw sp,#2 
      001445 20 BB            [ 2] 3575 	jra decomp_loop
                                   3576 ;; dictionary keyword 
      001447                       3577 4$:	
      001447 CD 13 9A         [ 4] 3578 	call get_cmd_idx 
      00144A A3 00 8E         [ 2] 3579 	cpw x,#REM_IDX
      00144D 26 22            [ 1] 3580 	jrne 5$
      00144F CE 00 04         [ 2] 3581 	ldw x,basicptr 
                                   3582 ; copy comment to buffer 
      001452 CD 13 2D         [ 4] 3583 	call add_space
      001455 A6 27            [ 1] 3584 	ld a,#''
      001457 90 F7            [ 1] 3585 	ld (y),a 
      001459 90 5C            [ 2] 3586 	incw y 
      00145B                       3587 41$:
      00145B 72 D6 00 00      [ 4] 3588 	ld a,([in.w],x)
      00145F 72 5C 00 01      [ 1] 3589 	inc in  
      001463 90 F7            [ 1] 3590 	ld (y),a 
      001465 90 5C            [ 2] 3591 	incw y 
      001467 C6 00 01         [ 1] 3592 	ld a,in 
      00146A C1 00 03         [ 1] 3593 	cp a,count 
      00146D 2B EC            [ 1] 3594 	jrmi 41$
      00146F 20 77            [ 2] 3595 	jra 20$  
                                   3596 ; insert command name 
      001471                       3597 5$:
      001471 CD 13 2D         [ 4] 3598 	call add_space  
      001474 90 89            [ 2] 3599 	pushw y
      001476 CD 0F C6         [ 4] 3600 	call cmd_name
      001479 90 85            [ 2] 3601 	popw y 
      00147B CD 13 18         [ 4] 3602 	call cpy_cmd_name
      00147E 20 82            [ 2] 3603 	jra decomp_loop 
      001480                       3604 6$:
      001480 A1 02            [ 1] 3605 	cp a,#TK_QSTR 
      001482 26 06            [ 1] 3606 	jrne 7$
                                   3607 ;; TK_QSTR
      001484 CD 13 51         [ 4] 3608 	call cpy_quote  
      001487 CC 14 02         [ 2] 3609 	jp decomp_loop
      00148A                       3610 7$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00148A A1 03            [ 1] 3611 	cp a,#TK_CHAR 
      00148C 26 0E            [ 1] 3612 	jrne 8$
                                   3613 ;; TK_CHAR 
      00148E A6 5C            [ 1] 3614 	ld a,#'\ 
      001490 90 F7            [ 1] 3615 	ld (y),a 
      001492 90 5C            [ 2] 3616 	incw y 
      001494 9F               [ 1] 3617 	ld a,xl 
      001495 90 F7            [ 1] 3618 	ld (y),a 
      001497 90 5C            [ 2] 3619 	incw y 
      001499 CC 14 02         [ 2] 3620 	jp decomp_loop
      00149C A1 01            [ 1] 3621 8$: cp a,#TK_COLON 
      00149E 26 09            [ 1] 3622 	jrne 9$
      0014A0 A6 3A            [ 1] 3623 	ld a,#':
      0014A2                       3624 81$:
      0014A2 90 F7            [ 1] 3625 	ld (y),a 
      0014A4 90 5C            [ 2] 3626 	incw y 
      0014A6                       3627 82$:
      0014A6 CC 14 02         [ 2] 3628 	jp decomp_loop
      0014A9                       3629 9$: 
      0014A9 A1 0A            [ 1] 3630 	cp a,#TK_SHARP
      0014AB 22 0A            [ 1] 3631 	jrugt 10$ 
      0014AD A0 06            [ 1] 3632 	sub a,#TK_ARRAY 
      0014AF 5F               [ 1] 3633 	clrw x 
      0014B0 97               [ 1] 3634 	ld xl,a
      0014B1 1C 14 FE         [ 2] 3635 	addw x,#single_char 
      0014B4 F6               [ 1] 3636 	ld a,(x)
      0014B5 20 EB            [ 2] 3637 	jra 81$ 
      0014B7                       3638 10$: 
      0014B7 A1 11            [ 1] 3639 	cp a,#TK_MINUS 
      0014B9 22 0A            [ 1] 3640 	jrugt 11$
      0014BB A0 10            [ 1] 3641 	sub a,#TK_PLUS 
      0014BD 5F               [ 1] 3642 	clrw x 
      0014BE 97               [ 1] 3643 	ld xl,a 
      0014BF 1C 15 03         [ 2] 3644 	addw x,#add_char 
      0014C2 F6               [ 1] 3645 	ld a,(x)
      0014C3 20 DD            [ 2] 3646 	jra 81$
      0014C5                       3647 11$:
      0014C5 A1 22            [ 1] 3648     cp a,#TK_MOD 
      0014C7 22 0A            [ 1] 3649 	jrugt 12$
      0014C9 A0 20            [ 1] 3650 	sub a,#TK_MULT
      0014CB 5F               [ 1] 3651 	clrw x 
      0014CC 97               [ 1] 3652 	ld xl,a 
      0014CD 1C 15 05         [ 2] 3653 	addw x,#mul_char
      0014D0 F6               [ 1] 3654 	ld a,(x)
      0014D1 20 CF            [ 2] 3655 	jra 81$
      0014D3                       3656 12$:
      0014D3 A0 31            [ 1] 3657 	sub a,#TK_GT  
      0014D5 48               [ 1] 3658 	sll a 
      0014D6 5F               [ 1] 3659 	clrw x 
      0014D7 97               [ 1] 3660 	ld xl,a 
      0014D8 1C 15 08         [ 2] 3661 	addw x,#relop_str 
      0014DB FE               [ 2] 3662 	ldw x,(x)
      0014DC F6               [ 1] 3663 	ld a,(x)
      0014DD 5C               [ 2] 3664 	incw x 
      0014DE 90 F7            [ 1] 3665 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014E0 90 5C            [ 2] 3666 	incw y 
      0014E2 F6               [ 1] 3667 	ld a,(x)
      0014E3 26 BD            [ 1] 3668 	jrne 81$
      0014E5 CC 14 02         [ 2] 3669 	jp decomp_loop 
      0014E8                       3670 20$: 
      0014E8 90 7F            [ 1] 3671 	clr (y)
      0014EA 1E 03            [ 2] 3672 	ldw x,(STR,sp)
      0014EC 7B 01            [ 1] 3673 	ld a,(BASE_SAV,sp)
      0014EE C7 00 0A         [ 1] 3674 	ld base,a 
      0014F1 7B 02            [ 1] 3675 	ld a,(WIDTH_SAV,sp)
      0014F3 C7 00 24         [ 1] 3676 	ld tab_width,a
      0014F6 72 F2 03         [ 2] 3677 	subw y,(STR,sp) 
      0014F9 90 9F            [ 1] 3678 	ld a,yl 
      0014FB                       3679 	_drop VSIZE 
      0014FB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014FD 81               [ 4] 3680 	ret 
                                   3681 
      0014FE 40 28 29 2C 23        3682 single_char: .byte '@','(',')',',','#'
      001503 2B 2D                 3683 add_char: .byte '+','-'
      001505 2A 2F 25              3684 mul_char: .byte '*','/','%'
      001508 15 14 15 16 15 18 15  3685 relop_str: .word gt,equal,ge,lt,le,ne 
             1B 15 1D 15 20
      001514 3E 00                 3686 gt: .asciz ">"
      001516 3D 00                 3687 equal: .asciz "="
      001518 3E 3D 00              3688 ge: .asciz ">="
      00151B 3C 00                 3689 lt: .asciz "<"
      00151D 3C 3D 00              3690 le: .asciz "<="
      001520 3C 3E 00              3691 ne:  .asciz "<>"
                                   3692 
                                   3693 
                                   3694 ;--------------------------
                                   3695 ; decompile line from token list
                                   3696 ; and print it. 
                                   3697 ; input:
                                   3698 ;   A       stop at this position 
                                   3699 ;   X 		pointer at line
                                   3700 ; output:
                                   3701 ;   none 
                                   3702 ;--------------------------	
      001523                       3703 prt_basic_line:
      001523 C7 00 03         [ 1] 3704 	ld count,a 
      001526 E6 02            [ 1] 3705 	ld a,(2,x)
      001528 C1 00 03         [ 1] 3706 	cp a,count 
      00152B 2A 03            [ 1] 3707 	jrpl 1$ 
      00152D C7 00 03         [ 1] 3708 	ld count,a 
      001530 CF 00 04         [ 2] 3709 1$:	ldw basicptr,x 
      001533 90 AE 16 90      [ 2] 3710 	ldw y,#tib  
      001537 CD 13 BB         [ 4] 3711 	call decompile 
      00153A CD 00 00         [ 4] 3712 	call puts 
      00153D A6 0D            [ 1] 3713 	ld a,#CR 
      00153F CD 02 C0         [ 4] 3714 	call putc 
      001542 81               [ 4] 3715 	ret 
                                   3716 
                                   3717 
                                   3718 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3719 ;---------------------------------
                                   3720 ; BASIC: PRINT|? arg_list 
                                   3721 ; print values from argument list
                                   3722 ;----------------------------------
                           000001  3723 	COMMA=1
                           000001  3724 	VSIZE=1
      001543                       3725 print:
      001543                       3726 	_vars VSIZE 
      001543 52 01            [ 2]    1     sub sp,#VSIZE 
      001545                       3727 reset_comma:
      001545 0F 01            [ 1] 3728 	clr (COMMA,sp)
      001547                       3729 prt_loop:
      001547 CD 09 71         [ 4] 3730 	call next_token
      00154A A1 02            [ 1] 3731 	cp a,#CMD_END 
      00154C 25 4F            [ 1] 3732 	jrult print_exit ; colon or end of line 
      00154E A1 02            [ 1] 3733 	cp a,#TK_QSTR
      001550 27 12            [ 1] 3734 	jreq 1$
      001552 A1 03            [ 1] 3735 	cp a,#TK_CHAR 
      001554 27 13            [ 1] 3736 	jreq 2$ 
      001556 A1 82            [ 1] 3737 	cp a,#TK_CFUNC 
      001558 27 15            [ 1] 3738 	jreq 3$
      00155A A1 09            [ 1] 3739 	cp a,#TK_COMMA 
      00155C 27 18            [ 1] 3740 	jreq 4$
      00155E A1 0A            [ 1] 3741 	cp a,#TK_SHARP 
      001560 27 18            [ 1] 3742 	jreq 5$
      001562 20 28            [ 2] 3743 	jra 7$ 
      001564                       3744 1$:	; print string 
      001564 CD 00 00         [ 4] 3745 	call puts
      001567 20 DC            [ 2] 3746 	jra reset_comma
      001569                       3747 2$:	; print character 
      001569 9F               [ 1] 3748 	ld a,xl 
      00156A CD 02 C0         [ 4] 3749 	call putc 
      00156D 20 D6            [ 2] 3750 	jra reset_comma 
      00156F                       3751 3$: ; print character function value  	
      00156F FD               [ 4] 3752 	call (x)
      001570 9F               [ 1] 3753 	ld a,xl 
      001571 CD 02 C0         [ 4] 3754 	call putc
      001574 20 CF            [ 2] 3755 	jra reset_comma 
      001576                       3756 4$: ; set comma state 
      001576 03 01            [ 1] 3757 	cpl (COMMA,sp)
      001578 20 CD            [ 2] 3758 	jra prt_loop   
      00157A                       3759 5$: ; # character must be followed by an integer   
      00157A CD 09 71         [ 4] 3760 	call next_token
      00157D A1 84            [ 1] 3761 	cp a,#TK_INTGR 
      00157F 27 03            [ 1] 3762 	jreq 6$
      001581 CC 08 7F         [ 2] 3763 	jp syntax_error 
      001584                       3764 6$: ; set tab width
      001584 9F               [ 1] 3765 	ld a,xl 
      001585 A4 0F            [ 1] 3766 	and a,#15 
      001587 C7 00 24         [ 1] 3767 	ld tab_width,a 
      00158A 20 B9            [ 2] 3768 	jra reset_comma 
      00158C                       3769 7$:	
      00158C                       3770 	_unget_token 
      00158C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001591 CD 11 A2         [ 4] 3771 	call relation 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001594 A1 84            [ 1] 3772 	cp a,#TK_INTGR 
      001596 26 05            [ 1] 3773 	jrne print_exit 
      001598 CD 09 D2         [ 4] 3774     call print_int 
      00159B 20 A8            [ 2] 3775 	jra reset_comma 
      00159D                       3776 print_exit:
      00159D 0D 01            [ 1] 3777 	tnz (COMMA,sp)
      00159F 26 05            [ 1] 3778 	jrne 9$
      0015A1 A6 0D            [ 1] 3779 	ld a,#CR 
      0015A3 CD 02 C0         [ 4] 3780     call putc 
      0015A6                       3781 9$:	_drop VSIZE 
      0015A6 5B 01            [ 2]    1     addw sp,#VSIZE 
      0015A8 81               [ 4] 3782 	ret 
                                   3783 
                                   3784 ;----------------------
                                   3785 ; 'save_context' and
                                   3786 ; 'rest_context' must be 
                                   3787 ; called at the same 
                                   3788 ; call stack depth 
                                   3789 ; i.e. SP must have the 
                                   3790 ; save value at  
                                   3791 ; entry point of both 
                                   3792 ; routine. 
                                   3793 ;---------------------
                           000004  3794 	CTXT_SIZE=4 ; size of saved data 
                                   3795 ;--------------------
                                   3796 ; save current BASIC
                                   3797 ; interpreter context 
                                   3798 ; on stack 
                                   3799 ;--------------------
      0015A9                       3800 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0015A9                       3801 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0015A9                       3802 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      0015A9                       3803 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      0015A9                       3804 save_context:
      0015A9 CE 00 04         [ 2] 3805 	ldw x,basicptr 
      0015AC 1F 03            [ 2] 3806 	ldw (BPTR,sp),x
      0015AE C6 00 01         [ 1] 3807 	ld a,in 
      0015B1 6B 05            [ 1] 3808 	ld (IN,sp),a
      0015B3 C6 00 03         [ 1] 3809 	ld a,count 
      0015B6 6B 06            [ 1] 3810 	ld (CNT,sp),a  
      0015B8 81               [ 4] 3811 	ret
                                   3812 
                                   3813 ;-----------------------
                                   3814 ; restore previously saved 
                                   3815 ; BASIC interpreter context 
                                   3816 ; from stack 
                                   3817 ;-------------------------
      0015B9                       3818 rest_context:
      0015B9 1E 03            [ 2] 3819 	ldw x,(BPTR,sp)
      0015BB CF 00 04         [ 2] 3820 	ldw basicptr,x 
      0015BE 7B 05            [ 1] 3821 	ld a,(IN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015C0 C7 00 01         [ 1] 3822 	ld in,a
      0015C3 7B 06            [ 1] 3823 	ld a,(CNT,sp)
      0015C5 C7 00 03         [ 1] 3824 	ld count,a  
      0015C8 81               [ 4] 3825 	ret
                                   3826 
                                   3827 
                                   3828 
                                   3829 ;------------------------------------------
                                   3830 ; BASIC: INPUT [string]var[,[string]var]
                                   3831 ; input value in variables 
                                   3832 ; [string] optionally can be used as prompt 
                                   3833 ;-----------------------------------------
                           000001  3834 	CX_BPTR=1
                           000003  3835 	CX_IN=3
                           000004  3836 	CX_CNT=4
                           000005  3837 	SKIP=5
                           000006  3838 	VAR_ADDR=6
                           000007  3839 	VSIZE=7
      0015C9                       3840 input_var:
      0015C9                       3841 	_vars VSIZE 
      0015C9 52 07            [ 2]    1     sub sp,#VSIZE 
      0015CB                       3842 input_loop:
      0015CB 0F 05            [ 1] 3843 	clr (SKIP,sp)
      0015CD CD 09 71         [ 4] 3844 	call next_token 
      0015D0 A1 02            [ 1] 3845 	cp a,#TK_QSTR 
      0015D2 26 08            [ 1] 3846 	jrne 1$ 
      0015D4 CD 00 00         [ 4] 3847 	call puts 
      0015D7 03 05            [ 1] 3848 	cpl (SKIP,sp)
      0015D9 CD 09 71         [ 4] 3849 	call next_token 
      0015DC A1 85            [ 1] 3850 1$: cp a,#TK_VAR  
      0015DE 27 03            [ 1] 3851 	jreq 2$ 
      0015E0 CC 08 7F         [ 2] 3852 	jp syntax_error
      0015E3 1F 06            [ 2] 3853 2$:	ldw (VAR_ADDR,sp),x 
      0015E5 0D 05            [ 1] 3854 	tnz (SKIP,sp)
      0015E7 26 06            [ 1] 3855 	jrne 21$ 
      0015E9 CD 13 92         [ 4] 3856 	call var_name 
      0015EC CD 02 C0         [ 4] 3857 	call putc   
      0015EF                       3858 21$:
      0015EF A6 3A            [ 1] 3859 	ld a,#':
      0015F1 CD 02 C0         [ 4] 3860 	call putc 
      0015F4 CD 15 A9         [ 4] 3861 	call save_context 
      0015F7 72 5F 00 03      [ 1] 3862 	clr count  
      0015FB CD 00 00         [ 4] 3863 	call readln 
      0015FE AE 16 90         [ 2] 3864 	ldw x,#tib 
      001601 3B 00 03         [ 1] 3865 	push count
      001604 4B 00            [ 1] 3866 	push #0 
      001606 72 FB 01         [ 2] 3867 	addw x,(1,sp)
      001609 5C               [ 2] 3868 	incw x 
      00160A                       3869 	_drop 2 
      00160A 5B 02            [ 2]    1     addw sp,#2 
      00160C 72 5F 00 01      [ 1] 3870 	clr in 
      001610 CD 0C 01         [ 4] 3871 	call get_token
      001613 A1 84            [ 1] 3872 	cp a,#TK_INTGR
      001615 27 06            [ 1] 3873 	jreq 3$ 
      001617 CD 15 B9         [ 4] 3874 	call rest_context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00161A CC 08 7F         [ 2] 3875 	jp syntax_error
      00161D 16 06            [ 2] 3876 3$: ldw y,(VAR_ADDR,sp) 
      00161F 90 FF            [ 2] 3877 	ldw (y),x 
      001621 CD 15 B9         [ 4] 3878 	call rest_context
      001624 CD 09 71         [ 4] 3879 	call next_token 
      001627 A1 09            [ 1] 3880 	cp a,#TK_COMMA 
      001629 27 A0            [ 1] 3881 	jreq input_loop 
      00162B A1 01            [ 1] 3882 	cp a,#TK_COLON 
      00162D 23 03            [ 2] 3883     jrule input_exit 
      00162F CC 08 7F         [ 2] 3884 	jp syntax_error 
      001632                       3885 input_exit:
      001632                       3886 	_drop VSIZE 
      001632 5B 07            [ 2]    1     addw sp,#VSIZE 
      001634 81               [ 4] 3887 	ret 
                                   3888 
                                   3889 
                                   3890 ;---------------------
                                   3891 ; BASIC: REMARK | ' 
                                   3892 ; skip comment to end of line 
                                   3893 ;---------------------- 
      001635                       3894 remark:
      001635 55 00 03 00 01   [ 1] 3895 	mov in,count 
      00163A 81               [ 4] 3896  	ret 
                                   3897 
                                   3898 
                                   3899 ;---------------------
                                   3900 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3901 ; read in loop 'addr'  
                                   3902 ; apply & 'mask' to value 
                                   3903 ; loop while result==0.  
                                   3904 ; 'xor_mask' is used to 
                                   3905 ; invert the wait logic.
                                   3906 ; i.e. loop while not 0.
                                   3907 ;---------------------
                           000001  3908 	XMASK=1 
                           000002  3909 	MASK=2
                           000003  3910 	ADDR=3
                           000004  3911 	VSIZE=4
      00163B                       3912 wait: 
      00163B                       3913 	_vars VSIZE
      00163B 52 04            [ 2]    1     sub sp,#VSIZE 
      00163D 0F 01            [ 1] 3914 	clr (XMASK,sp) 
      00163F CD 10 57         [ 4] 3915 	call arg_list 
      001642 A1 02            [ 1] 3916 	cp a,#2
      001644 24 03            [ 1] 3917 	jruge 0$
      001646 CC 08 7F         [ 2] 3918 	jp syntax_error 
      001649 A1 03            [ 1] 3919 0$:	cp a,#3
      00164B 25 04            [ 1] 3920 	jrult 1$
      00164D 85               [ 2] 3921 	popw x 
      00164E 9F               [ 1] 3922 	ld a,xl
      00164F 6B 01            [ 1] 3923 	ld (XMASK,sp),a 
      001651 85               [ 2] 3924 1$: popw x ; mask 
      001652 9F               [ 1] 3925 	ld a,xl 
      001653 6B 02            [ 1] 3926 	ld (MASK,sp),a 
      001655 85               [ 2] 3927 	popw x ; address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001656 F6               [ 1] 3928 2$:	ld a,(x)
      001657 14 02            [ 1] 3929 	and a,(MASK,sp)
      001659 18 01            [ 1] 3930 	xor a,(XMASK,sp)
      00165B 27 F9            [ 1] 3931 	jreq 2$ 
      00165D                       3932 	_drop VSIZE 
      00165D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00165F 81               [ 4] 3933 	ret 
                                   3934 
                                   3935 ;---------------------
                                   3936 ; BASIC: BSET addr,mask
                                   3937 ; set bits at 'addr' corresponding 
                                   3938 ; to those of 'mask' that are at 1.
                                   3939 ; arguments:
                                   3940 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3941 ;   mask        mask|addr
                                   3942 ; output:
                                   3943 ;	none 
                                   3944 ;--------------------------
      001660                       3945 bit_set:
      001660 CD 10 57         [ 4] 3946 	call arg_list 
      001663 A1 02            [ 1] 3947 	cp a,#2	 
      001665 27 03            [ 1] 3948 	jreq 1$ 
      001667 CC 08 7F         [ 2] 3949 	jp syntax_error
      00166A                       3950 1$: 
      00166A 85               [ 2] 3951 	popw x ; mask 
      00166B 9F               [ 1] 3952 	ld a,xl 
      00166C 85               [ 2] 3953 	popw x ; addr  
      00166D FA               [ 1] 3954 	or a,(x)
      00166E F7               [ 1] 3955 	ld (x),a
      00166F 81               [ 4] 3956 	ret 
                                   3957 
                                   3958 ;---------------------
                                   3959 ; BASIC: BRES addr,mask
                                   3960 ; reset bits at 'addr' corresponding 
                                   3961 ; to those of 'mask' that are at 1.
                                   3962 ; arguments:
                                   3963 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3964 ;   mask	    ~mask&*addr  
                                   3965 ; output:
                                   3966 ;	none 
                                   3967 ;--------------------------
      001670                       3968 bit_reset:
      001670 CD 10 57         [ 4] 3969 	call arg_list 
      001673 A1 02            [ 1] 3970 	cp a,#2  
      001675 27 03            [ 1] 3971 	jreq 1$ 
      001677 CC 08 7F         [ 2] 3972 	jp syntax_error
      00167A                       3973 1$: 
      00167A 85               [ 2] 3974 	popw x ; mask 
      00167B 9F               [ 1] 3975 	ld a,xl 
      00167C 43               [ 1] 3976 	cpl a 
      00167D 85               [ 2] 3977 	popw x ; addr  
      00167E F4               [ 1] 3978 	and a,(x)
      00167F F7               [ 1] 3979 	ld (x),a 
      001680 81               [ 4] 3980 	ret 
                                   3981 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3982 ;---------------------
                                   3983 ; BASIC: BTOGL addr,mask
                                   3984 ; toggle bits at 'addr' corresponding 
                                   3985 ; to those of 'mask' that are at 1.
                                   3986 ; arguments:
                                   3987 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3988 ;   mask	    mask^*addr  
                                   3989 ; output:
                                   3990 ;	none 
                                   3991 ;--------------------------
      001681                       3992 bit_toggle:
      001681 CD 10 57         [ 4] 3993 	call arg_list 
      001684 A1 02            [ 1] 3994 	cp a,#2 
      001686 27 03            [ 1] 3995 	jreq 1$ 
      001688 CC 08 7F         [ 2] 3996 	jp syntax_error
      00168B 85               [ 2] 3997 1$: popw x ; mask 
      00168C 9F               [ 1] 3998 	ld a,xl 
      00168D 85               [ 2] 3999 	popw x ; addr  
      00168E F8               [ 1] 4000 	xor a,(x)
      00168F F7               [ 1] 4001 	ld (x),a 
      001690 81               [ 4] 4002 	ret 
                                   4003 
                                   4004 
                                   4005 ;---------------------
                                   4006 ; BASIC: BTEST(addr,bit)
                                   4007 ; return bit value at 'addr' 
                                   4008 ; bit is in range {0..7}.
                                   4009 ; arguments:
                                   4010 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4011 ;   bit 	    bit position {0..7}  
                                   4012 ; output:
                                   4013 ;	none 
                                   4014 ;--------------------------
      001691                       4015 bit_test:
      001691 CD 10 52         [ 4] 4016 	call func_args 
      001694 A1 02            [ 1] 4017 	cp a,#2
      001696 27 03            [ 1] 4018 	jreq 0$
      001698 CC 08 7F         [ 2] 4019 	jp syntax_error
      00169B                       4020 0$:	
      00169B 85               [ 2] 4021 	popw x 
      00169C 9F               [ 1] 4022 	ld a,xl 
      00169D A4 07            [ 1] 4023 	and a,#7
      00169F 88               [ 1] 4024 	push a   
      0016A0 A6 01            [ 1] 4025 	ld a,#1 
      0016A2 0D 01            [ 1] 4026 1$: tnz (1,sp)
      0016A4 27 05            [ 1] 4027 	jreq 2$
      0016A6 48               [ 1] 4028 	sll a 
      0016A7 0A 01            [ 1] 4029 	dec (1,sp)
      0016A9 20 F7            [ 2] 4030 	jra 1$
      0016AB                       4031 2$: _drop 1 
      0016AB 5B 01            [ 2]    1     addw sp,#1 
      0016AD 85               [ 2] 4032 	popw x 
      0016AE F4               [ 1] 4033 	and a,(x)
      0016AF 27 02            [ 1] 4034 	jreq 3$
      0016B1 A6 01            [ 1] 4035 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016B3 5F               [ 1] 4036 3$:	clrw x 
      0016B4 97               [ 1] 4037 	ld xl,a 
      0016B5 A6 84            [ 1] 4038 	ld a,#TK_INTGR
      0016B7 81               [ 4] 4039 	ret
                                   4040 
                                   4041 
                                   4042 ;--------------------
                                   4043 ; BASIC: POKE addr,byte
                                   4044 ; put a byte at addr 
                                   4045 ;--------------------
      0016B8                       4046 poke:
      0016B8 CD 10 57         [ 4] 4047 	call arg_list 
      0016BB A1 02            [ 1] 4048 	cp a,#2
      0016BD 27 03            [ 1] 4049 	jreq 1$
      0016BF CC 08 7F         [ 2] 4050 	jp syntax_error
      0016C2                       4051 1$:	
      0016C2 85               [ 2] 4052 	popw x  
      0016C3 9F               [ 1] 4053     ld a,xl 
      0016C4 85               [ 2] 4054 	popw x 
      0016C5 F7               [ 1] 4055 	ld (x),a 
      0016C6 81               [ 4] 4056 	ret 
                                   4057 
                                   4058 ;-----------------------
                                   4059 ; BASIC: PEEK(addr)
                                   4060 ; get the byte at addr 
                                   4061 ; input:
                                   4062 ;	none 
                                   4063 ; output:
                                   4064 ;	X 		value 
                                   4065 ;-----------------------
      0016C7                       4066 peek:
      0016C7 CD 10 52         [ 4] 4067 	call func_args
      0016CA A1 01            [ 1] 4068 	cp a,#1 
      0016CC 27 03            [ 1] 4069 	jreq 1$
      0016CE CC 08 7F         [ 2] 4070 	jp syntax_error
      0016D1 85               [ 2] 4071 1$: popw x 
      0016D2 F6               [ 1] 4072 	ld a,(x)
      0016D3 5F               [ 1] 4073 	clrw x 
      0016D4 97               [ 1] 4074 	ld xl,a 
      0016D5 A6 84            [ 1] 4075 	ld a,#TK_INTGR
      0016D7 81               [ 4] 4076 	ret 
                                   4077 
                                   4078 ;---------------------------
                                   4079 ; BASIC IF expr : instructions
                                   4080 ; evaluate expr and if true 
                                   4081 ; execute instructions on same line. 
                                   4082 ;----------------------------
      0016D8                       4083 if: 
      0016D8 CD 11 A2         [ 4] 4084 	call relation 
      0016DB A1 84            [ 1] 4085 	cp a,#TK_INTGR
      0016DD 27 03            [ 1] 4086 	jreq 1$ 
      0016DF CC 08 7F         [ 2] 4087 	jp syntax_error
      0016E2 4F               [ 1] 4088 1$:	clr a 
      0016E3 5D               [ 2] 4089 	tnzw x 
      0016E4 26 05            [ 1] 4090 	jrne 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4091 ;skip to next line
      0016E6 55 00 03 00 01   [ 1] 4092 	mov in,count
      0016EB 81               [ 4] 4093 9$:	ret 
                                   4094 
                                   4095 ;------------------------
                                   4096 ; BASIC: FOR var=expr 
                                   4097 ; set variable to expression 
                                   4098 ; leave variable address 
                                   4099 ; on stack and set
                                   4100 ; FLOOP bit in 'flags'
                                   4101 ;-----------------
                           000001  4102 	RETL1=1 ; return address  
                           000003  4103 	FSTEP=3  ; variable increment
                           000005  4104 	LIMIT=5 ; loop limit 
                           000007  4105 	CVAR=7   ; control variable 
                           000009  4106 	INW=9   ;  in.w saved
                           00000B  4107 	BPTR=11 ; baseptr saved
                           00000A  4108 	VSIZE=10  
      0016EC                       4109 for: ; { -- var_addr }
      0016EC 85               [ 2] 4110 	popw x ; call return address 
      0016ED                       4111 	_vars VSIZE 
      0016ED 52 0A            [ 2]    1     sub sp,#VSIZE 
      0016EF 89               [ 2] 4112 	pushw x  ; RETL1 
      0016F0 A6 85            [ 1] 4113 	ld a,#TK_VAR 
      0016F2 CD 10 45         [ 4] 4114 	call expect
      0016F5 1F 07            [ 2] 4115 	ldw (CVAR,sp),x  ; control variable 
      0016F7 CD 12 82         [ 4] 4116 	call let_var 
      0016FA 72 14 00 23      [ 1] 4117 	bset flags,#FLOOP 
                                   4118 ; open space on stack for loop data 
      0016FE 5F               [ 1] 4119 	clrw x 
      0016FF 1F 0B            [ 2] 4120 	ldw (BPTR,sp),x 
      001701 1F 09            [ 2] 4121 	ldw (INW,sp),x 
      001703 CD 09 71         [ 4] 4122 	call next_token 
      001706 A1 80            [ 1] 4123 	cp a,#TK_CMD 
      001708 27 03            [ 1] 4124 	jreq 1$
      00170A CC 08 7F         [ 2] 4125 	jp syntax_error
      00170D                       4126 1$:  
      00170D A3 17 15         [ 2] 4127 	cpw x,#to 
      001710 27 03            [ 1] 4128 	jreq to
      001712 CC 08 7F         [ 2] 4129 	jp syntax_error 
                                   4130 
                                   4131 ;-----------------------------------
                                   4132 ; BASIC: TO expr 
                                   4133 ; second part of FOR loop initilization
                                   4134 ; leave limit on stack and set 
                                   4135 ; FTO bit in 'flags'
                                   4136 ;-----------------------------------
      001715                       4137 to: ; { var_addr -- var_addr limit step }
      001715 72 04 00 23 03   [ 2] 4138 	btjt flags,#FLOOP,1$
      00171A CC 08 7F         [ 2] 4139 	jp syntax_error
      00171D CD 11 A2         [ 4] 4140 1$: call relation  
      001720 A1 84            [ 1] 4141 	cp a,#TK_INTGR 
      001722 27 03            [ 1] 4142 	jreq 2$ 
      001724 CC 08 7F         [ 2] 4143 	jp syntax_error
      001727 1F 05            [ 2] 4144 2$: ldw (LIMIT,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4145 ;	ldw x,in.w 
      001729 CD 09 71         [ 4] 4146 	call next_token
      00172C A1 00            [ 1] 4147 	cp a,#TK_NONE  
      00172E 27 0E            [ 1] 4148 	jreq 4$ 
      001730 A1 80            [ 1] 4149 	cp a,#TK_CMD
      001732 26 05            [ 1] 4150 	jrne 3$
      001734 A3 17 45         [ 2] 4151 	cpw x,#step 
      001737 27 0C            [ 1] 4152 	jreq step
      001739                       4153 3$:	
      001739                       4154 	_unget_token   	 
      001739 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00173E                       4155 4$:	
      00173E AE 00 01         [ 2] 4156 	ldw x,#1   ; default step  
      001741 1F 03            [ 2] 4157 	ldw (FSTEP,sp),x 
      001743 20 14            [ 2] 4158 	jra store_loop_addr 
                                   4159 
                                   4160 
                                   4161 ;----------------------------------
                                   4162 ; BASIC: STEP expr 
                                   4163 ; optional third par of FOR loop
                                   4164 ; initialization. 	
                                   4165 ;------------------------------------
      001745                       4166 step: ; {var limit -- var limit step}
      001745 72 04 00 23 03   [ 2] 4167 	btjt flags,#FLOOP,1$
      00174A CC 08 7F         [ 2] 4168 	jp syntax_error
      00174D CD 11 A2         [ 4] 4169 1$: call relation
      001750 A1 84            [ 1] 4170 	cp a,#TK_INTGR
      001752 27 03            [ 1] 4171 	jreq 2$
      001754 CC 08 7F         [ 2] 4172 	jp syntax_error
      001757 1F 03            [ 2] 4173 2$:	ldw (FSTEP,sp),x ; step
                                   4174 ; leave loop back entry point on cstack 
                                   4175 ; cstack is 1 call deep from interpreter
      001759                       4176 store_loop_addr:
      001759 CE 00 04         [ 2] 4177 	ldw x,basicptr  
      00175C 1F 0B            [ 2] 4178 	ldw (BPTR,sp),x 
      00175E CE 00 00         [ 2] 4179 	ldw x,in.w 
      001761 1F 09            [ 2] 4180 	ldw (INW,sp),x   
      001763 72 15 00 23      [ 1] 4181 	bres flags,#FLOOP 
      001767 72 5C 00 20      [ 1] 4182 	inc loop_depth  
      00176B 81               [ 4] 4183 	ret 
                                   4184 
                                   4185 ;--------------------------------
                                   4186 ; BASIC: NEXT var 
                                   4187 ; FOR loop control 
                                   4188 ; increment variable with step 
                                   4189 ; and compare with limit 
                                   4190 ; loop if threshold not crossed.
                                   4191 ; else stack. 
                                   4192 ; and decrement 'loop_depth' 
                                   4193 ;--------------------------------
      00176C                       4194 next: ; {var limit step retl1 -- [var limit step ] }
      00176C 72 5D 00 20      [ 1] 4195 	tnz loop_depth 
      001770 26 03            [ 1] 4196 	jrne 1$ 
      001772 CC 08 7F         [ 2] 4197 	jp syntax_error 
      001775                       4198 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001775 A6 85            [ 1] 4199 	ld a,#TK_VAR 
      001777 CD 10 45         [ 4] 4200 	call expect
                                   4201 ; check for good variable after NEXT 	 
      00177A 13 07            [ 2] 4202 	cpw x,(CVAR,sp)
      00177C 27 03            [ 1] 4203 	jreq 2$  
      00177E CC 08 7F         [ 2] 4204 	jp syntax_error ; not the good one 
      001781                       4205 2$: ; increment variable 
      001781 FE               [ 2] 4206 	ldw x,(x)  ; get var value 
      001782 72 FB 03         [ 2] 4207 	addw x,(FSTEP,sp) ; var+step 
      001785 16 07            [ 2] 4208 	ldw y,(CVAR,sp)
      001787 90 FF            [ 2] 4209 	ldw (y),x ; save var new value 
                                   4210 ; check sign of STEP  
      001789 A6 80            [ 1] 4211 	ld a,#0x80
      00178B 15 03            [ 1] 4212 	bcp a,(FSTEP,sp)
      00178D 2A 06            [ 1] 4213 	jrpl 4$
                                   4214 ;negative step 
      00178F 13 05            [ 2] 4215 	cpw x,(LIMIT,sp)
      001791 2F 1B            [ 1] 4216 	jrslt loop_done
      001793 20 04            [ 2] 4217 	jra loop_back 
      001795                       4218 4$: ; positive step
      001795 13 05            [ 2] 4219 	cpw x,(LIMIT,sp)
      001797 2C 15            [ 1] 4220 	jrsgt loop_done
      001799                       4221 loop_back:
      001799 1E 0B            [ 2] 4222 	ldw x,(BPTR,sp)
      00179B CF 00 04         [ 2] 4223 	ldw basicptr,x 
      00179E 72 01 00 23 05   [ 2] 4224 	btjf flags,#FRUN,1$ 
      0017A3 E6 02            [ 1] 4225 	ld a,(2,x)
      0017A5 C7 00 03         [ 1] 4226 	ld count,a
      0017A8 1E 09            [ 2] 4227 1$:	ldw x,(INW,sp)
      0017AA CF 00 00         [ 2] 4228 	ldw in.w,x 
      0017AD 81               [ 4] 4229 	ret 
      0017AE                       4230 loop_done:
                                   4231 	; remove loop data from stack  
      0017AE 85               [ 2] 4232 	popw x
      0017AF                       4233 	_drop VSIZE 
      0017AF 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0017B1 72 5A 00 20      [ 1] 4234 	dec loop_depth 
                                   4235 ;	pushw x 
                                   4236 ;	ret 
      0017B5 FC               [ 2] 4237 	jp (x)
                                   4238 
                                   4239 ;----------------------------
                                   4240 ; called by goto/gosub
                                   4241 ; to get target line number 
                                   4242 ;---------------------------
      0017B6                       4243 get_target_line:
      0017B6 CD 11 A2         [ 4] 4244 	call relation 
      0017B9 A1 84            [ 1] 4245 	cp a,#TK_INTGR
      0017BB 27 03            [ 1] 4246 	jreq 1$
      0017BD CC 08 7F         [ 2] 4247 	jp syntax_error
      0017C0 CD 04 02         [ 4] 4248 1$:	call search_lineno  
      0017C3 5D               [ 2] 4249 	tnzw x 
      0017C4 26 05            [ 1] 4250 	jrne 2$ 
      0017C6 A6 05            [ 1] 4251 	ld a,#ERR_NO_LINE 
      0017C8 CC 08 81         [ 2] 4252 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017CB 81               [ 4] 4253 2$:	ret 
                                   4254 
                                   4255 ;------------------------
                                   4256 ; BASIC: GOTO line# 
                                   4257 ; jump to line# 
                                   4258 ; here cstack is 2 call deep from interpreter 
                                   4259 ;------------------------
      0017CC                       4260 goto:
      0017CC 72 00 00 23 06   [ 2] 4261 	btjt flags,#FRUN,0$ 
      0017D1 A6 06            [ 1] 4262 	ld a,#ERR_RUN_ONLY
      0017D3 CC 08 81         [ 2] 4263 	jp tb_error 
      0017D6 81               [ 4] 4264 	ret 
      0017D7 CD 17 B6         [ 4] 4265 0$:	call get_target_line
      0017DA                       4266 jp_to_target:
      0017DA CF 00 04         [ 2] 4267 	ldw basicptr,x 
      0017DD E6 02            [ 1] 4268 	ld a,(2,x)
      0017DF C7 00 03         [ 1] 4269 	ld count,a 
      0017E2 35 03 00 01      [ 1] 4270 	mov in,#3 
      0017E6 81               [ 4] 4271 	ret 
                                   4272 
                                   4273 
                                   4274 ;--------------------
                                   4275 ; BASIC: GOSUB line#
                                   4276 ; basic subroutine call
                                   4277 ; actual line# and basicptr 
                                   4278 ; are saved on cstack
                                   4279 ; here cstack is 2 call deep from interpreter 
                                   4280 ;--------------------
                           000003  4281 	RET_ADDR=3
                           000005  4282 	RET_INW=5
                           000004  4283 	VSIZE=4  
      0017E7                       4284 gosub:
      0017E7 72 00 00 23 06   [ 2] 4285 	btjt flags,#FRUN,0$ 
      0017EC A6 06            [ 1] 4286 	ld a,#ERR_RUN_ONLY
      0017EE CC 08 81         [ 2] 4287 	jp tb_error 
      0017F1 81               [ 4] 4288 	ret 
      0017F2 85               [ 2] 4289 0$:	popw x 
      0017F3                       4290 	_vars VSIZE  
      0017F3 52 04            [ 2]    1     sub sp,#VSIZE 
      0017F5 89               [ 2] 4291 	pushw x 
      0017F6 CE 00 04         [ 2] 4292 	ldw x,basicptr
      0017F9 1F 03            [ 2] 4293 	ldw (RET_ADDR,sp),x 
      0017FB CD 17 B6         [ 4] 4294 	call get_target_line  
      0017FE 89               [ 2] 4295 	pushw x 
      0017FF CE 00 00         [ 2] 4296 	ldw x,in.w 
      001802 1F 07            [ 2] 4297 	ldw (RET_INW+2,sp),x
      001804 85               [ 2] 4298 	popw x 
      001805 20 D3            [ 2] 4299 	jra jp_to_target
                                   4300 
                                   4301 ;------------------------
                                   4302 ; BASIC: RETURN 
                                   4303 ; exit from a subroutine 
                                   4304 ; 
                                   4305 ;------------------------
      001807                       4306 return:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001807 72 00 00 23 05   [ 2] 4307 	btjt flags,#FRUN,0$ 
      00180C A6 06            [ 1] 4308 	ld a,#ERR_RUN_ONLY
      00180E CC 08 81         [ 2] 4309 	jp tb_error 
      001811                       4310 0$:	
      001811 1E 03            [ 2] 4311 	ldw x,(RET_ADDR,sp) 
      001813 CF 00 04         [ 2] 4312 	ldw basicptr,x
      001816 E6 02            [ 1] 4313 	ld a,(2,x)
      001818 C7 00 03         [ 1] 4314 	ld count,a  
      00181B 1E 05            [ 2] 4315 	ldw x,(RET_INW,sp)
      00181D CF 00 00         [ 2] 4316 	ldw in.w,x 
      001820 85               [ 2] 4317 	popw x 
      001821                       4318 	_drop VSIZE 
      001821 5B 04            [ 2]    1     addw sp,#VSIZE 
      001823 89               [ 2] 4319 	pushw x
      001824 81               [ 4] 4320 	ret  
                                   4321 
                                   4322 
                                   4323 ;----------------------------------
                                   4324 ; BASIC: RUN
                                   4325 ; run BASIC program in RAM
                                   4326 ;----------------------------------- 
      001825                       4327 run: 
      001825 72 01 00 23 02   [ 2] 4328 	btjf flags,#FRUN,0$  
      00182A 4F               [ 1] 4329 	clr a 
      00182B 81               [ 4] 4330 	ret
      00182C                       4331 0$: 
      00182C 72 09 00 23 12   [ 2] 4332 	btjf flags,#FBREAK,1$
      001831                       4333 	_drop 2 
      001831 5B 02            [ 2]    1     addw sp,#2 
      001833 CD 15 B9         [ 4] 4334 	call rest_context
      001836                       4335 	_drop CTXT_SIZE 
      001836 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001838 72 19 00 23      [ 1] 4336 	bres flags,#FBREAK 
      00183C 72 10 00 23      [ 1] 4337 	bset flags,#FRUN 
      001840 CC 09 25         [ 2] 4338 	jp interpreter 
      001843 CE 00 1C         [ 2] 4339 1$:	ldw x,txtbgn
      001846 C3 00 1E         [ 2] 4340 	cpw x,txtend 
      001849 2B 0C            [ 1] 4341 	jrmi run_it 
      00184B AE 08 18         [ 2] 4342 	ldw x,#err_no_prog
      00184E CD 00 00         [ 4] 4343 	call puts 
      001851 55 00 03 00 01   [ 1] 4344 	mov in,count
      001856 81               [ 4] 4345 	ret 
      001857                       4346 run_it:	 
      001857 CD 12 4F         [ 4] 4347     call ubound 
      00185A                       4348 	_drop 2 ; drop return address 
      00185A 5B 02            [ 2]    1     addw sp,#2 
                                   4349 ; clear data pointer 
      00185C 5F               [ 1] 4350 	clrw x 
      00185D CF 00 06         [ 2] 4351 	ldw data_ptr,x 
      001860 72 5F 00 08      [ 1] 4352 	clr data_ofs 
      001864 72 5F 00 09      [ 1] 4353 	clr data_len 
                                   4354 ; initialize BASIC pointer 
      001868 CE 00 1C         [ 2] 4355 	ldw x,txtbgn 
      00186B CF 00 04         [ 2] 4356 	ldw basicptr,x 
      00186E E6 02            [ 1] 4357 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001870 C7 00 03         [ 1] 4358 	ld count,a
      001873 35 03 00 01      [ 1] 4359 	mov in,#3	
      001877 72 10 00 23      [ 1] 4360 	bset flags,#FRUN 
      00187B CC 09 25         [ 2] 4361 	jp interpreter 
                                   4362 
                                   4363 
                                   4364 ;----------------------
                                   4365 ; BASIC: END
                                   4366 ; end running program
                                   4367 ;---------------------- 
      00187E                       4368 cmd_end: 
                                   4369 ; clean stack 
      00187E AE 17 FF         [ 2] 4370 	ldw x,#STACK_EMPTY
      001881 94               [ 1] 4371 	ldw sp,x 
      001882 CC 09 06         [ 2] 4372 	jp warm_start
                                   4373 
                                   4374 ;-----------------
                                   4375 ; 1 Khz beep 
                                   4376 ;-----------------
      001885                       4377 beep_1khz:: 
      001885 AE 00 64         [ 2] 4378 	ldw x,#100
      001888 90 AE 03 E8      [ 2] 4379 	ldw y,#1000
      00188C 20 0D            [ 2] 4380 	jra beep
                                   4381 
                                   4382 ;-----------------------
                                   4383 ; BASIC: TONE expr1,expr2
                                   4384 ; used TIMER2 channel 1
                                   4385 ; to produce a tone 
                                   4386 ; arguments:
                                   4387 ;    expr1   frequency 
                                   4388 ;    expr2   duration msec.
                                   4389 ;---------------------------
      00188E                       4390 tone:
      00188E CD 10 57         [ 4] 4391 	call arg_list 
      001891 A1 02            [ 1] 4392 	cp a,#2 
      001893 27 03            [ 1] 4393 	jreq 1$
      001895 CC 08 7F         [ 2] 4394 	jp syntax_error 
      001898                       4395 1$: 
      001898 85               [ 2] 4396 	popw x ; duration
      001899 90 85            [ 2] 4397 	popw y ; frequency 
      00189B                       4398 beep:  
      00189B 89               [ 2] 4399 	pushw x 
      00189C AE F4 24         [ 2] 4400 	ldw x,#TIM2_CLK_FREQ
      00189F 65               [ 2] 4401 	divw x,y 
                                   4402 ; round to nearest integer 
      0018A0 90 A3 7A 12      [ 2] 4403 	cpw y,#TIM2_CLK_FREQ/2
      0018A4 2B 01            [ 1] 4404 	jrmi 2$
      0018A6 5C               [ 2] 4405 	incw x 
      0018A7                       4406 2$:	 
      0018A7 9E               [ 1] 4407 	ld a,xh 
      0018A8 C7 53 0D         [ 1] 4408 	ld TIM2_ARRH,a 
      0018AB 9F               [ 1] 4409 	ld a,xl 
      0018AC C7 53 0E         [ 1] 4410 	ld TIM2_ARRL,a 
                                   4411 ; 50% duty cycle 
      0018AF 8C               [ 1] 4412 	ccf 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0018B0 56               [ 2] 4413 	rrcw x 
      0018B1 9E               [ 1] 4414 	ld a,xh 
      0018B2 C7 53 0F         [ 1] 4415 	ld TIM2_CCR1H,a 
      0018B5 9F               [ 1] 4416 	ld a,xl
      0018B6 C7 53 10         [ 1] 4417 	ld TIM2_CCR1L,a
      0018B9 72 10 53 08      [ 1] 4418 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0018BD 72 10 53 00      [ 1] 4419 	bset TIM2_CR1,#TIM2_CR1_CEN
      0018C1 72 10 53 04      [ 1] 4420 	bset TIM2_EGR,#TIM2_EGR_UG
      0018C5 85               [ 2] 4421 	popw x 
      0018C6 CD 1E 4B         [ 4] 4422 	call pause02
      0018C9 72 11 53 08      [ 1] 4423 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0018CD 72 11 53 00      [ 1] 4424 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0018D1 81               [ 4] 4425 	ret 
                                   4426 
                                   4427 ;-------------------------------
                                   4428 ; BASIC: ADCON 0|1 [,divisor]  
                                   4429 ; disable/enanble ADC 
                                   4430 ;-------------------------------
                           000003  4431 	ONOFF=3 
                           000001  4432 	DIVSOR=1
                           000004  4433 	VSIZE=4 
      0018D2                       4434 power_adc:
      0018D2 CD 10 57         [ 4] 4435 	call arg_list 
      0018D5 A1 02            [ 1] 4436 	cp a,#2	
      0018D7 27 0B            [ 1] 4437 	jreq 1$
      0018D9 A1 01            [ 1] 4438 	cp a,#1 
      0018DB 27 03            [ 1] 4439 	jreq 0$ 
      0018DD CC 08 7F         [ 2] 4440 	jp syntax_error 
      0018E0 AE 00 00         [ 2] 4441 0$: ldw x,#0
      0018E3 89               [ 2] 4442 	pushw x  ; divisor 
      0018E4 1E 03            [ 2] 4443 1$: ldw x,(ONOFF,sp)
      0018E6 5D               [ 2] 4444 	tnzw x 
      0018E7 27 1A            [ 1] 4445 	jreq 2$ 
      0018E9 1E 01            [ 2] 4446 	ldw x,(DIVSOR,sp) ; divisor 
      0018EB 9F               [ 1] 4447 	ld a,xl
      0018EC A4 07            [ 1] 4448 	and a,#7
      0018EE 4E               [ 1] 4449 	swap a 
      0018EF C7 54 01         [ 1] 4450 	ld ADC_CR1,a
      0018F2 72 16 50 CA      [ 1] 4451 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0018F6 72 10 54 01      [ 1] 4452 	bset ADC_CR1,#ADC_CR1_ADON 
      0018FA                       4453 	_usec_dly 7 
      0018FA AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0018FD 5A               [ 2]    2     decw x
      0018FE 9D               [ 1]    3     nop 
      0018FF 26 FA            [ 1]    4     jrne .-4
      001901 20 08            [ 2] 4454 	jra 3$
      001903 72 11 54 01      [ 1] 4455 2$: bres ADC_CR1,#ADC_CR1_ADON
      001907 72 17 50 CA      [ 1] 4456 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00190B                       4457 3$:	_drop VSIZE 
      00190B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00190D 81               [ 4] 4458 	ret
                                   4459 
                                   4460 ;-----------------------------
                                   4461 ; BASIC: ADCREAD (channel)
                                   4462 ; read adc channel {0..5}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4463 ; output:
                                   4464 ;   A 		TK_INTGR 
                                   4465 ;   X 		value 
                                   4466 ;-----------------------------
      00190E                       4467 analog_read:
      00190E CD 10 52         [ 4] 4468 	call func_args 
      001911 A1 01            [ 1] 4469 	cp a,#1 
      001913 27 03            [ 1] 4470 	jreq 1$
      001915 CC 08 7F         [ 2] 4471 	jp syntax_error
      001918 85               [ 2] 4472 1$: popw x 
      001919 A3 00 05         [ 2] 4473 	cpw x,#5 
      00191C 23 05            [ 2] 4474 	jrule 2$
      00191E A6 0A            [ 1] 4475 	ld a,#ERR_BAD_VALUE
      001920 CC 08 81         [ 2] 4476 	jp tb_error 
      001923 9F               [ 1] 4477 2$: ld a,xl
      001924 C7 00 0D         [ 1] 4478 	ld acc8,a 
      001927 A6 05            [ 1] 4479 	ld a,#5
      001929 C0 00 0D         [ 1] 4480 	sub a,acc8 
      00192C C7 54 00         [ 1] 4481 	ld ADC_CSR,a
      00192F 72 16 54 02      [ 1] 4482 	bset ADC_CR2,#ADC_CR2_ALIGN
      001933 72 10 54 01      [ 1] 4483 	bset ADC_CR1,#ADC_CR1_ADON
      001937 72 0F 54 00 FB   [ 2] 4484 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00193C CE 54 04         [ 2] 4485 	ldw x,ADC_DRH
      00193F A6 84            [ 1] 4486 	ld a,#TK_INTGR
      001941 81               [ 4] 4487 	ret 
                                   4488 
                                   4489 ;-----------------------
                                   4490 ; BASIC: DREAD(pin)
                                   4491 ; Arduino pins 
                                   4492 ; read state of a digital pin 
                                   4493 ; pin# {0..15}
                                   4494 ; output:
                                   4495 ;    A 		TK_INTGR
                                   4496 ;    X      0|1 
                                   4497 ;-------------------------
                           000001  4498 	PINNO=1
                           000001  4499 	VSIZE=1
      001942                       4500 digital_read:
      001942                       4501 	_vars VSIZE 
      001942 52 01            [ 2]    1     sub sp,#VSIZE 
      001944 CD 10 52         [ 4] 4502 	call func_args
      001947 A1 01            [ 1] 4503 	cp a,#1
      001949 27 03            [ 1] 4504 	jreq 1$
      00194B CC 08 7F         [ 2] 4505 	jp syntax_error
      00194E 85               [ 2] 4506 1$: popw x 
      00194F A3 00 0F         [ 2] 4507 	cpw x,#15 
      001952 23 05            [ 2] 4508 	jrule 2$
      001954 A6 0A            [ 1] 4509 	ld a,#ERR_BAD_VALUE
      001956 CC 08 81         [ 2] 4510 	jp tb_error 
      001959 CD 1F 89         [ 4] 4511 2$:	call select_pin 
      00195C 6B 01            [ 1] 4512 	ld (PINNO,sp),a
      00195E E6 01            [ 1] 4513 	ld a,(GPIO_IDR,x)
      001960 0D 01            [ 1] 4514 	tnz (PINNO,sp)
      001962 27 05            [ 1] 4515 	jreq 8$
      001964 44               [ 1] 4516 3$: srl a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001965 0A 01            [ 1] 4517 	dec (PINNO,sp)
      001967 26 FB            [ 1] 4518 	jrne 3$ 
      001969 A4 01            [ 1] 4519 8$: and a,#1 
      00196B 5F               [ 1] 4520 	clrw x 
      00196C 97               [ 1] 4521 	ld xl,a 
      00196D A6 84            [ 1] 4522 	ld a,#TK_INTGR
      00196F                       4523 	_drop VSIZE
      00196F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001971 81               [ 4] 4524 	ret
                                   4525 
                                   4526 ;-----------------------
                                   4527 ; BASIC: DWRITE pin,0|1
                                   4528 ; Arduino pins 
                                   4529 ; write to a digital pin 
                                   4530 ; pin# {0..15}
                                   4531 ; output:
                                   4532 ;    A 		TK_INTGR
                                   4533 ;    X      0|1 
                                   4534 ;-------------------------
                           000001  4535 	PINNO=1
                           000002  4536 	PINVAL=2
                           000002  4537 	VSIZE=2
      001972                       4538 digital_write:
      001972                       4539 	_vars VSIZE 
      001972 52 02            [ 2]    1     sub sp,#VSIZE 
      001974 CD 10 57         [ 4] 4540 	call arg_list  
      001977 A1 02            [ 1] 4541 	cp a,#2 
      001979 27 03            [ 1] 4542 	jreq 1$
      00197B CC 08 7F         [ 2] 4543 	jp syntax_error
      00197E 85               [ 2] 4544 1$: popw x 
      00197F 9F               [ 1] 4545 	ld a,xl 
      001980 6B 02            [ 1] 4546 	ld (PINVAL,sp),a
      001982 85               [ 2] 4547 	popw x 
      001983 A3 00 0F         [ 2] 4548 	cpw x,#15 
      001986 23 05            [ 2] 4549 	jrule 2$
      001988 A6 0A            [ 1] 4550 	ld a,#ERR_BAD_VALUE
      00198A CC 08 81         [ 2] 4551 	jp tb_error 
      00198D CD 1F 89         [ 4] 4552 2$:	call select_pin 
      001990 6B 01            [ 1] 4553 	ld (PINNO,sp),a 
      001992 A6 01            [ 1] 4554 	ld a,#1
      001994 0D 01            [ 1] 4555 	tnz (PINNO,sp)
      001996 27 05            [ 1] 4556 	jreq 4$
      001998 48               [ 1] 4557 3$: sll a
      001999 0A 01            [ 1] 4558 	dec (PINNO,sp)
      00199B 26 FB            [ 1] 4559 	jrne 3$
      00199D 0D 02            [ 1] 4560 4$: tnz (PINVAL,sp)
      00199F 26 05            [ 1] 4561 	jrne 5$
      0019A1 43               [ 1] 4562 	cpl a 
      0019A2 E4 00            [ 1] 4563 	and a,(GPIO_ODR,x)
      0019A4 20 02            [ 2] 4564 	jra 8$
      0019A6 EA 00            [ 1] 4565 5$: or a,(GPIO_ODR,x)
      0019A8 E7 00            [ 1] 4566 8$: ld (GPIO_ODR,x),a 
      0019AA                       4567 	_drop VSIZE 
      0019AA 5B 02            [ 2]    1     addw sp,#VSIZE 
      0019AC 81               [ 4] 4568 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4569 
                                   4570 
                                   4571 ;-----------------------
                                   4572 ; BASIC: STOP
                                   4573 ; stop progam execution  
                                   4574 ; without resetting pointers 
                                   4575 ; the program is resumed
                                   4576 ; with RUN 
                                   4577 ;-------------------------
      0019AD                       4578 stop:
      0019AD 72 00 00 23 02   [ 2] 4579 	btjt flags,#FRUN,2$
      0019B2 4F               [ 1] 4580 	clr a
      0019B3 81               [ 4] 4581 	ret 
      0019B4                       4582 2$:	 
                                   4583 ; create space on cstack to save context 
      0019B4 AE 19 DB         [ 2] 4584 	ldw x,#break_point 
      0019B7 CD 00 00         [ 4] 4585 	call puts 
      0019BA                       4586 	_drop 2 ;drop return address 
      0019BA 5B 02            [ 2]    1     addw sp,#2 
      0019BC                       4587 	_vars CTXT_SIZE ; context size 
      0019BC 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0019BE CD 15 A9         [ 4] 4588 	call save_context 
      0019C1 AE 16 90         [ 2] 4589 	ldw x,#tib 
      0019C4 CF 00 04         [ 2] 4590 	ldw basicptr,x
      0019C7 7F               [ 1] 4591 	clr (x)
      0019C8 72 5F 00 03      [ 1] 4592 	clr count  
      0019CC 5F               [ 1] 4593 	clrw x 
      0019CD CF 00 00         [ 2] 4594 	ldw in.w,x
      0019D0 72 11 00 23      [ 1] 4595 	bres flags,#FRUN 
      0019D4 72 18 00 23      [ 1] 4596 	bset flags,#FBREAK
      0019D8 CC 09 25         [ 2] 4597 	jp interpreter 
      0019DB 0A 62 72 65 61 6B 20  4598 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4599 
                                   4600 ;-----------------------
                                   4601 ; BASIC: NEW
                                   4602 ; from command line only 
                                   4603 ; free program memory
                                   4604 ; and clear variables 
                                   4605 ;------------------------
      0019F9                       4606 new: 
      0019F9 72 01 00 23 01   [ 2] 4607 	btjf flags,#FRUN,0$ 
      0019FE 81               [ 4] 4608 	ret 
      0019FF                       4609 0$:	
      0019FF CD 06 E9         [ 4] 4610 	call clear_basic 
      001A02 81               [ 4] 4611 	ret 
                                   4612 	 
                                   4613 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4614 ;  file system routines
                                   4615 ;  MCU flash memory from
                                   4616 ;  0x10000-0x27fff is 
                                   4617 ;  used to store BASIC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4618 ;  program files. 
                                   4619 ;  use 128 bytes sectors
                                   4620 ;  because this is the MCU 
                                   4621 ;  row size.
                                   4622 ;  file entry aligned to row
                                   4623 ;  	name  variable length
                                   4624 ;  	size  2 bytes  
                                   4625 ; 	data  variable length 
                                   4626 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4627 
                                   4628 ;---------------------------
                                   4629 ; fill pad with zeros 
                                   4630 ;--------------------------
      001A03                       4631 zero_pad:
      001A03 AE 16 E0         [ 2] 4632 	ldw x,#pad 
      001A06 A6 80            [ 1] 4633 	ld a,#PAD_SIZE 
      001A08 7F               [ 1] 4634 1$:	clr (x)
      001A09 5C               [ 2] 4635 	incw x 
      001A0A 4A               [ 1] 4636 	dec a 
      001A0B 26 FB            [ 1] 4637 	jrne 1$
      001A0D 81               [ 4] 4638 	ret 
                                   4639 
                                   4640 ;--------------------------
                                   4641 ; align farptr to BLOCK_SIZE 
                                   4642 ;---------------------------
      001A0E                       4643 row_align:
      001A0E A6 7F            [ 1] 4644 	ld a,#0x7f 
      001A10 C4 00 18         [ 1] 4645 	and a,farptr+2 
      001A13 27 13            [ 1] 4646 	jreq 1$ 
      001A15 CE 00 17         [ 2] 4647 	ldw x,farptr+1 
      001A18 1C 00 80         [ 2] 4648 	addw x,#BLOCK_SIZE 
      001A1B 24 04            [ 1] 4649 	jrnc 0$
      001A1D 72 5C 00 16      [ 1] 4650 	inc farptr 
      001A21 9F               [ 1] 4651 0$: ld a,xl 
      001A22 A4 80            [ 1] 4652 	and a,#0x80
      001A24 97               [ 1] 4653 	ld xl,a
      001A25 CF 00 17         [ 2] 4654 	ldw farptr+1,x  	
      001A28 81               [ 4] 4655 1$:	ret
                                   4656 
                                   4657 ;--------------------
                                   4658 ; input:
                                   4659 ;   X     increment 
                                   4660 ; output:
                                   4661 ;   farptr  incremented 
                                   4662 ;---------------------
      001A29                       4663 incr_farptr:
      001A29 72 BB 00 17      [ 2] 4664 	addw x,farptr+1 
      001A2D 24 04            [ 1] 4665 	jrnc 1$
      001A2F 72 5C 00 16      [ 1] 4666 	inc farptr 
      001A33 CF 00 17         [ 2] 4667 1$:	ldw farptr+1,x  
      001A36 81               [ 4] 4668 	ret 
                                   4669 
                                   4670 ;------------------------------
                                   4671 ; extended flash memory used as FLASH_DRIVE 
                                   4672 ; seek end of used flash drive   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4673 ; starting at 0x10000 address.
                                   4674 ; 4 consecutives 0 bytes signal free space. 
                                   4675 ; input:
                                   4676 ;	none
                                   4677 ; output:
                                   4678 ;   ffree     free_addr| 0 if memory full.
                                   4679 ;------------------------------
      001A37                       4680 seek_fdrive:
                                   4681 ; start scan at 0x10000 address 
      001A37 A6 01            [ 1] 4682 	ld a,#1
      001A39 C7 00 16         [ 1] 4683 	ld farptr,a 
      001A3C 5F               [ 1] 4684 	clrw x 
      001A3D CF 00 17         [ 2] 4685 	ldw farptr+1,x 
      001A40                       4686 1$:
      001A40 AE 00 03         [ 2] 4687 	ldw x,#3  
      001A43 92 AF 00 16      [ 5] 4688 2$:	ldf a,([farptr],x) 
      001A47 26 05            [ 1] 4689 	jrne 3$
      001A49 5A               [ 2] 4690 	decw x
      001A4A 2A F7            [ 1] 4691 	jrpl 2$
      001A4C 20 0E            [ 2] 4692 	jra 4$ 
      001A4E AE 00 80         [ 2] 4693 3$:	ldw x,#BLOCK_SIZE 
      001A51 CD 1A 29         [ 4] 4694 	call incr_farptr
      001A54 AE 02 80         [ 2] 4695 	ldw x,#0x280  
      001A57 C3 00 16         [ 2] 4696 	cpw x,farptr
      001A5A 2B E4            [ 1] 4697 	jrmi 1$
      001A5C                       4698 4$: ; copy farptr to ffree	 
      001A5C CE 00 16         [ 2] 4699 	ldw x,farptr 
      001A5F C6 00 18         [ 1] 4700 	ld a,farptr+2 
      001A62 CF 00 19         [ 2] 4701 	ldw ffree,x 
      001A65 C7 00 1B         [ 1] 4702 	ld ffree+2,a  
      001A68 81               [ 4] 4703 	ret 
                                   4704 
                                   4705 ;-----------------------
                                   4706 ; return amount of free 
                                   4707 ; space on flash drive
                                   4708 ; input:
                                   4709 ;   none
                                   4710 ; output:
                                   4711 ;   acc24   free space 
                                   4712 ;-----------------------
      001A69                       4713 disk_free:
      001A69 AE 80 00         [ 2] 4714 	ldw x,#0x8000
      001A6C 72 B0 00 1A      [ 2] 4715 	subw x,ffree+1
      001A70 A6 02            [ 1] 4716 	ld a,#2
      001A72 C2 00 19         [ 1] 4717 	sbc a,ffree 
      001A75 C7 00 0B         [ 1] 4718 	ld acc24,a 
      001A78 CF 00 0C         [ 2] 4719 	ldw acc16,x 
      001A7B 81               [ 4] 4720 	ret 
                                   4721 
                                   4722 ;-----------------------
                                   4723 ; compare file name 
                                   4724 ; with name pointed by Y  
                                   4725 ; input:
                                   4726 ;   farptr   file name 
                                   4727 ;   Y        target name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4728 ; output:
                                   4729 ;   farptr 	 at file_name
                                   4730 ;   X 		 farptr[x] point at size field  
                                   4731 ;   Carry    0|1 no match|match  
                                   4732 ;----------------------
      001A7C                       4733 cmp_name:
      001A7C 5F               [ 1] 4734 	clrw x
      001A7D 92 AF 00 16      [ 5] 4735 1$:	ldf a,([farptr],x)
      001A81 90 F1            [ 1] 4736 	cp a,(y)
      001A83 26 08            [ 1] 4737 	jrne 4$
      001A85 4D               [ 1] 4738 	tnz a 
      001A86 27 12            [ 1] 4739 	jreq 9$ 
      001A88 5C               [ 2] 4740     incw x 
      001A89 90 5C            [ 2] 4741 	incw y 
      001A8B 20 F0            [ 2] 4742 	jra 1$
      001A8D                       4743 4$: ;no match 
      001A8D 4D               [ 1] 4744 	tnz a 
      001A8E 27 07            [ 1] 4745 	jreq 5$
      001A90 5C               [ 2] 4746 	incw x 
      001A91 92 AF 00 16      [ 5] 4747 	ldf a,([farptr],x)
      001A95 20 F6            [ 2] 4748 	jra 4$  
      001A97 5C               [ 2] 4749 5$:	incw x ; farptr[x] point at 'size' field 
      001A98 98               [ 1] 4750 	rcf 
      001A99 81               [ 4] 4751 	ret
      001A9A                       4752 9$: ; match  
      001A9A 5C               [ 2] 4753 	incw x  ; farptr[x] at 'size' field 
      001A9B 99               [ 1] 4754 	scf 
      001A9C 81               [ 4] 4755 	ret 
                                   4756 
                                   4757 ;-----------------------
                                   4758 ; search file in 
                                   4759 ; flash memory 
                                   4760 ; input:
                                   4761 ;   Y       file name  
                                   4762 ; output:
                                   4763 ;   farptr  addr at name|0
                                   4764 ;   X       offset to size field
                                   4765 ;-----------------------
                           000001  4766 	FSIZE=1
                           000003  4767 	YSAVE=3
                           000004  4768 	VSIZE=4 
      001A9D                       4769 search_file: 
      001A9D                       4770 	_vars VSIZE
      001A9D 52 04            [ 2]    1     sub sp,#VSIZE 
      001A9F 17 03            [ 2] 4771 	ldw (YSAVE,sp),y  
      001AA1 5F               [ 1] 4772 	clrw x 
      001AA2 CF 00 17         [ 2] 4773 	ldw farptr+1,x 
      001AA5 35 01 00 16      [ 1] 4774 	mov farptr,#1
      001AA9                       4775 1$:	
                                   4776 ; check if farptr is after any file 
                                   4777 ; if  0 then so.
      001AA9 92 BC 00 16      [ 5] 4778 	ldf a,[farptr]
      001AAD 27 27            [ 1] 4779 	jreq 6$
      001AAF 5F               [ 1] 4780 2$: clrw x 	
      001AB0 16 03            [ 2] 4781 	ldw y,(YSAVE,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001AB2 CD 1A 7C         [ 4] 4782 	call cmp_name
      001AB5 25 2F            [ 1] 4783 	jrc 9$
      001AB7 92 AF 00 16      [ 5] 4784 	ldf a,([farptr],x)
      001ABB 6B 01            [ 1] 4785 	ld (FSIZE,sp),a 
      001ABD 5C               [ 2] 4786 	incw x 
      001ABE 92 AF 00 16      [ 5] 4787 	ldf a,([farptr],x)
      001AC2 6B 02            [ 1] 4788 	ld (FSIZE+1,sp),a 
      001AC4 5C               [ 2] 4789 	incw x 
      001AC5 72 FB 01         [ 2] 4790 	addw x,(FSIZE,sp) ; skip over file data
      001AC8 CD 1A 29         [ 4] 4791 	call incr_farptr
      001ACB CD 1A 0E         [ 4] 4792 	call row_align  
      001ACE AE 02 80         [ 2] 4793 	ldw x,#0x280
      001AD1 C3 00 16         [ 2] 4794 	cpw x,farptr 
      001AD4 2A D3            [ 1] 4795 	jrpl 1$
      001AD6                       4796 6$: ; file not found 
      001AD6 72 5F 00 16      [ 1] 4797 	clr farptr
      001ADA 72 5F 00 17      [ 1] 4798 	clr farptr+1 
      001ADE 72 5F 00 18      [ 1] 4799 	clr farptr+2 
      001AE2                       4800 	_drop VSIZE 
      001AE2 5B 04            [ 2]    1     addw sp,#VSIZE 
      001AE4 98               [ 1] 4801 	rcf
      001AE5 81               [ 4] 4802 	ret
      001AE6                       4803 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001AE6                       4804 	_drop VSIZE 
      001AE6 5B 04            [ 2]    1     addw sp,#VSIZE 
      001AE8 99               [ 1] 4805 	scf 	
      001AE9 81               [ 4] 4806 	ret
                                   4807 
                                   4808 ;--------------------------------
                                   4809 ; BASIC: SAVE "name" 
                                   4810 ; save text program in 
                                   4811 ; flash memory used as permanent
                                   4812 ; storage from address 0x10000-0x27fff 
                                   4813 ;--------------------------------
                           000001  4814 	BSIZE=1
                           000003  4815 	NAMEPTR=3
                           000005  4816 	XSAVE=5
                           000007  4817 	YSAVE=7
                           000008  4818 	VSIZE=8 
      001AEA                       4819 save:
      001AEA 72 01 00 23 05   [ 2] 4820 	btjf flags,#FRUN,0$ 
      001AEF A6 07            [ 1] 4821 	ld a,#ERR_CMD_ONLY 
      001AF1 CC 08 81         [ 2] 4822 	jp tb_error
      001AF4                       4823 0$:	 
      001AF4 CE 00 1E         [ 2] 4824 	ldw x,txtend 
      001AF7 72 B0 00 1C      [ 2] 4825 	subw x,txtbgn
      001AFB 26 0C            [ 1] 4826 	jrne 1$
                                   4827 ; nothing to save 
      001AFD AE 08 18         [ 2] 4828 	ldw x,#err_no_prog 
      001B00 CD 00 00         [ 4] 4829 	call puts 
      001B03 55 00 03 00 01   [ 1] 4830 	mov in,count 
      001B08 81               [ 4] 4831 	ret  	
      001B09                       4832 1$:	
      001B09                       4833 	_vars VSIZE 
      001B09 52 08            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B0B 1F 01            [ 2] 4834 	ldw (BSIZE,sp),x 
      001B0D CD 09 71         [ 4] 4835 	call next_token	
      001B10 A1 02            [ 1] 4836 	cp a,#TK_QSTR
      001B12 27 03            [ 1] 4837 	jreq 2$
      001B14 CC 08 7F         [ 2] 4838 	jp syntax_error
      001B17                       4839 2$: 
      001B17 1F 03            [ 2] 4840 	ldw (NAMEPTR,sp),x  
      001B19 CD 01 74         [ 4] 4841 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   4842 ; check if enough free space 
      001B1C CD 03 96         [ 4] 4843 	call strlen 
      001B1F AB 03            [ 1] 4844 	add a,#3
      001B21 5F               [ 1] 4845 	clrw x 
      001B22 97               [ 1] 4846 	ld xl,a 
      001B23 72 FB 01         [ 2] 4847 	addw x,(BSIZE,sp)
      001B26 4F               [ 1] 4848 	clr a 
      001B27 72 BB 00 1A      [ 2] 4849 	addw x,ffree+1 
      001B2B C9 00 19         [ 1] 4850 	adc a,ffree 
      001B2E A1 02            [ 1] 4851 	cp a,#2
      001B30 2B 0A            [ 1] 4852 	jrmi 21$
      001B32 A3 80 00         [ 2] 4853 	cpw x,#0x8000
      001B35 2B 05            [ 1] 4854 	jrmi 21$
      001B37 A6 0E            [ 1] 4855 	ld a,#ERR_NO_FSPACE  
      001B39 CC 08 81         [ 2] 4856 	jp tb_error
      001B3C                       4857 21$: 
                                   4858 ; check for existing file of that name 
      001B3C 16 03            [ 2] 4859 	ldw y,(NAMEPTR,sp)	
      001B3E CD 1A 9D         [ 4] 4860 	call search_file 
      001B41 24 05            [ 1] 4861 	jrnc 3$ 
      001B43 A6 08            [ 1] 4862 	ld a,#ERR_DUPLICATE 
      001B45 CC 08 81         [ 2] 4863 	jp tb_error 
      001B48                       4864 3$:	; initialize farptr 
      001B48 CE 00 19         [ 2] 4865 	ldw x,ffree 
      001B4B C6 00 1B         [ 1] 4866 	ld a,ffree+2 
      001B4E CF 00 16         [ 2] 4867 	ldw farptr,x 
      001B51 C7 00 18         [ 1] 4868 	ld farptr+2,a 
                                   4869 ;** write file name to row buffer **	
      001B54 16 03            [ 2] 4870 	ldw y,(NAMEPTR,sp)  
      001B56 AE 16 E0         [ 2] 4871 	ldw x,#pad 
      001B59 CD 03 B2         [ 4] 4872 	call strcpy
      001B5C CD 03 96         [ 4] 4873 	call strlen 
      001B5F 5F               [ 1] 4874 	clrw x 
      001B60 97               [ 1] 4875 	ld xl,a 
      001B61 5C               [ 2] 4876 	incw  x
      001B62 1C 16 E0         [ 2] 4877 	addw x,#pad 
                                   4878 ; ** write file size to row buffer 
      001B65 16 01            [ 2] 4879 	ldw y,(BSIZE,sp)
      001B67 FF               [ 2] 4880 	ldw (x),y 
      001B68 1C 00 02         [ 2] 4881 	addw x,#2 
                                   4882 ; ** write file data to row buffer 
      001B6B 90 CE 00 1C      [ 2] 4883 	ldw y,txtbgn 
      001B6F 90 F6            [ 1] 4884 6$:	ld a,(y)
      001B71 90 5C            [ 2] 4885 	incw y
      001B73 F7               [ 1] 4886 	ld (x),a 
      001B74 5C               [ 2] 4887 	incw x
      001B75 90 C3 00 1E      [ 2] 4888 	cpw y,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B79 27 05            [ 1] 4889 	jreq 12$
      001B7B A3 17 60         [ 2] 4890 	cpw x,#stack_full 
      001B7E 2B EF            [ 1] 4891 	jrmi 6$
      001B80                       4892 12$:
      001B80 17 07            [ 2] 4893 	ldw (YSAVE,sp),y 
      001B82                       4894 14$: ; zero buffer end 
      001B82 A3 17 60         [ 2] 4895 	cpw x,#stack_full
      001B85 27 04            [ 1] 4896 	jreq 16$
      001B87 7F               [ 1] 4897 	clr (x)
      001B88 5C               [ 2] 4898 	incw x 
      001B89 20 F7            [ 2] 4899 	jra 14$
      001B8B                       4900 16$:
      001B8B AE 16 E0         [ 2] 4901 	ldw x,#pad 
      001B8E CD 01 88         [ 4] 4902 	call write_row 
      001B91 AE 00 80         [ 2] 4903 	ldw x,#BLOCK_SIZE 
      001B94 CD 1A 29         [ 4] 4904 	call incr_farptr
      001B97 AE 16 E0         [ 2] 4905 	ldw x,#pad 
      001B9A 16 07            [ 2] 4906 	ldw y,(YSAVE,sp)
      001B9C 90 C3 00 1E      [ 2] 4907 	cpw y,txtend 
      001BA0 2B CD            [ 1] 4908 	jrmi 6$
                                   4909 ; save farptr in ffree
      001BA2 CE 00 16         [ 2] 4910 	ldw x,farptr 
      001BA5 C6 00 18         [ 1] 4911 	ld a,farptr+2 
      001BA8 CF 00 19         [ 2] 4912 	ldw ffree,x 
      001BAB C7 00 1B         [ 1] 4913 	ld ffree+2,a
                                   4914 ; print file size 	
      001BAE 1E 01            [ 2] 4915 	ldw x,(BSIZE,sp) 
      001BB0 CD 09 D2         [ 4] 4916 	call print_int 
      001BB3                       4917 	_drop VSIZE 
      001BB3 5B 08            [ 2]    1     addw sp,#VSIZE 
      001BB5 81               [ 4] 4918 	ret 
                                   4919 
                                   4920 ;----------------------
                                   4921 ; load file in RAM memory
                                   4922 ; input:
                                   4923 ;    farptr point at file size 
                                   4924 ; output:
                                   4925 ;   y point after BASIC program in RAM.
                                   4926 ;------------------------
      001BB6                       4927 load_file:
      001BB6 CD 1A 29         [ 4] 4928 	call incr_farptr  
      001BB9 CD 06 E9         [ 4] 4929 	call clear_basic  
      001BBC 5F               [ 1] 4930 	clrw x
      001BBD 92 AF 00 16      [ 5] 4931 	ldf a,([farptr],x)
      001BC1 90 95            [ 1] 4932 	ld yh,a 
      001BC3 5C               [ 2] 4933 	incw x  
      001BC4 92 AF 00 16      [ 5] 4934 	ldf a,([farptr],x)
      001BC8 5C               [ 2] 4935 	incw x 
      001BC9 90 97            [ 1] 4936 	ld yl,a 
      001BCB 72 B9 00 1C      [ 2] 4937 	addw y,txtbgn
      001BCF 90 CF 00 1E      [ 2] 4938 	ldw txtend,y
      001BD3 90 CE 00 1C      [ 2] 4939 	ldw y,txtbgn
      001BD7                       4940 3$:	; load BASIC text 	
      001BD7 92 AF 00 16      [ 5] 4941 	ldf a,([farptr],x)
      001BDB 90 F7            [ 1] 4942 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BDD 5C               [ 2] 4943 	incw x 
      001BDE 90 5C            [ 2] 4944 	incw y 
      001BE0 90 C3 00 1E      [ 2] 4945 	cpw y,txtend 
      001BE4 2B F1            [ 1] 4946 	jrmi 3$
      001BE6 81               [ 4] 4947 	ret 
                                   4948 
                                   4949 ;------------------------
                                   4950 ; BASIC: LOAD "file" 
                                   4951 ; load file to RAM 
                                   4952 ; for execution 
                                   4953 ;------------------------
      001BE7                       4954 load:
      001BE7 72 01 00 23 07   [ 2] 4955 	btjf flags,#FRUN,0$ 
      001BEC 27 05            [ 1] 4956 	jreq 0$ 
      001BEE A6 07            [ 1] 4957 	ld a,#ERR_CMD_ONLY 
      001BF0 CC 08 81         [ 2] 4958 	jp tb_error 
      001BF3                       4959 0$:	
      001BF3 CD 09 71         [ 4] 4960 	call next_token 
      001BF6 A1 02            [ 1] 4961 	cp a,#TK_QSTR
      001BF8 27 03            [ 1] 4962 	jreq 1$
      001BFA CC 08 7F         [ 2] 4963 	jp syntax_error 
      001BFD 90 93            [ 1] 4964 1$:	ldw y,x 
      001BFF CD 1A 9D         [ 4] 4965 	call search_file 
      001C02 25 05            [ 1] 4966 	jrc 2$ 
      001C04 A6 09            [ 1] 4967 	ld a,#ERR_NOT_FILE
      001C06 CC 08 81         [ 2] 4968 	jp tb_error  
      001C09                       4969 2$:
      001C09 CD 1B B6         [ 4] 4970 	call load_file
                                   4971 ; print loaded size 	 
      001C0C CE 00 1E         [ 2] 4972 	ldw x,txtend 
      001C0F 72 B0 00 1C      [ 2] 4973 	subw x,txtbgn
      001C13 CD 09 D2         [ 4] 4974 	call print_int 
      001C16 81               [ 4] 4975 	ret 
                                   4976 
                                   4977 ;-----------------------------------
                                   4978 ; BASIC: FORGET ["file_name"] 
                                   4979 ; erase file_name and all others 
                                   4980 ; after it. 
                                   4981 ; without argument erase all files 
                                   4982 ;-----------------------------------
                           000001  4983 	NEW_FREE=1 
                           000003  4984 	VSIZE=3 
      001C17                       4985 forget:
      001C17                       4986 	_vars VSIZE 
      001C17 52 03            [ 2]    1     sub sp,#VSIZE 
      001C19 CD 09 71         [ 4] 4987 	call next_token 
      001C1C A1 00            [ 1] 4988 	cp a,#TK_NONE 
      001C1E 27 20            [ 1] 4989 	jreq 3$ 
      001C20 A1 02            [ 1] 4990 	cp a,#TK_QSTR
      001C22 27 03            [ 1] 4991 	jreq 1$
      001C24 CC 08 7F         [ 2] 4992 	jp syntax_error
      001C27 90 93            [ 1] 4993 1$: ldw y,x 
      001C29 55 00 03 00 01   [ 1] 4994 	mov in,count 
      001C2E CD 1A 9D         [ 4] 4995 	call search_file
      001C31 25 05            [ 1] 4996 	jrc 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C33 A6 09            [ 1] 4997 	ld a,#ERR_NOT_FILE 
      001C35 CC 08 81         [ 2] 4998 	jp tb_error 
      001C38                       4999 2$: 
      001C38 CE 00 16         [ 2] 5000 	ldw x,farptr
      001C3B C6 00 18         [ 1] 5001 	ld a,farptr+2
      001C3E 20 0A            [ 2] 5002 	jra 4$ 
      001C40                       5003 3$: ; forget all files 
      001C40 AE 01 00         [ 2] 5004 	ldw x,#0x100
      001C43 4F               [ 1] 5005 	clr a 
      001C44 CF 00 16         [ 2] 5006 	ldw farptr,x 
      001C47 C7 00 18         [ 1] 5007 	ld farptr+2,a 
      001C4A                       5008 4$:	; save new free address 
      001C4A 1F 01            [ 2] 5009 	ldw (NEW_FREE,sp),x
      001C4C 6B 03            [ 1] 5010 	ld (NEW_FREE+2,sp),a 
      001C4E CD 01 40         [ 4] 5011 	call move_erase_to_ram
      001C51 CD 01 BB         [ 4] 5012 5$: call block_erase 
      001C54 AE 00 80         [ 2] 5013 	ldw x,#BLOCK_SIZE 
      001C57 CD 1A 29         [ 4] 5014 	call incr_farptr 
      001C5A CD 1A 0E         [ 4] 5015 	call row_align 
                                   5016 ; check if all blocks erased
      001C5D C6 00 18         [ 1] 5017 	ld a,farptr+2  
      001C60 C0 00 1B         [ 1] 5018 	sub a,ffree+2
      001C63 C6 00 17         [ 1] 5019 	ld a,farptr+1 
      001C66 C2 00 1A         [ 1] 5020 	sbc a,ffree+1 
      001C69 C6 00 16         [ 1] 5021 	ld a,farptr 
      001C6C C2 00 19         [ 1] 5022 	sbc a,ffree 
      001C6F 2B E0            [ 1] 5023 	jrmi 5$ 
      001C71 7B 03            [ 1] 5024 	ld a,(NEW_FREE+2,sp)
      001C73 1E 01            [ 2] 5025 	ldw x,(NEW_FREE,sp)
      001C75 C7 00 1B         [ 1] 5026 	ld ffree+2,a 
      001C78 CF 00 19         [ 2] 5027 	ldw ffree,x 
      001C7B                       5028 	_drop VSIZE 
      001C7B 5B 03            [ 2]    1     addw sp,#VSIZE 
      001C7D 81               [ 4] 5029 	ret 
                                   5030 
                                   5031 ;----------------------
                                   5032 ; BASIC: DIR 
                                   5033 ; list saved files 
                                   5034 ;----------------------
                           000001  5035 	COUNT=1 ; files counter 
                           000002  5036 	VSIZE=2 
      001C7E                       5037 directory:
      001C7E                       5038 	_vars VSIZE 
      001C7E 52 02            [ 2]    1     sub sp,#VSIZE 
      001C80 5F               [ 1] 5039 	clrw x 
      001C81 1F 01            [ 2] 5040 	ldw (COUNT,sp),x 
      001C83 CF 00 17         [ 2] 5041 	ldw farptr+1,x 
      001C86 35 01 00 16      [ 1] 5042 	mov farptr,#1 
      001C8A                       5043 dir_loop:
      001C8A 5F               [ 1] 5044 	clrw x 
      001C8B 92 AF 00 16      [ 5] 5045 	ldf a,([farptr],x)
      001C8F 27 3B            [ 1] 5046 	jreq 8$ 
      001C91                       5047 1$: ;name loop 	
      001C91 92 AF 00 16      [ 5] 5048 	ldf a,([farptr],x)
      001C95 27 06            [ 1] 5049 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C97 CD 02 C0         [ 4] 5050 	call putc 
      001C9A 5C               [ 2] 5051 	incw x 
      001C9B 20 F4            [ 2] 5052 	jra 1$
      001C9D 5C               [ 2] 5053 2$: incw x ; skip ending 0. 
      001C9E A6 20            [ 1] 5054 	ld a,#SPACE 
      001CA0 CD 02 C0         [ 4] 5055 	call putc 
                                   5056 ; get file size 	
      001CA3 92 AF 00 16      [ 5] 5057 	ldf a,([farptr],x)
      001CA7 90 95            [ 1] 5058 	ld yh,a 
      001CA9 5C               [ 2] 5059 	incw x 
      001CAA 92 AF 00 16      [ 5] 5060 	ldf a,([farptr],x)
      001CAE 5C               [ 2] 5061 	incw x 
      001CAF 90 97            [ 1] 5062 	ld yl,a 
      001CB1 90 89            [ 2] 5063 	pushw y 
      001CB3 72 FB 01         [ 2] 5064 	addw x,(1,sp)
                                   5065 ; skip to next file 
      001CB6 CD 1A 29         [ 4] 5066 	call incr_farptr
      001CB9 CD 1A 0E         [ 4] 5067 	call row_align
                                   5068 ; print file size 
      001CBC 85               [ 2] 5069 	popw x ; file size 
      001CBD CD 09 D2         [ 4] 5070 	call print_int 
      001CC0 A6 0D            [ 1] 5071 	ld a,#CR 
      001CC2 CD 02 C0         [ 4] 5072 	call putc
      001CC5 1E 01            [ 2] 5073 	ldw x,(COUNT,sp)
      001CC7 5C               [ 2] 5074 	incw x
      001CC8 1F 01            [ 2] 5075 	ldw (COUNT,sp),x  
      001CCA 20 BE            [ 2] 5076 	jra dir_loop
      001CCC                       5077 8$: ; print number of files 
      001CCC 1E 01            [ 2] 5078 	ldw x,(COUNT,sp)
      001CCE CD 09 D2         [ 4] 5079 	call print_int 
      001CD1 AE 1C EB         [ 2] 5080 	ldw x,#file_count 
      001CD4 CD 00 00         [ 4] 5081 	call puts  
                                   5082 ; print drive free space 	
      001CD7 CD 1A 69         [ 4] 5083 	call disk_free
      001CDA 5F               [ 1] 5084 	clrw x  
      001CDB 35 0A 00 0A      [ 1] 5085 	mov base,#10 
      001CDF CD 09 E2         [ 4] 5086 	call prti24 
      001CE2 AE 1C F3         [ 2] 5087 	ldw x,#drive_free
      001CE5 CD 00 00         [ 4] 5088 	call puts 
      001CE8                       5089 	_drop VSIZE 
      001CE8 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CEA 81               [ 4] 5090 	ret
      001CEB 20 66 69 6C 65 73 0A  5091 file_count: .asciz " files\n"
             00
      001CF3 20 62 79 74 65 73 20  5092 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5093 
                                   5094 ;---------------------
                                   5095 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5096 ; write 1 or more byte to FLASH or EEPROM
                                   5097 ; starting at address  
                                   5098 ; input:
                                   5099 ;   expr1  	is address 
                                   5100 ;   expr2,...,exprn   are bytes to write
                                   5101 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5102 ;   none 
                                   5103 ;---------------------
                           000001  5104 	ADDR=1
                           000002  5105 	VSIZ=2 
      001D00                       5106 write:
      001D00                       5107 	_vars VSIZE 
      001D00 52 02            [ 2]    1     sub sp,#VSIZE 
      001D02 72 5F 00 16      [ 1] 5108 	clr farptr ; expect 16 bits address 
      001D06 CD 11 56         [ 4] 5109 	call expression
      001D09 A1 84            [ 1] 5110 	cp a,#TK_INTGR 
      001D0B 27 03            [ 1] 5111 	jreq 0$
      001D0D CC 08 7F         [ 2] 5112 	jp syntax_error
      001D10 1F 01            [ 2] 5113 0$: ldw (ADDR,sp),x 
      001D12 CD 09 71         [ 4] 5114 	call next_token 
      001D15 A1 09            [ 1] 5115 	cp a,#TK_COMMA 
      001D17 27 02            [ 1] 5116 	jreq 1$ 
      001D19 20 19            [ 2] 5117 	jra 9$ 
      001D1B CD 11 56         [ 4] 5118 1$:	call expression
      001D1E A1 84            [ 1] 5119 	cp a,#TK_INTGR
      001D20 27 03            [ 1] 5120 	jreq 2$
      001D22 CC 08 7F         [ 2] 5121 	jp syntax_error
      001D25 9F               [ 1] 5122 2$:	ld a,xl 
      001D26 1E 01            [ 2] 5123 	ldw x,(ADDR,sp) 
      001D28 CF 00 17         [ 2] 5124 	ldw farptr+1,x 
      001D2B 5F               [ 1] 5125 	clrw x 
      001D2C CD 01 E5         [ 4] 5126 	call write_byte
      001D2F 1E 01            [ 2] 5127 	ldw x,(ADDR,sp)
      001D31 5C               [ 2] 5128 	incw x 
      001D32 20 DC            [ 2] 5129 	jra 0$ 
      001D34                       5130 9$:
      001D34                       5131 	_drop VSIZE
      001D34 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D36 81               [ 4] 5132 	ret 
                                   5133 
                                   5134 
                                   5135 ;---------------------
                                   5136 ;BASIC: CHAR(expr)
                                   5137 ; évaluate expression 
                                   5138 ; and take the 7 least 
                                   5139 ; bits as ASCII character
                                   5140 ; return a TK_CHAR 
                                   5141 ;---------------------
      001D37                       5142 char:
      001D37 CD 10 52         [ 4] 5143 	call func_args 
      001D3A A1 01            [ 1] 5144 	cp a,#1
      001D3C 27 03            [ 1] 5145 	jreq 1$
      001D3E CC 08 7F         [ 2] 5146 	jp syntax_error
      001D41 85               [ 2] 5147 1$:	popw x 
      001D42 9F               [ 1] 5148 	ld a,xl 
      001D43 A4 7F            [ 1] 5149 	and a,#0x7f 
      001D45 97               [ 1] 5150 	ld xl,a
      001D46 A6 03            [ 1] 5151 	ld a,#TK_CHAR
      001D48 81               [ 4] 5152 	ret
                                   5153 
                                   5154 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5155 ; BASIC: ASC(string|char|TK_CFUNC)
                                   5156 ; extract first character 
                                   5157 ; of string argument 
                                   5158 ; return it as TK_INTGR 
                                   5159 ;---------------------
      001D49                       5160 ascii:
      001D49 A6 07            [ 1] 5161 	ld a,#TK_LPAREN
      001D4B CD 10 45         [ 4] 5162 	call expect 
      001D4E CD 09 71         [ 4] 5163 	call next_token 
      001D51 A1 02            [ 1] 5164 	cp a,#TK_QSTR 
      001D53 27 0E            [ 1] 5165 	jreq 1$
      001D55 A1 03            [ 1] 5166 	cp a,#TK_CHAR 
      001D57 27 0D            [ 1] 5167 	jreq 2$ 
      001D59 A1 82            [ 1] 5168 	cp a,#TK_CFUNC 
      001D5B 27 03            [ 1] 5169 	jreq 0$
      001D5D CC 08 7F         [ 2] 5170 	jp syntax_error
      001D60 FD               [ 4] 5171 0$: call (x)
      001D61 20 03            [ 2] 5172 	jra 2$
      001D63                       5173 1$: 
      001D63 F6               [ 1] 5174 	ld a,(x) 
      001D64 5F               [ 1] 5175 	clrw x
      001D65 97               [ 1] 5176 	ld xl,a 
      001D66                       5177 2$: 
      001D66 89               [ 2] 5178 	pushw x 
      001D67 A6 08            [ 1] 5179 	ld a,#TK_RPAREN 
      001D69 CD 10 45         [ 4] 5180 	call expect
      001D6C 85               [ 2] 5181 	popw x 
      001D6D A6 84            [ 1] 5182 	ld a,#TK_INTGR 
      001D6F 81               [ 4] 5183 	ret 
                                   5184 
                                   5185 ;---------------------
                                   5186 ;BASIC: KEY
                                   5187 ; wait for a character 
                                   5188 ; received from STDIN 
                                   5189 ; input:
                                   5190 ;	none 
                                   5191 ; output:
                                   5192 ;	X 		ASCII character 
                                   5193 ;---------------------
      001D70                       5194 key:
      001D70 CD 02 C9         [ 4] 5195 	call getc 
      001D73 5F               [ 1] 5196 	clrw x 
      001D74 97               [ 1] 5197 	ld xl,a 
      001D75 A6 84            [ 1] 5198 	ld a,#TK_INTGR
      001D77 81               [ 4] 5199 	ret
                                   5200 
                                   5201 ;----------------------
                                   5202 ; BASIC: QKEY
                                   5203 ; Return true if there 
                                   5204 ; is a character in 
                                   5205 ; waiting in STDIN 
                                   5206 ; input:
                                   5207 ;  none 
                                   5208 ; output:
                                   5209 ;   X 		0|-1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5210 ;-----------------------
      001D78                       5211 qkey:: 
      001D78 5F               [ 1] 5212 	clrw x 
      001D79 C6 00 2D         [ 1] 5213 	ld a,rx_head
      001D7C C1 00 2E         [ 1] 5214 	cp a,rx_tail 
      001D7F 27 01            [ 1] 5215 	jreq 9$ 
      001D81 53               [ 2] 5216 	cplw x 
      001D82 A6 84            [ 1] 5217 9$: ld a,#TK_INTGR
      001D84 81               [ 4] 5218 	ret 
                                   5219 
                                   5220 ;---------------------
                                   5221 ; BASIC: GPIO(expr,reg)
                                   5222 ; return gpio address 
                                   5223 ; expr {0..8}
                                   5224 ; input:
                                   5225 ;   none 
                                   5226 ; output:
                                   5227 ;   X 		gpio register address
                                   5228 ;----------------------------
                           000003  5229 	PORT=3
                           000001  5230 	REG=1 
                           000004  5231 	VSIZE=4 
      001D85                       5232 gpio:
      001D85 CD 10 52         [ 4] 5233 	call func_args 
      001D88 A1 02            [ 1] 5234 	cp a,#2
      001D8A 27 03            [ 1] 5235 	jreq 1$
      001D8C CC 08 7F         [ 2] 5236 	jp syntax_error  
      001D8F                       5237 1$:	
      001D8F 1E 03            [ 2] 5238 	ldw x,(PORT,sp)
      001D91 2B 17            [ 1] 5239 	jrmi bad_port
      001D93 A3 00 09         [ 2] 5240 	cpw x,#9
      001D96 2A 12            [ 1] 5241 	jrpl bad_port
      001D98 A6 05            [ 1] 5242 	ld a,#5
      001D9A 42               [ 4] 5243 	mul x,a
      001D9B 1C 50 00         [ 2] 5244 	addw x,#GPIO_BASE 
      001D9E 1F 03            [ 2] 5245 	ldw (PORT,sp),x  
      001DA0 1E 01            [ 2] 5246 	ldw x,(REG,sp) 
      001DA2 72 FB 03         [ 2] 5247 	addw x,(PORT,sp)
      001DA5 A6 84            [ 1] 5248 	ld a,#TK_INTGR
      001DA7                       5249 	_drop VSIZE 
      001DA7 5B 04            [ 2]    1     addw sp,#VSIZE 
      001DA9 81               [ 4] 5250 	ret
      001DAA                       5251 bad_port:
      001DAA A6 0A            [ 1] 5252 	ld a,#ERR_BAD_VALUE
      001DAC CC 08 81         [ 2] 5253 	jp tb_error
                                   5254 
                                   5255 
                                   5256 ;-------------------------
                                   5257 ; BASIC: UFLASH 
                                   5258 ; return user flash address
                                   5259 ; input:
                                   5260 ;  none 
                                   5261 ; output:
                                   5262 ;	A		TK_INTGR
                                   5263 ;   X 		user address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   5264 ;---------------------------
      001DAF                       5265 uflash:
      001DAF AE 28 00         [ 2] 5266 	ldw x,#user_space 
      001DB2 A6 84            [ 1] 5267 	ld a,#TK_INTGR 
      001DB4 81               [ 4] 5268 	ret 
                                   5269 
                                   5270 
                                   5271 ;---------------------
                                   5272 ; BASIC: USR(addr[,arg])
                                   5273 ; execute a function written 
                                   5274 ; in binary code.
                                   5275 ; binary fonction should 
                                   5276 ; return token attribute in A 
                                   5277 ; and value in X. 
                                   5278 ; input:
                                   5279 ;   addr	routine address 
                                   5280 ;   arg 	is an optional argument 
                                   5281 ; output:
                                   5282 ;   A 		token attribute 
                                   5283 ;   X       returned value 
                                   5284 ;---------------------
      001DB5                       5285 usr:
      001DB5 90 89            [ 2] 5286 	pushw y 	
      001DB7 CD 10 52         [ 4] 5287 	call func_args 
      001DBA A1 01            [ 1] 5288 	cp a,#1 
      001DBC 27 07            [ 1] 5289 	jreq 2$
      001DBE A1 02            [ 1] 5290 	cp a,#2
      001DC0 27 03            [ 1] 5291 	jreq 2$  
      001DC2 CC 08 7F         [ 2] 5292 	jp syntax_error 
      001DC5 90 85            [ 2] 5293 2$: popw y  ; arg|addr 
      001DC7 A1 01            [ 1] 5294 	cp a,#1
      001DC9 27 02            [ 1] 5295 	jreq 3$
      001DCB 85               [ 2] 5296 	popw x ; addr
      001DCC 51               [ 1] 5297 	exgw x,y 
      001DCD 90 FD            [ 4] 5298 3$: call (y)
      001DCF 90 85            [ 2] 5299 	popw y 
      001DD1 81               [ 4] 5300 	ret 
                                   5301 
                                   5302 ;------------------------------
                                   5303 ; BASIC: BYE 
                                   5304 ; halt mcu in its lowest power mode 
                                   5305 ; wait for reset or external interrupt
                                   5306 ; do a cold start on wakeup.
                                   5307 ;------------------------------
      001DD2                       5308 bye:
      001DD2 72 0D 52 30 FB   [ 2] 5309 	btjf UART1_SR,#UART_SR_TC,.
      001DD7 8E               [10] 5310 	halt
      001DD8 CC 05 DA         [ 2] 5311 	jp cold_start  
                                   5312 
                                   5313 ;----------------------------------
                                   5314 ; BASIC: AUTORUN ["file_name"] 
                                   5315 ; record in eeprom at adrress AUTORUN_NAME
                                   5316 ; the name of file to load and execute
                                   5317 ; at startup. 
                                   5318 ; empty string delete autorun name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   5319 ; no argument display autorun name  
                                   5320 ; input:
                                   5321 ;   file_name   file to execute 
                                   5322 ; output:
                                   5323 ;   none
                                   5324 ;-----------------------------------
      001DDB                       5325 autorun: 
      001DDB 72 01 00 23 07   [ 2] 5326 	btjf flags,#FRUN,0$ 
      001DE0 27 05            [ 1] 5327 	jreq 0$ 
      001DE2 A6 07            [ 1] 5328 	ld a,#ERR_CMD_ONLY 
      001DE4 CC 08 81         [ 2] 5329 	jp tb_error 
      001DE7                       5330 0$:	
      001DE7 CD 09 71         [ 4] 5331 	call next_token
      001DEA 4D               [ 1] 5332 	tnz a 
      001DEB 26 08            [ 1] 5333 	jrne 1$
      001DED AE 40 00         [ 2] 5334 	ldw x,#AUTORUN_NAME
      001DF0 CD 00 00         [ 4] 5335 	call puts 
      001DF3 4F               [ 1] 5336 	clr a 
      001DF4 81               [ 4] 5337 	ret 
      001DF5                       5338 1$:
      001DF5 A1 02            [ 1] 5339 	cp a,#TK_QSTR
      001DF7 27 03            [ 1] 5340 	jreq 2$
      001DF9 CC 08 7F         [ 2] 5341 	jp syntax_error 
      001DFC                       5342 2$:	
      001DFC 7D               [ 1] 5343 	tnz (x) 
      001DFD 26 09            [ 1] 5344 	jrne 3$
                                   5345 ; empty string, delete autorun 	
      001DFF CD 06 9C         [ 4] 5346 	call cancel_autorun
      001E02 55 00 03 00 01   [ 1] 5347 	mov in,count 
      001E07 81               [ 4] 5348 	ret 
      001E08 89               [ 2] 5349 3$:	pushw x 
      001E09 90 93            [ 1] 5350 	ldw y,x  
      001E0B CD 1A 9D         [ 4] 5351 	call search_file 
      001E0E 25 05            [ 1] 5352 	jrc 4$ 
      001E10 A6 09            [ 1] 5353 	ld a,#ERR_NOT_FILE
      001E12 CC 08 81         [ 2] 5354 	jp tb_error  
      001E15                       5355 4$: 
      001E15 55 00 03 00 01   [ 1] 5356 	mov in,count 
      001E1A 72 5F 00 16      [ 1] 5357 	clr farptr 
      001E1E AE 40 00         [ 2] 5358 	ldw x,#AUTORUN_NAME
      001E21 CF 00 17         [ 2] 5359 	ldw farptr+1,x 
      001E24 1E 01            [ 2] 5360 	ldw x,(1,sp)  
      001E26 CD 03 96         [ 4] 5361 	call strlen  ; return length in A 
      001E29 5F               [ 1] 5362 	clrw x 
      001E2A 97               [ 1] 5363 	ld xl,a 
      001E2B 5C               [ 2] 5364 	incw x 
      001E2C 90 85            [ 2] 5365 	popw y 
      001E2E 89               [ 2] 5366 	pushw x 
      001E2F 5F               [ 1] 5367 	clrw x 
      001E30 CD 02 5A         [ 4] 5368 	call write_block 
      001E33                       5369 	_drop 2 
      001E33 5B 02            [ 2]    1     addw sp,#2 
      001E35 81               [ 4] 5370 	ret 
                                   5371 
                                   5372 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5373 ; BASIC: SLEEP 
                                   5374 ; halt mcu until reset or external
                                   5375 ; interrupt.
                                   5376 ; Resume progam after SLEEP command
                                   5377 ;----------------------------------
      001E36                       5378 sleep:
      001E36 72 0D 52 30 FB   [ 2] 5379 	btjf UART1_SR,#UART_SR_TC,.
      001E3B 72 16 00 23      [ 1] 5380 	bset flags,#FSLEEP
      001E3F 8E               [10] 5381 	halt 
      001E40 81               [ 4] 5382 	ret 
                                   5383 
                                   5384 ;-------------------------------
                                   5385 ; BASIC: PAUSE expr 
                                   5386 ; suspend execution for n msec.
                                   5387 ; input:
                                   5388 ;	none
                                   5389 ; output:
                                   5390 ;	none 
                                   5391 ;------------------------------
      001E41                       5392 pause:
      001E41 CD 11 56         [ 4] 5393 	call expression
      001E44 A1 84            [ 1] 5394 	cp a,#TK_INTGR
      001E46 27 03            [ 1] 5395 	jreq pause02 
      001E48 CC 08 7F         [ 2] 5396 	jp syntax_error
      001E4B                       5397 pause02: 
      001E4B 5D               [ 2] 5398 1$: tnzw x 
      001E4C 27 04            [ 1] 5399 	jreq 2$
      001E4E 8F               [10] 5400 	wfi 
      001E4F 5A               [ 2] 5401 	decw x 
      001E50 26 F9            [ 1] 5402 	jrne 1$
      001E52 4F               [ 1] 5403 2$:	clr a 
      001E53 81               [ 4] 5404 	ret 
                                   5405 
                                   5406 ;------------------------------
                                   5407 ; BASIC: AWU expr
                                   5408 ; halt mcu for 'expr' milliseconds
                                   5409 ; use Auto wakeup peripheral
                                   5410 ; all oscillators stopped except LSI
                                   5411 ; range: 1ms - 511ms
                                   5412 ; input:
                                   5413 ;  none
                                   5414 ; output:
                                   5415 ;  none:
                                   5416 ;------------------------------
      001E54                       5417 awu:
      001E54 CD 11 56         [ 4] 5418   call expression
      001E57 A1 84            [ 1] 5419   cp a,#TK_INTGR
      001E59 27 03            [ 1] 5420   jreq awu02
      001E5B CC 08 7F         [ 2] 5421   jp syntax_error
      001E5E                       5422 awu02:
      001E5E A3 14 00         [ 2] 5423   cpw x,#5120
      001E61 2B 0C            [ 1] 5424   jrmi 1$ 
      001E63 35 0F 50 F2      [ 1] 5425   mov AWU_TBR,#15 
      001E67 A6 1E            [ 1] 5426   ld a,#30
      001E69 62               [ 2] 5427   div x,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001E6A A6 10            [ 1] 5428   ld a,#16
      001E6C 62               [ 2] 5429   div x,a 
      001E6D 20 1E            [ 2] 5430   jra 4$
      001E6F                       5431 1$: 
      001E6F A3 08 00         [ 2] 5432   cpw x,#2048
      001E72 2B 09            [ 1] 5433   jrmi 2$ 
      001E74 35 0E 50 F2      [ 1] 5434   mov AWU_TBR,#14
      001E78 A6 50            [ 1] 5435   ld a,#80
      001E7A 62               [ 2] 5436   div x,a 
      001E7B 20 10            [ 2] 5437   jra 4$   
      001E7D                       5438 2$:
      001E7D 35 07 50 F2      [ 1] 5439   mov AWU_TBR,#7
      001E81                       5440 3$:  
                                   5441 ; while X > 64  divide by 2 and increment AWU_TBR 
      001E81 A3 00 40         [ 2] 5442   cpw x,#64 
      001E84 23 07            [ 2] 5443   jrule 4$ 
      001E86 72 5C 50 F2      [ 1] 5444   inc AWU_TBR 
      001E8A 54               [ 2] 5445   srlw x 
      001E8B 20 F4            [ 2] 5446   jra 3$ 
      001E8D                       5447 4$:
      001E8D 9F               [ 1] 5448   ld a, xl
      001E8E 4A               [ 1] 5449   dec a 
      001E8F 27 01            [ 1] 5450   jreq 5$
      001E91 4A               [ 1] 5451   dec a 	
      001E92                       5452 5$: 
      001E92 A4 3E            [ 1] 5453   and a,#0x3e 
      001E94 C7 50 F1         [ 1] 5454   ld AWU_APR,a 
      001E97 72 18 50 F0      [ 1] 5455   bset AWU_CSR,#AWU_CSR_AWUEN
      001E9B 8E               [10] 5456   halt 
                                   5457 
      001E9C 81               [ 4] 5458   ret 
                                   5459 
                                   5460 ;------------------------------
                                   5461 ; BASIC: TICKS
                                   5462 ; return msec ticks counter value 
                                   5463 ; input:
                                   5464 ; 	none 
                                   5465 ; output:
                                   5466 ;	X 		TK_INTGR
                                   5467 ;-------------------------------
      001E9D                       5468 get_ticks:
      001E9D CE 00 0E         [ 2] 5469 	ldw x,ticks 
      001EA0 A6 84            [ 1] 5470 	ld a,#TK_INTGR
      001EA2 81               [ 4] 5471 	ret 
                                   5472 
                                   5473 
                                   5474 
                                   5475 ;------------------------------
                                   5476 ; BASIC: ABS(expr)
                                   5477 ; return absolute value of expr.
                                   5478 ; input:
                                   5479 ;   none
                                   5480 ; output:
                                   5481 ;   X     	positive integer
                                   5482 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001EA3                       5483 abs:
      001EA3 CD 10 52         [ 4] 5484 	call func_args 
      001EA6 A1 01            [ 1] 5485 	cp a,#1 
      001EA8 27 03            [ 1] 5486 	jreq 0$ 
      001EAA CC 08 7F         [ 2] 5487 	jp syntax_error
      001EAD                       5488 0$:  
      001EAD 85               [ 2] 5489     popw x   
      001EAE 9E               [ 1] 5490 	ld a,xh 
      001EAF A5 80            [ 1] 5491 	bcp a,#0x80 
      001EB1 27 01            [ 1] 5492 	jreq 2$ 
      001EB3 50               [ 2] 5493 	negw x 
      001EB4 A6 84            [ 1] 5494 2$: ld a,#TK_INTGR 
      001EB6 81               [ 4] 5495 	ret 
                                   5496 
                                   5497 ;------------------------------
                                   5498 ; BASIC: AND(expr1,expr2)
                                   5499 ; Apply bit AND relation between
                                   5500 ; the 2 arguments, i.e expr1 & expr2 
                                   5501 ; output:
                                   5502 ; 	A 		TK_INTGR
                                   5503 ;   X 		result 
                                   5504 ;------------------------------
      001EB7                       5505 bit_and:
      001EB7 CD 10 52         [ 4] 5506 	call func_args 
      001EBA A1 02            [ 1] 5507 	cp a,#2
      001EBC 27 03            [ 1] 5508 	jreq 1$
      001EBE CC 08 7F         [ 2] 5509 	jp syntax_error 
      001EC1 85               [ 2] 5510 1$:	popw x 
      001EC2 9E               [ 1] 5511 	ld a,xh 
      001EC3 14 01            [ 1] 5512 	and a,(1,sp)
      001EC5 95               [ 1] 5513 	ld xh,a 
      001EC6 9F               [ 1] 5514 	ld a,xl
      001EC7 14 02            [ 1] 5515 	and a,(2,sp)
      001EC9 97               [ 1] 5516 	ld xl,a 
      001ECA                       5517 	_drop 2 
      001ECA 5B 02            [ 2]    1     addw sp,#2 
      001ECC A6 84            [ 1] 5518 	ld a,#TK_INTGR
      001ECE 81               [ 4] 5519 	ret
                                   5520 
                                   5521 ;------------------------------
                                   5522 ; BASIC: OR(expr1,expr2)
                                   5523 ; Apply bit OR relation between
                                   5524 ; the 2 arguments, i.e expr1 | expr2 
                                   5525 ; output:
                                   5526 ; 	A 		TK_INTGR
                                   5527 ;   X 		result 
                                   5528 ;------------------------------
      001ECF                       5529 bit_or:
      001ECF CD 10 52         [ 4] 5530 	call func_args 
      001ED2 A1 02            [ 1] 5531 	cp a,#2
      001ED4 27 03            [ 1] 5532 	jreq 1$
      001ED6 CC 08 7F         [ 2] 5533 	jp syntax_error 
      001ED9                       5534 1$: 
      001ED9 85               [ 2] 5535 	popw x 
      001EDA 9E               [ 1] 5536 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001EDB 1A 01            [ 1] 5537 	or a,(1,sp)
      001EDD 95               [ 1] 5538 	ld xh,a 
      001EDE 9F               [ 1] 5539 	ld a,xl 
      001EDF 1A 02            [ 1] 5540 	or a,(2,sp)
      001EE1 97               [ 1] 5541 	ld xl,a 
      001EE2                       5542 	_drop 2 
      001EE2 5B 02            [ 2]    1     addw sp,#2 
      001EE4 A6 84            [ 1] 5543 	ld a,#TK_INTGR 
      001EE6 81               [ 4] 5544 	ret
                                   5545 
                                   5546 ;------------------------------
                                   5547 ; BASIC: XOR(expr1,expr2)
                                   5548 ; Apply bit XOR relation between
                                   5549 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5550 ; output:
                                   5551 ; 	A 		TK_INTGR
                                   5552 ;   X 		result 
                                   5553 ;------------------------------
      001EE7                       5554 bit_xor:
      001EE7 CD 10 52         [ 4] 5555 	call func_args 
      001EEA A1 02            [ 1] 5556 	cp a,#2
      001EEC 27 03            [ 1] 5557 	jreq 1$
      001EEE CC 08 7F         [ 2] 5558 	jp syntax_error 
      001EF1                       5559 1$: 
      001EF1 85               [ 2] 5560 	popw x 
      001EF2 9E               [ 1] 5561 	ld a,xh 
      001EF3 18 01            [ 1] 5562 	xor a,(1,sp)
      001EF5 95               [ 1] 5563 	ld xh,a 
      001EF6 9F               [ 1] 5564 	ld a,xl 
      001EF7 18 02            [ 1] 5565 	xor a,(2,sp)
      001EF9 97               [ 1] 5566 	ld xl,a 
      001EFA                       5567 	_drop 2 
      001EFA 5B 02            [ 2]    1     addw sp,#2 
      001EFC A6 84            [ 1] 5568 	ld a,#TK_INTGR 
      001EFE 81               [ 4] 5569 	ret 
                                   5570 
                                   5571 ;------------------------------
                                   5572 ; BASIC: LSHIFT(expr1,expr2)
                                   5573 ; logical shift left expr1 by 
                                   5574 ; expr2 bits 
                                   5575 ; output:
                                   5576 ; 	A 		TK_INTGR
                                   5577 ;   X 		result 
                                   5578 ;------------------------------
      001EFF                       5579 lshift:
      001EFF CD 10 52         [ 4] 5580 	call func_args
      001F02 A1 02            [ 1] 5581 	cp a,#2 
      001F04 27 03            [ 1] 5582 	jreq 1$
      001F06 CC 08 7F         [ 2] 5583 	jp syntax_error
      001F09 90 85            [ 2] 5584 1$: popw y   
      001F0B 85               [ 2] 5585 	popw x 
      001F0C 90 5D            [ 2] 5586 	tnzw y 
      001F0E 27 05            [ 1] 5587 	jreq 4$
      001F10 58               [ 2] 5588 2$:	sllw x 
      001F11 90 5A            [ 2] 5589 	decw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001F13 26 FB            [ 1] 5590 	jrne 2$
      001F15                       5591 4$:  
      001F15 A6 84            [ 1] 5592 	ld a,#TK_INTGR
      001F17 81               [ 4] 5593 	ret
                                   5594 
                                   5595 ;------------------------------
                                   5596 ; BASIC: RSHIFT(expr1,expr2)
                                   5597 ; logical shift right expr1 by 
                                   5598 ; expr2 bits.
                                   5599 ; output:
                                   5600 ; 	A 		TK_INTGR
                                   5601 ;   X 		result 
                                   5602 ;------------------------------
      001F18                       5603 rshift:
      001F18 CD 10 52         [ 4] 5604 	call func_args
      001F1B A1 02            [ 1] 5605 	cp a,#2 
      001F1D 27 03            [ 1] 5606 	jreq 1$
      001F1F CC 08 7F         [ 2] 5607 	jp syntax_error
      001F22 90 85            [ 2] 5608 1$: popw y  
      001F24 85               [ 2] 5609 	popw x
      001F25 90 5D            [ 2] 5610 	tnzw y 
      001F27 27 05            [ 1] 5611 	jreq 4$
      001F29 54               [ 2] 5612 2$:	srlw x 
      001F2A 90 5A            [ 2] 5613 	decw y 
      001F2C 26 FB            [ 1] 5614 	jrne 2$
      001F2E                       5615 4$:  
      001F2E A6 84            [ 1] 5616 	ld a,#TK_INTGR
      001F30 81               [ 4] 5617 	ret
                                   5618 
                                   5619 ;--------------------------
                                   5620 ; BASIC: FCPU integer
                                   5621 ; set CPU frequency 
                                   5622 ;-------------------------- 
                                   5623 
      001F31                       5624 fcpu:
      001F31 A6 84            [ 1] 5625 	ld a,#TK_INTGR
      001F33 CD 10 45         [ 4] 5626 	call expect 
      001F36 9F               [ 1] 5627 	ld a,xl 
      001F37 A4 07            [ 1] 5628 	and a,#7 
      001F39 C7 50 C6         [ 1] 5629 	ld CLK_CKDIVR,a 
      001F3C 81               [ 4] 5630 	ret 
                                   5631 
                                   5632 ;------------------------------
                                   5633 ; BASIC: PMODE pin#, mode 
                                   5634 ; Arduino pin. 
                                   5635 ; define pin as input or output
                                   5636 ; pin#: {0..15}
                                   5637 ; mode: INPUT|OUTPUT  
                                   5638 ;------------------------------
                           000001  5639 	PINNO=1
                           000001  5640 	VSIZE=1
      001F3D                       5641 pin_mode:
      001F3D                       5642 	_vars VSIZE 
      001F3D 52 01            [ 2]    1     sub sp,#VSIZE 
      001F3F CD 10 57         [ 4] 5643 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001F42 A1 02            [ 1] 5644 	cp a,#2 
      001F44 27 03            [ 1] 5645 	jreq 1$
      001F46 CC 08 7F         [ 2] 5646 	jp syntax_error 
      001F49 90 85            [ 2] 5647 1$: popw y ; mode 
      001F4B 85               [ 2] 5648 	popw x ; Dx pin 
      001F4C CD 1F 89         [ 4] 5649 	call select_pin 
      001F4F 6B 01            [ 1] 5650 	ld (PINNO,sp),a  
      001F51 A6 01            [ 1] 5651 	ld a,#1 
      001F53 0D 01            [ 1] 5652 	tnz (PINNO,sp)
      001F55 27 0D            [ 1] 5653 	jreq 4$
      001F57 48               [ 1] 5654 2$:	sll a 
      001F58 0A 01            [ 1] 5655 	dec (PINNO,sp)
      001F5A 26 FB            [ 1] 5656 	jrne 2$ 
      001F5C 6B 01            [ 1] 5657 	ld (PINNO,sp),a
      001F5E 7B 01            [ 1] 5658 	ld a,(PINNO,sp)
      001F60 EA 03            [ 1] 5659 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001F62 E7 03            [ 1] 5660 	ld (GPIO_CR1,x),a 
      001F64 90 A3 00 01      [ 2] 5661 4$:	cpw y,#OUTP 
      001F68 27 10            [ 1] 5662 	jreq 6$
                                   5663 ; input mode
                                   5664 ; disable external interrupt 
      001F6A 7B 01            [ 1] 5665 	ld a,(PINNO,sp)
      001F6C 43               [ 1] 5666 	cpl a 
      001F6D E4 04            [ 1] 5667 	and a,(GPIO_CR2,x)
      001F6F E7 04            [ 1] 5668 	ld (GPIO_CR2,x),a 
                                   5669 ;clear bit in DDR for input mode 
      001F71 7B 01            [ 1] 5670 	ld a,(PINNO,sp)
      001F73 43               [ 1] 5671 	cpl a 
      001F74 E4 02            [ 1] 5672 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001F76 E7 02            [ 1] 5673 	ld (GPIO_DDR,x),a 
      001F78 20 0C            [ 2] 5674 	jra 9$
      001F7A                       5675 6$: ;output mode  
      001F7A 7B 01            [ 1] 5676 	ld a,(PINNO,sp)
      001F7C EA 02            [ 1] 5677 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001F7E E7 02            [ 1] 5678 	ld (GPIO_DDR,x),a 
      001F80 7B 01            [ 1] 5679 	ld a,(PINNO,sp)
      001F82 EA 04            [ 1] 5680 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001F84 E7 04            [ 1] 5681 	ld (GPIO_CR2,x),a 
      001F86                       5682 9$:	
      001F86                       5683 	_drop VSIZE 
      001F86 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F88 81               [ 4] 5684 	ret
                                   5685 
                                   5686 ;------------------------
                                   5687 ; select Arduino pin 
                                   5688 ; input:
                                   5689 ;   X 	 {0..15} Arduino Dx 
                                   5690 ; output:
                                   5691 ;   A     stm8s208 pin 
                                   5692 ;   X     base address s208 GPIO port 
                                   5693 ;---------------------------
      001F89                       5694 select_pin:
      001F89 58               [ 2] 5695 	sllw x 
      001F8A 1C 1F 99         [ 2] 5696 	addw x,#arduino_to_8s208 
      001F8D FE               [ 2] 5697 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001F8E 9F               [ 1] 5698 	ld a,xl 
      001F8F 88               [ 1] 5699 	push a 
      001F90 5E               [ 1] 5700 	swapw x 
      001F91 A6 05            [ 1] 5701 	ld a,#5 
      001F93 42               [ 4] 5702 	mul x,a 
      001F94 1C 50 00         [ 2] 5703 	addw x,#GPIO_BASE 
      001F97 84               [ 1] 5704 	pop a 
      001F98 81               [ 4] 5705 	ret 
                                   5706 ; translation from Arduino D0..D15 to stm8s208rb 
      001F99                       5707 arduino_to_8s208:
      001F99 03 06                 5708 .byte 3,6 ; D0 
      001F9B 03 05                 5709 .byte 3,5 ; D1 
      001F9D 04 00                 5710 .byte 4,0 ; D2 
      001F9F 02 01                 5711 .byte 2,1 ; D3
      001FA1 06 00                 5712 .byte 6,0 ; D4
      001FA3 02 02                 5713 .byte 2,2 ; D5
      001FA5 02 03                 5714 .byte 2,3 ; D6
      001FA7 03 01                 5715 .byte 3,1 ; D7
      001FA9 03 03                 5716 .byte 3,3 ; D8
      001FAB 02 04                 5717 .byte 2,4 ; D9
      001FAD 04 05                 5718 .byte 4,5 ; D10
      001FAF 02 06                 5719 .byte 2,6 ; D11
      001FB1 02 07                 5720 .byte 2,7 ; D12
      001FB3 02 05                 5721 .byte 2,5 ; D13
      001FB5 04 02                 5722 .byte 4,2 ; D14
      001FB7 04 01                 5723 .byte 4,1 ; D15
                                   5724 
                                   5725 
                                   5726 ;------------------------------
                                   5727 ; BASIC: RND(expr)
                                   5728 ; return random number 
                                   5729 ; between 1 and expr inclusive
                                   5730 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5731 ; input:
                                   5732 ; 	none 
                                   5733 ; output:
                                   5734 ;	X 		random positive integer 
                                   5735 ;------------------------------
      001FB9                       5736 random:
      001FB9 CD 10 52         [ 4] 5737 	call func_args 
      001FBC A1 01            [ 1] 5738 	cp a,#1
      001FBE 27 03            [ 1] 5739 	jreq 1$
      001FC0 CC 08 7F         [ 2] 5740 	jp syntax_error
      001FC3                       5741 1$:  
      001FC3 A6 80            [ 1] 5742 	ld a,#0x80 
      001FC5 15 01            [ 1] 5743 	bcp a,(1,sp)
      001FC7 27 05            [ 1] 5744 	jreq 2$
      001FC9 A6 0A            [ 1] 5745 	ld a,#ERR_BAD_VALUE
      001FCB CC 08 81         [ 2] 5746 	jp tb_error
      001FCE                       5747 2$: 
                                   5748 ; acc16=(x<<5)^x 
      001FCE CE 00 12         [ 2] 5749 	ldw x,seedx 
      001FD1 58               [ 2] 5750 	sllw x 
      001FD2 58               [ 2] 5751 	sllw x 
      001FD3 58               [ 2] 5752 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001FD4 58               [ 2] 5753 	sllw x 
      001FD5 58               [ 2] 5754 	sllw x 
      001FD6 9E               [ 1] 5755 	ld a,xh 
      001FD7 C8 00 12         [ 1] 5756 	xor a,seedx 
      001FDA C7 00 0C         [ 1] 5757 	ld acc16,a 
      001FDD 9F               [ 1] 5758 	ld a,xl 
      001FDE C8 00 13         [ 1] 5759 	xor a,seedx+1 
      001FE1 C7 00 0D         [ 1] 5760 	ld acc8,a 
                                   5761 ; seedx=seedy 
      001FE4 CE 00 14         [ 2] 5762 	ldw x,seedy 
      001FE7 CF 00 12         [ 2] 5763 	ldw seedx,x  
                                   5764 ; seedy=seedy^(seedy>>1)
      001FEA 90 54            [ 2] 5765 	srlw y 
      001FEC 90 9E            [ 1] 5766 	ld a,yh 
      001FEE C8 00 14         [ 1] 5767 	xor a,seedy 
      001FF1 C7 00 14         [ 1] 5768 	ld seedy,a  
      001FF4 90 9F            [ 1] 5769 	ld a,yl 
      001FF6 C8 00 15         [ 1] 5770 	xor a,seedy+1 
      001FF9 C7 00 15         [ 1] 5771 	ld seedy+1,a 
                                   5772 ; acc16>>3 
      001FFC CE 00 0C         [ 2] 5773 	ldw x,acc16 
      001FFF 54               [ 2] 5774 	srlw x 
      002000 54               [ 2] 5775 	srlw x 
      002001 54               [ 2] 5776 	srlw x 
                                   5777 ; x=acc16^x 
      002002 9E               [ 1] 5778 	ld a,xh 
      002003 C8 00 0C         [ 1] 5779 	xor a,acc16 
      002006 95               [ 1] 5780 	ld xh,a 
      002007 9F               [ 1] 5781 	ld a,xl 
      002008 C8 00 0D         [ 1] 5782 	xor a,acc8 
      00200B 97               [ 1] 5783 	ld xl,a 
                                   5784 ; seedy=x^seedy 
      00200C C8 00 15         [ 1] 5785 	xor a,seedy+1
      00200F 97               [ 1] 5786 	ld xl,a 
      002010 9E               [ 1] 5787 	ld a,xh 
      002011 C8 00 14         [ 1] 5788 	xor a,seedy
      002014 95               [ 1] 5789 	ld xh,a 
      002015 CF 00 14         [ 2] 5790 	ldw seedy,x 
                                   5791 ; return seedy modulo expr + 1 
      002018 90 85            [ 2] 5792 	popw y 
      00201A 65               [ 2] 5793 	divw x,y 
      00201B 93               [ 1] 5794 	ldw x,y 
      00201C 5C               [ 2] 5795 	incw x 
      00201D                       5796 10$:
      00201D A6 84            [ 1] 5797 	ld a,#TK_INTGR
      00201F 81               [ 4] 5798 	ret 
                                   5799 
                                   5800 ;---------------------------------
                                   5801 ; BASIC: WORDS 
                                   5802 ; affiche la listes des mots du
                                   5803 ; dictionnaire ainsi que le nombre
                                   5804 ; de mots.
                                   5805 ;---------------------------------
                           000001  5806 	WLEN=1 ; word length
                           000002  5807 	LLEN=2 ; character sent to console
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           000003  5808 	WCNT=3 ; count words printed 
                           000003  5809 	VSIZE=3 
      002020                       5810 words:
      002020                       5811 	_vars VSIZE
      002020 52 03            [ 2]    1     sub sp,#VSIZE 
      002022 0F 02            [ 1] 5812 	clr (LLEN,sp)
      002024 0F 03            [ 1] 5813 	clr (WCNT,sp)
      002026 90 AE 27 0B      [ 2] 5814 	ldw y,#kword_dict+2
      00202A 93               [ 1] 5815 0$:	ldw x,y
      00202B F6               [ 1] 5816 	ld a,(x)
      00202C A4 0F            [ 1] 5817 	and a,#15 
      00202E 6B 01            [ 1] 5818 	ld (WLEN,sp),a 
      002030 0C 03            [ 1] 5819 	inc (WCNT,sp)
      002032 5C               [ 2] 5820 1$:	incw x 
      002033 F6               [ 1] 5821 	ld a,(x)
      002034 CD 02 C0         [ 4] 5822 	call putc 
      002037 0C 02            [ 1] 5823 	inc (LLEN,sp)
      002039 0A 01            [ 1] 5824 	dec (WLEN,sp)
      00203B 26 F5            [ 1] 5825 	jrne 1$
      00203D A6 46            [ 1] 5826 	ld a,#70
      00203F 11 02            [ 1] 5827 	cp a,(LLEN,sp)
      002041 2B 09            [ 1] 5828 	jrmi 2$   
      002043 A6 20            [ 1] 5829 	ld a,#SPACE 
      002045 CD 02 C0         [ 4] 5830 	call putc 
      002048 0C 02            [ 1] 5831 	inc (LLEN,sp) 
      00204A 20 07            [ 2] 5832 	jra 3$
      00204C A6 0D            [ 1] 5833 2$: ld a,#CR 
      00204E CD 02 C0         [ 4] 5834 	call putc 
      002051 0F 02            [ 1] 5835 	clr (LLEN,sp)
      002053 72 A2 00 02      [ 2] 5836 3$:	subw y,#2 
      002057 90 FE            [ 2] 5837 	ldw y,(y)
      002059 26 CF            [ 1] 5838 	jrne 0$ 
      00205B A6 0D            [ 1] 5839 	ld a,#CR 
      00205D CD 02 C0         [ 4] 5840 	call putc  
      002060 5F               [ 1] 5841 	clrw x 
      002061 7B 03            [ 1] 5842 	ld a,(WCNT,sp)
      002063 97               [ 1] 5843 	ld xl,a 
      002064 CD 09 D2         [ 4] 5844 	call print_int 
      002067 AE 20 70         [ 2] 5845 	ldw x,#words_count_msg
      00206A CD 00 00         [ 4] 5846 	call puts 
      00206D                       5847 	_drop VSIZE 
      00206D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00206F 81               [ 4] 5848 	ret 
      002070 20 77 6F 72 64 73 20  5849 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5850 
                                   5851 
                                   5852 ;-----------------------------
                                   5853 ; BASIC: TIMER expr 
                                   5854 ; initialize count down timer 
                                   5855 ;-----------------------------
      002086                       5856 set_timer:
      002086 CD 10 57         [ 4] 5857 	call arg_list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002089 A1 01            [ 1] 5858 	cp a,#1 
      00208B 27 03            [ 1] 5859 	jreq 1$
      00208D CC 08 7F         [ 2] 5860 	jp syntax_error
      002090                       5861 1$: 
      002090 85               [ 2] 5862 	popw x 
      002091 CF 00 10         [ 2] 5863 	ldw timer,x 
      002094 81               [ 4] 5864 	ret 
                                   5865 
                                   5866 ;------------------------------
                                   5867 ; BASIC: TIMEOUT 
                                   5868 ; return state of timer 
                                   5869 ;------------------------------
      002095                       5870 timeout:
      002095 CE 00 10         [ 2] 5871 	ldw x,timer 
      002098                       5872 logical_complement:
      002098 53               [ 2] 5873 	cplw x 
      002099 A3 FF FF         [ 2] 5874 	cpw x,#-1
      00209C 27 01            [ 1] 5875 	jreq 2$
      00209E 5F               [ 1] 5876 	clrw x 
      00209F A6 84            [ 1] 5877 2$:	ld a,#TK_INTGR
      0020A1 81               [ 4] 5878 	ret 
                                   5879 
                                   5880 ;--------------------------------
                                   5881 ; BASIC NOT(expr) 
                                   5882 ; return logical complement of expr
                                   5883 ;--------------------------------
      0020A2                       5884 func_not:
      0020A2 CD 10 52         [ 4] 5885 	call func_args  
      0020A5 A1 01            [ 1] 5886 	cp a,#1
      0020A7 27 03            [ 1] 5887 	jreq 1$
      0020A9 CC 08 7F         [ 2] 5888 	jp syntax_error
      0020AC 85               [ 2] 5889 1$:	popw x 
      0020AD 20 E9            [ 2] 5890 	jra logical_complement
                                   5891 
                                   5892 
                                   5893 
                                   5894 ;-----------------------------------
                                   5895 ; BASIC: IWDGEN expr1 
                                   5896 ; enable independant watchdog timer
                                   5897 ; expr1 is delay in multiple of 62.5µsec
                                   5898 ; expr1 -> {1..16383}
                                   5899 ;-----------------------------------
      0020AF                       5900 enable_iwdg:
      0020AF CD 10 57         [ 4] 5901 	call arg_list
      0020B2 A1 01            [ 1] 5902 	cp a,#1 
      0020B4 27 03            [ 1] 5903 	jreq 1$
      0020B6 CC 08 7F         [ 2] 5904 	jp syntax_error 
      0020B9 85               [ 2] 5905 1$: popw x 
      0020BA 4B 00            [ 1] 5906 	push #0
      0020BC 35 CC 50 E0      [ 1] 5907 	mov IWDG_KR,#IWDG_KEY_ENABLE
      0020C0 9E               [ 1] 5908 	ld a,xh 
      0020C1 A4 3F            [ 1] 5909 	and a,#0x3f
      0020C3 95               [ 1] 5910 	ld xh,a  
      0020C4 A3 00 FF         [ 2] 5911 2$:	cpw x,#255
      0020C7 23 06            [ 2] 5912 	jrule 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0020C9 0C 01            [ 1] 5913 	inc (1,sp)
      0020CB 98               [ 1] 5914 	rcf 
      0020CC 56               [ 2] 5915 	rrcw x 
      0020CD 20 F5            [ 2] 5916 	jra 2$
      0020CF 35 55 50 E0      [ 1] 5917 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0020D3 84               [ 1] 5918 	pop a  
      0020D4 C7 50 E1         [ 1] 5919 	ld IWDG_PR,a 
      0020D7 9F               [ 1] 5920 	ld a,xl
      0020D8 4A               [ 1] 5921 	dec a 
      0020D9 35 55 50 E0      [ 1] 5922 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0020DD C7 50 E2         [ 1] 5923 	ld IWDG_RLR,a 
      0020E0 35 AA 50 E0      [ 1] 5924 	mov IWDG_KR,#IWDG_KEY_REFRESH
      0020E4 81               [ 4] 5925 	ret 
                                   5926 
                                   5927 
                                   5928 ;-----------------------------------
                                   5929 ; BASIC: IWDGREF  
                                   5930 ; refresh independant watchdog count down 
                                   5931 ; timer before it reset MCU. 
                                   5932 ;-----------------------------------
      0020E5                       5933 refresh_iwdg:
      0020E5 35 AA 50 E0      [ 1] 5934 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      0020E9 81               [ 4] 5935 	ret 
                                   5936 
                                   5937 
                                   5938 ;-------------------------------------
                                   5939 ; BASIC: LOG(expr)
                                   5940 ; return logarithm base 2 of expr 
                                   5941 ; this is the position of most significant
                                   5942 ; bit set. 
                                   5943 ; input: 
                                   5944 ; output:
                                   5945 ;   X     log2 
                                   5946 ;   A     TK_INTGR 
                                   5947 ;*********************************
      0020EA                       5948 log2:
      0020EA CD 10 52         [ 4] 5949 	call func_args 
      0020ED A1 01            [ 1] 5950 	cp a,#1 
      0020EF 27 03            [ 1] 5951 	jreq 1$
      0020F1 CC 08 7F         [ 2] 5952 	jp syntax_error 
      0020F4 85               [ 2] 5953 1$: popw x 
      0020F5                       5954 leading_one:
      0020F5 5D               [ 2] 5955 	tnzw x 
      0020F6 27 0A            [ 1] 5956 	jreq 4$
      0020F8 A6 0F            [ 1] 5957 	ld a,#15 
      0020FA 59               [ 2] 5958 2$: rlcw x 
      0020FB 25 03            [ 1] 5959     jrc 3$
      0020FD 4A               [ 1] 5960 	dec a 
      0020FE 20 FA            [ 2] 5961 	jra 2$
      002100 5F               [ 1] 5962 3$: clrw x 
      002101 97               [ 1] 5963     ld xl,a
      002102 A6 84            [ 1] 5964 4$:	ld a,#TK_INTGR
      002104 81               [ 4] 5965 	ret 
                                   5966 
                                   5967 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                   5968 ; BASIC: BIT(expr) 
                                   5969 ; expr ->{0..15}
                                   5970 ; return 2^expr 
                                   5971 ; output:
                                   5972 ;    x    2^expr 
                                   5973 ;-----------------------------------
      002105                       5974 bitmask:
      002105 CD 10 52         [ 4] 5975     call func_args 
      002108 A1 01            [ 1] 5976 	cp a,#1
      00210A 27 03            [ 1] 5977 	jreq 1$
      00210C CC 08 7F         [ 2] 5978 	jp syntax_error 
      00210F 85               [ 2] 5979 1$: popw x 
      002110 9F               [ 1] 5980 	ld a,xl 
      002111 A4 0F            [ 1] 5981 	and a,#15
      002113 5F               [ 1] 5982 	clrw x 
      002114 5C               [ 2] 5983 	incw x 
      002115 4D               [ 1] 5984 2$: tnz a 
      002116 27 04            [ 1] 5985 	jreq 3$
      002118 58               [ 2] 5986 	slaw x 
      002119 4A               [ 1] 5987 	dec a 
      00211A 20 F9            [ 2] 5988 	jra 2$ 
      00211C A6 84            [ 1] 5989 3$: ld a,#TK_INTGR
      00211E 81               [ 4] 5990 	ret 
                                   5991 
                                   5992 ;------------------------------
                                   5993 ; BASIC: INVERT(expr)
                                   5994 ; 1's complement 
                                   5995 ;--------------------------------
      00211F                       5996 invert:
      00211F CD 10 52         [ 4] 5997 	call func_args
      002122 A1 01            [ 1] 5998 	cp a,#1 
      002124 27 03            [ 1] 5999 	jreq 1$
      002126 CC 08 7F         [ 2] 6000 	jp syntax_error
      002129 85               [ 2] 6001 1$: popw x  
      00212A 53               [ 2] 6002 	cplw x 
      00212B A6 84            [ 1] 6003 	ld a,#TK_INTGR 
      00212D 81               [ 4] 6004 	ret 
                                   6005 
                                   6006 ;------------------------------
                                   6007 ; BASIC: DO 
                                   6008 ; initiate a DO ... UNTIL loop 
                                   6009 ;------------------------------
                           000003  6010 	DOLP_ADR=3 
                           000005  6011 	DOLP_INW=5
                           000004  6012 	VSIZE=4 
      00212E                       6013 do_loop:
      00212E 85               [ 2] 6014 	popw x 
      00212F                       6015 	_vars VSIZE 
      00212F 52 04            [ 2]    1     sub sp,#VSIZE 
      002131 89               [ 2] 6016 	pushw x 
      002132 90 CE 00 04      [ 2] 6017 	ldw y,basicptr 
      002136 17 03            [ 2] 6018 	ldw (DOLP_ADR,sp),y
      002138 90 CE 00 00      [ 2] 6019 	ldw y,in.w 
      00213C 17 05            [ 2] 6020 	ldw (DOLP_INW,sp),y
      00213E 72 5C 00 20      [ 1] 6021 	inc loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      002142 81               [ 4] 6022 	ret 
                                   6023 
                                   6024 ;--------------------------------
                                   6025 ; BASIC: UNTIL expr 
                                   6026 ; loop if exprssion is false 
                                   6027 ; else terminate loop
                                   6028 ;--------------------------------
      002143                       6029 until: 
      002143 72 5D 00 20      [ 1] 6030 	tnz loop_depth 
      002147 26 03            [ 1] 6031 	jrne 1$ 
      002149 CC 08 7F         [ 2] 6032 	jp syntax_error 
      00214C                       6033 1$: 
      00214C CD 11 A2         [ 4] 6034 	call relation 
      00214F A1 84            [ 1] 6035 	cp a,#TK_INTGR
      002151 27 03            [ 1] 6036 	jreq 2$
      002153 CC 08 7F         [ 2] 6037 	jp syntax_error
      002156                       6038 2$: 
      002156 5D               [ 2] 6039 	tnzw x 
      002157 26 10            [ 1] 6040 	jrne 9$
      002159 1E 03            [ 2] 6041 	ldw x,(DOLP_ADR,sp)
      00215B CF 00 04         [ 2] 6042 	ldw basicptr,x 
      00215E E6 02            [ 1] 6043 	ld a,(2,x)
      002160 C7 00 03         [ 1] 6044 	ld count,a 
      002163 1E 05            [ 2] 6045 	ldw x,(DOLP_INW,sp)
      002165 CF 00 00         [ 2] 6046 	ldw in.w,x 
      002168 81               [ 4] 6047 	ret 
      002169                       6048 9$:	; remove loop data from stack  
      002169 85               [ 2] 6049 	popw x
      00216A                       6050 	_drop VSIZE
      00216A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00216C 72 5A 00 20      [ 1] 6051 	dec loop_depth 
      002170 FC               [ 2] 6052 	jp (x)
                                   6053 
                                   6054 ;--------------------------
                                   6055 ; BASIC: PRTA...PRTI  
                                   6056 ;  return constant value 
                                   6057 ;  PORT  offset in GPIO
                                   6058 ;  array
                                   6059 ;---------------------------
      002171                       6060 const_porta:
      002171 AE 00 00         [ 2] 6061 	ldw x,#0
      002174 A6 84            [ 1] 6062 	ld a,#TK_INTGR 
      002176 81               [ 4] 6063 	ret 
      002177                       6064 const_portb:
      002177 AE 00 01         [ 2] 6065 	ldw x,#1
      00217A A6 84            [ 1] 6066 	ld a,#TK_INTGR 
      00217C 81               [ 4] 6067 	ret 
      00217D                       6068 const_portc:
      00217D AE 00 02         [ 2] 6069 	ldw x,#2
      002180 A6 84            [ 1] 6070 	ld a,#TK_INTGR 
      002182 81               [ 4] 6071 	ret 
      002183                       6072 const_portd:
      002183 AE 00 03         [ 2] 6073 	ldw x,#3
      002186 A6 84            [ 1] 6074 	ld a,#TK_INTGR 
      002188 81               [ 4] 6075 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002189                       6076 const_porte:
      002189 AE 00 04         [ 2] 6077 	ldw x,#4
      00218C A6 84            [ 1] 6078 	ld a,#TK_INTGR 
      00218E 81               [ 4] 6079 	ret 
      00218F                       6080 const_portf:
      00218F AE 00 05         [ 2] 6081 	ldw x,#5
      002192 A6 84            [ 1] 6082 	ld a,#TK_INTGR 
      002194 81               [ 4] 6083 	ret 
      002195                       6084 const_portg:
      002195 AE 00 06         [ 2] 6085 	ldw x,#6
      002198 A6 84            [ 1] 6086 	ld a,#TK_INTGR 
      00219A 81               [ 4] 6087 	ret 
      00219B                       6088 const_porth:
      00219B AE 00 07         [ 2] 6089 	ldw x,#7
      00219E A6 84            [ 1] 6090 	ld a,#TK_INTGR 
      0021A0 81               [ 4] 6091 	ret 
      0021A1                       6092 const_porti:
      0021A1 AE 00 08         [ 2] 6093 	ldw x,#8
      0021A4 A6 84            [ 1] 6094 	ld a,#TK_INTGR 
      0021A6 81               [ 4] 6095 	ret 
                                   6096 
                                   6097 ;-------------------------------
                                   6098 ; following return constant 
                                   6099 ; related to GPIO register offset 
                                   6100 ;---------------------------------
      0021A7                       6101 const_odr:
      0021A7 A6 84            [ 1] 6102 	ld a,#TK_INTGR 
      0021A9 AE 00 00         [ 2] 6103 	ldw x,#GPIO_ODR
      0021AC 81               [ 4] 6104 	ret 
      0021AD                       6105 const_idr:
      0021AD A6 84            [ 1] 6106 	ld a,#TK_INTGR 
      0021AF AE 00 01         [ 2] 6107 	ldw x,#GPIO_IDR
      0021B2 81               [ 4] 6108 	ret 
      0021B3                       6109 const_ddr:
      0021B3 A6 84            [ 1] 6110 	ld a,#TK_INTGR 
      0021B5 AE 00 02         [ 2] 6111 	ldw x,#GPIO_DDR
      0021B8 81               [ 4] 6112 	ret 
      0021B9                       6113 const_cr1:
      0021B9 A6 84            [ 1] 6114 	ld a,#TK_INTGR 
      0021BB AE 00 03         [ 2] 6115 	ldw x,#GPIO_CR1
      0021BE 81               [ 4] 6116 	ret 
      0021BF                       6117 const_cr2:
      0021BF A6 84            [ 1] 6118 	ld a,#TK_INTGR 
      0021C1 AE 00 04         [ 2] 6119 	ldw x,#GPIO_CR2
      0021C4 81               [ 4] 6120 	ret 
                                   6121 ;-------------------------
                                   6122 ;  constant for port mode
                                   6123 ;  used by PMODE 
                                   6124 ;  input or output
                                   6125 ;------------------------
      0021C5                       6126 const_output:
      0021C5 A6 84            [ 1] 6127 	ld a,#TK_INTGR 
      0021C7 AE 00 01         [ 2] 6128 	ldw x,#OUTP
      0021CA 81               [ 4] 6129 	ret 
      0021CB                       6130 const_input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0021CB A6 84            [ 1] 6131 	ld a,#TK_INTGR 
      0021CD AE 00 00         [ 2] 6132 	ldw x,#INP 
      0021D0 81               [ 4] 6133 	ret 
                                   6134 ;-----------------------
                                   6135 ; memory area constants
                                   6136 ;-----------------------
      0021D1                       6137 const_eeprom_base:
      0021D1 A6 84            [ 1] 6138 	ld a,#TK_INTGR 
      0021D3 AE 40 00         [ 2] 6139 	ldw x,#EEPROM_BASE 
      0021D6 81               [ 4] 6140 	ret 
                                   6141 
                                   6142 ;---------------------------
                                   6143 ; BASIC: DATA 
                                   6144 ; when the interpreter find 
                                   6145 ; a DATA line it skip it.
                                   6146 ;---------------------------
      0021D7                       6147 data:
      0021D7 55 00 03 00 01   [ 1] 6148 	mov in,count 
      0021DC 81               [ 4] 6149 	ret 
                                   6150 
                                   6151 ;---------------------------
                                   6152 ; BASIC: DATLN  *expr*
                                   6153 ; set DATA pointer at line# 
                                   6154 ; specified by *expr* 
                                   6155 ;---------------------------
      0021DD                       6156 data_line:
      0021DD CD 11 56         [ 4] 6157 	call expression
      0021E0 A1 84            [ 1] 6158 	cp a,#TK_INTGR
      0021E2 27 03            [ 1] 6159 	jreq 1$
      0021E4 CC 08 7F         [ 2] 6160 	jp syntax_error 
      0021E7 CD 04 02         [ 4] 6161 1$: call search_lineno
      0021EA 5D               [ 2] 6162 	tnzw x 
      0021EB 26 05            [ 1] 6163 	jrne 3$
      0021ED A6 05            [ 1] 6164 2$:	ld a,#ERR_NO_LINE 
      0021EF CC 08 81         [ 2] 6165 	jp tb_error
      0021F2                       6166 3$: ; check if valid data line 
      0021F2 90 93            [ 1] 6167     ldw y,x 
      0021F4 EE 04            [ 2] 6168 	ldw x,(4,x)
      0021F6 A3 21 D7         [ 2] 6169 	cpw x,#data 
      0021F9 26 F2            [ 1] 6170 	jrne 2$ 
      0021FB 90 CF 00 06      [ 2] 6171 	ldw data_ptr,y
      0021FF 90 E6 02         [ 1] 6172 	ld a,(2,y)
      002202 C7 00 09         [ 1] 6173 	ld data_len,a 
      002205 35 06 00 08      [ 1] 6174 	mov data_ofs,#FIRST_DATA_ITEM 
      002209 81               [ 4] 6175 	ret
                                   6176 
                                   6177 ;---------------------------------
                                   6178 ; BASIC: RESTORE 
                                   6179 ; set data_ptr to first data line
                                   6180 ; if not DATA found pointer set to
                                   6181 ; zero 
                                   6182 ;---------------------------------
      00220A                       6183 restore:
      00220A 72 5F 00 06      [ 1] 6184 	clr data_ptr 
      00220E 72 5F 00 07      [ 1] 6185 	clr data_ptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      002212 72 5F 00 08      [ 1] 6186 	clr data_ofs 
      002216 72 5F 00 09      [ 1] 6187 	clr data_len
      00221A CE 00 1C         [ 2] 6188 	ldw x,txtbgn
      00221D                       6189 data_search_loop: 	
      00221D C3 00 1E         [ 2] 6190 	cpw x,txtend
      002220 24 1B            [ 1] 6191 	jruge 9$
      002222 90 93            [ 1] 6192 	ldw y,x 
      002224 EE 04            [ 2] 6193 	ldw x,(4,x)
      002226 1C 27 11         [ 2] 6194 	addw x,#code_addr
      002229 FE               [ 2] 6195 	ldw x,(x)
      00222A A3 21 D7         [ 2] 6196 	cpw x,#data 
      00222D 26 1A            [ 1] 6197 	jrne try_next_line 
      00222F 90 CF 00 06      [ 2] 6198 	ldw data_ptr,y 
      002233 90 E6 02         [ 1] 6199 	ld a,(2,y)
      002236 C7 00 09         [ 1] 6200 	ld data_len,a 
      002239 35 06 00 08      [ 1] 6201 	mov data_ofs,#FIRST_DATA_ITEM
      00223D 72 5D 00 09      [ 1] 6202 9$:	tnz data_len 
      002241 26 05            [ 1] 6203     jrne 10$
      002243 A6 0C            [ 1] 6204 	ld a,#ERR_NO_DATA 
      002245 CC 08 81         [ 2] 6205 	jp tb_error 
      002248 81               [ 4] 6206 10$:ret
      002249                       6207 try_next_line:
      002249 93               [ 1] 6208 	ldw x,y 
      00224A E6 02            [ 1] 6209 	ld a,(2,x)
      00224C C7 00 0D         [ 1] 6210 	ld acc8,a 
      00224F 72 5F 00 0C      [ 1] 6211 	clr acc16 
      002253 72 BB 00 0C      [ 2] 6212 	addw x,acc16 
      002257 20 C4            [ 2] 6213 	jra data_search_loop
                                   6214 
                                   6215 
                                   6216 ;---------------------------------
                                   6217 ; BASIC: READ 
                                   6218 ; return next data item | 0 
                                   6219 ;---------------------------------
                           000001  6220 	CTX_BPTR=1 
                           000003  6221 	CTX_IN=3 
                           000004  6222 	CTX_COUNT=4 
                           000005  6223 	XSAVE=5
                           000006  6224 	VSIZE=6
      002259                       6225 read:
      002259                       6226 	_vars  VSIZE 
      002259 52 06            [ 2]    1     sub sp,#VSIZE 
      00225B                       6227 read01:	
      00225B C6 00 08         [ 1] 6228 	ld a,data_ofs
      00225E C1 00 09         [ 1] 6229 	cp a,data_len 
      002261 27 37            [ 1] 6230 	jreq 2$ ; end of line  
      002263 CD 15 A9         [ 4] 6231 	call save_context
      002266 CE 00 06         [ 2] 6232 	ldw x,data_ptr 
      002269 CF 00 04         [ 2] 6233 	ldw basicptr,x 
      00226C 55 00 08 00 01   [ 1] 6234 	mov in,data_ofs 
      002271 55 00 09 00 03   [ 1] 6235 	mov count,data_len  
      002276 CD 11 56         [ 4] 6236 	call expression 
      002279 A1 84            [ 1] 6237 	cp a,#TK_INTGR 
      00227B 27 03            [ 1] 6238 	jreq 1$ 
      00227D CC 08 7F         [ 2] 6239 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002280                       6240 1$:
      002280 1F 05            [ 2] 6241 	ldw (XSAVE,SP),x
      002282 CD 09 71         [ 4] 6242 	call next_token ; skip comma
      002285 CE 00 04         [ 2] 6243 	ldw x,basicptr 
      002288 CF 00 06         [ 2] 6244 	ldw data_ptr,x 
      00228B 55 00 01 00 08   [ 1] 6245 	mov data_ofs,in 
      002290 CD 15 B9         [ 4] 6246 	call rest_context
      002293 1E 05            [ 2] 6247 	ldw x,(XSAVE,sp)
      002295 A6 84            [ 1] 6248 	ld a,#TK_INTGR
      002297                       6249 	_drop VSIZE 
      002297 5B 06            [ 2]    1     addw sp,#VSIZE 
      002299 81               [ 4] 6250 	ret 
      00229A                       6251 2$: ; end of line reached 
      00229A 90 CE 00 06      [ 2] 6252 	ldw y, data_ptr 
      00229E 72 5F 00 06      [ 1] 6253 	clr data_ptr
      0022A2 72 5F 00 07      [ 1] 6254 	clr data_ptr+1   
      0022A6 72 5F 00 08      [ 1] 6255 	clr data_ofs 
      0022AA 72 5F 00 09      [ 1] 6256 	clr data_len 
      0022AE CD 22 49         [ 4] 6257 	call try_next_line 
      0022B1 20 A8            [ 2] 6258 	jra read01
                                   6259 
                                   6260 
                                   6261 ;---------------------------------
                                   6262 ; BASIC: SPIEN clkdiv, 0|1  
                                   6263 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6264 ; if clkdiv==-1 disable SPI
                                   6265 ; 0|1 -> disable|enable  
                                   6266 ;--------------------------------- 
                           000005  6267 SPI_CS_BIT=5
      0022B3                       6268 spi_enable:
      0022B3 CD 10 57         [ 4] 6269 	call arg_list 
      0022B6 A1 02            [ 1] 6270 	cp a,#2
      0022B8 27 03            [ 1] 6271 	jreq 1$
      0022BA CC 08 7F         [ 2] 6272 	jp syntax_error 
      0022BD                       6273 1$: 
      0022BD 72 12 50 C7      [ 1] 6274 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0022C1 85               [ 2] 6275 	popw x  
      0022C2 5D               [ 2] 6276 	tnzw x 
      0022C3 27 21            [ 1] 6277 	jreq spi_disable 
      0022C5 85               [ 2] 6278 	popw x 
      0022C6 A6 08            [ 1] 6279 	ld a,#(1<<SPI_CR1_BR)
      0022C8 42               [ 4] 6280 	mul x,a 
      0022C9 9F               [ 1] 6281 	ld a,xl 
      0022CA C7 52 00         [ 1] 6282 	ld SPI_CR1,a 
                                   6283 ; configure ~CS on PE5 (D10 on CN8) as output. 
      0022CD 72 1A 50 14      [ 1] 6284 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      0022D1 72 1A 50 16      [ 1] 6285 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6286 ; configure SPI as master mode 0.	
      0022D5 72 14 52 00      [ 1] 6287 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6288 ; ~CS line controlled by sofware 	
      0022D9 72 12 52 01      [ 1] 6289 	bset SPI_CR2,#SPI_CR2_SSM 
      0022DD 72 10 52 01      [ 1] 6290     bset SPI_CR2,#SPI_CR2_SSI 
                                   6291 ; enable SPI
      0022E1 72 1C 52 00      [ 1] 6292 	bset SPI_CR1,#SPI_CR1_SPE 	
      0022E5 81               [ 4] 6293 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0022E6                       6294 spi_disable:
      0022E6                       6295 	_drop #2; throw first argument.
      0022E6 5B 02            [ 2]    1     addw sp,##2 
                                   6296 ; wait spi idle 
      0022E8 A6 82            [ 1] 6297 1$:	ld a,#0x82 
      0022EA C4 52 03         [ 1] 6298 	and a,SPI_SR
      0022ED A1 02            [ 1] 6299 	cp a,#2 
      0022EF 26 F7            [ 1] 6300 	jrne 1$
      0022F1 72 1D 52 00      [ 1] 6301 	bres SPI_CR1,#SPI_CR1_SPE
      0022F5 72 13 50 C7      [ 1] 6302 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      0022F9 72 1B 50 16      [ 1] 6303 	bres PE_DDR,#SPI_CS_BIT 
      0022FD 81               [ 4] 6304 	ret 
                                   6305 
      0022FE                       6306 spi_clear_error:
      0022FE A6 78            [ 1] 6307 	ld a,#0x78 
      002300 C5 52 03         [ 1] 6308 	bcp a,SPI_SR 
      002303 27 04            [ 1] 6309 	jreq 1$
      002305 72 5F 52 03      [ 1] 6310 	clr SPI_SR 
      002309 81               [ 4] 6311 1$: ret 
                                   6312 
      00230A                       6313 spi_send_byte:
      00230A 88               [ 1] 6314 	push a 
      00230B CD 22 FE         [ 4] 6315 	call spi_clear_error
      00230E 84               [ 1] 6316 	pop a 
      00230F 72 03 52 03 FB   [ 2] 6317 	btjf SPI_SR,#SPI_SR_TXE,.
      002314 C7 52 04         [ 1] 6318 	ld SPI_DR,a
      002317 72 01 52 03 FB   [ 2] 6319 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00231C C6 52 04         [ 1] 6320 	ld a,SPI_DR 
      00231F 81               [ 4] 6321 	ret 
                                   6322 
      002320                       6323 spi_rcv_byte:
      002320 A6 FF            [ 1] 6324 	ld a,#255
      002322 72 01 52 03 E3   [ 2] 6325 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002327 C6 52 04         [ 1] 6326 	ld a,SPI_DR 
      00232A 81               [ 4] 6327 	ret
                                   6328 
                                   6329 ;------------------------------
                                   6330 ; BASIC: SPIWR byte [,byte]
                                   6331 ; write 1 or more byte
                                   6332 ;------------------------------
      00232B                       6333 spi_write:
      00232B CD 11 56         [ 4] 6334 	call expression
      00232E A1 84            [ 1] 6335 	cp a,#TK_INTGR 
      002330 27 03            [ 1] 6336 	jreq 1$
      002332 CC 08 7F         [ 2] 6337 	jp syntax_error 
      002335                       6338 1$:	
      002335 9F               [ 1] 6339 	ld a,xl 
      002336 CD 23 0A         [ 4] 6340 	call spi_send_byte 
      002339 CD 09 71         [ 4] 6341 	call next_token 
      00233C A1 09            [ 1] 6342 	cp a,#TK_COMMA 
      00233E 26 02            [ 1] 6343 	jrne 2$ 
      002340 20 E9            [ 2] 6344 	jra spi_write 
      002342 4D               [ 1] 6345 2$:	tnz a 
      002343 27 05            [ 1] 6346 	jreq 3$
      002345                       6347 	_unget_token  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002345 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00234A 81               [ 4] 6348 3$:	ret 
                                   6349 
                                   6350 
                                   6351 ;-------------------------------
                                   6352 ; BASIC: SPIRD 	
                                   6353 ; read one byte from SPI 
                                   6354 ;-------------------------------
      00234B                       6355 spi_read:
      00234B CD 23 20         [ 4] 6356 	call spi_rcv_byte 
      00234E 5F               [ 1] 6357 	clrw x 
      00234F 97               [ 1] 6358 	ld xl,a 
      002350 A6 84            [ 1] 6359 	ld a,#TK_INTGR 
      002352 81               [ 4] 6360 	ret 
                                   6361 
                                   6362 ;------------------------------
                                   6363 ; BASIC: SPISEL 0|1 
                                   6364 ; set state of ~CS line
                                   6365 ; 0|1 deselect|select  
                                   6366 ;------------------------------
      002353                       6367 spi_select:
      002353 CD 09 71         [ 4] 6368 	call next_token 
      002356 A1 84            [ 1] 6369 	cp a,#TK_INTGR 
      002358 27 03            [ 1] 6370 	jreq 1$
      00235A CC 08 7F         [ 2] 6371 	jp syntax_error 
      00235D 5D               [ 2] 6372 1$: tnzw x  
      00235E 27 05            [ 1] 6373 	jreq cs_high 
      002360 72 1B 50 14      [ 1] 6374 	bres PE_ODR,#SPI_CS_BIT
      002364 81               [ 4] 6375 	ret 
      002365                       6376 cs_high: 
      002365 72 1A 50 14      [ 1] 6377 	bset PE_ODR,#SPI_CS_BIT
      002369 81               [ 4] 6378 	ret 
                                   6379 
                                   6380 
                                   6381 ;-------------------------------
                                   6382 ; BASIC: PAD 
                                   6383 ; Return pad buffer address.
                                   6384 ;------------------------------
      00236A                       6385 pad_ref:
      00236A AE 16 E0         [ 2] 6386 	ldw x,#pad 
      00236D B6 84            [ 1] 6387 	ld a,TK_INTGR
      00236F 81               [ 4] 6388 	ret 
                                   6389 
                                   6390 ;------------------------------
                                   6391 ;      dictionary 
                                   6392 ; format:
                                   6393 ;   link:   2 bytes 
                                   6394 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6395 ;   cmd_name: 16 byte max 
                                   6396 ;   cmd_index: 2 bytes 
                                   6397 ;------------------------------
                                   6398 	.macro _dict_entry len,name,cmd_idx 
                                   6399 	.word LINK 
                                   6400 	LINK=.
                                   6401 name:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   6402 	.byte len 	
                                   6403 	.ascii "name"
                                   6404 	.word cmd_idx 
                                   6405 	.endm 
                                   6406 
                           000000  6407 	LINK=0
                                   6408 ; respect alphabetic order for BASIC names from Z-A
                                   6409 ; this sort order is for a cleaner WORDS cmd output. 	
      002370                       6410 kword_end:
      002370                       6411 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002370 00 00                    1 	.word LINK 
                           002372     2 	LINK=.
      002372                          3 XOR:
      002372 43                       4 	.byte 3+F_IFUNC 	
      002373 58 4F 52                 5 	.ascii "XOR"
      002376 00 C6                    6 	.word XOR_IDX 
      002378                       6412 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002378 23 72                    1 	.word LINK 
                           00237A     2 	LINK=.
      00237A                          3 WRITE:
      00237A 05                       4 	.byte 5 	
      00237B 57 52 49 54 45           5 	.ascii "WRITE"
      002380 00 C4                    6 	.word WRITE_IDX 
      002382                       6413 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002382 23 7A                    1 	.word LINK 
                           002384     2 	LINK=.
      002384                          3 WORDS:
      002384 05                       4 	.byte 5 	
      002385 57 4F 52 44 53           5 	.ascii "WORDS"
      00238A 00 C2                    6 	.word WORDS_IDX 
      00238C                       6414 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      00238C 23 84                    1 	.word LINK 
                           00238E     2 	LINK=.
      00238E                          3 WAIT:
      00238E 04                       4 	.byte 4 	
      00238F 57 41 49 54              5 	.ascii "WAIT"
      002393 00 C0                    6 	.word WAIT_IDX 
      002395                       6415 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002395 23 8E                    1 	.word LINK 
                           002397     2 	LINK=.
      002397                          3 USR:
      002397 43                       4 	.byte 3+F_IFUNC 	
      002398 55 53 52                 5 	.ascii "USR"
      00239B 00 BE                    6 	.word USR_IDX 
      00239D                       6416 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      00239D 23 97                    1 	.word LINK 
                           00239F     2 	LINK=.
      00239F                          3 UNTIL:
      00239F 05                       4 	.byte 5 	
      0023A0 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0023A5 00 BC                    6 	.word UNTIL_IDX 
      0023A7                       6417 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      0023A7 23 9F                    1 	.word LINK 
                           0023A9     2 	LINK=.
      0023A9                          3 UFLASH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0023A9 46                       4 	.byte 6+F_IFUNC 	
      0023AA 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0023B0 00 BA                    6 	.word UFLASH_IDX 
      0023B2                       6418 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound 
      0023B2 23 A9                    1 	.word LINK 
                           0023B4     2 	LINK=.
      0023B4                          3 UBOUND:
      0023B4 46                       4 	.byte 6+F_IFUNC 	
      0023B5 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0023BB 00 B8                    6 	.word UBOUND_IDX 
      0023BD                       6419 	_dict_entry,4,TONE,TONE_IDX;tone  
      0023BD 23 B4                    1 	.word LINK 
                           0023BF     2 	LINK=.
      0023BF                          3 TONE:
      0023BF 04                       4 	.byte 4 	
      0023C0 54 4F 4E 45              5 	.ascii "TONE"
      0023C4 00 B6                    6 	.word TONE_IDX 
      0023C6                       6420 	_dict_entry,2,TO,TO_IDX;to
      0023C6 23 BF                    1 	.word LINK 
                           0023C8     2 	LINK=.
      0023C8                          3 TO:
      0023C8 02                       4 	.byte 2 	
      0023C9 54 4F                    5 	.ascii "TO"
      0023CB 00 B4                    6 	.word TO_IDX 
      0023CD                       6421 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      0023CD 23 C8                    1 	.word LINK 
                           0023CF     2 	LINK=.
      0023CF                          3 TIMEOUT:
      0023CF 47                       4 	.byte 7+F_IFUNC 	
      0023D0 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      0023D7 00 B2                    6 	.word TMROUT_IDX 
      0023D9                       6422 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      0023D9 23 CF                    1 	.word LINK 
                           0023DB     2 	LINK=.
      0023DB                          3 TIMER:
      0023DB 05                       4 	.byte 5 	
      0023DC 54 49 4D 45 52           5 	.ascii "TIMER"
      0023E1 00 B0                    6 	.word TIMER_IDX 
      0023E3                       6423 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      0023E3 23 DB                    1 	.word LINK 
                           0023E5     2 	LINK=.
      0023E5                          3 TICKS:
      0023E5 45                       4 	.byte 5+F_IFUNC 	
      0023E6 54 49 43 4B 53           5 	.ascii "TICKS"
      0023EB 00 AE                    6 	.word TICKS_IDX 
      0023ED                       6424 	_dict_entry,4,STOP,STOP_IDX;stop 
      0023ED 23 E5                    1 	.word LINK 
                           0023EF     2 	LINK=.
      0023EF                          3 STOP:
      0023EF 04                       4 	.byte 4 	
      0023F0 53 54 4F 50              5 	.ascii "STOP"
      0023F4 00 AC                    6 	.word STOP_IDX 
      0023F6                       6425 	_dict_entry,4,STEP,STEP_IDX;step 
      0023F6 23 EF                    1 	.word LINK 
                           0023F8     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0023F8                          3 STEP:
      0023F8 04                       4 	.byte 4 	
      0023F9 53 54 45 50              5 	.ascii "STEP"
      0023FD 00 AA                    6 	.word STEP_IDX 
      0023FF                       6426 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      0023FF 23 F8                    1 	.word LINK 
                           002401     2 	LINK=.
      002401                          3 SPIWR:
      002401 05                       4 	.byte 5 	
      002402 53 50 49 57 52           5 	.ascii "SPIWR"
      002407 00 A8                    6 	.word SPIWR_IDX 
      002409                       6427 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      002409 24 01                    1 	.word LINK 
                           00240B     2 	LINK=.
      00240B                          3 SPISEL:
      00240B 06                       4 	.byte 6 	
      00240C 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002412 00 A6                    6 	.word SPISEL_IDX 
      002414                       6428 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      002414 24 0B                    1 	.word LINK 
                           002416     2 	LINK=.
      002416                          3 SPIEN:
      002416 05                       4 	.byte 5 	
      002417 53 50 49 45 4E           5 	.ascii "SPIEN"
      00241C 00 A4                    6 	.word SPIEN_IDX 
      00241E                       6429 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      00241E 24 16                    1 	.word LINK 
                           002420     2 	LINK=.
      002420                          3 SPIRD:
      002420 45                       4 	.byte 5+F_IFUNC 	
      002421 53 50 49 52 44           5 	.ascii "SPIRD"
      002426 00 A2                    6 	.word SPIRD_IDX 
      002428                       6430 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      002428 24 20                    1 	.word LINK 
                           00242A     2 	LINK=.
      00242A                          3 SLEEP:
      00242A 05                       4 	.byte 5 	
      00242B 53 4C 45 45 50           5 	.ascii "SLEEP"
      002430 00 A0                    6 	.word SLEEP_IDX 
      002432                       6431 	_dict_entry,4+F_IFUNC,SIZE,SIZE_IDX;size
      002432 24 2A                    1 	.word LINK 
                           002434     2 	LINK=.
      002434                          3 SIZE:
      002434 44                       4 	.byte 4+F_IFUNC 	
      002435 53 49 5A 45              5 	.ascii "SIZE"
      002439 00 9E                    6 	.word SIZE_IDX 
      00243B                       6432     _dict_entry,4,SHOW,SHOW_IDX;show 
      00243B 24 34                    1 	.word LINK 
                           00243D     2 	LINK=.
      00243D                          3 SHOW:
      00243D 04                       4 	.byte 4 	
      00243E 53 48 4F 57              5 	.ascii "SHOW"
      002442 00 9C                    6 	.word SHOW_IDX 
      002444                       6433 	_dict_entry,4,SAVE,SAVE_IDX;save
      002444 24 3D                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                           002446     2 	LINK=.
      002446                          3 SAVE:
      002446 04                       4 	.byte 4 	
      002447 53 41 56 45              5 	.ascii "SAVE"
      00244B 00 9A                    6 	.word SAVE_IDX 
      00244D                       6434 	_dict_entry 3,RUN,RUN_IDX;run
      00244D 24 46                    1 	.word LINK 
                           00244F     2 	LINK=.
      00244F                          3 RUN:
      00244F 03                       4 	.byte 3 	
      002450 52 55 4E                 5 	.ascii "RUN"
      002453 00 98                    6 	.word RUN_IDX 
      002455                       6435 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      002455 24 4F                    1 	.word LINK 
                           002457     2 	LINK=.
      002457                          3 RSHIFT:
      002457 46                       4 	.byte 6+F_IFUNC 	
      002458 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00245E 00 96                    6 	.word RSHIFT_IDX 
      002460                       6436 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      002460 24 57                    1 	.word LINK 
                           002462     2 	LINK=.
      002462                          3 RND:
      002462 43                       4 	.byte 3+F_IFUNC 	
      002463 52 4E 44                 5 	.ascii "RND"
      002466 00 94                    6 	.word RND_IDX 
      002468                       6437 	_dict_entry,6,RETURN,RET_IDX;return 
      002468 24 62                    1 	.word LINK 
                           00246A     2 	LINK=.
      00246A                          3 RETURN:
      00246A 06                       4 	.byte 6 	
      00246B 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002471 00 92                    6 	.word RET_IDX 
      002473                       6438 	_dict_entry,7,RESTORE,REST_IDX;restore 
      002473 24 6A                    1 	.word LINK 
                           002475     2 	LINK=.
      002475                          3 RESTORE:
      002475 07                       4 	.byte 7 	
      002476 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00247D 00 90                    6 	.word REST_IDX 
      00247F                       6439 	_dict_entry 6,REMARK,REM_IDX;remark 
      00247F 24 75                    1 	.word LINK 
                           002481     2 	LINK=.
      002481                          3 REMARK:
      002481 06                       4 	.byte 6 	
      002482 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002488 00 8E                    6 	.word REM_IDX 
      00248A                       6440 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      00248A 24 81                    1 	.word LINK 
                           00248C     2 	LINK=.
      00248C                          3 REBOOT:
      00248C 06                       4 	.byte 6 	
      00248D 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002493 00 8C                    6 	.word RBT_IDX 
      002495                       6441 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002495 24 8C                    1 	.word LINK 
                           002497     2 	LINK=.
      002497                          3 READ:
      002497 44                       4 	.byte 4+F_IFUNC 	
      002498 52 45 41 44              5 	.ascii "READ"
      00249C 00 8A                    6 	.word READ_IDX 
      00249E                       6442 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      00249E 24 97                    1 	.word LINK 
                           0024A0     2 	LINK=.
      0024A0                          3 QKEY:
      0024A0 44                       4 	.byte 4+F_IFUNC 	
      0024A1 51 4B 45 59              5 	.ascii "QKEY"
      0024A5 00 88                    6 	.word QKEY_IDX 
      0024A7                       6443 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      0024A7 24 A0                    1 	.word LINK 
                           0024A9     2 	LINK=.
      0024A9                          3 PRTI:
      0024A9 44                       4 	.byte 4+F_IFUNC 	
      0024AA 50 52 54 49              5 	.ascii "PRTI"
      0024AE 00 86                    6 	.word PRTI_IDX 
      0024B0                       6444 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      0024B0 24 A9                    1 	.word LINK 
                           0024B2     2 	LINK=.
      0024B2                          3 PRTH:
      0024B2 44                       4 	.byte 4+F_IFUNC 	
      0024B3 50 52 54 48              5 	.ascii "PRTH"
      0024B7 00 84                    6 	.word PRTH_IDX 
      0024B9                       6445 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      0024B9 24 B2                    1 	.word LINK 
                           0024BB     2 	LINK=.
      0024BB                          3 PRTG:
      0024BB 44                       4 	.byte 4+F_IFUNC 	
      0024BC 50 52 54 47              5 	.ascii "PRTG"
      0024C0 00 82                    6 	.word PRTG_IDX 
      0024C2                       6446 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      0024C2 24 BB                    1 	.word LINK 
                           0024C4     2 	LINK=.
      0024C4                          3 PRTF:
      0024C4 44                       4 	.byte 4+F_IFUNC 	
      0024C5 50 52 54 46              5 	.ascii "PRTF"
      0024C9 00 80                    6 	.word PRTF_IDX 
      0024CB                       6447 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      0024CB 24 C4                    1 	.word LINK 
                           0024CD     2 	LINK=.
      0024CD                          3 PRTE:
      0024CD 44                       4 	.byte 4+F_IFUNC 	
      0024CE 50 52 54 45              5 	.ascii "PRTE"
      0024D2 00 7E                    6 	.word PRTE_IDX 
      0024D4                       6448 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      0024D4 24 CD                    1 	.word LINK 
                           0024D6     2 	LINK=.
      0024D6                          3 PRTD:
      0024D6 44                       4 	.byte 4+F_IFUNC 	
      0024D7 50 52 54 44              5 	.ascii "PRTD"
      0024DB 00 7C                    6 	.word PRTD_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0024DD                       6449 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      0024DD 24 D6                    1 	.word LINK 
                           0024DF     2 	LINK=.
      0024DF                          3 PRTC:
      0024DF 44                       4 	.byte 4+F_IFUNC 	
      0024E0 50 52 54 43              5 	.ascii "PRTC"
      0024E4 00 7A                    6 	.word PRTC_IDX 
      0024E6                       6450 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      0024E6 24 DF                    1 	.word LINK 
                           0024E8     2 	LINK=.
      0024E8                          3 PRTB:
      0024E8 44                       4 	.byte 4+F_IFUNC 	
      0024E9 50 52 54 42              5 	.ascii "PRTB"
      0024ED 00 78                    6 	.word PRTB_IDX 
      0024EF                       6451 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      0024EF 24 E8                    1 	.word LINK 
                           0024F1     2 	LINK=.
      0024F1                          3 PRTA:
      0024F1 44                       4 	.byte 4+F_IFUNC 	
      0024F2 50 52 54 41              5 	.ascii "PRTA"
      0024F6 00 76                    6 	.word PRTA_IDX 
      0024F8                       6452 	_dict_entry 5,PRINT,PRT_IDX;print 
      0024F8 24 F1                    1 	.word LINK 
                           0024FA     2 	LINK=.
      0024FA                          3 PRINT:
      0024FA 05                       4 	.byte 5 	
      0024FB 50 52 49 4E 54           5 	.ascii "PRINT"
      002500 00 74                    6 	.word PRT_IDX 
      002502                       6453 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      002502 24 FA                    1 	.word LINK 
                           002504     2 	LINK=.
      002504                          3 POUT:
      002504 44                       4 	.byte 4+F_IFUNC 	
      002505 50 4F 55 54              5 	.ascii "POUT"
      002509 00 72                    6 	.word POUT_IDX 
      00250B                       6454 	_dict_entry,4,POKE,POKE_IDX;poke 
      00250B 25 04                    1 	.word LINK 
                           00250D     2 	LINK=.
      00250D                          3 POKE:
      00250D 04                       4 	.byte 4 	
      00250E 50 4F 4B 45              5 	.ascii "POKE"
      002512 00 70                    6 	.word POKE_IDX 
      002514                       6455 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      002514 25 0D                    1 	.word LINK 
                           002516     2 	LINK=.
      002516                          3 PINP:
      002516 44                       4 	.byte 4+F_IFUNC 	
      002517 50 49 4E 50              5 	.ascii "PINP"
      00251B 00 6E                    6 	.word PINP_IDX 
      00251D                       6456 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      00251D 25 16                    1 	.word LINK 
                           00251F     2 	LINK=.
      00251F                          3 PEEK:
      00251F 44                       4 	.byte 4+F_IFUNC 	
      002520 50 45 45 4B              5 	.ascii "PEEK"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002524 00 6C                    6 	.word PEEK_IDX 
      002526                       6457 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      002526 25 1F                    1 	.word LINK 
                           002528     2 	LINK=.
      002528                          3 PMODE:
      002528 05                       4 	.byte 5 	
      002529 50 4D 4F 44 45           5 	.ascii "PMODE"
      00252E 00 6A                    6 	.word PMODE_IDX 
      002530                       6458 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      002530 25 28                    1 	.word LINK 
                           002532     2 	LINK=.
      002532                          3 PAUSE:
      002532 05                       4 	.byte 5 	
      002533 50 41 55 53 45           5 	.ascii "PAUSE"
      002538 00 68                    6 	.word PAUSE_IDX 
      00253A                       6459 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      00253A 25 32                    1 	.word LINK 
                           00253C     2 	LINK=.
      00253C                          3 PAD:
      00253C 43                       4 	.byte 3+F_IFUNC 	
      00253D 50 41 44                 5 	.ascii "PAD"
      002540 00 66                    6 	.word PAD_IDX 
      002542                       6460 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      002542 25 3C                    1 	.word LINK 
                           002544     2 	LINK=.
      002544                          3 OR:
      002544 42                       4 	.byte 2+F_IFUNC 	
      002545 4F 52                    5 	.ascii "OR"
      002547 00 64                    6 	.word OR_IDX 
      002549                       6461 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      002549 25 44                    1 	.word LINK 
                           00254B     2 	LINK=.
      00254B                          3 ODR:
      00254B 43                       4 	.byte 3+F_IFUNC 	
      00254C 4F 44 52                 5 	.ascii "ODR"
      00254F 00 62                    6 	.word ODR_IDX 
      002551                       6462 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      002551 25 4B                    1 	.word LINK 
                           002553     2 	LINK=.
      002553                          3 NOT:
      002553 43                       4 	.byte 3+F_IFUNC 	
      002554 4E 4F 54                 5 	.ascii "NOT"
      002557 00 60                    6 	.word NOT_IDX 
      002559                       6463 	_dict_entry,3,NEW,NEW_IDX;new
      002559 25 53                    1 	.word LINK 
                           00255B     2 	LINK=.
      00255B                          3 NEW:
      00255B 03                       4 	.byte 3 	
      00255C 4E 45 57                 5 	.ascii "NEW"
      00255F 00 5E                    6 	.word NEW_IDX 
      002561                       6464 	_dict_entry,4,NEXT,NEXT_IDX;next 
      002561 25 5B                    1 	.word LINK 
                           002563     2 	LINK=.
      002563                          3 NEXT:
      002563 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002564 4E 45 58 54              5 	.ascii "NEXT"
      002568 00 5C                    6 	.word NEXT_IDX 
      00256A                       6465 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      00256A 25 63                    1 	.word LINK 
                           00256C     2 	LINK=.
      00256C                          3 MULDIV:
      00256C 46                       4 	.byte 6+F_IFUNC 	
      00256D 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      002573 00 5A                    6 	.word MULDIV_IDX 
      002575                       6466 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      002575 25 6C                    1 	.word LINK 
                           002577     2 	LINK=.
      002577                          3 LSHIFT:
      002577 46                       4 	.byte 6+F_IFUNC 	
      002578 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00257E 00 58                    6 	.word LSHIFT_IDX 
      002580                       6467 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      002580 25 77                    1 	.word LINK 
                           002582     2 	LINK=.
      002582                          3 LOG:
      002582 43                       4 	.byte 3+F_IFUNC 	
      002583 4C 4F 47                 5 	.ascii "LOG"
      002586 00 56                    6 	.word LOG_IDX 
      002588                       6468 	_dict_entry,4,LOAD,LOAD_IDX;load 
      002588 25 82                    1 	.word LINK 
                           00258A     2 	LINK=.
      00258A                          3 LOAD:
      00258A 04                       4 	.byte 4 	
      00258B 4C 4F 41 44              5 	.ascii "LOAD"
      00258F 00 54                    6 	.word LOAD_IDX 
      002591                       6469 	_dict_entry 4,LIST,LIST_IDX;list
      002591 25 8A                    1 	.word LINK 
                           002593     2 	LINK=.
      002593                          3 LIST:
      002593 04                       4 	.byte 4 	
      002594 4C 49 53 54              5 	.ascii "LIST"
      002598 00 52                    6 	.word LIST_IDX 
      00259A                       6470 	_dict_entry 3,LET,LET_IDX;let 
      00259A 25 93                    1 	.word LINK 
                           00259C     2 	LINK=.
      00259C                          3 LET:
      00259C 03                       4 	.byte 3 	
      00259D 4C 45 54                 5 	.ascii "LET"
      0025A0 00 50                    6 	.word LET_IDX 
      0025A2                       6471 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      0025A2 25 9C                    1 	.word LINK 
                           0025A4     2 	LINK=.
      0025A4                          3 KEY:
      0025A4 43                       4 	.byte 3+F_IFUNC 	
      0025A5 4B 45 59                 5 	.ascii "KEY"
      0025A8 00 4E                    6 	.word KEY_IDX 
      0025AA                       6472 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      0025AA 25 A4                    1 	.word LINK 
                           0025AC     2 	LINK=.
      0025AC                          3 IWDGREF:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0025AC 07                       4 	.byte 7 	
      0025AD 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0025B4 00 4C                    6 	.word IWDGREF_IDX 
      0025B6                       6473 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      0025B6 25 AC                    1 	.word LINK 
                           0025B8     2 	LINK=.
      0025B8                          3 IWDGEN:
      0025B8 06                       4 	.byte 6 	
      0025B9 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0025BF 00 4A                    6 	.word IWDGEN_IDX 
      0025C1                       6474 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      0025C1 25 B8                    1 	.word LINK 
                           0025C3     2 	LINK=.
      0025C3                          3 INVERT:
      0025C3 46                       4 	.byte 6+F_IFUNC 	
      0025C4 49 4E 56 45 52 54        5 	.ascii "INVERT"
      0025CA 00 48                    6 	.word INVERT_IDX 
      0025CC                       6475 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      0025CC 25 C3                    1 	.word LINK 
                           0025CE     2 	LINK=.
      0025CE                          3 INPUT:
      0025CE 05                       4 	.byte 5 	
      0025CF 49 4E 50 55 54           5 	.ascii "INPUT"
      0025D4 00 46                    6 	.word INPUT_IDX 
      0025D6                       6476 	_dict_entry,2,IF,IF_IDX;if 
      0025D6 25 CE                    1 	.word LINK 
                           0025D8     2 	LINK=.
      0025D8                          3 IF:
      0025D8 02                       4 	.byte 2 	
      0025D9 49 46                    5 	.ascii "IF"
      0025DB 00 44                    6 	.word IF_IDX 
      0025DD                       6477 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      0025DD 25 D8                    1 	.word LINK 
                           0025DF     2 	LINK=.
      0025DF                          3 IDR:
      0025DF 43                       4 	.byte 3+F_IFUNC 	
      0025E0 49 44 52                 5 	.ascii "IDR"
      0025E3 00 42                    6 	.word IDR_IDX 
      0025E5                       6478 	_dict_entry,3,HEX,HEX_IDX;hex_base
      0025E5 25 DF                    1 	.word LINK 
                           0025E7     2 	LINK=.
      0025E7                          3 HEX:
      0025E7 03                       4 	.byte 3 	
      0025E8 48 45 58                 5 	.ascii "HEX"
      0025EB 00 40                    6 	.word HEX_IDX 
      0025ED                       6479 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      0025ED 25 E7                    1 	.word LINK 
                           0025EF     2 	LINK=.
      0025EF                          3 GPIO:
      0025EF 44                       4 	.byte 4+F_IFUNC 	
      0025F0 47 50 49 4F              5 	.ascii "GPIO"
      0025F4 00 3E                    6 	.word GPIO_IDX 
      0025F6                       6480 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0025F6 25 EF                    1 	.word LINK 
                           0025F8     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0025F8                          3 GOTO:
      0025F8 04                       4 	.byte 4 	
      0025F9 47 4F 54 4F              5 	.ascii "GOTO"
      0025FD 00 3C                    6 	.word GOTO_IDX 
      0025FF                       6481 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0025FF 25 F8                    1 	.word LINK 
                           002601     2 	LINK=.
      002601                          3 GOSUB:
      002601 05                       4 	.byte 5 	
      002602 47 4F 53 55 42           5 	.ascii "GOSUB"
      002607 00 3A                    6 	.word GOSUB_IDX 
      002609                       6482 	_dict_entry,6,FORGET,FORGET_IDX;forget 
      002609 26 01                    1 	.word LINK 
                           00260B     2 	LINK=.
      00260B                          3 FORGET:
      00260B 06                       4 	.byte 6 	
      00260C 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002612 00 38                    6 	.word FORGET_IDX 
      002614                       6483 	_dict_entry,3,FOR,FOR_IDX;for 
      002614 26 0B                    1 	.word LINK 
                           002616     2 	LINK=.
      002616                          3 FOR:
      002616 03                       4 	.byte 3 	
      002617 46 4F 52                 5 	.ascii "FOR"
      00261A 00 36                    6 	.word FOR_IDX 
      00261C                       6484 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      00261C 26 16                    1 	.word LINK 
                           00261E     2 	LINK=.
      00261E                          3 FCPU:
      00261E 04                       4 	.byte 4 	
      00261F 46 43 50 55              5 	.ascii "FCPU"
      002623 00 34                    6 	.word FCPU_IDX 
      002625                       6485 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      002625 26 1E                    1 	.word LINK 
                           002627     2 	LINK=.
      002627                          3 EEPROM:
      002627 46                       4 	.byte 6+F_IFUNC 	
      002628 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00262E 00 32                    6 	.word EEPROM_IDX 
      002630                       6486 	_dict_entry,3,END,END_IDX;cmd_end  
      002630 26 27                    1 	.word LINK 
                           002632     2 	LINK=.
      002632                          3 END:
      002632 03                       4 	.byte 3 	
      002633 45 4E 44                 5 	.ascii "END"
      002636 00 30                    6 	.word END_IDX 
      002638                       6487 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      002638 26 32                    1 	.word LINK 
                           00263A     2 	LINK=.
      00263A                          3 DWRITE:
      00263A 06                       4 	.byte 6+F_CMD 	
      00263B 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002641 00 2E                    6 	.word DWRITE_IDX 
      002643                       6488 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      002643 26 3A                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                           002645     2 	LINK=.
      002645                          3 DREAD:
      002645 45                       4 	.byte 5+F_IFUNC 	
      002646 44 52 45 41 44           5 	.ascii "DREAD"
      00264B 00 2C                    6 	.word DREAD_IDX 
      00264D                       6489 	_dict_entry,2,DO,DO_IDX;do_loop
      00264D 26 45                    1 	.word LINK 
                           00264F     2 	LINK=.
      00264F                          3 DO:
      00264F 02                       4 	.byte 2 	
      002650 44 4F                    5 	.ascii "DO"
      002652 00 2A                    6 	.word DO_IDX 
      002654                       6490 	_dict_entry,3,DIR,DIR_IDX;directory 
      002654 26 4F                    1 	.word LINK 
                           002656     2 	LINK=.
      002656                          3 DIR:
      002656 03                       4 	.byte 3 	
      002657 44 49 52                 5 	.ascii "DIR"
      00265A 00 28                    6 	.word DIR_IDX 
      00265C                       6491 	_dict_entry,3,DEC,DEC_IDX;dec_base
      00265C 26 56                    1 	.word LINK 
                           00265E     2 	LINK=.
      00265E                          3 DEC:
      00265E 03                       4 	.byte 3 	
      00265F 44 45 43                 5 	.ascii "DEC"
      002662 00 26                    6 	.word DEC_IDX 
      002664                       6492 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      002664 26 5E                    1 	.word LINK 
                           002666     2 	LINK=.
      002666                          3 DDR:
      002666 43                       4 	.byte 3+F_IFUNC 	
      002667 44 44 52                 5 	.ascii "DDR"
      00266A 00 24                    6 	.word DDR_IDX 
      00266C                       6493 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      00266C 26 66                    1 	.word LINK 
                           00266E     2 	LINK=.
      00266E                          3 DATALN:
      00266E 06                       4 	.byte 6 	
      00266F 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002675 00 22                    6 	.word DATALN_IDX 
      002677                       6494 	_dict_entry,4,DATA,DATA_IDX;data  
      002677 26 6E                    1 	.word LINK 
                           002679     2 	LINK=.
      002679                          3 DATA:
      002679 04                       4 	.byte 4 	
      00267A 44 41 54 41              5 	.ascii "DATA"
      00267E 00 20                    6 	.word DATA_IDX 
      002680                       6495 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      002680 26 79                    1 	.word LINK 
                           002682     2 	LINK=.
      002682                          3 CRL:
      002682 43                       4 	.byte 3+F_IFUNC 	
      002683 43 52 4C                 5 	.ascii "CRL"
      002686 00 1E                    6 	.word CRL_IDX 
      002688                       6496 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002688 26 82                    1 	.word LINK 
                           00268A     2 	LINK=.
      00268A                          3 CRH:
      00268A 43                       4 	.byte 3+F_IFUNC 	
      00268B 43 52 48                 5 	.ascii "CRH"
      00268E 00 1C                    6 	.word CRH_IDX 
      002690                       6497 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      002690 26 8A                    1 	.word LINK 
                           002692     2 	LINK=.
      002692                          3 CHAR:
      002692 84                       4 	.byte 4+F_CFUNC 	
      002693 43 48 41 52              5 	.ascii "CHAR"
      002697 00 1A                    6 	.word CHAR_IDX 
      002699                       6498 	_dict_entry,3,BYE,BYE_IDX;bye 
      002699 26 92                    1 	.word LINK 
                           00269B     2 	LINK=.
      00269B                          3 BYE:
      00269B 03                       4 	.byte 3 	
      00269C 42 59 45                 5 	.ascii "BYE"
      00269F 00 18                    6 	.word BYE_IDX 
      0026A1                       6499 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      0026A1 26 9B                    1 	.word LINK 
                           0026A3     2 	LINK=.
      0026A3                          3 BTOGL:
      0026A3 05                       4 	.byte 5 	
      0026A4 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0026A9 00 16                    6 	.word BTOGL_IDX 
      0026AB                       6500 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      0026AB 26 A3                    1 	.word LINK 
                           0026AD     2 	LINK=.
      0026AD                          3 BTEST:
      0026AD 45                       4 	.byte 5+F_IFUNC 	
      0026AE 42 54 45 53 54           5 	.ascii "BTEST"
      0026B3 00 14                    6 	.word BTEST_IDX 
      0026B5                       6501 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0026B5 26 AD                    1 	.word LINK 
                           0026B7     2 	LINK=.
      0026B7                          3 BSET:
      0026B7 04                       4 	.byte 4 	
      0026B8 42 53 45 54              5 	.ascii "BSET"
      0026BC 00 12                    6 	.word BSET_IDX 
      0026BE                       6502 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      0026BE 26 B7                    1 	.word LINK 
                           0026C0     2 	LINK=.
      0026C0                          3 BRES:
      0026C0 04                       4 	.byte 4 	
      0026C1 42 52 45 53              5 	.ascii "BRES"
      0026C5 00 10                    6 	.word BRES_IDX 
      0026C7                       6503 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0026C7 26 C0                    1 	.word LINK 
                           0026C9     2 	LINK=.
      0026C9                          3 BIT:
      0026C9 43                       4 	.byte 3+F_IFUNC 	
      0026CA 42 49 54                 5 	.ascii "BIT"
      0026CD 00 0E                    6 	.word BIT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0026CF                       6504 	_dict_entry,3,AWU,AWU_IDX;awu 
      0026CF 26 C9                    1 	.word LINK 
                           0026D1     2 	LINK=.
      0026D1                          3 AWU:
      0026D1 03                       4 	.byte 3 	
      0026D2 41 57 55                 5 	.ascii "AWU"
      0026D5 00 0C                    6 	.word AWU_IDX 
      0026D7                       6505 	_dict_entry,7,AUTORUN,AUTORUN_IDX;autorun
      0026D7 26 D1                    1 	.word LINK 
                           0026D9     2 	LINK=.
      0026D9                          3 AUTORUN:
      0026D9 07                       4 	.byte 7 	
      0026DA 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      0026E1 00 0A                    6 	.word AUTORUN_IDX 
      0026E3                       6506 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0026E3 26 D9                    1 	.word LINK 
                           0026E5     2 	LINK=.
      0026E5                          3 ASC:
      0026E5 43                       4 	.byte 3+F_IFUNC 	
      0026E6 41 53 43                 5 	.ascii "ASC"
      0026E9 00 08                    6 	.word ASC_IDX 
      0026EB                       6507 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0026EB 26 E5                    1 	.word LINK 
                           0026ED     2 	LINK=.
      0026ED                          3 AND:
      0026ED 43                       4 	.byte 3+F_IFUNC 	
      0026EE 41 4E 44                 5 	.ascii "AND"
      0026F1 00 06                    6 	.word AND_IDX 
      0026F3                       6508 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0026F3 26 ED                    1 	.word LINK 
                           0026F5     2 	LINK=.
      0026F5                          3 ADCREAD:
      0026F5 47                       4 	.byte 7+F_IFUNC 	
      0026F6 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0026FD 00 04                    6 	.word ADCREAD_IDX 
      0026FF                       6509 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      0026FF 26 F5                    1 	.word LINK 
                           002701     2 	LINK=.
      002701                          3 ADCON:
      002701 05                       4 	.byte 5 	
      002702 41 44 43 4F 4E           5 	.ascii "ADCON"
      002707 00 02                    6 	.word ADCON_IDX 
      002709                       6510 kword_dict:
      002709                       6511 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      002709 27 01                    1 	.word LINK 
                           00270B     2 	LINK=.
      00270B                          3 ABS:
      00270B 43                       4 	.byte 3+F_IFUNC 	
      00270C 41 42 53                 5 	.ascii "ABS"
      00270F 00 00                    6 	.word ABS_IDX 
                                   6512 
                                   6513 ;comands and fonctions address table 	
      002711                       6514 code_addr:
      002711 1E A3 18 D2 19 0E 1E  6515 	.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask ; 0..7
             B7 1D 49 1D DB 1E 54
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



             21 05
      002721 16 70 16 60 16 91 16  6516 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             81 1D D2 1D 37 21 BF
      00272F 21 B9 21 D7 21 DD 21  6517 	.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write ;16..23 
             B3 12 40 1C 7E 21 2E
             19 42 19 72
      002741 18 7E 21 D1 1F 31 16  6518 	.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio ; 24..31 
             EC 1C 17 17 E7 17 CC
             1D 85
      002751 12 3B 21 AD 16 D8 15  6519 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             C9 21 1F 20 AF 20 E5
             1D 70
      002761 12 71 12 9C 1B E7 20  6520 	.word let,list,load,log2,lshift,muldiv,next,new ; 40..47
             EA 1E FF 0F AA 17 6C
             19 F9
      002771 20 A2 21 A7 1E CF 23  6521 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             6A 1E 41 1F 3D 16 C7
             21 CB
      002781 16 B8 21 C5 15 43 21  6522 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             71 21 77 21 7D 21 83
             21 89
      002791 21 8F 21 95 21 9B 21  6523 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             A1 1D 78 22 59 05 DA
             16 35
      0027A1 22 0A 18 07 1F B9 1F  6524 	.word restore,return, random,rshift,run,save,show,size ; 72..79
             18 18 25 1A EA 11 FA
             12 45
      0027B1 1E 36 23 4B 22 B3 23  6525 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             53 23 2B 17 45 19 AD
             1E 9D
      0027C1 20 86 20 95 17 15 18  6526 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             8E 12 4F 1D AF 21 43
             1D B5
      0027D1 16 3B 20 20 1D 00 1E  6527 	.word wait,words,write,bit_xor ; 96..103 
             E7
      0027D9 00 00                 6528 	.word 0 
                                   6529 
      002800                       6530 	.bndry 128 ; align on FLASH block.
                                   6531 ; free space for user application  
      002800                       6532 user_space:
                                   6533 ; USR() function test
      002800 89               [ 2] 6534 	pushw x 
      002801 72 1A 50 0A      [ 1] 6535 	bset PC_ODR,#5 
      002805 85               [ 2] 6536 	popw x 
      002806 CD 1E 4B         [ 4] 6537 	call pause02 
      002809 72 1B 50 0A      [ 1] 6538 	bres PC_ODR,#5 
      00280D 81               [ 4] 6539 	ret
                                   6540 
                                   6541 	.area FLASH_DRIVE (ABS)
      010000                       6542 	.org 0x10000
      010000                       6543 fdrive:
                                   6544 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00270B R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      002701 R
    ADCON_ID=  000002     |   5 ADCREAD    0026F5 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        0026ED R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |   5 ASC        0026E5 R   |     ASC_IDX =  000008 
    ATTRIB  =  000002     |   5 AUTORUN    0026D9 R   |     AUTORUN_=  00000A 
    AUTORUN_=  004000     |   5 AWU        0026D1 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000C     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   5 BIT        0026C9 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000E 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   5 BRES       0026C0 R   |     BRES_IDX=  000010 
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       0026B7 R
    BSET_IDX=  000012     |     BSIZE   =  000001     |   5 BTEST      0026AD R
    BTEST_ID=  000014     |   5 BTOGL      0026A3 R   |     BTOGL_ID=  000016 
    BTW     =  000001     |   5 BYE        00269B R   |     BYE_IDX =  000018 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       002692 R   |     CHAR_IDX=  00001A 
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMDX    =  000001     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        00268A R   |     CRH_IDX =  00001C     |   5 CRL        002682 R
    CRL_IDX =  00001E     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       002679 R   |   5 DATALN     00266E R   |     DATALN_I=  000022 
    DATA_IDX=  000020     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |     DBL     =  000003 
    DBLDIVDN=  000006     |     DBLHI   =  000001     |     DBLLO   =  000003 
    DBL_SIZE=  000004     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   5 DDR        002666 R
    DDR_IDX =  000024     |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEBUG_PR=  000001     |   5 DEC        00265E R
    DEC_IDX =  000026     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        002656 R   |     DIR_IDX =  000028 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DO         00264F R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  00002A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

  5 DREAD      002645 R   |     DREAD_ID=  00002C     |   5 DWRITE     00263A R
    DWRITE_I=  00002E     |   5 EEPROM     002627 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  000032     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        002632 R   |     END_IDX =  000030 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       00261E R   |     FCPU_IDX=  000034     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        002616 R   |   5 FORGET     00260B R   |     FORGET_I=  000038 
    FOR_IDX =  000036     |     FRUN    =  000000     |     FS      =  00001C 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      002601 R
    GOSUB_ID=  00003A     |   5 GOTO       0025F8 R   |     GOTO_IDX=  00003C 
  5 GPIO       0025EF R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003E     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   5 HEX        0025E7 R   |     HEX_IDX =  000040 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        0025DF R   |     IDR_IDX =  000042 
  5 IF         0025D8 R   |     IF_IDX  =  000044     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      0025CE R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000046     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  5 INVERT     0025C3 R   |     INVERT_I=  000048     |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     0025B8 R
    IWDGEN_I=  00004A     |   5 IWDGREF    0025AC R   |     IWDGREF_=  00004C 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        0025A4 R   |     KEY_IDX =  00004E     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   5 LET        00259C R
    LET_IDX =  000050     |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   5 LINK    =  00270B R   |   5 LIST       002593 R
    LIST_IDX=  000052     |     LL      =  000001     |     LLEN    =  000002 
    LN_PTR  =  000005     |   5 LOAD       00258A R   |     LOAD_IDX=  000054 
  5 LOG        002582 R   |     LOG_IDX =  000056     |   5 LSHIFT     002577 R
    LSHIFT_I=  000058     |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  5 MULDIV     00256C R   |     MULDIV_I=  00005A     |     MULOP   =  000003 
    N1      =  000001     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        00255B R   |     NEW_FREE=  000001     |     NEW_IDX =  00005E 
  5 NEXT       002563 R   |     NEXT_IDX=  00005C     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    NOPTBL  =  00487F     |   5 NOT        002553 R   |     NOT_IDX =  000060 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000000 R   |   5 ODR        00254B R   |     ODR_IDX =  000062 
    ONOFF   =  000003     |     OP      =  000003     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         002544 R   |     OR_IDX  =  000064     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |   5 PAD        00253C R   |     PAD_IDX =  000066 
    PAD_SIZE=  000080     |   5 PAUSE      002532 R   |     PAUSE_ID=  000068 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       00251F R   |     PEEK_IDX=  00006C 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   5 PINP       002516 R
    PINP_IDX=  00006E     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      002528 R
    PMODE_ID=  00006A     |   5 POKE       00250D R   |     POKE_IDX=  000070 
    PORT    =  000003     |   5 POUT       002504 R   |     POUT_IDX=  000072 
    PREV    =  000001     |   5 PRINT      0024FA R   |   5 PRTA       0024F1 R
    PRTA_IDX=  000076     |   5 PRTB       0024E8 R   |     PRTB_IDX=  000078 
  5 PRTC       0024DF R   |     PRTC_IDX=  00007A     |   5 PRTD       0024D6 R
    PRTD_IDX=  00007C     |   5 PRTE       0024CD R   |     PRTE_IDX=  00007E 
  5 PRTF       0024C4 R   |     PRTF_IDX=  000080     |   5 PRTG       0024BB R
    PRTG_IDX=  000082     |   5 PRTH       0024B2 R   |     PRTH_IDX=  000084 
  5 PRTI       0024A9 R   |     PRTI_IDX=  000086     |     PRT_IDX =  000074 
    PSTR    =  000003     |   5 QKEY       0024A0 R   |     QKEY_IDX=  000088 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
    RBT_IDX =  00008C     |   5 READ       002497 R   |     READ_IDX=  00008A 
  5 REBOOT     00248C R   |     REG     =  000001     |     REGA    =  000001 
    REGX    =  000003     |     REGY    =  000005     |     RELOP   =  000003 
  5 REMARK     002481 R   |     REM_IDX =  00008E     |   5 RESTORE    002475 R
    REST_IDX=  000090     |     RETL1   =  000001     |   5 RETURN     00246A R
    RET_ADDR=  000003     |     RET_IDX =  000092     |     RET_INW =  000005 
  5 RND        002462 R   |     RND_IDX =  000094     |     ROP     =  004800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    RS      =  00001E     |   5 RSHIFT     002457 R   |     RSHIFT_I=  000096 
    RST_SR  =  0050B3     |   5 RUN        00244F R   |     RUN_IDX =  000098 
    RX_QUEUE=  000008     |   5 SAVE       002446 R   |     SAVEB   =  000002 
    SAVE_IDX=  00009A     |     SDIVSR  =  000005     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       00243D R
    SHOW_IDX=  00009C     |     SI      =  00000F     |     SIGN    =  000001 
  5 SIZE       002434 R   |     SIZE_IDX=  00009E     |     SKIP    =  000005 
  5 SLEEP      00242A R   |     SLEEP_ID=  0000A0     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   5 SPIEN      002416 R
    SPIEN_ID=  0000A4     |   5 SPIRD      002420 R   |     SPIRD_ID=  0000A2 
  5 SPISEL     00240B R   |     SPISEL_I=  0000A6     |   5 SPIWR      002401 R
    SPIWR_ID=  0000A8     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       0023F8 R   |     STEP_IDX=  0000AA 
  5 STOP       0023EF R   |     STOP_IDX=  0000AC     |     STR     =  000003 
    STX     =  000002     |     SUB     =  00001A     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      0023E5 R
    TICKS_ID=  0000AE     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   5 TIMEOUT    0023CF R
  5 TIMER      0023DB R   |     TIMER_ID=  0000B0     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  000001 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_VAR  =  000085     |     TMROUT_I=  0000B2 
  5 TO         0023C8 R   |   5 TONE       0023BF R   |     TONE_IDX=  0000B6 
    TO_IDX  =  0000B4     |   5 Timer4Up   00004F R   |     U1      =  000001 
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     0023B4 R   |     UBOUND_I=  0000B8     |   5 UBTN_Han   000092 R
  5 UFLASH     0023A9 R   |     UFLASH_I=  0000BA     |   5 UNTIL      00239F R
    UNTIL_ID=  0000BC     |     US      =  00001F     |   5 USER_ABO   00009A R
  5 USR        002397 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000BE     |   5 Uart1RxH   00000F R
  5 UserButt   000065 R   |     VAR_ADDR=  000006     |     VSIZ    =  000002 
    VSIZE   =  000006     |     VT      =  00000B     |   5 WAIT       00238E R
    WAIT_IDX=  0000C0     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      002384 R   |     WORDS_ID=  0000C2     |   5 WRITE      00237A R
    WRITE_ID=  0000C4     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        002372 R   |     XOR_IDX =  0000C6 
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000007 
  5 abs        001EA3 R   |   1 acc16      00000C GR  |   1 acc24      00000B GR
  1 acc8       00000D GR  |   5 add_char   001503 R   |   5 add_spac   00132D R
  5 analog_r   00190E R   |   5 arduino_   001F99 R   |   5 arg_list   001057 R
  1 array_si   000021 R   |   5 ascii      001D49 R   |   5 at_tst     000CBB R
  5 atoi24     000DCC GR  |   5 atoi_exi   000E32 R   |   5 autorun    001DDB R
  5 autorun_   0006D4 R   |   5 awu        001E54 R   |   5 awu02      001E5E R
  5 bad_port   001DAA R   |   1 base       00000A R   |   1 basicptr   000004 GR
  5 beep       00189B R   |   5 beep_1kh   001885 GR  |   5 bin_exit   000B99 R
  5 bit_and    001EB7 R   |   5 bit_or     001ECF R   |   5 bit_rese   001670 R
  5 bit_set    001660 R   |   5 bit_test   001691 R   |   5 bit_togg   001681 R
  5 bit_xor    001EE7 R   |   5 bitmask    002105 R   |   5 bkslsh_t   000C68 R
  5 block_er   0001BB R   |   5 break_po   0019DB R   |   5 bye        001DD2 R
  5 cancel_a   00069C R   |   5 char       001D37 R   |   5 clear_ba   0006E9 R
  5 clear_va   000563 R   |   5 clock_in   0000B5 R   |   5 cmd_end    00187E R
  5 cmd_line   000909 R   |   5 cmd_name   000FC6 R   |   5 cmp_name   001A7C R
  5 code_add   002711 R   |   5 cold_sta   0005DA R   |   5 colon_ts   000C8F R
  5 comma_ts   000C9A R   |   5 comp_msg   00085E R   |   5 compile    0004F0 R
  5 const_cr   0021B9 R   |   5 const_cr   0021BF R   |   5 const_dd   0021B3 R
  5 const_ee   0021D1 R   |   5 const_id   0021AD R   |   5 const_in   0021CB R
  5 const_od   0021A7 R   |   5 const_ou   0021C5 R   |   5 const_po   002171 R
  5 const_po   002177 R   |   5 const_po   00217D R   |   5 const_po   002183 R
  5 const_po   002189 R   |   5 const_po   00218F R   |   5 const_po   002195 R
  5 const_po   00219B R   |   5 const_po   0021A1 R   |   5 convert_   000B10 R
  5 copy_com   000CF0 R   |   1 count      000003 GR  |   5 cp_loop    001006 R
  5 cpy_cmd_   001318 R   |   5 cpy_quot   001351 R   |   5 create_g   000453 R
  5 cs_high    002365 R   |   5 cstk_pro   001214 R   |   5 dash_tst   000CB0 R
  5 data       0021D7 R   |   1 data_len   000009 R   |   5 data_lin   0021DD R
  1 data_ofs   000008 R   |   1 data_ptr   000006 R   |   5 data_sea   00221D R
  5 dbl_sign   000F2E R   |   5 dec_base   001240 R   |   5 decomp_l   001402 R
  5 decompil   0013BB GR  |   5 del_line   000426 R   |   5 digital_   001942 R
  5 digital_   001972 R   |   5 dir_loop   001C8A R   |   5 director   001C7E R
  5 disk_fre   001A69 R   |   5 div32_16   000F38 R   |   5 divide     000F8F R
  5 divu24_8   000A53 R   |   5 dneg       000F23 R   |   5 do_loop    00212E R
  5 do_progr   0001AE R   |   5 drive_fr   001CF3 R   |   5 enable_i   0020AF R
  5 eql_tst    000D45 R   |   5 equal      001516 R   |   5 erase_fl   0001DA R
  5 err_bad_   0007C9 R   |   5 err_buf_   00083F R   |   5 err_cmd_   00078D R
  5 err_div0   000752 R   |   5 err_dupl   0007A7 R   |   5 err_math   000739 R
  5 err_mem_   00071E R   |   5 err_msg    0006FE R   |   5 err_no_a   0007D5 R
  5 err_no_d   000808 R   |   5 err_no_f   00082C R   |   5 err_no_l   000761 R
  5 err_no_p   000818 R   |   5 err_not_   0007B8 R   |   5 err_run_   000777 R
  5 err_synt   00072B R   |   5 escaped    000B25 R   |   5 expect     001045 R
  5 expr_exi   00119F R   |   5 expressi   001156 R   |   5 factor     0010A7 R
  1 farptr     000016 R   |   5 fcpu       001F31 R   |   7 fdrive     010000 R
  1 ffree      000019 R   |   5 file_cou   001CEB R   |   5 first_li   0012C5 R
  1 flags      000023 R   |   5 for        0016EC R   |   5 forget     001C17 R
  1 free_ram   000063 R   |   5 func_arg   001052 R   |   5 func_not   0020A2 R
  5 ge         001518 R   |   5 get_arra   001082 R   |   5 get_cmd_   00139A R
  5 get_targ   0017B6 R   |   5 get_tick   001E9D R   |   5 get_toke   000C01 R
  5 getc       0002C9 GR  |   5 gosub      0017E7 R   |   5 goto       0017CC R
  5 gpio       001D85 R   |   5 gt         001514 R   |   5 gt_tst     000D50 R
  5 hex_base   00123B R   |   5 hex_dump   000359 R   |   5 if         0016D8 R
  1 in         000001 R   |   1 in.saved   000002 R   |   1 in.w       000000 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

  5 incr_far   001A29 R   |   5 input_ex   001632 R   |   5 input_lo   0015CB R
  5 input_va   0015C9 R   |   5 insert_l   00047F R   |   5 insert_l   0004ED R
  5 interp_l   00094A R   |   5 interpre   000925 R   |   5 invert     00211F R
  5 is_alnum   00058B R   |   5 is_alpha   000571 R   |   5 is_digit   000582 R
  5 itoa       0009EE R   |   5 itoa_loo   000A0D R   |   5 jp_to_ta   0017DA R
  5 key        001D70 R   |   5 kw_loop    000BB5 R   |   5 kword_di   002709 R
  5 kword_en   002370 R   |   5 le         00151D R   |   5 leading_   0020F5 R
  5 let        001271 R   |   5 let_arra   00127F R   |   5 let_var    001282 R
  5 lines_sk   0012C8 R   |   5 list       00129C R   |   5 list_exi   00130A R
  5 list_loo   0012E8 R   |   5 load       001BE7 R   |   5 load_aut   0006AB R
  5 load_fil   001BB6 R   |   5 log2       0020EA R   |   5 logical_   002098 R
  5 long_div   000F0B R   |   5 loop_bac   001799 R   |   1 loop_dep   000020 R
  5 loop_don   0017AE R   |   5 lshift     001EFF R   |   5 lt         00151B R
  5 lt_tst     000D79 R   |   5 modulo     000FA5 R   |   5 move       0003C0 GR
  5 move_dow   0003DE R   |   5 move_era   000140 R   |   5 move_exi   0003FF R
  5 move_loo   0003E3 R   |   5 move_prg   000174 R   |   5 move_up    0003D0 R
  5 mul_char   001505 R   |   5 muldiv     000FAA R   |   5 multiply   000ED6 R
  5 mulu24_8   000A7B R   |   5 nbr_tst    000C34 R   |   5 ne         001520 R
  5 neg_acc2   000AB5 R   |   5 new        0019F9 R   |   5 next       00176C R
  5 next_lin   00092D R   |   5 next_tok   000971 R   |   5 no_match   001018 R
  5 other      000DA2 R   |   3 pad        0016E0 R   |   5 pad_ref    00236A R
  5 parse_bi   000B77 R   |   5 parse_in   000B2D R   |   5 parse_ke   000BB4 R
  5 parse_qu   000AD8 R   |   5 pause      001E41 R   |   5 pause02    001E4B R
  5 peek       0016C7 R   |   5 pin_mode   001F3D R   |   5 plus_tst   000D19 R
  5 poke       0016B8 R   |   5 power_ad   0018D2 R   |   5 prcnt_ts   000D3A R
  5 print      001543 R   |   5 print_ex   00159D R   |   5 print_in   0009D2 R
  5 printxy    000E49 R   |   5 program_   000154 R   |   5 program_   000174 R
  5 prt_basi   001523 R   |   5 prt_loop   001547 R   |   5 prt_tok    0002EB R
  5 prti24     0009E2 R   |   1 ptr16      000017 R   |   1 ptr8       000018 R
  5 putc       0002C0 GR  |     puts       ****** GX  |   5 qkey       001D78 GR
  5 qmark_ts   000CC6 R   |   5 random     001FB9 R   |   5 read       002259 R
  5 read01     00225B R   |     readln     ****** GX  |   5 refresh_   0020E5 R
  5 rel_exit   0011F7 R   |   5 relation   0011A2 R   |   5 relop_st   001508 R
  5 remark     001635 R   |   5 reset_co   001545 R   |   5 rest_con   0015B9 R
  5 restore    00220A R   |   5 return     001807 R   |   5 right_al   00133F R
  5 row_alig   001A0E R   |   5 row_eras   000119 R   |   5 row_eras   000140 R
  5 row_loop   00033C R   |   5 rparnt_t   000C84 R   |   5 rshift     001F18 R
  5 rt_msg     00084C R   |   5 run        001825 R   |   5 run_it     001857 R
  1 rx_head    00002D R   |   1 rx_queue   000025 R   |   1 rx_tail    00002E R
  5 save       001AEA R   |   5 save_con   0015A9 R   |   5 search_d   000FF8 R
  5 search_e   001042 R   |   5 search_f   001A9D R   |   5 search_l   000402 GR
  5 search_l   00040A R   |   5 search_n   000FFC R   |   1 seedx      000012 R
  1 seedy      000014 R   |   5 seek_fdr   001A37 R   |   5 select_p   001F89 R
  5 set_time   002086 R   |   5 sharp_ts   000CA5 R   |   5 show       0011FA R
  5 show_row   00032A R   |   5 single_c   0014FE R   |   5 size       001245 R
  5 skip       000E36 R   |   5 slash_ts   000D2F R   |   5 sleep      001E36 R
  5 software   000594 R   |     spaces     ****** GX  |   5 spi_clea   0022FE R
  5 spi_disa   0022E6 R   |   5 spi_enab   0022B3 R   |   5 spi_rcv_   002320 R
  5 spi_read   00234B R   |   5 spi_sele   002353 R   |   5 spi_send   00230A R
  5 spi_writ   00232B R   |   3 stack_fu   001760 R   |   3 stack_un   001800 R
  5 star_tst   000D24 R   |   5 step       001745 R   |   5 stop       0019AD R
  5 store_lo   001759 R   |   5 str_matc   001025 R   |   5 str_tst    000C24 R
  5 strcmp     0003A1 R   |   5 strcpy     0003B2 R   |   5 strlen     000396 GR
  5 syntax_e   00087F R   |   1 tab_widt   000024 R   |   5 tb_error   000881 R
  5 term       001104 R   |   5 term01     00110C R   |   5 term_exi   001153 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

  3 tib        001690 GR  |   5 tick_tst   000CDE R   |   1 ticks      00000E R
  5 timeout    002095 R   |   1 timer      000010 R   |   5 timer2_i   0000CB R
  5 timer4_i   0000D8 R   |   5 tk_id      00086F R   |   5 to         001715 R
  5 to_eepro   000197 R   |   5 to_flash   0001AB R   |   5 to_upper   000DC0 GR
  5 token_ch   000DB9 R   |   5 token_ex   000DBD R   |   5 token_ms   000322 R
  5 tone       00188E R   |   5 try_next   002249 R   |   1 txtbgn     00001C R
  1 txtend     00001E R   |   5 uart1_in   00027D R   |   5 uart1_se   00028D R
  5 ubound     00124F R   |   5 udiv32_1   000EF9 R   |   5 uflash     001DAF R
  5 umstar     000E9C R   |   5 unlock_e   0000ED R   |   5 unlock_f   000103 R
  5 until      002143 R   |   5 user_int   000078 R   |   5 user_spa   002800 R
  5 usr        001DB5 R   |   5 var_name   001392 R   |   1 vars       00002F R
  5 wait       00163B R   |   5 warm_ini   00067E R   |   5 warm_sta   000906 R
  5 words      002020 R   |   5 words_co   002070 R   |   5 write      001D00 R
  5 write_bl   00025A R   |   5 write_by   0001E5 R   |   5 write_ee   000221 R
  5 write_ex   000255 R   |   5 write_fl   00020B R   |   5 write_ro   000188 R
  5 zero_pad   001A03 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     63   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   280E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

