ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         65 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         66 txtend:: .blkw 1 ; tokenized BASIC text end address 
      000020                         67 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         68 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         69 flags:: .blkb 1 ; various boolean flags
      000024                         70 tab_width:: .blkb 1 ; print colon width (default 4)
      000025                         71 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         72 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         73 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002F                         74 rx3_queue: .ds RX_QUEUE_SIZE ; UART3 receive circular queue
      000037                         75 rx3_head:  .blkb 1 ; rx3_queue head pointer 
      000038                         76 rx3_tail:  .blkb 1 ; rx3_queue tail pointer  
                                     77 
      000039                         78 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     79 ; keep 'free_ram' as last variable 
      00006D                         80 free_ram: ; from here RAM free for BASIC text 
                                     81 
                                     82 ;;-----------------------------------
                                     83     .area SSEG (ABS)
                                     84 ;; working buffers and stack at end of RAM. 	
                                     85 ;;-----------------------------------
      001690                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         87 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         88 pad:: .ds PAD_SIZE             ; working buffer
      001760                         89 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         90 stack_unf: ; stack underflow ; control_stack bottom 
                                     91 
                                     92 ;;--------------------------------------
                                     93     .area HOME 
                                     94 ;; interrupt vector table at 0x8000
                                     95 ;;--------------------------------------
      000000 82 00 05 17             96     int cold_start			; RESET vector 
                           000000    97 .if DEBUG
                                     98 	int TrapHandler 		;TRAP  software interrupt
                           000001    99 .else
      000004 82 00 00 00            100 	int NonHandledInterrupt ;TRAP  software interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                    101 .endif
      000008 82 00 00 00            102 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            103 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            104 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            105 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            106 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            107 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            108 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 8D            109 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            110 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            111 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            112 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            113 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            114 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            115 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            116 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            117 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            118 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            119 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            120 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            121 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            122 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 52            123 	int Uart3RxHandler      ;int21 UART3 RX full
      000060 82 00 00 00            124 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 78            125 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            126 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            127 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            128 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            129 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            130 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            131 	int NonHandledInterrupt ;int29  not used
                                    132 
                                    133 ;---------------------------------------
                                    134     .area CODE
                                    135 ;---------------------------------------
                           000000   136 .if DEBUG
                                    137 .asciz "STM8_TBI" ; I like to put module name here.
                                    138 .endif 
                                    139 
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    141 ; non handled interrupt 
                                    142 ; reset MCU
                                    143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        144 NonHandledInterrupt:
      000000 71                     145     .byte 0x71  ; invalid opcode reinitialize MCU
                                    146 
                                    147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    148 ; auto wakeup from halt
                                    149 ; at iret, program continue 
                                    150 ; after hatl instruction
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        152 AWUHandler:
      000001 72 19 50 F0      [ 1]  153 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  154 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  155 	clr AWU_TBR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      00000E 80               [11]  156 	iret
                                    157 
                                    158 ;--------------------------
                                    159 ; UART1 receive character
                                    160 ; CTRL-C (ASCII 3)
                                    161 ; cancel program execution
                                    162 ; and fall back to command line
                                    163 ;--------------------------
      00000F                        164 Uart1RxHandler: ; console receive char 
      00000F                        165 	_led2_on 
      00000F 72 1A 50 0A      [ 1]    1     bset LED2_PORT,#LED2_BIT 
      000013 72 0B 52 30 35   [ 2]  166 	btjf UART1_SR,#UART_SR_RXNE,5$
      000018 C6 52 31         [ 1]  167 	ld a,UART1_DR 
      00001B A1 03            [ 1]  168 	cp a,#CTRL_C 
      00001D 26 06            [ 1]  169 	jrne 2$
      00001F CD 03 2B         [ 4]  170 	call putc 
      000022 CC 00 A0         [ 2]  171 	jp user_interrupted
      000025                        172 2$:
      000025 A1 18            [ 1]  173 	cp a,#CAN ; CTRL_X 
      000027 26 03            [ 1]  174 	jrne 3$
      000029 CC 05 17         [ 2]  175 	jp cold_start 	
      00002C                        176 3$: 
      00002C A1 1A            [ 1]  177 	cp a,#CTRL_Z
      00002E 26 06            [ 1]  178 	jrne 4$
      000030 CD 05 D8         [ 4]  179 	call cancel_autorun 
      000033 CC 05 17         [ 2]  180 	jp cold_start
      000036 AE 00 25         [ 2]  181 4$:	ldw x,#rx1_queue  
      000039 88               [ 1]  182 	push a 
      00003A 9F               [ 1]  183 	ld a,xl 
      00003B CB 00 2E         [ 1]  184 	add a,rx1_tail 
      00003E 97               [ 1]  185 	ld xl,a
      00003F 84               [ 1]  186 	pop a  
      000040 F7               [ 1]  187 	ld (x),a
      000041 72 5C 00 2E      [ 1]  188 	inc rx1_tail 
      000045 A6 07            [ 1]  189 	ld a,#RX_QUEUE_SIZE-1
      000047 C4 00 2E         [ 1]  190 	and a,rx1_tail 
      00004A C7 00 2E         [ 1]  191 	ld rx1_tail,a  
      00004D                        192 5$:	_led2_off 	
      00004D 72 1B 50 0A      [ 1]    1     bres LED2_PORT,#LED2_BIT 
      000051 80               [11]  193 	iret 
                                    194 
                                    195 ;-----------------------------
                                    196 ; ISR for character reception
                                    197 ; on UART3
                                    198 ; raw data communication
                                    199 ;-----------------------------
      000052                        200 Uart3RxHandler:
      000052                        201 	_led2_on 
      000052 72 1A 50 0A      [ 1]    1     bset LED2_PORT,#LED2_BIT 
      000056 AE 00 2F         [ 2]  202 	ldw x,#rx3_queue 
      000059 9F               [ 1]  203 	ld a,xl 
      00005A CB 00 38         [ 1]  204 	add a,rx3_tail 
      00005D 97               [ 1]  205 	ld xl,a 
      00005E 72 0B 52 40 10   [ 2]  206 	btjf UART3_SR,#UART_SR_RXNE,9$
      000063 C6 52 41         [ 1]  207 	ld a,UART3_DR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000066 F7               [ 1]  208 	ld (x),a  
      000067 72 5C 00 38      [ 1]  209 	inc rx3_tail 
      00006B A6 07            [ 1]  210 	ld a,#RX_QUEUE_SIZE-1 
      00006D C4 00 38         [ 1]  211 	and a,rx3_tail 
      000070 C7 00 38         [ 1]  212 	ld rx3_tail,a 
      000073                        213 9$:	_led2_off 
      000073 72 1B 50 0A      [ 1]    1     bres LED2_PORT,#LED2_BIT 
      000077 80               [11]  214 	iret  
                                    215 
                                    216 
                                    217 ;------------------------------------
                                    218 ; software interrupt handler  
                                    219 ;------------------------------------
                           000000   220 .if DEBUG 
                                    221 TrapHandler:
                                    222 	bset flags,#FTRAP 
                                    223 	call print_registers
                                    224 	call cmd_itf
                                    225 	bres flags,#FTRAP 	
                                    226 	iret
                                    227 .endif 
                                    228 
                                    229 ;------------------------------
                                    230 ; TIMER 4 is used to maintain 
                                    231 ; a milliseconds 'ticks' counter
                                    232 ; and decrement 'timer' varaiable
                                    233 ;--------------------------------
      000078                        234 Timer4UpdateHandler:
      000078 72 5F 53 42      [ 1]  235 	clr TIM4_SR 
      00007C CE 00 0E         [ 2]  236 	ldw x,ticks
      00007F 5C               [ 1]  237 	incw x
      000080 CF 00 0E         [ 2]  238 	ldw ticks,x 
      000083 CE 00 10         [ 2]  239 	ldw x,timer
                                    240 ;	tnzw x 
      000086 27 04            [ 1]  241 	jreq 1$
      000088 5A               [ 2]  242 	decw x 
      000089 CF 00 10         [ 2]  243 	ldw timer,x 
      00008C                        244 1$:	
      00008C 80               [11]  245 	iret 
                                    246 
                                    247 
                                    248 ;------------------------------------
                                    249 ; Triggered by pressing USER UserButton 
                                    250 ; on NUCLEO card.
                                    251 ; This is used to abort a progam lock 
                                    252 ; in infinite loop. 
                                    253 ;------------------------------------
      00008D                        254 UserButtonHandler:
                                    255 ; wait button release
      00008D 5F               [ 1]  256 	clrw x
      00008E 5A               [ 2]  257 1$: decw x 
      00008F 26 FD            [ 1]  258 	jrne 1$
      000091 72 09 50 15 F8   [ 2]  259 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    260 ; if MCU suspended by SLEEP resume program
      000096 72 07 00 23 05   [ 2]  261     btjf flags,#FSLEEP,2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00009B 72 17 00 23      [ 1]  262 	bres flags,#FSLEEP 
      00009F 80               [11]  263 	iret
      0000A0                        264 2$:	
      0000A0                        265 user_interrupted:
      0000A0 72 00 00 23 02   [ 2]  266     btjt flags,#FRUN,4$
      0000A5 20 13            [ 2]  267 	jra UBTN_Handler_exit 
      0000A7                        268 4$:	; program interrupted by user 
      0000A7 72 11 00 23      [ 1]  269 	bres flags,#FRUN 
      0000AB AE 00 C2         [ 2]  270 	ldw x,#USER_ABORT
      0000AE CD 00 00         [ 4]  271 	call puts 
      0000B1 CE 00 04         [ 2]  272 	ldw x,basicptr 
      0000B4 C6 00 01         [ 1]  273 	ld a,in 
      0000B7 CD 0F 27         [ 4]  274 	call prt_basic_line
      0000BA                        275 UBTN_Handler_exit:
      0000BA AE 17 FF         [ 2]  276     ldw x,#STACK_EMPTY 
      0000BD 94               [ 1]  277     ldw sp,x
      0000BE 9A               [ 1]  278 	rim 
      0000BF CC 08 42         [ 2]  279 	jp warm_start
                                    280 
      0000C2 0A 50 72 6F 67 72 61   281 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    peripherals initialization
                                    285 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    286 
                                    287 ;----------------------------------------
                                    288 ; inialize MCU clock 
                                    289 ; input:
                                    290 ;   A 		source  HSI | 1 HSE 
                                    291 ;   XL      CLK_CKDIVR , clock divisor 
                                    292 ; output:
                                    293 ;   none 
                                    294 ;----------------------------------------
      0000DD                        295 clock_init:	
      0000DD C1 50 C3         [ 1]  296 	cp a,CLK_CMSR 
      0000E0 27 0C            [ 1]  297 	jreq 2$ ; no switching required 
                                    298 ; select clock source 
      0000E2 72 12 50 C5      [ 1]  299 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000E6 C7 50 C4         [ 1]  300 	ld CLK_SWR,a
      0000E9 C1 50 C3         [ 1]  301 1$:	cp a,CLK_CMSR
      0000EC 26 FB            [ 1]  302 	jrne 1$
      0000EE                        303 2$: 	
                                    304 ; HSI and cpu clock divisor 
      0000EE 9F               [ 1]  305 	ld a,xl 
      0000EF C7 50 C6         [ 1]  306 	ld CLK_CKDIVR,a  
      0000F2 81               [ 4]  307 	ret
                                    308 
                                    309 ;----------------------------------
                                    310 ; TIMER2 used as audio tone output 
                                    311 ; on port D:5.
                                    312 ; channel 1 configured as PWM mode 1 
                                    313 ;-----------------------------------  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           00F424   314 TIM2_CLK_FREQ=62500
      0000F3                        315 timer2_init:
      0000F3 72 1A 50 C7      [ 1]  316 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000F7 35 60 53 05      [ 1]  317  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000FB 35 08 53 0C      [ 1]  318 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000FF 81               [ 4]  319 	ret 
                                    320 
                                    321 ;---------------------------------
                                    322 ; TIM4 is configured to generate an 
                                    323 ; interrupt every millisecond 
                                    324 ;----------------------------------
      000100                        325 timer4_init:
      000100 72 18 50 C7      [ 1]  326 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      000104 35 07 53 45      [ 1]  327 	mov TIM4_PSCR,#7 ; prescale 128  
      000108 35 7D 53 46      [ 1]  328 	mov TIM4_ARR,#125 ; set for 1msec.
      00010C 35 05 53 40      [ 1]  329 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000110 72 10 53 41      [ 1]  330 	bset TIM4_IER,#TIM4_IER_UIE
      000114 81               [ 4]  331 	ret
                                    332 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    334 ;  routines to write to FLASH, EEPROM 
                                    335 ;  and OPTION 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 
                                    338 ;----------------------------------
                                    339 ; unlock EEPROM/OPT for writing/erasing
                                    340 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    341 ; input:
                                    342 ;  none
                                    343 ; output:
                                    344 ;  none 
                                    345 ;----------------------------------
      000115                        346 unlock_eeprom:
      000115 35 00 50 5B      [ 1]  347 	mov FLASH_CR2,#0 
      000119 35 FF 50 5C      [ 1]  348 	mov FLASH_NCR2,#0xFF 
      00011D 35 AE 50 64      [ 1]  349 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000121 35 56 50 64      [ 1]  350     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000125 72 07 50 5F FB   [ 2]  351 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00012A 81               [ 4]  352 	ret
                                    353 
                                    354 ;----------------------------------
                                    355 ; unlock FLASH for writing/erasing
                                    356 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    357 ; input:
                                    358 ;  none
                                    359 ; output:
                                    360 ;  none
                                    361 ;----------------------------------
      00012B                        362 unlock_flash:
      00012B 35 00 50 5B      [ 1]  363 	mov FLASH_CR2,#0 
      00012F 35 FF 50 5C      [ 1]  364 	mov FLASH_NCR2,#0xFF 
      000133 35 56 50 62      [ 1]  365 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000137 35 AE 50 62      [ 1]  366 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00013B 72 03 50 5F FB   [ 2]  367 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000140 81               [ 4]  368 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    369 
                                    370 ;----------------------------
                                    371 ; erase block code must be 
                                    372 ; executed from RAM
                                    373 ; input:
                                    374 ;-----------------------------
      000141                        375 row_erase:
      000141 35 20 50 5B      [ 1]  376 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000145 35 DF 50 5C      [ 1]  377 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000149 4F               [ 1]  378 	clr a 
      00014A 90 5F            [ 1]  379 	clrw y 
      00014C 91 A7 00 16      [ 1]  380 	ldf ([farptr],y),a
      000150 90 5C            [ 1]  381     incw y
      000152 91 A7 00 16      [ 1]  382 	ldf ([farptr],y),a
      000156 90 5C            [ 1]  383     incw y
      000158 91 A7 00 16      [ 1]  384 	ldf ([farptr],y),a
      00015C 90 5C            [ 1]  385     incw y
      00015E 91 A7 00 16      [ 1]  386 	ldf ([farptr],y),a
      000162 72 05 50 5F FB   [ 2]  387 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000167 81               [ 4]  388 	ret
      000168                        389 row_erase_end:
                                    390 
                                    391 ; copy erase_start in RAM 
      000168                        392 move_erase_to_ram:
      000168 AE 01 68         [ 2]  393 	ldw x,#row_erase_end 
      00016B 1D 01 41         [ 2]  394 	subw x,#row_erase
      00016E CF 00 0C         [ 2]  395 	ldw acc16,x 
      000171 AE 16 90         [ 2]  396 	ldw x,#tib 
      000174 90 AE 01 41      [ 2]  397 	ldw y,#row_erase 
      000178 CD 04 5E         [ 4]  398 	call move 
      00017B 81               [ 4]  399 	ret 
                                    400 
                                    401 ;-----------------------------------
                                    402 ; block programming must be 
                                    403 ; executed from RAM 
                                    404 ; initial contidions: 
                                    405 ; 	memory unlocked
                                    406 ;   bit PRG set in 
                                    407 ; input:
                                    408 ;   x        128 bytes row to program 
                                    409 ;   farptr   row address 
                                    410 ; output:
                                    411 ;   none 
                                    412 ;----------------------------------
                           000001   413 	BCNT=1 
      00017C                        414 program_row:
      00017C 4B 80            [ 1]  415 	push #BLOCK_SIZE  
                                    416 ;enable block programming 
      00017E 72 10 50 5B      [ 1]  417 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000182 72 11 50 5C      [ 1]  418 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000186 90 5F            [ 1]  419 	clrw y 
      000188 F6               [ 1]  420 1$:	ld a,(x)
      000189 91 A7 00 16      [ 1]  421 	ldf ([farptr],y),a
      00018D 5C               [ 1]  422 	incw x 
      00018E 90 5C            [ 1]  423 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000190 0A 01            [ 1]  424 	dec (BCNT,sp)
      000192 26 F4            [ 1]  425 	jrne 1$
                                    426 ; wait EOP bit 
      000194 72 05 50 5F FB   [ 2]  427 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000199                        428 	_drop 1 
      000199 5B 01            [ 2]    1     addw sp,#1 
      00019B 81               [ 4]  429 	ret 
      00019C                        430 program_row_end:
                                    431 
                                    432 ;-------------------------
                                    433 ; move program_row to RAM 
                                    434 ; at txtubound address 
                                    435 ;------------------------
      00019C                        436 move_prg_to_ram:
      00019C AE 01 9C         [ 2]  437 	ldw x,#program_row_end 
      00019F 1D 01 7C         [ 2]  438 	subw x,#program_row 
      0001A2 CF 00 0C         [ 2]  439 	ldw acc16,x 
      0001A5 AE 16 90         [ 2]  440 	ldw x,#tib 
      0001A8 90 AE 01 7C      [ 2]  441 	ldw y,#program_row 
      0001AC CD 04 5E         [ 4]  442 	call move 
      0001AF 81               [ 4]  443 	ret 
                                    444 
                                    445 
                                    446 ;-----------------------------
                                    447 ; write a row in FLASH/EEPROM 
                                    448 ; input:
                                    449 ;    farptr   destination address 
                                    450 ;    x        source address 
                                    451 ;-----------------------------
      0001B0                        452 write_row:
      0001B0 89               [ 2]  453 	pushw x 
      0001B1 72 5D 00 16      [ 1]  454 	tnz farptr 
      0001B5 26 1C            [ 1]  455 	jrne to_flash 
      0001B7 AE 80 00         [ 2]  456 	ldw x,#FLASH_BASE 
      0001BA C3 00 17         [ 2]  457 	cpw x,farptr+1 
      0001BD 24 14            [ 1]  458 	jruge to_flash 
      0001BF                        459 to_eeprom:
      0001BF AE 40 00         [ 2]  460 	ldw x,#EEPROM_BASE 
      0001C2 C3 00 17         [ 2]  461 	cpw x,farptr+1 
      0001C5 24 01            [ 1]  462 	jruge 1$
      0001C7 81               [ 4]  463 	ret ; bad address 
      0001C8 AE 47 FF         [ 2]  464 1$: ldw x,#EEPROM_END 
      0001CB 23 01            [ 2]  465 	jrule 2$ 
      0001CD 81               [ 4]  466 	ret ; bad address 
      0001CE CD 01 15         [ 4]  467 2$:	call unlock_eeprom
      0001D1 20 03            [ 2]  468 	jra do_programming
      0001D3                        469 to_flash:
      0001D3 CD 01 2B         [ 4]  470 	call unlock_flash 
      0001D6                        471 do_programming:
      0001D6 85               [ 2]  472 	popw x 
      0001D7 CD 16 90         [ 4]  473 	call tib
      0001DA 72 13 50 5F      [ 1]  474 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001DE 72 17 50 5F      [ 1]  475 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001E2 81               [ 4]  476 	ret 
                                    477 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    478 
                                    479 ;-----------------------------------
                                    480 ; erase flash or EEPROM block
                                    481 ; a blow is 128 bytes 
                                    482 ; input:
                                    483 ;   farptr  address row begin
                                    484 ; output:
                                    485 ;   none
                                    486 ;--------------------------------------
      0001E3                        487 block_erase:
      0001E3 CE 00 17         [ 2]  488 	ldw x,farptr+1
      0001E6 A3 22 00         [ 2]  489 	cpw x,#user_space 
      0001E9 2A 17            [ 1]  490 	jrpl erase_flash 
                                    491 ; erase eeprom block
      0001EB A3 40 00         [ 2]  492 	cpw x,#EEPROM_BASE 
      0001EE 24 01            [ 1]  493 	jruge 1$
      0001F0 81               [ 4]  494 	ret ; bad address 
      0001F1 AE 47 FF         [ 2]  495 1$: ldw x,#EEPROM_END 
      0001F4 23 01            [ 2]  496 	jrule 2$ 
      0001F6 81               [ 4]  497 	ret ; bad address 
      0001F7 CD 01 15         [ 4]  498 2$:	call unlock_eeprom 
      0001FA CD 16 90         [ 4]  499 	call tib 
      0001FD 72 17 50 5F      [ 1]  500 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000201 81               [ 4]  501 	ret 
                                    502 ; erase flash block:
      000202                        503 erase_flash:
      000202 CD 01 2B         [ 4]  504 	call unlock_flash 
      000205 CD 16 90         [ 4]  505 	call tib 
      000208 72 13 50 5F      [ 1]  506     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00020C 81               [ 4]  507 	ret 
                                    508 
                                    509 
                                    510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    511 ; write a byte to FLASH or EEPROM/OPTION  
                                    512 ; input:
                                    513 ;    a  		byte to write
                                    514 ;    farptr  	address
                                    515 ;    x          farptr[x]
                                    516 ; output:
                                    517 ;    none
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    519 	; variables locales
                           000001   520 	BTW = 1   ; byte to write offset on stack
                           000002   521 	OPT = 2   ; OPTION flag offset on stack
                           000002   522 	VSIZE = 2
      00020D                        523 write_byte:
      00020D 90 89            [ 2]  524 	pushw y
      00020F                        525 	_vars VSIZE
      00020F 52 02            [ 2]    1     sub sp,#VSIZE 
      000211 6B 01            [ 1]  526 	ld (BTW,sp),a ; byte to write 
      000213 0F 02            [ 1]  527 	clr (OPT,sp)  ; OPTION flag
                                    528 ; put addr[15:0] in Y, for bounds check.
      000215 90 CE 00 17      [ 2]  529 	ldw y,farptr+1   ; Y=addr15:0
                                    530 ; check addr[23:16], if <> 0 then it is extened flash memory
      000219 72 5D 00 16      [ 1]  531 	tnz farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00021D 26 14            [ 1]  532 	jrne write_flash
      00021F 90 A3 22 00      [ 2]  533     cpw y,#user_space
      000223 24 0E            [ 1]  534     jruge write_flash
      000225 90 A3 40 00      [ 2]  535 	cpw y,#EEPROM_BASE  
      000229 25 52            [ 1]  536     jrult write_exit
      00022B 90 A3 48 7F      [ 2]  537 	cpw y,#OPTION_END 
      00022F 22 4C            [ 1]  538 	jrugt write_exit
      000231 20 16            [ 2]  539 	jra write_eeprom 
                                    540 ; write program memory
      000233                        541 write_flash:
      000233 CD 01 2B         [ 4]  542 	call unlock_flash 
      000236 9B               [ 1]  543 1$:	sim 
      000237 7B 01            [ 1]  544 	ld a,(BTW,sp)
      000239 92 A7 00 16      [ 4]  545 	ldf ([farptr],x),a ; farptr[x]=A
      00023D 72 05 50 5F FB   [ 2]  546 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000242 9A               [ 1]  547     rim 
      000243 72 13 50 5F      [ 1]  548     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000247 20 34            [ 2]  549     jra write_exit
                                    550 ; write eeprom and option
      000249                        551 write_eeprom:
      000249 CD 01 15         [ 4]  552 	call unlock_eeprom
                                    553 	; check for data eeprom or option eeprom
      00024C 90 A3 48 00      [ 2]  554 	cpw y,#OPTION_BASE
      000250 2B 08            [ 1]  555 	jrmi 1$
      000252 90 A3 48 80      [ 2]  556 	cpw y,#OPTION_END+1
      000256 2A 02            [ 1]  557 	jrpl 1$
      000258 03 02            [ 1]  558 	cpl (OPT,sp)
      00025A                        559 1$: 
      00025A 0D 02            [ 1]  560     tnz (OPT,sp)
      00025C 27 08            [ 1]  561     jreq 2$
                                    562 	; pour modifier une option il faut modifier ces 2 bits
      00025E 72 1E 50 5B      [ 1]  563     bset FLASH_CR2,#FLASH_CR2_OPT
      000262 72 1F 50 5C      [ 1]  564     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000266                        565 2$: 
      000266 7B 01            [ 1]  566     ld a,(BTW,sp)
      000268 92 A7 00 16      [ 4]  567     ldf ([farptr],x),a
      00026C 0D 02            [ 1]  568     tnz (OPT,sp)
      00026E 27 08            [ 1]  569     jreq 3$
      000270 5C               [ 1]  570     incw x
      000271 7B 01            [ 1]  571     ld a,(BTW,sp)
      000273 43               [ 1]  572     cpl a
      000274 92 A7 00 16      [ 4]  573     ldf ([farptr],x),a
      000278 72 05 50 5F FB   [ 2]  574 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00027D                        575 write_exit:
      00027D                        576 	_drop VSIZE 
      00027D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027F 90 85            [ 2]  577 	popw y
      000281 81               [ 4]  578     ret
                                    579 
                                    580 ;--------------------------------------------
                                    581 ; write a data block to eeprom or flash 
                                    582 ; input:
                                    583 ;   Y        source address   
                                    584 ;   X        array index  destination  farptr[x]
                                    585 ;   BSIZE    block size bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    586 ;   farptr   write address , byte* 
                                    587 ; output:
                                    588 ;	X 		after last byte written 
                                    589 ;   Y 		after last byte read 
                                    590 ;  farptr   point after block
                                    591 ;---------------------------------------------
      000282                        592 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000282                        593 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    594 	; local var 
                           000001   595 	XSAVE=1 
                           000002   596 	VSIZE=2 
      000282                        597 write_block:
      000282                        598 	_vars VSIZE
      000282 52 02            [ 2]    1     sub sp,#VSIZE 
      000284 1F 01            [ 2]  599 	ldw (XSAVE,sp),x 
      000286 1E 05            [ 2]  600 	ldw x,(BSIZE,sp) 
      000288 27 13            [ 1]  601 	jreq 9$
      00028A 1E 01            [ 2]  602 1$:	ldw x,(XSAVE,sp)
      00028C 90 F6            [ 1]  603 	ld a,(y)
      00028E CD 02 0D         [ 4]  604 	call write_byte 
      000291 5C               [ 1]  605 	incw x 
      000292 90 5C            [ 1]  606 	incw y 
      000294 1F 01            [ 2]  607 	ldw (XSAVE,sp),x
      000296 1E 05            [ 2]  608 	ldw x,(BSIZE,sp)
      000298 5A               [ 2]  609 	decw x
      000299 1F 05            [ 2]  610 	ldw (BSIZE,sp),x 
      00029B 26 ED            [ 1]  611 	jrne 1$
      00029D                        612 9$:
      00029D 1E 01            [ 2]  613 	ldw x,(XSAVE,sp)
      00029F CD 14 2D         [ 4]  614 	call incr_farptr
      0002A2                        615 	_drop VSIZE
      0002A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002A4 81               [ 4]  616 	ret 
                                    617 
                                    618 
                                    619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    620 ;;   UART1 subroutines
                                    621 ;;   used for user interface 
                                    622 ;;   communication channel.
                                    623 ;;   settings: 
                                    624 ;;		115200 8N1 no flow control
                                    625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    626 
                                    627 ;--------------------------------
                                    628 ; initialize UART3, 115200 8N1 
                                    629 ;--------------------------------
      0002A5                        630 uart3_init: 
      0002A5 72 1A 50 11      [ 1]  631 	bset PD_DDR,#UART3_TX_PIN
      0002A9 72 1A 50 12      [ 1]  632 	bset PD_CR1,#UART3_TX_PIN 
      0002AD 72 1A 50 13      [ 1]  633 	bset PD_CR2,#UART3_TX_PIN 
      0002B1 72 16 50 C7      [ 1]  634 	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
      0002B5                        635 uart3_set_baud: 
                                    636 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    637 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002B5 A6 E1            [ 1]  638 	ld a,#CLK_SWR_HSI
      0002B7 C1 50 C3         [ 1]  639 	cp a,CLK_CMSR 
      0002BA 27 0A            [ 1]  640 	jreq 2$ 
      0002BC                        641 1$: ; 8 Mhz 	
      0002BC 35 05 52 43      [ 1]  642 	mov UART3_BRR2,#0x05 ; must be loaded first
      0002C0 35 04 52 42      [ 1]  643 	mov UART3_BRR1,#0x4
      0002C4 20 08            [ 2]  644 	jra 3$
      0002C6                        645 2$: ; 16 Mhz 	
      0002C6 35 0B 52 43      [ 1]  646 	mov UART3_BRR2,#0x0b ; must be loaded first
      0002CA 35 08 52 42      [ 1]  647 	mov UART3_BRR1,#0x08
      0002CE                        648 3$:
      0002CE 72 5F 52 41      [ 1]  649     clr UART3_DR
      0002D2 35 2C 52 45      [ 1]  650 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002D6 72 10 52 45      [ 1]  651 	bset UART3_CR2,#UART_CR2_SBK
      0002DA 72 0D 52 40 FB   [ 2]  652     btjf UART3_SR,#UART_SR_TC,.
      0002DF 72 5F 00 38      [ 1]  653 	clr rx3_tail 
      0002E3 72 5F 00 37      [ 1]  654 	clr rx3_head 
      0002E7 81               [ 4]  655 	ret 
                                    656 
                                    657 ;---------------------------------------------
                                    658 ; initialize UART1, 115200 8N1
                                    659 ; input:
                                    660 ;	none
                                    661 ; output:
                                    662 ;   none
                                    663 ;---------------------------------------------
      0002E8                        664 uart1_init:
      0002E8 72 1A 50 02      [ 1]  665     bset PA_DDR,#UART1_TX_PIN
      0002EC 72 1A 50 03      [ 1]  666     bset PA_CR1,#UART1_TX_PIN 
      0002F0 72 1A 50 04      [ 1]  667     bset PA_CR2,#UART1_TX_PIN 
                                    668 ; enable UART1 clock
      0002F4 72 14 50 C7      [ 1]  669 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0002F8                        670 uart1_set_baud: 
                                    671 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    672 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002F8 A6 E1            [ 1]  673 	ld a,#CLK_SWR_HSI
      0002FA C1 50 C3         [ 1]  674 	cp a,CLK_CMSR 
      0002FD 27 0A            [ 1]  675 	jreq 2$ 
      0002FF                        676 1$: ; 8 Mhz 	
      0002FF 35 05 52 33      [ 1]  677 	mov UART1_BRR2,#0x05 ; must be loaded first
      000303 35 04 52 32      [ 1]  678 	mov UART1_BRR1,#0x4
      000307 20 08            [ 2]  679 	jra 3$
      000309                        680 2$: ; 16 Mhz 	
      000309 35 0B 52 33      [ 1]  681 	mov UART1_BRR2,#0x0b ; must be loaded first
      00030D 35 08 52 32      [ 1]  682 	mov UART1_BRR1,#0x08
      000311                        683 3$:
      000311 72 5F 52 31      [ 1]  684     clr UART1_DR
      000315 35 2C 52 35      [ 1]  685 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000319 72 10 52 35      [ 1]  686 	bset UART1_CR2,#UART_CR2_SBK
      00031D 72 0D 52 30 FB   [ 2]  687     btjf UART1_SR,#UART_SR_TC,.
      000322 72 5F 00 2D      [ 1]  688     clr rx1_head 
      000326 72 5F 00 2E      [ 1]  689 	clr rx1_tail 
      00032A 81               [ 4]  690 	ret
                                    691 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    692 ;---------------------------------
                                    693 ; uart1_putc
                                    694 ; send a character via UART1
                                    695 ; input:
                                    696 ;    A  	character to send
                                    697 ;---------------------------------
      00032B                        698 putc:: ; console output always on UART1
      00032B                        699 uart1_putc:: 
      00032B 72 0F 52 30 FB   [ 2]  700 	btjf UART1_SR,#UART_SR_TXE,.
      000330 C7 52 31         [ 1]  701 	ld UART1_DR,a 
      000333 81               [ 4]  702 	ret 
                                    703 
                                    704 ;---------------------------------
                                    705 ; uart3_putc 
                                    706 ; send a character via UART3 
                                    707 ; input:
                                    708 ;    A  	character to send
                                    709 ;---------------------------------
      000334                        710 uart3_putc::
      000334 72 0F 52 40 FB   [ 2]  711 	btjf UART3_SR,#UART_SR_TXE,.
      000339 C7 52 41         [ 1]  712 	ld UART3_DR,a 
      00033C 81               [ 4]  713 	ret 
                                    714 
                                    715 ;---------------------------------
                                    716 ; Query for character in rx1_queue
                                    717 ; input:
                                    718 ;   none 
                                    719 ; output:
                                    720 ;   A     0 no charcter available
                                    721 ;   Z     1 no character available
                                    722 ;---------------------------------
      00033D                        723 qgetc::
      00033D                        724 uart1_qgetc::
      00033D C6 00 2D         [ 1]  725 	ld a,rx1_head 
      000340 C0 00 2E         [ 1]  726 	sub a,rx1_tail 
      000343 81               [ 4]  727 	ret 
                                    728 
      000344                        729 uart3_qgetc::
      000344 C6 00 37         [ 1]  730 	ld a,rx3_head 
      000347 C0 00 38         [ 1]  731 	sub a,rx3_tail 
      00034A 81               [ 4]  732 	ret 
                                    733 
                                    734 ;---------------------------------
                                    735 ; wait character from UART1 
                                    736 ; input:
                                    737 ;   none
                                    738 ; output:
                                    739 ;   A 			char  
                                    740 ;--------------------------------	
      00034B                        741 getc:: ;console input
      00034B                        742 uart1_getc::
      00034B CD 03 3D         [ 4]  743 	call uart1_qgetc
      00034E 27 FB            [ 1]  744 	jreq uart1_getc 
      000350 89               [ 2]  745 	pushw x 
      000351 AE 00 25         [ 2]  746 	ldw x,#rx1_queue
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000354 9F               [ 1]  747 	ld a,xl 
      000355 CB 00 2D         [ 1]  748 	add a,rx1_head 
      000358 97               [ 1]  749 	ld xl,a 
      000359 F6               [ 1]  750 	ld a,(x)
      00035A 85               [ 2]  751 	popw x
      00035B 88               [ 1]  752 	push a
      00035C 72 5C 00 2D      [ 1]  753 	inc rx1_head 
      000360 A6 07            [ 1]  754 	ld a,#RX_QUEUE_SIZE-1 
      000362 C4 00 2D         [ 1]  755 	and a,rx1_head 
      000365 C7 00 2D         [ 1]  756 	ld rx1_head,a 
      000368 84               [ 1]  757 	pop a  
      000369 81               [ 4]  758 	ret 
                                    759 
                                    760 ;----------------------------------
                                    761 ; wait character from UART3 
                                    762 ; output:
                                    763 ;   A       character received
                                    764 ;-----------------------------------
      00036A                        765 uart3_getc::
      00036A CD 03 44         [ 4]  766 	call uart3_qgetc
      00036D 27 FB            [ 1]  767 	jreq uart3_getc 
      00036F 89               [ 2]  768 	pushw x 
      000370 AE 00 2F         [ 2]  769 	ldw x,#rx3_queue
      000373 9F               [ 1]  770 	ld a,xl 
      000374 CB 00 37         [ 1]  771 	add a,rx3_head 
      000377 97               [ 1]  772 	ld xl,a 
      000378 F6               [ 1]  773 	ld a,(x)
      000379 85               [ 2]  774 	popw x
      00037A 88               [ 1]  775 	push a
      00037B 72 5C 00 37      [ 1]  776 	inc rx3_head 
      00037F A6 07            [ 1]  777 	ld a,#RX_QUEUE_SIZE-1 
      000381 C4 00 37         [ 1]  778 	and a,rx3_head 
      000384 C7 00 37         [ 1]  779 	ld rx3_head,a 
      000387 84               [ 1]  780 	pop a  
      000388 81               [ 4]  781 	ret 
                                    782 
                                    783 
                                    784 ;----------------------
                                    785 ; print token id && value
                                    786 ; input:
                                    787 ;   A     token id 
                                    788 ;   X     token value 
                                    789 ;---------------------
                           000001   790 	BSAVE=1
                           000002   791 	AREG=2
                           000003   792 	XREG=3
                           000004   793 	VSIZE=4
      000389                        794 prt_tok:
      000389                        795 	_vars VSIZE 
      000389 52 04            [ 2]    1     sub sp,#VSIZE 
      00038B 6B 02            [ 1]  796 	ld (AREG,sp),a 
      00038D 1F 03            [ 2]  797 	ldw (XREG,sp),x 
      00038F C6 00 0A         [ 1]  798 	ld a, base
      000392 6B 01            [ 1]  799 	ld (BSAVE,sp),a 
      000394 35 10 00 0A      [ 1]  800 	mov base,#16  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000398 AE 03 C0         [ 2]  801 	ldw x,#token_msg
      00039B CD 00 00         [ 4]  802 	call puts 
      00039E 5F               [ 1]  803 	clrw x 
      00039F 7B 02            [ 1]  804 	ld a,(AREG,sp)
      0003A1 97               [ 1]  805 	ld xl,a 
      0003A2 CD 09 0E         [ 4]  806 	call print_int 
      0003A5 A6 20            [ 1]  807 	ld a,#SPACE
      0003A7 CD 03 2B         [ 4]  808 	call putc 
      0003AA 1E 03            [ 2]  809 	ldw x,(XREG,sp)
      0003AC CD 09 0E         [ 4]  810 	call print_int 
      0003AF A6 0D            [ 1]  811 	ld a,#CR 
      0003B1 CD 03 2B         [ 4]  812 	call putc 
      0003B4 7B 01            [ 1]  813 	ld a,(BSAVE,sp)
      0003B6 C7 00 0A         [ 1]  814 	ld base,a 
      0003B9 7B 02            [ 1]  815 	ld a,(AREG,sp)
      0003BB 1E 03            [ 2]  816 	ldw x,(XREG,sp)
      0003BD                        817 	_drop VSIZE 
      0003BD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0003BF 81               [ 4]  818 	ret 
      0003C0 74 6F 6B 65 6E 3A 20   819 token_msg: .asciz "token: "
             00
                                    820 
                                    821 
                                    822 ;---------------------
                                    823 ; display n bytes row 
                                    824 ; from memory.
                                    825 ; input:
                                    826 ;   A   bytes to print 
                                    827 ;	X   start address 
                                    828 ; output:
                                    829 ;   X   address after last shown  
                                    830 ;---------------------
                           000001   831 	CNT=1 
                           000002   832 	ADR=2 
                           000003   833 	VSIZE=3 
      0003C8                        834 show_row:
      0003C8 4D               [ 1]  835 	tnz a 
      0003C9 26 01            [ 1]  836 	jrne 1$
      0003CB 81               [ 4]  837 	ret 
      0003CC                        838 1$:	
      0003CC 89               [ 2]  839 	pushw x  
      0003CD 88               [ 1]  840 	push a 
      0003CE 35 04 00 24      [ 1]  841 	mov tab_width,#4 
      0003D2 CD 09 0E         [ 4]  842 	call print_int 
      0003D5 A6 20            [ 1]  843 	ld a,#SPACE  
      0003D7 CD 03 2B         [ 4]  844 	call putc
      0003DA                        845 row_loop:
      0003DA 1E 02            [ 2]  846 	ldw x,(ADR,sp)
      0003DC F6               [ 1]  847 	ld a,(x)
      0003DD 5F               [ 1]  848 	clrw x 
      0003DE 97               [ 1]  849 	ld xl,a 
      0003DF CD 09 0E         [ 4]  850 	call print_int 
      0003E2 1E 02            [ 2]  851 	ldw x,(ADR,sp)
      0003E4 5C               [ 1]  852 	incw x 
      0003E5 1F 02            [ 2]  853 	ldw (ADR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003E7 0A 01            [ 1]  854 	dec (CNT,sp)
      0003E9 26 EF            [ 1]  855 	jrne row_loop
      0003EB                        856 	_drop VSIZE  		
      0003EB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0003ED 35 04 00 24      [ 1]  857 	mov tab_width,#4
      0003F1 A6 0D            [ 1]  858 	ld a,#CR 
      0003F3 CD 03 2B         [ 4]  859 	call putc 
      0003F6 81               [ 4]  860 	ret 
                                    861 
                                    862 ;--------------------------
                                    863 ; print memory content 
                                    864 ; in hexadecimal format
                                    865 ;  input:
                                    866 ;    X    start address 
                                    867 ;    Y    count 
                                    868 ;--------------------------
                           000001   869 	BCNT=1
                           000003   870 	BASE=3
                           000004   871 	TABW=4
                           000004   872 	VSIZE=4   
      0003F7                        873 hex_dump:
      0003F7                        874 	_vars VSIZE
      0003F7 52 04            [ 2]    1     sub sp,#VSIZE 
      0003F9 C6 00 0A         [ 1]  875 	ld a,base
      0003FC 6B 03            [ 1]  876 	ld (BASE,sp),a 
      0003FE 35 10 00 0A      [ 1]  877 	mov base,#16
      000402 C6 00 24         [ 1]  878 	ld a,tab_width 
      000405 6B 04            [ 1]  879 	ld (TABW,sp),a
      000407 A6 0D            [ 1]  880 	ld a,#CR 
      000409 CD 03 2B         [ 4]  881 	call putc 
      00040C 17 01            [ 2]  882 1$: ldw (BCNT,sp),y
      00040E A6 10            [ 1]  883 	ld a,#16
      000410 90 A3 00 10      [ 2]  884 	cpw y,#16
      000414 2A 02            [ 1]  885 	jrpl 2$
      000416 90 9F            [ 1]  886 	ld a,yl
      000418                        887 2$: 	
      000418 CD 03 C8         [ 4]  888 	call show_row 
      00041B 16 01            [ 2]  889 	ldw y,(BCNT,sp) 
      00041D 72 A2 00 10      [ 2]  890 	subw y,#16 
      000421 90 A3 00 01      [ 2]  891 	cpw y,#1
      000425 2A E5            [ 1]  892 	jrpl 1$
      000427 7B 03            [ 1]  893 	ld a,(BASE,sp)
      000429 C7 00 0A         [ 1]  894 	ld base,a
      00042C 7B 04            [ 1]  895 	ld a,(TABW,sp)
      00042E C7 00 24         [ 1]  896 	ld tab_width,a 
      000431                        897 	_drop VSIZE
      000431 5B 04            [ 2]    1     addw sp,#VSIZE 
      000433 81               [ 4]  898 	ret 
                                    899 
                                    900 ;-------------------------------------
                                    901 ; retrun string length
                                    902 ; input:
                                    903 ;   X         .asciz  pointer 
                                    904 ; output:
                                    905 ;   X         not affected 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    906 ;   A         length 
                                    907 ;-------------------------------------
      000434                        908 strlen::
      000434 89               [ 2]  909 	pushw x 
      000435 4F               [ 1]  910 	clr a
      000436 7D               [ 1]  911 1$:	tnz (x) 
      000437 27 04            [ 1]  912 	jreq 9$ 
      000439 4C               [ 1]  913 	inc a 
      00043A 5C               [ 1]  914 	incw x 
      00043B 20 F9            [ 2]  915 	jra 1$ 
      00043D 85               [ 2]  916 9$:	popw x 
      00043E 81               [ 4]  917 	ret 
                                    918 
                                    919 ;------------------------------------
                                    920 ; compare 2 strings
                                    921 ; input:
                                    922 ;   X 		char* first string 
                                    923 ;   Y       char* second string 
                                    924 ; output:
                                    925 ;   A 		0|1 
                                    926 ;-------------------------------------
      00043F                        927 strcmp:
      00043F F6               [ 1]  928 	ld a,(x)
      000440 27 0B            [ 1]  929 	jreq 5$ 
      000442 90 F1            [ 1]  930 	cp a,(y) 
      000444 26 05            [ 1]  931 	jrne 4$ 
      000446 5C               [ 1]  932 	incw x 
      000447 90 5C            [ 1]  933 	incw y 
      000449 20 F4            [ 2]  934 	jra strcmp 
      00044B                        935 4$: ; not same  
      00044B 4F               [ 1]  936 	clr a 
      00044C 81               [ 4]  937 	ret 
      00044D                        938 5$: ; same 
      00044D A6 01            [ 1]  939 	ld a,#1 
      00044F 81               [ 4]  940 	ret 
                                    941 
                                    942 
                                    943 ;---------------------------------------
                                    944 ;  copy src to dest 
                                    945 ; input:
                                    946 ;   X 		dest 
                                    947 ;   Y 		src 
                                    948 ; output: 
                                    949 ;   X 		dest 
                                    950 ;----------------------------------
      000450                        951 strcpy::
      000450 89               [ 2]  952 	pushw x 
      000451 90 F6            [ 1]  953 1$: ld a,(y)
      000453 27 06            [ 1]  954 	jreq 9$ 
      000455 F7               [ 1]  955 	ld (x),a 
      000456 5C               [ 1]  956 	incw x 
      000457 90 5C            [ 1]  957 	incw y 
      000459 20 F6            [ 2]  958 	jra 1$ 
      00045B 7F               [ 1]  959 9$:	clr (x)
      00045C 85               [ 2]  960 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00045D 81               [ 4]  961 	ret 
                                    962 
                                    963 ;---------------------------------------
                                    964 ; move memory block 
                                    965 ; input:
                                    966 ;   X 		destination 
                                    967 ;   Y 	    source 
                                    968 ;   acc16	bytes count 
                                    969 ; output:
                                    970 ;   none 
                                    971 ;--------------------------------------
                           000001   972 	INCR=1 ; increament high byte 
                           000002   973 	LB=2 ; increament low byte 
                           000002   974 	VSIZE=2
      00045E                        975 move::
      00045E                        976 	_vars VSIZE 
      00045E 52 02            [ 2]    1     sub sp,#VSIZE 
      000460 0F 01            [ 1]  977 	clr (INCR,sp)
      000462 0F 02            [ 1]  978 	clr (LB,sp)
      000464 90 89            [ 2]  979 	pushw y 
      000466 13 01            [ 2]  980 	cpw x,(1,sp) ; compare DEST to SRC 
      000468 90 85            [ 2]  981 	popw y 
      00046A 27 31            [ 1]  982 	jreq move_exit ; x==y 
      00046C 2B 0E            [ 1]  983 	jrmi move_down
      00046E                        984 move_up: ; start from top address with incr=-1
      00046E 72 BB 00 0C      [ 2]  985 	addw x,acc16
      000472 72 B9 00 0C      [ 2]  986 	addw y,acc16
      000476 03 01            [ 1]  987 	cpl (INCR,sp)
      000478 03 02            [ 1]  988 	cpl (LB,sp)   ; increment = -1 
      00047A 20 05            [ 2]  989 	jra move_loop  
      00047C                        990 move_down: ; start from bottom address with incr=1 
      00047C 5A               [ 2]  991     decw x 
      00047D 90 5A            [ 2]  992 	decw y
      00047F 0C 02            [ 1]  993 	inc (LB,sp) ; incr=1 
      000481                        994 move_loop:	
      000481 C6 00 0C         [ 1]  995     ld a, acc16 
      000484 CA 00 0D         [ 1]  996 	or a, acc8
      000487 27 14            [ 1]  997 	jreq move_exit 
      000489 72 FB 01         [ 2]  998 	addw x,(INCR,sp)
      00048C 72 F9 01         [ 2]  999 	addw y,(INCR,sp) 
      00048F 90 F6            [ 1] 1000 	ld a,(y)
      000491 F7               [ 1] 1001 	ld (x),a 
      000492 89               [ 2] 1002 	pushw x 
      000493 CE 00 0C         [ 2] 1003 	ldw x,acc16 
      000496 5A               [ 2] 1004 	decw x 
      000497 CF 00 0C         [ 2] 1005 	ldw acc16,x 
      00049A 85               [ 2] 1006 	popw x 
      00049B 20 E4            [ 2] 1007 	jra move_loop
      00049D                       1008 move_exit:
      00049D                       1009 	_drop VSIZE
      00049D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00049F 81               [ 4] 1010 	ret 	
                                   1011 
                                   1012 ;------------------------------------
                                   1013 ;  set all variables to zero 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1014 ; input:
                                   1015 ;   none 
                                   1016 ; output:
                                   1017 ;	none
                                   1018 ;------------------------------------
      0004A0                       1019 clear_vars:
      0004A0 AE 00 39         [ 2] 1020 	ldw x,#vars 
      0004A3 90 AE 00 34      [ 2] 1021 	ldw y,#2*26 
      0004A7 7F               [ 1] 1022 1$:	clr (x)
      0004A8 5C               [ 1] 1023 	incw x 
      0004A9 90 5A            [ 2] 1024 	decw y 
      0004AB 26 FA            [ 1] 1025 	jrne 1$
      0004AD 81               [ 4] 1026 	ret 
                                   1027 
                                   1028 ;-------------------------------------
                                   1029 ; check if A is a letter 
                                   1030 ; input:
                                   1031 ;   A 			character to test 
                                   1032 ; output:
                                   1033 ;   C flag      1 true, 0 false 
                                   1034 ;-------------------------------------
      0004AE                       1035 is_alpha::
      0004AE A1 41            [ 1] 1036 	cp a,#'A 
      0004B0 8C               [ 1] 1037 	ccf 
      0004B1 24 0B            [ 1] 1038 	jrnc 9$ 
      0004B3 A1 5B            [ 1] 1039 	cp a,#'Z+1 
      0004B5 25 07            [ 1] 1040 	jrc 9$ 
      0004B7 A1 61            [ 1] 1041 	cp a,#'a 
      0004B9 8C               [ 1] 1042 	ccf 
      0004BA 24 02            [ 1] 1043 	jrnc 9$
      0004BC A1 7B            [ 1] 1044 	cp a,#'z+1
      0004BE 81               [ 4] 1045 9$: ret 	
                                   1046 
                                   1047 ;------------------------------------
                                   1048 ; check if character in {'0'..'9'}
                                   1049 ; input:
                                   1050 ;    A  character to test
                                   1051 ; output:
                                   1052 ;    Carry  0 not digit | 1 digit
                                   1053 ;------------------------------------
      0004BF                       1054 is_digit::
      0004BF A1 30            [ 1] 1055 	cp a,#'0
      0004C1 25 03            [ 1] 1056 	jrc 1$
      0004C3 A1 3A            [ 1] 1057     cp a,#'9+1
      0004C5 8C               [ 1] 1058 	ccf 
      0004C6 8C               [ 1] 1059 1$:	ccf 
      0004C7 81               [ 4] 1060     ret
                                   1061 
                                   1062 ;-------------------------------------
                                   1063 ; return true if character in  A 
                                   1064 ; is letter or digit.
                                   1065 ; input:
                                   1066 ;   A     ASCII character 
                                   1067 ; output:
                                   1068 ;   A     no change 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1069 ;   Carry    0 false| 1 true 
                                   1070 ;--------------------------------------
      0004C8                       1071 is_alnum::
      0004C8 CD 04 BF         [ 4] 1072 	call is_digit
      0004CB 25 03            [ 1] 1073 	jrc 1$ 
      0004CD CD 04 AE         [ 4] 1074 	call is_alpha
      0004D0 81               [ 4] 1075 1$:	ret 
                                   1076 
                                   1077 
                                   1078 ;-------------------------------------
                                   1079 ;  program initialization entry point 
                                   1080 ;-------------------------------------
                           000001  1081 	MAJOR=1
                           000000  1082 	MINOR=0
      0004D1 0A 0A 54 69 6E 79 20  1083 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000517                       1084 cold_start:
                                   1085 ;set stack 
      000517 AE 17 FF         [ 2] 1086 	ldw x,#STACK_EMPTY
      00051A 94               [ 1] 1087 	ldw sp,x   
                                   1088 ; clear all ram 
      00051B 7F               [ 1] 1089 0$: clr (x)
      00051C 5A               [ 2] 1090 	decw x 
      00051D 26 FC            [ 1] 1091 	jrne 0$
                                   1092 ; activate pull up on all inputs 
      00051F A6 FF            [ 1] 1093 	ld a,#255 
      000521 C7 50 03         [ 1] 1094 	ld PA_CR1,a 
      000524 C7 50 08         [ 1] 1095 	ld PB_CR1,a 
      000527 C7 50 0D         [ 1] 1096 	ld PC_CR1,a 
      00052A C7 50 12         [ 1] 1097 	ld PD_CR1,a 
      00052D C7 50 17         [ 1] 1098 	ld PE_CR1,a 
      000530 C7 50 1C         [ 1] 1099 	ld PF_CR1,a 
      000533 C7 50 21         [ 1] 1100 	ld PG_CR1,a 
      000536 C7 50 2B         [ 1] 1101 	ld PI_CR1,a
                                   1102 ; set LD2 pin as output 
      000539 72 1A 50 0D      [ 1] 1103     bset PC_CR1,#LED2_BIT
      00053D 72 1A 50 0E      [ 1] 1104     bset PC_CR2,#LED2_BIT
      000541 72 1A 50 0C      [ 1] 1105     bset PC_DDR,#LED2_BIT
      000545 72 1B 50 0A      [ 1] 1106 	bres PC_ODR,#LED2_BIT 
                                   1107 ; disable schmitt triggers on Arduino CN4 analog inputs
      000549 55 00 3F 54 07   [ 1] 1108 	mov ADC_TDRL,0x3f
                                   1109 ; disable peripherals clocks
                                   1110 ;	clr CLK_PCKENR1 
                                   1111 ;	clr CLK_PCKENR2
      00054E 72 5F 50 F2      [ 1] 1112 	clr AWU_TBR 
      000552 72 14 50 CA      [ 1] 1113 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1114 ; select internal clock no divisor: 16 Mhz 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000556 A6 E1            [ 1] 1115 	ld a,#CLK_SWR_HSI 
      000558 5F               [ 1] 1116 	clrw x  
      000559 CD 00 DD         [ 4] 1117     call clock_init 
      00055C CD 01 00         [ 4] 1118 	call timer4_init
      00055F CD 00 F3         [ 4] 1119 	call timer2_init
                                   1120 ; UART1 at 115200 BAUD
      000562 CD 02 E8         [ 4] 1121 	call uart1_init
                                   1122 ; UART3 at 115200 BAUD 
      000565 CD 02 A5         [ 4] 1123 	call uart3_init	
                                   1124 ; activate PE_4 (user button interrupt)
      000568 72 18 50 18      [ 1] 1125     bset PE_CR2,#USR_BTN_BIT 
                                   1126 ; display system information
      00056C AE 04 D1         [ 2] 1127 	ldw x,#software 
      00056F CD 00 00         [ 4] 1128 	call puts 
      000572 A6 01            [ 1] 1129 	ld a,#MAJOR 
      000574 C7 00 0D         [ 1] 1130 	ld acc8,a 
      000577 5F               [ 1] 1131 	clrw x 
      000578 CF 00 0B         [ 2] 1132 	ldw acc24,x
      00057B 72 5F 00 24      [ 1] 1133 	clr tab_width  
      00057F 35 0A 00 0A      [ 1] 1134 	mov base, #10 
      000583 CD 09 1E         [ 4] 1135 	call prti24 
      000586 A6 2E            [ 1] 1136 	ld a,#'.
      000588 CD 03 2B         [ 4] 1137 	call putc 
      00058B A6 00            [ 1] 1138 	ld a,#MINOR 
      00058D C7 00 0D         [ 1] 1139 	ld acc8,a 
      000590 5F               [ 1] 1140 	clrw x 
      000591 CF 00 0B         [ 2] 1141 	ldw acc24,x 
      000594 CD 09 1E         [ 4] 1142 	call prti24
      000597 A6 0D            [ 1] 1143 	ld a,#CR 
      000599 CD 03 2B         [ 4] 1144 	call putc
      00059C CD 14 3B         [ 4] 1145 	call seek_fdrive 
      00059F 9A               [ 1] 1146 	rim 
      0005A0 72 5C 00 15      [ 1] 1147 	inc seedy+1 
      0005A4 72 5C 00 13      [ 1] 1148 	inc seedx+1 
      0005A8 CD 06 25         [ 4] 1149 	call clear_basic
      0005AB CD 0E 5E         [ 4] 1150 	call ubound 
      0005AE CD 12 89         [ 4] 1151 	call beep_1khz  
      0005B1                       1152 2$:	
      0005B1 CD 05 BA         [ 4] 1153 	call warm_init
      0005B4 CD 05 E7         [ 4] 1154 	call load_autorun
      0005B7 CC 08 45         [ 2] 1155     jp cmd_line  
                                   1156 
      0005BA                       1157 warm_init:
      0005BA 72 5F 00 23      [ 1] 1158 	clr flags 
      0005BE 72 5F 00 20      [ 1] 1159 	clr loop_depth 
      0005C2 35 04 00 24      [ 1] 1160 	mov tab_width,#TAB_WIDTH 
      0005C6 35 0A 00 0A      [ 1] 1161 	mov base,#10 
      0005CA AE 00 00         [ 2] 1162 	ldw x,#0 
      0005CD CF 00 04         [ 2] 1163 	ldw basicptr,x 
      0005D0 CF 00 00         [ 2] 1164 	ldw in.w,x 
      0005D3 72 5F 00 03      [ 1] 1165 	clr count
      0005D7 81               [ 4] 1166 	ret 
                                   1167 
                                   1168 ;--------------------------
                                   1169 ; called by tb_error when
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1170 ; flag FAUTORUN is set.
                                   1171 ; There is a bug in autorun 
                                   1172 ; program so cancel it.
                                   1173 ;---------------------------
      0005D8                       1174 cancel_autorun:
      0005D8 AE 40 00         [ 2] 1175 	ldw x,#AUTORUN_NAME 
      0005DB CF 00 17         [ 2] 1176 	ldw farptr+1,x 
      0005DE 4F               [ 1] 1177 	clr a
      0005DF 5F               [ 1] 1178 	clrw x  
      0005E0 C7 00 16         [ 1] 1179 	ld farptr,a 
      0005E3 CD 02 0D         [ 4] 1180 	call write_byte 
      0005E6 81               [ 4] 1181 	ret 
                                   1182 
                                   1183 
                                   1184 ;--------------------------
                                   1185 ; if autorun file defined 
                                   1186 ; in eeprom address AUTORUN_NAME 
                                   1187 ; load and run it.
                                   1188 ;-------------------------
      0005E7                       1189 load_autorun:
      0005E7 90 AE 40 00      [ 2] 1190 	ldw y,#AUTORUN_NAME
      0005EB 90 F6            [ 1] 1191 	ld a,(y)
      0005ED 27 20            [ 1] 1192 	jreq 9$
      0005EF CD 14 A1         [ 4] 1193 	call search_file
      0005F2 25 05            [ 1] 1194 	jrc 2$ 
                                   1195 ; if file doesn't exit
      0005F4 CD 05 D8         [ 4] 1196 	call cancel_autorun
      0005F7 20 16            [ 2] 1197 	jra 9$ 
      0005F9 CD 15 BC         [ 4] 1198 2$:	call load_file
      0005FC AE 40 00         [ 2] 1199 	ldw x,#AUTORUN_NAME 
      0005FF CD 00 00         [ 4] 1200 	call puts
      000602 AE 06 10         [ 2] 1201 	ldw x,#autorun_msg 
      000605 CD 00 00         [ 4] 1202 	call puts 
      000608 72 1C 00 23      [ 1] 1203 	bset flags,#FAUTORUN 
      00060C CC 12 5B         [ 2] 1204 	jp run_it    
      00060F 81               [ 4] 1205 9$: ret 	
                                   1206 
      000610 20 6C 6F 61 64 65 64  1207 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1208 ;---------------------------
                                   1209 ; reset BASIC text variables 
                                   1210 ; and clear variables 
                                   1211 ;---------------------------
      000625                       1212 clear_basic:
      000625 72 5F 00 03      [ 1] 1213 	clr count
      000629 72 5F 00 01      [ 1] 1214 	clr in  
      00062D AE 00 6D         [ 2] 1215 	ldw x,#free_ram 
      000630 CF 00 1C         [ 2] 1216 	ldw txtbgn,x 
      000633 CF 00 1E         [ 2] 1217 	ldw txtend,x 
      000636 CD 04 A0         [ 4] 1218 	call clear_vars 
      000639 81               [ 4] 1219 	ret 
                                   1220 
                                   1221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1222 ;;   Tiny BASIC error messages     ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063A                       1224 err_msg:
      00063A 00 00 06 5A 06 67 06  1225 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             75 06 8E 06 9D
      000646 06 B3 06 C9 06 E3 06  1226 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             F4 07 05
      000650 07 11 07 44 07 54 07  1227 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             68 07 7B
                                   1228 
      00065A 4D 65 6D 6F 72 79 20  1229 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000667 73 79 6E 74 61 78 20  1230 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000675 6D 61 74 68 20 6F 70  1231 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00068E 64 69 76 69 73 69 6F  1232 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00069D 69 6E 76 61 6C 69 64  1233 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      0006B3 72 75 6E 20 74 69 6D  1234 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0006C9 63 6F 6D 6D 61 6E 64  1235 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0006E3 64 75 70 6C 69 63 61  1236 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0006F4 46 69 6C 65 20 6E 6F  1237 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000705 62 61 64 20 76 61 6C  1238 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      000711 46 69 6C 65 20 69 6E  1239 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000744 4E 6F 20 64 61 74 61  1240 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000754 4E 6F 20 70 72 6F 67  1241 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000768 46 69 6C 65 20 73 79  1242 err_no_fspace: .asciz "File system full.\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      00077B 42 75 66 66 65 72 20  1243 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1244 
      000788 0A 72 75 6E 20 74 69  1245 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      00079A 0A 63 6F 6D 70 69 6C  1246 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0007AB 6C 61 73 74 20 74 6F  1247 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1248 
      0007BB                       1249 syntax_error::
      0007BB A6 02            [ 1] 1250 	ld a,#ERR_SYNTAX 
                                   1251 
      0007BD                       1252 tb_error::
      0007BD 72 0A 00 23 47   [ 2] 1253 	btjt flags,#FCOMP,1$
      0007C2 88               [ 1] 1254 	push a 
      0007C3 AE 07 88         [ 2] 1255 	ldw x, #rt_msg 
      0007C6 CD 00 00         [ 4] 1256 	call puts 
      0007C9 84               [ 1] 1257 	pop a 
      0007CA AE 06 3A         [ 2] 1258 	ldw x, #err_msg 
      0007CD 72 5F 00 0C      [ 1] 1259 	clr acc16 
      0007D1 48               [ 1] 1260 	sll a
      0007D2 72 59 00 0C      [ 1] 1261 	rlc acc16  
      0007D6 C7 00 0D         [ 1] 1262 	ld acc8, a 
      0007D9 72 BB 00 0C      [ 2] 1263 	addw x,acc16 
      0007DD FE               [ 2] 1264 	ldw x,(x)
      0007DE CD 00 00         [ 4] 1265 	call puts
      0007E1 CE 00 04         [ 2] 1266 	ldw x,basicptr
      0007E4 C6 00 01         [ 1] 1267 	ld a,in 
      0007E7 CD 0F 27         [ 4] 1268 	call prt_basic_line
      0007EA AE 07 AB         [ 2] 1269 	ldw x,#tk_id 
      0007ED CD 00 00         [ 4] 1270 	call puts 
      0007F0 C6 00 02         [ 1] 1271 	ld a,in.saved 
      0007F3 5F               [ 1] 1272 	clrw x 
      0007F4 97               [ 1] 1273 	ld xl,a 
      0007F5 72 BB 00 04      [ 2] 1274 	addw x,basicptr 
      0007F9 F6               [ 1] 1275 	ld a,(x)
      0007FA 5F               [ 1] 1276 	clrw x 
      0007FB 97               [ 1] 1277 	ld xl,a 
      0007FC CD 09 0E         [ 4] 1278 	call print_int
      0007FF 72 0D 00 23 3A   [ 2] 1279 	btjf flags,#FAUTORUN ,6$
      000804 CD 05 D8         [ 4] 1280 	call cancel_autorun  
      000807 20 35            [ 2] 1281 	jra 6$
      000809                       1282 1$:	
      000809 88               [ 1] 1283 	push a 
      00080A AE 07 9A         [ 2] 1284 	ldw x,#comp_msg
      00080D CD 00 00         [ 4] 1285 	call puts 
      000810 84               [ 1] 1286 	pop a 
      000811 AE 06 3A         [ 2] 1287 	ldw x, #err_msg 
      000814 72 5F 00 0C      [ 1] 1288 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000818 48               [ 1] 1289 	sll a
      000819 72 59 00 0C      [ 1] 1290 	rlc acc16  
      00081D C7 00 0D         [ 1] 1291 	ld acc8, a 
      000820 72 BB 00 0C      [ 2] 1292 	addw x,acc16 
      000824 FE               [ 2] 1293 	ldw x,(x)
      000825 CD 00 00         [ 4] 1294 	call puts
      000828 AE 16 90         [ 2] 1295 	ldw x,#tib
      00082B CD 00 00         [ 4] 1296 	call puts 
      00082E A6 0D            [ 1] 1297 	ld a,#CR 
      000830 CD 03 2B         [ 4] 1298 	call putc
      000833 CE 00 00         [ 2] 1299 	ldw x,in.w
      000836 CD 00 00         [ 4] 1300 	call spaces
      000839 A6 5E            [ 1] 1301 	ld a,#'^
      00083B CD 03 2B         [ 4] 1302 	call putc 
      00083E AE 17 FF         [ 2] 1303 6$: ldw x,#STACK_EMPTY 
      000841 94               [ 1] 1304     ldw sp,x
      000842                       1305 warm_start:
      000842 CD 05 BA         [ 4] 1306 	call warm_init
                                   1307 ;----------------------------
                                   1308 ;   BASIC interpreter
                                   1309 ;----------------------------
      000845                       1310 cmd_line: ; user interface 
      000845 A6 0D            [ 1] 1311 	ld a,#CR 
      000847 CD 03 2B         [ 4] 1312 	call putc 
      00084A A6 3E            [ 1] 1313 	ld a,#'> 
      00084C CD 03 2B         [ 4] 1314 	call putc
      00084F CD 00 00         [ 4] 1315 	call readln
      000852 72 5D 00 03      [ 1] 1316 	tnz count 
      000856 27 ED            [ 1] 1317 	jreq cmd_line
      000858 CD 00 00         [ 4] 1318 	call compile
                                   1319 ; if text begin with a line number
                                   1320 ; the compiler set count to zero    
                                   1321 ; so code is not interpreted
      00085B 72 5D 00 03      [ 1] 1322 	tnz count 
      00085F 27 E4            [ 1] 1323 	jreq cmd_line
                                   1324 
                                   1325 ; if direct command 
                                   1326 ; it's ready to interpret 
                                   1327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1328 ;; This is the interpreter loop
                                   1329 ;; for each BASIC code line. 
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      000861                       1331 interpreter: 
      000861 C6 00 01         [ 1] 1332 	ld a,in 
      000864 C1 00 03         [ 1] 1333 	cp a,count 
      000867 2B 1D            [ 1] 1334 	jrmi interp_loop
      000869                       1335 next_line:
      000869 72 01 00 23 D7   [ 2] 1336 	btjf flags, #FRUN, cmd_line
      00086E CE 00 04         [ 2] 1337 	ldw x,basicptr
      000871 72 BB 00 00      [ 2] 1338 	addw x,in.w 
      000875 C3 00 1E         [ 2] 1339 	cpw x,txtend 
      000878 2A C8            [ 1] 1340 	jrpl warm_start
      00087A CF 00 04         [ 2] 1341 	ldw basicptr,x ; start of next line  
      00087D E6 02            [ 1] 1342 	ld a,(2,x)
      00087F C7 00 03         [ 1] 1343 	ld count,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000882 35 03 00 01      [ 1] 1344 	mov in,#3 ; skip first 3 bytes of line 
      000886                       1345 interp_loop: 
      000886 CD 08 AD         [ 4] 1346 	call next_token
      000889 A1 00            [ 1] 1347 	cp a,#TK_NONE 
      00088B 27 DC            [ 1] 1348 	jreq next_line 
      00088D A1 80            [ 1] 1349 	cp a,#TK_CMD
      00088F 26 03            [ 1] 1350 	jrne 1$
      000891 FD               [ 4] 1351 	call (x) 
      000892 20 F2            [ 2] 1352 	jra interp_loop 
      000894                       1353 1$:	 
      000894 A1 85            [ 1] 1354 	cp a,#TK_VAR
      000896 26 05            [ 1] 1355 	jrne 2$
      000898 CD 0E 91         [ 4] 1356 	call let_var  
      00089B 20 E9            [ 2] 1357 	jra interp_loop 
      00089D                       1358 2$:	
      00089D A1 06            [ 1] 1359 	cp a,#TK_ARRAY 
      00089F 26 05            [ 1] 1360 	jrne 3$
      0008A1 CD 0E 8E         [ 4] 1361 	call let_array 
      0008A4 20 E0            [ 2] 1362 	jra interp_loop
      0008A6                       1363 3$:	
      0008A6 A1 01            [ 1] 1364 	cp a,#TK_COLON 
      0008A8 27 DC            [ 1] 1365 	jreq interp_loop 
      0008AA CC 07 BB         [ 2] 1366 	jp syntax_error 
                                   1367 
                                   1368 		
                                   1369 ;--------------------------
                                   1370 ; extract next token from
                                   1371 ; token list 
                                   1372 ; basicptr -> base address 
                                   1373 ; in  -> offset in list array 
                                   1374 ; output:
                                   1375 ;   A 		token attribute
                                   1376 ;   X 		token value if there is one
                                   1377 ;----------------------------------------
      0008AD                       1378 next_token::
      0008AD 5F               [ 1] 1379 	clrw x 
      0008AE C6 00 01         [ 1] 1380 	ld a,in 
      0008B1 C0 00 03         [ 1] 1381 	sub a,count ; don't replace sub by cp!  
      0008B4 2B 01            [ 1] 1382 	jrmi 0$
      0008B6 81               [ 4] 1383 	ret  ; end of BASIC line 
      0008B7                       1384 0$: 
      0008B7 55 00 01 00 02   [ 1] 1385 	mov in.saved,in 
      0008BC 90 CE 00 04      [ 2] 1386 	ldw y,basicptr 
      0008C0 91 D6 00         [ 4] 1387 	ld a,([in.w],y)
      0008C3 72 5C 00 01      [ 1] 1388 	inc in  
      0008C7 4D               [ 1] 1389 	tnz a 
      0008C8 2B 2A            [ 1] 1390 	jrmi 6$
      0008CA A1 06            [ 1] 1391 	cp a,#TK_ARRAY
      0008CC 2A 3F            [ 1] 1392 	jrpl 9$  ; no attribute for these
      0008CE A1 01            [ 1] 1393 	cp a,#TK_COLON
      0008D0 27 3B            [ 1] 1394 	jreq 9$  
      0008D2                       1395 1$: ; 
      0008D2 A1 03            [ 1] 1396 	cp a,#TK_CHAR
      0008D4 26 0A            [ 1] 1397 	jrne 2$
      0008D6 41               [ 1] 1398 	exg a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008D7 91 D6 00         [ 4] 1399 	ld a,([in.w],y)
      0008DA 72 5C 00 01      [ 1] 1400 	inc in 
      0008DE 41               [ 1] 1401 	exg a,xl  
      0008DF 81               [ 4] 1402 	ret
      0008E0 A1 02            [ 1] 1403 2$:	cp a,#TK_QSTR 
      0008E2 26 29            [ 1] 1404 	jrne 9$
      0008E4 93               [ 1] 1405 	ldw x,y 
      0008E5 72 BB 00 00      [ 2] 1406 	addw x,in.w ; pointer to string 
                                   1407 ; move pointer after string 
      0008E9 91 6D 00         [ 4] 1408 3$:	tnz ([in.w],y)
      0008EC 27 1B            [ 1] 1409 	jreq 8$
      0008EE 72 5C 00 01      [ 1] 1410 	inc in 
      0008F2 20 F5            [ 2] 1411 	jra 3$
      0008F4                       1412 6$: 
      0008F4 72 B9 00 00      [ 2] 1413 	addw y,in.w 
      0008F8 90 FE            [ 2] 1414 	ldw y,(y)
      0008FA A1 84            [ 1] 1415 	cp a,#TK_INTGR
      0008FC 2A 06            [ 1] 1416 	jrpl 7$
      0008FE 72 A9 21 1E      [ 2] 1417 	addw y,#code_addr
      000902 90 FE            [ 2] 1418 	ldw y,(y) 
      000904 51               [ 1] 1419 7$:	exgw x,y 
      000905 72 5C 00 01      [ 1] 1420 	inc in
      000909 72 5C 00 01      [ 1] 1421 8$:	inc in 
      00090D                       1422 9$: 
      00090D 81               [ 4] 1423 	ret	
                                   1424 
                                   1425 ;-----------------------------------
                                   1426 ; print a 16 bit integer 
                                   1427 ; using variable 'base' as conversion
                                   1428 ; format.
                                   1429 ; input:
                                   1430 ;   X       integer to print 
                                   1431 ;   'base'    conversion base 
                                   1432 ; output:
                                   1433 ;   none 
                                   1434 ;-----------------------------------
      00090E                       1435 print_int:
      00090E 72 5F 00 0B      [ 1] 1436 	clr acc24 
      000912 CF 00 0C         [ 2] 1437 	ldw acc16,x 
      000915 72 0F 00 0C 04   [ 2] 1438 	btjf acc16,#7,prti24
      00091A 72 53 00 0B      [ 1] 1439 	cpl acc24 
                                   1440 
                                   1441 ;------------------------------------
                                   1442 ; print integer in acc24 
                                   1443 ; input:
                                   1444 ;	acc24 		integer to print 
                                   1445 ;	'base' 		numerical base for conversion 
                                   1446 ;   'tab_width' field width 
                                   1447 ;  output:
                                   1448 ;    A          string length
                                   1449 ;------------------------------------
      00091E                       1450 prti24:
      00091E CD 09 2A         [ 4] 1451     call itoa  ; conversion entier en  .asciz
      000921 CD 00 00         [ 4] 1452 	call right_align  
      000924 88               [ 1] 1453 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000925 CD 00 00         [ 4] 1454 	call puts
      000928 84               [ 1] 1455 	pop a 
      000929 81               [ 4] 1456     ret	
                                   1457 
                                   1458 ;------------------------------------
                                   1459 ; convert integer in acc24 to string
                                   1460 ; input:
                                   1461 ;   'base'	conversion base 
                                   1462 ;	acc24	integer to convert
                                   1463 ; output:
                                   1464 ;   X  		pointer to first char of string
                                   1465 ;   A       string length
                                   1466 ;------------------------------------
                           000001  1467 	SIGN=1  ; integer sign 
                           000002  1468 	LEN=2 
                           000003  1469 	PSTR=3
                           000004  1470 	VSIZE=4 ;locals size
      00092A                       1471 itoa::
      00092A                       1472 	_vars VSIZE
      00092A 52 04            [ 2]    1     sub sp,#VSIZE 
      00092C 0F 02            [ 1] 1473 	clr (LEN,sp) ; string length  
      00092E 0F 01            [ 1] 1474 	clr (SIGN,sp)    ; sign
      000930 C6 00 0A         [ 1] 1475 	ld a,base 
      000933 A1 0A            [ 1] 1476 	cp a,#10
      000935 26 0A            [ 1] 1477 	jrne 1$
                                   1478 	; base 10 string display with negative sign if bit 23==1
      000937 72 0F 00 0B 05   [ 2] 1479 	btjf acc24,#7,1$
      00093C 03 01            [ 1] 1480 	cpl (SIGN,sp)
      00093E CD 09 F1         [ 4] 1481 	call neg_acc24
      000941                       1482 1$:
                                   1483 ; initialize string pointer 
      000941 AE 16 90         [ 2] 1484 	ldw x,#tib 
      000944 1C 00 50         [ 2] 1485 	addw x,#TIB_SIZE
      000947 5A               [ 2] 1486 	decw x 
      000948 7F               [ 1] 1487 	clr (x)
      000949                       1488 itoa_loop:
      000949 C6 00 0A         [ 1] 1489     ld a,base
      00094C 1F 03            [ 2] 1490 	ldw (PSTR,sp),x 
      00094E CD 09 8F         [ 4] 1491     call divu24_8 ; acc24/A 
      000951 1E 03            [ 2] 1492 	ldw x,(PSTR,sp)
      000953 AB 30            [ 1] 1493     add a,#'0  ; remainder of division
      000955 A1 3A            [ 1] 1494     cp a,#'9+1
      000957 2B 02            [ 1] 1495     jrmi 2$
      000959 AB 07            [ 1] 1496     add a,#7 
      00095B                       1497 2$:	
      00095B 5A               [ 2] 1498 	decw x
      00095C F7               [ 1] 1499     ld (x),a
      00095D 0C 02            [ 1] 1500 	inc (LEN,sp)
                                   1501 	; if acc24==0 conversion done
      00095F C6 00 0B         [ 1] 1502 	ld a,acc24
      000962 CA 00 0C         [ 1] 1503 	or a,acc16
      000965 CA 00 0D         [ 1] 1504 	or a,acc8
      000968 26 DF            [ 1] 1505     jrne itoa_loop
                                   1506 	;conversion done, next add '$' or '-' as required
      00096A C6 00 0A         [ 1] 1507 	ld a,base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00096D A1 10            [ 1] 1508 	cp a,#16
      00096F 27 08            [ 1] 1509 	jreq 8$
      000971 7B 01            [ 1] 1510 	ld a,(SIGN,sp)
      000973 27 15            [ 1] 1511     jreq 10$
      000975 A6 2D            [ 1] 1512     ld a,#'-
      000977 20 0D            [ 2] 1513 	jra 9$ 
                                   1514 ; don't print more than 4 digits
                                   1515 ; in hexadecimal to avoid '-' sign 
                                   1516 ; extend display 	
      000979 7B 02            [ 1] 1517 8$: ld a,(LEN,sp) 
      00097B A1 05            [ 1] 1518 	cp a,#5 
      00097D 2B 05            [ 1] 1519 	jrmi 81$
      00097F 5C               [ 1] 1520 	incw x
      000980 0A 02            [ 1] 1521 	dec (LEN,sp)
      000982 20 F5            [ 2] 1522 	jra 8$
      000984                       1523 81$:	
      000984 A6 24            [ 1] 1524 	ld a,#'$ 
      000986 5A               [ 2] 1525 9$: decw x
      000987 F7               [ 1] 1526     ld (x),a
      000988 0C 02            [ 1] 1527 	inc (LEN,sp)
      00098A                       1528 10$:
      00098A 7B 02            [ 1] 1529 	ld a,(LEN,sp)
      00098C                       1530 	_drop VSIZE
      00098C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00098E 81               [ 4] 1531 	ret
                                   1532 
                                   1533 ;-------------------------------------
                                   1534 ; divide uint24_t by uint8_t
                                   1535 ; used to convert uint24_t to string
                                   1536 ; input:
                                   1537 ;	acc24	dividend
                                   1538 ;   A 		divisor
                                   1539 ; output:
                                   1540 ;   acc24	quotient
                                   1541 ;   A		remainder
                                   1542 ;------------------------------------- 
                                   1543 ; offset  on sp of arguments and locals
                           000001  1544 	U8   = 1   ; divisor on stack
                           000001  1545 	VSIZE =1
      00098F                       1546 divu24_8:
      00098F 89               [ 2] 1547 	pushw x ; save x
      000990 88               [ 1] 1548 	push a 
                                   1549 	; ld dividend UU:MM bytes in X
      000991 C6 00 0B         [ 1] 1550 	ld a, acc24
      000994 95               [ 1] 1551 	ld xh,a
      000995 C6 00 0C         [ 1] 1552 	ld a,acc24+1
      000998 97               [ 1] 1553 	ld xl,a
      000999 7B 01            [ 1] 1554 	ld a,(U8,SP) ; divisor
      00099B 62               [ 2] 1555 	div x,a ; UU:MM/U8
      00099C 88               [ 1] 1556 	push a  ;save remainder
      00099D 9E               [ 1] 1557 	ld a,xh
      00099E C7 00 0B         [ 1] 1558 	ld acc24,a
      0009A1 9F               [ 1] 1559 	ld a,xl
      0009A2 C7 00 0C         [ 1] 1560 	ld acc24+1,a
      0009A5 84               [ 1] 1561 	pop a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009A6 95               [ 1] 1562 	ld xh,a
      0009A7 C6 00 0D         [ 1] 1563 	ld a,acc24+2
      0009AA 97               [ 1] 1564 	ld xl,a
      0009AB 7B 01            [ 1] 1565 	ld a,(U8,sp) ; divisor
      0009AD 62               [ 2] 1566 	div x,a  ; R:LL/U8
      0009AE 6B 01            [ 1] 1567 	ld (U8,sp),a ; save remainder
      0009B0 9F               [ 1] 1568 	ld a,xl
      0009B1 C7 00 0D         [ 1] 1569 	ld acc24+2,a
      0009B4 84               [ 1] 1570 	pop a
      0009B5 85               [ 2] 1571 	popw x
      0009B6 81               [ 4] 1572 	ret
                                   1573 
                                   1574 ;--------------------------------------
                                   1575 ; unsigned multiply uint24_t by uint8_t
                                   1576 ; use to convert numerical string to uint24_t
                                   1577 ; input:
                                   1578 ;	acc24	uint24_t 
                                   1579 ;   A		uint8_t
                                   1580 ; output:
                                   1581 ;   acc24   A*acc24
                                   1582 ;-------------------------------------
                                   1583 ; local variables offset  on sp
                           000003  1584 	U8   = 3   ; A pushed on stack
                           000002  1585 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1586 	OVFH = 1  ; multiplication overflow high byte
                           000003  1587 	VSIZE = 3
      0009B7                       1588 mulu24_8:
      0009B7 89               [ 2] 1589 	pushw x    ; save X
                                   1590 	; local variables
      0009B8 88               [ 1] 1591 	push a     ; U8
      0009B9 5F               [ 1] 1592 	clrw x     ; initialize overflow to 0
      0009BA 89               [ 2] 1593 	pushw x    ; multiplication overflow
                                   1594 ; multiply low byte.
      0009BB C6 00 0D         [ 1] 1595 	ld a,acc24+2
      0009BE 97               [ 1] 1596 	ld xl,a
      0009BF 7B 03            [ 1] 1597 	ld a,(U8,sp)
      0009C1 42               [ 4] 1598 	mul x,a
      0009C2 9F               [ 1] 1599 	ld a,xl
      0009C3 C7 00 0D         [ 1] 1600 	ld acc24+2,a
      0009C6 9E               [ 1] 1601 	ld a, xh
      0009C7 6B 02            [ 1] 1602 	ld (OVFL,sp),a
                                   1603 ; multipy middle byte
      0009C9 C6 00 0C         [ 1] 1604 	ld a,acc24+1
      0009CC 97               [ 1] 1605 	ld xl,a
      0009CD 7B 03            [ 1] 1606 	ld a, (U8,sp)
      0009CF 42               [ 4] 1607 	mul x,a
                                   1608 ; add overflow to this partial product
      0009D0 72 FB 01         [ 2] 1609 	addw x,(OVFH,sp)
      0009D3 9F               [ 1] 1610 	ld a,xl
      0009D4 C7 00 0C         [ 1] 1611 	ld acc24+1,a
      0009D7 4F               [ 1] 1612 	clr a
      0009D8 A9 00            [ 1] 1613 	adc a,#0
      0009DA 6B 01            [ 1] 1614 	ld (OVFH,sp),a
      0009DC 9E               [ 1] 1615 	ld a,xh
      0009DD 6B 02            [ 1] 1616 	ld (OVFL,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1617 ; multiply most signficant byte	
      0009DF C6 00 0B         [ 1] 1618 	ld a, acc24
      0009E2 97               [ 1] 1619 	ld xl, a
      0009E3 7B 03            [ 1] 1620 	ld a, (U8,sp)
      0009E5 42               [ 4] 1621 	mul x,a
      0009E6 72 FB 01         [ 2] 1622 	addw x, (OVFH,sp)
      0009E9 9F               [ 1] 1623 	ld a, xl
      0009EA C7 00 0B         [ 1] 1624 	ld acc24,a
      0009ED 5B 03            [ 2] 1625     addw sp,#VSIZE
      0009EF 85               [ 2] 1626 	popw x
      0009F0 81               [ 4] 1627 	ret
                                   1628 
                                   1629 ;------------------------------------
                                   1630 ;  two's complement acc24
                                   1631 ;  input:
                                   1632 ;		acc24 variable
                                   1633 ;  output:
                                   1634 ;		acc24 variable
                                   1635 ;-------------------------------------
      0009F1                       1636 neg_acc24:
      0009F1 72 53 00 0D      [ 1] 1637 	cpl acc24+2
      0009F5 72 53 00 0C      [ 1] 1638 	cpl acc24+1
      0009F9 72 53 00 0B      [ 1] 1639 	cpl acc24
      0009FD A6 01            [ 1] 1640 	ld a,#1
      0009FF CB 00 0D         [ 1] 1641 	add a,acc24+2
      000A02 C7 00 0D         [ 1] 1642 	ld acc24+2,a
      000A05 4F               [ 1] 1643 	clr a
      000A06 C9 00 0C         [ 1] 1644 	adc a,acc24+1
      000A09 C7 00 0C         [ 1] 1645 	ld acc24+1,a 
      000A0C 4F               [ 1] 1646 	clr a 
      000A0D C9 00 0B         [ 1] 1647 	adc a,acc24 
      000A10 C7 00 0B         [ 1] 1648 	ld acc24,a 
      000A13 81               [ 4] 1649 	ret
                                   1650 
                                   1651 
                                   1652 
                                   1653 
                                   1654 ;------------------------------------
                                   1655 ; convert alpha to uppercase
                                   1656 ; input:
                                   1657 ;    a  character to convert
                                   1658 ; output:
                                   1659 ;    a  uppercase character
                                   1660 ;------------------------------------
      000A14                       1661 to_upper::
      000A14 A1 61            [ 1] 1662 	cp a,#'a
      000A16 2A 01            [ 1] 1663 	jrpl 1$
      000A18 81               [ 4] 1664 0$:	ret
      000A19 A1 7A            [ 1] 1665 1$: cp a,#'z	
      000A1B 22 FB            [ 1] 1666 	jrugt 0$
      000A1D A0 20            [ 1] 1667 	sub a,#32
      000A1F 81               [ 4] 1668 	ret
                                   1669 	
                                   1670 ;------------------------------------
                                   1671 ; convert pad content in integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1672 ; input:
                                   1673 ;    x		.asciz to convert
                                   1674 ; output:
                                   1675 ;    acc24      int24_t
                                   1676 ;------------------------------------
                                   1677 	; local variables
                           000001  1678 	SIGN=1 ; 1 byte, 
                           000002  1679 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1680 	TEMP=3 ; 1 byte, temporary storage
                           000003  1681 	VSIZE=3 ; 3 bytes reserved for local storage
      000A20                       1682 atoi24::
      000A20 89               [ 2] 1683 	pushw x 
      000A21                       1684 	_vars VSIZE
      000A21 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1685 	; acc24=0 
      000A23 72 5F 00 0B      [ 1] 1686 	clr acc24    
      000A27 72 5F 00 0C      [ 1] 1687 	clr acc16
      000A2B 72 5F 00 0D      [ 1] 1688 	clr acc8 
      000A2F 0F 01            [ 1] 1689 	clr (SIGN,sp)
      000A31 A6 0A            [ 1] 1690 	ld a,#10
      000A33 6B 02            [ 1] 1691 	ld (BASE,sp),a ; default base decimal
      000A35 F6               [ 1] 1692 	ld a,(x)
      000A36 27 47            [ 1] 1693 	jreq 9$  ; completed if 0
      000A38 A1 2D            [ 1] 1694 	cp a,#'-
      000A3A 26 04            [ 1] 1695 	jrne 1$
      000A3C 03 01            [ 1] 1696 	cpl (SIGN,sp)
      000A3E 20 08            [ 2] 1697 	jra 2$
      000A40 A1 24            [ 1] 1698 1$: cp a,#'$
      000A42 26 06            [ 1] 1699 	jrne 3$
      000A44 A6 10            [ 1] 1700 	ld a,#16
      000A46 6B 02            [ 1] 1701 	ld (BASE,sp),a
      000A48 5C               [ 1] 1702 2$:	incw x
      000A49 F6               [ 1] 1703 	ld a,(x)
      000A4A                       1704 3$:	
      000A4A A1 61            [ 1] 1705 	cp a,#'a
      000A4C 2B 02            [ 1] 1706 	jrmi 4$
      000A4E A0 20            [ 1] 1707 	sub a,#32
      000A50 A1 30            [ 1] 1708 4$:	cp a,#'0
      000A52 2B 2B            [ 1] 1709 	jrmi 9$
      000A54 A0 30            [ 1] 1710 	sub a,#'0
      000A56 A1 0A            [ 1] 1711 	cp a,#10
      000A58 2B 06            [ 1] 1712 	jrmi 5$
      000A5A A0 07            [ 1] 1713 	sub a,#7
      000A5C 11 02            [ 1] 1714 	cp a,(BASE,sp)
      000A5E 2A 1F            [ 1] 1715 	jrpl 9$
      000A60 6B 03            [ 1] 1716 5$:	ld (TEMP,sp),a
      000A62 7B 02            [ 1] 1717 	ld a,(BASE,sp)
      000A64 CD 09 B7         [ 4] 1718 	call mulu24_8
      000A67 7B 03            [ 1] 1719 	ld a,(TEMP,sp)
      000A69 CB 00 0D         [ 1] 1720 	add a,acc24+2
      000A6C C7 00 0D         [ 1] 1721 	ld acc24+2,a
      000A6F 4F               [ 1] 1722 	clr a
      000A70 C9 00 0C         [ 1] 1723 	adc a,acc24+1
      000A73 C7 00 0C         [ 1] 1724 	ld acc24+1,a
      000A76 4F               [ 1] 1725 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A77 C9 00 0B         [ 1] 1726 	adc a,acc24
      000A7A C7 00 0B         [ 1] 1727 	ld acc24,a
      000A7D 20 C9            [ 2] 1728 	jra 2$
      000A7F 0D 01            [ 1] 1729 9$:	tnz (SIGN,sp)
      000A81 27 03            [ 1] 1730     jreq atoi_exit
      000A83 CD 09 F1         [ 4] 1731     call neg_acc24
      000A86                       1732 atoi_exit: 
      000A86                       1733 	_drop VSIZE
      000A86 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A88 85               [ 2] 1734 	popw x ; restore x
      000A89 81               [ 4] 1735 	ret
                                   1736 
                                   1737 
                                   1738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1739 ;;   TINY BASIC  operators,
                                   1740 ;;   commands and functions 
                                   1741 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1742 
                                   1743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1744 ;;  Arithmetic operators
                                   1745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1746 
                                   1747 ;debug support
                           000001  1748 DEBUG_PRT=1
                           000001  1749 .if DEBUG_PRT 
                           000001  1750 	REGA=1
                           000002  1751 	SAVEB=2
                           000003  1752 	REGX=3
                           000005  1753 	REGY=5
                           000007  1754 	ACC24=7
                           000009  1755 	VSIZE=9 
      000A8A                       1756 printxy:
      000A8A                       1757 	_vars VSIZE 
      000A8A 52 09            [ 2]    1     sub sp,#VSIZE 
      000A8C 6B 01            [ 1] 1758 	ld (REGA,sp),a 
      000A8E C6 00 0A         [ 1] 1759 	ld a,base 
      000A91 6B 02            [ 1] 1760 	ld (SAVEB,sp),a
      000A93 1F 03            [ 2] 1761 	ldw (REGX,sp),x
      000A95 17 05            [ 2] 1762 	ldw (REGY,sp),y
      000A97 CE 00 0B         [ 2] 1763 	ldw x,acc24 
      000A9A C6 00 0D         [ 1] 1764 	ld a,acc8 
      000A9D 1F 07            [ 2] 1765 	ldw (ACC24,sp),x 
      000A9F 6B 09            [ 1] 1766 	ld (ACC24+2,sp),a 
      000AA1 35 10 00 0A      [ 1] 1767 	mov base,#16 
      000AA5 5F               [ 1] 1768 	clrw x 
      000AA6 7B 01            [ 1] 1769 	ld a,(REGA,sp)
      000AA8 97               [ 1] 1770 	ld xl,a 
      000AA9 CD 09 0E         [ 4] 1771 	call print_int
      000AAC A6 20            [ 1] 1772 	ld a,#SPACE 
      000AAE CD 03 2B         [ 4] 1773 	call putc  
      000AB1 1E 03            [ 2] 1774 	ldw x,(REGX,sp)
      000AB3 CD 09 0E         [ 4] 1775 	call print_int 
      000AB6 A6 20            [ 1] 1776 	ld a,#SPACE 
      000AB8 CD 03 2B         [ 4] 1777 	call putc  
      000ABB 1E 05            [ 2] 1778 	ldw x,(REGY,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000ABD CD 09 0E         [ 4] 1779 	call print_int 
      000AC0 A6 0D            [ 1] 1780 	ld a,#CR 
      000AC2 CD 03 2B         [ 4] 1781 	call putc 
      000AC5 7B 09            [ 1] 1782 	ld a,(ACC24+2,sp)
      000AC7 1E 07            [ 2] 1783 	ldw x,(ACC24,sp)
      000AC9 CF 00 0B         [ 2] 1784 	ldw acc24,x 
      000ACC C7 00 0D         [ 1] 1785 	ld acc8,a
      000ACF 7B 02            [ 1] 1786 	ld a,(SAVEB,sp)
      000AD1 C7 00 0A         [ 1] 1787 	ld base,a 
      000AD4 7B 01            [ 1] 1788 	ld a,(REGA,sp)
      000AD6 1E 03            [ 2] 1789 	ldw x,(REGX,sp)
      000AD8 16 05            [ 2] 1790 	ldw y,(REGY,sp)
      000ADA                       1791 	_drop VSIZE 
      000ADA 5B 09            [ 2]    1     addw sp,#VSIZE 
      000ADC 81               [ 4] 1792 	ret 
                                   1793 .endif 
                                   1794 
                                   1795 
                                   1796 ;--------------------------------------
                                   1797 ;  multiply 2 uint16_t return uint32_t
                                   1798 ;  input:
                                   1799 ;     x       uint16_t 
                                   1800 ;     y       uint16_t 
                                   1801 ;  output:
                                   1802 ;     x       product bits 15..0
                                   1803 ;     y       product bits 31..16 
                                   1804 ;---------------------------------------
                           000001  1805 		U1=1  ; uint16_t 
                           000003  1806 		DBL=3 ; uint32_t
                           000006  1807 		VSIZE=6
      000ADD                       1808 umstar:
      000ADD                       1809 	_vars VSIZE 
      000ADD 52 06            [ 2]    1     sub sp,#VSIZE 
      000ADF 1F 01            [ 2] 1810 	ldw (U1,sp),x 
                                   1811 ;initialize bits 31..16 of 
                                   1812 ;product to zero 
      000AE1 0F 03            [ 1] 1813 	clr (DBL,sp)
      000AE3 0F 04            [ 1] 1814 	clr (DBL+1,sp)
                                   1815 ; produc U1L*U2L 
      000AE5 90 9F            [ 1] 1816 	ld a,yl 
      000AE7 42               [ 4] 1817 	mul x,a 
      000AE8 1F 05            [ 2] 1818 	ldw (DBL+2,sp),x
                                   1819 ; product U1H*U2L 
      000AEA 7B 01            [ 1] 1820 	ld a,(U1,sp) ; xh 
      000AEC 93               [ 1] 1821 	ldw x,y
      000AED 42               [ 4] 1822 	mul x,a 
      000AEE 4F               [ 1] 1823 	clr a 
      000AEF 72 FB 04         [ 2] 1824 	addw x,(DBL+1,sp) 
      000AF2 4F               [ 1] 1825 	clr a 
      000AF3 19 03            [ 1] 1826 	adc a,(DBL,sp) 
      000AF5 6B 03            [ 1] 1827 	ld (DBL,sp),a ; bits 23..17 
      000AF7 1F 04            [ 2] 1828 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1829 ; product U1L*U2H
      000AF9 90 5E            [ 1] 1830 	swapw y 
      000AFB 93               [ 1] 1831 	ldw x,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AFC 7B 02            [ 1] 1832 	ld a,(U1+1,sp)
      000AFE 42               [ 4] 1833 	mul x,a
      000AFF 72 FB 04         [ 2] 1834 	addw x,(DBL+1,sp)
      000B02 4F               [ 1] 1835 	clr a 
      000B03 19 03            [ 1] 1836 	adc a,(DBL,sp)
      000B05 6B 03            [ 1] 1837 	ld (DBL,sp),a 
      000B07 1F 04            [ 2] 1838 	ldw (DBL+1,sp),x 
                                   1839 ; product U1H*U2H 	
      000B09 7B 01            [ 1] 1840 	ld a,(U1,sp)
      000B0B 93               [ 1] 1841 	ldw x,y  
      000B0C 42               [ 4] 1842 	mul x,a 
      000B0D 72 FB 03         [ 2] 1843 	addw x,(DBL,sp)
      000B10 90 93            [ 1] 1844 	ldw y,x 
      000B12 1E 05            [ 2] 1845 	ldw x,(DBL+2,sp)
      000B14                       1846 	_drop VSIZE 
      000B14 5B 06            [ 2]    1     addw sp,#VSIZE 
      000B16 81               [ 4] 1847 	ret
                                   1848 
                                   1849 
                                   1850 ;-------------------------------------
                                   1851 ; multiply 2 integers
                                   1852 ; input:
                                   1853 ;  	x       n1 
                                   1854 ;   y 		n2 
                                   1855 ; output:
                                   1856 ;	X        N1*N2 bits 15..0
                                   1857 ;   Y        N1*N2 bits 31..16 
                                   1858 ;-------------------------------------
                           000001  1859 	SIGN=1
                           000001  1860 	VSIZE=1
      000B17                       1861 multiply:
      000B17                       1862 	_vars VSIZE 
      000B17 52 01            [ 2]    1     sub sp,#VSIZE 
      000B19 0F 01            [ 1] 1863 	clr (SIGN,sp)
      000B1B 9E               [ 1] 1864 	ld a,xh 
      000B1C A4 80            [ 1] 1865 	and a,#0x80
      000B1E 2A 03            [ 1] 1866 	jrpl 1$
      000B20 03 01            [ 1] 1867 	cpl (SIGN,sp)
      000B22 50               [ 2] 1868 	negw x 
      000B23                       1869 1$:	
      000B23 90 9E            [ 1] 1870 	ld a,yh
      000B25 A4 80            [ 1] 1871 	and a,#0x80  
      000B27 2A 04            [ 1] 1872 	jrpl 2$ 
      000B29 03 01            [ 1] 1873 	cpl (SIGN,sp)
      000B2B 90 50            [ 2] 1874 	negw y 
      000B2D                       1875 2$:	
      000B2D CD 0A DD         [ 4] 1876 	call umstar
      000B30 7B 01            [ 1] 1877 	ld a,(SIGN,sp)
      000B32 27 03            [ 1] 1878 	jreq 3$
      000B34 CD 0B 64         [ 4] 1879 	call dneg 
      000B37                       1880 3$:	
      000B37                       1881 	_drop VSIZE 
      000B37 5B 01            [ 2]    1     addw sp,#VSIZE 
      000B39 81               [ 4] 1882 	ret
                                   1883 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1884 ;--------------------------------------
                                   1885 ; divide uint32_t/uint16_t
                                   1886 ; return:  quotient and remainder 
                                   1887 ; quotient expected to be uint16_t 
                                   1888 ; input:
                                   1889 ;   DBLDIVDND    on stack 
                                   1890 ;   X            divisor 
                                   1891 ; output:
                                   1892 ;   X            quotient 
                                   1893 ;   Y            remainder 
                                   1894 ;---------------------------------------
                           000003  1895 	VSIZE=3
      000B3A                       1896 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000B3A                       1897 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1898 	; local variables 
                           000001  1899 	DIVISOR=1 
                           000003  1900 	CNTR=3 
      000B3A                       1901 udiv32_16:
      000B3A                       1902 	_vars VSIZE 
      000B3A 52 03            [ 2]    1     sub sp,#VSIZE 
      000B3C 1F 01            [ 2] 1903 	ldw (DIVISOR,sp),x	; save divisor 
      000B3E 1E 08            [ 2] 1904 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000B40 16 06            [ 2] 1905 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000B42 90 5D            [ 2] 1906 	tnzw y
      000B44 26 06            [ 1] 1907 	jrne long_division 
      000B46 16 01            [ 2] 1908 	ldw y,(DIVISOR,sp)
      000B48 65               [ 2] 1909 	divw x,y
      000B49                       1910 	_drop VSIZE 
      000B49 5B 03            [ 2]    1     addw sp,#VSIZE 
      000B4B 81               [ 4] 1911 	ret
      000B4C                       1912 long_division:
      000B4C 51               [ 1] 1913 	exgw x,y ; hi in x, lo in y 
      000B4D A6 11            [ 1] 1914 	ld a,#17 
      000B4F 6B 03            [ 1] 1915 	ld (CNTR,sp),a
      000B51                       1916 1$:
      000B51 13 01            [ 2] 1917 	cpw x,(DIVISOR,sp)
      000B53 2B 03            [ 1] 1918 	jrmi 2$
      000B55 72 F0 01         [ 2] 1919 	subw x,(DIVISOR,sp)
      000B58 8C               [ 1] 1920 2$:	ccf 
      000B59 90 59            [ 2] 1921 	rlcw y 
      000B5B 59               [ 2] 1922 	rlcw x 
      000B5C 0A 03            [ 1] 1923 	dec (CNTR,sp)
      000B5E 26 F1            [ 1] 1924 	jrne 1$
      000B60 51               [ 1] 1925 	exgw x,y 
      000B61                       1926 	_drop VSIZE 
      000B61 5B 03            [ 2]    1     addw sp,#VSIZE 
      000B63 81               [ 4] 1927 	ret
                                   1928 
                                   1929 ;-----------------------------
                                   1930 ; negate double int.
                                   1931 ; input:
                                   1932 ;   x     bits 15..0
                                   1933 ;   y     bits 31..16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1934 ; output: 
                                   1935 ;   x     bits 15..0
                                   1936 ;   y     bits 31..16
                                   1937 ;-----------------------------
      000B64                       1938 dneg:
      000B64 53               [ 2] 1939 	cplw x 
      000B65 90 53            [ 2] 1940 	cplw y 
      000B67 1C 00 01         [ 2] 1941 	addw x,#1 
      000B6A 24 02            [ 1] 1942 	jrnc 1$
      000B6C 90 5C            [ 1] 1943 	incw y 
      000B6E 81               [ 4] 1944 1$: ret 
                                   1945 
                                   1946 
                                   1947 ;--------------------------------
                                   1948 ; sign extend single to double
                                   1949 ; input:
                                   1950 ;   x    int16_t
                                   1951 ; output:
                                   1952 ;   x    int32_t bits 15..0
                                   1953 ;   y    int32_t bits 31..16
                                   1954 ;--------------------------------
      000B6F                       1955 dbl_sign_extend:
      000B6F 90 5F            [ 1] 1956 	clrw y
      000B71 9E               [ 1] 1957 	ld a,xh 
      000B72 A4 80            [ 1] 1958 	and a,#0x80 
      000B74 27 02            [ 1] 1959 	jreq 1$
      000B76 90 53            [ 2] 1960 	cplw y
      000B78 81               [ 4] 1961 1$: ret 	
                                   1962 
                                   1963 
                                   1964 ;----------------------------------
                                   1965 ;  euclidian divide dbl/n1 
                                   1966 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1967 ; input:
                                   1968 ;    dbl    int32_t on stack 
                                   1969 ;    x 		n1   int16_t  disivor  
                                   1970 ; output:
                                   1971 ;    X      dbl/x  int16_t 
                                   1972 ;    Y      remainder int16_t 
                                   1973 ;----------------------------------
                           000008  1974 	VSIZE=8
      000B79                       1975 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000B79                       1976 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000B79                       1977 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1978 	; local variables
                           000001  1979 	DBLHI=1
                           000003  1980 	DBLLO=3 
                           000005  1981 	SDIVSR=5 ; sign divisor
                           000006  1982 	SQUOT=6 ; sign dividend 
                           000007  1983 	DIVISR=7 ; divisor 
      000B79                       1984 div32_16:
      000B79                       1985 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B79 52 08            [ 2]    1     sub sp,#VSIZE 
      000B7B 0F 05            [ 1] 1986 	clr (SDIVSR,sp)
      000B7D 0F 06            [ 1] 1987 	clr (SQUOT,sp)
                                   1988 ; copy arguments 
      000B7F 16 0B            [ 2] 1989 	ldw y,(DIVDNDHI,sp)
      000B81 17 01            [ 2] 1990 	ldw (DBLHI,sp),y
      000B83 16 0D            [ 2] 1991 	ldw y,(DIVDNDLO,sp)
      000B85 17 03            [ 2] 1992 	ldw (DBLLO,sp),y 
                                   1993 ; check for 0 divisor
      000B87 5D               [ 2] 1994 	tnzw x 
      000B88 26 05            [ 1] 1995     jrne 0$
      000B8A A6 04            [ 1] 1996 	ld a,#ERR_DIV0 
      000B8C CC 07 BD         [ 2] 1997 	jp tb_error 
                                   1998 ; check divisor sign 	
      000B8F 9E               [ 1] 1999 0$:	ld a,xh 
      000B90 A4 80            [ 1] 2000 	and a,#0x80 
      000B92 27 05            [ 1] 2001 	jreq 1$
      000B94 03 05            [ 1] 2002 	cpl (SDIVSR,sp)
      000B96 03 06            [ 1] 2003 	cpl (SQUOT,sp)
      000B98 50               [ 2] 2004 	negw x
      000B99 1F 07            [ 2] 2005 1$:	ldw (DIVISR,sp),x
                                   2006 ; check dividend sign 	 
      000B9B 7B 01            [ 1] 2007  	ld a,(DBLHI,sp) 
      000B9D A4 80            [ 1] 2008 	and a,#0x80 
      000B9F 27 0D            [ 1] 2009 	jreq 2$ 
      000BA1 03 06            [ 1] 2010 	cpl (SQUOT,sp)
      000BA3 1E 03            [ 2] 2011 	ldw x,(DBLLO,sp)
      000BA5 16 01            [ 2] 2012 	ldw y,(DBLHI,sp)
      000BA7 CD 0B 64         [ 4] 2013 	call dneg 
      000BAA 1F 03            [ 2] 2014 	ldw (DBLLO,sp),x 
      000BAC 17 01            [ 2] 2015 	ldw (DBLHI,sp),y 
      000BAE 1E 07            [ 2] 2016 2$:	ldw x,(DIVISR,sp)
      000BB0 CD 0B 3A         [ 4] 2017 	call udiv32_16
      000BB3 90 5D            [ 2] 2018 	tnzw y 
      000BB5 27 11            [ 1] 2019 	jreq 3$ 
                                   2020 ; x=quotient 
                                   2021 ; y=remainder 
                                   2022 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000BB7 7B 06            [ 1] 2023 	ld a,(SQUOT,sp)
      000BB9 18 05            [ 1] 2024 	xor a,(SDIVSR,sp)
      000BBB 27 0B            [ 1] 2025 	jreq 3$
      000BBD 5C               [ 1] 2026 	incw x 
      000BBE 90 CF 00 0C      [ 2] 2027 	ldw acc16,y 
      000BC2 16 07            [ 2] 2028 	ldw y,(DIVISR,sp)
      000BC4 72 B2 00 0C      [ 2] 2029 	subw y,acc16
                                   2030 ; sign quotient
      000BC8 7B 06            [ 1] 2031 3$:	ld a,(SQUOT,sp)
      000BCA 27 01            [ 1] 2032 	jreq 4$
      000BCC 50               [ 2] 2033 	negw x 
      000BCD                       2034 4$:	
      000BCD                       2035 	_drop VSIZE 
      000BCD 5B 08            [ 2]    1     addw sp,#VSIZE 
      000BCF 81               [ 4] 2036 	ret 
                                   2037 
                                   2038 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2039 
                                   2040 ;----------------------------------
                                   2041 ; division x/y 
                                   2042 ; input:
                                   2043 ;    X       dividend
                                   2044 ;    Y       divisor 
                                   2045 ; output:
                                   2046 ;    X       quotient
                                   2047 ;    Y       remainder 
                                   2048 ;-----------------------------------
                           000004  2049 	VSIZE=4 
                                   2050 	; local variables 
                           000001  2051 	DBLHI=1
                           000003  2052 	DBLLO=3
      000BD0                       2053 divide: 
      000BD0                       2054 	_vars VSIZE 
      000BD0 52 04            [ 2]    1     sub sp,#VSIZE 
      000BD2 90 CF 00 0C      [ 2] 2055 	ldw acc16,y
      000BD6 CD 0B 6F         [ 4] 2056 	call dbl_sign_extend
      000BD9 1F 03            [ 2] 2057 	ldw (DBLLO,sp),x 
      000BDB 17 01            [ 2] 2058 	ldw (DBLHI,sp),y 
      000BDD CE 00 0C         [ 2] 2059 	ldw x,acc16 
      000BE0 CD 0B 79         [ 4] 2060 	call div32_16 
      000BE3                       2061 	_drop VSIZE 
      000BE3 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BE5 81               [ 4] 2062 	ret
                                   2063 
                                   2064 
                                   2065 ;----------------------------------
                                   2066 ;  remainder resulting from euclidian 
                                   2067 ;  division of x/y 
                                   2068 ; input:
                                   2069 ;   x   	dividend int16_t 
                                   2070 ;   y 		divisor int16_t
                                   2071 ; output:
                                   2072 ;   X       n1%n2 
                                   2073 ;----------------------------------
      000BE6                       2074 modulo:
      000BE6 CD 0B D0         [ 4] 2075 	call divide
      000BE9 93               [ 1] 2076 	ldw x,y 
      000BEA 81               [ 4] 2077 	ret 
                                   2078 
                                   2079 ;----------------------------------
                                   2080 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2081 ; return expr1*expr2/expr3 
                                   2082 ; product result is int32_t and 
                                   2083 ; divisiont is int32_t/int16_t
                                   2084 ;----------------------------------
                           000004  2085 	DBL_SIZE=4 
      000BEB                       2086 muldiv:
      000BEB CD 0C 61         [ 4] 2087 	call func_args 
      000BEE A1 03            [ 1] 2088 	cp a,#3 
      000BF0 27 03            [ 1] 2089 	jreq 1$
      000BF2 CC 07 BB         [ 2] 2090 	jp syntax_error
      000BF5                       2091 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000BF5 1E 05            [ 2] 2092 	ldw x,(5,sp) ; expr1
      000BF7 16 03            [ 2] 2093 	ldw y,(3,sp) ; expr2
      000BF9 CD 0B 17         [ 4] 2094 	call multiply 
      000BFC 1F 05            [ 2] 2095 	ldw (5,sp),x  ;int32_t 15..0
      000BFE 17 03            [ 2] 2096 	ldw (3,sp),y  ;int32_t 31..16
      000C00 85               [ 2] 2097 	popw x        ; expr3 
      000C01 CD 0B 79         [ 4] 2098 	call div32_16 ; int32_t/expr3 
      000C04                       2099 	_drop DBL_SIZE
      000C04 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000C06 81               [ 4] 2100 	ret 
                                   2101 
                                   2102 
                                   2103 ;---------------------------------
                                   2104 ; dictionary search 
                                   2105 ; input:
                                   2106 ;	X 		dictionary entry point, name field  
                                   2107 ;   y		.asciz name to search 
                                   2108 ; output:
                                   2109 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2110 ;  X		cmd_index ; execution address | 0 
                                   2111 ;---------------------------------
                           000001  2112 	NLEN=1 ; cmd length 
                           000002  2113 	XSAVE=2
                           000004  2114 	YSAVE=4
                           000005  2115 	VSIZE=5 
      000C07                       2116 search_dict::
      000C07                       2117 	_vars VSIZE 
      000C07 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2118 
      000C09 17 04            [ 2] 2119 	ldw (YSAVE,sp),y 
      000C0B                       2120 search_next:
      000C0B 1F 02            [ 2] 2121 	ldw (XSAVE,sp),x 
                                   2122 ; get name length in dictionary	
      000C0D F6               [ 1] 2123 	ld a,(x)
      000C0E A4 0F            [ 1] 2124 	and a,#0xf 
      000C10 6B 01            [ 1] 2125 	ld (NLEN,sp),a  
      000C12 16 04            [ 2] 2126 	ldw y,(YSAVE,sp) ; name pointer 
      000C14 5C               [ 1] 2127 	incw x 
      000C15                       2128 cp_loop:
      000C15 90 F6            [ 1] 2129 	ld a,(y)
      000C17 27 1B            [ 1] 2130 	jreq str_match 
      000C19 0D 01            [ 1] 2131 	tnz (NLEN,sp)
      000C1B 27 0A            [ 1] 2132 	jreq no_match  
      000C1D F1               [ 1] 2133 	cp a,(x)
      000C1E 26 07            [ 1] 2134 	jrne no_match 
      000C20 90 5C            [ 1] 2135 	incw y 
      000C22 5C               [ 1] 2136 	incw x
      000C23 0A 01            [ 1] 2137 	dec (NLEN,sp)
      000C25 20 EE            [ 2] 2138 	jra cp_loop 
      000C27                       2139 no_match:
      000C27 1E 02            [ 2] 2140 	ldw x,(XSAVE,sp) 
      000C29 1D 00 02         [ 2] 2141 	subw x,#2 ; move X to link field
      000C2C 4B 00            [ 1] 2142 	push #TK_NONE 
      000C2E FE               [ 2] 2143 	ldw x,(x) ; next word link 
      000C2F 84               [ 1] 2144 	pop a ; TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000C30 27 1F            [ 1] 2145 	jreq search_exit  ; not found  
                                   2146 ;try next 
      000C32 20 D7            [ 2] 2147 	jra search_next
      000C34                       2148 str_match:
      000C34 1E 02            [ 2] 2149 	ldw x,(XSAVE,sp)
      000C36 F6               [ 1] 2150 	ld a,(X)
      000C37 6B 01            [ 1] 2151 	ld (NLEN,sp),a ; needed to test keyword type  
      000C39 A4 0F            [ 1] 2152 	and a,#0xf 
                                   2153 ; move x to procedure address field 	
      000C3B 4C               [ 1] 2154 	inc a 
      000C3C C7 00 0D         [ 1] 2155 	ld acc8,a 
      000C3F 72 5F 00 0C      [ 1] 2156 	clr acc16 
      000C43 72 BB 00 0C      [ 2] 2157 	addw x,acc16 
      000C47 FE               [ 2] 2158 	ldw x,(x) ; routine index  
                                   2159 ;determine keyword type bits 7:6 
      000C48 7B 01            [ 1] 2160 	ld a,(NLEN,sp)
      000C4A 4E               [ 1] 2161 	swap a 
      000C4B A4 0C            [ 1] 2162 	and a,#0xc
      000C4D 44               [ 1] 2163 	srl a
      000C4E 44               [ 1] 2164 	srl a 
      000C4F AB 80            [ 1] 2165 	add a,#128
      000C51                       2166 search_exit: 
      000C51                       2167 	_drop VSIZE 	 
      000C51 5B 05            [ 2]    1     addw sp,#VSIZE 
      000C53 81               [ 4] 2168 	ret 
                                   2169 
                                   2170 ;---------------------
                                   2171 ; check if next token
                                   2172 ;  is of expected type 
                                   2173 ; input:
                                   2174 ;   A 		 expected token attribute
                                   2175 ;  ouput:
                                   2176 ;   none     if fail call syntax_error 
                                   2177 ;--------------------
      000C54                       2178 expect:
      000C54 88               [ 1] 2179 	push a 
      000C55 CD 08 AD         [ 4] 2180 	call next_token 
      000C58 11 01            [ 1] 2181 	cp a,(1,sp)
      000C5A 27 03            [ 1] 2182 	jreq 1$
      000C5C CC 07 BB         [ 2] 2183 	jp syntax_error
      000C5F 84               [ 1] 2184 1$: pop a 
      000C60 81               [ 4] 2185 	ret 
                                   2186 
                                   2187 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2188 ; parse arguments list 
                                   2189 ; between ()
                                   2190 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C61                       2191 func_args:
      000C61 A6 07            [ 1] 2192 	ld a,#TK_LPAREN 
      000C63 CD 0C 54         [ 4] 2193 	call expect 
                                   2194 ; expected to continue in arg_list 
                                   2195 ; caller must check for TK_RPAREN 
                                   2196 
                                   2197 ;-------------------------------
                                   2198 ; parse embedded BASIC routines 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2199 ; arguments list.
                                   2200 ; arg_list::=  rel[','rel]*
                                   2201 ; all arguments are of integer type
                                   2202 ; and pushed on stack 
                                   2203 ; input:
                                   2204 ;   none
                                   2205 ; output:
                                   2206 ;   stack{n}   arguments pushed on stack
                                   2207 ;   A 	number of arguments pushed on stack  
                                   2208 ;--------------------------------
      000C66                       2209 arg_list:
      000C66 4B 00            [ 1] 2210 	push #0  
      000C68 CD 0D B1         [ 4] 2211 1$: call relation
      000C6B A1 00            [ 1] 2212 	cp a,#TK_NONE 
      000C6D 27 20            [ 1] 2213 	jreq 5$
      000C6F A1 84            [ 1] 2214 	cp a,#TK_INTGR
      000C71 26 13            [ 1] 2215 	jrne 4$
      000C73                       2216 3$: 
                                   2217 ; swap return address with argument
      000C73 84               [ 1] 2218 	pop a ; arg_count
      000C74 90 85            [ 2] 2219 	popw y ; return address 
      000C76 89               [ 2] 2220 	pushw x ; new argument 
      000C77 90 89            [ 2] 2221 	pushw y 
      000C79 4C               [ 1] 2222     inc a
      000C7A 88               [ 1] 2223 	push a 
      000C7B CD 08 AD         [ 4] 2224 	call next_token 
      000C7E A1 09            [ 1] 2225 	cp a,#TK_COMMA 
      000C80 27 E6            [ 1] 2226 	jreq 1$ 
      000C82 A1 00            [ 1] 2227 	cp a,#TK_NONE 
      000C84 27 09            [ 1] 2228 	jreq 5$ 
      000C86 A1 08            [ 1] 2229 4$:	cp a,#TK_RPAREN 
      000C88 27 05            [ 1] 2230 	jreq 5$
      000C8A                       2231 	_unget_token 
      000C8A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C8F 84               [ 1] 2232 5$:	pop a  
      000C90 81               [ 4] 2233 	ret 
                                   2234 
                                   2235 ;--------------------------------
                                   2236 ;   BASIC commnands 
                                   2237 ;--------------------------------
                                   2238 
                                   2239 ;--------------------------------
                                   2240 ;  arithmetic and relational 
                                   2241 ;  routines
                                   2242 ;  operators precedence
                                   2243 ;  highest to lowest
                                   2244 ;  operators on same row have 
                                   2245 ;  same precedence and are executed
                                   2246 ;  from left to right.
                                   2247 ;	'*','/','%'
                                   2248 ;   '-','+'
                                   2249 ;   '=','>','<','>=','<=','<>','><'
                                   2250 ;   '<>' and '><' are equivalent for not equal.
                                   2251 ;--------------------------------
                                   2252 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2253 ;---------------------
                                   2254 ; return array element
                                   2255 ; address from @(expr)
                                   2256 ; input:
                                   2257 ;   A 		TK_ARRAY
                                   2258 ; output:
                                   2259 ;   A 		TK_INTGR
                                   2260 ;	X 		element address 
                                   2261 ;----------------------
      000C91                       2262 get_array_element:
      000C91 CD 0C 61         [ 4] 2263 	call func_args 
      000C94 A1 01            [ 1] 2264 	cp a,#1
      000C96 27 03            [ 1] 2265 	jreq 1$
      000C98 CC 07 BB         [ 2] 2266 	jp syntax_error
      000C9B 85               [ 2] 2267 1$: popw x 
                                   2268 	; check for bounds 
      000C9C C3 00 21         [ 2] 2269 	cpw x,array_size 
      000C9F 23 05            [ 2] 2270 	jrule 3$
                                   2271 ; bounds {1..array_size}	
      000CA1 A6 0A            [ 1] 2272 2$: ld a,#ERR_BAD_VALUE 
      000CA3 CC 07 BD         [ 2] 2273 	jp tb_error 
      000CA6 5D               [ 2] 2274 3$: tnzw  x
      000CA7 27 F8            [ 1] 2275 	jreq 2$ 
      000CA9 58               [ 2] 2276 	sllw x 
      000CAA 89               [ 2] 2277 	pushw x 
      000CAB AE 16 90         [ 2] 2278 	ldw x,#tib
      000CAE 72 F0 01         [ 2] 2279 	subw x,(1,sp)
      000CB1                       2280 	_drop 2   
      000CB1 5B 02            [ 2]    1     addw sp,#2 
      000CB3 A6 84            [ 1] 2281 	ld a,#TK_INTGR
      000CB5 81               [ 4] 2282 	ret 
                                   2283 
                                   2284 
                                   2285 ;***********************************
                                   2286 ;   expression parse,execute 
                                   2287 ;***********************************
                                   2288 ;-----------------------------------
                                   2289 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2290 ;			 integer | function |
                                   2291 ;			 '('relation')' 
                                   2292 ; output:
                                   2293 ;   A    token attribute 
                                   2294 ;   X 	 integer
                                   2295 ; ---------------------------------
                           000001  2296 	NEG=1
                           000001  2297 	VSIZE=1
      000CB6                       2298 factor:
      000CB6                       2299 	_vars VSIZE 
      000CB6 52 01            [ 2]    1     sub sp,#VSIZE 
      000CB8 CD 08 AD         [ 4] 2300 	call next_token
      000CBB A1 02            [ 1] 2301 	cp a,#CMD_END  
      000CBD 25 3D            [ 1] 2302 	jrult 16$
      000CBF 6B 01            [ 1] 2303 1$:	ld (NEG,sp),a 
      000CC1 A4 30            [ 1] 2304 	and a,#TK_GRP_MASK
      000CC3 A1 10            [ 1] 2305 	cp a,#TK_GRP_ADD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000CC5 27 04            [ 1] 2306 	jreq 2$
      000CC7 7B 01            [ 1] 2307 	ld a,(NEG,sp)
      000CC9 20 03            [ 2] 2308 	jra 4$  
      000CCB                       2309 2$:	
      000CCB CD 08 AD         [ 4] 2310 	call next_token 
      000CCE                       2311 4$:	
      000CCE A1 81            [ 1] 2312 	cp a,#TK_IFUNC 
      000CD0 26 03            [ 1] 2313 	jrne 5$ 
      000CD2 FD               [ 4] 2314 	call (x) 
      000CD3 20 32            [ 2] 2315 	jra 18$ 
      000CD5                       2316 5$:
      000CD5 A1 84            [ 1] 2317 	cp a,#TK_INTGR
      000CD7 26 02            [ 1] 2318 	jrne 6$
      000CD9 20 2C            [ 2] 2319 	jra 18$
      000CDB                       2320 6$:
      000CDB A1 06            [ 1] 2321 	cp a,#TK_ARRAY
      000CDD 26 06            [ 1] 2322 	jrne 10$
      000CDF CD 0C 91         [ 4] 2323 	call get_array_element
      000CE2 FE               [ 2] 2324 	ldw x,(x)
      000CE3 20 22            [ 2] 2325 	jra 18$ 
      000CE5                       2326 10$:
      000CE5 A1 85            [ 1] 2327 	cp a,#TK_VAR 
      000CE7 26 03            [ 1] 2328 	jrne 12$
      000CE9 FE               [ 2] 2329 	ldw x,(x)
      000CEA 20 1B            [ 2] 2330 	jra 18$
      000CEC                       2331 12$:			
      000CEC A1 07            [ 1] 2332 	cp a,#TK_LPAREN
      000CEE 26 0C            [ 1] 2333 	jrne 16$
      000CF0 CD 0D B1         [ 4] 2334 	call relation
      000CF3 89               [ 2] 2335 	pushw x 
      000CF4 A6 08            [ 1] 2336 	ld a,#TK_RPAREN 
      000CF6 CD 0C 54         [ 4] 2337 	call expect
      000CF9 85               [ 2] 2338 	popw x 
      000CFA 20 0B            [ 2] 2339 	jra 18$	
      000CFC                       2340 16$:
      000CFC 4D               [ 1] 2341 	tnz a 
      000CFD 27 11            [ 1] 2342 	jreq 20$ 
      000CFF                       2343 	_unget_token
      000CFF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D04 4F               [ 1] 2344 	clr a 
      000D05 20 09            [ 2] 2345 	jra 20$ 
      000D07                       2346 18$: 
      000D07 A6 11            [ 1] 2347 	ld a,#TK_MINUS 
      000D09 11 01            [ 1] 2348 	cp a,(NEG,sp)
      000D0B 26 01            [ 1] 2349 	jrne 19$
      000D0D 50               [ 2] 2350 	negw x
      000D0E                       2351 19$:
      000D0E A6 84            [ 1] 2352 	ld a,#TK_INTGR
      000D10                       2353 20$:
      000D10                       2354 	_drop VSIZE
      000D10 5B 01            [ 2]    1     addw sp,#VSIZE 
      000D12 81               [ 4] 2355 	ret
                                   2356 
                                   2357 ;-----------------------------------
                                   2358 ; term ::= factor [['*'|'/'|'%'] factor]* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2359 ; output:
                                   2360 ;   A    	token attribute 
                                   2361 ;	X		integer
                                   2362 ;-----------------------------------
                           000001  2363 	N1=1   ; int16_t
                           000003  2364 	MULOP=3
                           000003  2365 	VSIZE=3
      000D13                       2366 term:
      000D13                       2367 	_vars VSIZE
      000D13 52 03            [ 2]    1     sub sp,#VSIZE 
      000D15 CD 0C B6         [ 4] 2368 	call factor
      000D18 4D               [ 1] 2369 	tnz a 
      000D19 27 47            [ 1] 2370 	jreq term_exit 
      000D1B                       2371 term01:	 ; check for  operator 
      000D1B 1F 01            [ 2] 2372 	ldw (N1,sp),x  ; save first factor 
      000D1D CD 08 AD         [ 4] 2373 	call next_token
      000D20 6B 03            [ 1] 2374 	ld (MULOP,sp),a
      000D22 A1 02            [ 1] 2375 	cp a,#CMD_END
      000D24 25 2F            [ 1] 2376 	jrult 8$
      000D26 A4 30            [ 1] 2377 	and a,#TK_GRP_MASK
      000D28 A1 20            [ 1] 2378 	cp a,#TK_GRP_MULT
      000D2A 27 02            [ 1] 2379 	jreq 1$
      000D2C 20 27            [ 2] 2380 	jra 8$
      000D2E                       2381 1$:	; got *|/|%
      000D2E CD 0C B6         [ 4] 2382 	call factor
      000D31 A1 84            [ 1] 2383 	cp a,#TK_INTGR
      000D33 27 03            [ 1] 2384 	jreq 2$
      000D35 CC 07 BB         [ 2] 2385 	jp syntax_error
      000D38 90 93            [ 1] 2386 2$:	ldw y,x 
      000D3A 1E 01            [ 2] 2387 	ldw x,(N1,sp)
      000D3C 7B 03            [ 1] 2388 	ld a,(MULOP,sp) 
      000D3E A1 20            [ 1] 2389 	cp a,#TK_MULT 
      000D40 26 05            [ 1] 2390 	jrne 3$
      000D42 CD 0B 17         [ 4] 2391 	call multiply 
      000D45 20 D4            [ 2] 2392 	jra term01
      000D47 A1 21            [ 1] 2393 3$: cp a,#TK_DIV 
      000D49 26 05            [ 1] 2394 	jrne 4$ 
      000D4B CD 0B D0         [ 4] 2395 	call divide 
      000D4E 20 CB            [ 2] 2396 	jra term01 
      000D50 CD 0B E6         [ 4] 2397 4$: call modulo
      000D53 20 C6            [ 2] 2398 	jra term01 
      000D55 7B 03            [ 1] 2399 8$: ld a,(MULOP,sp)
      000D57 27 05            [ 1] 2400 	jreq 9$ 
      000D59                       2401 	_unget_token
      000D59 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D5E 1E 01            [ 2] 2402 9$: ldw x,(N1,sp)
      000D60 A6 84            [ 1] 2403 	ld a,#TK_INTGR 	
      000D62                       2404 term_exit:
      000D62                       2405 	_drop VSIZE 
      000D62 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D64 81               [ 4] 2406 	ret 
                                   2407 
                                   2408 ;-------------------------------
                                   2409 ;  expr ::= term [['+'|'-'] term]*
                                   2410 ;  result range {-32768..32767}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2411 ;  output:
                                   2412 ;   A    token attribute 
                                   2413 ;   X	 integer   
                                   2414 ;-------------------------------
                           000001  2415 	N1=1 
                           000003  2416 	OP=3 
                           000003  2417 	VSIZE=3 
      000D65                       2418 expression:
      000D65                       2419 	_vars VSIZE 
      000D65 52 03            [ 2]    1     sub sp,#VSIZE 
      000D67 CD 0D 13         [ 4] 2420 	call term
      000D6A 4D               [ 1] 2421 	tnz a 
      000D6B 27 41            [ 1] 2422 	jreq expr_exit 
      000D6D 1F 01            [ 2] 2423 1$:	ldw (N1,sp),x 
      000D6F CD 08 AD         [ 4] 2424 	call next_token
      000D72 6B 03            [ 1] 2425 	ld (OP,sp),a 
      000D74 A1 02            [ 1] 2426 	cp a,#CMD_END 
      000D76 25 29            [ 1] 2427 	jrult 8$ 
      000D78 A4 30            [ 1] 2428 	and a,#TK_GRP_MASK
      000D7A A1 10            [ 1] 2429 	cp a,#TK_GRP_ADD 
      000D7C 27 02            [ 1] 2430 	jreq 2$ 
      000D7E 20 21            [ 2] 2431 	jra 8$
      000D80                       2432 2$: 
      000D80 CD 0D 13         [ 4] 2433 	call term
      000D83 A1 84            [ 1] 2434 	cp a,#TK_INTGR
      000D85 27 03            [ 1] 2435 	jreq 3$
      000D87 CC 07 BB         [ 2] 2436 	jp syntax_error
      000D8A CF 00 0C         [ 2] 2437 3$:	ldw acc16,x 
      000D8D 1E 01            [ 2] 2438 	ldw x,(N1,sp)
      000D8F 7B 03            [ 1] 2439 	ld a,(OP,sp)
      000D91 A1 10            [ 1] 2440 	cp a,#TK_PLUS 
      000D93 26 06            [ 1] 2441 	jrne 4$
      000D95 72 BB 00 0C      [ 2] 2442 	addw x,acc16
      000D99 20 D2            [ 2] 2443 	jra 1$ 
      000D9B 72 B0 00 0C      [ 2] 2444 4$:	subw x,acc16
      000D9F 20 CC            [ 2] 2445 	jra 1$
      000DA1 7B 03            [ 1] 2446 8$: ld a,(OP,sp)
      000DA3 27 05            [ 1] 2447 	jreq 9$ 
      000DA5                       2448 	_unget_token	
      000DA5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000DAA 1E 01            [ 2] 2449 9$: ldw x,(N1,sp)
      000DAC A6 84            [ 1] 2450 	ld a,#TK_INTGR	
      000DAE                       2451 expr_exit:
      000DAE                       2452 	_drop VSIZE 
      000DAE 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DB0 81               [ 4] 2453 	ret 
                                   2454 
                                   2455 ;---------------------------------------------
                                   2456 ; rel ::= expr rel_op expr
                                   2457 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   2458 ;  relation return  integer , zero is false 
                                   2459 ;  output:
                                   2460 ;    A 		token attribute  
                                   2461 ;	 X		integer 
                                   2462 ;---------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                           000001  2463 	N1=1
                           000003  2464 	RELOP=3
                           000003  2465 	VSIZE=3 
      000DB1                       2466 relation: 
      000DB1                       2467 	_vars VSIZE
      000DB1 52 03            [ 2]    1     sub sp,#VSIZE 
      000DB3 CD 0D 65         [ 4] 2468 	call expression
      000DB6 4D               [ 1] 2469 	tnz a 
      000DB7 27 4D            [ 1] 2470 	jreq rel_exit
      000DB9 1F 01            [ 2] 2471 	ldw (N1,sp),x 
                                   2472 ; expect rel_op or leave 
      000DBB CD 08 AD         [ 4] 2473 	call next_token 
      000DBE 6B 03            [ 1] 2474 	ld (RELOP,sp),a 
      000DC0 A4 30            [ 1] 2475 	and a,#TK_GRP_MASK
      000DC2 A1 30            [ 1] 2476 	cp a,#TK_GRP_RELOP 
      000DC4 26 33            [ 1] 2477 	jrne 8$
      000DC6                       2478 2$:	; expect another expression
      000DC6 CD 0D 65         [ 4] 2479 	call expression
      000DC9 A1 84            [ 1] 2480 	cp a,#TK_INTGR
      000DCB 27 03            [ 1] 2481 	jreq 3$
      000DCD CC 07 BB         [ 2] 2482 	jp syntax_error 
      000DD0 CF 00 0C         [ 2] 2483 3$:	ldw acc16,x 
      000DD3 1E 01            [ 2] 2484 	ldw x,(N1,sp) 
      000DD5 72 B0 00 0C      [ 2] 2485 	subw x,acc16
      000DD9 26 06            [ 1] 2486 	jrne 4$
      000DDB 35 02 00 0D      [ 1] 2487 	mov acc8,#2 ; n1==n2
      000DDF 20 0C            [ 2] 2488 	jra 6$ 
      000DE1                       2489 4$: 
      000DE1 2C 06            [ 1] 2490 	jrsgt 5$  
      000DE3 35 04 00 0D      [ 1] 2491 	mov acc8,#4 ; n1<2 
      000DE7 20 04            [ 2] 2492 	jra 6$
      000DE9                       2493 5$:
      000DE9 35 01 00 0D      [ 1] 2494 	mov acc8,#1 ; n1>n2 
      000DED                       2495 6$:
      000DED 5F               [ 1] 2496 	clrw x 
      000DEE C6 00 0D         [ 1] 2497 	ld a, acc8  
      000DF1 14 03            [ 1] 2498 	and a,(RELOP,sp)
      000DF3 4D               [ 1] 2499 	tnz a 
      000DF4 27 0E            [ 1] 2500 	jreq 10$
      000DF6 5C               [ 1] 2501 	incw x 
      000DF7 20 0B            [ 2] 2502 	jra 10$  	
      000DF9 7B 03            [ 1] 2503 8$: ld a,(RELOP,sp)
      000DFB 27 05            [ 1] 2504 	jreq 9$
      000DFD                       2505 	_unget_token
      000DFD 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000E02                       2506 9$: 
      000E02 1E 01            [ 2] 2507 	ldw x,(N1,sp)
      000E04                       2508 10$:
      000E04 A6 84            [ 1] 2509 	ld a,#TK_INTGR
      000E06                       2510 rel_exit:
      000E06                       2511 	_drop VSIZE
      000E06 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E08 81               [ 4] 2512 	ret 
                                   2513 
                                   2514 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2515 ; BASIC: SHOW 
                                   2516 ; print stack content in hexadecimal bytes 
                                   2517 ; 16 bytes per row 
                                   2518 ;--------------------------------
      000E09                       2519 show:
      000E09 AE 0E 23         [ 2] 2520 	ldw x,#cstk_prompt
      000E0C CD 00 00         [ 4] 2521 	call puts 
      000E0F 96               [ 1] 2522 	ldw x,sp 
      000E10 1C 00 03         [ 2] 2523 	addw x,#3 ; ignore return address
      000E13 90 AE 18 00      [ 2] 2524 	ldw y,#RAM_SIZE  
      000E17 CF 00 0C         [ 2] 2525 	ldw acc16,x 
      000E1A 72 B2 00 0C      [ 2] 2526 	subw y,acc16
      000E1E CD 03 F7         [ 4] 2527 	call hex_dump
      000E21 4F               [ 1] 2528 	clr a 
      000E22 81               [ 4] 2529 	ret
                                   2530 
      000E23 0A 63 6F 6E 74 65 6E  2531 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   2532 
                                   2533 
                                   2534 ;--------------------------------------------
                                   2535 ; BASIC: HEX 
                                   2536 ; select hexadecimal base for integer print
                                   2537 ;---------------------------------------------
      000E4A                       2538 hex_base:
      000E4A 35 10 00 0A      [ 1] 2539 	mov base,#16 
      000E4E 81               [ 4] 2540 	ret 
                                   2541 
                                   2542 ;--------------------------------------------
                                   2543 ; BASIC: DEC 
                                   2544 ; select decimal base for integer print
                                   2545 ;---------------------------------------------
      000E4F                       2546 dec_base:
      000E4F 35 0A 00 0A      [ 1] 2547 	mov base,#10
      000E53 81               [ 4] 2548 	ret 
                                   2549 
                                   2550 ;------------------------
                                   2551 ; BASIC: FREE 
                                   2552 ; return free size in text area
                                   2553 ; output:
                                   2554 ;   A 		TK_INTGR
                                   2555 ;   X 	    size integer
                                   2556 ;--------------------------
      000E54                       2557 free:
      000E54 AE 16 90         [ 2] 2558 	ldw x,#tib 
      000E57 72 B0 00 1E      [ 2] 2559 	subw x,txtend 
      000E5B A6 84            [ 1] 2560 	ld a,#TK_INTGR
      000E5D 81               [ 4] 2561 	ret 
                                   2562 
                                   2563 
                                   2564 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2565 ; BASIC: UBOUND  
                                   2566 ; return array variable size 
                                   2567 ; output:
                                   2568 ;   A 		TK_INTGR
                                   2569 ;   X 	    array size 
                                   2570 ;--------------------------
      000E5E                       2571 ubound:
      000E5E AE 16 90         [ 2] 2572 	ldw x,#tib
      000E61 72 B0 00 1E      [ 2] 2573 	subw x,txtend 
      000E65 90 CE 00 04      [ 2] 2574 	ldw y,basicptr 
      000E69 90 C3 00 1E      [ 2] 2575 	cpw y,txtend 
      000E6D 25 0A            [ 1] 2576 	jrult 1$
      000E6F 3B 00 03         [ 1] 2577 	push count 
      000E72 4B 00            [ 1] 2578 	push #0 
      000E74 72 F0 01         [ 2] 2579 	subw x,(1,sp)
      000E77                       2580 	_drop 2 
      000E77 5B 02            [ 2]    1     addw sp,#2 
      000E79 54               [ 2] 2581 1$:	srlw x 
      000E7A CF 00 21         [ 2] 2582 	ldw array_size,x
      000E7D A6 84            [ 1] 2583 	ld a,#TK_INTGR
      000E7F 81               [ 4] 2584 	ret 
                                   2585 
                                   2586 ;-----------------------------
                                   2587 ; BASIC: LET var=expr 
                                   2588 ; variable assignement 
                                   2589 ; output:
                                   2590 ;   A 		TK_NONE 
                                   2591 ;-----------------------------
      000E80                       2592 let::
      000E80 CD 08 AD         [ 4] 2593 	call next_token 
      000E83 A1 85            [ 1] 2594 	cp a,#TK_VAR 
      000E85 27 0A            [ 1] 2595 	jreq let_var
      000E87 A1 06            [ 1] 2596 	cp a,#TK_ARRAY 
      000E89 27 03            [ 1] 2597 	jreq  let_array
      000E8B CC 07 BB         [ 2] 2598 	jp syntax_error
      000E8E                       2599 let_array:
      000E8E CD 0C 91         [ 4] 2600 	call get_array_element
      000E91                       2601 let_var:
      000E91 89               [ 2] 2602 	pushw x  
      000E92 CD 08 AD         [ 4] 2603 	call next_token 
      000E95 A1 32            [ 1] 2604 	cp a,#TK_EQUAL
      000E97 27 03            [ 1] 2605 	jreq 1$
      000E99 CC 07 BB         [ 2] 2606 	jp syntax_error
      000E9C                       2607 1$:	
      000E9C CD 0D B1         [ 4] 2608 	call relation   
      000E9F A1 84            [ 1] 2609 	cp a,#TK_INTGR 
      000EA1 27 03            [ 1] 2610 	jreq 2$
      000EA3 CC 07 BB         [ 2] 2611 	jp syntax_error
      000EA6                       2612 2$:	
      000EA6 90 93            [ 1] 2613 	ldw y,x 
      000EA8 85               [ 2] 2614 	popw x   
      000EA9 FF               [ 2] 2615 	ldw (x),y   
      000EAA 81               [ 4] 2616 	ret 
                                   2617 
                                   2618 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2619 ; BASIC: LIST [[start][,end]]
                                   2620 ; list program lines 
                                   2621 ; form start to end 
                                   2622 ; if empty argument list then 
                                   2623 ; list all.
                                   2624 ;----------------------------
                           000001  2625 	FIRST=1
                           000003  2626 	LAST=3 
                           000005  2627 	LN_PTR=5
                           000006  2628 	VSIZE=6 
      000EAB                       2629 list:
      000EAB CE 00 1C         [ 2] 2630 	ldw x,txtbgn 
      000EAE C3 00 1E         [ 2] 2631 	cpw x,txtend 
      000EB1 2B 01            [ 1] 2632 	jrmi 1$
      000EB3 81               [ 4] 2633 	ret 
      000EB4                       2634 1$:	
      000EB4                       2635 	_vars VSIZE
      000EB4 52 06            [ 2]    1     sub sp,#VSIZE 
      000EB6 1F 05            [ 2] 2636 	ldw (LN_PTR,sp),x 
      000EB8 FE               [ 2] 2637 	ldw x,(x) 
      000EB9 1F 01            [ 2] 2638 	ldw (FIRST,sp),x ; list from first line 
      000EBB AE 7F FF         [ 2] 2639 	ldw x,#MAX_LINENO ; biggest line number 
      000EBE 1F 03            [ 2] 2640 	ldw (LAST,sp),x 
      000EC0 CD 0C 66         [ 4] 2641 	call arg_list
      000EC3 4D               [ 1] 2642 	tnz a
      000EC4 27 31            [ 1] 2643 	jreq list_loop 
      000EC6 A1 02            [ 1] 2644 	cp a,#2 
      000EC8 27 07            [ 1] 2645 	jreq 4$
      000ECA A1 01            [ 1] 2646 	cp a,#1 
      000ECC 27 06            [ 1] 2647 	jreq first_line 
      000ECE CC 07 BB         [ 2] 2648 	jp syntax_error 
      000ED1 85               [ 2] 2649 4$:	popw x 
      000ED2 1F 05            [ 2] 2650 	ldw (LAST+2,sp),x 
      000ED4                       2651 first_line:
      000ED4 85               [ 2] 2652 	popw x
      000ED5 1F 01            [ 2] 2653 	ldw (FIRST,sp),x 
      000ED7                       2654 lines_skip:
      000ED7 CE 00 1C         [ 2] 2655 	ldw x,txtbgn
      000EDA 1F 05            [ 2] 2656 2$:	ldw (LN_PTR,sp),x 
      000EDC C3 00 1E         [ 2] 2657 	cpw x,txtend 
      000EDF 2A 38            [ 1] 2658 	jrpl list_exit 
      000EE1 FE               [ 2] 2659 	ldw x,(x) ;line# 
      000EE2 13 01            [ 2] 2660 	cpw x,(FIRST,sp)
      000EE4 2A 11            [ 1] 2661 	jrpl list_loop 
      000EE6 1E 05            [ 2] 2662 	ldw x,(LN_PTR,sp) 
      000EE8 E6 02            [ 1] 2663 	ld a,(2,x)
      000EEA C7 00 0D         [ 1] 2664 	ld acc8,a 
      000EED 72 5F 00 0C      [ 1] 2665 	clr acc16 
      000EF1 72 BB 00 0C      [ 2] 2666 	addw x,acc16
      000EF5 20 E3            [ 2] 2667 	jra 2$ 
                                   2668 ; print loop
      000EF7                       2669 list_loop:
      000EF7 1E 05            [ 2] 2670 	ldw x,(LN_PTR,sp)
      000EF9 E6 02            [ 1] 2671 	ld a,(2,x) 
      000EFB CD 0F 27         [ 4] 2672 	call prt_basic_line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EFE 1E 05            [ 2] 2673 	ldw x,(LN_PTR,sp)
      000F00 E6 02            [ 1] 2674 	ld a,(2,x)
      000F02 C7 00 0D         [ 1] 2675 	ld acc8,a 
      000F05 72 5F 00 0C      [ 1] 2676 	clr acc16 
      000F09 72 BB 00 0C      [ 2] 2677 	addw x,acc16
      000F0D C3 00 1E         [ 2] 2678 	cpw x,txtend 
      000F10 2A 07            [ 1] 2679 	jrpl list_exit
      000F12 1F 05            [ 2] 2680 	ldw (LN_PTR,sp),x
      000F14 FE               [ 2] 2681 	ldw x,(x)
      000F15 13 03            [ 2] 2682 	cpw x,(LAST,sp)  
      000F17 2F DE            [ 1] 2683 	jrslt list_loop
      000F19                       2684 list_exit:
      000F19 55 00 03 00 01   [ 1] 2685 	mov in,count 
      000F1E AE 16 E0         [ 2] 2686 	ldw x,#pad 
      000F21 CF 00 04         [ 2] 2687 	ldw basicptr,x 
      000F24                       2688 	_drop VSIZE 
      000F24 5B 06            [ 2]    1     addw sp,#VSIZE 
      000F26 81               [ 4] 2689 	ret
                                   2690 
                                   2691 
                                   2692 ;--------------------------
                                   2693 ; decompile line from token list
                                   2694 ; and print it. 
                                   2695 ; input:
                                   2696 ;   A       stop at this position 
                                   2697 ;   X 		pointer at line
                                   2698 ; output:
                                   2699 ;   none 
                                   2700 ;--------------------------	
      000F27                       2701 prt_basic_line:
      000F27 C7 00 03         [ 1] 2702 	ld count,a 
      000F2A E6 02            [ 1] 2703 	ld a,(2,x)
      000F2C C1 00 03         [ 1] 2704 	cp a,count 
      000F2F 2A 03            [ 1] 2705 	jrpl 1$ 
      000F31 C7 00 03         [ 1] 2706 	ld count,a 
      000F34 CF 00 04         [ 2] 2707 1$:	ldw basicptr,x 
      000F37 90 AE 16 90      [ 2] 2708 	ldw y,#tib  
      000F3B CD 00 00         [ 4] 2709 	call decompile 
      000F3E CD 00 00         [ 4] 2710 	call puts 
      000F41 A6 0D            [ 1] 2711 	ld a,#CR 
      000F43 CD 03 2B         [ 4] 2712 	call putc 
      000F46 81               [ 4] 2713 	ret 
                                   2714 
                                   2715 
                                   2716 
                                   2717 ;---------------------------------
                                   2718 ; BASIC: PRINT|? arg_list 
                                   2719 ; print values from argument list
                                   2720 ;----------------------------------
                           000001  2721 	COMMA=1
                           000001  2722 	VSIZE=1
      000F47                       2723 print:
      000F47                       2724 	_vars VSIZE 
      000F47 52 01            [ 2]    1     sub sp,#VSIZE 
      000F49                       2725 reset_comma:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F49 0F 01            [ 1] 2726 	clr (COMMA,sp)
      000F4B                       2727 prt_loop:
      000F4B CD 08 AD         [ 4] 2728 	call next_token
      000F4E A1 02            [ 1] 2729 	cp a,#CMD_END 
      000F50 25 4F            [ 1] 2730 	jrult print_exit ; colon or end of line 
      000F52 A1 02            [ 1] 2731 	cp a,#TK_QSTR
      000F54 27 12            [ 1] 2732 	jreq 1$
      000F56 A1 03            [ 1] 2733 	cp a,#TK_CHAR 
      000F58 27 13            [ 1] 2734 	jreq 2$ 
      000F5A A1 82            [ 1] 2735 	cp a,#TK_CFUNC 
      000F5C 27 15            [ 1] 2736 	jreq 3$
      000F5E A1 09            [ 1] 2737 	cp a,#TK_COMMA 
      000F60 27 18            [ 1] 2738 	jreq 4$
      000F62 A1 0A            [ 1] 2739 	cp a,#TK_SHARP 
      000F64 27 18            [ 1] 2740 	jreq 5$
      000F66 20 28            [ 2] 2741 	jra 7$ 
      000F68                       2742 1$:	; print string 
      000F68 CD 00 00         [ 4] 2743 	call puts
      000F6B 20 DC            [ 2] 2744 	jra reset_comma
      000F6D                       2745 2$:	; print character 
      000F6D 9F               [ 1] 2746 	ld a,xl 
      000F6E CD 03 2B         [ 4] 2747 	call putc 
      000F71 20 D6            [ 2] 2748 	jra reset_comma 
      000F73                       2749 3$: ; print character function value  	
      000F73 FD               [ 4] 2750 	call (x)
      000F74 9F               [ 1] 2751 	ld a,xl 
      000F75 CD 03 2B         [ 4] 2752 	call putc
      000F78 20 CF            [ 2] 2753 	jra reset_comma 
      000F7A                       2754 4$: ; set comma state 
      000F7A 03 01            [ 1] 2755 	cpl (COMMA,sp)
      000F7C 20 CD            [ 2] 2756 	jra prt_loop   
      000F7E                       2757 5$: ; # character must be followed by an integer   
      000F7E CD 08 AD         [ 4] 2758 	call next_token
      000F81 A1 84            [ 1] 2759 	cp a,#TK_INTGR 
      000F83 27 03            [ 1] 2760 	jreq 6$
      000F85 CC 07 BB         [ 2] 2761 	jp syntax_error 
      000F88                       2762 6$: ; set tab width
      000F88 9F               [ 1] 2763 	ld a,xl 
      000F89 A4 0F            [ 1] 2764 	and a,#15 
      000F8B C7 00 24         [ 1] 2765 	ld tab_width,a 
      000F8E 20 B9            [ 2] 2766 	jra reset_comma 
      000F90                       2767 7$:	
      000F90                       2768 	_unget_token 
      000F90 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000F95 CD 0D B1         [ 4] 2769 	call relation 
      000F98 A1 84            [ 1] 2770 	cp a,#TK_INTGR 
      000F9A 26 05            [ 1] 2771 	jrne print_exit 
      000F9C CD 09 0E         [ 4] 2772     call print_int 
      000F9F 20 A8            [ 2] 2773 	jra reset_comma 
      000FA1                       2774 print_exit:
      000FA1 0D 01            [ 1] 2775 	tnz (COMMA,sp)
      000FA3 26 05            [ 1] 2776 	jrne 9$
      000FA5 A6 0D            [ 1] 2777 	ld a,#CR 
      000FA7 CD 03 2B         [ 4] 2778     call putc 
      000FAA                       2779 9$:	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FAA 5B 01            [ 2]    1     addw sp,#VSIZE 
      000FAC 81               [ 4] 2780 	ret 
                                   2781 
                                   2782 ;----------------------
                                   2783 ; 'save_context' and
                                   2784 ; 'rest_context' must be 
                                   2785 ; called at the same 
                                   2786 ; call stack depth 
                                   2787 ; i.e. SP must have the 
                                   2788 ; save value at  
                                   2789 ; entry point of both 
                                   2790 ; routine. 
                                   2791 ;---------------------
                           000004  2792 	CTXT_SIZE=4 ; size of saved data 
                                   2793 ;--------------------
                                   2794 ; save current BASIC
                                   2795 ; interpreter context 
                                   2796 ; on stack 
                                   2797 ;--------------------
      000FAD                       2798 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000FAD                       2799 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000FAD                       2800 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000FAD                       2801 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000FAD                       2802 save_context:
      000FAD CE 00 04         [ 2] 2803 	ldw x,basicptr 
      000FB0 1F 03            [ 2] 2804 	ldw (BPTR,sp),x
      000FB2 C6 00 01         [ 1] 2805 	ld a,in 
      000FB5 6B 05            [ 1] 2806 	ld (IN,sp),a
      000FB7 C6 00 03         [ 1] 2807 	ld a,count 
      000FBA 6B 06            [ 1] 2808 	ld (CNT,sp),a  
      000FBC 81               [ 4] 2809 	ret
                                   2810 
                                   2811 ;-----------------------
                                   2812 ; restore previously saved 
                                   2813 ; BASIC interpreter context 
                                   2814 ; from stack 
                                   2815 ;-------------------------
      000FBD                       2816 rest_context:
      000FBD 1E 03            [ 2] 2817 	ldw x,(BPTR,sp)
      000FBF CF 00 04         [ 2] 2818 	ldw basicptr,x 
      000FC2 7B 05            [ 1] 2819 	ld a,(IN,sp)
      000FC4 C7 00 01         [ 1] 2820 	ld in,a
      000FC7 7B 06            [ 1] 2821 	ld a,(CNT,sp)
      000FC9 C7 00 03         [ 1] 2822 	ld count,a  
      000FCC 81               [ 4] 2823 	ret
                                   2824 
                                   2825 
                                   2826 
                                   2827 ;------------------------------------------
                                   2828 ; BASIC: INPUT [string]var[,[string]var]
                                   2829 ; input value in variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2830 ; [string] optionally can be used as prompt 
                                   2831 ;-----------------------------------------
                           000001  2832 	CX_BPTR=1
                           000003  2833 	CX_IN=3
                           000004  2834 	CX_CNT=4
                           000005  2835 	SKIP=5
                           000006  2836 	VAR_ADDR=6
                           000007  2837 	VSIZE=7
      000FCD                       2838 input_var:
      000FCD                       2839 	_vars VSIZE 
      000FCD 52 07            [ 2]    1     sub sp,#VSIZE 
      000FCF                       2840 input_loop:
      000FCF 0F 05            [ 1] 2841 	clr (SKIP,sp)
      000FD1 CD 08 AD         [ 4] 2842 	call next_token 
      000FD4 A1 02            [ 1] 2843 	cp a,#TK_QSTR 
      000FD6 26 08            [ 1] 2844 	jrne 1$ 
      000FD8 CD 00 00         [ 4] 2845 	call puts 
      000FDB 03 05            [ 1] 2846 	cpl (SKIP,sp)
      000FDD CD 08 AD         [ 4] 2847 	call next_token 
      000FE0 A1 85            [ 1] 2848 1$: cp a,#TK_VAR  
      000FE2 27 03            [ 1] 2849 	jreq 2$ 
      000FE4 CC 07 BB         [ 2] 2850 	jp syntax_error
      000FE7 1F 06            [ 2] 2851 2$:	ldw (VAR_ADDR,sp),x 
      000FE9 0D 05            [ 1] 2852 	tnz (SKIP,sp)
      000FEB 26 06            [ 1] 2853 	jrne 21$ 
      000FED CD 00 00         [ 4] 2854 	call var_name 
      000FF0 CD 03 2B         [ 4] 2855 	call putc   
      000FF3                       2856 21$:
      000FF3 A6 3A            [ 1] 2857 	ld a,#':
      000FF5 CD 03 2B         [ 4] 2858 	call putc 
      000FF8 CD 0F AD         [ 4] 2859 	call save_context 
      000FFB 72 5F 00 03      [ 1] 2860 	clr count  
      000FFF CD 00 00         [ 4] 2861 	call readln 
      001002 AE 16 90         [ 2] 2862 	ldw x,#tib 
      001005 3B 00 03         [ 1] 2863 	push count
      001008 4B 00            [ 1] 2864 	push #0 
      00100A 72 FB 01         [ 2] 2865 	addw x,(1,sp)
      00100D 5C               [ 1] 2866 	incw x 
      00100E                       2867 	_drop 2 
      00100E 5B 02            [ 2]    1     addw sp,#2 
      001010 72 5F 00 01      [ 1] 2868 	clr in 
      001014 CD 00 00         [ 4] 2869 	call get_token
      001017 A1 84            [ 1] 2870 	cp a,#TK_INTGR
      001019 27 06            [ 1] 2871 	jreq 3$ 
      00101B CD 0F BD         [ 4] 2872 	call rest_context 
      00101E CC 07 BB         [ 2] 2873 	jp syntax_error
      001021 16 06            [ 2] 2874 3$: ldw y,(VAR_ADDR,sp) 
      001023 90 FF            [ 2] 2875 	ldw (y),x 
      001025 CD 0F BD         [ 4] 2876 	call rest_context
      001028 CD 08 AD         [ 4] 2877 	call next_token 
      00102B A1 09            [ 1] 2878 	cp a,#TK_COMMA 
      00102D 27 A0            [ 1] 2879 	jreq input_loop 
      00102F A1 01            [ 1] 2880 	cp a,#TK_COLON 
      001031 23 03            [ 2] 2881     jrule input_exit 
      001033 CC 07 BB         [ 2] 2882 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001036                       2883 input_exit:
      001036                       2884 	_drop VSIZE 
      001036 5B 07            [ 2]    1     addw sp,#VSIZE 
      001038 81               [ 4] 2885 	ret 
                                   2886 
                                   2887 
                                   2888 ;---------------------
                                   2889 ; BASIC: REMARK | ' 
                                   2890 ; skip comment to end of line 
                                   2891 ;---------------------- 
      001039                       2892 remark::
      001039 55 00 03 00 01   [ 1] 2893 	mov in,count 
      00103E 81               [ 4] 2894  	ret 
                                   2895 
                                   2896 
                                   2897 ;---------------------
                                   2898 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2899 ; read in loop 'addr'  
                                   2900 ; apply & 'mask' to value 
                                   2901 ; loop while result==0.  
                                   2902 ; 'xor_mask' is used to 
                                   2903 ; invert the wait logic.
                                   2904 ; i.e. loop while not 0.
                                   2905 ;---------------------
                           000001  2906 	XMASK=1 
                           000002  2907 	MASK=2
                           000003  2908 	ADDR=3
                           000004  2909 	VSIZE=4
      00103F                       2910 wait: 
      00103F                       2911 	_vars VSIZE
      00103F 52 04            [ 2]    1     sub sp,#VSIZE 
      001041 0F 01            [ 1] 2912 	clr (XMASK,sp) 
      001043 CD 0C 66         [ 4] 2913 	call arg_list 
      001046 A1 02            [ 1] 2914 	cp a,#2
      001048 24 03            [ 1] 2915 	jruge 0$
      00104A CC 07 BB         [ 2] 2916 	jp syntax_error 
      00104D A1 03            [ 1] 2917 0$:	cp a,#3
      00104F 25 04            [ 1] 2918 	jrult 1$
      001051 85               [ 2] 2919 	popw x 
      001052 9F               [ 1] 2920 	ld a,xl
      001053 6B 01            [ 1] 2921 	ld (XMASK,sp),a 
      001055 85               [ 2] 2922 1$: popw x ; mask 
      001056 9F               [ 1] 2923 	ld a,xl 
      001057 6B 02            [ 1] 2924 	ld (MASK,sp),a 
      001059 85               [ 2] 2925 	popw x ; address 
      00105A F6               [ 1] 2926 2$:	ld a,(x)
      00105B 14 02            [ 1] 2927 	and a,(MASK,sp)
      00105D 18 01            [ 1] 2928 	xor a,(XMASK,sp)
      00105F 27 F9            [ 1] 2929 	jreq 2$ 
      001061                       2930 	_drop VSIZE 
      001061 5B 04            [ 2]    1     addw sp,#VSIZE 
      001063 81               [ 4] 2931 	ret 
                                   2932 
                                   2933 ;---------------------
                                   2934 ; BASIC: BSET addr,mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2935 ; set bits at 'addr' corresponding 
                                   2936 ; to those of 'mask' that are at 1.
                                   2937 ; arguments:
                                   2938 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2939 ;   mask        mask|addr
                                   2940 ; output:
                                   2941 ;	none 
                                   2942 ;--------------------------
      001064                       2943 bit_set:
      001064 CD 0C 66         [ 4] 2944 	call arg_list 
      001067 A1 02            [ 1] 2945 	cp a,#2	 
      001069 27 03            [ 1] 2946 	jreq 1$ 
      00106B CC 07 BB         [ 2] 2947 	jp syntax_error
      00106E                       2948 1$: 
      00106E 85               [ 2] 2949 	popw x ; mask 
      00106F 9F               [ 1] 2950 	ld a,xl 
      001070 85               [ 2] 2951 	popw x ; addr  
      001071 FA               [ 1] 2952 	or a,(x)
      001072 F7               [ 1] 2953 	ld (x),a
      001073 81               [ 4] 2954 	ret 
                                   2955 
                                   2956 ;---------------------
                                   2957 ; BASIC: BRES addr,mask
                                   2958 ; reset bits at 'addr' corresponding 
                                   2959 ; to those of 'mask' that are at 1.
                                   2960 ; arguments:
                                   2961 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2962 ;   mask	    ~mask&*addr  
                                   2963 ; output:
                                   2964 ;	none 
                                   2965 ;--------------------------
      001074                       2966 bit_reset:
      001074 CD 0C 66         [ 4] 2967 	call arg_list 
      001077 A1 02            [ 1] 2968 	cp a,#2  
      001079 27 03            [ 1] 2969 	jreq 1$ 
      00107B CC 07 BB         [ 2] 2970 	jp syntax_error
      00107E                       2971 1$: 
      00107E 85               [ 2] 2972 	popw x ; mask 
      00107F 9F               [ 1] 2973 	ld a,xl 
      001080 43               [ 1] 2974 	cpl a 
      001081 85               [ 2] 2975 	popw x ; addr  
      001082 F4               [ 1] 2976 	and a,(x)
      001083 F7               [ 1] 2977 	ld (x),a 
      001084 81               [ 4] 2978 	ret 
                                   2979 
                                   2980 ;---------------------
                                   2981 ; BASIC: BTOGL addr,mask
                                   2982 ; toggle bits at 'addr' corresponding 
                                   2983 ; to those of 'mask' that are at 1.
                                   2984 ; arguments:
                                   2985 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2986 ;   mask	    mask^*addr  
                                   2987 ; output:
                                   2988 ;	none 
                                   2989 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001085                       2990 bit_toggle:
      001085 CD 0C 66         [ 4] 2991 	call arg_list 
      001088 A1 02            [ 1] 2992 	cp a,#2 
      00108A 27 03            [ 1] 2993 	jreq 1$ 
      00108C CC 07 BB         [ 2] 2994 	jp syntax_error
      00108F 85               [ 2] 2995 1$: popw x ; mask 
      001090 9F               [ 1] 2996 	ld a,xl 
      001091 85               [ 2] 2997 	popw x ; addr  
      001092 F8               [ 1] 2998 	xor a,(x)
      001093 F7               [ 1] 2999 	ld (x),a 
      001094 81               [ 4] 3000 	ret 
                                   3001 
                                   3002 
                                   3003 ;---------------------
                                   3004 ; BASIC: BTEST(addr,bit)
                                   3005 ; return bit value at 'addr' 
                                   3006 ; bit is in range {0..7}.
                                   3007 ; arguments:
                                   3008 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3009 ;   bit 	    bit position {0..7}  
                                   3010 ; output:
                                   3011 ;	none 
                                   3012 ;--------------------------
      001095                       3013 bit_test:
      001095 CD 0C 61         [ 4] 3014 	call func_args 
      001098 A1 02            [ 1] 3015 	cp a,#2
      00109A 27 03            [ 1] 3016 	jreq 0$
      00109C CC 07 BB         [ 2] 3017 	jp syntax_error
      00109F                       3018 0$:	
      00109F 85               [ 2] 3019 	popw x 
      0010A0 9F               [ 1] 3020 	ld a,xl 
      0010A1 A4 07            [ 1] 3021 	and a,#7
      0010A3 88               [ 1] 3022 	push a   
      0010A4 A6 01            [ 1] 3023 	ld a,#1 
      0010A6 0D 01            [ 1] 3024 1$: tnz (1,sp)
      0010A8 27 05            [ 1] 3025 	jreq 2$
      0010AA 48               [ 1] 3026 	sll a 
      0010AB 0A 01            [ 1] 3027 	dec (1,sp)
      0010AD 20 F7            [ 2] 3028 	jra 1$
      0010AF                       3029 2$: _drop 1 
      0010AF 5B 01            [ 2]    1     addw sp,#1 
      0010B1 85               [ 2] 3030 	popw x 
      0010B2 F4               [ 1] 3031 	and a,(x)
      0010B3 27 02            [ 1] 3032 	jreq 3$
      0010B5 A6 01            [ 1] 3033 	ld a,#1 
      0010B7 5F               [ 1] 3034 3$:	clrw x 
      0010B8 97               [ 1] 3035 	ld xl,a 
      0010B9 A6 84            [ 1] 3036 	ld a,#TK_INTGR
      0010BB 81               [ 4] 3037 	ret
                                   3038 
                                   3039 
                                   3040 ;--------------------
                                   3041 ; BASIC: POKE addr,byte
                                   3042 ; put a byte at addr 
                                   3043 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010BC                       3044 poke:
      0010BC CD 0C 66         [ 4] 3045 	call arg_list 
      0010BF A1 02            [ 1] 3046 	cp a,#2
      0010C1 27 03            [ 1] 3047 	jreq 1$
      0010C3 CC 07 BB         [ 2] 3048 	jp syntax_error
      0010C6                       3049 1$:	
      0010C6 85               [ 2] 3050 	popw x  
      0010C7 9F               [ 1] 3051     ld a,xl 
      0010C8 85               [ 2] 3052 	popw x 
      0010C9 F7               [ 1] 3053 	ld (x),a 
      0010CA 81               [ 4] 3054 	ret 
                                   3055 
                                   3056 ;-----------------------
                                   3057 ; BASIC: PEEK(addr)
                                   3058 ; get the byte at addr 
                                   3059 ; input:
                                   3060 ;	none 
                                   3061 ; output:
                                   3062 ;	X 		value 
                                   3063 ;-----------------------
      0010CB                       3064 peek:
      0010CB CD 0C 61         [ 4] 3065 	call func_args
      0010CE A1 01            [ 1] 3066 	cp a,#1 
      0010D0 27 03            [ 1] 3067 	jreq 1$
      0010D2 CC 07 BB         [ 2] 3068 	jp syntax_error
      0010D5 85               [ 2] 3069 1$: popw x 
      0010D6 F6               [ 1] 3070 	ld a,(x)
      0010D7 5F               [ 1] 3071 	clrw x 
      0010D8 97               [ 1] 3072 	ld xl,a 
      0010D9 A6 84            [ 1] 3073 	ld a,#TK_INTGR
      0010DB 81               [ 4] 3074 	ret 
                                   3075 
                                   3076 ;---------------------------
                                   3077 ; BASIC IF expr : instructions
                                   3078 ; evaluate expr and if true 
                                   3079 ; execute instructions on same line. 
                                   3080 ;----------------------------
      0010DC                       3081 if: 
      0010DC CD 0D B1         [ 4] 3082 	call relation 
      0010DF A1 84            [ 1] 3083 	cp a,#TK_INTGR
      0010E1 27 03            [ 1] 3084 	jreq 1$ 
      0010E3 CC 07 BB         [ 2] 3085 	jp syntax_error
      0010E6 4F               [ 1] 3086 1$:	clr a 
      0010E7 5D               [ 2] 3087 	tnzw x 
      0010E8 26 05            [ 1] 3088 	jrne 9$  
                                   3089 ;skip to next line
      0010EA 55 00 03 00 01   [ 1] 3090 	mov in,count
      0010EF 81               [ 4] 3091 9$:	ret 
                                   3092 
                                   3093 ;------------------------
                                   3094 ; BASIC: FOR var=expr 
                                   3095 ; set variable to expression 
                                   3096 ; leave variable address 
                                   3097 ; on stack and set
                                   3098 ; FLOOP bit in 'flags'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3099 ;-----------------
                           000001  3100 	RETL1=1 ; return address  
                           000003  3101 	FSTEP=3  ; variable increment
                           000005  3102 	LIMIT=5 ; loop limit 
                           000007  3103 	CVAR=7   ; control variable 
                           000009  3104 	INW=9   ;  in.w saved
                           00000B  3105 	BPTR=11 ; baseptr saved
                           00000A  3106 	VSIZE=10  
      0010F0                       3107 for: ; { -- var_addr }
      0010F0 85               [ 2] 3108 	popw x ; call return address 
      0010F1                       3109 	_vars VSIZE 
      0010F1 52 0A            [ 2]    1     sub sp,#VSIZE 
      0010F3 89               [ 2] 3110 	pushw x  ; RETL1 
      0010F4 A6 85            [ 1] 3111 	ld a,#TK_VAR 
      0010F6 CD 0C 54         [ 4] 3112 	call expect
      0010F9 1F 07            [ 2] 3113 	ldw (CVAR,sp),x  ; control variable 
      0010FB CD 0E 91         [ 4] 3114 	call let_var 
      0010FE 72 14 00 23      [ 1] 3115 	bset flags,#FLOOP 
                                   3116 ; open space on stack for loop data 
      001102 5F               [ 1] 3117 	clrw x 
      001103 1F 0B            [ 2] 3118 	ldw (BPTR,sp),x 
      001105 1F 09            [ 2] 3119 	ldw (INW,sp),x 
      001107 CD 08 AD         [ 4] 3120 	call next_token 
      00110A A1 80            [ 1] 3121 	cp a,#TK_CMD 
      00110C 27 03            [ 1] 3122 	jreq 1$
      00110E CC 07 BB         [ 2] 3123 	jp syntax_error
      001111                       3124 1$:  
      001111 A3 11 19         [ 2] 3125 	cpw x,#to 
      001114 27 03            [ 1] 3126 	jreq to
      001116 CC 07 BB         [ 2] 3127 	jp syntax_error 
                                   3128 
                                   3129 ;-----------------------------------
                                   3130 ; BASIC: TO expr 
                                   3131 ; second part of FOR loop initilization
                                   3132 ; leave limit on stack and set 
                                   3133 ; FTO bit in 'flags'
                                   3134 ;-----------------------------------
      001119                       3135 to: ; { var_addr -- var_addr limit step }
      001119 72 04 00 23 03   [ 2] 3136 	btjt flags,#FLOOP,1$
      00111E CC 07 BB         [ 2] 3137 	jp syntax_error
      001121 CD 0D B1         [ 4] 3138 1$: call relation  
      001124 A1 84            [ 1] 3139 	cp a,#TK_INTGR 
      001126 27 03            [ 1] 3140 	jreq 2$ 
      001128 CC 07 BB         [ 2] 3141 	jp syntax_error
      00112B 1F 05            [ 2] 3142 2$: ldw (LIMIT,sp),x
                                   3143 ;	ldw x,in.w 
      00112D CD 08 AD         [ 4] 3144 	call next_token
      001130 A1 00            [ 1] 3145 	cp a,#TK_NONE  
      001132 27 0E            [ 1] 3146 	jreq 4$ 
      001134 A1 80            [ 1] 3147 	cp a,#TK_CMD
      001136 26 05            [ 1] 3148 	jrne 3$
      001138 A3 11 49         [ 2] 3149 	cpw x,#step 
      00113B 27 0C            [ 1] 3150 	jreq step
      00113D                       3151 3$:	
      00113D                       3152 	_unget_token   	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      00113D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001142                       3153 4$:	
      001142 AE 00 01         [ 2] 3154 	ldw x,#1   ; default step  
      001145 1F 03            [ 2] 3155 	ldw (FSTEP,sp),x 
      001147 20 14            [ 2] 3156 	jra store_loop_addr 
                                   3157 
                                   3158 
                                   3159 ;----------------------------------
                                   3160 ; BASIC: STEP expr 
                                   3161 ; optional third par of FOR loop
                                   3162 ; initialization. 	
                                   3163 ;------------------------------------
      001149                       3164 step: ; {var limit -- var limit step}
      001149 72 04 00 23 03   [ 2] 3165 	btjt flags,#FLOOP,1$
      00114E CC 07 BB         [ 2] 3166 	jp syntax_error
      001151 CD 0D B1         [ 4] 3167 1$: call relation
      001154 A1 84            [ 1] 3168 	cp a,#TK_INTGR
      001156 27 03            [ 1] 3169 	jreq 2$
      001158 CC 07 BB         [ 2] 3170 	jp syntax_error
      00115B 1F 03            [ 2] 3171 2$:	ldw (FSTEP,sp),x ; step
                                   3172 ; leave loop back entry point on cstack 
                                   3173 ; cstack is 1 call deep from interpreter
      00115D                       3174 store_loop_addr:
      00115D CE 00 04         [ 2] 3175 	ldw x,basicptr  
      001160 1F 0B            [ 2] 3176 	ldw (BPTR,sp),x 
      001162 CE 00 00         [ 2] 3177 	ldw x,in.w 
      001165 1F 09            [ 2] 3178 	ldw (INW,sp),x   
      001167 72 15 00 23      [ 1] 3179 	bres flags,#FLOOP 
      00116B 72 5C 00 20      [ 1] 3180 	inc loop_depth  
      00116F 81               [ 4] 3181 	ret 
                                   3182 
                                   3183 ;--------------------------------
                                   3184 ; BASIC: NEXT var 
                                   3185 ; FOR loop control 
                                   3186 ; increment variable with step 
                                   3187 ; and compare with limit 
                                   3188 ; loop if threshold not crossed.
                                   3189 ; else stack. 
                                   3190 ; and decrement 'loop_depth' 
                                   3191 ;--------------------------------
      001170                       3192 next: ; {var limit step retl1 -- [var limit step ] }
      001170 72 5D 00 20      [ 1] 3193 	tnz loop_depth 
      001174 26 03            [ 1] 3194 	jrne 1$ 
      001176 CC 07 BB         [ 2] 3195 	jp syntax_error 
      001179                       3196 1$: 
      001179 A6 85            [ 1] 3197 	ld a,#TK_VAR 
      00117B CD 0C 54         [ 4] 3198 	call expect
                                   3199 ; check for good variable after NEXT 	 
      00117E 13 07            [ 2] 3200 	cpw x,(CVAR,sp)
      001180 27 03            [ 1] 3201 	jreq 2$  
      001182 CC 07 BB         [ 2] 3202 	jp syntax_error ; not the good one 
      001185                       3203 2$: ; increment variable 
      001185 FE               [ 2] 3204 	ldw x,(x)  ; get var value 
      001186 72 FB 03         [ 2] 3205 	addw x,(FSTEP,sp) ; var+step 
      001189 16 07            [ 2] 3206 	ldw y,(CVAR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00118B 90 FF            [ 2] 3207 	ldw (y),x ; save var new value 
                                   3208 ; check sign of STEP  
      00118D A6 80            [ 1] 3209 	ld a,#0x80
      00118F 15 03            [ 1] 3210 	bcp a,(FSTEP,sp)
      001191 2A 06            [ 1] 3211 	jrpl 4$
                                   3212 ;negative step 
      001193 13 05            [ 2] 3213 	cpw x,(LIMIT,sp)
      001195 2F 1B            [ 1] 3214 	jrslt loop_done
      001197 20 04            [ 2] 3215 	jra loop_back 
      001199                       3216 4$: ; positive step
      001199 13 05            [ 2] 3217 	cpw x,(LIMIT,sp)
      00119B 2C 15            [ 1] 3218 	jrsgt loop_done
      00119D                       3219 loop_back:
      00119D 1E 0B            [ 2] 3220 	ldw x,(BPTR,sp)
      00119F CF 00 04         [ 2] 3221 	ldw basicptr,x 
      0011A2 72 01 00 23 05   [ 2] 3222 	btjf flags,#FRUN,1$ 
      0011A7 E6 02            [ 1] 3223 	ld a,(2,x)
      0011A9 C7 00 03         [ 1] 3224 	ld count,a
      0011AC 1E 09            [ 2] 3225 1$:	ldw x,(INW,sp)
      0011AE CF 00 00         [ 2] 3226 	ldw in.w,x 
      0011B1 81               [ 4] 3227 	ret 
      0011B2                       3228 loop_done:
                                   3229 	; remove loop data from stack  
      0011B2 85               [ 2] 3230 	popw x
      0011B3                       3231 	_drop VSIZE 
      0011B3 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0011B5 72 5A 00 20      [ 1] 3232 	dec loop_depth 
                                   3233 ;	pushw x 
                                   3234 ;	ret 
      0011B9 FC               [ 2] 3235 	jp (x)
                                   3236 
                                   3237 ;----------------------------
                                   3238 ; called by goto/gosub
                                   3239 ; to get target line number 
                                   3240 ;---------------------------
      0011BA                       3241 get_target_line:
      0011BA CD 0D B1         [ 4] 3242 	call relation 
      0011BD A1 84            [ 1] 3243 	cp a,#TK_INTGR
      0011BF 27 03            [ 1] 3244 	jreq 1$
      0011C1 CC 07 BB         [ 2] 3245 	jp syntax_error
      0011C4 CD 00 00         [ 4] 3246 1$:	call search_lineno  
      0011C7 5D               [ 2] 3247 	tnzw x 
      0011C8 26 05            [ 1] 3248 	jrne 2$ 
      0011CA A6 05            [ 1] 3249 	ld a,#ERR_NO_LINE 
      0011CC CC 07 BD         [ 2] 3250 	jp tb_error 
      0011CF 81               [ 4] 3251 2$:	ret 
                                   3252 
                                   3253 ;------------------------
                                   3254 ; BASIC: GOTO line# 
                                   3255 ; jump to line# 
                                   3256 ; here cstack is 2 call deep from interpreter 
                                   3257 ;------------------------
      0011D0                       3258 goto:
      0011D0 72 00 00 23 06   [ 2] 3259 	btjt flags,#FRUN,0$ 
      0011D5 A6 06            [ 1] 3260 	ld a,#ERR_RUN_ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0011D7 CC 07 BD         [ 2] 3261 	jp tb_error 
      0011DA 81               [ 4] 3262 	ret 
      0011DB CD 11 BA         [ 4] 3263 0$:	call get_target_line
      0011DE                       3264 jp_to_target:
      0011DE CF 00 04         [ 2] 3265 	ldw basicptr,x 
      0011E1 E6 02            [ 1] 3266 	ld a,(2,x)
      0011E3 C7 00 03         [ 1] 3267 	ld count,a 
      0011E6 35 03 00 01      [ 1] 3268 	mov in,#3 
      0011EA 81               [ 4] 3269 	ret 
                                   3270 
                                   3271 
                                   3272 ;--------------------
                                   3273 ; BASIC: GOSUB line#
                                   3274 ; basic subroutine call
                                   3275 ; actual line# and basicptr 
                                   3276 ; are saved on cstack
                                   3277 ; here cstack is 2 call deep from interpreter 
                                   3278 ;--------------------
                           000003  3279 	RET_ADDR=3
                           000005  3280 	RET_INW=5
                           000004  3281 	VSIZE=4  
      0011EB                       3282 gosub:
      0011EB 72 00 00 23 06   [ 2] 3283 	btjt flags,#FRUN,0$ 
      0011F0 A6 06            [ 1] 3284 	ld a,#ERR_RUN_ONLY
      0011F2 CC 07 BD         [ 2] 3285 	jp tb_error 
      0011F5 81               [ 4] 3286 	ret 
      0011F6 85               [ 2] 3287 0$:	popw x 
      0011F7                       3288 	_vars VSIZE  
      0011F7 52 04            [ 2]    1     sub sp,#VSIZE 
      0011F9 89               [ 2] 3289 	pushw x 
      0011FA CE 00 04         [ 2] 3290 	ldw x,basicptr
      0011FD 1F 03            [ 2] 3291 	ldw (RET_ADDR,sp),x 
      0011FF CD 11 BA         [ 4] 3292 	call get_target_line  
      001202 89               [ 2] 3293 	pushw x 
      001203 CE 00 00         [ 2] 3294 	ldw x,in.w 
      001206 1F 07            [ 2] 3295 	ldw (RET_INW+2,sp),x
      001208 85               [ 2] 3296 	popw x 
      001209 20 D3            [ 2] 3297 	jra jp_to_target
                                   3298 
                                   3299 ;------------------------
                                   3300 ; BASIC: RETURN 
                                   3301 ; exit from a subroutine 
                                   3302 ; 
                                   3303 ;------------------------
      00120B                       3304 return:
      00120B 72 00 00 23 05   [ 2] 3305 	btjt flags,#FRUN,0$ 
      001210 A6 06            [ 1] 3306 	ld a,#ERR_RUN_ONLY
      001212 CC 07 BD         [ 2] 3307 	jp tb_error 
      001215                       3308 0$:	
      001215 1E 03            [ 2] 3309 	ldw x,(RET_ADDR,sp) 
      001217 CF 00 04         [ 2] 3310 	ldw basicptr,x
      00121A E6 02            [ 1] 3311 	ld a,(2,x)
      00121C C7 00 03         [ 1] 3312 	ld count,a  
      00121F 1E 05            [ 2] 3313 	ldw x,(RET_INW,sp)
      001221 CF 00 00         [ 2] 3314 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001224 85               [ 2] 3315 	popw x 
      001225                       3316 	_drop VSIZE 
      001225 5B 04            [ 2]    1     addw sp,#VSIZE 
      001227 89               [ 2] 3317 	pushw x
      001228 81               [ 4] 3318 	ret  
                                   3319 
                                   3320 
                                   3321 ;----------------------------------
                                   3322 ; BASIC: RUN
                                   3323 ; run BASIC program in RAM
                                   3324 ;----------------------------------- 
      001229                       3325 run: 
      001229 72 01 00 23 02   [ 2] 3326 	btjf flags,#FRUN,0$  
      00122E 4F               [ 1] 3327 	clr a 
      00122F 81               [ 4] 3328 	ret
      001230                       3329 0$: 
      001230 72 09 00 23 12   [ 2] 3330 	btjf flags,#FBREAK,1$
      001235                       3331 	_drop 2 
      001235 5B 02            [ 2]    1     addw sp,#2 
      001237 CD 0F BD         [ 4] 3332 	call rest_context
      00123A                       3333 	_drop CTXT_SIZE 
      00123A 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00123C 72 19 00 23      [ 1] 3334 	bres flags,#FBREAK 
      001240 72 10 00 23      [ 1] 3335 	bset flags,#FRUN 
      001244 CC 08 61         [ 2] 3336 	jp interpreter 
      001247 CE 00 1C         [ 2] 3337 1$:	ldw x,txtbgn
      00124A C3 00 1E         [ 2] 3338 	cpw x,txtend 
      00124D 2B 0C            [ 1] 3339 	jrmi run_it 
      00124F AE 07 54         [ 2] 3340 	ldw x,#err_no_prog
      001252 CD 00 00         [ 4] 3341 	call puts 
      001255 55 00 03 00 01   [ 1] 3342 	mov in,count
      00125A 81               [ 4] 3343 	ret 
      00125B                       3344 run_it:	 
      00125B CD 0E 5E         [ 4] 3345     call ubound 
      00125E                       3346 	_drop 2 ; drop return address 
      00125E 5B 02            [ 2]    1     addw sp,#2 
                                   3347 ; clear data pointer 
      001260 5F               [ 1] 3348 	clrw x 
      001261 CF 00 06         [ 2] 3349 	ldw data_ptr,x 
      001264 72 5F 00 08      [ 1] 3350 	clr data_ofs 
      001268 72 5F 00 09      [ 1] 3351 	clr data_len 
                                   3352 ; initialize BASIC pointer 
      00126C CE 00 1C         [ 2] 3353 	ldw x,txtbgn 
      00126F CF 00 04         [ 2] 3354 	ldw basicptr,x 
      001272 E6 02            [ 1] 3355 	ld a,(2,x)
      001274 C7 00 03         [ 1] 3356 	ld count,a
      001277 35 03 00 01      [ 1] 3357 	mov in,#3	
      00127B 72 10 00 23      [ 1] 3358 	bset flags,#FRUN 
      00127F CC 08 61         [ 2] 3359 	jp interpreter 
                                   3360 
                                   3361 
                                   3362 ;----------------------
                                   3363 ; BASIC: END
                                   3364 ; end running program
                                   3365 ;---------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001282                       3366 cmd_end: 
                                   3367 ; clean stack 
      001282 AE 17 FF         [ 2] 3368 	ldw x,#STACK_EMPTY
      001285 94               [ 1] 3369 	ldw sp,x 
      001286 CC 08 42         [ 2] 3370 	jp warm_start
                                   3371 
                                   3372 ;-----------------
                                   3373 ; 1 Khz beep 
                                   3374 ;-----------------
      001289                       3375 beep_1khz:: 
      001289 AE 00 64         [ 2] 3376 	ldw x,#100
      00128C 90 AE 03 E8      [ 2] 3377 	ldw y,#1000
      001290 20 0D            [ 2] 3378 	jra beep
                                   3379 
                                   3380 ;-----------------------
                                   3381 ; BASIC: TONE expr1,expr2
                                   3382 ; used TIMER2 channel 1
                                   3383 ; to produce a tone 
                                   3384 ; arguments:
                                   3385 ;    expr1   frequency 
                                   3386 ;    expr2   duration msec.
                                   3387 ;---------------------------
      001292                       3388 tone:
      001292 CD 0C 66         [ 4] 3389 	call arg_list 
      001295 A1 02            [ 1] 3390 	cp a,#2 
      001297 27 03            [ 1] 3391 	jreq 1$
      001299 CC 07 BB         [ 2] 3392 	jp syntax_error 
      00129C                       3393 1$: 
      00129C 85               [ 2] 3394 	popw x ; duration
      00129D 90 85            [ 2] 3395 	popw y ; frequency 
      00129F                       3396 beep:  
      00129F 89               [ 2] 3397 	pushw x 
      0012A0 AE F4 24         [ 2] 3398 	ldw x,#TIM2_CLK_FREQ
      0012A3 65               [ 2] 3399 	divw x,y 
                                   3400 ; round to nearest integer 
      0012A4 90 A3 7A 12      [ 2] 3401 	cpw y,#TIM2_CLK_FREQ/2
      0012A8 2B 01            [ 1] 3402 	jrmi 2$
      0012AA 5C               [ 1] 3403 	incw x 
      0012AB                       3404 2$:	 
      0012AB 9E               [ 1] 3405 	ld a,xh 
      0012AC C7 53 0D         [ 1] 3406 	ld TIM2_ARRH,a 
      0012AF 9F               [ 1] 3407 	ld a,xl 
      0012B0 C7 53 0E         [ 1] 3408 	ld TIM2_ARRL,a 
                                   3409 ; 50% duty cycle 
      0012B3 8C               [ 1] 3410 	ccf 
      0012B4 56               [ 2] 3411 	rrcw x 
      0012B5 9E               [ 1] 3412 	ld a,xh 
      0012B6 C7 53 0F         [ 1] 3413 	ld TIM2_CCR1H,a 
      0012B9 9F               [ 1] 3414 	ld a,xl
      0012BA C7 53 10         [ 1] 3415 	ld TIM2_CCR1L,a
      0012BD 72 10 53 08      [ 1] 3416 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0012C1 72 10 53 00      [ 1] 3417 	bset TIM2_CR1,#TIM2_CR1_CEN
      0012C5 72 10 53 04      [ 1] 3418 	bset TIM2_EGR,#TIM2_EGR_UG
      0012C9 85               [ 2] 3419 	popw x 
      0012CA CD 18 58         [ 4] 3420 	call pause02
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0012CD 72 11 53 08      [ 1] 3421 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0012D1 72 11 53 00      [ 1] 3422 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0012D5 81               [ 4] 3423 	ret 
                                   3424 
                                   3425 ;-------------------------------
                                   3426 ; BASIC: ADCON 0|1 [,divisor]  
                                   3427 ; disable/enanble ADC 
                                   3428 ;-------------------------------
                           000003  3429 	ONOFF=3 
                           000001  3430 	DIVSOR=1
                           000004  3431 	VSIZE=4 
      0012D6                       3432 power_adc:
      0012D6 CD 0C 66         [ 4] 3433 	call arg_list 
      0012D9 A1 02            [ 1] 3434 	cp a,#2	
      0012DB 27 0B            [ 1] 3435 	jreq 1$
      0012DD A1 01            [ 1] 3436 	cp a,#1 
      0012DF 27 03            [ 1] 3437 	jreq 0$ 
      0012E1 CC 07 BB         [ 2] 3438 	jp syntax_error 
      0012E4 AE 00 00         [ 2] 3439 0$: ldw x,#0
      0012E7 89               [ 2] 3440 	pushw x  ; divisor 
      0012E8 1E 03            [ 2] 3441 1$: ldw x,(ONOFF,sp)
      0012EA 5D               [ 2] 3442 	tnzw x 
      0012EB 27 1A            [ 1] 3443 	jreq 2$ 
      0012ED 1E 01            [ 2] 3444 	ldw x,(DIVSOR,sp) ; divisor 
      0012EF 9F               [ 1] 3445 	ld a,xl
      0012F0 A4 07            [ 1] 3446 	and a,#7
      0012F2 4E               [ 1] 3447 	swap a 
      0012F3 C7 54 01         [ 1] 3448 	ld ADC_CR1,a
      0012F6 72 16 50 CA      [ 1] 3449 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0012FA 72 10 54 01      [ 1] 3450 	bset ADC_CR1,#ADC_CR1_ADON 
      0012FE                       3451 	_usec_dly 7 
      0012FE AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001301 5A               [ 2]    2     decw x
      001302 9D               [ 1]    3     nop 
      001303 26 FA            [ 1]    4     jrne .-4
      001305 20 08            [ 2] 3452 	jra 3$
      001307 72 11 54 01      [ 1] 3453 2$: bres ADC_CR1,#ADC_CR1_ADON
      00130B 72 17 50 CA      [ 1] 3454 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00130F                       3455 3$:	_drop VSIZE 
      00130F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001311 81               [ 4] 3456 	ret
                                   3457 
                                   3458 ;-----------------------------
                                   3459 ; BASIC: ADCREAD (channel)
                                   3460 ; read adc channel {0..5}
                                   3461 ; output:
                                   3462 ;   A 		TK_INTGR 
                                   3463 ;   X 		value 
                                   3464 ;-----------------------------
      001312                       3465 analog_read:
      001312 CD 0C 61         [ 4] 3466 	call func_args 
      001315 A1 01            [ 1] 3467 	cp a,#1 
      001317 27 03            [ 1] 3468 	jreq 1$
      001319 CC 07 BB         [ 2] 3469 	jp syntax_error
      00131C 85               [ 2] 3470 1$: popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00131D A3 00 05         [ 2] 3471 	cpw x,#5 
      001320 23 05            [ 2] 3472 	jrule 2$
      001322 A6 0A            [ 1] 3473 	ld a,#ERR_BAD_VALUE
      001324 CC 07 BD         [ 2] 3474 	jp tb_error 
      001327 9F               [ 1] 3475 2$: ld a,xl
      001328 C7 00 0D         [ 1] 3476 	ld acc8,a 
      00132B A6 05            [ 1] 3477 	ld a,#5
      00132D C0 00 0D         [ 1] 3478 	sub a,acc8 
      001330 C7 54 00         [ 1] 3479 	ld ADC_CSR,a
      001333 72 16 54 02      [ 1] 3480 	bset ADC_CR2,#ADC_CR2_ALIGN
      001337 72 10 54 01      [ 1] 3481 	bset ADC_CR1,#ADC_CR1_ADON
      00133B 72 0F 54 00 FB   [ 2] 3482 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001340 CE 54 04         [ 2] 3483 	ldw x,ADC_DRH
      001343 A6 84            [ 1] 3484 	ld a,#TK_INTGR
      001345 81               [ 4] 3485 	ret 
                                   3486 
                                   3487 ;-----------------------
                                   3488 ; BASIC: DREAD(pin)
                                   3489 ; Arduino pins 
                                   3490 ; read state of a digital pin 
                                   3491 ; pin# {0..15}
                                   3492 ; output:
                                   3493 ;    A 		TK_INTGR
                                   3494 ;    X      0|1 
                                   3495 ;-------------------------
                           000001  3496 	PINNO=1
                           000001  3497 	VSIZE=1
      001346                       3498 digital_read:
      001346                       3499 	_vars VSIZE 
      001346 52 01            [ 2]    1     sub sp,#VSIZE 
      001348 CD 0C 61         [ 4] 3500 	call func_args
      00134B A1 01            [ 1] 3501 	cp a,#1
      00134D 27 03            [ 1] 3502 	jreq 1$
      00134F CC 07 BB         [ 2] 3503 	jp syntax_error
      001352 85               [ 2] 3504 1$: popw x 
      001353 A3 00 0F         [ 2] 3505 	cpw x,#15 
      001356 23 05            [ 2] 3506 	jrule 2$
      001358 A6 0A            [ 1] 3507 	ld a,#ERR_BAD_VALUE
      00135A CC 07 BD         [ 2] 3508 	jp tb_error 
      00135D CD 19 96         [ 4] 3509 2$:	call select_pin 
      001360 6B 01            [ 1] 3510 	ld (PINNO,sp),a
      001362 E6 01            [ 1] 3511 	ld a,(GPIO_IDR,x)
      001364 0D 01            [ 1] 3512 	tnz (PINNO,sp)
      001366 27 05            [ 1] 3513 	jreq 8$
      001368 44               [ 1] 3514 3$: srl a 
      001369 0A 01            [ 1] 3515 	dec (PINNO,sp)
      00136B 26 FB            [ 1] 3516 	jrne 3$ 
      00136D A4 01            [ 1] 3517 8$: and a,#1 
      00136F 5F               [ 1] 3518 	clrw x 
      001370 97               [ 1] 3519 	ld xl,a 
      001371 A6 84            [ 1] 3520 	ld a,#TK_INTGR
      001373                       3521 	_drop VSIZE
      001373 5B 01            [ 2]    1     addw sp,#VSIZE 
      001375 81               [ 4] 3522 	ret
                                   3523 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3524 ;-----------------------
                                   3525 ; BASIC: DWRITE pin,0|1
                                   3526 ; Arduino pins 
                                   3527 ; write to a digital pin 
                                   3528 ; pin# {0..15}
                                   3529 ; output:
                                   3530 ;    A 		TK_INTGR
                                   3531 ;    X      0|1 
                                   3532 ;-------------------------
                           000001  3533 	PINNO=1
                           000002  3534 	PINVAL=2
                           000002  3535 	VSIZE=2
      001376                       3536 digital_write:
      001376                       3537 	_vars VSIZE 
      001376 52 02            [ 2]    1     sub sp,#VSIZE 
      001378 CD 0C 66         [ 4] 3538 	call arg_list  
      00137B A1 02            [ 1] 3539 	cp a,#2 
      00137D 27 03            [ 1] 3540 	jreq 1$
      00137F CC 07 BB         [ 2] 3541 	jp syntax_error
      001382 85               [ 2] 3542 1$: popw x 
      001383 9F               [ 1] 3543 	ld a,xl 
      001384 6B 02            [ 1] 3544 	ld (PINVAL,sp),a
      001386 85               [ 2] 3545 	popw x 
      001387 A3 00 0F         [ 2] 3546 	cpw x,#15 
      00138A 23 05            [ 2] 3547 	jrule 2$
      00138C A6 0A            [ 1] 3548 	ld a,#ERR_BAD_VALUE
      00138E CC 07 BD         [ 2] 3549 	jp tb_error 
      001391 CD 19 96         [ 4] 3550 2$:	call select_pin 
      001394 6B 01            [ 1] 3551 	ld (PINNO,sp),a 
      001396 A6 01            [ 1] 3552 	ld a,#1
      001398 0D 01            [ 1] 3553 	tnz (PINNO,sp)
      00139A 27 05            [ 1] 3554 	jreq 4$
      00139C 48               [ 1] 3555 3$: sll a
      00139D 0A 01            [ 1] 3556 	dec (PINNO,sp)
      00139F 26 FB            [ 1] 3557 	jrne 3$
      0013A1 0D 02            [ 1] 3558 4$: tnz (PINVAL,sp)
      0013A3 26 05            [ 1] 3559 	jrne 5$
      0013A5 43               [ 1] 3560 	cpl a 
      0013A6 E4 00            [ 1] 3561 	and a,(GPIO_ODR,x)
      0013A8 20 02            [ 2] 3562 	jra 8$
      0013AA EA 00            [ 1] 3563 5$: or a,(GPIO_ODR,x)
      0013AC E7 00            [ 1] 3564 8$: ld (GPIO_ODR,x),a 
      0013AE                       3565 	_drop VSIZE 
      0013AE 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013B0 81               [ 4] 3566 	ret
                                   3567 
                                   3568 
                                   3569 ;-----------------------
                                   3570 ; BASIC: STOP
                                   3571 ; stop progam execution  
                                   3572 ; without resetting pointers 
                                   3573 ; the program is resumed
                                   3574 ; with RUN 
                                   3575 ;-------------------------
      0013B1                       3576 stop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013B1 72 00 00 23 02   [ 2] 3577 	btjt flags,#FRUN,2$
      0013B6 4F               [ 1] 3578 	clr a
      0013B7 81               [ 4] 3579 	ret 
      0013B8                       3580 2$:	 
                                   3581 ; create space on cstack to save context 
      0013B8 AE 13 DF         [ 2] 3582 	ldw x,#break_point 
      0013BB CD 00 00         [ 4] 3583 	call puts 
      0013BE                       3584 	_drop 2 ;drop return address 
      0013BE 5B 02            [ 2]    1     addw sp,#2 
      0013C0                       3585 	_vars CTXT_SIZE ; context size 
      0013C0 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0013C2 CD 0F AD         [ 4] 3586 	call save_context 
      0013C5 AE 16 90         [ 2] 3587 	ldw x,#tib 
      0013C8 CF 00 04         [ 2] 3588 	ldw basicptr,x
      0013CB 7F               [ 1] 3589 	clr (x)
      0013CC 72 5F 00 03      [ 1] 3590 	clr count  
      0013D0 5F               [ 1] 3591 	clrw x 
      0013D1 CF 00 00         [ 2] 3592 	ldw in.w,x
      0013D4 72 11 00 23      [ 1] 3593 	bres flags,#FRUN 
      0013D8 72 18 00 23      [ 1] 3594 	bset flags,#FBREAK
      0013DC CC 08 61         [ 2] 3595 	jp interpreter 
      0013DF 0A 62 72 65 61 6B 20  3596 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3597 
                                   3598 ;-----------------------
                                   3599 ; BASIC: NEW
                                   3600 ; from command line only 
                                   3601 ; free program memory
                                   3602 ; and clear variables 
                                   3603 ;------------------------
      0013FD                       3604 new: 
      0013FD 72 01 00 23 01   [ 2] 3605 	btjf flags,#FRUN,0$ 
      001402 81               [ 4] 3606 	ret 
      001403                       3607 0$:	
      001403 CD 06 25         [ 4] 3608 	call clear_basic 
      001406 81               [ 4] 3609 	ret 
                                   3610 	 
                                   3611 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3612 ;  file system routines
                                   3613 ;  MCU flash memory from
                                   3614 ;  0x10000-0x27fff is 
                                   3615 ;  used to store BASIC 
                                   3616 ;  program files. 
                                   3617 ;  use 128 bytes sectors
                                   3618 ;  because this is the MCU 
                                   3619 ;  row size.
                                   3620 ;  file entry aligned to row
                                   3621 ;  	name  variable length
                                   3622 ;  	size  2 bytes  
                                   3623 ; 	data  variable length 
                                   3624 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3625 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3626 ;---------------------------
                                   3627 ; fill pad with zeros 
                                   3628 ;--------------------------
      001407                       3629 zero_pad:
      001407 AE 16 E0         [ 2] 3630 	ldw x,#pad 
      00140A A6 80            [ 1] 3631 	ld a,#PAD_SIZE 
      00140C 7F               [ 1] 3632 1$:	clr (x)
      00140D 5C               [ 1] 3633 	incw x 
      00140E 4A               [ 1] 3634 	dec a 
      00140F 26 FB            [ 1] 3635 	jrne 1$
      001411 81               [ 4] 3636 	ret 
                                   3637 
                                   3638 ;--------------------------
                                   3639 ; align farptr to BLOCK_SIZE 
                                   3640 ;---------------------------
      001412                       3641 row_align:
      001412 A6 7F            [ 1] 3642 	ld a,#0x7f 
      001414 C4 00 18         [ 1] 3643 	and a,farptr+2 
      001417 27 13            [ 1] 3644 	jreq 1$ 
      001419 CE 00 17         [ 2] 3645 	ldw x,farptr+1 
      00141C 1C 00 80         [ 2] 3646 	addw x,#BLOCK_SIZE 
      00141F 24 04            [ 1] 3647 	jrnc 0$
      001421 72 5C 00 16      [ 1] 3648 	inc farptr 
      001425 9F               [ 1] 3649 0$: ld a,xl 
      001426 A4 80            [ 1] 3650 	and a,#0x80
      001428 97               [ 1] 3651 	ld xl,a
      001429 CF 00 17         [ 2] 3652 	ldw farptr+1,x  	
      00142C 81               [ 4] 3653 1$:	ret
                                   3654 
                                   3655 ;--------------------
                                   3656 ; input:
                                   3657 ;   X     increment 
                                   3658 ; output:
                                   3659 ;   farptr  incremented 
                                   3660 ;---------------------
      00142D                       3661 incr_farptr:
      00142D 72 BB 00 17      [ 2] 3662 	addw x,farptr+1 
      001431 24 04            [ 1] 3663 	jrnc 1$
      001433 72 5C 00 16      [ 1] 3664 	inc farptr 
      001437 CF 00 17         [ 2] 3665 1$:	ldw farptr+1,x  
      00143A 81               [ 4] 3666 	ret 
                                   3667 
                                   3668 ;------------------------------
                                   3669 ; extended flash memory used as FLASH_DRIVE 
                                   3670 ; seek end of used flash drive   
                                   3671 ; starting at 0x10000 address.
                                   3672 ; 4 consecutives 0 bytes signal free space. 
                                   3673 ; input:
                                   3674 ;	none
                                   3675 ; output:
                                   3676 ;   ffree     free_addr| 0 if memory full.
                                   3677 ;------------------------------
      00143B                       3678 seek_fdrive:
                                   3679 ; start scan at 0x10000 address 
      00143B A6 01            [ 1] 3680 	ld a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00143D C7 00 16         [ 1] 3681 	ld farptr,a 
      001440 5F               [ 1] 3682 	clrw x 
      001441 CF 00 17         [ 2] 3683 	ldw farptr+1,x 
      001444                       3684 1$:
      001444 AE 00 03         [ 2] 3685 	ldw x,#3  
      001447 92 AF 00 16      [ 5] 3686 2$:	ldf a,([farptr],x) 
      00144B 26 05            [ 1] 3687 	jrne 3$
      00144D 5A               [ 2] 3688 	decw x
      00144E 2A F7            [ 1] 3689 	jrpl 2$
      001450 20 0E            [ 2] 3690 	jra 4$ 
      001452 AE 00 80         [ 2] 3691 3$:	ldw x,#BLOCK_SIZE 
      001455 CD 14 2D         [ 4] 3692 	call incr_farptr
      001458 AE 02 80         [ 2] 3693 	ldw x,#0x280  
      00145B C3 00 16         [ 2] 3694 	cpw x,farptr
      00145E 22 E4            [ 1] 3695 	jrugt 1$
      001460                       3696 4$: ; copy farptr to ffree	 
      001460 CE 00 16         [ 2] 3697 	ldw x,farptr 
      001463 C6 00 18         [ 1] 3698 	ld a,farptr+2 
      001466 CF 00 19         [ 2] 3699 	ldw ffree,x 
      001469 C7 00 1B         [ 1] 3700 	ld ffree+2,a  
      00146C 81               [ 4] 3701 	ret 
                                   3702 
                                   3703 ;-----------------------
                                   3704 ; return amount of free 
                                   3705 ; space on flash drive
                                   3706 ; input:
                                   3707 ;   none
                                   3708 ; output:
                                   3709 ;   acc24   free space 
                                   3710 ;-----------------------
      00146D                       3711 disk_free:
      00146D AE 80 00         [ 2] 3712 	ldw x,#0x8000
      001470 72 B0 00 1A      [ 2] 3713 	subw x,ffree+1
      001474 A6 02            [ 1] 3714 	ld a,#2
      001476 C2 00 19         [ 1] 3715 	sbc a,ffree 
      001479 C7 00 0B         [ 1] 3716 	ld acc24,a 
      00147C CF 00 0C         [ 2] 3717 	ldw acc16,x 
      00147F 81               [ 4] 3718 	ret 
                                   3719 
                                   3720 ;-----------------------
                                   3721 ; compare file name 
                                   3722 ; with name pointed by Y  
                                   3723 ; input:
                                   3724 ;   farptr   file name 
                                   3725 ;   Y        target name 
                                   3726 ; output:
                                   3727 ;   farptr 	 at file_name
                                   3728 ;   X 		 farptr[x] point at size field  
                                   3729 ;   Carry    0|1 no match|match  
                                   3730 ;----------------------
      001480                       3731 cmp_name:
      001480 5F               [ 1] 3732 	clrw x
      001481 92 AF 00 16      [ 5] 3733 1$:	ldf a,([farptr],x)
      001485 90 F1            [ 1] 3734 	cp a,(y)
      001487 26 08            [ 1] 3735 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001489 4D               [ 1] 3736 	tnz a 
      00148A 27 12            [ 1] 3737 	jreq 9$ 
      00148C 5C               [ 1] 3738     incw x 
      00148D 90 5C            [ 1] 3739 	incw y 
      00148F 20 F0            [ 2] 3740 	jra 1$
      001491                       3741 4$: ;no match 
      001491 4D               [ 1] 3742 	tnz a 
      001492 27 07            [ 1] 3743 	jreq 5$
      001494 5C               [ 1] 3744 	incw x 
      001495 92 AF 00 16      [ 5] 3745 	ldf a,([farptr],x)
      001499 20 F6            [ 2] 3746 	jra 4$  
      00149B 5C               [ 1] 3747 5$:	incw x ; farptr[x] point at 'size' field 
      00149C 98               [ 1] 3748 	rcf 
      00149D 81               [ 4] 3749 	ret
      00149E                       3750 9$: ; match  
      00149E 5C               [ 1] 3751 	incw x  ; farptr[x] at 'size' field 
      00149F 99               [ 1] 3752 	scf 
      0014A0 81               [ 4] 3753 	ret 
                                   3754 
                                   3755 ;-----------------------
                                   3756 ; search file in 
                                   3757 ; flash memory 
                                   3758 ; input:
                                   3759 ;   Y       file name  
                                   3760 ; output:
                                   3761 ;   farptr  addr at name|0
                                   3762 ;   X       offset to size field
                                   3763 ;   Carray   0 not found, 1 found 
                                   3764 ;-----------------------
                           000001  3765 	FSIZE=1
                           000003  3766 	YSAVE=3
                           000004  3767 	VSIZE=4 
      0014A1                       3768 search_file: 
      0014A1                       3769 	_vars VSIZE
      0014A1 52 04            [ 2]    1     sub sp,#VSIZE 
      0014A3 17 03            [ 2] 3770 	ldw (YSAVE,sp),y  
      0014A5 5F               [ 1] 3771 	clrw x 
      0014A6 CF 00 17         [ 2] 3772 	ldw farptr+1,x 
      0014A9 35 01 00 16      [ 1] 3773 	mov farptr,#1
      0014AD                       3774 1$:	
                                   3775 ; check if farptr is after any file 
                                   3776 ; if  0 then so.
      0014AD 92 BC 00 16      [ 5] 3777 	ldf a,[farptr]
      0014B1 27 27            [ 1] 3778 	jreq 6$
      0014B3 5F               [ 1] 3779 2$: clrw x 	
      0014B4 16 03            [ 2] 3780 	ldw y,(YSAVE,sp) 
      0014B6 CD 14 80         [ 4] 3781 	call cmp_name
      0014B9 25 2F            [ 1] 3782 	jrc 9$
      0014BB 92 AF 00 16      [ 5] 3783 	ldf a,([farptr],x)
      0014BF 6B 01            [ 1] 3784 	ld (FSIZE,sp),a 
      0014C1 5C               [ 1] 3785 	incw x 
      0014C2 92 AF 00 16      [ 5] 3786 	ldf a,([farptr],x)
      0014C6 6B 02            [ 1] 3787 	ld (FSIZE+1,sp),a 
      0014C8 5C               [ 1] 3788 	incw x 
      0014C9 72 FB 01         [ 2] 3789 	addw x,(FSIZE,sp) ; skip over file data
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0014CC CD 14 2D         [ 4] 3790 	call incr_farptr
      0014CF CD 14 12         [ 4] 3791 	call row_align  
      0014D2 AE 02 80         [ 2] 3792 	ldw x,#0x280
      0014D5 C3 00 16         [ 2] 3793 	cpw x,farptr 
      0014D8 2A D3            [ 1] 3794 	jrpl 1$
      0014DA                       3795 6$: ; file not found 
      0014DA 72 5F 00 16      [ 1] 3796 	clr farptr
      0014DE 72 5F 00 17      [ 1] 3797 	clr farptr+1 
      0014E2 72 5F 00 18      [ 1] 3798 	clr farptr+2 
      0014E6                       3799 	_drop VSIZE 
      0014E6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014E8 98               [ 1] 3800 	rcf
      0014E9 81               [ 4] 3801 	ret
      0014EA                       3802 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      0014EA                       3803 	_drop VSIZE 
      0014EA 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014EC 99               [ 1] 3804 	scf 	
      0014ED 81               [ 4] 3805 	ret
                                   3806 
                                   3807 ;--------------------------------
                                   3808 ; BASIC: SAVE "name" 
                                   3809 ; save text program in 
                                   3810 ; flash memory used as permanent
                                   3811 ; storage from address 0x10000-0x27fff 
                                   3812 ;--------------------------------
                           000001  3813 	BSIZE=1
                           000003  3814 	NAMEPTR=3
                           000005  3815 	XSAVE=5
                           000007  3816 	YSAVE=7
                           000008  3817 	VSIZE=8 
      0014EE                       3818 save:
      0014EE 72 01 00 23 05   [ 2] 3819 	btjf flags,#FRUN,0$ 
      0014F3 A6 07            [ 1] 3820 	ld a,#ERR_CMD_ONLY 
      0014F5 CC 07 BD         [ 2] 3821 	jp tb_error
      0014F8                       3822 0$:	 
      0014F8 CE 00 1E         [ 2] 3823 	ldw x,txtend 
      0014FB 72 B0 00 1C      [ 2] 3824 	subw x,txtbgn
      0014FF 26 0C            [ 1] 3825 	jrne 1$
                                   3826 ; nothing to save 
      001501 AE 07 54         [ 2] 3827 	ldw x,#err_no_prog 
      001504 CD 00 00         [ 4] 3828 	call puts 
      001507 55 00 03 00 01   [ 1] 3829 	mov in,count 
      00150C 81               [ 4] 3830 	ret  	
      00150D                       3831 1$:	
      00150D                       3832 	_vars VSIZE 
      00150D 52 08            [ 2]    1     sub sp,#VSIZE 
      00150F 1F 01            [ 2] 3833 	ldw (BSIZE,sp),x 
      001511 CD 08 AD         [ 4] 3834 	call next_token	
      001514 A1 02            [ 1] 3835 	cp a,#TK_QSTR
      001516 27 03            [ 1] 3836 	jreq 2$
      001518 CC 07 BB         [ 2] 3837 	jp syntax_error
      00151B                       3838 2$: 
      00151B 1F 03            [ 2] 3839 	ldw (NAMEPTR,sp),x  
      00151D CD 01 9C         [ 4] 3840 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   3841 ; check if enough free space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001520 1E 03            [ 2] 3842 	ldw x,(NAMEPTR,sp)
      001522 CD 04 34         [ 4] 3843 	call strlen 
      001525 AB 03            [ 1] 3844 	add a,#3
      001527 5F               [ 1] 3845 	clrw x 
      001528 97               [ 1] 3846 	ld xl,a 
      001529 72 FB 01         [ 2] 3847 	addw x,(BSIZE,sp)
      00152C 4F               [ 1] 3848 	clr a 
      00152D 72 BB 00 1A      [ 2] 3849 	addw x,ffree+1 
      001531 C9 00 19         [ 1] 3850 	adc a,ffree 
      001534 A1 02            [ 1] 3851 	cp a,#2
      001536 2B 0A            [ 1] 3852 	jrmi 21$
      001538 A3 80 00         [ 2] 3853 	cpw x,#0x8000
      00153B 2B 05            [ 1] 3854 	jrmi 21$
      00153D A6 0E            [ 1] 3855 	ld a,#ERR_NO_FSPACE  
      00153F CC 07 BD         [ 2] 3856 	jp tb_error
      001542                       3857 21$: 
                                   3858 ; check for existing file of that name 
      001542 16 03            [ 2] 3859 	ldw y,(NAMEPTR,sp)	
      001544 CD 14 A1         [ 4] 3860 	call search_file 
      001547 24 05            [ 1] 3861 	jrnc 3$ 
      001549 A6 08            [ 1] 3862 	ld a,#ERR_DUPLICATE 
      00154B CC 07 BD         [ 2] 3863 	jp tb_error 
      00154E                       3864 3$:	; initialize farptr 
      00154E CE 00 19         [ 2] 3865 	ldw x,ffree 
      001551 C6 00 1B         [ 1] 3866 	ld a,ffree+2 
      001554 CF 00 16         [ 2] 3867 	ldw farptr,x 
      001557 C7 00 18         [ 1] 3868 	ld farptr+2,a 
                                   3869 ;** write file name to row buffer **	
      00155A 16 03            [ 2] 3870 	ldw y,(NAMEPTR,sp)  
      00155C AE 16 E0         [ 2] 3871 	ldw x,#pad 
      00155F CD 04 50         [ 4] 3872 	call strcpy
      001562 CD 04 34         [ 4] 3873 	call strlen 
      001565 5F               [ 1] 3874 	clrw x 
      001566 97               [ 1] 3875 	ld xl,a 
      001567 5C               [ 1] 3876 	incw  x
      001568 1C 16 E0         [ 2] 3877 	addw x,#pad 
                                   3878 ; ** write file size to row buffer 
      00156B 16 01            [ 2] 3879 	ldw y,(BSIZE,sp)
      00156D FF               [ 2] 3880 	ldw (x),y 
      00156E 1C 00 02         [ 2] 3881 	addw x,#2 
                                   3882 ; ** write file data to row buffer 
      001571 90 CE 00 1C      [ 2] 3883 	ldw y,txtbgn 
      001575 90 F6            [ 1] 3884 6$:	ld a,(y)
      001577 90 5C            [ 1] 3885 	incw y
      001579 F7               [ 1] 3886 	ld (x),a 
      00157A 5C               [ 1] 3887 	incw x
      00157B 90 C3 00 1E      [ 2] 3888 	cpw y,txtend 
      00157F 27 05            [ 1] 3889 	jreq 12$
      001581 A3 17 60         [ 2] 3890 	cpw x,#stack_full 
      001584 2B EF            [ 1] 3891 	jrmi 6$
      001586                       3892 12$:
      001586 17 07            [ 2] 3893 	ldw (YSAVE,sp),y 
      001588                       3894 14$: ; zero buffer end 
      001588 A3 17 60         [ 2] 3895 	cpw x,#stack_full
      00158B 27 04            [ 1] 3896 	jreq 16$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00158D 7F               [ 1] 3897 	clr (x)
      00158E 5C               [ 1] 3898 	incw x 
      00158F 20 F7            [ 2] 3899 	jra 14$
      001591                       3900 16$:
      001591 AE 16 E0         [ 2] 3901 	ldw x,#pad 
      001594 CD 01 B0         [ 4] 3902 	call write_row 
      001597 AE 00 80         [ 2] 3903 	ldw x,#BLOCK_SIZE 
      00159A CD 14 2D         [ 4] 3904 	call incr_farptr
      00159D AE 16 E0         [ 2] 3905 	ldw x,#pad 
      0015A0 16 07            [ 2] 3906 	ldw y,(YSAVE,sp)
      0015A2 90 C3 00 1E      [ 2] 3907 	cpw y,txtend 
      0015A6 2B CD            [ 1] 3908 	jrmi 6$
                                   3909 ; save farptr in ffree
      0015A8 CE 00 16         [ 2] 3910 	ldw x,farptr 
      0015AB C6 00 18         [ 1] 3911 	ld a,farptr+2 
      0015AE CF 00 19         [ 2] 3912 	ldw ffree,x 
      0015B1 C7 00 1B         [ 1] 3913 	ld ffree+2,a
                                   3914 ; print file size 	
      0015B4 1E 01            [ 2] 3915 	ldw x,(BSIZE,sp) 
      0015B6 CD 09 0E         [ 4] 3916 	call print_int 
      0015B9                       3917 	_drop VSIZE 
      0015B9 5B 08            [ 2]    1     addw sp,#VSIZE 
      0015BB 81               [ 4] 3918 	ret 
                                   3919 
                                   3920 ;----------------------
                                   3921 ; load file in RAM memory
                                   3922 ; input:
                                   3923 ;    farptr point at file size 
                                   3924 ; output:
                                   3925 ;   y point after BASIC program in RAM.
                                   3926 ;------------------------
      0015BC                       3927 load_file:
      0015BC CD 14 2D         [ 4] 3928 	call incr_farptr  
      0015BF CD 06 25         [ 4] 3929 	call clear_basic  
      0015C2 5F               [ 1] 3930 	clrw x
      0015C3 92 AF 00 16      [ 5] 3931 	ldf a,([farptr],x)
      0015C7 90 95            [ 1] 3932 	ld yh,a 
      0015C9 5C               [ 1] 3933 	incw x  
      0015CA 92 AF 00 16      [ 5] 3934 	ldf a,([farptr],x)
      0015CE 5C               [ 1] 3935 	incw x 
      0015CF 90 97            [ 1] 3936 	ld yl,a 
      0015D1 72 B9 00 1C      [ 2] 3937 	addw y,txtbgn
      0015D5 90 CF 00 1E      [ 2] 3938 	ldw txtend,y
      0015D9 90 CE 00 1C      [ 2] 3939 	ldw y,txtbgn
      0015DD                       3940 3$:	; load BASIC text 	
      0015DD 92 AF 00 16      [ 5] 3941 	ldf a,([farptr],x)
      0015E1 90 F7            [ 1] 3942 	ld (y),a 
      0015E3 5C               [ 1] 3943 	incw x 
      0015E4 90 5C            [ 1] 3944 	incw y 
      0015E6 90 C3 00 1E      [ 2] 3945 	cpw y,txtend 
      0015EA 2B F1            [ 1] 3946 	jrmi 3$
      0015EC 81               [ 4] 3947 	ret 
                                   3948 
                                   3949 ;------------------------
                                   3950 ; BASIC: LOAD "file" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3951 ; load file to RAM 
                                   3952 ; for execution 
                                   3953 ;------------------------
      0015ED                       3954 load:
      0015ED 72 01 00 23 07   [ 2] 3955 	btjf flags,#FRUN,0$ 
      0015F2 27 05            [ 1] 3956 	jreq 0$ 
      0015F4 A6 07            [ 1] 3957 	ld a,#ERR_CMD_ONLY 
      0015F6 CC 07 BD         [ 2] 3958 	jp tb_error 
      0015F9                       3959 0$:	
      0015F9 CD 08 AD         [ 4] 3960 	call next_token 
      0015FC A1 02            [ 1] 3961 	cp a,#TK_QSTR
      0015FE 27 03            [ 1] 3962 	jreq 1$
      001600 CC 07 BB         [ 2] 3963 	jp syntax_error 
      001603 90 93            [ 1] 3964 1$:	ldw y,x 
      001605 CD 14 A1         [ 4] 3965 	call search_file 
      001608 25 05            [ 1] 3966 	jrc 2$ 
      00160A A6 09            [ 1] 3967 	ld a,#ERR_NOT_FILE
      00160C CC 07 BD         [ 2] 3968 	jp tb_error  
      00160F                       3969 2$:
      00160F CD 15 BC         [ 4] 3970 	call load_file
                                   3971 ; print loaded size 	 
      001612 CE 00 1E         [ 2] 3972 	ldw x,txtend 
      001615 72 B0 00 1C      [ 2] 3973 	subw x,txtbgn
      001619 CD 09 0E         [ 4] 3974 	call print_int 
      00161C 81               [ 4] 3975 	ret 
                                   3976 
                                   3977 ;-----------------------------------
                                   3978 ; BASIC: FORGET ["file_name"] 
                                   3979 ; erase file_name and all others 
                                   3980 ; after it. 
                                   3981 ; without argument erase all files 
                                   3982 ;-----------------------------------
                           000001  3983 	NEW_FREE=1   ; free address after file delete
                           000004  3984 	BLOCK_COUNT=4  ; how many rows to delete
                           000005  3985 	VSIZE=5 
      00161D                       3986 forget:
      00161D                       3987 	_vars VSIZE 
      00161D 52 05            [ 2]    1     sub sp,#VSIZE 
      00161F CD 08 AD         [ 4] 3988 	call next_token 
      001622 A1 00            [ 1] 3989 	cp a,#TK_NONE 
      001624 27 18            [ 1] 3990 	jreq 2$ 
      001626 A1 02            [ 1] 3991 	cp a,#TK_QSTR
      001628 27 03            [ 1] 3992 	jreq 1$
      00162A CC 07 BB         [ 2] 3993 	jp syntax_error
      00162D 90 93            [ 1] 3994 1$: ldw y,x 
      00162F 55 00 03 00 01   [ 1] 3995 	mov in,count 
      001634 CD 14 A1         [ 4] 3996 	call search_file
      001637 25 0F            [ 1] 3997 	jrc 3$
      001639 A6 09            [ 1] 3998 	ld a,#ERR_NOT_FILE 
      00163B CC 07 BD         [ 2] 3999 	jp tb_error 
      00163E                       4000 2$: 
      00163E AE 01 00         [ 2] 4001 	ldw x,#0x100
      001641 4F               [ 1] 4002 	clr a 
      001642 CF 00 16         [ 2] 4003 	ldw farptr,x 
      001645 C7 00 18         [ 1] 4004 	ld farptr+2,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001648 C6 00 18         [ 1] 4005 3$:	ld a,farptr+2 
      00164B CE 00 16         [ 2] 4006 	ldw x,farptr 
                                   4007 ; save new free address 
      00164E 1F 01            [ 2] 4008 	ldw (NEW_FREE,sp),x
      001650 6B 03            [ 1] 4009 	ld (NEW_FREE+2,sp),a 
                                   4010 ; count blocks to erase 
      001652 C6 00 1B         [ 1] 4011 	ld a,ffree+2 
      001655 CE 00 19         [ 2] 4012 	ldw x,ffree 
      001658 C0 00 18         [ 1] 4013 	sub a,farptr+2 
      00165B 24 01            [ 1] 4014 	jrnc 4$
      00165D 5A               [ 2] 4015 	decw x 
      00165E 72 B0 00 16      [ 2] 4016 4$:	subw x,farptr 
                                   4017 ; X= X:A/BLOCK_SIZE 
      001662 48               [ 1] 4018 	sll a 
      001663 59               [ 2] 4019 	rlcw x 
      001664 1F 04            [ 2] 4020 	ldw (BLOCK_COUNT,sp),x
      001666 CD 01 68         [ 4] 4021 	call move_erase_to_ram
      001669 1E 04            [ 2] 4022 5$: ldw x,(BLOCK_COUNT,sp)
      00166B 5D               [ 2] 4023 	tnzw x
      00166C 27 10            [ 1] 4024 	jreq 6$
      00166E CD 01 E3         [ 4] 4025 	call block_erase 
      001671 AE 00 80         [ 2] 4026 	ldw x,#BLOCK_SIZE 
      001674 CD 14 2D         [ 4] 4027 	call incr_farptr 
      001677 1E 04            [ 2] 4028 	ldw x,(BLOCK_COUNT,sp)
      001679 5A               [ 2] 4029 	decw x 
      00167A 1F 04            [ 2] 4030 	ldw (BLOCK_COUNT,sp),x
      00167C 20 EB            [ 2] 4031 	jra 5$  
                                   4032 ; save new free address
      00167E 7B 03            [ 1] 4033 6$:	ld a,(NEW_FREE+2,sp)
      001680 1E 01            [ 2] 4034 	ldw x,(NEW_FREE,sp)
      001682 C7 00 1B         [ 1] 4035 	ld ffree+2,a 
      001685 CF 00 19         [ 2] 4036 	ldw ffree,x 
      001688                       4037 	_drop VSIZE 
      001688 5B 05            [ 2]    1     addw sp,#VSIZE 
      00168A 81               [ 4] 4038 	ret 
                                   4039 
                                   4040 ;----------------------
                                   4041 ; BASIC: DIR 
                                   4042 ; list saved files 
                                   4043 ;----------------------
                           000001  4044 	COUNT=1 ; files counter 
                           000002  4045 	VSIZE=2 
      00168B                       4046 directory:
      00168B                       4047 	_vars VSIZE 
      00168B 52 02            [ 2]    1     sub sp,#VSIZE 
      00168D 5F               [ 1] 4048 	clrw x 
      00168E 1F 01            [ 2] 4049 	ldw (COUNT,sp),x 
      001690 CF 00 17         [ 2] 4050 	ldw farptr+1,x 
      001693 35 01 00 16      [ 1] 4051 	mov farptr,#1 
      001697                       4052 dir_loop:
      001697 5F               [ 1] 4053 	clrw x 
      001698 92 AF 00 16      [ 5] 4054 	ldf a,([farptr],x)
      00169C 27 3B            [ 1] 4055 	jreq 8$ 
      00169E                       4056 1$: ;name loop 	
      00169E 92 AF 00 16      [ 5] 4057 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016A2 27 06            [ 1] 4058 	jreq 2$ 
      0016A4 CD 03 2B         [ 4] 4059 	call putc 
      0016A7 5C               [ 1] 4060 	incw x 
      0016A8 20 F4            [ 2] 4061 	jra 1$
      0016AA 5C               [ 1] 4062 2$: incw x ; skip ending 0. 
      0016AB A6 20            [ 1] 4063 	ld a,#SPACE 
      0016AD CD 03 2B         [ 4] 4064 	call putc 
                                   4065 ; get file size 	
      0016B0 92 AF 00 16      [ 5] 4066 	ldf a,([farptr],x)
      0016B4 90 95            [ 1] 4067 	ld yh,a 
      0016B6 5C               [ 1] 4068 	incw x 
      0016B7 92 AF 00 16      [ 5] 4069 	ldf a,([farptr],x)
      0016BB 5C               [ 1] 4070 	incw x 
      0016BC 90 97            [ 1] 4071 	ld yl,a 
      0016BE 90 89            [ 2] 4072 	pushw y 
      0016C0 72 FB 01         [ 2] 4073 	addw x,(1,sp)
                                   4074 ; skip to next file 
      0016C3 CD 14 2D         [ 4] 4075 	call incr_farptr
      0016C6 CD 14 12         [ 4] 4076 	call row_align
                                   4077 ; print file size 
      0016C9 85               [ 2] 4078 	popw x ; file size 
      0016CA CD 09 0E         [ 4] 4079 	call print_int 
      0016CD A6 0D            [ 1] 4080 	ld a,#CR 
      0016CF CD 03 2B         [ 4] 4081 	call putc
      0016D2 1E 01            [ 2] 4082 	ldw x,(COUNT,sp)
      0016D4 5C               [ 1] 4083 	incw x
      0016D5 1F 01            [ 2] 4084 	ldw (COUNT,sp),x  
      0016D7 20 BE            [ 2] 4085 	jra dir_loop
      0016D9                       4086 8$: ; print number of files 
      0016D9 1E 01            [ 2] 4087 	ldw x,(COUNT,sp)
      0016DB CD 09 0E         [ 4] 4088 	call print_int 
      0016DE AE 16 F8         [ 2] 4089 	ldw x,#file_count 
      0016E1 CD 00 00         [ 4] 4090 	call puts  
                                   4091 ; print drive free space 	
      0016E4 CD 14 6D         [ 4] 4092 	call disk_free
      0016E7 5F               [ 1] 4093 	clrw x  
      0016E8 35 0A 00 0A      [ 1] 4094 	mov base,#10 
      0016EC CD 09 1E         [ 4] 4095 	call prti24 
      0016EF AE 17 00         [ 2] 4096 	ldw x,#drive_free
      0016F2 CD 00 00         [ 4] 4097 	call puts 
      0016F5                       4098 	_drop VSIZE 
      0016F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0016F7 81               [ 4] 4099 	ret
      0016F8 20 66 69 6C 65 73 0A  4100 file_count: .asciz " files\n"
             00
      001700 20 62 79 74 65 73 20  4101 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4102 
                                   4103 ;---------------------
                                   4104 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4105 ; write 1 or more byte to FLASH or EEPROM
                                   4106 ; starting at address  
                                   4107 ; input:
                                   4108 ;   expr1  	is address 
                                   4109 ;   expr2,...,exprn   are bytes to write
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4110 ; output:
                                   4111 ;   none 
                                   4112 ;---------------------
                           000001  4113 	ADDR=1
                           000002  4114 	VSIZ=2 
      00170D                       4115 write:
      00170D                       4116 	_vars VSIZE 
      00170D 52 02            [ 2]    1     sub sp,#VSIZE 
      00170F 72 5F 00 16      [ 1] 4117 	clr farptr ; expect 16 bits address 
      001713 CD 0D 65         [ 4] 4118 	call expression
      001716 A1 84            [ 1] 4119 	cp a,#TK_INTGR 
      001718 27 03            [ 1] 4120 	jreq 0$
      00171A CC 07 BB         [ 2] 4121 	jp syntax_error
      00171D 1F 01            [ 2] 4122 0$: ldw (ADDR,sp),x 
      00171F CD 08 AD         [ 4] 4123 	call next_token 
      001722 A1 09            [ 1] 4124 	cp a,#TK_COMMA 
      001724 27 02            [ 1] 4125 	jreq 1$ 
      001726 20 19            [ 2] 4126 	jra 9$ 
      001728 CD 0D 65         [ 4] 4127 1$:	call expression
      00172B A1 84            [ 1] 4128 	cp a,#TK_INTGR
      00172D 27 03            [ 1] 4129 	jreq 2$
      00172F CC 07 BB         [ 2] 4130 	jp syntax_error
      001732 9F               [ 1] 4131 2$:	ld a,xl 
      001733 1E 01            [ 2] 4132 	ldw x,(ADDR,sp) 
      001735 CF 00 17         [ 2] 4133 	ldw farptr+1,x 
      001738 5F               [ 1] 4134 	clrw x 
      001739 CD 02 0D         [ 4] 4135 	call write_byte
      00173C 1E 01            [ 2] 4136 	ldw x,(ADDR,sp)
      00173E 5C               [ 1] 4137 	incw x 
      00173F 20 DC            [ 2] 4138 	jra 0$ 
      001741                       4139 9$:
      001741                       4140 	_drop VSIZE
      001741 5B 02            [ 2]    1     addw sp,#VSIZE 
      001743 81               [ 4] 4141 	ret 
                                   4142 
                                   4143 
                                   4144 ;---------------------
                                   4145 ;BASIC: CHAR(expr)
                                   4146 ; évaluate expression 
                                   4147 ; and take the 7 least 
                                   4148 ; bits as ASCII character
                                   4149 ; return a TK_CHAR 
                                   4150 ;---------------------
      001744                       4151 char:
      001744 CD 0C 61         [ 4] 4152 	call func_args 
      001747 A1 01            [ 1] 4153 	cp a,#1
      001749 27 03            [ 1] 4154 	jreq 1$
      00174B CC 07 BB         [ 2] 4155 	jp syntax_error
      00174E 85               [ 2] 4156 1$:	popw x 
      00174F 9F               [ 1] 4157 	ld a,xl 
      001750 A4 7F            [ 1] 4158 	and a,#0x7f 
      001752 97               [ 1] 4159 	ld xl,a
      001753 A6 03            [ 1] 4160 	ld a,#TK_CHAR
      001755 81               [ 4] 4161 	ret
                                   4162 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4163 ;---------------------
                                   4164 ; BASIC: ASC(string|char|TK_CFUNC)
                                   4165 ; extract first character 
                                   4166 ; of string argument 
                                   4167 ; return it as TK_INTGR 
                                   4168 ;---------------------
      001756                       4169 ascii:
      001756 A6 07            [ 1] 4170 	ld a,#TK_LPAREN
      001758 CD 0C 54         [ 4] 4171 	call expect 
      00175B CD 08 AD         [ 4] 4172 	call next_token 
      00175E A1 02            [ 1] 4173 	cp a,#TK_QSTR 
      001760 27 0E            [ 1] 4174 	jreq 1$
      001762 A1 03            [ 1] 4175 	cp a,#TK_CHAR 
      001764 27 0D            [ 1] 4176 	jreq 2$ 
      001766 A1 82            [ 1] 4177 	cp a,#TK_CFUNC 
      001768 27 03            [ 1] 4178 	jreq 0$
      00176A CC 07 BB         [ 2] 4179 	jp syntax_error
      00176D FD               [ 4] 4180 0$: call (x)
      00176E 20 03            [ 2] 4181 	jra 2$
      001770                       4182 1$: 
      001770 F6               [ 1] 4183 	ld a,(x) 
      001771 5F               [ 1] 4184 	clrw x
      001772 97               [ 1] 4185 	ld xl,a 
      001773                       4186 2$: 
      001773 89               [ 2] 4187 	pushw x 
      001774 A6 08            [ 1] 4188 	ld a,#TK_RPAREN 
      001776 CD 0C 54         [ 4] 4189 	call expect
      001779 85               [ 2] 4190 	popw x 
      00177A A6 84            [ 1] 4191 	ld a,#TK_INTGR 
      00177C 81               [ 4] 4192 	ret 
                                   4193 
                                   4194 ;---------------------
                                   4195 ;BASIC: KEY
                                   4196 ; wait for a character 
                                   4197 ; received from STDIN 
                                   4198 ; input:
                                   4199 ;	none 
                                   4200 ; output:
                                   4201 ;	X 		ASCII character 
                                   4202 ;---------------------
      00177D                       4203 key:
      00177D CD 03 4B         [ 4] 4204 	call getc 
      001780 5F               [ 1] 4205 	clrw x 
      001781 97               [ 1] 4206 	ld xl,a 
      001782 A6 84            [ 1] 4207 	ld a,#TK_INTGR
      001784 81               [ 4] 4208 	ret
                                   4209 
                                   4210 ;----------------------
                                   4211 ; BASIC: QKEY
                                   4212 ; Return true if there 
                                   4213 ; is a character in 
                                   4214 ; waiting in STDIN 
                                   4215 ; input:
                                   4216 ;  none 
                                   4217 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4218 ;   X 		0|-1 
                                   4219 ;-----------------------
      001785                       4220 qkey:: 
      001785 5F               [ 1] 4221 	clrw x 
      001786 C6 00 2D         [ 1] 4222 	ld a,rx1_head
      001789 C1 00 2E         [ 1] 4223 	cp a,rx1_tail 
      00178C 27 01            [ 1] 4224 	jreq 9$ 
      00178E 53               [ 2] 4225 	cplw x 
      00178F A6 84            [ 1] 4226 9$: ld a,#TK_INTGR
      001791 81               [ 4] 4227 	ret 
                                   4228 
                                   4229 ;---------------------
                                   4230 ; BASIC: GPIO(expr,reg)
                                   4231 ; return gpio address 
                                   4232 ; expr {0..8}
                                   4233 ; input:
                                   4234 ;   none 
                                   4235 ; output:
                                   4236 ;   X 		gpio register address
                                   4237 ;----------------------------
                           000003  4238 	PORT=3
                           000001  4239 	REG=1 
                           000004  4240 	VSIZE=4 
      001792                       4241 gpio:
      001792 CD 0C 61         [ 4] 4242 	call func_args 
      001795 A1 02            [ 1] 4243 	cp a,#2
      001797 27 03            [ 1] 4244 	jreq 1$
      001799 CC 07 BB         [ 2] 4245 	jp syntax_error  
      00179C                       4246 1$:	
      00179C 1E 03            [ 2] 4247 	ldw x,(PORT,sp)
      00179E 2B 17            [ 1] 4248 	jrmi bad_port
      0017A0 A3 00 09         [ 2] 4249 	cpw x,#9
      0017A3 2A 12            [ 1] 4250 	jrpl bad_port
      0017A5 A6 05            [ 1] 4251 	ld a,#5
      0017A7 42               [ 4] 4252 	mul x,a
      0017A8 1C 50 00         [ 2] 4253 	addw x,#GPIO_BASE 
      0017AB 1F 03            [ 2] 4254 	ldw (PORT,sp),x  
      0017AD 1E 01            [ 2] 4255 	ldw x,(REG,sp) 
      0017AF 72 FB 03         [ 2] 4256 	addw x,(PORT,sp)
      0017B2 A6 84            [ 1] 4257 	ld a,#TK_INTGR
      0017B4                       4258 	_drop VSIZE 
      0017B4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017B6 81               [ 4] 4259 	ret
      0017B7                       4260 bad_port:
      0017B7 A6 0A            [ 1] 4261 	ld a,#ERR_BAD_VALUE
      0017B9 CC 07 BD         [ 2] 4262 	jp tb_error
                                   4263 
                                   4264 
                                   4265 ;-------------------------
                                   4266 ; BASIC: UFLASH 
                                   4267 ; return user flash address
                                   4268 ; input:
                                   4269 ;  none 
                                   4270 ; output:
                                   4271 ;	A		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4272 ;   X 		user address 
                                   4273 ;---------------------------
      0017BC                       4274 uflash:
      0017BC AE 22 00         [ 2] 4275 	ldw x,#user_space 
      0017BF A6 84            [ 1] 4276 	ld a,#TK_INTGR 
      0017C1 81               [ 4] 4277 	ret 
                                   4278 
                                   4279 
                                   4280 ;---------------------
                                   4281 ; BASIC: USR(addr[,arg])
                                   4282 ; execute a function written 
                                   4283 ; in binary code.
                                   4284 ; binary fonction should 
                                   4285 ; return token attribute in A 
                                   4286 ; and value in X. 
                                   4287 ; input:
                                   4288 ;   addr	routine address 
                                   4289 ;   arg 	is an optional argument 
                                   4290 ; output:
                                   4291 ;   A 		token attribute 
                                   4292 ;   X       returned value 
                                   4293 ;---------------------
      0017C2                       4294 usr:
      0017C2 90 89            [ 2] 4295 	pushw y 	
      0017C4 CD 0C 61         [ 4] 4296 	call func_args 
      0017C7 A1 01            [ 1] 4297 	cp a,#1 
      0017C9 27 07            [ 1] 4298 	jreq 2$
      0017CB A1 02            [ 1] 4299 	cp a,#2
      0017CD 27 03            [ 1] 4300 	jreq 2$  
      0017CF CC 07 BB         [ 2] 4301 	jp syntax_error 
      0017D2 90 85            [ 2] 4302 2$: popw y  ; arg|addr 
      0017D4 A1 01            [ 1] 4303 	cp a,#1
      0017D6 27 02            [ 1] 4304 	jreq 3$
      0017D8 85               [ 2] 4305 	popw x ; addr
      0017D9 51               [ 1] 4306 	exgw x,y 
      0017DA 90 FD            [ 4] 4307 3$: call (y)
      0017DC 90 85            [ 2] 4308 	popw y 
      0017DE 81               [ 4] 4309 	ret 
                                   4310 
                                   4311 ;------------------------------
                                   4312 ; BASIC: BYE 
                                   4313 ; halt mcu in its lowest power mode 
                                   4314 ; wait for reset or external interrupt
                                   4315 ; do a cold start on wakeup.
                                   4316 ;------------------------------
      0017DF                       4317 bye:
      0017DF 72 0D 52 30 FB   [ 2] 4318 	btjf UART1_SR,#UART_SR_TC,.
      0017E4 8E               [10] 4319 	halt
      0017E5 CC 05 17         [ 2] 4320 	jp cold_start  
                                   4321 
                                   4322 ;----------------------------------
                                   4323 ; BASIC: AUTORUN ["file_name"] 
                                   4324 ; record in eeprom at adrress AUTORUN_NAME
                                   4325 ; the name of file to load and execute
                                   4326 ; at startup. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4327 ; empty string delete autorun name 
                                   4328 ; no argument display autorun name  
                                   4329 ; input:
                                   4330 ;   file_name   file to execute 
                                   4331 ; output:
                                   4332 ;   none
                                   4333 ;-----------------------------------
      0017E8                       4334 autorun: 
      0017E8 72 01 00 23 07   [ 2] 4335 	btjf flags,#FRUN,0$ 
      0017ED 27 05            [ 1] 4336 	jreq 0$ 
      0017EF A6 07            [ 1] 4337 	ld a,#ERR_CMD_ONLY 
      0017F1 CC 07 BD         [ 2] 4338 	jp tb_error 
      0017F4                       4339 0$:	
      0017F4 CD 08 AD         [ 4] 4340 	call next_token
      0017F7 4D               [ 1] 4341 	tnz a 
      0017F8 26 08            [ 1] 4342 	jrne 1$
      0017FA AE 40 00         [ 2] 4343 	ldw x,#AUTORUN_NAME
      0017FD CD 00 00         [ 4] 4344 	call puts 
      001800 4F               [ 1] 4345 	clr a 
      001801 81               [ 4] 4346 	ret 
      001802                       4347 1$:
      001802 A1 02            [ 1] 4348 	cp a,#TK_QSTR
      001804 27 03            [ 1] 4349 	jreq 2$
      001806 CC 07 BB         [ 2] 4350 	jp syntax_error 
      001809                       4351 2$:	
      001809 7D               [ 1] 4352 	tnz (x) 
      00180A 26 09            [ 1] 4353 	jrne 3$
                                   4354 ; empty string, delete autorun 	
      00180C CD 05 D8         [ 4] 4355 	call cancel_autorun
      00180F 55 00 03 00 01   [ 1] 4356 	mov in,count 
      001814 81               [ 4] 4357 	ret 
      001815 89               [ 2] 4358 3$:	pushw x 
      001816 90 93            [ 1] 4359 	ldw y,x  
      001818 CD 14 A1         [ 4] 4360 	call search_file 
      00181B 25 05            [ 1] 4361 	jrc 4$ 
      00181D A6 09            [ 1] 4362 	ld a,#ERR_NOT_FILE
      00181F CC 07 BD         [ 2] 4363 	jp tb_error  
      001822                       4364 4$: 
      001822 55 00 03 00 01   [ 1] 4365 	mov in,count 
      001827 72 5F 00 16      [ 1] 4366 	clr farptr 
      00182B AE 40 00         [ 2] 4367 	ldw x,#AUTORUN_NAME
      00182E CF 00 17         [ 2] 4368 	ldw farptr+1,x 
      001831 1E 01            [ 2] 4369 	ldw x,(1,sp)  
      001833 CD 04 34         [ 4] 4370 	call strlen  ; return length in A 
      001836 5F               [ 1] 4371 	clrw x 
      001837 97               [ 1] 4372 	ld xl,a 
      001838 5C               [ 1] 4373 	incw x 
      001839 90 85            [ 2] 4374 	popw y 
      00183B 89               [ 2] 4375 	pushw x 
      00183C 5F               [ 1] 4376 	clrw x 
      00183D CD 02 82         [ 4] 4377 	call write_block 
      001840                       4378 	_drop 2 
      001840 5B 02            [ 2]    1     addw sp,#2 
      001842 81               [ 4] 4379 	ret 
                                   4380 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4381 ;----------------------------------
                                   4382 ; BASIC: SLEEP 
                                   4383 ; halt mcu until reset or external
                                   4384 ; interrupt.
                                   4385 ; Resume progam after SLEEP command
                                   4386 ;----------------------------------
      001843                       4387 sleep:
      001843 72 0D 52 30 FB   [ 2] 4388 	btjf UART1_SR,#UART_SR_TC,.
      001848 72 16 00 23      [ 1] 4389 	bset flags,#FSLEEP
      00184C 8E               [10] 4390 	halt 
      00184D 81               [ 4] 4391 	ret 
                                   4392 
                                   4393 ;-------------------------------
                                   4394 ; BASIC: PAUSE expr 
                                   4395 ; suspend execution for n msec.
                                   4396 ; input:
                                   4397 ;	none
                                   4398 ; output:
                                   4399 ;	none 
                                   4400 ;------------------------------
      00184E                       4401 pause:
      00184E CD 0D 65         [ 4] 4402 	call expression
      001851 A1 84            [ 1] 4403 	cp a,#TK_INTGR
      001853 27 03            [ 1] 4404 	jreq pause02 
      001855 CC 07 BB         [ 2] 4405 	jp syntax_error
      001858                       4406 pause02: 
      001858 5D               [ 2] 4407 1$: tnzw x 
      001859 27 04            [ 1] 4408 	jreq 2$
      00185B 8F               [10] 4409 	wfi 
      00185C 5A               [ 2] 4410 	decw x 
      00185D 26 F9            [ 1] 4411 	jrne 1$
      00185F 4F               [ 1] 4412 2$:	clr a 
      001860 81               [ 4] 4413 	ret 
                                   4414 
                                   4415 ;------------------------------
                                   4416 ; BASIC: AWU expr
                                   4417 ; halt mcu for 'expr' milliseconds
                                   4418 ; use Auto wakeup peripheral
                                   4419 ; all oscillators stopped except LSI
                                   4420 ; range: 1ms - 511ms
                                   4421 ; input:
                                   4422 ;  none
                                   4423 ; output:
                                   4424 ;  none:
                                   4425 ;------------------------------
      001861                       4426 awu:
      001861 CD 0D 65         [ 4] 4427   call expression
      001864 A1 84            [ 1] 4428   cp a,#TK_INTGR
      001866 27 03            [ 1] 4429   jreq awu02
      001868 CC 07 BB         [ 2] 4430   jp syntax_error
      00186B                       4431 awu02:
      00186B A3 14 00         [ 2] 4432   cpw x,#5120
      00186E 2B 0C            [ 1] 4433   jrmi 1$ 
      001870 35 0F 50 F2      [ 1] 4434   mov AWU_TBR,#15 
      001874 A6 1E            [ 1] 4435   ld a,#30
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001876 62               [ 2] 4436   div x,a
      001877 A6 10            [ 1] 4437   ld a,#16
      001879 62               [ 2] 4438   div x,a 
      00187A 20 1E            [ 2] 4439   jra 4$
      00187C                       4440 1$: 
      00187C A3 08 00         [ 2] 4441   cpw x,#2048
      00187F 2B 09            [ 1] 4442   jrmi 2$ 
      001881 35 0E 50 F2      [ 1] 4443   mov AWU_TBR,#14
      001885 A6 50            [ 1] 4444   ld a,#80
      001887 62               [ 2] 4445   div x,a 
      001888 20 10            [ 2] 4446   jra 4$   
      00188A                       4447 2$:
      00188A 35 07 50 F2      [ 1] 4448   mov AWU_TBR,#7
      00188E                       4449 3$:  
                                   4450 ; while X > 64  divide by 2 and increment AWU_TBR 
      00188E A3 00 40         [ 2] 4451   cpw x,#64 
      001891 23 07            [ 2] 4452   jrule 4$ 
      001893 72 5C 50 F2      [ 1] 4453   inc AWU_TBR 
      001897 54               [ 2] 4454   srlw x 
      001898 20 F4            [ 2] 4455   jra 3$ 
      00189A                       4456 4$:
      00189A 9F               [ 1] 4457   ld a, xl
      00189B 4A               [ 1] 4458   dec a 
      00189C 27 01            [ 1] 4459   jreq 5$
      00189E 4A               [ 1] 4460   dec a 	
      00189F                       4461 5$: 
      00189F A4 3E            [ 1] 4462   and a,#0x3e 
      0018A1 C7 50 F1         [ 1] 4463   ld AWU_APR,a 
      0018A4 72 18 50 F0      [ 1] 4464   bset AWU_CSR,#AWU_CSR_AWUEN
      0018A8 8E               [10] 4465   halt 
                                   4466 
      0018A9 81               [ 4] 4467   ret 
                                   4468 
                                   4469 ;------------------------------
                                   4470 ; BASIC: TICKS
                                   4471 ; return msec ticks counter value 
                                   4472 ; input:
                                   4473 ; 	none 
                                   4474 ; output:
                                   4475 ;	X 		TK_INTGR
                                   4476 ;-------------------------------
      0018AA                       4477 get_ticks:
      0018AA CE 00 0E         [ 2] 4478 	ldw x,ticks 
      0018AD A6 84            [ 1] 4479 	ld a,#TK_INTGR
      0018AF 81               [ 4] 4480 	ret 
                                   4481 
                                   4482 
                                   4483 
                                   4484 ;------------------------------
                                   4485 ; BASIC: ABS(expr)
                                   4486 ; return absolute value of expr.
                                   4487 ; input:
                                   4488 ;   none
                                   4489 ; output:
                                   4490 ;   X     	positive integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4491 ;-------------------------------
      0018B0                       4492 abs:
      0018B0 CD 0C 61         [ 4] 4493 	call func_args 
      0018B3 A1 01            [ 1] 4494 	cp a,#1 
      0018B5 27 03            [ 1] 4495 	jreq 0$ 
      0018B7 CC 07 BB         [ 2] 4496 	jp syntax_error
      0018BA                       4497 0$:  
      0018BA 85               [ 2] 4498     popw x   
      0018BB 9E               [ 1] 4499 	ld a,xh 
      0018BC A5 80            [ 1] 4500 	bcp a,#0x80 
      0018BE 27 01            [ 1] 4501 	jreq 2$ 
      0018C0 50               [ 2] 4502 	negw x 
      0018C1 A6 84            [ 1] 4503 2$: ld a,#TK_INTGR 
      0018C3 81               [ 4] 4504 	ret 
                                   4505 
                                   4506 ;------------------------------
                                   4507 ; BASIC: AND(expr1,expr2)
                                   4508 ; Apply bit AND relation between
                                   4509 ; the 2 arguments, i.e expr1 & expr2 
                                   4510 ; output:
                                   4511 ; 	A 		TK_INTGR
                                   4512 ;   X 		result 
                                   4513 ;------------------------------
      0018C4                       4514 bit_and:
      0018C4 CD 0C 61         [ 4] 4515 	call func_args 
      0018C7 A1 02            [ 1] 4516 	cp a,#2
      0018C9 27 03            [ 1] 4517 	jreq 1$
      0018CB CC 07 BB         [ 2] 4518 	jp syntax_error 
      0018CE 85               [ 2] 4519 1$:	popw x 
      0018CF 9E               [ 1] 4520 	ld a,xh 
      0018D0 14 01            [ 1] 4521 	and a,(1,sp)
      0018D2 95               [ 1] 4522 	ld xh,a 
      0018D3 9F               [ 1] 4523 	ld a,xl
      0018D4 14 02            [ 1] 4524 	and a,(2,sp)
      0018D6 97               [ 1] 4525 	ld xl,a 
      0018D7                       4526 	_drop 2 
      0018D7 5B 02            [ 2]    1     addw sp,#2 
      0018D9 A6 84            [ 1] 4527 	ld a,#TK_INTGR
      0018DB 81               [ 4] 4528 	ret
                                   4529 
                                   4530 ;------------------------------
                                   4531 ; BASIC: OR(expr1,expr2)
                                   4532 ; Apply bit OR relation between
                                   4533 ; the 2 arguments, i.e expr1 | expr2 
                                   4534 ; output:
                                   4535 ; 	A 		TK_INTGR
                                   4536 ;   X 		result 
                                   4537 ;------------------------------
      0018DC                       4538 bit_or:
      0018DC CD 0C 61         [ 4] 4539 	call func_args 
      0018DF A1 02            [ 1] 4540 	cp a,#2
      0018E1 27 03            [ 1] 4541 	jreq 1$
      0018E3 CC 07 BB         [ 2] 4542 	jp syntax_error 
      0018E6                       4543 1$: 
      0018E6 85               [ 2] 4544 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0018E7 9E               [ 1] 4545 	ld a,xh 
      0018E8 1A 01            [ 1] 4546 	or a,(1,sp)
      0018EA 95               [ 1] 4547 	ld xh,a 
      0018EB 9F               [ 1] 4548 	ld a,xl 
      0018EC 1A 02            [ 1] 4549 	or a,(2,sp)
      0018EE 97               [ 1] 4550 	ld xl,a 
      0018EF                       4551 	_drop 2 
      0018EF 5B 02            [ 2]    1     addw sp,#2 
      0018F1 A6 84            [ 1] 4552 	ld a,#TK_INTGR 
      0018F3 81               [ 4] 4553 	ret
                                   4554 
                                   4555 ;------------------------------
                                   4556 ; BASIC: XOR(expr1,expr2)
                                   4557 ; Apply bit XOR relation between
                                   4558 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4559 ; output:
                                   4560 ; 	A 		TK_INTGR
                                   4561 ;   X 		result 
                                   4562 ;------------------------------
      0018F4                       4563 bit_xor:
      0018F4 CD 0C 61         [ 4] 4564 	call func_args 
      0018F7 A1 02            [ 1] 4565 	cp a,#2
      0018F9 27 03            [ 1] 4566 	jreq 1$
      0018FB CC 07 BB         [ 2] 4567 	jp syntax_error 
      0018FE                       4568 1$: 
      0018FE 85               [ 2] 4569 	popw x 
      0018FF 9E               [ 1] 4570 	ld a,xh 
      001900 18 01            [ 1] 4571 	xor a,(1,sp)
      001902 95               [ 1] 4572 	ld xh,a 
      001903 9F               [ 1] 4573 	ld a,xl 
      001904 18 02            [ 1] 4574 	xor a,(2,sp)
      001906 97               [ 1] 4575 	ld xl,a 
      001907                       4576 	_drop 2 
      001907 5B 02            [ 2]    1     addw sp,#2 
      001909 A6 84            [ 1] 4577 	ld a,#TK_INTGR 
      00190B 81               [ 4] 4578 	ret 
                                   4579 
                                   4580 ;------------------------------
                                   4581 ; BASIC: LSHIFT(expr1,expr2)
                                   4582 ; logical shift left expr1 by 
                                   4583 ; expr2 bits 
                                   4584 ; output:
                                   4585 ; 	A 		TK_INTGR
                                   4586 ;   X 		result 
                                   4587 ;------------------------------
      00190C                       4588 lshift:
      00190C CD 0C 61         [ 4] 4589 	call func_args
      00190F A1 02            [ 1] 4590 	cp a,#2 
      001911 27 03            [ 1] 4591 	jreq 1$
      001913 CC 07 BB         [ 2] 4592 	jp syntax_error
      001916 90 85            [ 2] 4593 1$: popw y   
      001918 85               [ 2] 4594 	popw x 
      001919 90 5D            [ 2] 4595 	tnzw y 
      00191B 27 05            [ 1] 4596 	jreq 4$
      00191D 58               [ 2] 4597 2$:	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00191E 90 5A            [ 2] 4598 	decw y 
      001920 26 FB            [ 1] 4599 	jrne 2$
      001922                       4600 4$:  
      001922 A6 84            [ 1] 4601 	ld a,#TK_INTGR
      001924 81               [ 4] 4602 	ret
                                   4603 
                                   4604 ;------------------------------
                                   4605 ; BASIC: RSHIFT(expr1,expr2)
                                   4606 ; logical shift right expr1 by 
                                   4607 ; expr2 bits.
                                   4608 ; output:
                                   4609 ; 	A 		TK_INTGR
                                   4610 ;   X 		result 
                                   4611 ;------------------------------
      001925                       4612 rshift:
      001925 CD 0C 61         [ 4] 4613 	call func_args
      001928 A1 02            [ 1] 4614 	cp a,#2 
      00192A 27 03            [ 1] 4615 	jreq 1$
      00192C CC 07 BB         [ 2] 4616 	jp syntax_error
      00192F 90 85            [ 2] 4617 1$: popw y  
      001931 85               [ 2] 4618 	popw x
      001932 90 5D            [ 2] 4619 	tnzw y 
      001934 27 05            [ 1] 4620 	jreq 4$
      001936 54               [ 2] 4621 2$:	srlw x 
      001937 90 5A            [ 2] 4622 	decw y 
      001939 26 FB            [ 1] 4623 	jrne 2$
      00193B                       4624 4$:  
      00193B A6 84            [ 1] 4625 	ld a,#TK_INTGR
      00193D 81               [ 4] 4626 	ret
                                   4627 
                                   4628 ;--------------------------
                                   4629 ; BASIC: FCPU integer
                                   4630 ; set CPU frequency 
                                   4631 ;-------------------------- 
                                   4632 
      00193E                       4633 fcpu:
      00193E A6 84            [ 1] 4634 	ld a,#TK_INTGR
      001940 CD 0C 54         [ 4] 4635 	call expect 
      001943 9F               [ 1] 4636 	ld a,xl 
      001944 A4 07            [ 1] 4637 	and a,#7 
      001946 C7 50 C6         [ 1] 4638 	ld CLK_CKDIVR,a 
      001949 81               [ 4] 4639 	ret 
                                   4640 
                                   4641 ;------------------------------
                                   4642 ; BASIC: PMODE pin#, mode 
                                   4643 ; Arduino pin. 
                                   4644 ; define pin as input or output
                                   4645 ; pin#: {0..15}
                                   4646 ; mode: INPUT|OUTPUT  
                                   4647 ;------------------------------
                           000001  4648 	PINNO=1
                           000001  4649 	VSIZE=1
      00194A                       4650 pin_mode:
      00194A                       4651 	_vars VSIZE 
      00194A 52 01            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      00194C CD 0C 66         [ 4] 4652 	call arg_list 
      00194F A1 02            [ 1] 4653 	cp a,#2 
      001951 27 03            [ 1] 4654 	jreq 1$
      001953 CC 07 BB         [ 2] 4655 	jp syntax_error 
      001956 90 85            [ 2] 4656 1$: popw y ; mode 
      001958 85               [ 2] 4657 	popw x ; Dx pin 
      001959 CD 19 96         [ 4] 4658 	call select_pin 
      00195C 6B 01            [ 1] 4659 	ld (PINNO,sp),a  
      00195E A6 01            [ 1] 4660 	ld a,#1 
      001960 0D 01            [ 1] 4661 	tnz (PINNO,sp)
      001962 27 0D            [ 1] 4662 	jreq 4$
      001964 48               [ 1] 4663 2$:	sll a 
      001965 0A 01            [ 1] 4664 	dec (PINNO,sp)
      001967 26 FB            [ 1] 4665 	jrne 2$ 
      001969 6B 01            [ 1] 4666 	ld (PINNO,sp),a
      00196B 7B 01            [ 1] 4667 	ld a,(PINNO,sp)
      00196D EA 03            [ 1] 4668 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      00196F E7 03            [ 1] 4669 	ld (GPIO_CR1,x),a 
      001971 90 A3 00 01      [ 2] 4670 4$:	cpw y,#OUTP 
      001975 27 10            [ 1] 4671 	jreq 6$
                                   4672 ; input mode
                                   4673 ; disable external interrupt 
      001977 7B 01            [ 1] 4674 	ld a,(PINNO,sp)
      001979 43               [ 1] 4675 	cpl a 
      00197A E4 04            [ 1] 4676 	and a,(GPIO_CR2,x)
      00197C E7 04            [ 1] 4677 	ld (GPIO_CR2,x),a 
                                   4678 ;clear bit in DDR for input mode 
      00197E 7B 01            [ 1] 4679 	ld a,(PINNO,sp)
      001980 43               [ 1] 4680 	cpl a 
      001981 E4 02            [ 1] 4681 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001983 E7 02            [ 1] 4682 	ld (GPIO_DDR,x),a 
      001985 20 0C            [ 2] 4683 	jra 9$
      001987                       4684 6$: ;output mode  
      001987 7B 01            [ 1] 4685 	ld a,(PINNO,sp)
      001989 EA 02            [ 1] 4686 	or a,(GPIO_DDR,x) ; bit==1 for output 
      00198B E7 02            [ 1] 4687 	ld (GPIO_DDR,x),a 
      00198D 7B 01            [ 1] 4688 	ld a,(PINNO,sp)
      00198F EA 04            [ 1] 4689 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001991 E7 04            [ 1] 4690 	ld (GPIO_CR2,x),a 
      001993                       4691 9$:	
      001993                       4692 	_drop VSIZE 
      001993 5B 01            [ 2]    1     addw sp,#VSIZE 
      001995 81               [ 4] 4693 	ret
                                   4694 
                                   4695 ;------------------------
                                   4696 ; select Arduino pin 
                                   4697 ; input:
                                   4698 ;   X 	 {0..15} Arduino Dx 
                                   4699 ; output:
                                   4700 ;   A     stm8s208 pin 
                                   4701 ;   X     base address s208 GPIO port 
                                   4702 ;---------------------------
      001996                       4703 select_pin:
      001996 58               [ 2] 4704 	sllw x 
      001997 1C 19 A6         [ 2] 4705 	addw x,#arduino_to_8s208 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      00199A FE               [ 2] 4706 	ldw x,(x)
      00199B 9F               [ 1] 4707 	ld a,xl 
      00199C 88               [ 1] 4708 	push a 
      00199D 5E               [ 1] 4709 	swapw x 
      00199E A6 05            [ 1] 4710 	ld a,#5 
      0019A0 42               [ 4] 4711 	mul x,a 
      0019A1 1C 50 00         [ 2] 4712 	addw x,#GPIO_BASE 
      0019A4 84               [ 1] 4713 	pop a 
      0019A5 81               [ 4] 4714 	ret 
                                   4715 ; translation from Arduino D0..D15 to stm8s208rb 
      0019A6                       4716 arduino_to_8s208:
      0019A6 03 06                 4717 .byte 3,6 ; D0 
      0019A8 03 05                 4718 .byte 3,5 ; D1 
      0019AA 04 00                 4719 .byte 4,0 ; D2 
      0019AC 02 01                 4720 .byte 2,1 ; D3
      0019AE 06 00                 4721 .byte 6,0 ; D4
      0019B0 02 02                 4722 .byte 2,2 ; D5
      0019B2 02 03                 4723 .byte 2,3 ; D6
      0019B4 03 01                 4724 .byte 3,1 ; D7
      0019B6 03 03                 4725 .byte 3,3 ; D8
      0019B8 02 04                 4726 .byte 2,4 ; D9
      0019BA 04 05                 4727 .byte 4,5 ; D10
      0019BC 02 06                 4728 .byte 2,6 ; D11
      0019BE 02 07                 4729 .byte 2,7 ; D12
      0019C0 02 05                 4730 .byte 2,5 ; D13
      0019C2 04 02                 4731 .byte 4,2 ; D14
      0019C4 04 01                 4732 .byte 4,1 ; D15
                                   4733 
                                   4734 
                                   4735 ;------------------------------
                                   4736 ; BASIC: RND(expr)
                                   4737 ; return random number 
                                   4738 ; between 1 and expr inclusive
                                   4739 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4740 ; input:
                                   4741 ; 	none 
                                   4742 ; output:
                                   4743 ;	X 		random positive integer 
                                   4744 ;------------------------------
      0019C6                       4745 random:
      0019C6 CD 0C 61         [ 4] 4746 	call func_args 
      0019C9 A1 01            [ 1] 4747 	cp a,#1
      0019CB 27 03            [ 1] 4748 	jreq 1$
      0019CD CC 07 BB         [ 2] 4749 	jp syntax_error
      0019D0                       4750 1$:  
      0019D0 A6 80            [ 1] 4751 	ld a,#0x80 
      0019D2 15 01            [ 1] 4752 	bcp a,(1,sp)
      0019D4 27 05            [ 1] 4753 	jreq 2$
      0019D6 A6 0A            [ 1] 4754 	ld a,#ERR_BAD_VALUE
      0019D8 CC 07 BD         [ 2] 4755 	jp tb_error
      0019DB                       4756 2$: 
                                   4757 ; acc16=(x<<5)^x 
      0019DB CE 00 12         [ 2] 4758 	ldw x,seedx 
      0019DE 58               [ 2] 4759 	sllw x 
      0019DF 58               [ 2] 4760 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0019E0 58               [ 2] 4761 	sllw x 
      0019E1 58               [ 2] 4762 	sllw x 
      0019E2 58               [ 2] 4763 	sllw x 
      0019E3 9E               [ 1] 4764 	ld a,xh 
      0019E4 C8 00 12         [ 1] 4765 	xor a,seedx 
      0019E7 C7 00 0C         [ 1] 4766 	ld acc16,a 
      0019EA 9F               [ 1] 4767 	ld a,xl 
      0019EB C8 00 13         [ 1] 4768 	xor a,seedx+1 
      0019EE C7 00 0D         [ 1] 4769 	ld acc8,a 
                                   4770 ; seedx=seedy 
      0019F1 CE 00 14         [ 2] 4771 	ldw x,seedy 
      0019F4 CF 00 12         [ 2] 4772 	ldw seedx,x  
                                   4773 ; seedy=seedy^(seedy>>1)
      0019F7 90 54            [ 2] 4774 	srlw y 
      0019F9 90 9E            [ 1] 4775 	ld a,yh 
      0019FB C8 00 14         [ 1] 4776 	xor a,seedy 
      0019FE C7 00 14         [ 1] 4777 	ld seedy,a  
      001A01 90 9F            [ 1] 4778 	ld a,yl 
      001A03 C8 00 15         [ 1] 4779 	xor a,seedy+1 
      001A06 C7 00 15         [ 1] 4780 	ld seedy+1,a 
                                   4781 ; acc16>>3 
      001A09 CE 00 0C         [ 2] 4782 	ldw x,acc16 
      001A0C 54               [ 2] 4783 	srlw x 
      001A0D 54               [ 2] 4784 	srlw x 
      001A0E 54               [ 2] 4785 	srlw x 
                                   4786 ; x=acc16^x 
      001A0F 9E               [ 1] 4787 	ld a,xh 
      001A10 C8 00 0C         [ 1] 4788 	xor a,acc16 
      001A13 95               [ 1] 4789 	ld xh,a 
      001A14 9F               [ 1] 4790 	ld a,xl 
      001A15 C8 00 0D         [ 1] 4791 	xor a,acc8 
      001A18 97               [ 1] 4792 	ld xl,a 
                                   4793 ; seedy=x^seedy 
      001A19 C8 00 15         [ 1] 4794 	xor a,seedy+1
      001A1C 97               [ 1] 4795 	ld xl,a 
      001A1D 9E               [ 1] 4796 	ld a,xh 
      001A1E C8 00 14         [ 1] 4797 	xor a,seedy
      001A21 95               [ 1] 4798 	ld xh,a 
      001A22 CF 00 14         [ 2] 4799 	ldw seedy,x 
                                   4800 ; return seedy modulo expr + 1 
      001A25 90 85            [ 2] 4801 	popw y 
      001A27 65               [ 2] 4802 	divw x,y 
      001A28 93               [ 1] 4803 	ldw x,y 
      001A29 5C               [ 1] 4804 	incw x 
      001A2A                       4805 10$:
      001A2A A6 84            [ 1] 4806 	ld a,#TK_INTGR
      001A2C 81               [ 4] 4807 	ret 
                                   4808 
                                   4809 ;---------------------------------
                                   4810 ; BASIC: WORDS 
                                   4811 ; affiche la listes des mots du
                                   4812 ; dictionnaire ainsi que le nombre
                                   4813 ; de mots.
                                   4814 ;---------------------------------
                           000001  4815 	WLEN=1 ; word length
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           000002  4816 	LLEN=2 ; character sent to console
                           000003  4817 	WCNT=3 ; count words printed 
                           000003  4818 	VSIZE=3 
      001A2D                       4819 words:
      001A2D                       4820 	_vars VSIZE
      001A2D 52 03            [ 2]    1     sub sp,#VSIZE 
      001A2F 0F 02            [ 1] 4821 	clr (LLEN,sp)
      001A31 0F 03            [ 1] 4822 	clr (WCNT,sp)
      001A33 90 AE 21 18      [ 2] 4823 	ldw y,#kword_dict+2
      001A37 93               [ 1] 4824 0$:	ldw x,y
      001A38 F6               [ 1] 4825 	ld a,(x)
      001A39 A4 0F            [ 1] 4826 	and a,#15 
      001A3B 6B 01            [ 1] 4827 	ld (WLEN,sp),a 
      001A3D 0C 03            [ 1] 4828 	inc (WCNT,sp)
      001A3F 5C               [ 1] 4829 1$:	incw x 
      001A40 F6               [ 1] 4830 	ld a,(x)
      001A41 CD 03 2B         [ 4] 4831 	call putc 
      001A44 0C 02            [ 1] 4832 	inc (LLEN,sp)
      001A46 0A 01            [ 1] 4833 	dec (WLEN,sp)
      001A48 26 F5            [ 1] 4834 	jrne 1$
      001A4A A6 46            [ 1] 4835 	ld a,#70
      001A4C 11 02            [ 1] 4836 	cp a,(LLEN,sp)
      001A4E 2B 09            [ 1] 4837 	jrmi 2$   
      001A50 A6 20            [ 1] 4838 	ld a,#SPACE 
      001A52 CD 03 2B         [ 4] 4839 	call putc 
      001A55 0C 02            [ 1] 4840 	inc (LLEN,sp) 
      001A57 20 07            [ 2] 4841 	jra 3$
      001A59 A6 0D            [ 1] 4842 2$: ld a,#CR 
      001A5B CD 03 2B         [ 4] 4843 	call putc 
      001A5E 0F 02            [ 1] 4844 	clr (LLEN,sp)
      001A60 72 A2 00 02      [ 2] 4845 3$:	subw y,#2 
      001A64 90 FE            [ 2] 4846 	ldw y,(y)
      001A66 26 CF            [ 1] 4847 	jrne 0$ 
      001A68 A6 0D            [ 1] 4848 	ld a,#CR 
      001A6A CD 03 2B         [ 4] 4849 	call putc  
      001A6D 5F               [ 1] 4850 	clrw x 
      001A6E 7B 03            [ 1] 4851 	ld a,(WCNT,sp)
      001A70 97               [ 1] 4852 	ld xl,a 
      001A71 CD 09 0E         [ 4] 4853 	call print_int 
      001A74 AE 1A 7D         [ 2] 4854 	ldw x,#words_count_msg
      001A77 CD 00 00         [ 4] 4855 	call puts 
      001A7A                       4856 	_drop VSIZE 
      001A7A 5B 03            [ 2]    1     addw sp,#VSIZE 
      001A7C 81               [ 4] 4857 	ret 
      001A7D 20 77 6F 72 64 73 20  4858 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4859 
                                   4860 
                                   4861 ;-----------------------------
                                   4862 ; BASIC: TIMER expr 
                                   4863 ; initialize count down timer 
                                   4864 ;-----------------------------
      001A93                       4865 set_timer:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001A93 CD 0C 66         [ 4] 4866 	call arg_list
      001A96 A1 01            [ 1] 4867 	cp a,#1 
      001A98 27 03            [ 1] 4868 	jreq 1$
      001A9A CC 07 BB         [ 2] 4869 	jp syntax_error
      001A9D                       4870 1$: 
      001A9D 85               [ 2] 4871 	popw x 
      001A9E CF 00 10         [ 2] 4872 	ldw timer,x 
      001AA1 81               [ 4] 4873 	ret 
                                   4874 
                                   4875 ;------------------------------
                                   4876 ; BASIC: TIMEOUT 
                                   4877 ; return state of timer 
                                   4878 ;------------------------------
      001AA2                       4879 timeout:
      001AA2 CE 00 10         [ 2] 4880 	ldw x,timer 
      001AA5                       4881 logical_complement:
      001AA5 53               [ 2] 4882 	cplw x 
      001AA6 A3 FF FF         [ 2] 4883 	cpw x,#-1
      001AA9 27 01            [ 1] 4884 	jreq 2$
      001AAB 5F               [ 1] 4885 	clrw x 
      001AAC A6 84            [ 1] 4886 2$:	ld a,#TK_INTGR
      001AAE 81               [ 4] 4887 	ret 
                                   4888 
                                   4889 ;--------------------------------
                                   4890 ; BASIC NOT(expr) 
                                   4891 ; return logical complement of expr
                                   4892 ;--------------------------------
      001AAF                       4893 func_not:
      001AAF CD 0C 61         [ 4] 4894 	call func_args  
      001AB2 A1 01            [ 1] 4895 	cp a,#1
      001AB4 27 03            [ 1] 4896 	jreq 1$
      001AB6 CC 07 BB         [ 2] 4897 	jp syntax_error
      001AB9 85               [ 2] 4898 1$:	popw x 
      001ABA 20 E9            [ 2] 4899 	jra logical_complement
                                   4900 
                                   4901 
                                   4902 
                                   4903 ;-----------------------------------
                                   4904 ; BASIC: IWDGEN expr1 
                                   4905 ; enable independant watchdog timer
                                   4906 ; expr1 is delay in multiple of 62.5µsec
                                   4907 ; expr1 -> {1..16383}
                                   4908 ;-----------------------------------
      001ABC                       4909 enable_iwdg:
      001ABC CD 0C 66         [ 4] 4910 	call arg_list
      001ABF A1 01            [ 1] 4911 	cp a,#1 
      001AC1 27 03            [ 1] 4912 	jreq 1$
      001AC3 CC 07 BB         [ 2] 4913 	jp syntax_error 
      001AC6 85               [ 2] 4914 1$: popw x 
      001AC7 4B 00            [ 1] 4915 	push #0
      001AC9 35 CC 50 E0      [ 1] 4916 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001ACD 9E               [ 1] 4917 	ld a,xh 
      001ACE A4 3F            [ 1] 4918 	and a,#0x3f
      001AD0 95               [ 1] 4919 	ld xh,a  
      001AD1 A3 00 FF         [ 2] 4920 2$:	cpw x,#255
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001AD4 23 06            [ 2] 4921 	jrule 3$
      001AD6 0C 01            [ 1] 4922 	inc (1,sp)
      001AD8 98               [ 1] 4923 	rcf 
      001AD9 56               [ 2] 4924 	rrcw x 
      001ADA 20 F5            [ 2] 4925 	jra 2$
      001ADC 35 55 50 E0      [ 1] 4926 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001AE0 84               [ 1] 4927 	pop a  
      001AE1 C7 50 E1         [ 1] 4928 	ld IWDG_PR,a 
      001AE4 9F               [ 1] 4929 	ld a,xl
      001AE5 4A               [ 1] 4930 	dec a 
      001AE6 35 55 50 E0      [ 1] 4931 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001AEA C7 50 E2         [ 1] 4932 	ld IWDG_RLR,a 
      001AED 35 AA 50 E0      [ 1] 4933 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001AF1 81               [ 4] 4934 	ret 
                                   4935 
                                   4936 
                                   4937 ;-----------------------------------
                                   4938 ; BASIC: IWDGREF  
                                   4939 ; refresh independant watchdog count down 
                                   4940 ; timer before it reset MCU. 
                                   4941 ;-----------------------------------
      001AF2                       4942 refresh_iwdg:
      001AF2 35 AA 50 E0      [ 1] 4943 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001AF6 81               [ 4] 4944 	ret 
                                   4945 
                                   4946 
                                   4947 ;-------------------------------------
                                   4948 ; BASIC: LOG(expr)
                                   4949 ; return logarithm base 2 of expr 
                                   4950 ; this is the position of most significant
                                   4951 ; bit set. 
                                   4952 ; input: 
                                   4953 ; output:
                                   4954 ;   X     log2 
                                   4955 ;   A     TK_INTGR 
                                   4956 ;*********************************
      001AF7                       4957 log2:
      001AF7 CD 0C 61         [ 4] 4958 	call func_args 
      001AFA A1 01            [ 1] 4959 	cp a,#1 
      001AFC 27 03            [ 1] 4960 	jreq 1$
      001AFE CC 07 BB         [ 2] 4961 	jp syntax_error 
      001B01 85               [ 2] 4962 1$: popw x 
      001B02                       4963 leading_one:
      001B02 5D               [ 2] 4964 	tnzw x 
      001B03 27 0A            [ 1] 4965 	jreq 4$
      001B05 A6 0F            [ 1] 4966 	ld a,#15 
      001B07 59               [ 2] 4967 2$: rlcw x 
      001B08 25 03            [ 1] 4968     jrc 3$
      001B0A 4A               [ 1] 4969 	dec a 
      001B0B 20 FA            [ 2] 4970 	jra 2$
      001B0D 5F               [ 1] 4971 3$: clrw x 
      001B0E 97               [ 1] 4972     ld xl,a
      001B0F A6 84            [ 1] 4973 4$:	ld a,#TK_INTGR
      001B11 81               [ 4] 4974 	ret 
                                   4975 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4976 ;-----------------------------------
                                   4977 ; BASIC: BIT(expr) 
                                   4978 ; expr ->{0..15}
                                   4979 ; return 2^expr 
                                   4980 ; output:
                                   4981 ;    x    2^expr 
                                   4982 ;-----------------------------------
      001B12                       4983 bitmask:
      001B12 CD 0C 61         [ 4] 4984     call func_args 
      001B15 A1 01            [ 1] 4985 	cp a,#1
      001B17 27 03            [ 1] 4986 	jreq 1$
      001B19 CC 07 BB         [ 2] 4987 	jp syntax_error 
      001B1C 85               [ 2] 4988 1$: popw x 
      001B1D 9F               [ 1] 4989 	ld a,xl 
      001B1E A4 0F            [ 1] 4990 	and a,#15
      001B20 5F               [ 1] 4991 	clrw x 
      001B21 5C               [ 1] 4992 	incw x 
      001B22 4D               [ 1] 4993 2$: tnz a 
      001B23 27 04            [ 1] 4994 	jreq 3$
      001B25 58               [ 2] 4995 	slaw x 
      001B26 4A               [ 1] 4996 	dec a 
      001B27 20 F9            [ 2] 4997 	jra 2$ 
      001B29 A6 84            [ 1] 4998 3$: ld a,#TK_INTGR
      001B2B 81               [ 4] 4999 	ret 
                                   5000 
                                   5001 ;------------------------------
                                   5002 ; BASIC: INVERT(expr)
                                   5003 ; 1's complement 
                                   5004 ;--------------------------------
      001B2C                       5005 invert:
      001B2C CD 0C 61         [ 4] 5006 	call func_args
      001B2F A1 01            [ 1] 5007 	cp a,#1 
      001B31 27 03            [ 1] 5008 	jreq 1$
      001B33 CC 07 BB         [ 2] 5009 	jp syntax_error
      001B36 85               [ 2] 5010 1$: popw x  
      001B37 53               [ 2] 5011 	cplw x 
      001B38 A6 84            [ 1] 5012 	ld a,#TK_INTGR 
      001B3A 81               [ 4] 5013 	ret 
                                   5014 
                                   5015 ;------------------------------
                                   5016 ; BASIC: DO 
                                   5017 ; initiate a DO ... UNTIL loop 
                                   5018 ;------------------------------
                           000003  5019 	DOLP_ADR=3 
                           000005  5020 	DOLP_INW=5
                           000004  5021 	VSIZE=4 
      001B3B                       5022 do_loop:
      001B3B 85               [ 2] 5023 	popw x 
      001B3C                       5024 	_vars VSIZE 
      001B3C 52 04            [ 2]    1     sub sp,#VSIZE 
      001B3E 89               [ 2] 5025 	pushw x 
      001B3F 90 CE 00 04      [ 2] 5026 	ldw y,basicptr 
      001B43 17 03            [ 2] 5027 	ldw (DOLP_ADR,sp),y
      001B45 90 CE 00 00      [ 2] 5028 	ldw y,in.w 
      001B49 17 05            [ 2] 5029 	ldw (DOLP_INW,sp),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001B4B 72 5C 00 20      [ 1] 5030 	inc loop_depth 
      001B4F 81               [ 4] 5031 	ret 
                                   5032 
                                   5033 ;--------------------------------
                                   5034 ; BASIC: UNTIL expr 
                                   5035 ; loop if exprssion is false 
                                   5036 ; else terminate loop
                                   5037 ;--------------------------------
      001B50                       5038 until: 
      001B50 72 5D 00 20      [ 1] 5039 	tnz loop_depth 
      001B54 26 03            [ 1] 5040 	jrne 1$ 
      001B56 CC 07 BB         [ 2] 5041 	jp syntax_error 
      001B59                       5042 1$: 
      001B59 CD 0D B1         [ 4] 5043 	call relation 
      001B5C A1 84            [ 1] 5044 	cp a,#TK_INTGR
      001B5E 27 03            [ 1] 5045 	jreq 2$
      001B60 CC 07 BB         [ 2] 5046 	jp syntax_error
      001B63                       5047 2$: 
      001B63 5D               [ 2] 5048 	tnzw x 
      001B64 26 10            [ 1] 5049 	jrne 9$
      001B66 1E 03            [ 2] 5050 	ldw x,(DOLP_ADR,sp)
      001B68 CF 00 04         [ 2] 5051 	ldw basicptr,x 
      001B6B E6 02            [ 1] 5052 	ld a,(2,x)
      001B6D C7 00 03         [ 1] 5053 	ld count,a 
      001B70 1E 05            [ 2] 5054 	ldw x,(DOLP_INW,sp)
      001B72 CF 00 00         [ 2] 5055 	ldw in.w,x 
      001B75 81               [ 4] 5056 	ret 
      001B76                       5057 9$:	; remove loop data from stack  
      001B76 85               [ 2] 5058 	popw x
      001B77                       5059 	_drop VSIZE
      001B77 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B79 72 5A 00 20      [ 1] 5060 	dec loop_depth 
      001B7D FC               [ 2] 5061 	jp (x)
                                   5062 
                                   5063 ;--------------------------
                                   5064 ; BASIC: PRTA...PRTI  
                                   5065 ;  return constant value 
                                   5066 ;  PORT  offset in GPIO
                                   5067 ;  array
                                   5068 ;---------------------------
      001B7E                       5069 const_porta:
      001B7E AE 00 00         [ 2] 5070 	ldw x,#0
      001B81 A6 84            [ 1] 5071 	ld a,#TK_INTGR 
      001B83 81               [ 4] 5072 	ret 
      001B84                       5073 const_portb:
      001B84 AE 00 01         [ 2] 5074 	ldw x,#1
      001B87 A6 84            [ 1] 5075 	ld a,#TK_INTGR 
      001B89 81               [ 4] 5076 	ret 
      001B8A                       5077 const_portc:
      001B8A AE 00 02         [ 2] 5078 	ldw x,#2
      001B8D A6 84            [ 1] 5079 	ld a,#TK_INTGR 
      001B8F 81               [ 4] 5080 	ret 
      001B90                       5081 const_portd:
      001B90 AE 00 03         [ 2] 5082 	ldw x,#3
      001B93 A6 84            [ 1] 5083 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001B95 81               [ 4] 5084 	ret 
      001B96                       5085 const_porte:
      001B96 AE 00 04         [ 2] 5086 	ldw x,#4
      001B99 A6 84            [ 1] 5087 	ld a,#TK_INTGR 
      001B9B 81               [ 4] 5088 	ret 
      001B9C                       5089 const_portf:
      001B9C AE 00 05         [ 2] 5090 	ldw x,#5
      001B9F A6 84            [ 1] 5091 	ld a,#TK_INTGR 
      001BA1 81               [ 4] 5092 	ret 
      001BA2                       5093 const_portg:
      001BA2 AE 00 06         [ 2] 5094 	ldw x,#6
      001BA5 A6 84            [ 1] 5095 	ld a,#TK_INTGR 
      001BA7 81               [ 4] 5096 	ret 
      001BA8                       5097 const_porth:
      001BA8 AE 00 07         [ 2] 5098 	ldw x,#7
      001BAB A6 84            [ 1] 5099 	ld a,#TK_INTGR 
      001BAD 81               [ 4] 5100 	ret 
      001BAE                       5101 const_porti:
      001BAE AE 00 08         [ 2] 5102 	ldw x,#8
      001BB1 A6 84            [ 1] 5103 	ld a,#TK_INTGR 
      001BB3 81               [ 4] 5104 	ret 
                                   5105 
                                   5106 ;-------------------------------
                                   5107 ; following return constant 
                                   5108 ; related to GPIO register offset 
                                   5109 ;---------------------------------
      001BB4                       5110 const_odr:
      001BB4 A6 84            [ 1] 5111 	ld a,#TK_INTGR 
      001BB6 AE 00 00         [ 2] 5112 	ldw x,#GPIO_ODR
      001BB9 81               [ 4] 5113 	ret 
      001BBA                       5114 const_idr:
      001BBA A6 84            [ 1] 5115 	ld a,#TK_INTGR 
      001BBC AE 00 01         [ 2] 5116 	ldw x,#GPIO_IDR
      001BBF 81               [ 4] 5117 	ret 
      001BC0                       5118 const_ddr:
      001BC0 A6 84            [ 1] 5119 	ld a,#TK_INTGR 
      001BC2 AE 00 02         [ 2] 5120 	ldw x,#GPIO_DDR
      001BC5 81               [ 4] 5121 	ret 
      001BC6                       5122 const_cr1:
      001BC6 A6 84            [ 1] 5123 	ld a,#TK_INTGR 
      001BC8 AE 00 03         [ 2] 5124 	ldw x,#GPIO_CR1
      001BCB 81               [ 4] 5125 	ret 
      001BCC                       5126 const_cr2:
      001BCC A6 84            [ 1] 5127 	ld a,#TK_INTGR 
      001BCE AE 00 04         [ 2] 5128 	ldw x,#GPIO_CR2
      001BD1 81               [ 4] 5129 	ret 
                                   5130 ;-------------------------
                                   5131 ; BASIC: POUT 
                                   5132 ;  constant for port mode
                                   5133 ;  used by PMODE 
                                   5134 ;  to set pin as output
                                   5135 ;------------------------
      001BD2                       5136 const_output:
      001BD2 A6 84            [ 1] 5137 	ld a,#TK_INTGR 
      001BD4 AE 00 01         [ 2] 5138 	ldw x,#OUTP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001BD7 81               [ 4] 5139 	ret 
                                   5140 
                                   5141 ;-------------------------
                                   5142 ; BASIC: PINP 
                                   5143 ;  constant for port mode
                                   5144 ;  used by PMODE 
                                   5145 ;  to set pin as input
                                   5146 ;------------------------
      001BD8                       5147 const_input:
      001BD8 A6 84            [ 1] 5148 	ld a,#TK_INTGR 
      001BDA AE 00 00         [ 2] 5149 	ldw x,#INP 
      001BDD 81               [ 4] 5150 	ret 
                                   5151 	
                                   5152 ;-----------------------
                                   5153 ; memory area constants
                                   5154 ;-----------------------
      001BDE                       5155 const_eeprom_base:
      001BDE A6 84            [ 1] 5156 	ld a,#TK_INTGR 
      001BE0 AE 40 00         [ 2] 5157 	ldw x,#EEPROM_BASE 
      001BE3 81               [ 4] 5158 	ret 
                                   5159 
                                   5160 ;---------------------------
                                   5161 ; BASIC: DATA 
                                   5162 ; when the interpreter find 
                                   5163 ; a DATA line it skip it.
                                   5164 ;---------------------------
      001BE4                       5165 data:
      001BE4 55 00 03 00 01   [ 1] 5166 	mov in,count 
      001BE9 81               [ 4] 5167 	ret 
                                   5168 
                                   5169 ;---------------------------
                                   5170 ; BASIC: DATLN  *expr*
                                   5171 ; set DATA pointer at line# 
                                   5172 ; specified by *expr* 
                                   5173 ;---------------------------
      001BEA                       5174 data_line:
      001BEA CD 0D 65         [ 4] 5175 	call expression
      001BED A1 84            [ 1] 5176 	cp a,#TK_INTGR
      001BEF 27 03            [ 1] 5177 	jreq 1$
      001BF1 CC 07 BB         [ 2] 5178 	jp syntax_error 
      001BF4 CD 00 00         [ 4] 5179 1$: call search_lineno
      001BF7 5D               [ 2] 5180 	tnzw x 
      001BF8 26 05            [ 1] 5181 	jrne 3$
      001BFA A6 05            [ 1] 5182 2$:	ld a,#ERR_NO_LINE 
      001BFC CC 07 BD         [ 2] 5183 	jp tb_error
      001BFF                       5184 3$: ; check if valid data line 
      001BFF 90 93            [ 1] 5185     ldw y,x 
      001C01 EE 04            [ 2] 5186 	ldw x,(4,x)
      001C03 A3 1B E4         [ 2] 5187 	cpw x,#data 
      001C06 26 F2            [ 1] 5188 	jrne 2$ 
      001C08 90 CF 00 06      [ 2] 5189 	ldw data_ptr,y
      001C0C 90 E6 02         [ 1] 5190 	ld a,(2,y)
      001C0F C7 00 09         [ 1] 5191 	ld data_len,a 
      001C12 35 06 00 08      [ 1] 5192 	mov data_ofs,#FIRST_DATA_ITEM 
      001C16 81               [ 4] 5193 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5194 
                                   5195 ;---------------------------------
                                   5196 ; BASIC: RESTORE 
                                   5197 ; set data_ptr to first data line
                                   5198 ; if not DATA found pointer set to
                                   5199 ; zero 
                                   5200 ;---------------------------------
      001C17                       5201 restore:
      001C17 72 5F 00 06      [ 1] 5202 	clr data_ptr 
      001C1B 72 5F 00 07      [ 1] 5203 	clr data_ptr+1
      001C1F 72 5F 00 08      [ 1] 5204 	clr data_ofs 
      001C23 72 5F 00 09      [ 1] 5205 	clr data_len
      001C27 CE 00 1C         [ 2] 5206 	ldw x,txtbgn
      001C2A                       5207 data_search_loop: 	
      001C2A C3 00 1E         [ 2] 5208 	cpw x,txtend
      001C2D 24 1B            [ 1] 5209 	jruge 9$
      001C2F 90 93            [ 1] 5210 	ldw y,x 
      001C31 EE 04            [ 2] 5211 	ldw x,(4,x)
      001C33 1C 21 1E         [ 2] 5212 	addw x,#code_addr
      001C36 FE               [ 2] 5213 	ldw x,(x)
      001C37 A3 1B E4         [ 2] 5214 	cpw x,#data 
      001C3A 26 1A            [ 1] 5215 	jrne try_next_line 
      001C3C 90 CF 00 06      [ 2] 5216 	ldw data_ptr,y 
      001C40 90 E6 02         [ 1] 5217 	ld a,(2,y)
      001C43 C7 00 09         [ 1] 5218 	ld data_len,a 
      001C46 35 06 00 08      [ 1] 5219 	mov data_ofs,#FIRST_DATA_ITEM
      001C4A 72 5D 00 09      [ 1] 5220 9$:	tnz data_len 
      001C4E 26 05            [ 1] 5221     jrne 10$
      001C50 A6 0C            [ 1] 5222 	ld a,#ERR_NO_DATA 
      001C52 CC 07 BD         [ 2] 5223 	jp tb_error 
      001C55 81               [ 4] 5224 10$:ret
      001C56                       5225 try_next_line:
      001C56 93               [ 1] 5226 	ldw x,y 
      001C57 E6 02            [ 1] 5227 	ld a,(2,x)
      001C59 C7 00 0D         [ 1] 5228 	ld acc8,a 
      001C5C 72 5F 00 0C      [ 1] 5229 	clr acc16 
      001C60 72 BB 00 0C      [ 2] 5230 	addw x,acc16 
      001C64 20 C4            [ 2] 5231 	jra data_search_loop
                                   5232 
                                   5233 
                                   5234 ;---------------------------------
                                   5235 ; BASIC: READ 
                                   5236 ; return next data item | 0 
                                   5237 ;---------------------------------
                           000001  5238 	CTX_BPTR=1 
                           000003  5239 	CTX_IN=3 
                           000004  5240 	CTX_COUNT=4 
                           000005  5241 	XSAVE=5
                           000006  5242 	VSIZE=6
      001C66                       5243 read:
      001C66                       5244 	_vars  VSIZE 
      001C66 52 06            [ 2]    1     sub sp,#VSIZE 
      001C68                       5245 read01:	
      001C68 C6 00 08         [ 1] 5246 	ld a,data_ofs
      001C6B C1 00 09         [ 1] 5247 	cp a,data_len 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001C6E 27 37            [ 1] 5248 	jreq 2$ ; end of line  
      001C70 CD 0F AD         [ 4] 5249 	call save_context
      001C73 CE 00 06         [ 2] 5250 	ldw x,data_ptr 
      001C76 CF 00 04         [ 2] 5251 	ldw basicptr,x 
      001C79 55 00 08 00 01   [ 1] 5252 	mov in,data_ofs 
      001C7E 55 00 09 00 03   [ 1] 5253 	mov count,data_len  
      001C83 CD 0D 65         [ 4] 5254 	call expression 
      001C86 A1 84            [ 1] 5255 	cp a,#TK_INTGR 
      001C88 27 03            [ 1] 5256 	jreq 1$ 
      001C8A CC 07 BB         [ 2] 5257 	jp syntax_error 
      001C8D                       5258 1$:
      001C8D 1F 05            [ 2] 5259 	ldw (XSAVE,SP),x
      001C8F CD 08 AD         [ 4] 5260 	call next_token ; skip comma
      001C92 CE 00 04         [ 2] 5261 	ldw x,basicptr 
      001C95 CF 00 06         [ 2] 5262 	ldw data_ptr,x 
      001C98 55 00 01 00 08   [ 1] 5263 	mov data_ofs,in 
      001C9D CD 0F BD         [ 4] 5264 	call rest_context
      001CA0 1E 05            [ 2] 5265 	ldw x,(XSAVE,sp)
      001CA2 A6 84            [ 1] 5266 	ld a,#TK_INTGR
      001CA4                       5267 	_drop VSIZE 
      001CA4 5B 06            [ 2]    1     addw sp,#VSIZE 
      001CA6 81               [ 4] 5268 	ret 
      001CA7                       5269 2$: ; end of line reached 
      001CA7 90 CE 00 06      [ 2] 5270 	ldw y, data_ptr 
      001CAB 72 5F 00 06      [ 1] 5271 	clr data_ptr
      001CAF 72 5F 00 07      [ 1] 5272 	clr data_ptr+1   
      001CB3 72 5F 00 08      [ 1] 5273 	clr data_ofs 
      001CB7 72 5F 00 09      [ 1] 5274 	clr data_len 
      001CBB CD 1C 56         [ 4] 5275 	call try_next_line 
      001CBE 20 A8            [ 2] 5276 	jra read01
                                   5277 
                                   5278 
                                   5279 ;---------------------------------
                                   5280 ; BASIC: SPIEN clkdiv, 0|1  
                                   5281 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   5282 ; if clkdiv==-1 disable SPI
                                   5283 ; 0|1 -> disable|enable  
                                   5284 ;--------------------------------- 
                           000005  5285 SPI_CS_BIT=5
      001CC0                       5286 spi_enable:
      001CC0 CD 0C 66         [ 4] 5287 	call arg_list 
      001CC3 A1 02            [ 1] 5288 	cp a,#2
      001CC5 27 03            [ 1] 5289 	jreq 1$
      001CC7 CC 07 BB         [ 2] 5290 	jp syntax_error 
      001CCA                       5291 1$: 
      001CCA 72 12 50 C7      [ 1] 5292 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      001CCE 85               [ 2] 5293 	popw x  
      001CCF 5D               [ 2] 5294 	tnzw x 
      001CD0 27 21            [ 1] 5295 	jreq spi_disable 
      001CD2 85               [ 2] 5296 	popw x 
      001CD3 A6 08            [ 1] 5297 	ld a,#(1<<SPI_CR1_BR)
      001CD5 42               [ 4] 5298 	mul x,a 
      001CD6 9F               [ 1] 5299 	ld a,xl 
      001CD7 C7 52 00         [ 1] 5300 	ld SPI_CR1,a 
                                   5301 ; configure ~CS on PE5 (D10 on CN8) as output. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001CDA 72 1A 50 14      [ 1] 5302 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      001CDE 72 1A 50 16      [ 1] 5303 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   5304 ; configure SPI as master mode 0.	
      001CE2 72 14 52 00      [ 1] 5305 	bset SPI_CR1,#SPI_CR1_MSTR
                                   5306 ; ~CS line controlled by sofware 	
      001CE6 72 12 52 01      [ 1] 5307 	bset SPI_CR2,#SPI_CR2_SSM 
      001CEA 72 10 52 01      [ 1] 5308     bset SPI_CR2,#SPI_CR2_SSI 
                                   5309 ; enable SPI
      001CEE 72 1C 52 00      [ 1] 5310 	bset SPI_CR1,#SPI_CR1_SPE 	
      001CF2 81               [ 4] 5311 	ret 
      001CF3                       5312 spi_disable:
      001CF3                       5313 	_drop #2; throw first argument.
      001CF3 5B 02            [ 2]    1     addw sp,##2 
                                   5314 ; wait spi idle 
      001CF5 A6 82            [ 1] 5315 1$:	ld a,#0x82 
      001CF7 C4 52 03         [ 1] 5316 	and a,SPI_SR
      001CFA A1 02            [ 1] 5317 	cp a,#2 
      001CFC 26 F7            [ 1] 5318 	jrne 1$
      001CFE 72 1D 52 00      [ 1] 5319 	bres SPI_CR1,#SPI_CR1_SPE
      001D02 72 13 50 C7      [ 1] 5320 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      001D06 72 1B 50 16      [ 1] 5321 	bres PE_DDR,#SPI_CS_BIT 
      001D0A 81               [ 4] 5322 	ret 
                                   5323 
      001D0B                       5324 spi_clear_error:
      001D0B A6 78            [ 1] 5325 	ld a,#0x78 
      001D0D C5 52 03         [ 1] 5326 	bcp a,SPI_SR 
      001D10 27 04            [ 1] 5327 	jreq 1$
      001D12 72 5F 52 03      [ 1] 5328 	clr SPI_SR 
      001D16 81               [ 4] 5329 1$: ret 
                                   5330 
      001D17                       5331 spi_send_byte:
      001D17 88               [ 1] 5332 	push a 
      001D18 CD 1D 0B         [ 4] 5333 	call spi_clear_error
      001D1B 84               [ 1] 5334 	pop a 
      001D1C 72 03 52 03 FB   [ 2] 5335 	btjf SPI_SR,#SPI_SR_TXE,.
      001D21 C7 52 04         [ 1] 5336 	ld SPI_DR,a
      001D24 72 01 52 03 FB   [ 2] 5337 	btjf SPI_SR,#SPI_SR_RXNE,.  
      001D29 C6 52 04         [ 1] 5338 	ld a,SPI_DR 
      001D2C 81               [ 4] 5339 	ret 
                                   5340 
      001D2D                       5341 spi_rcv_byte:
      001D2D A6 FF            [ 1] 5342 	ld a,#255
      001D2F 72 01 52 03 E3   [ 2] 5343 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      001D34 C6 52 04         [ 1] 5344 	ld a,SPI_DR 
      001D37 81               [ 4] 5345 	ret
                                   5346 
                                   5347 ;------------------------------
                                   5348 ; BASIC: SPIWR byte [,byte]
                                   5349 ; write 1 or more byte
                                   5350 ;------------------------------
      001D38                       5351 spi_write:
      001D38 CD 0D 65         [ 4] 5352 	call expression
      001D3B A1 84            [ 1] 5353 	cp a,#TK_INTGR 
      001D3D 27 03            [ 1] 5354 	jreq 1$
      001D3F CC 07 BB         [ 2] 5355 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D42                       5356 1$:	
      001D42 9F               [ 1] 5357 	ld a,xl 
      001D43 CD 1D 17         [ 4] 5358 	call spi_send_byte 
      001D46 CD 08 AD         [ 4] 5359 	call next_token 
      001D49 A1 09            [ 1] 5360 	cp a,#TK_COMMA 
      001D4B 26 02            [ 1] 5361 	jrne 2$ 
      001D4D 20 E9            [ 2] 5362 	jra spi_write 
      001D4F 4D               [ 1] 5363 2$:	tnz a 
      001D50 27 05            [ 1] 5364 	jreq 3$
      001D52                       5365 	_unget_token  
      001D52 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001D57 81               [ 4] 5366 3$:	ret 
                                   5367 
                                   5368 
                                   5369 ;-------------------------------
                                   5370 ; BASIC: SPIRD 	
                                   5371 ; read one byte from SPI 
                                   5372 ;-------------------------------
      001D58                       5373 spi_read:
      001D58 CD 1D 2D         [ 4] 5374 	call spi_rcv_byte 
      001D5B 5F               [ 1] 5375 	clrw x 
      001D5C 97               [ 1] 5376 	ld xl,a 
      001D5D A6 84            [ 1] 5377 	ld a,#TK_INTGR 
      001D5F 81               [ 4] 5378 	ret 
                                   5379 
                                   5380 ;------------------------------
                                   5381 ; BASIC: SPISEL 0|1 
                                   5382 ; set state of ~CS line
                                   5383 ; 0|1 deselect|select  
                                   5384 ;------------------------------
      001D60                       5385 spi_select:
      001D60 CD 08 AD         [ 4] 5386 	call next_token 
      001D63 A1 84            [ 1] 5387 	cp a,#TK_INTGR 
      001D65 27 03            [ 1] 5388 	jreq 1$
      001D67 CC 07 BB         [ 2] 5389 	jp syntax_error 
      001D6A 5D               [ 2] 5390 1$: tnzw x  
      001D6B 27 05            [ 1] 5391 	jreq cs_high 
      001D6D 72 1B 50 14      [ 1] 5392 	bres PE_ODR,#SPI_CS_BIT
      001D71 81               [ 4] 5393 	ret 
      001D72                       5394 cs_high: 
      001D72 72 1A 50 14      [ 1] 5395 	bset PE_ODR,#SPI_CS_BIT
      001D76 81               [ 4] 5396 	ret 
                                   5397 
                                   5398 ;-------------------------------
                                   5399 ; BASIC: PAD 
                                   5400 ; Return pad buffer address.
                                   5401 ;------------------------------
      001D77                       5402 pad_ref:
      001D77 AE 16 E0         [ 2] 5403 	ldw x,#pad 
      001D7A B6 84            [ 1] 5404 	ld a,TK_INTGR
      001D7C 81               [ 4] 5405 	ret 
                                   5406 
                                   5407 
                                   5408 ;------------------------------
                                   5409 ;      dictionary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5410 ; format:
                                   5411 ;   link:   2 bytes 
                                   5412 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5413 ;   cmd_name: 16 byte max 
                                   5414 ;   cmd_index: 2 bytes 
                                   5415 ;------------------------------
                                   5416 	.macro _dict_entry len,name,cmd_idx 
                                   5417 	.word LINK 
                                   5418 	LINK=.
                                   5419 name:
                                   5420 	.byte len 	
                                   5421 	.ascii "name"
                                   5422 	.word cmd_idx 
                                   5423 	.endm 
                                   5424 
                           000000  5425 	LINK=0
                                   5426 ; respect alphabetic order for BASIC names from Z-A
                                   5427 ; this sort order is for a cleaner WORDS cmd output. 	
      001D7D                       5428 kword_end:
      001D7D                       5429 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001D7D 00 00                    1 	.word LINK 
                           001D7F     2 	LINK=.
      001D7F                          3 XOR:
      001D7F 43                       4 	.byte 3+F_IFUNC 	
      001D80 58 4F 52                 5 	.ascii "XOR"
      001D83 00 C6                    6 	.word XOR_IDX 
      001D85                       5430 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001D85 1D 7F                    1 	.word LINK 
                           001D87     2 	LINK=.
      001D87                          3 WRITE:
      001D87 05                       4 	.byte 5 	
      001D88 57 52 49 54 45           5 	.ascii "WRITE"
      001D8D 00 C4                    6 	.word WRITE_IDX 
      001D8F                       5431 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001D8F 1D 87                    1 	.word LINK 
                           001D91     2 	LINK=.
      001D91                          3 WORDS:
      001D91 05                       4 	.byte 5 	
      001D92 57 4F 52 44 53           5 	.ascii "WORDS"
      001D97 00 C2                    6 	.word WORDS_IDX 
      001D99                       5432 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001D99 1D 91                    1 	.word LINK 
                           001D9B     2 	LINK=.
      001D9B                          3 WAIT:
      001D9B 04                       4 	.byte 4 	
      001D9C 57 41 49 54              5 	.ascii "WAIT"
      001DA0 00 C0                    6 	.word WAIT_IDX 
      001DA2                       5433 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001DA2 1D 9B                    1 	.word LINK 
                           001DA4     2 	LINK=.
      001DA4                          3 USR:
      001DA4 43                       4 	.byte 3+F_IFUNC 	
      001DA5 55 53 52                 5 	.ascii "USR"
      001DA8 00 BE                    6 	.word USR_IDX 
      001DAA                       5434 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001DAA 1D A4                    1 	.word LINK 
                           001DAC     2 	LINK=.
      001DAC                          3 UNTIL:
      001DAC 05                       4 	.byte 5 	
      001DAD 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001DB2 00 BC                    6 	.word UNTIL_IDX 
      001DB4                       5435 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001DB4 1D AC                    1 	.word LINK 
                           001DB6     2 	LINK=.
      001DB6                          3 UFLASH:
      001DB6 46                       4 	.byte 6+F_IFUNC 	
      001DB7 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001DBD 00 BA                    6 	.word UFLASH_IDX 
      001DBF                       5436 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001DBF 1D B6                    1 	.word LINK 
                           001DC1     2 	LINK=.
      001DC1                          3 UBOUND:
      001DC1 46                       4 	.byte 6+F_IFUNC 	
      001DC2 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001DC8 00 B8                    6 	.word UBOUND_IDX 
      001DCA                       5437 	_dict_entry,4,TONE,TONE_IDX;tone  
      001DCA 1D C1                    1 	.word LINK 
                           001DCC     2 	LINK=.
      001DCC                          3 TONE:
      001DCC 04                       4 	.byte 4 	
      001DCD 54 4F 4E 45              5 	.ascii "TONE"
      001DD1 00 B6                    6 	.word TONE_IDX 
      001DD3                       5438 	_dict_entry,2,TO,TO_IDX;to
      001DD3 1D CC                    1 	.word LINK 
                           001DD5     2 	LINK=.
      001DD5                          3 TO:
      001DD5 02                       4 	.byte 2 	
      001DD6 54 4F                    5 	.ascii "TO"
      001DD8 00 B4                    6 	.word TO_IDX 
      001DDA                       5439 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001DDA 1D D5                    1 	.word LINK 
                           001DDC     2 	LINK=.
      001DDC                          3 TIMER:
      001DDC 05                       4 	.byte 5 	
      001DDD 54 49 4D 45 52           5 	.ascii "TIMER"
      001DE2 00 B0                    6 	.word TIMER_IDX 
      001DE4                       5440 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001DE4 1D DC                    1 	.word LINK 
                           001DE6     2 	LINK=.
      001DE6                          3 TIMEOUT:
      001DE6 47                       4 	.byte 7+F_IFUNC 	
      001DE7 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001DEE 00 B2                    6 	.word TMROUT_IDX 
      001DF0                       5441 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001DF0 1D E6                    1 	.word LINK 
                           001DF2     2 	LINK=.
      001DF2                          3 TICKS:
      001DF2 45                       4 	.byte 5+F_IFUNC 	
      001DF3 54 49 43 4B 53           5 	.ascii "TICKS"
      001DF8 00 AE                    6 	.word TICKS_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001DFA                       5442 	_dict_entry,4,STOP,STOP_IDX;stop 
      001DFA 1D F2                    1 	.word LINK 
                           001DFC     2 	LINK=.
      001DFC                          3 STOP:
      001DFC 04                       4 	.byte 4 	
      001DFD 53 54 4F 50              5 	.ascii "STOP"
      001E01 00 AC                    6 	.word STOP_IDX 
      001E03                       5443 	_dict_entry,4,STEP,STEP_IDX;step 
      001E03 1D FC                    1 	.word LINK 
                           001E05     2 	LINK=.
      001E05                          3 STEP:
      001E05 04                       4 	.byte 4 	
      001E06 53 54 45 50              5 	.ascii "STEP"
      001E0A 00 AA                    6 	.word STEP_IDX 
      001E0C                       5444 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001E0C 1E 05                    1 	.word LINK 
                           001E0E     2 	LINK=.
      001E0E                          3 SPIWR:
      001E0E 05                       4 	.byte 5 	
      001E0F 53 50 49 57 52           5 	.ascii "SPIWR"
      001E14 00 A8                    6 	.word SPIWR_IDX 
      001E16                       5445 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001E16 1E 0E                    1 	.word LINK 
                           001E18     2 	LINK=.
      001E18                          3 SPISEL:
      001E18 06                       4 	.byte 6 	
      001E19 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001E1F 00 A6                    6 	.word SPISEL_IDX 
      001E21                       5446 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001E21 1E 18                    1 	.word LINK 
                           001E23     2 	LINK=.
      001E23                          3 SPIRD:
      001E23 45                       4 	.byte 5+F_IFUNC 	
      001E24 53 50 49 52 44           5 	.ascii "SPIRD"
      001E29 00 A2                    6 	.word SPIRD_IDX 
      001E2B                       5447 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001E2B 1E 23                    1 	.word LINK 
                           001E2D     2 	LINK=.
      001E2D                          3 SPIEN:
      001E2D 05                       4 	.byte 5 	
      001E2E 53 50 49 45 4E           5 	.ascii "SPIEN"
      001E33 00 A4                    6 	.word SPIEN_IDX 
      001E35                       5448 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001E35 1E 2D                    1 	.word LINK 
                           001E37     2 	LINK=.
      001E37                          3 SLEEP:
      001E37 05                       4 	.byte 5 	
      001E38 53 4C 45 45 50           5 	.ascii "SLEEP"
      001E3D 00 A0                    6 	.word SLEEP_IDX 
      001E3F                       5449     _dict_entry,4,SHOW,SHOW_IDX;show 
      001E3F 1E 37                    1 	.word LINK 
                           001E41     2 	LINK=.
      001E41                          3 SHOW:
      001E41 04                       4 	.byte 4 	
      001E42 53 48 4F 57              5 	.ascii "SHOW"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E46 00 9C                    6 	.word SHOW_IDX 
      001E48                       5450 	_dict_entry,4,SAVE,SAVE_IDX;save
      001E48 1E 41                    1 	.word LINK 
                           001E4A     2 	LINK=.
      001E4A                          3 SAVE:
      001E4A 04                       4 	.byte 4 	
      001E4B 53 41 56 45              5 	.ascii "SAVE"
      001E4F 00 9A                    6 	.word SAVE_IDX 
      001E51                       5451 	_dict_entry 3,RUN,RUN_IDX;run
      001E51 1E 4A                    1 	.word LINK 
                           001E53     2 	LINK=.
      001E53                          3 RUN:
      001E53 03                       4 	.byte 3 	
      001E54 52 55 4E                 5 	.ascii "RUN"
      001E57 00 98                    6 	.word RUN_IDX 
      001E59                       5452 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001E59 1E 53                    1 	.word LINK 
                           001E5B     2 	LINK=.
      001E5B                          3 RSHIFT:
      001E5B 46                       4 	.byte 6+F_IFUNC 	
      001E5C 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001E62 00 96                    6 	.word RSHIFT_IDX 
      001E64                       5453 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      001E64 1E 5B                    1 	.word LINK 
                           001E66     2 	LINK=.
      001E66                          3 RND:
      001E66 43                       4 	.byte 3+F_IFUNC 	
      001E67 52 4E 44                 5 	.ascii "RND"
      001E6A 00 94                    6 	.word RND_IDX 
      001E6C                       5454 	_dict_entry,6,RETURN,RET_IDX;return 
      001E6C 1E 66                    1 	.word LINK 
                           001E6E     2 	LINK=.
      001E6E                          3 RETURN:
      001E6E 06                       4 	.byte 6 	
      001E6F 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001E75 00 92                    6 	.word RET_IDX 
      001E77                       5455 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001E77 1E 6E                    1 	.word LINK 
                           001E79     2 	LINK=.
      001E79                          3 RESTORE:
      001E79 07                       4 	.byte 7 	
      001E7A 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001E81 00 90                    6 	.word REST_IDX 
      001E83                       5456 	_dict_entry 6,REMARK,REM_IDX;remark 
      001E83 1E 79                    1 	.word LINK 
                           001E85     2 	LINK=.
      001E85                          3 REMARK:
      001E85 06                       4 	.byte 6 	
      001E86 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001E8C 00 8E                    6 	.word REM_IDX 
      001E8E                       5457 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001E8E 1E 85                    1 	.word LINK 
                           001E90     2 	LINK=.
      001E90                          3 REBOOT:
      001E90 06                       4 	.byte 6 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001E91 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001E97 00 8C                    6 	.word RBT_IDX 
      001E99                       5458 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001E99 1E 90                    1 	.word LINK 
                           001E9B     2 	LINK=.
      001E9B                          3 READ:
      001E9B 44                       4 	.byte 4+F_IFUNC 	
      001E9C 52 45 41 44              5 	.ascii "READ"
      001EA0 00 8A                    6 	.word READ_IDX 
      001EA2                       5459 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001EA2 1E 9B                    1 	.word LINK 
                           001EA4     2 	LINK=.
      001EA4                          3 QKEY:
      001EA4 44                       4 	.byte 4+F_IFUNC 	
      001EA5 51 4B 45 59              5 	.ascii "QKEY"
      001EA9 00 88                    6 	.word QKEY_IDX 
      001EAB                       5460 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001EAB 1E A4                    1 	.word LINK 
                           001EAD     2 	LINK=.
      001EAD                          3 PRTI:
      001EAD 44                       4 	.byte 4+F_IFUNC 	
      001EAE 50 52 54 49              5 	.ascii "PRTI"
      001EB2 00 86                    6 	.word PRTI_IDX 
      001EB4                       5461 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001EB4 1E AD                    1 	.word LINK 
                           001EB6     2 	LINK=.
      001EB6                          3 PRTH:
      001EB6 44                       4 	.byte 4+F_IFUNC 	
      001EB7 50 52 54 48              5 	.ascii "PRTH"
      001EBB 00 84                    6 	.word PRTH_IDX 
      001EBD                       5462 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001EBD 1E B6                    1 	.word LINK 
                           001EBF     2 	LINK=.
      001EBF                          3 PRTG:
      001EBF 44                       4 	.byte 4+F_IFUNC 	
      001EC0 50 52 54 47              5 	.ascii "PRTG"
      001EC4 00 82                    6 	.word PRTG_IDX 
      001EC6                       5463 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001EC6 1E BF                    1 	.word LINK 
                           001EC8     2 	LINK=.
      001EC8                          3 PRTF:
      001EC8 44                       4 	.byte 4+F_IFUNC 	
      001EC9 50 52 54 46              5 	.ascii "PRTF"
      001ECD 00 80                    6 	.word PRTF_IDX 
      001ECF                       5464 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001ECF 1E C8                    1 	.word LINK 
                           001ED1     2 	LINK=.
      001ED1                          3 PRTE:
      001ED1 44                       4 	.byte 4+F_IFUNC 	
      001ED2 50 52 54 45              5 	.ascii "PRTE"
      001ED6 00 7E                    6 	.word PRTE_IDX 
      001ED8                       5465 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      001ED8 1E D1                    1 	.word LINK 
                           001EDA     2 	LINK=.
      001EDA                          3 PRTD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001EDA 44                       4 	.byte 4+F_IFUNC 	
      001EDB 50 52 54 44              5 	.ascii "PRTD"
      001EDF 00 7C                    6 	.word PRTD_IDX 
      001EE1                       5466 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001EE1 1E DA                    1 	.word LINK 
                           001EE3     2 	LINK=.
      001EE3                          3 PRTC:
      001EE3 44                       4 	.byte 4+F_IFUNC 	
      001EE4 50 52 54 43              5 	.ascii "PRTC"
      001EE8 00 7A                    6 	.word PRTC_IDX 
      001EEA                       5467 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001EEA 1E E3                    1 	.word LINK 
                           001EEC     2 	LINK=.
      001EEC                          3 PRTB:
      001EEC 44                       4 	.byte 4+F_IFUNC 	
      001EED 50 52 54 42              5 	.ascii "PRTB"
      001EF1 00 78                    6 	.word PRTB_IDX 
      001EF3                       5468 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001EF3 1E EC                    1 	.word LINK 
                           001EF5     2 	LINK=.
      001EF5                          3 PRTA:
      001EF5 44                       4 	.byte 4+F_IFUNC 	
      001EF6 50 52 54 41              5 	.ascii "PRTA"
      001EFA 00 76                    6 	.word PRTA_IDX 
      001EFC                       5469 	_dict_entry 5,PRINT,PRT_IDX;print 
      001EFC 1E F5                    1 	.word LINK 
                           001EFE     2 	LINK=.
      001EFE                          3 PRINT:
      001EFE 05                       4 	.byte 5 	
      001EFF 50 52 49 4E 54           5 	.ascii "PRINT"
      001F04 00 74                    6 	.word PRT_IDX 
      001F06                       5470 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001F06 1E FE                    1 	.word LINK 
                           001F08     2 	LINK=.
      001F08                          3 POUT:
      001F08 44                       4 	.byte 4+F_IFUNC 	
      001F09 50 4F 55 54              5 	.ascii "POUT"
      001F0D 00 72                    6 	.word POUT_IDX 
      001F0F                       5471 	_dict_entry,4,POKE,POKE_IDX;poke 
      001F0F 1F 08                    1 	.word LINK 
                           001F11     2 	LINK=.
      001F11                          3 POKE:
      001F11 04                       4 	.byte 4 	
      001F12 50 4F 4B 45              5 	.ascii "POKE"
      001F16 00 70                    6 	.word POKE_IDX 
      001F18                       5472 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001F18 1F 11                    1 	.word LINK 
                           001F1A     2 	LINK=.
      001F1A                          3 PMODE:
      001F1A 05                       4 	.byte 5 	
      001F1B 50 4D 4F 44 45           5 	.ascii "PMODE"
      001F20 00 6A                    6 	.word PMODE_IDX 
      001F22                       5473 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001F22 1F 1A                    1 	.word LINK 
                           001F24     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001F24                          3 PINP:
      001F24 44                       4 	.byte 4+F_IFUNC 	
      001F25 50 49 4E 50              5 	.ascii "PINP"
      001F29 00 6E                    6 	.word PINP_IDX 
      001F2B                       5474 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001F2B 1F 24                    1 	.word LINK 
                           001F2D     2 	LINK=.
      001F2D                          3 PEEK:
      001F2D 44                       4 	.byte 4+F_IFUNC 	
      001F2E 50 45 45 4B              5 	.ascii "PEEK"
      001F32 00 6C                    6 	.word PEEK_IDX 
      001F34                       5475 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001F34 1F 2D                    1 	.word LINK 
                           001F36     2 	LINK=.
      001F36                          3 PAUSE:
      001F36 05                       4 	.byte 5 	
      001F37 50 41 55 53 45           5 	.ascii "PAUSE"
      001F3C 00 68                    6 	.word PAUSE_IDX 
      001F3E                       5476 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001F3E 1F 36                    1 	.word LINK 
                           001F40     2 	LINK=.
      001F40                          3 PAD:
      001F40 43                       4 	.byte 3+F_IFUNC 	
      001F41 50 41 44                 5 	.ascii "PAD"
      001F44 00 66                    6 	.word PAD_IDX 
      001F46                       5477 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      001F46 1F 40                    1 	.word LINK 
                           001F48     2 	LINK=.
      001F48                          3 OR:
      001F48 42                       4 	.byte 2+F_IFUNC 	
      001F49 4F 52                    5 	.ascii "OR"
      001F4B 00 64                    6 	.word OR_IDX 
      001F4D                       5478 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001F4D 1F 48                    1 	.word LINK 
                           001F4F     2 	LINK=.
      001F4F                          3 ODR:
      001F4F 43                       4 	.byte 3+F_IFUNC 	
      001F50 4F 44 52                 5 	.ascii "ODR"
      001F53 00 62                    6 	.word ODR_IDX 
      001F55                       5479 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001F55 1F 4F                    1 	.word LINK 
                           001F57     2 	LINK=.
      001F57                          3 NOT:
      001F57 43                       4 	.byte 3+F_IFUNC 	
      001F58 4E 4F 54                 5 	.ascii "NOT"
      001F5B 00 60                    6 	.word NOT_IDX 
      001F5D                       5480 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001F5D 1F 57                    1 	.word LINK 
                           001F5F     2 	LINK=.
      001F5F                          3 NEXT:
      001F5F 04                       4 	.byte 4 	
      001F60 4E 45 58 54              5 	.ascii "NEXT"
      001F64 00 5C                    6 	.word NEXT_IDX 
      001F66                       5481 	_dict_entry,3,NEW,NEW_IDX;new
      001F66 1F 5F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           001F68     2 	LINK=.
      001F68                          3 NEW:
      001F68 03                       4 	.byte 3 	
      001F69 4E 45 57                 5 	.ascii "NEW"
      001F6C 00 5E                    6 	.word NEW_IDX 
      001F6E                       5482 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001F6E 1F 68                    1 	.word LINK 
                           001F70     2 	LINK=.
      001F70                          3 MULDIV:
      001F70 46                       4 	.byte 6+F_IFUNC 	
      001F71 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001F77 00 5A                    6 	.word MULDIV_IDX 
      001F79                       5483 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001F79 1F 70                    1 	.word LINK 
                           001F7B     2 	LINK=.
      001F7B                          3 LSHIFT:
      001F7B 46                       4 	.byte 6+F_IFUNC 	
      001F7C 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001F82 00 58                    6 	.word LSHIFT_IDX 
      001F84                       5484 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001F84 1F 7B                    1 	.word LINK 
                           001F86     2 	LINK=.
      001F86                          3 LOG:
      001F86 43                       4 	.byte 3+F_IFUNC 	
      001F87 4C 4F 47                 5 	.ascii "LOG"
      001F8A 00 56                    6 	.word LOG_IDX 
      001F8C                       5485 	_dict_entry,4,LOAD,LOAD_IDX;load 
      001F8C 1F 86                    1 	.word LINK 
                           001F8E     2 	LINK=.
      001F8E                          3 LOAD:
      001F8E 04                       4 	.byte 4 	
      001F8F 4C 4F 41 44              5 	.ascii "LOAD"
      001F93 00 54                    6 	.word LOAD_IDX 
      001F95                       5486 	_dict_entry 4,LIST,LIST_IDX;list
      001F95 1F 8E                    1 	.word LINK 
                           001F97     2 	LINK=.
      001F97                          3 LIST:
      001F97 04                       4 	.byte 4 	
      001F98 4C 49 53 54              5 	.ascii "LIST"
      001F9C 00 52                    6 	.word LIST_IDX 
      001F9E                       5487 	_dict_entry 3,LET,LET_IDX;let 
      001F9E 1F 97                    1 	.word LINK 
                           001FA0     2 	LINK=.
      001FA0                          3 LET:
      001FA0 03                       4 	.byte 3 	
      001FA1 4C 45 54                 5 	.ascii "LET"
      001FA4 00 50                    6 	.word LET_IDX 
      001FA6                       5488 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001FA6 1F A0                    1 	.word LINK 
                           001FA8     2 	LINK=.
      001FA8                          3 KEY:
      001FA8 43                       4 	.byte 3+F_IFUNC 	
      001FA9 4B 45 59                 5 	.ascii "KEY"
      001FAC 00 4E                    6 	.word KEY_IDX 
      001FAE                       5489 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001FAE 1F A8                    1 	.word LINK 
                           001FB0     2 	LINK=.
      001FB0                          3 IWDGREF:
      001FB0 07                       4 	.byte 7 	
      001FB1 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001FB8 00 4C                    6 	.word IWDGREF_IDX 
      001FBA                       5490 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001FBA 1F B0                    1 	.word LINK 
                           001FBC     2 	LINK=.
      001FBC                          3 IWDGEN:
      001FBC 06                       4 	.byte 6 	
      001FBD 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001FC3 00 4A                    6 	.word IWDGEN_IDX 
      001FC5                       5491 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001FC5 1F BC                    1 	.word LINK 
                           001FC7     2 	LINK=.
      001FC7                          3 INVERT:
      001FC7 46                       4 	.byte 6+F_IFUNC 	
      001FC8 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001FCE 00 48                    6 	.word INVERT_IDX 
      001FD0                       5492 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001FD0 1F C7                    1 	.word LINK 
                           001FD2     2 	LINK=.
      001FD2                          3 INPUT:
      001FD2 05                       4 	.byte 5 	
      001FD3 49 4E 50 55 54           5 	.ascii "INPUT"
      001FD8 00 46                    6 	.word INPUT_IDX 
      001FDA                       5493 	_dict_entry,2,IF,IF_IDX;if 
      001FDA 1F D2                    1 	.word LINK 
                           001FDC     2 	LINK=.
      001FDC                          3 IF:
      001FDC 02                       4 	.byte 2 	
      001FDD 49 46                    5 	.ascii "IF"
      001FDF 00 44                    6 	.word IF_IDX 
      001FE1                       5494 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001FE1 1F DC                    1 	.word LINK 
                           001FE3     2 	LINK=.
      001FE3                          3 IDR:
      001FE3 43                       4 	.byte 3+F_IFUNC 	
      001FE4 49 44 52                 5 	.ascii "IDR"
      001FE7 00 42                    6 	.word IDR_IDX 
      001FE9                       5495 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001FE9 1F E3                    1 	.word LINK 
                           001FEB     2 	LINK=.
      001FEB                          3 HEX:
      001FEB 03                       4 	.byte 3 	
      001FEC 48 45 58                 5 	.ascii "HEX"
      001FEF 00 40                    6 	.word HEX_IDX 
      001FF1                       5496 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001FF1 1F EB                    1 	.word LINK 
                           001FF3     2 	LINK=.
      001FF3                          3 GPIO:
      001FF3 44                       4 	.byte 4+F_IFUNC 	
      001FF4 47 50 49 4F              5 	.ascii "GPIO"
      001FF8 00 3E                    6 	.word GPIO_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001FFA                       5497 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001FFA 1F F3                    1 	.word LINK 
                           001FFC     2 	LINK=.
      001FFC                          3 GOTO:
      001FFC 04                       4 	.byte 4 	
      001FFD 47 4F 54 4F              5 	.ascii "GOTO"
      002001 00 3C                    6 	.word GOTO_IDX 
      002003                       5498 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      002003 1F FC                    1 	.word LINK 
                           002005     2 	LINK=.
      002005                          3 GOSUB:
      002005 05                       4 	.byte 5 	
      002006 47 4F 53 55 42           5 	.ascii "GOSUB"
      00200B 00 3A                    6 	.word GOSUB_IDX 
      00200D                       5499 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      00200D 20 05                    1 	.word LINK 
                           00200F     2 	LINK=.
      00200F                          3 FREE:
      00200F 44                       4 	.byte 4+F_IFUNC 	
      002010 46 52 45 45              5 	.ascii "FREE"
      002014 00 9E                    6 	.word FREE_IDX 
      002016                       5500 	_dict_entry,6,FORGET,FORGET_IDX;forget 
      002016 20 0F                    1 	.word LINK 
                           002018     2 	LINK=.
      002018                          3 FORGET:
      002018 06                       4 	.byte 6 	
      002019 46 4F 52 47 45 54        5 	.ascii "FORGET"
      00201F 00 38                    6 	.word FORGET_IDX 
      002021                       5501 	_dict_entry,3,FOR,FOR_IDX;for 
      002021 20 18                    1 	.word LINK 
                           002023     2 	LINK=.
      002023                          3 FOR:
      002023 03                       4 	.byte 3 	
      002024 46 4F 52                 5 	.ascii "FOR"
      002027 00 36                    6 	.word FOR_IDX 
      002029                       5502 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      002029 20 23                    1 	.word LINK 
                           00202B     2 	LINK=.
      00202B                          3 FCPU:
      00202B 04                       4 	.byte 4 	
      00202C 46 43 50 55              5 	.ascii "FCPU"
      002030 00 34                    6 	.word FCPU_IDX 
      002032                       5503 	_dict_entry,3,END,END_IDX;cmd_end  
      002032 20 2B                    1 	.word LINK 
                           002034     2 	LINK=.
      002034                          3 END:
      002034 03                       4 	.byte 3 	
      002035 45 4E 44                 5 	.ascii "END"
      002038 00 30                    6 	.word END_IDX 
      00203A                       5504 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      00203A 20 34                    1 	.word LINK 
                           00203C     2 	LINK=.
      00203C                          3 EEPROM:
      00203C 46                       4 	.byte 6+F_IFUNC 	
      00203D 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      002043 00 32                    6 	.word EEPROM_IDX 
      002045                       5505 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      002045 20 3C                    1 	.word LINK 
                           002047     2 	LINK=.
      002047                          3 DWRITE:
      002047 06                       4 	.byte 6+F_CMD 	
      002048 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00204E 00 2E                    6 	.word DWRITE_IDX 
      002050                       5506 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      002050 20 47                    1 	.word LINK 
                           002052     2 	LINK=.
      002052                          3 DREAD:
      002052 45                       4 	.byte 5+F_IFUNC 	
      002053 44 52 45 41 44           5 	.ascii "DREAD"
      002058 00 2C                    6 	.word DREAD_IDX 
      00205A                       5507 	_dict_entry,2,DO,DO_IDX;do_loop
      00205A 20 52                    1 	.word LINK 
                           00205C     2 	LINK=.
      00205C                          3 DO:
      00205C 02                       4 	.byte 2 	
      00205D 44 4F                    5 	.ascii "DO"
      00205F 00 2A                    6 	.word DO_IDX 
      002061                       5508 	_dict_entry,3,DIR,DIR_IDX;directory 
      002061 20 5C                    1 	.word LINK 
                           002063     2 	LINK=.
      002063                          3 DIR:
      002063 03                       4 	.byte 3 	
      002064 44 49 52                 5 	.ascii "DIR"
      002067 00 28                    6 	.word DIR_IDX 
      002069                       5509 	_dict_entry,3,DEC,DEC_IDX;dec_base
      002069 20 63                    1 	.word LINK 
                           00206B     2 	LINK=.
      00206B                          3 DEC:
      00206B 03                       4 	.byte 3 	
      00206C 44 45 43                 5 	.ascii "DEC"
      00206F 00 26                    6 	.word DEC_IDX 
      002071                       5510 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      002071 20 6B                    1 	.word LINK 
                           002073     2 	LINK=.
      002073                          3 DDR:
      002073 43                       4 	.byte 3+F_IFUNC 	
      002074 44 44 52                 5 	.ascii "DDR"
      002077 00 24                    6 	.word DDR_IDX 
      002079                       5511 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      002079 20 73                    1 	.word LINK 
                           00207B     2 	LINK=.
      00207B                          3 DATALN:
      00207B 06                       4 	.byte 6 	
      00207C 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002082 00 22                    6 	.word DATALN_IDX 
      002084                       5512 	_dict_entry,4,DATA,DATA_IDX;data  
      002084 20 7B                    1 	.word LINK 
                           002086     2 	LINK=.
      002086                          3 DATA:
      002086 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002087 44 41 54 41              5 	.ascii "DATA"
      00208B 00 20                    6 	.word DATA_IDX 
      00208D                       5513 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      00208D 20 86                    1 	.word LINK 
                           00208F     2 	LINK=.
      00208F                          3 CRL:
      00208F 43                       4 	.byte 3+F_IFUNC 	
      002090 43 52 4C                 5 	.ascii "CRL"
      002093 00 1E                    6 	.word CRL_IDX 
      002095                       5514 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      002095 20 8F                    1 	.word LINK 
                           002097     2 	LINK=.
      002097                          3 CRH:
      002097 43                       4 	.byte 3+F_IFUNC 	
      002098 43 52 48                 5 	.ascii "CRH"
      00209B 00 1C                    6 	.word CRH_IDX 
      00209D                       5515 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      00209D 20 97                    1 	.word LINK 
                           00209F     2 	LINK=.
      00209F                          3 CHAR:
      00209F 84                       4 	.byte 4+F_CFUNC 	
      0020A0 43 48 41 52              5 	.ascii "CHAR"
      0020A4 00 1A                    6 	.word CHAR_IDX 
      0020A6                       5516 	_dict_entry,3,BYE,BYE_IDX;bye 
      0020A6 20 9F                    1 	.word LINK 
                           0020A8     2 	LINK=.
      0020A8                          3 BYE:
      0020A8 03                       4 	.byte 3 	
      0020A9 42 59 45                 5 	.ascii "BYE"
      0020AC 00 18                    6 	.word BYE_IDX 
      0020AE                       5517 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      0020AE 20 A8                    1 	.word LINK 
                           0020B0     2 	LINK=.
      0020B0                          3 BTOGL:
      0020B0 05                       4 	.byte 5 	
      0020B1 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0020B6 00 16                    6 	.word BTOGL_IDX 
      0020B8                       5518 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      0020B8 20 B0                    1 	.word LINK 
                           0020BA     2 	LINK=.
      0020BA                          3 BTEST:
      0020BA 45                       4 	.byte 5+F_IFUNC 	
      0020BB 42 54 45 53 54           5 	.ascii "BTEST"
      0020C0 00 14                    6 	.word BTEST_IDX 
      0020C2                       5519 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0020C2 20 BA                    1 	.word LINK 
                           0020C4     2 	LINK=.
      0020C4                          3 BSET:
      0020C4 04                       4 	.byte 4 	
      0020C5 42 53 45 54              5 	.ascii "BSET"
      0020C9 00 12                    6 	.word BSET_IDX 
      0020CB                       5520 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      0020CB 20 C4                    1 	.word LINK 
                           0020CD     2 	LINK=.
      0020CD                          3 BRES:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0020CD 04                       4 	.byte 4 	
      0020CE 42 52 45 53              5 	.ascii "BRES"
      0020D2 00 10                    6 	.word BRES_IDX 
      0020D4                       5521 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0020D4 20 CD                    1 	.word LINK 
                           0020D6     2 	LINK=.
      0020D6                          3 BIT:
      0020D6 43                       4 	.byte 3+F_IFUNC 	
      0020D7 42 49 54                 5 	.ascii "BIT"
      0020DA 00 0E                    6 	.word BIT_IDX 
      0020DC                       5522 	_dict_entry,3,AWU,AWU_IDX;awu 
      0020DC 20 D6                    1 	.word LINK 
                           0020DE     2 	LINK=.
      0020DE                          3 AWU:
      0020DE 03                       4 	.byte 3 	
      0020DF 41 57 55                 5 	.ascii "AWU"
      0020E2 00 0C                    6 	.word AWU_IDX 
      0020E4                       5523 	_dict_entry,7,AUTORUN,AUTORUN_IDX;autorun
      0020E4 20 DE                    1 	.word LINK 
                           0020E6     2 	LINK=.
      0020E6                          3 AUTORUN:
      0020E6 07                       4 	.byte 7 	
      0020E7 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      0020EE 00 0A                    6 	.word AUTORUN_IDX 
      0020F0                       5524 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0020F0 20 E6                    1 	.word LINK 
                           0020F2     2 	LINK=.
      0020F2                          3 ASC:
      0020F2 43                       4 	.byte 3+F_IFUNC 	
      0020F3 41 53 43                 5 	.ascii "ASC"
      0020F6 00 08                    6 	.word ASC_IDX 
      0020F8                       5525 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0020F8 20 F2                    1 	.word LINK 
                           0020FA     2 	LINK=.
      0020FA                          3 AND:
      0020FA 43                       4 	.byte 3+F_IFUNC 	
      0020FB 41 4E 44                 5 	.ascii "AND"
      0020FE 00 06                    6 	.word AND_IDX 
      002100                       5526 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      002100 20 FA                    1 	.word LINK 
                           002102     2 	LINK=.
      002102                          3 ADCREAD:
      002102 47                       4 	.byte 7+F_IFUNC 	
      002103 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00210A 00 04                    6 	.word ADCREAD_IDX 
      00210C                       5527 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      00210C 21 02                    1 	.word LINK 
                           00210E     2 	LINK=.
      00210E                          3 ADCON:
      00210E 05                       4 	.byte 5 	
      00210F 41 44 43 4F 4E           5 	.ascii "ADCON"
      002114 00 02                    6 	.word ADCON_IDX 
      002116                       5528 kword_dict::
      002116                       5529 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      002116 21 0E                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           002118     2 	LINK=.
      002118                          3 ABS:
      002118 43                       4 	.byte 3+F_IFUNC 	
      002119 41 42 53                 5 	.ascii "ABS"
      00211C 00 00                    6 	.word ABS_IDX 
                                   5530 
                                   5531 ;comands and fonctions address table 	
      00211E                       5532 code_addr::
      00211E 18 B0 12 D6 13 12 18  5533 	.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask ; 0..7
             C4 17 56 17 E8 18 61
             1B 12
      00212E 10 74 10 64 10 95 10  5534 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             85 17 DF 17 44 1B CC
      00213C 1B C6 1B E4 1B EA 1B  5535 	.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write ;16..23 
             C0 0E 4F 16 8B 1B 3B
             13 46 13 76
      00214E 12 82 1B DE 19 3E 10  5536 	.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio ; 24..31 
             F0 16 1D 11 EB 11 D0
             17 92
      00215E 0E 4A 1B BA 10 DC 0F  5537 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             CD 1B 2C 1A BC 1A F2
             17 7D
      00216E 0E 80 0E AB 15 ED 1A  5538 	.word let,list,load,log2,lshift,muldiv,next,new ; 40..47
             F7 19 0C 0B EB 11 70
             13 FD
      00217E 1A AF 1B B4 18 DC 1D  5539 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             77 18 4E 19 4A 10 CB
             1B D8
      00218E 10 BC 1B D2 0F 47 1B  5540 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             7E 1B 84 1B 8A 1B 90
             1B 96
      00219E 1B 9C 1B A2 1B A8 1B  5541 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             AE 17 85 1C 66 05 17
             10 39
      0021AE 1C 17 12 0B 19 C6 19  5542 	.word restore,return, random,rshift,run,save,show,free ; 72..79
             25 12 29 14 EE 0E 09
             0E 54
      0021BE 18 43 1D 58 1C C0 1D  5543 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             60 1D 38 11 49 13 B1
             18 AA
      0021CE 1A 93 1A A2 11 19 12  5544 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             92 0E 5E 17 BC 1B 50
             17 C2
      0021DE 10 3F 1A 2D 17 0D 18  5545 	.word wait,words,write,bit_xor ; 96..99
             F4
      0021E6 00 00                 5546 	.word 0 
                                   5547 
      002200                       5548 	.bndry 128 ; align on FLASH block.
                                   5549 ; free space for user application  
      002200                       5550 user_space:
                                   5551 ; USR() function test
      002200 89               [ 2] 5552 	pushw x 
      002201 72 1A 50 0A      [ 1] 5553 	bset PC_ODR,#5 
      002205 85               [ 2] 5554 	popw x 
      002206 CD 18 58         [ 4] 5555 	call pause02 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002209 72 1B 50 0A      [ 1] 5556 	bres PC_ODR,#5 
      00220D 81               [ 4] 5557 	ret
                                   5558 
                                   5559 	.area FLASH_DRIVE (ABS)
      010000                       5560 	.org 0x10000
      010000                       5561 fdrive:
                                   5562 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002118 R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      00210E R
    ADCON_ID=  000002     |   5 ADCREAD    002102 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        0020FA R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |   5 ASC        0020F2 R   |     ASC_IDX =  000008 
  5 AUTORUN    0020E6 R   |     AUTORUN_=  00000A     |     AUTORUN_=  004000 
  5 AWU        0020DE R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000C 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |   5 BIT        0020D6 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000E 
    BLOCK_CO=  000004     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   5 BRES       0020CD R
    BRES_IDX=  000010     |     BS      =  000008     |     BSAVE   =  000001 
  5 BSET       0020C4 R   |     BSET_IDX=  000012     |     BSIZE   =  000001 
  5 BTEST      0020BA R   |     BTEST_ID=  000014     |   5 BTOGL      0020B0 R
    BTOGL_ID=  000016     |     BTW     =  000001     |   5 BYE        0020A8 R
    BYE_IDX =  000018     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       00209F R   |     CHAR_IDX=  00001A 
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        002097 R
    CRH_IDX =  00001C     |   5 CRL        00208F R   |     CRL_IDX =  00001E 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CVAR    =  000007     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   5 DATA       002086 R   |   5 DATALN     00207B R
    DATALN_I=  000022     |     DATA_IDX=  000020     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DBL     =  000003     |     DBLDIVDN=  000006     |     DBLHI   =  000001 
    DBLLO   =  000003     |     DBL_SIZE=  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        002073 R   |     DDR_IDX =  000024     |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |     DEBUG_PR=  000001 
  5 DEC        00206B R   |     DEC_IDX =  000026     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        002063 R   |     DIR_IDX =  000028 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DO         00205C R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  00002A 
  5 DREAD      002052 R   |     DREAD_ID=  00002C     |   5 DWRITE     002047 R
    DWRITE_I=  00002E     |   5 EEPROM     00203C R   |     EEPROM_B=  004000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    EEPROM_E=  0047FF     |     EEPROM_I=  000032     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        002034 R   |     END_IDX =  000030 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       00202B R   |     FCPU_IDX=  000034     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        002023 R   |   5 FORGET     002018 R   |     FORGET_I=  000038 
    FOR_IDX =  000036     |   5 FREE       00200F R   |     FREE_IDX=  00009E 
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      002005 R   |     GOSUB_ID=  00003A 
  5 GOTO       001FFC R   |     GOTO_IDX=  00003C     |   5 GPIO       001FF3 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003E 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        001FEB R   |     HEX_IDX =  000040     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        001FE3 R   |     IDR_IDX =  000042     |   5 IF         001FDC R
    IF_IDX  =  000044     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      001FD2 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000046 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   5 INVERT     001FC7 R
    INVERT_I=  000048     |     INW     =  000009     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   5 IWDGEN     001FBC R   |     IWDGEN_I=  00004A 
  5 IWDGREF    001FB0 R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        001FA8 R
    KEY_IDX =  00004E     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   5 LET        001FA0 R   |     LET_IDX =  000050 
    LF      =  00000A     |     LIMIT   =  000005     |   5 LINK    =  002118 R
  5 LIST       001F97 R   |     LIST_IDX=  000052     |     LLEN    =  000002 
    LN_PTR  =  000005     |   5 LOAD       001F8E R   |     LOAD_IDX=  000054 
  5 LOG        001F86 R   |     LOG_IDX =  000056     |   5 LSHIFT     001F7B R
    LSHIFT_I=  000058     |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  5 MULDIV     001F70 R   |     MULDIV_I=  00005A     |     MULOP   =  000003 
    N1      =  000001     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        001F68 R   |     NEW_FREE=  000001     |     NEW_IDX =  00005E 
  5 NEXT       001F5F R   |     NEXT_IDX=  00005C     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        001F57 R   |     NOT_IDX =  000060 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000000 R   |   5 ODR        001F4F R   |     ODR_IDX =  000062 
    ONOFF   =  000003     |     OP      =  000003     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         001F48 R   |     OR_IDX  =  000064     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |   5 PAD        001F40 R   |     PAD_IDX =  000066 
    PAD_SIZE=  000080     |   5 PAUSE      001F36 R   |     PAUSE_ID=  000068 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       001F2D R   |     PEEK_IDX=  00006C 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   5 PINP       001F24 R
    PINP_IDX=  00006E     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      001F1A R
    PMODE_ID=  00006A     |   5 POKE       001F11 R   |     POKE_IDX=  000070 
    PORT    =  000003     |   5 POUT       001F08 R   |     POUT_IDX=  000072 
  5 PRINT      001EFE R   |   5 PRTA       001EF5 R   |     PRTA_IDX=  000076 
  5 PRTB       001EEC R   |     PRTB_IDX=  000078     |   5 PRTC       001EE3 R
    PRTC_IDX=  00007A     |   5 PRTD       001EDA R   |     PRTD_IDX=  00007C 
  5 PRTE       001ED1 R   |     PRTE_IDX=  00007E     |   5 PRTF       001EC8 R
    PRTF_IDX=  000080     |   5 PRTG       001EBF R   |     PRTG_IDX=  000082 
  5 PRTH       001EB6 R   |     PRTH_IDX=  000084     |   5 PRTI       001EAD R
    PRTI_IDX=  000086     |     PRT_IDX =  000074     |     PSTR    =  000003 
  5 QKEY       001EA4 R   |     QKEY_IDX=  000088     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |     RBT_IDX =  00008C 
  5 READ       001E9B R   |     READ_IDX=  00008A     |   5 REBOOT     001E90 R
    REG     =  000001     |     REGA    =  000001     |     REGX    =  000003 
    REGY    =  000005     |     RELOP   =  000003     |   5 REMARK     001E85 R
    REM_IDX =  00008E     |   5 RESTORE    001E79 R   |     REST_IDX=  000090 
    RETL1   =  000001     |   5 RETURN     001E6E R   |     RET_ADDR=  000003 
    RET_IDX =  000092     |     RET_INW =  000005     |   5 RND        001E66 R
    RND_IDX =  000094     |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     001E5B R   |     RSHIFT_I=  000096     |     RST_SR  =  0050B3 
  5 RUN        001E53 R   |     RUN_IDX =  000098     |     RX_QUEUE=  000008 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

  5 SAVE       001E4A R   |     SAVEB   =  000002     |     SAVE_IDX=  00009A 
    SDIVSR  =  000005     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001E41 R   |     SHOW_IDX=  00009C 
    SI      =  00000F     |     SIGN    =  000001     |     SKIP    =  000005 
  5 SLEEP      001E37 R   |     SLEEP_ID=  0000A0     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   5 SPIEN      001E2D R
    SPIEN_ID=  0000A4     |   5 SPIRD      001E23 R   |     SPIRD_ID=  0000A2 
  5 SPISEL     001E18 R   |     SPISEL_I=  0000A6     |   5 SPIWR      001E0E R
    SPIWR_ID=  0000A8     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     STACK_EM=  0017FF     |     STACK_SI=  0000A0 
  5 STEP       001E05 R   |     STEP_IDX=  0000AA     |   5 STOP       001DFC R
    STOP_IDX=  0000AC     |     STX     =  000002     |     SUB     =  00001A 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      001DF2 R
    TICKS_ID=  0000AE     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   5 TIMEOUT    001DE6 R
  5 TIMER      001DDC R   |     TIMER_ID=  0000B0     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  000001 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_VAR  =  000085     |     TMROUT_I=  0000B2 
  5 TO         001DD5 R   |   5 TONE       001DCC R   |     TONE_IDX=  0000B6 
    TO_IDX  =  0000B4     |   5 Timer4Up   000078 R   |     U1      =  000001 
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     001DC1 R   |     UBOUND_I=  0000B8 
  5 UBTN_Han   0000BA R   |   5 UFLASH     001DB6 R   |     UFLASH_I=  0000BA 
  5 UNTIL      001DAC R   |     UNTIL_ID=  0000BC     |     US      =  00001F 
  5 USER_ABO   0000C2 R   |   5 USR        001DA4 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000BE 
  5 Uart1RxH   00000F R   |   5 Uart3RxH   000052 R   |   5 UserButt   00008D R
    VAR_ADDR=  000006     |     VSIZ    =  000002     |     VSIZE   =  000006 
    VT      =  00000B     |   5 WAIT       001D9B R   |     WAIT_IDX=  0000C0 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WLEN    =  000001     |   5 WORDS      001D91 R   |     WORDS_ID=  0000C2 
  5 WRITE      001D87 R   |     WRITE_ID=  0000C4     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        001D7F R   |     XOR_IDX =  0000C6 
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000007 
  5 abs        0018B0 R   |   1 acc16      00000C GR  |   1 acc24      00000B GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

  1 acc8       00000D GR  |   5 analog_r   001312 R   |   5 arduino_   0019A6 R
  5 arg_list   000C66 R   |   1 array_si   000021 R   |   5 ascii      001756 R
  5 atoi24     000A20 GR  |   5 atoi_exi   000A86 R   |   5 autorun    0017E8 R
  5 autorun_   000610 R   |   5 awu        001861 R   |   5 awu02      00186B R
  5 bad_port   0017B7 R   |   1 base       00000A GR  |   1 basicptr   000004 GR
  5 beep       00129F R   |   5 beep_1kh   001289 GR  |   5 bit_and    0018C4 R
  5 bit_or     0018DC R   |   5 bit_rese   001074 R   |   5 bit_set    001064 R
  5 bit_test   001095 R   |   5 bit_togg   001085 R   |   5 bit_xor    0018F4 R
  5 bitmask    001B12 R   |   5 block_er   0001E3 R   |   5 break_po   0013DF R
  5 bye        0017DF R   |   5 cancel_a   0005D8 R   |   5 char       001744 R
  5 clear_ba   000625 R   |   5 clear_va   0004A0 R   |   5 clock_in   0000DD R
  5 cmd_end    001282 R   |   5 cmd_line   000845 R   |   5 cmp_name   001480 R
  5 code_add   00211E GR  |   5 cold_sta   000517 R   |   5 comp_msg   00079A R
    compile    ****** GX  |   5 const_cr   001BC6 R   |   5 const_cr   001BCC R
  5 const_dd   001BC0 R   |   5 const_ee   001BDE R   |   5 const_id   001BBA R
  5 const_in   001BD8 R   |   5 const_od   001BB4 R   |   5 const_ou   001BD2 R
  5 const_po   001B7E R   |   5 const_po   001B84 R   |   5 const_po   001B8A R
  5 const_po   001B90 R   |   5 const_po   001B96 R   |   5 const_po   001B9C R
  5 const_po   001BA2 R   |   5 const_po   001BA8 R   |   5 const_po   001BAE R
  1 count      000003 GR  |   5 cp_loop    000C15 R   |   5 cs_high    001D72 R
  5 cstk_pro   000E23 R   |   5 data       001BE4 R   |   1 data_len   000009 R
  5 data_lin   001BEA R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   001C2A R   |   5 dbl_sign   000B6F R   |   5 dec_base   000E4F R
    decompil   ****** GX  |   5 digital_   001346 R   |   5 digital_   001376 R
  5 dir_loop   001697 R   |   5 director   00168B R   |   5 disk_fre   00146D R
  5 div32_16   000B79 R   |   5 divide     000BD0 R   |   5 divu24_8   00098F R
  5 dneg       000B64 R   |   5 do_loop    001B3B R   |   5 do_progr   0001D6 R
  5 drive_fr   001700 R   |   5 enable_i   001ABC R   |   5 erase_fl   000202 R
  5 err_bad_   000705 R   |   5 err_buf_   00077B R   |   5 err_cmd_   0006C9 R
  5 err_div0   00068E R   |   5 err_dupl   0006E3 R   |   5 err_math   000675 R
  5 err_mem_   00065A R   |   5 err_msg    00063A R   |   5 err_no_a   000711 R
  5 err_no_d   000744 R   |   5 err_no_f   000768 R   |   5 err_no_l   00069D R
  5 err_no_p   000754 R   |   5 err_not_   0006F4 R   |   5 err_run_   0006B3 R
  5 err_synt   000667 R   |   5 expect     000C54 R   |   5 expr_exi   000DAE R
  5 expressi   000D65 R   |   5 factor     000CB6 R   |   1 farptr     000016 R
  5 fcpu       00193E R   |   7 fdrive     010000 R   |   1 ffree      000019 R
  5 file_cou   0016F8 R   |   5 first_li   000ED4 R   |   1 flags      000023 GR
  5 for        0010F0 R   |   5 forget     00161D R   |   5 free       000E54 R
  1 free_ram   00006D R   |   5 func_arg   000C61 R   |   5 func_not   001AAF R
  5 get_arra   000C91 R   |   5 get_targ   0011BA R   |   5 get_tick   0018AA R
    get_toke   ****** GX  |   5 getc       00034B GR  |   5 gosub      0011EB R
  5 goto       0011D0 R   |   5 gpio       001792 R   |   5 hex_base   000E4A R
  5 hex_dump   0003F7 R   |   5 if         0010DC R   |   1 in         000001 GR
  1 in.saved   000002 GR  |   1 in.w       000000 GR  |   5 incr_far   00142D R
  5 input_ex   001036 R   |   5 input_lo   000FCF R   |   5 input_va   000FCD R
  5 interp_l   000886 R   |   5 interpre   000861 R   |   5 invert     001B2C R
  5 is_alnum   0004C8 GR  |   5 is_alpha   0004AE GR  |   5 is_digit   0004BF GR
  5 itoa       00092A GR  |   5 itoa_loo   000949 R   |   5 jp_to_ta   0011DE R
  5 key        00177D R   |   5 kword_di   002116 GR  |   5 kword_en   001D7D R
  5 leading_   001B02 R   |   5 let        000E80 GR  |   5 let_arra   000E8E R
  5 let_var    000E91 R   |   5 lines_sk   000ED7 R   |   5 list       000EAB R
  5 list_exi   000F19 R   |   5 list_loo   000EF7 R   |   5 load       0015ED R
  5 load_aut   0005E7 R   |   5 load_fil   0015BC R   |   5 log2       001AF7 R
  5 logical_   001AA5 R   |   5 long_div   000B4C R   |   5 loop_bac   00119D R
  1 loop_dep   000020 R   |   5 loop_don   0011B2 R   |   5 lshift     00190C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Symbol Table

  5 modulo     000BE6 R   |   5 move       00045E GR  |   5 move_dow   00047C R
  5 move_era   000168 R   |   5 move_exi   00049D R   |   5 move_loo   000481 R
  5 move_prg   00019C R   |   5 move_up    00046E R   |   5 muldiv     000BEB R
  5 multiply   000B17 R   |   5 mulu24_8   0009B7 R   |   5 neg_acc2   0009F1 R
  5 new        0013FD R   |   5 next       001170 R   |   5 next_lin   000869 R
  5 next_tok   0008AD GR  |   5 no_match   000C27 R   |   3 pad        0016E0 GR
  5 pad_ref    001D77 R   |   5 pause      00184E R   |   5 pause02    001858 R
  5 peek       0010CB R   |   5 pin_mode   00194A R   |   5 poke       0010BC R
  5 power_ad   0012D6 R   |   5 print      000F47 R   |   5 print_ex   000FA1 R
  5 print_in   00090E R   |   5 printxy    000A8A R   |   5 program_   00017C R
  5 program_   00019C R   |   5 prt_basi   000F27 R   |   5 prt_loop   000F4B R
  5 prt_tok    000389 R   |   5 prti24     00091E R   |   1 ptr16      000017 GR
  1 ptr8       000018 R   |   5 putc       00032B GR  |     puts       ****** GX
  5 qgetc      00033D GR  |   5 qkey       001785 GR  |   5 random     0019C6 R
  5 read       001C66 R   |   5 read01     001C68 R   |     readln     ****** GX
  5 refresh_   001AF2 R   |   5 rel_exit   000E06 R   |   5 relation   000DB1 R
  5 remark     001039 GR  |   5 reset_co   000F49 R   |   5 rest_con   000FBD R
  5 restore    001C17 R   |   5 return     00120B R   |     right_al   ****** GX
  5 row_alig   001412 R   |   5 row_eras   000141 R   |   5 row_eras   000168 R
  5 row_loop   0003DA R   |   5 rshift     001925 R   |   5 rt_msg     000788 R
  5 run        001229 R   |   5 run_it     00125B R   |   1 rx1_head   00002D R
  1 rx1_queu   000025 R   |   1 rx1_tail   00002E R   |   1 rx3_head   000037 R
  1 rx3_queu   00002F R   |   1 rx3_tail   000038 R   |   5 save       0014EE R
  5 save_con   000FAD R   |   5 search_d   000C07 GR  |   5 search_e   000C51 R
  5 search_f   0014A1 R   |     search_l   ****** GX  |   5 search_n   000C0B R
  1 seedx      000012 R   |   1 seedy      000014 R   |   5 seek_fdr   00143B R
  5 select_p   001996 R   |   5 set_time   001A93 R   |   5 show       000E09 R
  5 show_row   0003C8 R   |   5 sleep      001843 R   |   5 software   0004D1 R
    spaces     ****** GX  |   5 spi_clea   001D0B R   |   5 spi_disa   001CF3 R
  5 spi_enab   001CC0 R   |   5 spi_rcv_   001D2D R   |   5 spi_read   001D58 R
  5 spi_sele   001D60 R   |   5 spi_send   001D17 R   |   5 spi_writ   001D38 R
  3 stack_fu   001760 GR  |   3 stack_un   001800 R   |   5 step       001149 R
  5 stop       0013B1 R   |   5 store_lo   00115D R   |   5 str_matc   000C34 R
  5 strcmp     00043F R   |   5 strcpy     000450 GR  |   5 strlen     000434 GR
  5 syntax_e   0007BB GR  |   1 tab_widt   000024 GR  |   5 tb_error   0007BD GR
  5 term       000D13 R   |   5 term01     000D1B R   |   5 term_exi   000D62 R
  3 tib        001690 GR  |   1 ticks      00000E R   |   5 timeout    001AA2 R
  1 timer      000010 GR  |   5 timer2_i   0000F3 R   |   5 timer4_i   000100 R
  5 tk_id      0007AB R   |   5 to         001119 R   |   5 to_eepro   0001BF R
  5 to_flash   0001D3 R   |   5 to_upper   000A14 GR  |   5 token_ms   0003C0 R
  5 tone       001292 R   |   5 try_next   001C56 R   |   1 txtbgn     00001C GR
  1 txtend     00001E GR  |   5 uart1_ge   00034B GR  |   5 uart1_in   0002E8 R
  5 uart1_pu   00032B GR  |   5 uart1_qg   00033D GR  |   5 uart1_se   0002F8 R
  5 uart3_ge   00036A GR  |   5 uart3_in   0002A5 R   |   5 uart3_pu   000334 GR
  5 uart3_qg   000344 GR  |   5 uart3_se   0002B5 R   |   5 ubound     000E5E R
  5 udiv32_1   000B3A R   |   5 uflash     0017BC R   |   5 umstar     000ADD R
  5 unlock_e   000115 R   |   5 unlock_f   00012B R   |   5 until      001B50 R
  5 user_int   0000A0 R   |   5 user_spa   002200 R   |   5 usr        0017C2 R
    var_name   ****** GX  |   1 vars       000039 GR  |   5 wait       00103F R
  5 warm_ini   0005BA R   |   5 warm_sta   000842 R   |   5 words      001A2D R
  5 words_co   001A7D R   |   5 write      00170D R   |   5 write_bl   000282 R
  5 write_by   00020D R   |   5 write_ee   000249 R   |   5 write_ex   00027D R
  5 write_fl   000233 R   |   5 write_ro   0001B0 R   |   5 zero_pad   001407 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     6D   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   220E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

