ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         65 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         66 txtend:: .blkw 1 ; tokenized BASIC text end address 
      000020                         67 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         68 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         69 flags:: .blkb 1 ; various boolean flags
      000024                         70 tab_width:: .blkb 1 ; print colon width (default 4)
      000025                         71 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         72 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         73 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002F                         74 rx3_queue: .ds RX_QUEUE_SIZE ; UART3 receive circular queue
      000037                         75 rx3_head:  .blkb 1 ; rx3_queue head pointer 
      000038                         76 rx3_tail:  .blkb 1 ; rx3_queue tail pointer  
                                     77 
      000039                         78 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     79 ; keep 'free_ram' as last variable 
      00006D                         80 free_ram: ; from here RAM free for BASIC text 
                                     81 
                                     82 ;;-----------------------------------
                                     83     .area SSEG (ABS)
                                     84 ;; working buffers and stack at end of RAM. 	
                                     85 ;;-----------------------------------
      001690                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         87 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         88 pad:: .ds PAD_SIZE             ; working buffer
      001760                         89 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         90 stack_unf: ; stack underflow ; control_stack bottom 
                                     91 
                                     92 ;;--------------------------------------
                                     93     .area HOME 
                                     94 ;; interrupt vector table at 0x8000
                                     95 ;;--------------------------------------
      000000 82 00 05 17             96     int cold_start			; RESET vector 
                           000000    97 .if DEBUG
                                     98 	int TrapHandler 		;TRAP  software interrupt
                           000001    99 .else
      000004 82 00 00 00            100 	int NonHandledInterrupt ;TRAP  software interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                    101 .endif
      000008 82 00 00 00            102 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            103 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            104 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            105 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            106 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            107 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            108 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 8D            109 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            110 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            111 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            112 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            113 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            114 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            115 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            116 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            117 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            118 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            119 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            120 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            121 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            122 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 52            123 	int Uart3RxHandler      ;int21 UART3 RX full
      000060 82 00 00 00            124 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 78            125 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            126 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            127 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            128 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            129 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            130 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            131 	int NonHandledInterrupt ;int29  not used
                                    132 
                                    133 ;---------------------------------------
                                    134     .area CODE
                                    135 ;---------------------------------------
                           000000   136 .if DEBUG
                                    137 .asciz "STM8_TBI" ; I like to put module name here.
                                    138 .endif 
                                    139 
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    141 ; non handled interrupt 
                                    142 ; reset MCU
                                    143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        144 NonHandledInterrupt:
      000000 71                     145     .byte 0x71  ; invalid opcode reinitialize MCU
                                    146 
                                    147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    148 ; auto wakeup from halt
                                    149 ; at iret, program continue 
                                    150 ; after hatl instruction
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        152 AWUHandler:
      000001 72 19 50 F0      [ 1]  153 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  154 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  155 	clr AWU_TBR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      00000E 80               [11]  156 	iret
                                    157 
                                    158 ;--------------------------
                                    159 ; UART1 receive character
                                    160 ; CTRL-C (ASCII 3)
                                    161 ; cancel program execution
                                    162 ; and fall back to command line
                                    163 ;--------------------------
      00000F                        164 Uart1RxHandler: ; console receive char 
      00000F                        165 	_led2_on 
      00000F 72 1A 50 0A      [ 1]    1     bset LED2_PORT,#LED2_BIT 
      000013 72 0B 52 30 35   [ 2]  166 	btjf UART1_SR,#UART_SR_RXNE,5$
      000018 C6 52 31         [ 1]  167 	ld a,UART1_DR 
      00001B A1 03            [ 1]  168 	cp a,#CTRL_C 
      00001D 26 06            [ 1]  169 	jrne 2$
      00001F CD 03 2B         [ 4]  170 	call putc 
      000022 CC 00 A0         [ 2]  171 	jp user_interrupted
      000025                        172 2$:
      000025 A1 18            [ 1]  173 	cp a,#CAN ; CTRL_X 
      000027 26 03            [ 1]  174 	jrne 3$
      000029 CC 05 17         [ 2]  175 	jp cold_start 	
      00002C                        176 3$: 
      00002C A1 1A            [ 1]  177 	cp a,#CTRL_Z
      00002E 26 06            [ 1]  178 	jrne 4$
      000030 CD 05 D8         [ 4]  179 	call cancel_autorun 
      000033 CC 05 17         [ 2]  180 	jp cold_start
      000036 AE 00 25         [ 2]  181 4$:	ldw x,#rx1_queue  
      000039 88               [ 1]  182 	push a 
      00003A 9F               [ 1]  183 	ld a,xl 
      00003B CB 00 2E         [ 1]  184 	add a,rx1_tail 
      00003E 97               [ 1]  185 	ld xl,a
      00003F 84               [ 1]  186 	pop a  
      000040 F7               [ 1]  187 	ld (x),a
      000041 72 5C 00 2E      [ 1]  188 	inc rx1_tail 
      000045 A6 07            [ 1]  189 	ld a,#RX_QUEUE_SIZE-1
      000047 C4 00 2E         [ 1]  190 	and a,rx1_tail 
      00004A C7 00 2E         [ 1]  191 	ld rx1_tail,a  
      00004D                        192 5$:	_led2_off 	
      00004D 72 1B 50 0A      [ 1]    1     bres LED2_PORT,#LED2_BIT 
      000051 80               [11]  193 	iret 
                                    194 
                                    195 ;-----------------------------
                                    196 ; ISR for character reception
                                    197 ; on UART3
                                    198 ; raw data communication
                                    199 ;-----------------------------
      000052                        200 Uart3RxHandler:
      000052                        201 	_led2_on 
      000052 72 1A 50 0A      [ 1]    1     bset LED2_PORT,#LED2_BIT 
      000056 AE 00 2F         [ 2]  202 	ldw x,#rx3_queue 
      000059 9F               [ 1]  203 	ld a,xl 
      00005A CB 00 38         [ 1]  204 	add a,rx3_tail 
      00005D 97               [ 1]  205 	ld xl,a 
      00005E 72 0B 52 40 10   [ 2]  206 	btjf UART3_SR,#UART_SR_RXNE,9$
      000063 C6 52 41         [ 1]  207 	ld a,UART3_DR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000066 F7               [ 1]  208 	ld (x),a  
      000067 72 5C 00 38      [ 1]  209 	inc rx3_tail 
      00006B A6 07            [ 1]  210 	ld a,#RX_QUEUE_SIZE-1 
      00006D C4 00 38         [ 1]  211 	and a,rx3_tail 
      000070 C7 00 38         [ 1]  212 	ld rx3_tail,a 
      000073                        213 9$:	_led2_off 
      000073 72 1B 50 0A      [ 1]    1     bres LED2_PORT,#LED2_BIT 
      000077 80               [11]  214 	iret  
                                    215 
                                    216 
                                    217 ;------------------------------------
                                    218 ; software interrupt handler  
                                    219 ;------------------------------------
                           000000   220 .if DEBUG 
                                    221 TrapHandler:
                                    222 	bset flags,#FTRAP 
                                    223 	call print_registers
                                    224 	call cmd_itf
                                    225 	bres flags,#FTRAP 	
                                    226 	iret
                                    227 .endif 
                                    228 
                                    229 ;------------------------------
                                    230 ; TIMER 4 is used to maintain 
                                    231 ; a milliseconds 'ticks' counter
                                    232 ; and decrement 'timer' varaiable
                                    233 ;--------------------------------
      000078                        234 Timer4UpdateHandler:
      000078 72 5F 53 42      [ 1]  235 	clr TIM4_SR 
      00007C CE 00 0E         [ 2]  236 	ldw x,ticks
      00007F 5C               [ 1]  237 	incw x
      000080 CF 00 0E         [ 2]  238 	ldw ticks,x 
      000083 CE 00 10         [ 2]  239 	ldw x,timer
                                    240 ;	tnzw x 
      000086 27 04            [ 1]  241 	jreq 1$
      000088 5A               [ 2]  242 	decw x 
      000089 CF 00 10         [ 2]  243 	ldw timer,x 
      00008C                        244 1$:	
      00008C 80               [11]  245 	iret 
                                    246 
                                    247 
                                    248 ;------------------------------------
                                    249 ; Triggered by pressing USER UserButton 
                                    250 ; on NUCLEO card.
                                    251 ; This is used to abort a progam lock 
                                    252 ; in infinite loop. 
                                    253 ;------------------------------------
      00008D                        254 UserButtonHandler:
                                    255 ; wait button release
      00008D 5F               [ 1]  256 	clrw x
      00008E 5A               [ 2]  257 1$: decw x 
      00008F 26 FD            [ 1]  258 	jrne 1$
      000091 72 09 50 15 F8   [ 2]  259 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    260 ; if MCU suspended by SLEEP resume program
      000096 72 07 00 23 05   [ 2]  261     btjf flags,#FSLEEP,2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00009B 72 17 00 23      [ 1]  262 	bres flags,#FSLEEP 
      00009F 80               [11]  263 	iret
      0000A0                        264 2$:	
      0000A0                        265 user_interrupted:
      0000A0 72 00 00 23 02   [ 2]  266     btjt flags,#FRUN,4$
      0000A5 20 13            [ 2]  267 	jra UBTN_Handler_exit 
      0000A7                        268 4$:	; program interrupted by user 
      0000A7 72 11 00 23      [ 1]  269 	bres flags,#FRUN 
      0000AB AE 00 C2         [ 2]  270 	ldw x,#USER_ABORT
      0000AE CD 00 00         [ 4]  271 	call puts 
      0000B1 CE 00 04         [ 2]  272 	ldw x,basicptr 
      0000B4 C6 00 01         [ 1]  273 	ld a,in 
      0000B7 CD 0F 24         [ 4]  274 	call prt_basic_line
      0000BA                        275 UBTN_Handler_exit:
      0000BA AE 17 FF         [ 2]  276     ldw x,#STACK_EMPTY 
      0000BD 94               [ 1]  277     ldw sp,x
      0000BE 9A               [ 1]  278 	rim 
      0000BF CC 08 42         [ 2]  279 	jp warm_start
                                    280 
      0000C2 0A 50 72 6F 67 72 61   281 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    peripherals initialization
                                    285 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    286 
                                    287 ;----------------------------------------
                                    288 ; inialize MCU clock 
                                    289 ; input:
                                    290 ;   A 		source  HSI | 1 HSE 
                                    291 ;   XL      CLK_CKDIVR , clock divisor 
                                    292 ; output:
                                    293 ;   none 
                                    294 ;----------------------------------------
      0000DD                        295 clock_init:	
      0000DD C1 50 C3         [ 1]  296 	cp a,CLK_CMSR 
      0000E0 27 0C            [ 1]  297 	jreq 2$ ; no switching required 
                                    298 ; select clock source 
      0000E2 72 12 50 C5      [ 1]  299 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000E6 C7 50 C4         [ 1]  300 	ld CLK_SWR,a
      0000E9 C1 50 C3         [ 1]  301 1$:	cp a,CLK_CMSR
      0000EC 26 FB            [ 1]  302 	jrne 1$
      0000EE                        303 2$: 	
                                    304 ; HSI and cpu clock divisor 
      0000EE 9F               [ 1]  305 	ld a,xl 
      0000EF C7 50 C6         [ 1]  306 	ld CLK_CKDIVR,a  
      0000F2 81               [ 4]  307 	ret
                                    308 
                                    309 ;----------------------------------
                                    310 ; TIMER2 used as audio tone output 
                                    311 ; on port D:5.
                                    312 ; channel 1 configured as PWM mode 1 
                                    313 ;-----------------------------------  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           00F424   314 TIM2_CLK_FREQ=62500
      0000F3                        315 timer2_init:
      0000F3 72 1A 50 C7      [ 1]  316 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000F7 35 60 53 05      [ 1]  317  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000FB 35 08 53 0C      [ 1]  318 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000FF 81               [ 4]  319 	ret 
                                    320 
                                    321 ;---------------------------------
                                    322 ; TIM4 is configured to generate an 
                                    323 ; interrupt every millisecond 
                                    324 ;----------------------------------
      000100                        325 timer4_init:
      000100 72 18 50 C7      [ 1]  326 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      000104 35 07 53 45      [ 1]  327 	mov TIM4_PSCR,#7 ; prescale 128  
      000108 35 7D 53 46      [ 1]  328 	mov TIM4_ARR,#125 ; set for 1msec.
      00010C 35 05 53 40      [ 1]  329 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000110 72 10 53 41      [ 1]  330 	bset TIM4_IER,#TIM4_IER_UIE
      000114 81               [ 4]  331 	ret
                                    332 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    334 ;  routines to write to FLASH, EEPROM 
                                    335 ;  and OPTION 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 
                                    338 ;----------------------------------
                                    339 ; unlock EEPROM/OPT for writing/erasing
                                    340 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    341 ; input:
                                    342 ;  none
                                    343 ; output:
                                    344 ;  none 
                                    345 ;----------------------------------
      000115                        346 unlock_eeprom:
      000115 35 00 50 5B      [ 1]  347 	mov FLASH_CR2,#0 
      000119 35 FF 50 5C      [ 1]  348 	mov FLASH_NCR2,#0xFF 
      00011D 35 AE 50 64      [ 1]  349 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000121 35 56 50 64      [ 1]  350     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000125 72 07 50 5F FB   [ 2]  351 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00012A 81               [ 4]  352 	ret
                                    353 
                                    354 ;----------------------------------
                                    355 ; unlock FLASH for writing/erasing
                                    356 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    357 ; input:
                                    358 ;  none
                                    359 ; output:
                                    360 ;  none
                                    361 ;----------------------------------
      00012B                        362 unlock_flash:
      00012B 35 00 50 5B      [ 1]  363 	mov FLASH_CR2,#0 
      00012F 35 FF 50 5C      [ 1]  364 	mov FLASH_NCR2,#0xFF 
      000133 35 56 50 62      [ 1]  365 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000137 35 AE 50 62      [ 1]  366 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00013B 72 03 50 5F FB   [ 2]  367 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000140 81               [ 4]  368 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    369 
                                    370 ;----------------------------
                                    371 ; erase block code must be 
                                    372 ; executed from RAM
                                    373 ; input:
                                    374 ;-----------------------------
      000141                        375 row_erase:
      000141 35 20 50 5B      [ 1]  376 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000145 35 DF 50 5C      [ 1]  377 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000149 4F               [ 1]  378 	clr a 
      00014A 90 5F            [ 1]  379 	clrw y 
      00014C 91 A7 00 16      [ 1]  380 	ldf ([farptr],y),a
      000150 90 5C            [ 1]  381     incw y
      000152 91 A7 00 16      [ 1]  382 	ldf ([farptr],y),a
      000156 90 5C            [ 1]  383     incw y
      000158 91 A7 00 16      [ 1]  384 	ldf ([farptr],y),a
      00015C 90 5C            [ 1]  385     incw y
      00015E 91 A7 00 16      [ 1]  386 	ldf ([farptr],y),a
      000162 72 05 50 5F FB   [ 2]  387 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000167 81               [ 4]  388 	ret
      000168                        389 row_erase_end:
                                    390 
                                    391 ; copy erase_start in RAM 
      000168                        392 move_erase_to_ram:
      000168 AE 01 68         [ 2]  393 	ldw x,#row_erase_end 
      00016B 1D 01 41         [ 2]  394 	subw x,#row_erase
      00016E CF 00 0C         [ 2]  395 	ldw acc16,x 
      000171 AE 16 90         [ 2]  396 	ldw x,#tib 
      000174 90 AE 01 41      [ 2]  397 	ldw y,#row_erase 
      000178 CD 04 5E         [ 4]  398 	call move 
      00017B 81               [ 4]  399 	ret 
                                    400 
                                    401 ;-----------------------------------
                                    402 ; block programming must be 
                                    403 ; executed from RAM 
                                    404 ; initial contidions: 
                                    405 ; 	memory unlocked
                                    406 ;   bit PRG set in 
                                    407 ; input:
                                    408 ;   x        128 bytes row to program 
                                    409 ;   farptr   row address 
                                    410 ; output:
                                    411 ;   none 
                                    412 ;----------------------------------
                           000001   413 	BCNT=1 
      00017C                        414 program_row:
      00017C 4B 80            [ 1]  415 	push #BLOCK_SIZE  
                                    416 ;enable block programming 
      00017E 72 10 50 5B      [ 1]  417 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000182 72 11 50 5C      [ 1]  418 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000186 90 5F            [ 1]  419 	clrw y 
      000188 F6               [ 1]  420 1$:	ld a,(x)
      000189 91 A7 00 16      [ 1]  421 	ldf ([farptr],y),a
      00018D 5C               [ 1]  422 	incw x 
      00018E 90 5C            [ 1]  423 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000190 0A 01            [ 1]  424 	dec (BCNT,sp)
      000192 26 F4            [ 1]  425 	jrne 1$
                                    426 ; wait EOP bit 
      000194 72 05 50 5F FB   [ 2]  427 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000199                        428 	_drop 1 
      000199 5B 01            [ 2]    1     addw sp,#1 
      00019B 81               [ 4]  429 	ret 
      00019C                        430 program_row_end:
                                    431 
                                    432 ;-------------------------
                                    433 ; move program_row to RAM 
                                    434 ; at txtubound address 
                                    435 ;------------------------
      00019C                        436 move_prg_to_ram:
      00019C AE 01 9C         [ 2]  437 	ldw x,#program_row_end 
      00019F 1D 01 7C         [ 2]  438 	subw x,#program_row 
      0001A2 CF 00 0C         [ 2]  439 	ldw acc16,x 
      0001A5 AE 16 90         [ 2]  440 	ldw x,#tib 
      0001A8 90 AE 01 7C      [ 2]  441 	ldw y,#program_row 
      0001AC CD 04 5E         [ 4]  442 	call move 
      0001AF 81               [ 4]  443 	ret 
                                    444 
                                    445 
                                    446 ;-----------------------------
                                    447 ; write a row in FLASH/EEPROM 
                                    448 ; input:
                                    449 ;    farptr   destination address 
                                    450 ;    x        source address 
                                    451 ;-----------------------------
      0001B0                        452 write_row:
      0001B0 89               [ 2]  453 	pushw x 
      0001B1 72 5D 00 16      [ 1]  454 	tnz farptr 
      0001B5 26 1C            [ 1]  455 	jrne to_flash 
      0001B7 AE 80 00         [ 2]  456 	ldw x,#FLASH_BASE 
      0001BA C3 00 17         [ 2]  457 	cpw x,farptr+1 
      0001BD 24 14            [ 1]  458 	jruge to_flash 
      0001BF                        459 to_eeprom:
      0001BF AE 40 00         [ 2]  460 	ldw x,#EEPROM_BASE 
      0001C2 C3 00 17         [ 2]  461 	cpw x,farptr+1 
      0001C5 24 01            [ 1]  462 	jruge 1$
      0001C7 81               [ 4]  463 	ret ; bad address 
      0001C8 AE 47 FF         [ 2]  464 1$: ldw x,#EEPROM_END 
      0001CB 23 01            [ 2]  465 	jrule 2$ 
      0001CD 81               [ 4]  466 	ret ; bad address 
      0001CE CD 01 15         [ 4]  467 2$:	call unlock_eeprom
      0001D1 20 03            [ 2]  468 	jra do_programming
      0001D3                        469 to_flash:
      0001D3 CD 01 2B         [ 4]  470 	call unlock_flash 
      0001D6                        471 do_programming:
      0001D6 85               [ 2]  472 	popw x 
      0001D7 CD 16 90         [ 4]  473 	call tib
      0001DA 72 13 50 5F      [ 1]  474 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001DE 72 17 50 5F      [ 1]  475 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001E2 81               [ 4]  476 	ret 
                                    477 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    478 
                                    479 ;-----------------------------------
                                    480 ; erase flash or EEPROM block
                                    481 ; a blow is 128 bytes 
                                    482 ; input:
                                    483 ;   farptr  address row begin
                                    484 ; output:
                                    485 ;   none
                                    486 ;--------------------------------------
      0001E3                        487 block_erase:
      0001E3 CE 00 17         [ 2]  488 	ldw x,farptr+1
      0001E6 A3 22 00         [ 2]  489 	cpw x,#user_space 
      0001E9 2A 17            [ 1]  490 	jrpl erase_flash 
                                    491 ; erase eeprom block
      0001EB A3 40 00         [ 2]  492 	cpw x,#EEPROM_BASE 
      0001EE 24 01            [ 1]  493 	jruge 1$
      0001F0 81               [ 4]  494 	ret ; bad address 
      0001F1 AE 47 FF         [ 2]  495 1$: ldw x,#EEPROM_END 
      0001F4 23 01            [ 2]  496 	jrule 2$ 
      0001F6 81               [ 4]  497 	ret ; bad address 
      0001F7 CD 01 15         [ 4]  498 2$:	call unlock_eeprom 
      0001FA CD 16 90         [ 4]  499 	call tib 
      0001FD 72 17 50 5F      [ 1]  500 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000201 81               [ 4]  501 	ret 
                                    502 ; erase flash block:
      000202                        503 erase_flash:
      000202 CD 01 2B         [ 4]  504 	call unlock_flash 
      000205 CD 16 90         [ 4]  505 	call tib 
      000208 72 13 50 5F      [ 1]  506     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00020C 81               [ 4]  507 	ret 
                                    508 
                                    509 
                                    510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    511 ; write a byte to FLASH or EEPROM/OPTION  
                                    512 ; input:
                                    513 ;    a  		byte to write
                                    514 ;    farptr  	address
                                    515 ;    x          farptr[x]
                                    516 ; output:
                                    517 ;    none
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    519 	; variables locales
                           000001   520 	BTW = 1   ; byte to write offset on stack
                           000002   521 	OPT = 2   ; OPTION flag offset on stack
                           000002   522 	VSIZE = 2
      00020D                        523 write_byte:
      00020D 90 89            [ 2]  524 	pushw y
      00020F                        525 	_vars VSIZE
      00020F 52 02            [ 2]    1     sub sp,#VSIZE 
      000211 6B 01            [ 1]  526 	ld (BTW,sp),a ; byte to write 
      000213 0F 02            [ 1]  527 	clr (OPT,sp)  ; OPTION flag
                                    528 ; put addr[15:0] in Y, for bounds check.
      000215 90 CE 00 17      [ 2]  529 	ldw y,farptr+1   ; Y=addr15:0
                                    530 ; check addr[23:16], if <> 0 then it is extened flash memory
      000219 72 5D 00 16      [ 1]  531 	tnz farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00021D 26 14            [ 1]  532 	jrne write_flash
      00021F 90 A3 22 00      [ 2]  533     cpw y,#user_space
      000223 24 0E            [ 1]  534     jruge write_flash
      000225 90 A3 40 00      [ 2]  535 	cpw y,#EEPROM_BASE  
      000229 25 52            [ 1]  536     jrult write_exit
      00022B 90 A3 48 7F      [ 2]  537 	cpw y,#OPTION_END 
      00022F 22 4C            [ 1]  538 	jrugt write_exit
      000231 20 16            [ 2]  539 	jra write_eeprom 
                                    540 ; write program memory
      000233                        541 write_flash:
      000233 CD 01 2B         [ 4]  542 	call unlock_flash 
      000236 9B               [ 1]  543 1$:	sim 
      000237 7B 01            [ 1]  544 	ld a,(BTW,sp)
      000239 92 A7 00 16      [ 4]  545 	ldf ([farptr],x),a ; farptr[x]=A
      00023D 72 05 50 5F FB   [ 2]  546 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000242 9A               [ 1]  547     rim 
      000243 72 13 50 5F      [ 1]  548     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000247 20 34            [ 2]  549     jra write_exit
                                    550 ; write eeprom and option
      000249                        551 write_eeprom:
      000249 CD 01 15         [ 4]  552 	call unlock_eeprom
                                    553 	; check for data eeprom or option eeprom
      00024C 90 A3 48 00      [ 2]  554 	cpw y,#OPTION_BASE
      000250 2B 08            [ 1]  555 	jrmi 1$
      000252 90 A3 48 80      [ 2]  556 	cpw y,#OPTION_END+1
      000256 2A 02            [ 1]  557 	jrpl 1$
      000258 03 02            [ 1]  558 	cpl (OPT,sp)
      00025A                        559 1$: 
      00025A 0D 02            [ 1]  560     tnz (OPT,sp)
      00025C 27 08            [ 1]  561     jreq 2$
                                    562 	; pour modifier une option il faut modifier ces 2 bits
      00025E 72 1E 50 5B      [ 1]  563     bset FLASH_CR2,#FLASH_CR2_OPT
      000262 72 1F 50 5C      [ 1]  564     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000266                        565 2$: 
      000266 7B 01            [ 1]  566     ld a,(BTW,sp)
      000268 92 A7 00 16      [ 4]  567     ldf ([farptr],x),a
      00026C 0D 02            [ 1]  568     tnz (OPT,sp)
      00026E 27 08            [ 1]  569     jreq 3$
      000270 5C               [ 1]  570     incw x
      000271 7B 01            [ 1]  571     ld a,(BTW,sp)
      000273 43               [ 1]  572     cpl a
      000274 92 A7 00 16      [ 4]  573     ldf ([farptr],x),a
      000278 72 05 50 5F FB   [ 2]  574 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00027D                        575 write_exit:
      00027D                        576 	_drop VSIZE 
      00027D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027F 90 85            [ 2]  577 	popw y
      000281 81               [ 4]  578     ret
                                    579 
                                    580 ;--------------------------------------------
                                    581 ; write a data block to eeprom or flash 
                                    582 ; input:
                                    583 ;   Y        source address   
                                    584 ;   X        array index  destination  farptr[x]
                                    585 ;   BSIZE    block size bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    586 ;   farptr   write address , byte* 
                                    587 ; output:
                                    588 ;	X 		after last byte written 
                                    589 ;   Y 		after last byte read 
                                    590 ;  farptr   point after block
                                    591 ;---------------------------------------------
      000282                        592 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000282                        593 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    594 	; local var 
                           000001   595 	XSAVE=1 
                           000002   596 	VSIZE=2 
      000282                        597 write_block:
      000282                        598 	_vars VSIZE
      000282 52 02            [ 2]    1     sub sp,#VSIZE 
      000284 1F 01            [ 2]  599 	ldw (XSAVE,sp),x 
      000286 1E 05            [ 2]  600 	ldw x,(BSIZE,sp) 
      000288 27 13            [ 1]  601 	jreq 9$
      00028A 1E 01            [ 2]  602 1$:	ldw x,(XSAVE,sp)
      00028C 90 F6            [ 1]  603 	ld a,(y)
      00028E CD 02 0D         [ 4]  604 	call write_byte 
      000291 5C               [ 1]  605 	incw x 
      000292 90 5C            [ 1]  606 	incw y 
      000294 1F 01            [ 2]  607 	ldw (XSAVE,sp),x
      000296 1E 05            [ 2]  608 	ldw x,(BSIZE,sp)
      000298 5A               [ 2]  609 	decw x
      000299 1F 05            [ 2]  610 	ldw (BSIZE,sp),x 
      00029B 26 ED            [ 1]  611 	jrne 1$
      00029D                        612 9$:
      00029D 1E 01            [ 2]  613 	ldw x,(XSAVE,sp)
      00029F CD 14 2A         [ 4]  614 	call incr_farptr
      0002A2                        615 	_drop VSIZE
      0002A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002A4 81               [ 4]  616 	ret 
                                    617 
                                    618 
                                    619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    620 ;;   UART1 subroutines
                                    621 ;;   used for user interface 
                                    622 ;;   communication channel.
                                    623 ;;   settings: 
                                    624 ;;		115200 8N1 no flow control
                                    625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    626 
                                    627 ;--------------------------------
                                    628 ; initialize UART3, 115200 8N1 
                                    629 ;--------------------------------
      0002A5                        630 uart3_init: 
      0002A5 72 1A 50 11      [ 1]  631 	bset PD_DDR,#UART3_TX_PIN
      0002A9 72 1A 50 12      [ 1]  632 	bset PD_CR1,#UART3_TX_PIN 
      0002AD 72 1A 50 13      [ 1]  633 	bset PD_CR2,#UART3_TX_PIN 
      0002B1 72 16 50 C7      [ 1]  634 	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
      0002B5                        635 uart3_set_baud: 
                                    636 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    637 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002B5 A6 E1            [ 1]  638 	ld a,#CLK_SWR_HSI
      0002B7 C1 50 C3         [ 1]  639 	cp a,CLK_CMSR 
      0002BA 27 0A            [ 1]  640 	jreq 2$ 
      0002BC                        641 1$: ; 8 Mhz 	
      0002BC 35 05 52 43      [ 1]  642 	mov UART3_BRR2,#0x05 ; must be loaded first
      0002C0 35 04 52 42      [ 1]  643 	mov UART3_BRR1,#0x4
      0002C4 20 08            [ 2]  644 	jra 3$
      0002C6                        645 2$: ; 16 Mhz 	
      0002C6 35 0B 52 43      [ 1]  646 	mov UART3_BRR2,#0x0b ; must be loaded first
      0002CA 35 08 52 42      [ 1]  647 	mov UART3_BRR1,#0x08
      0002CE                        648 3$:
      0002CE 72 5F 52 41      [ 1]  649     clr UART3_DR
      0002D2 35 2C 52 45      [ 1]  650 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002D6 72 10 52 45      [ 1]  651 	bset UART3_CR2,#UART_CR2_SBK
      0002DA 72 0D 52 40 FB   [ 2]  652     btjf UART3_SR,#UART_SR_TC,.
      0002DF 72 5F 00 38      [ 1]  653 	clr rx3_tail 
      0002E3 72 5F 00 37      [ 1]  654 	clr rx3_head 
      0002E7 81               [ 4]  655 	ret 
                                    656 
                                    657 ;---------------------------------------------
                                    658 ; initialize UART1, 115200 8N1
                                    659 ; input:
                                    660 ;	none
                                    661 ; output:
                                    662 ;   none
                                    663 ;---------------------------------------------
      0002E8                        664 uart1_init:
      0002E8 72 1A 50 02      [ 1]  665     bset PA_DDR,#UART1_TX_PIN
      0002EC 72 1A 50 03      [ 1]  666     bset PA_CR1,#UART1_TX_PIN 
      0002F0 72 1A 50 04      [ 1]  667     bset PA_CR2,#UART1_TX_PIN 
                                    668 ; enable UART1 clock
      0002F4 72 14 50 C7      [ 1]  669 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0002F8                        670 uart1_set_baud: 
                                    671 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    672 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002F8 A6 E1            [ 1]  673 	ld a,#CLK_SWR_HSI
      0002FA C1 50 C3         [ 1]  674 	cp a,CLK_CMSR 
      0002FD 27 0A            [ 1]  675 	jreq 2$ 
      0002FF                        676 1$: ; 8 Mhz 	
      0002FF 35 05 52 33      [ 1]  677 	mov UART1_BRR2,#0x05 ; must be loaded first
      000303 35 04 52 32      [ 1]  678 	mov UART1_BRR1,#0x4
      000307 20 08            [ 2]  679 	jra 3$
      000309                        680 2$: ; 16 Mhz 	
      000309 35 0B 52 33      [ 1]  681 	mov UART1_BRR2,#0x0b ; must be loaded first
      00030D 35 08 52 32      [ 1]  682 	mov UART1_BRR1,#0x08
      000311                        683 3$:
      000311 72 5F 52 31      [ 1]  684     clr UART1_DR
      000315 35 2C 52 35      [ 1]  685 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000319 72 10 52 35      [ 1]  686 	bset UART1_CR2,#UART_CR2_SBK
      00031D 72 0D 52 30 FB   [ 2]  687     btjf UART1_SR,#UART_SR_TC,.
      000322 72 5F 00 2D      [ 1]  688     clr rx1_head 
      000326 72 5F 00 2E      [ 1]  689 	clr rx1_tail 
      00032A 81               [ 4]  690 	ret
                                    691 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    692 ;---------------------------------
                                    693 ; uart1_putc
                                    694 ; send a character via UART1
                                    695 ; input:
                                    696 ;    A  	character to send
                                    697 ;---------------------------------
      00032B                        698 putc:: ; console output always on UART1
      00032B                        699 uart1_putc:: 
      00032B 72 0F 52 30 FB   [ 2]  700 	btjf UART1_SR,#UART_SR_TXE,.
      000330 C7 52 31         [ 1]  701 	ld UART1_DR,a 
      000333 81               [ 4]  702 	ret 
                                    703 
                                    704 ;---------------------------------
                                    705 ; uart3_putc 
                                    706 ; send a character via UART3 
                                    707 ; input:
                                    708 ;    A  	character to send
                                    709 ;---------------------------------
      000334                        710 uart3_putc::
      000334 72 0F 52 40 FB   [ 2]  711 	btjf UART3_SR,#UART_SR_TXE,.
      000339 C7 52 41         [ 1]  712 	ld UART3_DR,a 
      00033C 81               [ 4]  713 	ret 
                                    714 
                                    715 ;---------------------------------
                                    716 ; Query for character in rx1_queue
                                    717 ; input:
                                    718 ;   none 
                                    719 ; output:
                                    720 ;   A     0 no charcter available
                                    721 ;   Z     1 no character available
                                    722 ;---------------------------------
      00033D                        723 qgetc::
      00033D                        724 uart1_qgetc::
      00033D C6 00 2D         [ 1]  725 	ld a,rx1_head 
      000340 C0 00 2E         [ 1]  726 	sub a,rx1_tail 
      000343 81               [ 4]  727 	ret 
                                    728 
      000344                        729 uart3_qgetc::
      000344 C6 00 37         [ 1]  730 	ld a,rx3_head 
      000347 C0 00 38         [ 1]  731 	sub a,rx3_tail 
      00034A 81               [ 4]  732 	ret 
                                    733 
                                    734 ;---------------------------------
                                    735 ; wait character from UART1 
                                    736 ; input:
                                    737 ;   none
                                    738 ; output:
                                    739 ;   A 			char  
                                    740 ;--------------------------------	
      00034B                        741 getc:: ;console input
      00034B                        742 uart1_getc::
      00034B CD 03 3D         [ 4]  743 	call uart1_qgetc
      00034E 27 FB            [ 1]  744 	jreq uart1_getc 
      000350 89               [ 2]  745 	pushw x 
      000351 AE 00 25         [ 2]  746 	ldw x,#rx1_queue
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000354 9F               [ 1]  747 	ld a,xl 
      000355 CB 00 2D         [ 1]  748 	add a,rx1_head 
      000358 97               [ 1]  749 	ld xl,a 
      000359 F6               [ 1]  750 	ld a,(x)
      00035A 85               [ 2]  751 	popw x
      00035B 88               [ 1]  752 	push a
      00035C 72 5C 00 2D      [ 1]  753 	inc rx1_head 
      000360 A6 07            [ 1]  754 	ld a,#RX_QUEUE_SIZE-1 
      000362 C4 00 2D         [ 1]  755 	and a,rx1_head 
      000365 C7 00 2D         [ 1]  756 	ld rx1_head,a 
      000368 84               [ 1]  757 	pop a  
      000369 81               [ 4]  758 	ret 
                                    759 
                                    760 ;----------------------------------
                                    761 ; wait character from UART3 
                                    762 ; output:
                                    763 ;   A       character received
                                    764 ;-----------------------------------
      00036A                        765 uart3_getc::
      00036A CD 03 44         [ 4]  766 	call uart3_qgetc
      00036D 27 FB            [ 1]  767 	jreq uart3_getc 
      00036F 89               [ 2]  768 	pushw x 
      000370 AE 00 2F         [ 2]  769 	ldw x,#rx3_queue
      000373 9F               [ 1]  770 	ld a,xl 
      000374 CB 00 37         [ 1]  771 	add a,rx3_head 
      000377 97               [ 1]  772 	ld xl,a 
      000378 F6               [ 1]  773 	ld a,(x)
      000379 85               [ 2]  774 	popw x
      00037A 88               [ 1]  775 	push a
      00037B 72 5C 00 37      [ 1]  776 	inc rx3_head 
      00037F A6 07            [ 1]  777 	ld a,#RX_QUEUE_SIZE-1 
      000381 C4 00 37         [ 1]  778 	and a,rx3_head 
      000384 C7 00 37         [ 1]  779 	ld rx3_head,a 
      000387 84               [ 1]  780 	pop a  
      000388 81               [ 4]  781 	ret 
                                    782 
                                    783 
                                    784 ;----------------------
                                    785 ; print token id && value
                                    786 ; input:
                                    787 ;   A     token id 
                                    788 ;   X     token value 
                                    789 ;---------------------
                           000001   790 	BSAVE=1
                           000002   791 	AREG=2
                           000003   792 	XREG=3
                           000004   793 	VSIZE=4
      000389                        794 prt_tok:
      000389                        795 	_vars VSIZE 
      000389 52 04            [ 2]    1     sub sp,#VSIZE 
      00038B 6B 02            [ 1]  796 	ld (AREG,sp),a 
      00038D 1F 03            [ 2]  797 	ldw (XREG,sp),x 
      00038F C6 00 0A         [ 1]  798 	ld a, base
      000392 6B 01            [ 1]  799 	ld (BSAVE,sp),a 
      000394 35 10 00 0A      [ 1]  800 	mov base,#16  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000398 AE 03 C0         [ 2]  801 	ldw x,#token_msg
      00039B CD 00 00         [ 4]  802 	call puts 
      00039E 5F               [ 1]  803 	clrw x 
      00039F 7B 02            [ 1]  804 	ld a,(AREG,sp)
      0003A1 97               [ 1]  805 	ld xl,a 
      0003A2 CD 09 0E         [ 4]  806 	call print_int 
      0003A5 A6 20            [ 1]  807 	ld a,#SPACE
      0003A7 CD 03 2B         [ 4]  808 	call putc 
      0003AA 1E 03            [ 2]  809 	ldw x,(XREG,sp)
      0003AC CD 09 0E         [ 4]  810 	call print_int 
      0003AF A6 0D            [ 1]  811 	ld a,#CR 
      0003B1 CD 03 2B         [ 4]  812 	call putc 
      0003B4 7B 01            [ 1]  813 	ld a,(BSAVE,sp)
      0003B6 C7 00 0A         [ 1]  814 	ld base,a 
      0003B9 7B 02            [ 1]  815 	ld a,(AREG,sp)
      0003BB 1E 03            [ 2]  816 	ldw x,(XREG,sp)
      0003BD                        817 	_drop VSIZE 
      0003BD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0003BF 81               [ 4]  818 	ret 
      0003C0 74 6F 6B 65 6E 3A 20   819 token_msg: .asciz "token: "
             00
                                    820 
                                    821 
                                    822 ;---------------------
                                    823 ; display n bytes row 
                                    824 ; from memory.
                                    825 ; input:
                                    826 ;   A   bytes to print 
                                    827 ;	X   start address 
                                    828 ; output:
                                    829 ;   X   address after last shown  
                                    830 ;---------------------
                           000001   831 	CNT=1 
                           000002   832 	ADR=2 
                           000003   833 	VSIZE=3 
      0003C8                        834 show_row:
      0003C8 4D               [ 1]  835 	tnz a 
      0003C9 26 01            [ 1]  836 	jrne 1$
      0003CB 81               [ 4]  837 	ret 
      0003CC                        838 1$:	
      0003CC 89               [ 2]  839 	pushw x  
      0003CD 88               [ 1]  840 	push a 
      0003CE 35 04 00 24      [ 1]  841 	mov tab_width,#4 
      0003D2 CD 09 0E         [ 4]  842 	call print_int 
      0003D5 A6 20            [ 1]  843 	ld a,#SPACE  
      0003D7 CD 03 2B         [ 4]  844 	call putc
      0003DA                        845 row_loop:
      0003DA 1E 02            [ 2]  846 	ldw x,(ADR,sp)
      0003DC F6               [ 1]  847 	ld a,(x)
      0003DD 5F               [ 1]  848 	clrw x 
      0003DE 97               [ 1]  849 	ld xl,a 
      0003DF CD 09 0E         [ 4]  850 	call print_int 
      0003E2 1E 02            [ 2]  851 	ldw x,(ADR,sp)
      0003E4 5C               [ 1]  852 	incw x 
      0003E5 1F 02            [ 2]  853 	ldw (ADR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003E7 0A 01            [ 1]  854 	dec (CNT,sp)
      0003E9 26 EF            [ 1]  855 	jrne row_loop
      0003EB                        856 	_drop VSIZE  		
      0003EB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0003ED 35 04 00 24      [ 1]  857 	mov tab_width,#4
      0003F1 A6 0D            [ 1]  858 	ld a,#CR 
      0003F3 CD 03 2B         [ 4]  859 	call putc 
      0003F6 81               [ 4]  860 	ret 
                                    861 
                                    862 ;--------------------------
                                    863 ; print memory content 
                                    864 ; in hexadecimal format
                                    865 ;  input:
                                    866 ;    X    start address 
                                    867 ;    Y    count 
                                    868 ;--------------------------
                           000001   869 	BCNT=1
                           000003   870 	BASE=3
                           000004   871 	TABW=4
                           000004   872 	VSIZE=4   
      0003F7                        873 hex_dump:
      0003F7                        874 	_vars VSIZE
      0003F7 52 04            [ 2]    1     sub sp,#VSIZE 
      0003F9 C6 00 0A         [ 1]  875 	ld a,base
      0003FC 6B 03            [ 1]  876 	ld (BASE,sp),a 
      0003FE 35 10 00 0A      [ 1]  877 	mov base,#16
      000402 C6 00 24         [ 1]  878 	ld a,tab_width 
      000405 6B 04            [ 1]  879 	ld (TABW,sp),a
      000407 A6 0D            [ 1]  880 	ld a,#CR 
      000409 CD 03 2B         [ 4]  881 	call putc 
      00040C 17 01            [ 2]  882 1$: ldw (BCNT,sp),y
      00040E A6 10            [ 1]  883 	ld a,#16
      000410 90 A3 00 10      [ 2]  884 	cpw y,#16
      000414 2A 02            [ 1]  885 	jrpl 2$
      000416 90 9F            [ 1]  886 	ld a,yl
      000418                        887 2$: 	
      000418 CD 03 C8         [ 4]  888 	call show_row 
      00041B 16 01            [ 2]  889 	ldw y,(BCNT,sp) 
      00041D 72 A2 00 10      [ 2]  890 	subw y,#16 
      000421 90 A3 00 01      [ 2]  891 	cpw y,#1
      000425 2A E5            [ 1]  892 	jrpl 1$
      000427 7B 03            [ 1]  893 	ld a,(BASE,sp)
      000429 C7 00 0A         [ 1]  894 	ld base,a
      00042C 7B 04            [ 1]  895 	ld a,(TABW,sp)
      00042E C7 00 24         [ 1]  896 	ld tab_width,a 
      000431                        897 	_drop VSIZE
      000431 5B 04            [ 2]    1     addw sp,#VSIZE 
      000433 81               [ 4]  898 	ret 
                                    899 
                                    900 ;-------------------------------------
                                    901 ; retrun string length
                                    902 ; input:
                                    903 ;   X         .asciz  pointer 
                                    904 ; output:
                                    905 ;   X         not affected 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    906 ;   A         length 
                                    907 ;-------------------------------------
      000434                        908 strlen::
      000434 89               [ 2]  909 	pushw x 
      000435 4F               [ 1]  910 	clr a
      000436 7D               [ 1]  911 1$:	tnz (x) 
      000437 27 04            [ 1]  912 	jreq 9$ 
      000439 4C               [ 1]  913 	inc a 
      00043A 5C               [ 1]  914 	incw x 
      00043B 20 F9            [ 2]  915 	jra 1$ 
      00043D 85               [ 2]  916 9$:	popw x 
      00043E 81               [ 4]  917 	ret 
                                    918 
                                    919 ;------------------------------------
                                    920 ; compare 2 strings
                                    921 ; input:
                                    922 ;   X 		char* first string 
                                    923 ;   Y       char* second string 
                                    924 ; output:
                                    925 ;   A 		0|1 
                                    926 ;-------------------------------------
      00043F                        927 strcmp:
      00043F F6               [ 1]  928 	ld a,(x)
      000440 27 0B            [ 1]  929 	jreq 5$ 
      000442 90 F1            [ 1]  930 	cp a,(y) 
      000444 26 05            [ 1]  931 	jrne 4$ 
      000446 5C               [ 1]  932 	incw x 
      000447 90 5C            [ 1]  933 	incw y 
      000449 20 F4            [ 2]  934 	jra strcmp 
      00044B                        935 4$: ; not same  
      00044B 4F               [ 1]  936 	clr a 
      00044C 81               [ 4]  937 	ret 
      00044D                        938 5$: ; same 
      00044D A6 01            [ 1]  939 	ld a,#1 
      00044F 81               [ 4]  940 	ret 
                                    941 
                                    942 
                                    943 ;---------------------------------------
                                    944 ;  copy src to dest 
                                    945 ; input:
                                    946 ;   X 		dest 
                                    947 ;   Y 		src 
                                    948 ; output: 
                                    949 ;   X 		dest 
                                    950 ;----------------------------------
      000450                        951 strcpy::
      000450 89               [ 2]  952 	pushw x 
      000451 90 F6            [ 1]  953 1$: ld a,(y)
      000453 27 06            [ 1]  954 	jreq 9$ 
      000455 F7               [ 1]  955 	ld (x),a 
      000456 5C               [ 1]  956 	incw x 
      000457 90 5C            [ 1]  957 	incw y 
      000459 20 F6            [ 2]  958 	jra 1$ 
      00045B 7F               [ 1]  959 9$:	clr (x)
      00045C 85               [ 2]  960 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00045D 81               [ 4]  961 	ret 
                                    962 
                                    963 ;---------------------------------------
                                    964 ; move memory block 
                                    965 ; input:
                                    966 ;   X 		destination 
                                    967 ;   Y 	    source 
                                    968 ;   acc16	bytes count 
                                    969 ; output:
                                    970 ;   none 
                                    971 ;--------------------------------------
                           000001   972 	INCR=1 ; increament high byte 
                           000002   973 	LB=2 ; increament low byte 
                           000002   974 	VSIZE=2
      00045E                        975 move::
      00045E                        976 	_vars VSIZE 
      00045E 52 02            [ 2]    1     sub sp,#VSIZE 
      000460 0F 01            [ 1]  977 	clr (INCR,sp)
      000462 0F 02            [ 1]  978 	clr (LB,sp)
      000464 90 89            [ 2]  979 	pushw y 
      000466 13 01            [ 2]  980 	cpw x,(1,sp) ; compare DEST to SRC 
      000468 90 85            [ 2]  981 	popw y 
      00046A 27 31            [ 1]  982 	jreq move_exit ; x==y 
      00046C 2B 0E            [ 1]  983 	jrmi move_down
      00046E                        984 move_up: ; start from top address with incr=-1
      00046E 72 BB 00 0C      [ 2]  985 	addw x,acc16
      000472 72 B9 00 0C      [ 2]  986 	addw y,acc16
      000476 03 01            [ 1]  987 	cpl (INCR,sp)
      000478 03 02            [ 1]  988 	cpl (LB,sp)   ; increment = -1 
      00047A 20 05            [ 2]  989 	jra move_loop  
      00047C                        990 move_down: ; start from bottom address with incr=1 
      00047C 5A               [ 2]  991     decw x 
      00047D 90 5A            [ 2]  992 	decw y
      00047F 0C 02            [ 1]  993 	inc (LB,sp) ; incr=1 
      000481                        994 move_loop:	
      000481 C6 00 0C         [ 1]  995     ld a, acc16 
      000484 CA 00 0D         [ 1]  996 	or a, acc8
      000487 27 14            [ 1]  997 	jreq move_exit 
      000489 72 FB 01         [ 2]  998 	addw x,(INCR,sp)
      00048C 72 F9 01         [ 2]  999 	addw y,(INCR,sp) 
      00048F 90 F6            [ 1] 1000 	ld a,(y)
      000491 F7               [ 1] 1001 	ld (x),a 
      000492 89               [ 2] 1002 	pushw x 
      000493 CE 00 0C         [ 2] 1003 	ldw x,acc16 
      000496 5A               [ 2] 1004 	decw x 
      000497 CF 00 0C         [ 2] 1005 	ldw acc16,x 
      00049A 85               [ 2] 1006 	popw x 
      00049B 20 E4            [ 2] 1007 	jra move_loop
      00049D                       1008 move_exit:
      00049D                       1009 	_drop VSIZE
      00049D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00049F 81               [ 4] 1010 	ret 	
                                   1011 
                                   1012 ;------------------------------------
                                   1013 ;  set all variables to zero 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1014 ; input:
                                   1015 ;   none 
                                   1016 ; output:
                                   1017 ;	none
                                   1018 ;------------------------------------
      0004A0                       1019 clear_vars:
      0004A0 AE 00 39         [ 2] 1020 	ldw x,#vars 
      0004A3 90 AE 00 34      [ 2] 1021 	ldw y,#2*26 
      0004A7 7F               [ 1] 1022 1$:	clr (x)
      0004A8 5C               [ 1] 1023 	incw x 
      0004A9 90 5A            [ 2] 1024 	decw y 
      0004AB 26 FA            [ 1] 1025 	jrne 1$
      0004AD 81               [ 4] 1026 	ret 
                                   1027 
                                   1028 ;-------------------------------------
                                   1029 ; check if A is a letter 
                                   1030 ; input:
                                   1031 ;   A 			character to test 
                                   1032 ; output:
                                   1033 ;   C flag      1 true, 0 false 
                                   1034 ;-------------------------------------
      0004AE                       1035 is_alpha::
      0004AE A1 41            [ 1] 1036 	cp a,#'A 
      0004B0 8C               [ 1] 1037 	ccf 
      0004B1 24 0B            [ 1] 1038 	jrnc 9$ 
      0004B3 A1 5B            [ 1] 1039 	cp a,#'Z+1 
      0004B5 25 07            [ 1] 1040 	jrc 9$ 
      0004B7 A1 61            [ 1] 1041 	cp a,#'a 
      0004B9 8C               [ 1] 1042 	ccf 
      0004BA 24 02            [ 1] 1043 	jrnc 9$
      0004BC A1 7B            [ 1] 1044 	cp a,#'z+1
      0004BE 81               [ 4] 1045 9$: ret 	
                                   1046 
                                   1047 ;------------------------------------
                                   1048 ; check if character in {'0'..'9'}
                                   1049 ; input:
                                   1050 ;    A  character to test
                                   1051 ; output:
                                   1052 ;    Carry  0 not digit | 1 digit
                                   1053 ;------------------------------------
      0004BF                       1054 is_digit::
      0004BF A1 30            [ 1] 1055 	cp a,#'0
      0004C1 25 03            [ 1] 1056 	jrc 1$
      0004C3 A1 3A            [ 1] 1057     cp a,#'9+1
      0004C5 8C               [ 1] 1058 	ccf 
      0004C6 8C               [ 1] 1059 1$:	ccf 
      0004C7 81               [ 4] 1060     ret
                                   1061 
                                   1062 ;-------------------------------------
                                   1063 ; return true if character in  A 
                                   1064 ; is letter or digit.
                                   1065 ; input:
                                   1066 ;   A     ASCII character 
                                   1067 ; output:
                                   1068 ;   A     no change 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1069 ;   Carry    0 false| 1 true 
                                   1070 ;--------------------------------------
      0004C8                       1071 is_alnum::
      0004C8 CD 04 BF         [ 4] 1072 	call is_digit
      0004CB 25 03            [ 1] 1073 	jrc 1$ 
      0004CD CD 04 AE         [ 4] 1074 	call is_alpha
      0004D0 81               [ 4] 1075 1$:	ret 
                                   1076 
                                   1077 
                                   1078 ;-------------------------------------
                                   1079 ;  program initialization entry point 
                                   1080 ;-------------------------------------
                           000001  1081 	MAJOR=1
                           000000  1082 	MINOR=0
      0004D1 0A 0A 54 69 6E 79 20  1083 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000517                       1084 cold_start:
                                   1085 ;set stack 
      000517 AE 17 FF         [ 2] 1086 	ldw x,#STACK_EMPTY
      00051A 94               [ 1] 1087 	ldw sp,x   
                                   1088 ; clear all ram 
      00051B 7F               [ 1] 1089 0$: clr (x)
      00051C 5A               [ 2] 1090 	decw x 
      00051D 26 FC            [ 1] 1091 	jrne 0$
                                   1092 ; activate pull up on all inputs 
      00051F A6 FF            [ 1] 1093 	ld a,#255 
      000521 C7 50 03         [ 1] 1094 	ld PA_CR1,a 
      000524 C7 50 08         [ 1] 1095 	ld PB_CR1,a 
      000527 C7 50 0D         [ 1] 1096 	ld PC_CR1,a 
      00052A C7 50 12         [ 1] 1097 	ld PD_CR1,a 
      00052D C7 50 17         [ 1] 1098 	ld PE_CR1,a 
      000530 C7 50 1C         [ 1] 1099 	ld PF_CR1,a 
      000533 C7 50 21         [ 1] 1100 	ld PG_CR1,a 
      000536 C7 50 2B         [ 1] 1101 	ld PI_CR1,a
                                   1102 ; set LD2 pin as output 
      000539 72 1A 50 0D      [ 1] 1103     bset PC_CR1,#LED2_BIT
      00053D 72 1A 50 0E      [ 1] 1104     bset PC_CR2,#LED2_BIT
      000541 72 1A 50 0C      [ 1] 1105     bset PC_DDR,#LED2_BIT
      000545 72 1B 50 0A      [ 1] 1106 	bres PC_ODR,#LED2_BIT 
                                   1107 ; disable schmitt triggers on Arduino CN4 analog inputs
      000549 55 00 3F 54 07   [ 1] 1108 	mov ADC_TDRL,0x3f
                                   1109 ; disable peripherals clocks
                                   1110 ;	clr CLK_PCKENR1 
                                   1111 ;	clr CLK_PCKENR2
      00054E 72 5F 50 F2      [ 1] 1112 	clr AWU_TBR 
      000552 72 14 50 CA      [ 1] 1113 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1114 ; select internal clock no divisor: 16 Mhz 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000556 A6 E1            [ 1] 1115 	ld a,#CLK_SWR_HSI 
      000558 5F               [ 1] 1116 	clrw x  
      000559 CD 00 DD         [ 4] 1117     call clock_init 
      00055C CD 01 00         [ 4] 1118 	call timer4_init
      00055F CD 00 F3         [ 4] 1119 	call timer2_init
                                   1120 ; UART1 at 115200 BAUD
      000562 CD 02 E8         [ 4] 1121 	call uart1_init
                                   1122 ; UART3 at 115200 BAUD 
      000565 CD 02 A5         [ 4] 1123 	call uart3_init	
                                   1124 ; activate PE_4 (user button interrupt)
      000568 72 18 50 18      [ 1] 1125     bset PE_CR2,#USR_BTN_BIT 
                                   1126 ; display system information
      00056C AE 04 D1         [ 2] 1127 	ldw x,#software 
      00056F CD 00 00         [ 4] 1128 	call puts 
      000572 A6 01            [ 1] 1129 	ld a,#MAJOR 
      000574 C7 00 0D         [ 1] 1130 	ld acc8,a 
      000577 5F               [ 1] 1131 	clrw x 
      000578 CF 00 0B         [ 2] 1132 	ldw acc24,x
      00057B 72 5F 00 24      [ 1] 1133 	clr tab_width  
      00057F 35 0A 00 0A      [ 1] 1134 	mov base, #10 
      000583 CD 09 1E         [ 4] 1135 	call prti24 
      000586 A6 2E            [ 1] 1136 	ld a,#'.
      000588 CD 03 2B         [ 4] 1137 	call putc 
      00058B A6 00            [ 1] 1138 	ld a,#MINOR 
      00058D C7 00 0D         [ 1] 1139 	ld acc8,a 
      000590 5F               [ 1] 1140 	clrw x 
      000591 CF 00 0B         [ 2] 1141 	ldw acc24,x 
      000594 CD 09 1E         [ 4] 1142 	call prti24
      000597 A6 0D            [ 1] 1143 	ld a,#CR 
      000599 CD 03 2B         [ 4] 1144 	call putc
      00059C CD 14 38         [ 4] 1145 	call seek_fdrive 
      00059F 9A               [ 1] 1146 	rim 
      0005A0 72 5C 00 15      [ 1] 1147 	inc seedy+1 
      0005A4 72 5C 00 13      [ 1] 1148 	inc seedx+1 
      0005A8 CD 06 25         [ 4] 1149 	call clear_basic
      0005AB CD 0E 5B         [ 4] 1150 	call ubound 
      0005AE CD 12 86         [ 4] 1151 	call beep_1khz  
      0005B1                       1152 2$:	
      0005B1 CD 05 BA         [ 4] 1153 	call warm_init
      0005B4 CD 05 E7         [ 4] 1154 	call load_autorun
      0005B7 CC 08 45         [ 2] 1155     jp cmd_line  
                                   1156 
      0005BA                       1157 warm_init:
      0005BA 72 5F 00 23      [ 1] 1158 	clr flags 
      0005BE 72 5F 00 20      [ 1] 1159 	clr loop_depth 
      0005C2 35 04 00 24      [ 1] 1160 	mov tab_width,#TAB_WIDTH 
      0005C6 35 0A 00 0A      [ 1] 1161 	mov base,#10 
      0005CA AE 00 00         [ 2] 1162 	ldw x,#0 
      0005CD CF 00 04         [ 2] 1163 	ldw basicptr,x 
      0005D0 CF 00 00         [ 2] 1164 	ldw in.w,x 
      0005D3 72 5F 00 03      [ 1] 1165 	clr count
      0005D7 81               [ 4] 1166 	ret 
                                   1167 
                                   1168 ;--------------------------
                                   1169 ; called by tb_error when
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1170 ; flag FAUTORUN is set.
                                   1171 ; There is a bug in autorun 
                                   1172 ; program so cancel it.
                                   1173 ;---------------------------
      0005D8                       1174 cancel_autorun:
      0005D8 AE 40 00         [ 2] 1175 	ldw x,#AUTORUN_NAME 
      0005DB CF 00 17         [ 2] 1176 	ldw farptr+1,x 
      0005DE 4F               [ 1] 1177 	clr a
      0005DF 5F               [ 1] 1178 	clrw x  
      0005E0 C7 00 16         [ 1] 1179 	ld farptr,a 
      0005E3 CD 02 0D         [ 4] 1180 	call write_byte 
      0005E6 81               [ 4] 1181 	ret 
                                   1182 
                                   1183 
                                   1184 ;--------------------------
                                   1185 ; if autorun file defined 
                                   1186 ; in eeprom address AUTORUN_NAME 
                                   1187 ; load and run it.
                                   1188 ;-------------------------
      0005E7                       1189 load_autorun:
      0005E7 90 AE 40 00      [ 2] 1190 	ldw y,#AUTORUN_NAME
      0005EB 90 F6            [ 1] 1191 	ld a,(y)
      0005ED 27 20            [ 1] 1192 	jreq 9$
      0005EF CD 14 9E         [ 4] 1193 	call search_file
      0005F2 25 05            [ 1] 1194 	jrc 2$ 
                                   1195 ; if file doesn't exit
      0005F4 CD 05 D8         [ 4] 1196 	call cancel_autorun
      0005F7 20 16            [ 2] 1197 	jra 9$ 
      0005F9 CD 15 B9         [ 4] 1198 2$:	call load_file
      0005FC AE 40 00         [ 2] 1199 	ldw x,#AUTORUN_NAME 
      0005FF CD 00 00         [ 4] 1200 	call puts
      000602 AE 06 10         [ 2] 1201 	ldw x,#autorun_msg 
      000605 CD 00 00         [ 4] 1202 	call puts 
      000608 72 1C 00 23      [ 1] 1203 	bset flags,#FAUTORUN 
      00060C CC 12 58         [ 2] 1204 	jp run_it    
      00060F 81               [ 4] 1205 9$: ret 	
                                   1206 
      000610 20 6C 6F 61 64 65 64  1207 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1208 ;---------------------------
                                   1209 ; reset BASIC text variables 
                                   1210 ; and clear variables 
                                   1211 ;---------------------------
      000625                       1212 clear_basic:
      000625 72 5F 00 03      [ 1] 1213 	clr count
      000629 72 5F 00 01      [ 1] 1214 	clr in  
      00062D AE 00 6D         [ 2] 1215 	ldw x,#free_ram 
      000630 CF 00 1C         [ 2] 1216 	ldw txtbgn,x 
      000633 CF 00 1E         [ 2] 1217 	ldw txtend,x 
      000636 CD 04 A0         [ 4] 1218 	call clear_vars 
      000639 81               [ 4] 1219 	ret 
                                   1220 
                                   1221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1222 ;;   Tiny BASIC error messages     ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063A                       1224 err_msg:
      00063A 00 00 06 5A 06 67 06  1225 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             75 06 8E 06 9D
      000646 06 B3 06 C9 06 E3 06  1226 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             F4 07 05
      000650 07 11 07 44 07 54 07  1227 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             68 07 7B
                                   1228 
      00065A 4D 65 6D 6F 72 79 20  1229 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000667 73 79 6E 74 61 78 20  1230 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000675 6D 61 74 68 20 6F 70  1231 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00068E 64 69 76 69 73 69 6F  1232 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00069D 69 6E 76 61 6C 69 64  1233 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      0006B3 72 75 6E 20 74 69 6D  1234 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0006C9 63 6F 6D 6D 61 6E 64  1235 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0006E3 64 75 70 6C 69 63 61  1236 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0006F4 46 69 6C 65 20 6E 6F  1237 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000705 62 61 64 20 76 61 6C  1238 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      000711 46 69 6C 65 20 69 6E  1239 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000744 4E 6F 20 64 61 74 61  1240 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000754 4E 6F 20 70 72 6F 67  1241 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000768 46 69 6C 65 20 73 79  1242 err_no_fspace: .asciz "File system full.\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      00077B 42 75 66 66 65 72 20  1243 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1244 
      000788 0A 72 75 6E 20 74 69  1245 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      00079A 0A 63 6F 6D 70 69 6C  1246 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0007AB 6C 61 73 74 20 74 6F  1247 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1248 
      0007BB                       1249 syntax_error::
      0007BB A6 02            [ 1] 1250 	ld a,#ERR_SYNTAX 
                                   1251 
      0007BD                       1252 tb_error::
      0007BD 72 0A 00 23 47   [ 2] 1253 	btjt flags,#FCOMP,1$
      0007C2 88               [ 1] 1254 	push a 
      0007C3 AE 07 88         [ 2] 1255 	ldw x, #rt_msg 
      0007C6 CD 00 00         [ 4] 1256 	call puts 
      0007C9 84               [ 1] 1257 	pop a 
      0007CA AE 06 3A         [ 2] 1258 	ldw x, #err_msg 
      0007CD 72 5F 00 0C      [ 1] 1259 	clr acc16 
      0007D1 48               [ 1] 1260 	sll a
      0007D2 72 59 00 0C      [ 1] 1261 	rlc acc16  
      0007D6 C7 00 0D         [ 1] 1262 	ld acc8, a 
      0007D9 72 BB 00 0C      [ 2] 1263 	addw x,acc16 
      0007DD FE               [ 2] 1264 	ldw x,(x)
      0007DE CD 00 00         [ 4] 1265 	call puts
      0007E1 CE 00 04         [ 2] 1266 	ldw x,basicptr
      0007E4 C6 00 01         [ 1] 1267 	ld a,in 
      0007E7 CD 0F 24         [ 4] 1268 	call prt_basic_line
      0007EA AE 07 AB         [ 2] 1269 	ldw x,#tk_id 
      0007ED CD 00 00         [ 4] 1270 	call puts 
      0007F0 C6 00 02         [ 1] 1271 	ld a,in.saved 
      0007F3 5F               [ 1] 1272 	clrw x 
      0007F4 97               [ 1] 1273 	ld xl,a 
      0007F5 72 BB 00 04      [ 2] 1274 	addw x,basicptr 
      0007F9 F6               [ 1] 1275 	ld a,(x)
      0007FA 5F               [ 1] 1276 	clrw x 
      0007FB 97               [ 1] 1277 	ld xl,a 
      0007FC CD 09 0E         [ 4] 1278 	call print_int
      0007FF 72 0D 00 23 3A   [ 2] 1279 	btjf flags,#FAUTORUN ,6$
      000804 CD 05 D8         [ 4] 1280 	call cancel_autorun  
      000807 20 35            [ 2] 1281 	jra 6$
      000809                       1282 1$:	
      000809 88               [ 1] 1283 	push a 
      00080A AE 07 9A         [ 2] 1284 	ldw x,#comp_msg
      00080D CD 00 00         [ 4] 1285 	call puts 
      000810 84               [ 1] 1286 	pop a 
      000811 AE 06 3A         [ 2] 1287 	ldw x, #err_msg 
      000814 72 5F 00 0C      [ 1] 1288 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000818 48               [ 1] 1289 	sll a
      000819 72 59 00 0C      [ 1] 1290 	rlc acc16  
      00081D C7 00 0D         [ 1] 1291 	ld acc8, a 
      000820 72 BB 00 0C      [ 2] 1292 	addw x,acc16 
      000824 FE               [ 2] 1293 	ldw x,(x)
      000825 CD 00 00         [ 4] 1294 	call puts
      000828 AE 16 90         [ 2] 1295 	ldw x,#tib
      00082B CD 00 00         [ 4] 1296 	call puts 
      00082E A6 0D            [ 1] 1297 	ld a,#CR 
      000830 CD 03 2B         [ 4] 1298 	call putc
      000833 CE 00 00         [ 2] 1299 	ldw x,in.w
      000836 CD 00 00         [ 4] 1300 	call spaces
      000839 A6 5E            [ 1] 1301 	ld a,#'^
      00083B CD 03 2B         [ 4] 1302 	call putc 
      00083E AE 17 FF         [ 2] 1303 6$: ldw x,#STACK_EMPTY 
      000841 94               [ 1] 1304     ldw sp,x
      000842                       1305 warm_start:
      000842 CD 05 BA         [ 4] 1306 	call warm_init
                                   1307 ;----------------------------
                                   1308 ;   BASIC interpreter
                                   1309 ;----------------------------
      000845                       1310 cmd_line: ; user interface 
      000845 A6 0D            [ 1] 1311 	ld a,#CR 
      000847 CD 03 2B         [ 4] 1312 	call putc 
      00084A A6 3E            [ 1] 1313 	ld a,#'> 
      00084C CD 03 2B         [ 4] 1314 	call putc
      00084F CD 00 00         [ 4] 1315 	call readln
      000852 72 5D 00 03      [ 1] 1316 	tnz count 
      000856 27 ED            [ 1] 1317 	jreq cmd_line
      000858 CD 00 00         [ 4] 1318 	call compile
                                   1319 ; if text begin with a line number
                                   1320 ; the compiler set count to zero    
                                   1321 ; so code is not interpreted
      00085B 72 5D 00 03      [ 1] 1322 	tnz count 
      00085F 27 E4            [ 1] 1323 	jreq cmd_line
                                   1324 
                                   1325 ; if direct command 
                                   1326 ; it's ready to interpret 
                                   1327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1328 ;; This is the interpreter loop
                                   1329 ;; for each BASIC code line. 
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      000861                       1331 interpreter: 
      000861 C6 00 01         [ 1] 1332 	ld a,in 
      000864 C1 00 03         [ 1] 1333 	cp a,count 
      000867 2B 1D            [ 1] 1334 	jrmi interp_loop
      000869                       1335 next_line:
      000869 72 01 00 23 D7   [ 2] 1336 	btjf flags, #FRUN, cmd_line
      00086E CE 00 04         [ 2] 1337 	ldw x,basicptr
      000871 72 BB 00 00      [ 2] 1338 	addw x,in.w 
      000875 C3 00 1E         [ 2] 1339 	cpw x,txtend 
      000878 2A C8            [ 1] 1340 	jrpl warm_start
      00087A CF 00 04         [ 2] 1341 	ldw basicptr,x ; start of next line  
      00087D E6 02            [ 1] 1342 	ld a,(2,x)
      00087F C7 00 03         [ 1] 1343 	ld count,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000882 35 03 00 01      [ 1] 1344 	mov in,#3 ; skip first 3 bytes of line 
      000886                       1345 interp_loop: 
      000886 CD 08 AD         [ 4] 1346 	call next_token
      000889 A1 00            [ 1] 1347 	cp a,#TK_NONE 
      00088B 27 DC            [ 1] 1348 	jreq next_line 
      00088D A1 80            [ 1] 1349 	cp a,#TK_CMD
      00088F 26 03            [ 1] 1350 	jrne 1$
      000891 FD               [ 4] 1351 	call (x) 
      000892 20 F2            [ 2] 1352 	jra interp_loop 
      000894                       1353 1$:	 
      000894 A1 85            [ 1] 1354 	cp a,#TK_VAR
      000896 26 05            [ 1] 1355 	jrne 2$
      000898 CD 0E 8E         [ 4] 1356 	call let_var  
      00089B 20 E9            [ 2] 1357 	jra interp_loop 
      00089D                       1358 2$:	
      00089D A1 06            [ 1] 1359 	cp a,#TK_ARRAY 
      00089F 26 05            [ 1] 1360 	jrne 3$
      0008A1 CD 0E 8B         [ 4] 1361 	call let_array 
      0008A4 20 E0            [ 2] 1362 	jra interp_loop
      0008A6                       1363 3$:	
      0008A6 A1 01            [ 1] 1364 	cp a,#TK_COLON 
      0008A8 27 DC            [ 1] 1365 	jreq interp_loop 
      0008AA CC 07 BB         [ 2] 1366 	jp syntax_error 
                                   1367 
                                   1368 		
                                   1369 ;--------------------------
                                   1370 ; extract next token from
                                   1371 ; token list 
                                   1372 ; basicptr -> base address 
                                   1373 ; in  -> offset in list array 
                                   1374 ; output:
                                   1375 ;   A 		token attribute
                                   1376 ;   X 		token value if there is one
                                   1377 ;----------------------------------------
      0008AD                       1378 next_token::
      0008AD 5F               [ 1] 1379 	clrw x 
      0008AE C6 00 01         [ 1] 1380 	ld a,in 
      0008B1 C0 00 03         [ 1] 1381 	sub a,count ; don't replace sub by cp!  
      0008B4 2B 01            [ 1] 1382 	jrmi 0$
      0008B6 81               [ 4] 1383 	ret  ; end of BASIC line 
      0008B7                       1384 0$: 
      0008B7 55 00 01 00 02   [ 1] 1385 	mov in.saved,in 
      0008BC 90 CE 00 04      [ 2] 1386 	ldw y,basicptr 
      0008C0 91 D6 00         [ 4] 1387 	ld a,([in.w],y)
      0008C3 72 5C 00 01      [ 1] 1388 	inc in  
      0008C7 4D               [ 1] 1389 	tnz a 
      0008C8 2B 2A            [ 1] 1390 	jrmi 6$
      0008CA A1 06            [ 1] 1391 	cp a,#TK_ARRAY
      0008CC 2A 3F            [ 1] 1392 	jrpl 9$  ; no attribute for these
      0008CE A1 01            [ 1] 1393 	cp a,#TK_COLON
      0008D0 27 3B            [ 1] 1394 	jreq 9$  
      0008D2                       1395 1$: ; 
      0008D2 A1 03            [ 1] 1396 	cp a,#TK_CHAR
      0008D4 26 0A            [ 1] 1397 	jrne 2$
      0008D6 41               [ 1] 1398 	exg a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008D7 91 D6 00         [ 4] 1399 	ld a,([in.w],y)
      0008DA 72 5C 00 01      [ 1] 1400 	inc in 
      0008DE 41               [ 1] 1401 	exg a,xl  
      0008DF 81               [ 4] 1402 	ret
      0008E0 A1 02            [ 1] 1403 2$:	cp a,#TK_QSTR 
      0008E2 26 29            [ 1] 1404 	jrne 9$
      0008E4 93               [ 1] 1405 	ldw x,y 
      0008E5 72 BB 00 00      [ 2] 1406 	addw x,in.w ; pointer to string 
                                   1407 ; move pointer after string 
      0008E9 91 6D 00         [ 4] 1408 3$:	tnz ([in.w],y)
      0008EC 27 1B            [ 1] 1409 	jreq 8$
      0008EE 72 5C 00 01      [ 1] 1410 	inc in 
      0008F2 20 F5            [ 2] 1411 	jra 3$
      0008F4                       1412 6$: 
      0008F4 72 B9 00 00      [ 2] 1413 	addw y,in.w 
      0008F8 90 FE            [ 2] 1414 	ldw y,(y)
      0008FA A1 84            [ 1] 1415 	cp a,#TK_INTGR
      0008FC 2A 06            [ 1] 1416 	jrpl 7$
      0008FE 72 A9 21 1B      [ 2] 1417 	addw y,#code_addr
      000902 90 FE            [ 2] 1418 	ldw y,(y) 
      000904 51               [ 1] 1419 7$:	exgw x,y 
      000905 72 5C 00 01      [ 1] 1420 	inc in
      000909 72 5C 00 01      [ 1] 1421 8$:	inc in 
      00090D                       1422 9$: 
      00090D 81               [ 4] 1423 	ret	
                                   1424 
                                   1425 ;-----------------------------------
                                   1426 ; print a 16 bit integer 
                                   1427 ; using variable 'base' as conversion
                                   1428 ; format.
                                   1429 ; input:
                                   1430 ;   X       integer to print 
                                   1431 ;   'base'    conversion base 
                                   1432 ; output:
                                   1433 ;   none 
                                   1434 ;-----------------------------------
      00090E                       1435 print_int:
      00090E 72 5F 00 0B      [ 1] 1436 	clr acc24 
      000912 CF 00 0C         [ 2] 1437 	ldw acc16,x 
      000915 72 0F 00 0C 04   [ 2] 1438 	btjf acc16,#7,prti24
      00091A 72 53 00 0B      [ 1] 1439 	cpl acc24 
                                   1440 
                                   1441 ;------------------------------------
                                   1442 ; print integer in acc24 
                                   1443 ; input:
                                   1444 ;	acc24 		integer to print 
                                   1445 ;	'base' 		numerical base for conversion 
                                   1446 ;   'tab_width' field width 
                                   1447 ;  output:
                                   1448 ;    A          string length
                                   1449 ;------------------------------------
      00091E                       1450 prti24:
      00091E CD 09 2A         [ 4] 1451     call itoa  ; conversion entier en  .asciz
      000921 CD 00 00         [ 4] 1452 	call right_align  
      000924 88               [ 1] 1453 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000925 CD 00 00         [ 4] 1454 	call puts
      000928 84               [ 1] 1455 	pop a 
      000929 81               [ 4] 1456     ret	
                                   1457 
                                   1458 ;------------------------------------
                                   1459 ; convert integer in acc24 to string
                                   1460 ; input:
                                   1461 ;   'base'	conversion base 
                                   1462 ;	acc24	integer to convert
                                   1463 ; output:
                                   1464 ;   X  		pointer to first char of string
                                   1465 ;   A       string length
                                   1466 ;------------------------------------
                           000001  1467 	SIGN=1  ; integer sign 
                           000002  1468 	LEN=2 
                           000003  1469 	PSTR=3
                           000004  1470 	VSIZE=4 ;locals size
      00092A                       1471 itoa::
      00092A                       1472 	_vars VSIZE
      00092A 52 04            [ 2]    1     sub sp,#VSIZE 
      00092C 0F 02            [ 1] 1473 	clr (LEN,sp) ; string length  
      00092E 0F 01            [ 1] 1474 	clr (SIGN,sp)    ; sign
      000930 C6 00 0A         [ 1] 1475 	ld a,base 
      000933 A1 0A            [ 1] 1476 	cp a,#10
      000935 26 0A            [ 1] 1477 	jrne 1$
                                   1478 	; base 10 string display with negative sign if bit 23==1
      000937 72 0F 00 0B 05   [ 2] 1479 	btjf acc24,#7,1$
      00093C 03 01            [ 1] 1480 	cpl (SIGN,sp)
      00093E CD 09 F1         [ 4] 1481 	call neg_acc24
      000941                       1482 1$:
                                   1483 ; initialize string pointer 
      000941 AE 16 90         [ 2] 1484 	ldw x,#tib 
      000944 1C 00 50         [ 2] 1485 	addw x,#TIB_SIZE
      000947 5A               [ 2] 1486 	decw x 
      000948 7F               [ 1] 1487 	clr (x)
      000949                       1488 itoa_loop:
      000949 C6 00 0A         [ 1] 1489     ld a,base
      00094C 1F 03            [ 2] 1490 	ldw (PSTR,sp),x 
      00094E CD 09 8F         [ 4] 1491     call divu24_8 ; acc24/A 
      000951 1E 03            [ 2] 1492 	ldw x,(PSTR,sp)
      000953 AB 30            [ 1] 1493     add a,#'0  ; remainder of division
      000955 A1 3A            [ 1] 1494     cp a,#'9+1
      000957 2B 02            [ 1] 1495     jrmi 2$
      000959 AB 07            [ 1] 1496     add a,#7 
      00095B                       1497 2$:	
      00095B 5A               [ 2] 1498 	decw x
      00095C F7               [ 1] 1499     ld (x),a
      00095D 0C 02            [ 1] 1500 	inc (LEN,sp)
                                   1501 	; if acc24==0 conversion done
      00095F C6 00 0B         [ 1] 1502 	ld a,acc24
      000962 CA 00 0C         [ 1] 1503 	or a,acc16
      000965 CA 00 0D         [ 1] 1504 	or a,acc8
      000968 26 DF            [ 1] 1505     jrne itoa_loop
                                   1506 	;conversion done, next add '$' or '-' as required
      00096A C6 00 0A         [ 1] 1507 	ld a,base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00096D A1 10            [ 1] 1508 	cp a,#16
      00096F 27 08            [ 1] 1509 	jreq 8$
      000971 7B 01            [ 1] 1510 	ld a,(SIGN,sp)
      000973 27 15            [ 1] 1511     jreq 10$
      000975 A6 2D            [ 1] 1512     ld a,#'-
      000977 20 0D            [ 2] 1513 	jra 9$ 
                                   1514 ; don't print more than 4 digits
                                   1515 ; in hexadecimal to avoid '-' sign 
                                   1516 ; extend display 	
      000979 7B 02            [ 1] 1517 8$: ld a,(LEN,sp) 
      00097B A1 05            [ 1] 1518 	cp a,#5 
      00097D 2B 05            [ 1] 1519 	jrmi 81$
      00097F 5C               [ 1] 1520 	incw x
      000980 0A 02            [ 1] 1521 	dec (LEN,sp)
      000982 20 F5            [ 2] 1522 	jra 8$
      000984                       1523 81$:	
      000984 A6 24            [ 1] 1524 	ld a,#'$ 
      000986 5A               [ 2] 1525 9$: decw x
      000987 F7               [ 1] 1526     ld (x),a
      000988 0C 02            [ 1] 1527 	inc (LEN,sp)
      00098A                       1528 10$:
      00098A 7B 02            [ 1] 1529 	ld a,(LEN,sp)
      00098C                       1530 	_drop VSIZE
      00098C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00098E 81               [ 4] 1531 	ret
                                   1532 
                                   1533 ;-------------------------------------
                                   1534 ; divide uint24_t by uint8_t
                                   1535 ; used to convert uint24_t to string
                                   1536 ; input:
                                   1537 ;	acc24	dividend
                                   1538 ;   A 		divisor
                                   1539 ; output:
                                   1540 ;   acc24	quotient
                                   1541 ;   A		remainder
                                   1542 ;------------------------------------- 
                                   1543 ; offset  on sp of arguments and locals
                           000001  1544 	U8   = 1   ; divisor on stack
                           000001  1545 	VSIZE =1
      00098F                       1546 divu24_8:
      00098F 89               [ 2] 1547 	pushw x ; save x
      000990 88               [ 1] 1548 	push a 
                                   1549 	; ld dividend UU:MM bytes in X
      000991 C6 00 0B         [ 1] 1550 	ld a, acc24
      000994 95               [ 1] 1551 	ld xh,a
      000995 C6 00 0C         [ 1] 1552 	ld a,acc24+1
      000998 97               [ 1] 1553 	ld xl,a
      000999 7B 01            [ 1] 1554 	ld a,(U8,SP) ; divisor
      00099B 62               [ 2] 1555 	div x,a ; UU:MM/U8
      00099C 88               [ 1] 1556 	push a  ;save remainder
      00099D 9E               [ 1] 1557 	ld a,xh
      00099E C7 00 0B         [ 1] 1558 	ld acc24,a
      0009A1 9F               [ 1] 1559 	ld a,xl
      0009A2 C7 00 0C         [ 1] 1560 	ld acc24+1,a
      0009A5 84               [ 1] 1561 	pop a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009A6 95               [ 1] 1562 	ld xh,a
      0009A7 C6 00 0D         [ 1] 1563 	ld a,acc24+2
      0009AA 97               [ 1] 1564 	ld xl,a
      0009AB 7B 01            [ 1] 1565 	ld a,(U8,sp) ; divisor
      0009AD 62               [ 2] 1566 	div x,a  ; R:LL/U8
      0009AE 6B 01            [ 1] 1567 	ld (U8,sp),a ; save remainder
      0009B0 9F               [ 1] 1568 	ld a,xl
      0009B1 C7 00 0D         [ 1] 1569 	ld acc24+2,a
      0009B4 84               [ 1] 1570 	pop a
      0009B5 85               [ 2] 1571 	popw x
      0009B6 81               [ 4] 1572 	ret
                                   1573 
                                   1574 ;--------------------------------------
                                   1575 ; unsigned multiply uint24_t by uint8_t
                                   1576 ; use to convert numerical string to uint24_t
                                   1577 ; input:
                                   1578 ;	acc24	uint24_t 
                                   1579 ;   A		uint8_t
                                   1580 ; output:
                                   1581 ;   acc24   A*acc24
                                   1582 ;-------------------------------------
                                   1583 ; local variables offset  on sp
                           000003  1584 	U8   = 3   ; A pushed on stack
                           000002  1585 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1586 	OVFH = 1  ; multiplication overflow high byte
                           000003  1587 	VSIZE = 3
      0009B7                       1588 mulu24_8:
      0009B7 89               [ 2] 1589 	pushw x    ; save X
                                   1590 	; local variables
      0009B8 88               [ 1] 1591 	push a     ; U8
      0009B9 5F               [ 1] 1592 	clrw x     ; initialize overflow to 0
      0009BA 89               [ 2] 1593 	pushw x    ; multiplication overflow
                                   1594 ; multiply low byte.
      0009BB C6 00 0D         [ 1] 1595 	ld a,acc24+2
      0009BE 97               [ 1] 1596 	ld xl,a
      0009BF 7B 03            [ 1] 1597 	ld a,(U8,sp)
      0009C1 42               [ 4] 1598 	mul x,a
      0009C2 9F               [ 1] 1599 	ld a,xl
      0009C3 C7 00 0D         [ 1] 1600 	ld acc24+2,a
      0009C6 9E               [ 1] 1601 	ld a, xh
      0009C7 6B 02            [ 1] 1602 	ld (OVFL,sp),a
                                   1603 ; multipy middle byte
      0009C9 C6 00 0C         [ 1] 1604 	ld a,acc24+1
      0009CC 97               [ 1] 1605 	ld xl,a
      0009CD 7B 03            [ 1] 1606 	ld a, (U8,sp)
      0009CF 42               [ 4] 1607 	mul x,a
                                   1608 ; add overflow to this partial product
      0009D0 72 FB 01         [ 2] 1609 	addw x,(OVFH,sp)
      0009D3 9F               [ 1] 1610 	ld a,xl
      0009D4 C7 00 0C         [ 1] 1611 	ld acc24+1,a
      0009D7 4F               [ 1] 1612 	clr a
      0009D8 A9 00            [ 1] 1613 	adc a,#0
      0009DA 6B 01            [ 1] 1614 	ld (OVFH,sp),a
      0009DC 9E               [ 1] 1615 	ld a,xh
      0009DD 6B 02            [ 1] 1616 	ld (OVFL,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1617 ; multiply most signficant byte	
      0009DF C6 00 0B         [ 1] 1618 	ld a, acc24
      0009E2 97               [ 1] 1619 	ld xl, a
      0009E3 7B 03            [ 1] 1620 	ld a, (U8,sp)
      0009E5 42               [ 4] 1621 	mul x,a
      0009E6 72 FB 01         [ 2] 1622 	addw x, (OVFH,sp)
      0009E9 9F               [ 1] 1623 	ld a, xl
      0009EA C7 00 0B         [ 1] 1624 	ld acc24,a
      0009ED 5B 03            [ 2] 1625     addw sp,#VSIZE
      0009EF 85               [ 2] 1626 	popw x
      0009F0 81               [ 4] 1627 	ret
                                   1628 
                                   1629 ;------------------------------------
                                   1630 ;  two's complement acc24
                                   1631 ;  input:
                                   1632 ;		acc24 variable
                                   1633 ;  output:
                                   1634 ;		acc24 variable
                                   1635 ;-------------------------------------
      0009F1                       1636 neg_acc24:
      0009F1 72 53 00 0D      [ 1] 1637 	cpl acc24+2
      0009F5 72 53 00 0C      [ 1] 1638 	cpl acc24+1
      0009F9 72 53 00 0B      [ 1] 1639 	cpl acc24
      0009FD A6 01            [ 1] 1640 	ld a,#1
      0009FF CB 00 0D         [ 1] 1641 	add a,acc24+2
      000A02 C7 00 0D         [ 1] 1642 	ld acc24+2,a
      000A05 4F               [ 1] 1643 	clr a
      000A06 C9 00 0C         [ 1] 1644 	adc a,acc24+1
      000A09 C7 00 0C         [ 1] 1645 	ld acc24+1,a 
      000A0C 4F               [ 1] 1646 	clr a 
      000A0D C9 00 0B         [ 1] 1647 	adc a,acc24 
      000A10 C7 00 0B         [ 1] 1648 	ld acc24,a 
      000A13 81               [ 4] 1649 	ret
                                   1650 
                                   1651 
                                   1652 
                                   1653 
                                   1654 ;------------------------------------
                                   1655 ; convert alpha to uppercase
                                   1656 ; input:
                                   1657 ;    a  character to convert
                                   1658 ; output:
                                   1659 ;    a  uppercase character
                                   1660 ;------------------------------------
      000A14                       1661 to_upper::
      000A14 A1 61            [ 1] 1662 	cp a,#'a
      000A16 2A 01            [ 1] 1663 	jrpl 1$
      000A18 81               [ 4] 1664 0$:	ret
      000A19 A1 7A            [ 1] 1665 1$: cp a,#'z	
      000A1B 22 FB            [ 1] 1666 	jrugt 0$
      000A1D A0 20            [ 1] 1667 	sub a,#32
      000A1F 81               [ 4] 1668 	ret
                                   1669 	
                                   1670 ;------------------------------------
                                   1671 ; convert pad content in integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1672 ; input:
                                   1673 ;    x		.asciz to convert
                                   1674 ; output:
                                   1675 ;    acc24      int24_t
                                   1676 ;------------------------------------
                                   1677 	; local variables
                           000001  1678 	SIGN=1 ; 1 byte, 
                           000002  1679 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1680 	TEMP=3 ; 1 byte, temporary storage
                           000003  1681 	VSIZE=3 ; 3 bytes reserved for local storage
      000A20                       1682 atoi24::
      000A20 89               [ 2] 1683 	pushw x 
      000A21                       1684 	_vars VSIZE
      000A21 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1685 	; acc24=0 
      000A23 72 5F 00 0B      [ 1] 1686 	clr acc24    
      000A27 72 5F 00 0C      [ 1] 1687 	clr acc16
      000A2B 72 5F 00 0D      [ 1] 1688 	clr acc8 
      000A2F 0F 01            [ 1] 1689 	clr (SIGN,sp)
      000A31 A6 0A            [ 1] 1690 	ld a,#10
      000A33 6B 02            [ 1] 1691 	ld (BASE,sp),a ; default base decimal
      000A35 F6               [ 1] 1692 	ld a,(x)
      000A36 27 47            [ 1] 1693 	jreq 9$  ; completed if 0
      000A38 A1 2D            [ 1] 1694 	cp a,#'-
      000A3A 26 04            [ 1] 1695 	jrne 1$
      000A3C 03 01            [ 1] 1696 	cpl (SIGN,sp)
      000A3E 20 08            [ 2] 1697 	jra 2$
      000A40 A1 24            [ 1] 1698 1$: cp a,#'$
      000A42 26 06            [ 1] 1699 	jrne 3$
      000A44 A6 10            [ 1] 1700 	ld a,#16
      000A46 6B 02            [ 1] 1701 	ld (BASE,sp),a
      000A48 5C               [ 1] 1702 2$:	incw x
      000A49 F6               [ 1] 1703 	ld a,(x)
      000A4A                       1704 3$:	
      000A4A A1 61            [ 1] 1705 	cp a,#'a
      000A4C 2B 02            [ 1] 1706 	jrmi 4$
      000A4E A0 20            [ 1] 1707 	sub a,#32
      000A50 A1 30            [ 1] 1708 4$:	cp a,#'0
      000A52 2B 2B            [ 1] 1709 	jrmi 9$
      000A54 A0 30            [ 1] 1710 	sub a,#'0
      000A56 A1 0A            [ 1] 1711 	cp a,#10
      000A58 2B 06            [ 1] 1712 	jrmi 5$
      000A5A A0 07            [ 1] 1713 	sub a,#7
      000A5C 11 02            [ 1] 1714 	cp a,(BASE,sp)
      000A5E 2A 1F            [ 1] 1715 	jrpl 9$
      000A60 6B 03            [ 1] 1716 5$:	ld (TEMP,sp),a
      000A62 7B 02            [ 1] 1717 	ld a,(BASE,sp)
      000A64 CD 09 B7         [ 4] 1718 	call mulu24_8
      000A67 7B 03            [ 1] 1719 	ld a,(TEMP,sp)
      000A69 CB 00 0D         [ 1] 1720 	add a,acc24+2
      000A6C C7 00 0D         [ 1] 1721 	ld acc24+2,a
      000A6F 4F               [ 1] 1722 	clr a
      000A70 C9 00 0C         [ 1] 1723 	adc a,acc24+1
      000A73 C7 00 0C         [ 1] 1724 	ld acc24+1,a
      000A76 4F               [ 1] 1725 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A77 C9 00 0B         [ 1] 1726 	adc a,acc24
      000A7A C7 00 0B         [ 1] 1727 	ld acc24,a
      000A7D 20 C9            [ 2] 1728 	jra 2$
      000A7F 0D 01            [ 1] 1729 9$:	tnz (SIGN,sp)
      000A81 27 03            [ 1] 1730     jreq atoi_exit
      000A83 CD 09 F1         [ 4] 1731     call neg_acc24
      000A86                       1732 atoi_exit: 
      000A86                       1733 	_drop VSIZE
      000A86 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A88 85               [ 2] 1734 	popw x ; restore x
      000A89 81               [ 4] 1735 	ret
                                   1736 
                                   1737 
                                   1738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1739 ;;   TINY BASIC  operators,
                                   1740 ;;   commands and functions 
                                   1741 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1742 
                                   1743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1744 ;;  Arithmetic operators
                                   1745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1746 
                                   1747 ;debug support
                           000001  1748 DEBUG_PRT=1
                           000001  1749 .if DEBUG_PRT 
                           000001  1750 	REGA=1
                           000002  1751 	SAVEB=2
                           000003  1752 	REGX=3
                           000005  1753 	REGY=5
                           000007  1754 	ACC24=7
                           000009  1755 	VSIZE=9 
      000A8A                       1756 printxy:
      000A8A                       1757 	_vars VSIZE 
      000A8A 52 09            [ 2]    1     sub sp,#VSIZE 
      000A8C 6B 01            [ 1] 1758 	ld (REGA,sp),a 
      000A8E C6 00 0A         [ 1] 1759 	ld a,base 
      000A91 6B 02            [ 1] 1760 	ld (SAVEB,sp),a
      000A93 1F 03            [ 2] 1761 	ldw (REGX,sp),x
      000A95 17 05            [ 2] 1762 	ldw (REGY,sp),y
      000A97 CE 00 0B         [ 2] 1763 	ldw x,acc24 
      000A9A C6 00 0D         [ 1] 1764 	ld a,acc8 
      000A9D 1F 07            [ 2] 1765 	ldw (ACC24,sp),x 
      000A9F 6B 09            [ 1] 1766 	ld (ACC24+2,sp),a 
      000AA1 35 10 00 0A      [ 1] 1767 	mov base,#16 
      000AA5 5F               [ 1] 1768 	clrw x 
      000AA6 7B 01            [ 1] 1769 	ld a,(REGA,sp)
      000AA8 97               [ 1] 1770 	ld xl,a 
      000AA9 CD 09 0E         [ 4] 1771 	call print_int
      000AAC A6 20            [ 1] 1772 	ld a,#SPACE 
      000AAE CD 03 2B         [ 4] 1773 	call putc  
      000AB1 1E 03            [ 2] 1774 	ldw x,(REGX,sp)
      000AB3 CD 09 0E         [ 4] 1775 	call print_int 
      000AB6 A6 20            [ 1] 1776 	ld a,#SPACE 
      000AB8 CD 03 2B         [ 4] 1777 	call putc  
      000ABB 1E 05            [ 2] 1778 	ldw x,(REGY,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000ABD CD 09 0E         [ 4] 1779 	call print_int 
      000AC0 A6 0D            [ 1] 1780 	ld a,#CR 
      000AC2 CD 03 2B         [ 4] 1781 	call putc 
      000AC5 7B 09            [ 1] 1782 	ld a,(ACC24+2,sp)
      000AC7 1E 07            [ 2] 1783 	ldw x,(ACC24,sp)
      000AC9 CF 00 0B         [ 2] 1784 	ldw acc24,x 
      000ACC C7 00 0D         [ 1] 1785 	ld acc8,a
      000ACF 7B 02            [ 1] 1786 	ld a,(SAVEB,sp)
      000AD1 C7 00 0A         [ 1] 1787 	ld base,a 
      000AD4 7B 01            [ 1] 1788 	ld a,(REGA,sp)
      000AD6 1E 03            [ 2] 1789 	ldw x,(REGX,sp)
      000AD8 16 05            [ 2] 1790 	ldw y,(REGY,sp)
      000ADA                       1791 	_drop VSIZE 
      000ADA 5B 09            [ 2]    1     addw sp,#VSIZE 
      000ADC 81               [ 4] 1792 	ret 
                                   1793 .endif 
                                   1794 
                                   1795 
                                   1796 ;--------------------------------------
                                   1797 ;  multiply 2 uint16_t return uint32_t
                                   1798 ;  input:
                                   1799 ;     x       uint16_t 
                                   1800 ;     y       uint16_t 
                                   1801 ;  output:
                                   1802 ;     x       product bits 15..0
                                   1803 ;     y       product bits 31..16 
                                   1804 ;---------------------------------------
                           000001  1805 		U1=1  ; uint16_t 
                           000003  1806 		DBL=3 ; uint32_t
                           000006  1807 		VSIZE=6
      000ADD                       1808 umstar:
      000ADD                       1809 	_vars VSIZE 
      000ADD 52 06            [ 2]    1     sub sp,#VSIZE 
      000ADF 1F 01            [ 2] 1810 	ldw (U1,sp),x 
                                   1811 ;initialize bits 31..16 of 
                                   1812 ;product to zero 
      000AE1 0F 03            [ 1] 1813 	clr (DBL,sp)
      000AE3 0F 04            [ 1] 1814 	clr (DBL+1,sp)
                                   1815 ; produc U1L*U2L 
      000AE5 90 9F            [ 1] 1816 	ld a,yl 
      000AE7 42               [ 4] 1817 	mul x,a 
      000AE8 1F 05            [ 2] 1818 	ldw (DBL+2,sp),x
                                   1819 ; product U1H*U2L 
      000AEA 7B 01            [ 1] 1820 	ld a,(U1,sp) ; xh 
      000AEC 93               [ 1] 1821 	ldw x,y
      000AED 42               [ 4] 1822 	mul x,a 
      000AEE 4F               [ 1] 1823 	clr a 
      000AEF 72 FB 04         [ 2] 1824 	addw x,(DBL+1,sp) 
      000AF2 4F               [ 1] 1825 	clr a 
      000AF3 19 03            [ 1] 1826 	adc a,(DBL,sp) 
      000AF5 6B 03            [ 1] 1827 	ld (DBL,sp),a ; bits 23..17 
      000AF7 1F 04            [ 2] 1828 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1829 ; product U1L*U2H
      000AF9 90 5E            [ 1] 1830 	swapw y 
      000AFB 93               [ 1] 1831 	ldw x,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AFC 7B 02            [ 1] 1832 	ld a,(U1+1,sp)
      000AFE 42               [ 4] 1833 	mul x,a
      000AFF 72 FB 04         [ 2] 1834 	addw x,(DBL+1,sp)
      000B02 4F               [ 1] 1835 	clr a 
      000B03 19 03            [ 1] 1836 	adc a,(DBL,sp)
      000B05 6B 03            [ 1] 1837 	ld (DBL,sp),a 
      000B07 1F 04            [ 2] 1838 	ldw (DBL+1,sp),x 
                                   1839 ; product U1H*U2H 	
      000B09 7B 01            [ 1] 1840 	ld a,(U1,sp)
      000B0B 93               [ 1] 1841 	ldw x,y  
      000B0C 42               [ 4] 1842 	mul x,a 
      000B0D 72 FB 03         [ 2] 1843 	addw x,(DBL,sp)
      000B10 90 93            [ 1] 1844 	ldw y,x 
      000B12 1E 05            [ 2] 1845 	ldw x,(DBL+2,sp)
      000B14                       1846 	_drop VSIZE 
      000B14 5B 06            [ 2]    1     addw sp,#VSIZE 
      000B16 81               [ 4] 1847 	ret
                                   1848 
                                   1849 
                                   1850 ;-------------------------------------
                                   1851 ; multiply 2 integers
                                   1852 ; input:
                                   1853 ;  	x       n1 
                                   1854 ;   y 		n2 
                                   1855 ; output:
                                   1856 ;	X        N1*N2 bits 15..0
                                   1857 ;   Y        N1*N2 bits 31..16 
                                   1858 ;-------------------------------------
                           000001  1859 	SIGN=1
                           000001  1860 	VSIZE=1
      000B17                       1861 multiply:
      000B17                       1862 	_vars VSIZE 
      000B17 52 01            [ 2]    1     sub sp,#VSIZE 
      000B19 0F 01            [ 1] 1863 	clr (SIGN,sp)
      000B1B 9E               [ 1] 1864 	ld a,xh 
      000B1C A4 80            [ 1] 1865 	and a,#0x80
      000B1E 2A 03            [ 1] 1866 	jrpl 1$
      000B20 03 01            [ 1] 1867 	cpl (SIGN,sp)
      000B22 50               [ 2] 1868 	negw x 
      000B23                       1869 1$:	
      000B23 90 9E            [ 1] 1870 	ld a,yh
      000B25 A4 80            [ 1] 1871 	and a,#0x80  
      000B27 2A 04            [ 1] 1872 	jrpl 2$ 
      000B29 03 01            [ 1] 1873 	cpl (SIGN,sp)
      000B2B 90 50            [ 2] 1874 	negw y 
      000B2D                       1875 2$:	
      000B2D CD 0A DD         [ 4] 1876 	call umstar
      000B30 7B 01            [ 1] 1877 	ld a,(SIGN,sp)
      000B32 27 03            [ 1] 1878 	jreq 3$
      000B34 CD 0B 64         [ 4] 1879 	call dneg 
      000B37                       1880 3$:	
      000B37                       1881 	_drop VSIZE 
      000B37 5B 01            [ 2]    1     addw sp,#VSIZE 
      000B39 81               [ 4] 1882 	ret
                                   1883 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1884 ;--------------------------------------
                                   1885 ; divide uint32_t/uint16_t
                                   1886 ; return:  quotient and remainder 
                                   1887 ; quotient expected to be uint16_t 
                                   1888 ; input:
                                   1889 ;   DBLDIVDND    on stack 
                                   1890 ;   X            divisor 
                                   1891 ; output:
                                   1892 ;   X            quotient 
                                   1893 ;   Y            remainder 
                                   1894 ;---------------------------------------
                           000003  1895 	VSIZE=3
      000B3A                       1896 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000B3A                       1897 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1898 	; local variables 
                           000001  1899 	DIVISOR=1 
                           000003  1900 	CNTR=3 
      000B3A                       1901 udiv32_16:
      000B3A                       1902 	_vars VSIZE 
      000B3A 52 03            [ 2]    1     sub sp,#VSIZE 
      000B3C 1F 01            [ 2] 1903 	ldw (DIVISOR,sp),x	; save divisor 
      000B3E 1E 08            [ 2] 1904 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000B40 16 06            [ 2] 1905 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000B42 90 5D            [ 2] 1906 	tnzw y
      000B44 26 06            [ 1] 1907 	jrne long_division 
      000B46 16 01            [ 2] 1908 	ldw y,(DIVISOR,sp)
      000B48 65               [ 2] 1909 	divw x,y
      000B49                       1910 	_drop VSIZE 
      000B49 5B 03            [ 2]    1     addw sp,#VSIZE 
      000B4B 81               [ 4] 1911 	ret
      000B4C                       1912 long_division:
      000B4C 51               [ 1] 1913 	exgw x,y ; hi in x, lo in y 
      000B4D A6 11            [ 1] 1914 	ld a,#17 
      000B4F 6B 03            [ 1] 1915 	ld (CNTR,sp),a
      000B51                       1916 1$:
      000B51 13 01            [ 2] 1917 	cpw x,(DIVISOR,sp)
      000B53 2B 03            [ 1] 1918 	jrmi 2$
      000B55 72 F0 01         [ 2] 1919 	subw x,(DIVISOR,sp)
      000B58 8C               [ 1] 1920 2$:	ccf 
      000B59 90 59            [ 2] 1921 	rlcw y 
      000B5B 59               [ 2] 1922 	rlcw x 
      000B5C 0A 03            [ 1] 1923 	dec (CNTR,sp)
      000B5E 26 F1            [ 1] 1924 	jrne 1$
      000B60 51               [ 1] 1925 	exgw x,y 
      000B61                       1926 	_drop VSIZE 
      000B61 5B 03            [ 2]    1     addw sp,#VSIZE 
      000B63 81               [ 4] 1927 	ret
                                   1928 
                                   1929 ;-----------------------------
                                   1930 ; negate double int.
                                   1931 ; input:
                                   1932 ;   x     bits 15..0
                                   1933 ;   y     bits 31..16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1934 ; output: 
                                   1935 ;   x     bits 15..0
                                   1936 ;   y     bits 31..16
                                   1937 ;-----------------------------
      000B64                       1938 dneg:
      000B64 53               [ 2] 1939 	cplw x 
      000B65 90 53            [ 2] 1940 	cplw y 
      000B67 1C 00 01         [ 2] 1941 	addw x,#1 
      000B6A 24 02            [ 1] 1942 	jrnc 1$
      000B6C 90 5C            [ 1] 1943 	incw y 
      000B6E 81               [ 4] 1944 1$: ret 
                                   1945 
                                   1946 
                                   1947 ;--------------------------------
                                   1948 ; sign extend single to double
                                   1949 ; input:
                                   1950 ;   x    int16_t
                                   1951 ; output:
                                   1952 ;   x    int32_t bits 15..0
                                   1953 ;   y    int32_t bits 31..16
                                   1954 ;--------------------------------
      000B6F                       1955 dbl_sign_extend:
      000B6F 90 5F            [ 1] 1956 	clrw y
      000B71 9E               [ 1] 1957 	ld a,xh 
      000B72 A4 80            [ 1] 1958 	and a,#0x80 
      000B74 27 02            [ 1] 1959 	jreq 1$
      000B76 90 53            [ 2] 1960 	cplw y
      000B78 81               [ 4] 1961 1$: ret 	
                                   1962 
                                   1963 
                                   1964 ;----------------------------------
                                   1965 ;  euclidian divide dbl/n1 
                                   1966 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1967 ; input:
                                   1968 ;    dbl    int32_t on stack 
                                   1969 ;    x 		n1   int16_t  disivor  
                                   1970 ; output:
                                   1971 ;    X      dbl/x  int16_t 
                                   1972 ;    Y      remainder int16_t 
                                   1973 ;----------------------------------
                           000008  1974 	VSIZE=8
      000B79                       1975 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000B79                       1976 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000B79                       1977 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1978 	; local variables
                           000001  1979 	DBLHI=1
                           000003  1980 	DBLLO=3 
                           000005  1981 	SDIVSR=5 ; sign divisor
                           000006  1982 	SQUOT=6 ; sign dividend 
                           000007  1983 	DIVISR=7 ; divisor 
      000B79                       1984 div32_16:
      000B79                       1985 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B79 52 08            [ 2]    1     sub sp,#VSIZE 
      000B7B 0F 05            [ 1] 1986 	clr (SDIVSR,sp)
      000B7D 0F 06            [ 1] 1987 	clr (SQUOT,sp)
                                   1988 ; copy arguments 
      000B7F 16 0B            [ 2] 1989 	ldw y,(DIVDNDHI,sp)
      000B81 17 01            [ 2] 1990 	ldw (DBLHI,sp),y
      000B83 16 0D            [ 2] 1991 	ldw y,(DIVDNDLO,sp)
      000B85 17 03            [ 2] 1992 	ldw (DBLLO,sp),y 
                                   1993 ; check for 0 divisor
      000B87 5D               [ 2] 1994 	tnzw x 
      000B88 26 05            [ 1] 1995     jrne 0$
      000B8A A6 04            [ 1] 1996 	ld a,#ERR_DIV0 
      000B8C CC 07 BD         [ 2] 1997 	jp tb_error 
                                   1998 ; check divisor sign 	
      000B8F 9E               [ 1] 1999 0$:	ld a,xh 
      000B90 A4 80            [ 1] 2000 	and a,#0x80 
      000B92 27 05            [ 1] 2001 	jreq 1$
      000B94 03 05            [ 1] 2002 	cpl (SDIVSR,sp)
      000B96 03 06            [ 1] 2003 	cpl (SQUOT,sp)
      000B98 50               [ 2] 2004 	negw x
      000B99 1F 07            [ 2] 2005 1$:	ldw (DIVISR,sp),x
                                   2006 ; check dividend sign 	 
      000B9B 7B 01            [ 1] 2007  	ld a,(DBLHI,sp) 
      000B9D A4 80            [ 1] 2008 	and a,#0x80 
      000B9F 27 0D            [ 1] 2009 	jreq 2$ 
      000BA1 03 06            [ 1] 2010 	cpl (SQUOT,sp)
      000BA3 1E 03            [ 2] 2011 	ldw x,(DBLLO,sp)
      000BA5 16 01            [ 2] 2012 	ldw y,(DBLHI,sp)
      000BA7 CD 0B 64         [ 4] 2013 	call dneg 
      000BAA 1F 03            [ 2] 2014 	ldw (DBLLO,sp),x 
      000BAC 17 01            [ 2] 2015 	ldw (DBLHI,sp),y 
      000BAE 1E 07            [ 2] 2016 2$:	ldw x,(DIVISR,sp)
      000BB0 CD 0B 3A         [ 4] 2017 	call udiv32_16
      000BB3 90 5D            [ 2] 2018 	tnzw y 
      000BB5 27 11            [ 1] 2019 	jreq 3$ 
                                   2020 ; x=quotient 
                                   2021 ; y=remainder 
                                   2022 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000BB7 7B 06            [ 1] 2023 	ld a,(SQUOT,sp)
      000BB9 18 05            [ 1] 2024 	xor a,(SDIVSR,sp)
      000BBB 27 0B            [ 1] 2025 	jreq 3$
      000BBD 5C               [ 1] 2026 	incw x 
      000BBE 90 CF 00 0C      [ 2] 2027 	ldw acc16,y 
      000BC2 16 07            [ 2] 2028 	ldw y,(DIVISR,sp)
      000BC4 72 B2 00 0C      [ 2] 2029 	subw y,acc16
                                   2030 ; sign quotient
      000BC8 7B 06            [ 1] 2031 3$:	ld a,(SQUOT,sp)
      000BCA 27 01            [ 1] 2032 	jreq 4$
      000BCC 50               [ 2] 2033 	negw x 
      000BCD                       2034 4$:	
      000BCD                       2035 	_drop VSIZE 
      000BCD 5B 08            [ 2]    1     addw sp,#VSIZE 
      000BCF 81               [ 4] 2036 	ret 
                                   2037 
                                   2038 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2039 
                                   2040 ;----------------------------------
                                   2041 ; division x/y 
                                   2042 ; input:
                                   2043 ;    X       dividend
                                   2044 ;    Y       divisor 
                                   2045 ; output:
                                   2046 ;    X       quotient
                                   2047 ;    Y       remainder 
                                   2048 ;-----------------------------------
                           000004  2049 	VSIZE=4 
                                   2050 	; local variables 
                           000001  2051 	DBLHI=1
                           000003  2052 	DBLLO=3
      000BD0                       2053 divide: 
      000BD0                       2054 	_vars VSIZE 
      000BD0 52 04            [ 2]    1     sub sp,#VSIZE 
      000BD2 90 CF 00 0C      [ 2] 2055 	ldw acc16,y
      000BD6 CD 0B 6F         [ 4] 2056 	call dbl_sign_extend
      000BD9 1F 03            [ 2] 2057 	ldw (DBLLO,sp),x 
      000BDB 17 01            [ 2] 2058 	ldw (DBLHI,sp),y 
      000BDD CE 00 0C         [ 2] 2059 	ldw x,acc16 
      000BE0 CD 0B 79         [ 4] 2060 	call div32_16 
      000BE3                       2061 	_drop VSIZE 
      000BE3 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BE5 81               [ 4] 2062 	ret
                                   2063 
                                   2064 
                                   2065 ;----------------------------------
                                   2066 ;  remainder resulting from euclidian 
                                   2067 ;  division of x/y 
                                   2068 ; input:
                                   2069 ;   x   	dividend int16_t 
                                   2070 ;   y 		divisor int16_t
                                   2071 ; output:
                                   2072 ;   X       n1%n2 
                                   2073 ;----------------------------------
      000BE6                       2074 modulo:
      000BE6 CD 0B D0         [ 4] 2075 	call divide
      000BE9 93               [ 1] 2076 	ldw x,y 
      000BEA 81               [ 4] 2077 	ret 
                                   2078 
                                   2079 ;----------------------------------
                                   2080 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2081 ; return expr1*expr2/expr3 
                                   2082 ; product result is int32_t and 
                                   2083 ; divisiont is int32_t/int16_t
                                   2084 ;----------------------------------
                           000004  2085 	DBL_SIZE=4 
      000BEB                       2086 muldiv:
      000BEB CD 0C 61         [ 4] 2087 	call func_args 
      000BEE A1 03            [ 1] 2088 	cp a,#3 
      000BF0 27 03            [ 1] 2089 	jreq 1$
      000BF2 CC 07 BB         [ 2] 2090 	jp syntax_error
      000BF5                       2091 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000BF5 1E 05            [ 2] 2092 	ldw x,(5,sp) ; expr1
      000BF7 16 03            [ 2] 2093 	ldw y,(3,sp) ; expr2
      000BF9 CD 0B 17         [ 4] 2094 	call multiply 
      000BFC 1F 05            [ 2] 2095 	ldw (5,sp),x  ;int32_t 15..0
      000BFE 17 03            [ 2] 2096 	ldw (3,sp),y  ;int32_t 31..16
      000C00 85               [ 2] 2097 	popw x        ; expr3 
      000C01 CD 0B 79         [ 4] 2098 	call div32_16 ; int32_t/expr3 
      000C04                       2099 	_drop DBL_SIZE
      000C04 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000C06 81               [ 4] 2100 	ret 
                                   2101 
                                   2102 
                                   2103 ;---------------------------------
                                   2104 ; dictionary search 
                                   2105 ; input:
                                   2106 ;	X 		dictionary entry point, name field  
                                   2107 ;   y		.asciz name to search 
                                   2108 ; output:
                                   2109 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2110 ;  X		cmd_index ; execution address | 0 
                                   2111 ;---------------------------------
                           000001  2112 	NLEN=1 ; cmd length 
                           000002  2113 	XSAVE=2
                           000004  2114 	YSAVE=4
                           000005  2115 	VSIZE=5 
      000C07                       2116 search_dict::
      000C07                       2117 	_vars VSIZE 
      000C07 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2118 
      000C09 17 04            [ 2] 2119 	ldw (YSAVE,sp),y 
      000C0B                       2120 search_next:
      000C0B 1F 02            [ 2] 2121 	ldw (XSAVE,sp),x 
                                   2122 ; get name length in dictionary	
      000C0D F6               [ 1] 2123 	ld a,(x)
      000C0E A4 0F            [ 1] 2124 	and a,#0xf 
      000C10 6B 01            [ 1] 2125 	ld (NLEN,sp),a  
      000C12 16 04            [ 2] 2126 	ldw y,(YSAVE,sp) ; name pointer 
      000C14 5C               [ 1] 2127 	incw x 
      000C15                       2128 cp_loop:
      000C15 90 F6            [ 1] 2129 	ld a,(y)
      000C17 27 1B            [ 1] 2130 	jreq str_match 
      000C19 0D 01            [ 1] 2131 	tnz (NLEN,sp)
      000C1B 27 0A            [ 1] 2132 	jreq no_match  
      000C1D F1               [ 1] 2133 	cp a,(x)
      000C1E 26 07            [ 1] 2134 	jrne no_match 
      000C20 90 5C            [ 1] 2135 	incw y 
      000C22 5C               [ 1] 2136 	incw x
      000C23 0A 01            [ 1] 2137 	dec (NLEN,sp)
      000C25 20 EE            [ 2] 2138 	jra cp_loop 
      000C27                       2139 no_match:
      000C27 1E 02            [ 2] 2140 	ldw x,(XSAVE,sp) 
      000C29 1D 00 02         [ 2] 2141 	subw x,#2 ; move X to link field
      000C2C 4B 00            [ 1] 2142 	push #TK_NONE 
      000C2E FE               [ 2] 2143 	ldw x,(x) ; next word link 
      000C2F 84               [ 1] 2144 	pop a ; TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000C30 27 1F            [ 1] 2145 	jreq search_exit  ; not found  
                                   2146 ;try next 
      000C32 20 D7            [ 2] 2147 	jra search_next
      000C34                       2148 str_match:
      000C34 1E 02            [ 2] 2149 	ldw x,(XSAVE,sp)
      000C36 F6               [ 1] 2150 	ld a,(X)
      000C37 6B 01            [ 1] 2151 	ld (NLEN,sp),a ; needed to test keyword type  
      000C39 A4 0F            [ 1] 2152 	and a,#0xf 
                                   2153 ; move x to procedure address field 	
      000C3B 4C               [ 1] 2154 	inc a 
      000C3C C7 00 0D         [ 1] 2155 	ld acc8,a 
      000C3F 72 5F 00 0C      [ 1] 2156 	clr acc16 
      000C43 72 BB 00 0C      [ 2] 2157 	addw x,acc16 
      000C47 FE               [ 2] 2158 	ldw x,(x) ; routine index  
                                   2159 ;determine keyword type bits 7:6 
      000C48 7B 01            [ 1] 2160 	ld a,(NLEN,sp)
      000C4A 4E               [ 1] 2161 	swap a 
      000C4B A4 0C            [ 1] 2162 	and a,#0xc
      000C4D 44               [ 1] 2163 	srl a
      000C4E 44               [ 1] 2164 	srl a 
      000C4F AB 80            [ 1] 2165 	add a,#128
      000C51                       2166 search_exit: 
      000C51                       2167 	_drop VSIZE 	 
      000C51 5B 05            [ 2]    1     addw sp,#VSIZE 
      000C53 81               [ 4] 2168 	ret 
                                   2169 
                                   2170 ;---------------------
                                   2171 ; check if next token
                                   2172 ;  is of expected type 
                                   2173 ; input:
                                   2174 ;   A 		 expected token attribute
                                   2175 ;  ouput:
                                   2176 ;   none     if fail call syntax_error 
                                   2177 ;--------------------
      000C54                       2178 expect:
      000C54 88               [ 1] 2179 	push a 
      000C55 CD 08 AD         [ 4] 2180 	call next_token 
      000C58 11 01            [ 1] 2181 	cp a,(1,sp)
      000C5A 27 03            [ 1] 2182 	jreq 1$
      000C5C CC 07 BB         [ 2] 2183 	jp syntax_error
      000C5F 84               [ 1] 2184 1$: pop a 
      000C60 81               [ 4] 2185 	ret 
                                   2186 
                                   2187 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2188 ; parse arguments list 
                                   2189 ; between ()
                                   2190 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C61                       2191 func_args:
      000C61 A6 07            [ 1] 2192 	ld a,#TK_LPAREN 
      000C63 CD 0C 54         [ 4] 2193 	call expect 
                                   2194 ; expected to continue in arg_list 
                                   2195 ; caller must check for TK_RPAREN 
                                   2196 
                                   2197 ;-------------------------------
                                   2198 ; parse embedded BASIC routines 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2199 ; arguments list.
                                   2200 ; arg_list::=  rel[','rel]*
                                   2201 ; all arguments are of integer type
                                   2202 ; and pushed on stack 
                                   2203 ; input:
                                   2204 ;   none
                                   2205 ; output:
                                   2206 ;   stack{n}   arguments pushed on stack
                                   2207 ;   A 	number of arguments pushed on stack  
                                   2208 ;--------------------------------
      000C66                       2209 arg_list:
      000C66 4B 00            [ 1] 2210 	push #0  
      000C68 CD 0D AE         [ 4] 2211 1$: call relation
      000C6B A1 00            [ 1] 2212 	cp a,#TK_NONE 
      000C6D 27 20            [ 1] 2213 	jreq 5$
      000C6F A1 84            [ 1] 2214 	cp a,#TK_INTGR
      000C71 26 13            [ 1] 2215 	jrne 4$
      000C73                       2216 3$: 
                                   2217 ; swap return address with argument
      000C73 84               [ 1] 2218 	pop a ; arg_count
      000C74 90 85            [ 2] 2219 	popw y ; return address 
      000C76 89               [ 2] 2220 	pushw x ; new argument 
      000C77 90 89            [ 2] 2221 	pushw y 
      000C79 4C               [ 1] 2222     inc a
      000C7A 88               [ 1] 2223 	push a 
      000C7B CD 08 AD         [ 4] 2224 	call next_token 
      000C7E A1 09            [ 1] 2225 	cp a,#TK_COMMA 
      000C80 27 E6            [ 1] 2226 	jreq 1$ 
      000C82 A1 00            [ 1] 2227 	cp a,#TK_NONE 
      000C84 27 09            [ 1] 2228 	jreq 5$ 
      000C86 A1 08            [ 1] 2229 4$:	cp a,#TK_RPAREN 
      000C88 27 05            [ 1] 2230 	jreq 5$
      000C8A                       2231 	_unget_token 
      000C8A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C8F 84               [ 1] 2232 5$:	pop a  
      000C90 81               [ 4] 2233 	ret 
                                   2234 
                                   2235 ;--------------------------------
                                   2236 ;   BASIC commnands 
                                   2237 ;--------------------------------
                                   2238 
                                   2239 ;--------------------------------
                                   2240 ;  arithmetic and relational 
                                   2241 ;  routines
                                   2242 ;  operators precedence
                                   2243 ;  highest to lowest
                                   2244 ;  operators on same row have 
                                   2245 ;  same precedence and are executed
                                   2246 ;  from left to right.
                                   2247 ;	'*','/','%'
                                   2248 ;   '-','+'
                                   2249 ;   '=','>','<','>=','<=','<>','><'
                                   2250 ;   '<>' and '><' are equivalent for not equal.
                                   2251 ;--------------------------------
                                   2252 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2253 ;---------------------
                                   2254 ; return array element
                                   2255 ; address from @(expr)
                                   2256 ; input:
                                   2257 ;   A 		TK_ARRAY
                                   2258 ; output:
                                   2259 ;   A 		TK_INTGR
                                   2260 ;	X 		element address 
                                   2261 ;----------------------
      000C91                       2262 get_array_element:
      000C91 CD 0C 61         [ 4] 2263 	call func_args 
      000C94 A1 01            [ 1] 2264 	cp a,#1
      000C96 27 03            [ 1] 2265 	jreq 1$
      000C98 CC 07 BB         [ 2] 2266 	jp syntax_error
      000C9B 85               [ 2] 2267 1$: popw x 
                                   2268 	; check for bounds 
      000C9C C3 00 21         [ 2] 2269 	cpw x,array_size 
      000C9F 23 05            [ 2] 2270 	jrule 3$
                                   2271 ; bounds {1..array_size}	
      000CA1 A6 0A            [ 1] 2272 2$: ld a,#ERR_BAD_VALUE 
      000CA3 CC 07 BD         [ 2] 2273 	jp tb_error 
      000CA6 5D               [ 2] 2274 3$: tnzw  x
      000CA7 27 F8            [ 1] 2275 	jreq 2$ 
      000CA9 58               [ 2] 2276 	sllw x 
      000CAA 89               [ 2] 2277 	pushw x 
      000CAB AE 16 90         [ 2] 2278 	ldw x,#tib
      000CAE 72 F0 01         [ 2] 2279 	subw x,(1,sp)
      000CB1                       2280 	_drop 2   
      000CB1 5B 02            [ 2]    1     addw sp,#2 
      000CB3 A6 84            [ 1] 2281 	ld a,#TK_INTGR
      000CB5 81               [ 4] 2282 	ret 
                                   2283 
                                   2284 
                                   2285 ;***********************************
                                   2286 ;   expression parse,execute 
                                   2287 ;***********************************
                                   2288 ;-----------------------------------
                                   2289 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2290 ;			 integer | function |
                                   2291 ;			 '('relation')' 
                                   2292 ; output:
                                   2293 ;   A    token attribute 
                                   2294 ;   X 	 integer
                                   2295 ; ---------------------------------
                           000001  2296 	NEG=1
                           000001  2297 	VSIZE=1
      000CB6                       2298 factor:
      000CB6                       2299 	_vars VSIZE 
      000CB6 52 01            [ 2]    1     sub sp,#VSIZE 
      000CB8 CD 08 AD         [ 4] 2300 	call next_token
      000CBB A1 02            [ 1] 2301 	cp a,#CMD_END  
      000CBD 25 3D            [ 1] 2302 	jrult 16$
      000CBF 6B 01            [ 1] 2303 1$:	ld (NEG,sp),a 
      000CC1 A4 30            [ 1] 2304 	and a,#TK_GRP_MASK
      000CC3 A1 10            [ 1] 2305 	cp a,#TK_GRP_ADD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000CC5 27 04            [ 1] 2306 	jreq 2$
      000CC7 7B 01            [ 1] 2307 	ld a,(NEG,sp)
      000CC9 20 03            [ 2] 2308 	jra 4$  
      000CCB                       2309 2$:	
      000CCB CD 08 AD         [ 4] 2310 	call next_token 
      000CCE                       2311 4$:	
      000CCE A1 81            [ 1] 2312 	cp a,#TK_IFUNC 
      000CD0 26 03            [ 1] 2313 	jrne 5$ 
      000CD2 FD               [ 4] 2314 	call (x) 
      000CD3 20 32            [ 2] 2315 	jra 18$ 
      000CD5                       2316 5$:
      000CD5 A1 84            [ 1] 2317 	cp a,#TK_INTGR
      000CD7 26 02            [ 1] 2318 	jrne 6$
      000CD9 20 2C            [ 2] 2319 	jra 18$
      000CDB                       2320 6$:
      000CDB A1 06            [ 1] 2321 	cp a,#TK_ARRAY
      000CDD 26 06            [ 1] 2322 	jrne 10$
      000CDF CD 0C 91         [ 4] 2323 	call get_array_element
      000CE2 FE               [ 2] 2324 	ldw x,(x)
      000CE3 20 22            [ 2] 2325 	jra 18$ 
      000CE5                       2326 10$:
      000CE5 A1 85            [ 1] 2327 	cp a,#TK_VAR 
      000CE7 26 03            [ 1] 2328 	jrne 12$
      000CE9 FE               [ 2] 2329 	ldw x,(x)
      000CEA 20 1B            [ 2] 2330 	jra 18$
      000CEC                       2331 12$:			
      000CEC A1 07            [ 1] 2332 	cp a,#TK_LPAREN
      000CEE 26 0C            [ 1] 2333 	jrne 16$
      000CF0 CD 0D AE         [ 4] 2334 	call relation
      000CF3 89               [ 2] 2335 	pushw x 
      000CF4 A6 08            [ 1] 2336 	ld a,#TK_RPAREN 
      000CF6 CD 0C 54         [ 4] 2337 	call expect
      000CF9 85               [ 2] 2338 	popw x 
      000CFA 20 0B            [ 2] 2339 	jra 18$	
      000CFC                       2340 16$:
      000CFC 4D               [ 1] 2341 	tnz a 
      000CFD 27 11            [ 1] 2342 	jreq 20$ 
      000CFF                       2343 	_unget_token
      000CFF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D04 4F               [ 1] 2344 	clr a 
      000D05 20 09            [ 2] 2345 	jra 20$ 
      000D07                       2346 18$: 
      000D07 A6 11            [ 1] 2347 	ld a,#TK_MINUS 
      000D09 11 01            [ 1] 2348 	cp a,(NEG,sp)
      000D0B 26 01            [ 1] 2349 	jrne 19$
      000D0D 50               [ 2] 2350 	negw x
      000D0E                       2351 19$:
      000D0E A6 84            [ 1] 2352 	ld a,#TK_INTGR
      000D10                       2353 20$:
      000D10                       2354 	_drop VSIZE
      000D10 5B 01            [ 2]    1     addw sp,#VSIZE 
      000D12 81               [ 4] 2355 	ret
                                   2356 
                                   2357 ;-----------------------------------
                                   2358 ; term ::= factor [['*'|'/'|'%'] factor]* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2359 ; output:
                                   2360 ;   A    	token attribute 
                                   2361 ;	X		integer
                                   2362 ;-----------------------------------
                           000001  2363 	N1=1   ; int16_t
                           000003  2364 	MULOP=3
                           000003  2365 	VSIZE=3
      000D13                       2366 term:
      000D13                       2367 	_vars VSIZE
      000D13 52 03            [ 2]    1     sub sp,#VSIZE 
      000D15 CD 0C B6         [ 4] 2368 	call factor
      000D18 4D               [ 1] 2369 	tnz a 
      000D19 27 47            [ 1] 2370 	jreq term_exit 
      000D1B                       2371 term01:	 ; check for  operator 
      000D1B 1F 01            [ 2] 2372 	ldw (N1,sp),x  ; save first factor 
      000D1D CD 08 AD         [ 4] 2373 	call next_token
      000D20 6B 03            [ 1] 2374 	ld (MULOP,sp),a
      000D22 A1 02            [ 1] 2375 	cp a,#CMD_END
      000D24 25 2F            [ 1] 2376 	jrult 8$
      000D26 A4 30            [ 1] 2377 	and a,#TK_GRP_MASK
      000D28 A1 20            [ 1] 2378 	cp a,#TK_GRP_MULT
      000D2A 27 02            [ 1] 2379 	jreq 1$
      000D2C 20 27            [ 2] 2380 	jra 8$
      000D2E                       2381 1$:	; got *|/|%
      000D2E CD 0C B6         [ 4] 2382 	call factor
      000D31 A1 84            [ 1] 2383 	cp a,#TK_INTGR
      000D33 27 03            [ 1] 2384 	jreq 2$
      000D35 CC 07 BB         [ 2] 2385 	jp syntax_error
      000D38 90 93            [ 1] 2386 2$:	ldw y,x 
      000D3A 1E 01            [ 2] 2387 	ldw x,(N1,sp)
      000D3C 7B 03            [ 1] 2388 	ld a,(MULOP,sp) 
      000D3E A1 20            [ 1] 2389 	cp a,#TK_MULT 
      000D40 26 05            [ 1] 2390 	jrne 3$
      000D42 CD 0B 17         [ 4] 2391 	call multiply 
      000D45 20 D4            [ 2] 2392 	jra term01
      000D47 A1 21            [ 1] 2393 3$: cp a,#TK_DIV 
      000D49 26 05            [ 1] 2394 	jrne 4$ 
      000D4B CD 0B D0         [ 4] 2395 	call divide 
      000D4E 20 CB            [ 2] 2396 	jra term01 
      000D50 CD 0B E6         [ 4] 2397 4$: call modulo
      000D53 20 C6            [ 2] 2398 	jra term01 
      000D55 7B 03            [ 1] 2399 8$: ld a,(MULOP,sp)
      000D57 27 05            [ 1] 2400 	jreq 9$ 
      000D59                       2401 	_unget_token
      000D59 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D5E 1E 01            [ 2] 2402 9$: ldw x,(N1,sp)
      000D60 A6 84            [ 1] 2403 	ld a,#TK_INTGR 	
      000D62                       2404 term_exit:
      000D62                       2405 	_drop VSIZE 
      000D62 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D64 81               [ 4] 2406 	ret 
                                   2407 
                                   2408 ;-------------------------------
                                   2409 ;  expr ::= term [['+'|'-'] term]*
                                   2410 ;  result range {-32768..32767}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2411 ;  output:
                                   2412 ;   A    token attribute 
                                   2413 ;   X	 integer   
                                   2414 ;-------------------------------
                           000001  2415 	N1=1
                           000003  2416 	N2=3 
                           000005  2417 	OP=5 
                           000005  2418 	VSIZE=5 
      000D65                       2419 expression:
      000D65                       2420 	_vars VSIZE 
      000D65 52 05            [ 2]    1     sub sp,#VSIZE 
      000D67 CD 0D 13         [ 4] 2421 	call term
      000D6A 4D               [ 1] 2422 	tnz a 
      000D6B 27 3E            [ 1] 2423 	jreq expr_exit 
      000D6D 1F 01            [ 2] 2424 1$:	ldw (N1,sp),x 
      000D6F CD 08 AD         [ 4] 2425 	call next_token
      000D72 6B 05            [ 1] 2426 	ld (OP,sp),a 
      000D74 A1 02            [ 1] 2427 	cp a,#CMD_END 
      000D76 25 26            [ 1] 2428 	jrult 8$ 
      000D78 A4 30            [ 1] 2429 	and a,#TK_GRP_MASK
      000D7A A1 10            [ 1] 2430 	cp a,#TK_GRP_ADD 
      000D7C 27 02            [ 1] 2431 	jreq 2$ 
      000D7E 20 1E            [ 2] 2432 	jra 8$
      000D80                       2433 2$: 
      000D80 CD 0D 13         [ 4] 2434 	call term
      000D83 A1 84            [ 1] 2435 	cp a,#TK_INTGR
      000D85 27 03            [ 1] 2436 	jreq 3$
      000D87 CC 07 BB         [ 2] 2437 	jp syntax_error
      000D8A 1F 03            [ 2] 2438 3$:	ldw (N2,sp),x 
      000D8C 1E 01            [ 2] 2439 	ldw x,(N1,sp)
      000D8E 7B 05            [ 1] 2440 	ld a,(OP,sp)
      000D90 A1 10            [ 1] 2441 	cp a,#TK_PLUS 
      000D92 26 05            [ 1] 2442 	jrne 4$
      000D94 72 FB 03         [ 2] 2443 	addw x,(N2,sp)
      000D97 20 D4            [ 2] 2444 	jra 1$ 
      000D99 72 F0 03         [ 2] 2445 4$:	subw x,(N2,sp)
      000D9C 20 CF            [ 2] 2446 	jra 1$
      000D9E 7B 05            [ 1] 2447 8$: ld a,(OP,sp)
      000DA0 27 05            [ 1] 2448 	jreq 9$ 
      000DA2                       2449 	_unget_token	
      000DA2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000DA7 1E 01            [ 2] 2450 9$: ldw x,(N1,sp)
      000DA9 A6 84            [ 1] 2451 	ld a,#TK_INTGR	
      000DAB                       2452 expr_exit:
      000DAB                       2453 	_drop VSIZE 
      000DAB 5B 05            [ 2]    1     addw sp,#VSIZE 
      000DAD 81               [ 4] 2454 	ret 
                                   2455 
                                   2456 ;---------------------------------------------
                                   2457 ; rel ::= expr rel_op expr
                                   2458 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   2459 ;  relation return  integer , zero is false 
                                   2460 ;  output:
                                   2461 ;    A 		token attribute  
                                   2462 ;	 X		integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2463 ;---------------------------------------------
                           000001  2464 	N1=1
                           000003  2465 	RELOP=3
                           000003  2466 	VSIZE=3 
      000DAE                       2467 relation: 
      000DAE                       2468 	_vars VSIZE
      000DAE 52 03            [ 2]    1     sub sp,#VSIZE 
      000DB0 CD 0D 65         [ 4] 2469 	call expression
      000DB3 4D               [ 1] 2470 	tnz a 
      000DB4 27 4D            [ 1] 2471 	jreq rel_exit
      000DB6 1F 01            [ 2] 2472 	ldw (N1,sp),x 
                                   2473 ; expect rel_op or leave 
      000DB8 CD 08 AD         [ 4] 2474 	call next_token 
      000DBB 6B 03            [ 1] 2475 	ld (RELOP,sp),a 
      000DBD A4 30            [ 1] 2476 	and a,#TK_GRP_MASK
      000DBF A1 30            [ 1] 2477 	cp a,#TK_GRP_RELOP 
      000DC1 26 33            [ 1] 2478 	jrne 8$
      000DC3                       2479 2$:	; expect another expression
      000DC3 CD 0D 65         [ 4] 2480 	call expression
      000DC6 A1 84            [ 1] 2481 	cp a,#TK_INTGR
      000DC8 27 03            [ 1] 2482 	jreq 3$
      000DCA CC 07 BB         [ 2] 2483 	jp syntax_error 
      000DCD CF 00 0C         [ 2] 2484 3$:	ldw acc16,x 
      000DD0 1E 01            [ 2] 2485 	ldw x,(N1,sp) 
      000DD2 72 B0 00 0C      [ 2] 2486 	subw x,acc16
      000DD6 26 06            [ 1] 2487 	jrne 4$
      000DD8 35 02 00 0D      [ 1] 2488 	mov acc8,#2 ; n1==n2
      000DDC 20 0C            [ 2] 2489 	jra 6$ 
      000DDE                       2490 4$: 
      000DDE 2C 06            [ 1] 2491 	jrsgt 5$  
      000DE0 35 04 00 0D      [ 1] 2492 	mov acc8,#4 ; n1<2 
      000DE4 20 04            [ 2] 2493 	jra 6$
      000DE6                       2494 5$:
      000DE6 35 01 00 0D      [ 1] 2495 	mov acc8,#1 ; n1>n2 
      000DEA                       2496 6$:
      000DEA 5F               [ 1] 2497 	clrw x 
      000DEB C6 00 0D         [ 1] 2498 	ld a, acc8  
      000DEE 14 03            [ 1] 2499 	and a,(RELOP,sp)
      000DF0 4D               [ 1] 2500 	tnz a 
      000DF1 27 0E            [ 1] 2501 	jreq 10$
      000DF3 5C               [ 1] 2502 	incw x 
      000DF4 20 0B            [ 2] 2503 	jra 10$  	
      000DF6 7B 03            [ 1] 2504 8$: ld a,(RELOP,sp)
      000DF8 27 05            [ 1] 2505 	jreq 9$
      000DFA                       2506 	_unget_token
      000DFA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000DFF                       2507 9$: 
      000DFF 1E 01            [ 2] 2508 	ldw x,(N1,sp)
      000E01                       2509 10$:
      000E01 A6 84            [ 1] 2510 	ld a,#TK_INTGR
      000E03                       2511 rel_exit:
      000E03                       2512 	_drop VSIZE
      000E03 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E05 81               [ 4] 2513 	ret 
                                   2514 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2515 ;--------------------------------
                                   2516 ; BASIC: SHOW 
                                   2517 ; print stack content in hexadecimal bytes 
                                   2518 ; 16 bytes per row 
                                   2519 ;--------------------------------
      000E06                       2520 show:
      000E06 AE 0E 20         [ 2] 2521 	ldw x,#cstk_prompt
      000E09 CD 00 00         [ 4] 2522 	call puts 
      000E0C 96               [ 1] 2523 	ldw x,sp 
      000E0D 1C 00 03         [ 2] 2524 	addw x,#3 ; ignore return address
      000E10 90 AE 18 00      [ 2] 2525 	ldw y,#RAM_SIZE  
      000E14 CF 00 0C         [ 2] 2526 	ldw acc16,x 
      000E17 72 B2 00 0C      [ 2] 2527 	subw y,acc16
      000E1B CD 03 F7         [ 4] 2528 	call hex_dump
      000E1E 4F               [ 1] 2529 	clr a 
      000E1F 81               [ 4] 2530 	ret
                                   2531 
      000E20 0A 63 6F 6E 74 65 6E  2532 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   2533 
                                   2534 
                                   2535 ;--------------------------------------------
                                   2536 ; BASIC: HEX 
                                   2537 ; select hexadecimal base for integer print
                                   2538 ;---------------------------------------------
      000E47                       2539 hex_base:
      000E47 35 10 00 0A      [ 1] 2540 	mov base,#16 
      000E4B 81               [ 4] 2541 	ret 
                                   2542 
                                   2543 ;--------------------------------------------
                                   2544 ; BASIC: DEC 
                                   2545 ; select decimal base for integer print
                                   2546 ;---------------------------------------------
      000E4C                       2547 dec_base:
      000E4C 35 0A 00 0A      [ 1] 2548 	mov base,#10
      000E50 81               [ 4] 2549 	ret 
                                   2550 
                                   2551 ;------------------------
                                   2552 ; BASIC: FREE 
                                   2553 ; return free size in text area
                                   2554 ; output:
                                   2555 ;   A 		TK_INTGR
                                   2556 ;   X 	    size integer
                                   2557 ;--------------------------
      000E51                       2558 free:
      000E51 AE 16 90         [ 2] 2559 	ldw x,#tib 
      000E54 72 B0 00 1E      [ 2] 2560 	subw x,txtend 
      000E58 A6 84            [ 1] 2561 	ld a,#TK_INTGR
      000E5A 81               [ 4] 2562 	ret 
                                   2563 
                                   2564 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2565 ;------------------------
                                   2566 ; BASIC: UBOUND  
                                   2567 ; return array variable size 
                                   2568 ; output:
                                   2569 ;   A 		TK_INTGR
                                   2570 ;   X 	    array size 
                                   2571 ;--------------------------
      000E5B                       2572 ubound:
      000E5B AE 16 90         [ 2] 2573 	ldw x,#tib
      000E5E 72 B0 00 1E      [ 2] 2574 	subw x,txtend 
      000E62 90 CE 00 04      [ 2] 2575 	ldw y,basicptr 
      000E66 90 C3 00 1E      [ 2] 2576 	cpw y,txtend 
      000E6A 25 0A            [ 1] 2577 	jrult 1$
      000E6C 3B 00 03         [ 1] 2578 	push count 
      000E6F 4B 00            [ 1] 2579 	push #0 
      000E71 72 F0 01         [ 2] 2580 	subw x,(1,sp)
      000E74                       2581 	_drop 2 
      000E74 5B 02            [ 2]    1     addw sp,#2 
      000E76 54               [ 2] 2582 1$:	srlw x 
      000E77 CF 00 21         [ 2] 2583 	ldw array_size,x
      000E7A A6 84            [ 1] 2584 	ld a,#TK_INTGR
      000E7C 81               [ 4] 2585 	ret 
                                   2586 
                                   2587 ;-----------------------------
                                   2588 ; BASIC: LET var=expr 
                                   2589 ; variable assignement 
                                   2590 ; output:
                                   2591 ;   A 		TK_NONE 
                                   2592 ;-----------------------------
      000E7D                       2593 let::
      000E7D CD 08 AD         [ 4] 2594 	call next_token 
      000E80 A1 85            [ 1] 2595 	cp a,#TK_VAR 
      000E82 27 0A            [ 1] 2596 	jreq let_var
      000E84 A1 06            [ 1] 2597 	cp a,#TK_ARRAY 
      000E86 27 03            [ 1] 2598 	jreq  let_array
      000E88 CC 07 BB         [ 2] 2599 	jp syntax_error
      000E8B                       2600 let_array:
      000E8B CD 0C 91         [ 4] 2601 	call get_array_element
      000E8E                       2602 let_var:
      000E8E 89               [ 2] 2603 	pushw x  
      000E8F CD 08 AD         [ 4] 2604 	call next_token 
      000E92 A1 32            [ 1] 2605 	cp a,#TK_EQUAL
      000E94 27 03            [ 1] 2606 	jreq 1$
      000E96 CC 07 BB         [ 2] 2607 	jp syntax_error
      000E99                       2608 1$:	
      000E99 CD 0D AE         [ 4] 2609 	call relation   
      000E9C A1 84            [ 1] 2610 	cp a,#TK_INTGR 
      000E9E 27 03            [ 1] 2611 	jreq 2$
      000EA0 CC 07 BB         [ 2] 2612 	jp syntax_error
      000EA3                       2613 2$:	
      000EA3 90 93            [ 1] 2614 	ldw y,x 
      000EA5 85               [ 2] 2615 	popw x   
      000EA6 FF               [ 2] 2616 	ldw (x),y   
      000EA7 81               [ 4] 2617 	ret 
                                   2618 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2619 ;----------------------------
                                   2620 ; BASIC: LIST [[start][,end]]
                                   2621 ; list program lines 
                                   2622 ; form start to end 
                                   2623 ; if empty argument list then 
                                   2624 ; list all.
                                   2625 ;----------------------------
                           000001  2626 	FIRST=1
                           000003  2627 	LAST=3 
                           000005  2628 	LN_PTR=5
                           000006  2629 	VSIZE=6 
      000EA8                       2630 list:
      000EA8 CE 00 1C         [ 2] 2631 	ldw x,txtbgn 
      000EAB C3 00 1E         [ 2] 2632 	cpw x,txtend 
      000EAE 2B 01            [ 1] 2633 	jrmi 1$
      000EB0 81               [ 4] 2634 	ret 
      000EB1                       2635 1$:	
      000EB1                       2636 	_vars VSIZE
      000EB1 52 06            [ 2]    1     sub sp,#VSIZE 
      000EB3 1F 05            [ 2] 2637 	ldw (LN_PTR,sp),x 
      000EB5 FE               [ 2] 2638 	ldw x,(x) 
      000EB6 1F 01            [ 2] 2639 	ldw (FIRST,sp),x ; list from first line 
      000EB8 AE 7F FF         [ 2] 2640 	ldw x,#MAX_LINENO ; biggest line number 
      000EBB 1F 03            [ 2] 2641 	ldw (LAST,sp),x 
      000EBD CD 0C 66         [ 4] 2642 	call arg_list
      000EC0 4D               [ 1] 2643 	tnz a
      000EC1 27 31            [ 1] 2644 	jreq list_loop 
      000EC3 A1 02            [ 1] 2645 	cp a,#2 
      000EC5 27 07            [ 1] 2646 	jreq 4$
      000EC7 A1 01            [ 1] 2647 	cp a,#1 
      000EC9 27 06            [ 1] 2648 	jreq first_line 
      000ECB CC 07 BB         [ 2] 2649 	jp syntax_error 
      000ECE 85               [ 2] 2650 4$:	popw x 
      000ECF 1F 05            [ 2] 2651 	ldw (LAST+2,sp),x 
      000ED1                       2652 first_line:
      000ED1 85               [ 2] 2653 	popw x
      000ED2 1F 01            [ 2] 2654 	ldw (FIRST,sp),x 
      000ED4                       2655 lines_skip:
      000ED4 CE 00 1C         [ 2] 2656 	ldw x,txtbgn
      000ED7 1F 05            [ 2] 2657 2$:	ldw (LN_PTR,sp),x 
      000ED9 C3 00 1E         [ 2] 2658 	cpw x,txtend 
      000EDC 2A 38            [ 1] 2659 	jrpl list_exit 
      000EDE FE               [ 2] 2660 	ldw x,(x) ;line# 
      000EDF 13 01            [ 2] 2661 	cpw x,(FIRST,sp)
      000EE1 2A 11            [ 1] 2662 	jrpl list_loop 
      000EE3 1E 05            [ 2] 2663 	ldw x,(LN_PTR,sp) 
      000EE5 E6 02            [ 1] 2664 	ld a,(2,x)
      000EE7 C7 00 0D         [ 1] 2665 	ld acc8,a 
      000EEA 72 5F 00 0C      [ 1] 2666 	clr acc16 
      000EEE 72 BB 00 0C      [ 2] 2667 	addw x,acc16
      000EF2 20 E3            [ 2] 2668 	jra 2$ 
                                   2669 ; print loop
      000EF4                       2670 list_loop:
      000EF4 1E 05            [ 2] 2671 	ldw x,(LN_PTR,sp)
      000EF6 E6 02            [ 1] 2672 	ld a,(2,x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EF8 CD 0F 24         [ 4] 2673 	call prt_basic_line
      000EFB 1E 05            [ 2] 2674 	ldw x,(LN_PTR,sp)
      000EFD E6 02            [ 1] 2675 	ld a,(2,x)
      000EFF C7 00 0D         [ 1] 2676 	ld acc8,a 
      000F02 72 5F 00 0C      [ 1] 2677 	clr acc16 
      000F06 72 BB 00 0C      [ 2] 2678 	addw x,acc16
      000F0A C3 00 1E         [ 2] 2679 	cpw x,txtend 
      000F0D 2A 07            [ 1] 2680 	jrpl list_exit
      000F0F 1F 05            [ 2] 2681 	ldw (LN_PTR,sp),x
      000F11 FE               [ 2] 2682 	ldw x,(x)
      000F12 13 03            [ 2] 2683 	cpw x,(LAST,sp)  
      000F14 2F DE            [ 1] 2684 	jrslt list_loop
      000F16                       2685 list_exit:
      000F16 55 00 03 00 01   [ 1] 2686 	mov in,count 
      000F1B AE 16 E0         [ 2] 2687 	ldw x,#pad 
      000F1E CF 00 04         [ 2] 2688 	ldw basicptr,x 
      000F21                       2689 	_drop VSIZE 
      000F21 5B 06            [ 2]    1     addw sp,#VSIZE 
      000F23 81               [ 4] 2690 	ret
                                   2691 
                                   2692 
                                   2693 ;--------------------------
                                   2694 ; decompile line from token list
                                   2695 ; and print it. 
                                   2696 ; input:
                                   2697 ;   A       stop at this position 
                                   2698 ;   X 		pointer at line
                                   2699 ; output:
                                   2700 ;   none 
                                   2701 ;--------------------------	
      000F24                       2702 prt_basic_line:
      000F24 C7 00 03         [ 1] 2703 	ld count,a 
      000F27 E6 02            [ 1] 2704 	ld a,(2,x)
      000F29 C1 00 03         [ 1] 2705 	cp a,count 
      000F2C 2A 03            [ 1] 2706 	jrpl 1$ 
      000F2E C7 00 03         [ 1] 2707 	ld count,a 
      000F31 CF 00 04         [ 2] 2708 1$:	ldw basicptr,x 
      000F34 90 AE 16 90      [ 2] 2709 	ldw y,#tib  
      000F38 CD 00 00         [ 4] 2710 	call decompile 
      000F3B CD 00 00         [ 4] 2711 	call puts 
      000F3E A6 0D            [ 1] 2712 	ld a,#CR 
      000F40 CD 03 2B         [ 4] 2713 	call putc 
      000F43 81               [ 4] 2714 	ret 
                                   2715 
                                   2716 
                                   2717 
                                   2718 ;---------------------------------
                                   2719 ; BASIC: PRINT|? arg_list 
                                   2720 ; print values from argument list
                                   2721 ;----------------------------------
                           000001  2722 	COMMA=1
                           000001  2723 	VSIZE=1
      000F44                       2724 print:
      000F44                       2725 	_vars VSIZE 
      000F44 52 01            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F46                       2726 reset_comma:
      000F46 0F 01            [ 1] 2727 	clr (COMMA,sp)
      000F48                       2728 prt_loop:
      000F48 CD 08 AD         [ 4] 2729 	call next_token
      000F4B A1 02            [ 1] 2730 	cp a,#CMD_END 
      000F4D 25 4F            [ 1] 2731 	jrult print_exit ; colon or end of line 
      000F4F A1 02            [ 1] 2732 	cp a,#TK_QSTR
      000F51 27 12            [ 1] 2733 	jreq 1$
      000F53 A1 03            [ 1] 2734 	cp a,#TK_CHAR 
      000F55 27 13            [ 1] 2735 	jreq 2$ 
      000F57 A1 82            [ 1] 2736 	cp a,#TK_CFUNC 
      000F59 27 15            [ 1] 2737 	jreq 3$
      000F5B A1 09            [ 1] 2738 	cp a,#TK_COMMA 
      000F5D 27 18            [ 1] 2739 	jreq 4$
      000F5F A1 0A            [ 1] 2740 	cp a,#TK_SHARP 
      000F61 27 18            [ 1] 2741 	jreq 5$
      000F63 20 28            [ 2] 2742 	jra 7$ 
      000F65                       2743 1$:	; print string 
      000F65 CD 00 00         [ 4] 2744 	call puts
      000F68 20 DC            [ 2] 2745 	jra reset_comma
      000F6A                       2746 2$:	; print character 
      000F6A 9F               [ 1] 2747 	ld a,xl 
      000F6B CD 03 2B         [ 4] 2748 	call putc 
      000F6E 20 D6            [ 2] 2749 	jra reset_comma 
      000F70                       2750 3$: ; print character function value  	
      000F70 FD               [ 4] 2751 	call (x)
      000F71 9F               [ 1] 2752 	ld a,xl 
      000F72 CD 03 2B         [ 4] 2753 	call putc
      000F75 20 CF            [ 2] 2754 	jra reset_comma 
      000F77                       2755 4$: ; set comma state 
      000F77 03 01            [ 1] 2756 	cpl (COMMA,sp)
      000F79 20 CD            [ 2] 2757 	jra prt_loop   
      000F7B                       2758 5$: ; # character must be followed by an integer   
      000F7B CD 08 AD         [ 4] 2759 	call next_token
      000F7E A1 84            [ 1] 2760 	cp a,#TK_INTGR 
      000F80 27 03            [ 1] 2761 	jreq 6$
      000F82 CC 07 BB         [ 2] 2762 	jp syntax_error 
      000F85                       2763 6$: ; set tab width
      000F85 9F               [ 1] 2764 	ld a,xl 
      000F86 A4 0F            [ 1] 2765 	and a,#15 
      000F88 C7 00 24         [ 1] 2766 	ld tab_width,a 
      000F8B 20 B9            [ 2] 2767 	jra reset_comma 
      000F8D                       2768 7$:	
      000F8D                       2769 	_unget_token 
      000F8D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000F92 CD 0D AE         [ 4] 2770 	call relation 
      000F95 A1 84            [ 1] 2771 	cp a,#TK_INTGR 
      000F97 26 05            [ 1] 2772 	jrne print_exit 
      000F99 CD 09 0E         [ 4] 2773     call print_int 
      000F9C 20 A8            [ 2] 2774 	jra reset_comma 
      000F9E                       2775 print_exit:
      000F9E 0D 01            [ 1] 2776 	tnz (COMMA,sp)
      000FA0 26 05            [ 1] 2777 	jrne 9$
      000FA2 A6 0D            [ 1] 2778 	ld a,#CR 
      000FA4 CD 03 2B         [ 4] 2779     call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FA7                       2780 9$:	_drop VSIZE 
      000FA7 5B 01            [ 2]    1     addw sp,#VSIZE 
      000FA9 81               [ 4] 2781 	ret 
                                   2782 
                                   2783 ;----------------------
                                   2784 ; 'save_context' and
                                   2785 ; 'rest_context' must be 
                                   2786 ; called at the same 
                                   2787 ; call stack depth 
                                   2788 ; i.e. SP must have the 
                                   2789 ; save value at  
                                   2790 ; entry point of both 
                                   2791 ; routine. 
                                   2792 ;---------------------
                           000004  2793 	CTXT_SIZE=4 ; size of saved data 
                                   2794 ;--------------------
                                   2795 ; save current BASIC
                                   2796 ; interpreter context 
                                   2797 ; on stack 
                                   2798 ;--------------------
      000FAA                       2799 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000FAA                       2800 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000FAA                       2801 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000FAA                       2802 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000FAA                       2803 save_context:
      000FAA CE 00 04         [ 2] 2804 	ldw x,basicptr 
      000FAD 1F 03            [ 2] 2805 	ldw (BPTR,sp),x
      000FAF C6 00 01         [ 1] 2806 	ld a,in 
      000FB2 6B 05            [ 1] 2807 	ld (IN,sp),a
      000FB4 C6 00 03         [ 1] 2808 	ld a,count 
      000FB7 6B 06            [ 1] 2809 	ld (CNT,sp),a  
      000FB9 81               [ 4] 2810 	ret
                                   2811 
                                   2812 ;-----------------------
                                   2813 ; restore previously saved 
                                   2814 ; BASIC interpreter context 
                                   2815 ; from stack 
                                   2816 ;-------------------------
      000FBA                       2817 rest_context:
      000FBA 1E 03            [ 2] 2818 	ldw x,(BPTR,sp)
      000FBC CF 00 04         [ 2] 2819 	ldw basicptr,x 
      000FBF 7B 05            [ 1] 2820 	ld a,(IN,sp)
      000FC1 C7 00 01         [ 1] 2821 	ld in,a
      000FC4 7B 06            [ 1] 2822 	ld a,(CNT,sp)
      000FC6 C7 00 03         [ 1] 2823 	ld count,a  
      000FC9 81               [ 4] 2824 	ret
                                   2825 
                                   2826 
                                   2827 
                                   2828 ;------------------------------------------
                                   2829 ; BASIC: INPUT [string]var[,[string]var]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2830 ; input value in variables 
                                   2831 ; [string] optionally can be used as prompt 
                                   2832 ;-----------------------------------------
                           000001  2833 	CX_BPTR=1
                           000003  2834 	CX_IN=3
                           000004  2835 	CX_CNT=4
                           000005  2836 	SKIP=5
                           000006  2837 	VAR_ADDR=6
                           000007  2838 	VSIZE=7
      000FCA                       2839 input_var:
      000FCA                       2840 	_vars VSIZE 
      000FCA 52 07            [ 2]    1     sub sp,#VSIZE 
      000FCC                       2841 input_loop:
      000FCC 0F 05            [ 1] 2842 	clr (SKIP,sp)
      000FCE CD 08 AD         [ 4] 2843 	call next_token 
      000FD1 A1 02            [ 1] 2844 	cp a,#TK_QSTR 
      000FD3 26 08            [ 1] 2845 	jrne 1$ 
      000FD5 CD 00 00         [ 4] 2846 	call puts 
      000FD8 03 05            [ 1] 2847 	cpl (SKIP,sp)
      000FDA CD 08 AD         [ 4] 2848 	call next_token 
      000FDD A1 85            [ 1] 2849 1$: cp a,#TK_VAR  
      000FDF 27 03            [ 1] 2850 	jreq 2$ 
      000FE1 CC 07 BB         [ 2] 2851 	jp syntax_error
      000FE4 1F 06            [ 2] 2852 2$:	ldw (VAR_ADDR,sp),x 
      000FE6 0D 05            [ 1] 2853 	tnz (SKIP,sp)
      000FE8 26 06            [ 1] 2854 	jrne 21$ 
      000FEA CD 00 00         [ 4] 2855 	call var_name 
      000FED CD 03 2B         [ 4] 2856 	call putc   
      000FF0                       2857 21$:
      000FF0 A6 3A            [ 1] 2858 	ld a,#':
      000FF2 CD 03 2B         [ 4] 2859 	call putc 
      000FF5 CD 0F AA         [ 4] 2860 	call save_context 
      000FF8 72 5F 00 03      [ 1] 2861 	clr count  
      000FFC CD 00 00         [ 4] 2862 	call readln 
      000FFF AE 16 90         [ 2] 2863 	ldw x,#tib 
      001002 3B 00 03         [ 1] 2864 	push count
      001005 4B 00            [ 1] 2865 	push #0 
      001007 72 FB 01         [ 2] 2866 	addw x,(1,sp)
      00100A 5C               [ 1] 2867 	incw x 
      00100B                       2868 	_drop 2 
      00100B 5B 02            [ 2]    1     addw sp,#2 
      00100D 72 5F 00 01      [ 1] 2869 	clr in 
      001011 CD 00 00         [ 4] 2870 	call get_token
      001014 A1 84            [ 1] 2871 	cp a,#TK_INTGR
      001016 27 06            [ 1] 2872 	jreq 3$ 
      001018 CD 0F BA         [ 4] 2873 	call rest_context 
      00101B CC 07 BB         [ 2] 2874 	jp syntax_error
      00101E 16 06            [ 2] 2875 3$: ldw y,(VAR_ADDR,sp) 
      001020 90 FF            [ 2] 2876 	ldw (y),x 
      001022 CD 0F BA         [ 4] 2877 	call rest_context
      001025 CD 08 AD         [ 4] 2878 	call next_token 
      001028 A1 09            [ 1] 2879 	cp a,#TK_COMMA 
      00102A 27 A0            [ 1] 2880 	jreq input_loop 
      00102C A1 01            [ 1] 2881 	cp a,#TK_COLON 
      00102E 23 03            [ 2] 2882     jrule input_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001030 CC 07 BB         [ 2] 2883 	jp syntax_error 
      001033                       2884 input_exit:
      001033                       2885 	_drop VSIZE 
      001033 5B 07            [ 2]    1     addw sp,#VSIZE 
      001035 81               [ 4] 2886 	ret 
                                   2887 
                                   2888 
                                   2889 ;---------------------
                                   2890 ; BASIC: REMARK | ' 
                                   2891 ; skip comment to end of line 
                                   2892 ;---------------------- 
      001036                       2893 remark::
      001036 55 00 03 00 01   [ 1] 2894 	mov in,count 
      00103B 81               [ 4] 2895  	ret 
                                   2896 
                                   2897 
                                   2898 ;---------------------
                                   2899 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2900 ; read in loop 'addr'  
                                   2901 ; apply & 'mask' to value 
                                   2902 ; loop while result==0.  
                                   2903 ; 'xor_mask' is used to 
                                   2904 ; invert the wait logic.
                                   2905 ; i.e. loop while not 0.
                                   2906 ;---------------------
                           000001  2907 	XMASK=1 
                           000002  2908 	MASK=2
                           000003  2909 	ADDR=3
                           000004  2910 	VSIZE=4
      00103C                       2911 wait: 
      00103C                       2912 	_vars VSIZE
      00103C 52 04            [ 2]    1     sub sp,#VSIZE 
      00103E 0F 01            [ 1] 2913 	clr (XMASK,sp) 
      001040 CD 0C 66         [ 4] 2914 	call arg_list 
      001043 A1 02            [ 1] 2915 	cp a,#2
      001045 24 03            [ 1] 2916 	jruge 0$
      001047 CC 07 BB         [ 2] 2917 	jp syntax_error 
      00104A A1 03            [ 1] 2918 0$:	cp a,#3
      00104C 25 04            [ 1] 2919 	jrult 1$
      00104E 85               [ 2] 2920 	popw x 
      00104F 9F               [ 1] 2921 	ld a,xl
      001050 6B 01            [ 1] 2922 	ld (XMASK,sp),a 
      001052 85               [ 2] 2923 1$: popw x ; mask 
      001053 9F               [ 1] 2924 	ld a,xl 
      001054 6B 02            [ 1] 2925 	ld (MASK,sp),a 
      001056 85               [ 2] 2926 	popw x ; address 
      001057 F6               [ 1] 2927 2$:	ld a,(x)
      001058 14 02            [ 1] 2928 	and a,(MASK,sp)
      00105A 18 01            [ 1] 2929 	xor a,(XMASK,sp)
      00105C 27 F9            [ 1] 2930 	jreq 2$ 
      00105E                       2931 	_drop VSIZE 
      00105E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001060 81               [ 4] 2932 	ret 
                                   2933 
                                   2934 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2935 ; BASIC: BSET addr,mask
                                   2936 ; set bits at 'addr' corresponding 
                                   2937 ; to those of 'mask' that are at 1.
                                   2938 ; arguments:
                                   2939 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2940 ;   mask        mask|addr
                                   2941 ; output:
                                   2942 ;	none 
                                   2943 ;--------------------------
      001061                       2944 bit_set:
      001061 CD 0C 66         [ 4] 2945 	call arg_list 
      001064 A1 02            [ 1] 2946 	cp a,#2	 
      001066 27 03            [ 1] 2947 	jreq 1$ 
      001068 CC 07 BB         [ 2] 2948 	jp syntax_error
      00106B                       2949 1$: 
      00106B 85               [ 2] 2950 	popw x ; mask 
      00106C 9F               [ 1] 2951 	ld a,xl 
      00106D 85               [ 2] 2952 	popw x ; addr  
      00106E FA               [ 1] 2953 	or a,(x)
      00106F F7               [ 1] 2954 	ld (x),a
      001070 81               [ 4] 2955 	ret 
                                   2956 
                                   2957 ;---------------------
                                   2958 ; BASIC: BRES addr,mask
                                   2959 ; reset bits at 'addr' corresponding 
                                   2960 ; to those of 'mask' that are at 1.
                                   2961 ; arguments:
                                   2962 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2963 ;   mask	    ~mask&*addr  
                                   2964 ; output:
                                   2965 ;	none 
                                   2966 ;--------------------------
      001071                       2967 bit_reset:
      001071 CD 0C 66         [ 4] 2968 	call arg_list 
      001074 A1 02            [ 1] 2969 	cp a,#2  
      001076 27 03            [ 1] 2970 	jreq 1$ 
      001078 CC 07 BB         [ 2] 2971 	jp syntax_error
      00107B                       2972 1$: 
      00107B 85               [ 2] 2973 	popw x ; mask 
      00107C 9F               [ 1] 2974 	ld a,xl 
      00107D 43               [ 1] 2975 	cpl a 
      00107E 85               [ 2] 2976 	popw x ; addr  
      00107F F4               [ 1] 2977 	and a,(x)
      001080 F7               [ 1] 2978 	ld (x),a 
      001081 81               [ 4] 2979 	ret 
                                   2980 
                                   2981 ;---------------------
                                   2982 ; BASIC: BTOGL addr,mask
                                   2983 ; toggle bits at 'addr' corresponding 
                                   2984 ; to those of 'mask' that are at 1.
                                   2985 ; arguments:
                                   2986 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2987 ;   mask	    mask^*addr  
                                   2988 ; output:
                                   2989 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2990 ;--------------------------
      001082                       2991 bit_toggle:
      001082 CD 0C 66         [ 4] 2992 	call arg_list 
      001085 A1 02            [ 1] 2993 	cp a,#2 
      001087 27 03            [ 1] 2994 	jreq 1$ 
      001089 CC 07 BB         [ 2] 2995 	jp syntax_error
      00108C 85               [ 2] 2996 1$: popw x ; mask 
      00108D 9F               [ 1] 2997 	ld a,xl 
      00108E 85               [ 2] 2998 	popw x ; addr  
      00108F F8               [ 1] 2999 	xor a,(x)
      001090 F7               [ 1] 3000 	ld (x),a 
      001091 81               [ 4] 3001 	ret 
                                   3002 
                                   3003 
                                   3004 ;---------------------
                                   3005 ; BASIC: BTEST(addr,bit)
                                   3006 ; return bit value at 'addr' 
                                   3007 ; bit is in range {0..7}.
                                   3008 ; arguments:
                                   3009 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3010 ;   bit 	    bit position {0..7}  
                                   3011 ; output:
                                   3012 ;	none 
                                   3013 ;--------------------------
      001092                       3014 bit_test:
      001092 CD 0C 61         [ 4] 3015 	call func_args 
      001095 A1 02            [ 1] 3016 	cp a,#2
      001097 27 03            [ 1] 3017 	jreq 0$
      001099 CC 07 BB         [ 2] 3018 	jp syntax_error
      00109C                       3019 0$:	
      00109C 85               [ 2] 3020 	popw x 
      00109D 9F               [ 1] 3021 	ld a,xl 
      00109E A4 07            [ 1] 3022 	and a,#7
      0010A0 88               [ 1] 3023 	push a   
      0010A1 A6 01            [ 1] 3024 	ld a,#1 
      0010A3 0D 01            [ 1] 3025 1$: tnz (1,sp)
      0010A5 27 05            [ 1] 3026 	jreq 2$
      0010A7 48               [ 1] 3027 	sll a 
      0010A8 0A 01            [ 1] 3028 	dec (1,sp)
      0010AA 20 F7            [ 2] 3029 	jra 1$
      0010AC                       3030 2$: _drop 1 
      0010AC 5B 01            [ 2]    1     addw sp,#1 
      0010AE 85               [ 2] 3031 	popw x 
      0010AF F4               [ 1] 3032 	and a,(x)
      0010B0 27 02            [ 1] 3033 	jreq 3$
      0010B2 A6 01            [ 1] 3034 	ld a,#1 
      0010B4 5F               [ 1] 3035 3$:	clrw x 
      0010B5 97               [ 1] 3036 	ld xl,a 
      0010B6 A6 84            [ 1] 3037 	ld a,#TK_INTGR
      0010B8 81               [ 4] 3038 	ret
                                   3039 
                                   3040 
                                   3041 ;--------------------
                                   3042 ; BASIC: POKE addr,byte
                                   3043 ; put a byte at addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3044 ;--------------------
      0010B9                       3045 poke:
      0010B9 CD 0C 66         [ 4] 3046 	call arg_list 
      0010BC A1 02            [ 1] 3047 	cp a,#2
      0010BE 27 03            [ 1] 3048 	jreq 1$
      0010C0 CC 07 BB         [ 2] 3049 	jp syntax_error
      0010C3                       3050 1$:	
      0010C3 85               [ 2] 3051 	popw x  
      0010C4 9F               [ 1] 3052     ld a,xl 
      0010C5 85               [ 2] 3053 	popw x 
      0010C6 F7               [ 1] 3054 	ld (x),a 
      0010C7 81               [ 4] 3055 	ret 
                                   3056 
                                   3057 ;-----------------------
                                   3058 ; BASIC: PEEK(addr)
                                   3059 ; get the byte at addr 
                                   3060 ; input:
                                   3061 ;	none 
                                   3062 ; output:
                                   3063 ;	X 		value 
                                   3064 ;-----------------------
      0010C8                       3065 peek:
      0010C8 CD 0C 61         [ 4] 3066 	call func_args
      0010CB A1 01            [ 1] 3067 	cp a,#1 
      0010CD 27 03            [ 1] 3068 	jreq 1$
      0010CF CC 07 BB         [ 2] 3069 	jp syntax_error
      0010D2 85               [ 2] 3070 1$: popw x 
      0010D3 F6               [ 1] 3071 	ld a,(x)
      0010D4 5F               [ 1] 3072 	clrw x 
      0010D5 97               [ 1] 3073 	ld xl,a 
      0010D6 A6 84            [ 1] 3074 	ld a,#TK_INTGR
      0010D8 81               [ 4] 3075 	ret 
                                   3076 
                                   3077 ;---------------------------
                                   3078 ; BASIC IF expr : instructions
                                   3079 ; evaluate expr and if true 
                                   3080 ; execute instructions on same line. 
                                   3081 ;----------------------------
      0010D9                       3082 if: 
      0010D9 CD 0D AE         [ 4] 3083 	call relation 
      0010DC A1 84            [ 1] 3084 	cp a,#TK_INTGR
      0010DE 27 03            [ 1] 3085 	jreq 1$ 
      0010E0 CC 07 BB         [ 2] 3086 	jp syntax_error
      0010E3 4F               [ 1] 3087 1$:	clr a 
      0010E4 5D               [ 2] 3088 	tnzw x 
      0010E5 26 05            [ 1] 3089 	jrne 9$  
                                   3090 ;skip to next line
      0010E7 55 00 03 00 01   [ 1] 3091 	mov in,count
      0010EC 81               [ 4] 3092 9$:	ret 
                                   3093 
                                   3094 ;------------------------
                                   3095 ; BASIC: FOR var=expr 
                                   3096 ; set variable to expression 
                                   3097 ; leave variable address 
                                   3098 ; on stack and set
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3099 ; FLOOP bit in 'flags'
                                   3100 ;-----------------
                           000001  3101 	RETL1=1 ; return address  
                           000003  3102 	FSTEP=3  ; variable increment
                           000005  3103 	LIMIT=5 ; loop limit 
                           000007  3104 	CVAR=7   ; control variable 
                           000009  3105 	INW=9   ;  in.w saved
                           00000B  3106 	BPTR=11 ; baseptr saved
                           00000A  3107 	VSIZE=10  
      0010ED                       3108 for: ; { -- var_addr }
      0010ED 85               [ 2] 3109 	popw x ; call return address 
      0010EE                       3110 	_vars VSIZE 
      0010EE 52 0A            [ 2]    1     sub sp,#VSIZE 
      0010F0 89               [ 2] 3111 	pushw x  ; RETL1 
      0010F1 A6 85            [ 1] 3112 	ld a,#TK_VAR 
      0010F3 CD 0C 54         [ 4] 3113 	call expect
      0010F6 1F 07            [ 2] 3114 	ldw (CVAR,sp),x  ; control variable 
      0010F8 CD 0E 8E         [ 4] 3115 	call let_var 
      0010FB 72 14 00 23      [ 1] 3116 	bset flags,#FLOOP 
                                   3117 ; open space on stack for loop data 
      0010FF 5F               [ 1] 3118 	clrw x 
      001100 1F 0B            [ 2] 3119 	ldw (BPTR,sp),x 
      001102 1F 09            [ 2] 3120 	ldw (INW,sp),x 
      001104 CD 08 AD         [ 4] 3121 	call next_token 
      001107 A1 80            [ 1] 3122 	cp a,#TK_CMD 
      001109 27 03            [ 1] 3123 	jreq 1$
      00110B CC 07 BB         [ 2] 3124 	jp syntax_error
      00110E                       3125 1$:  
      00110E A3 11 16         [ 2] 3126 	cpw x,#to 
      001111 27 03            [ 1] 3127 	jreq to
      001113 CC 07 BB         [ 2] 3128 	jp syntax_error 
                                   3129 
                                   3130 ;-----------------------------------
                                   3131 ; BASIC: TO expr 
                                   3132 ; second part of FOR loop initilization
                                   3133 ; leave limit on stack and set 
                                   3134 ; FTO bit in 'flags'
                                   3135 ;-----------------------------------
      001116                       3136 to: ; { var_addr -- var_addr limit step }
      001116 72 04 00 23 03   [ 2] 3137 	btjt flags,#FLOOP,1$
      00111B CC 07 BB         [ 2] 3138 	jp syntax_error
      00111E CD 0D AE         [ 4] 3139 1$: call relation  
      001121 A1 84            [ 1] 3140 	cp a,#TK_INTGR 
      001123 27 03            [ 1] 3141 	jreq 2$ 
      001125 CC 07 BB         [ 2] 3142 	jp syntax_error
      001128 1F 05            [ 2] 3143 2$: ldw (LIMIT,sp),x
                                   3144 ;	ldw x,in.w 
      00112A CD 08 AD         [ 4] 3145 	call next_token
      00112D A1 00            [ 1] 3146 	cp a,#TK_NONE  
      00112F 27 0E            [ 1] 3147 	jreq 4$ 
      001131 A1 80            [ 1] 3148 	cp a,#TK_CMD
      001133 26 05            [ 1] 3149 	jrne 3$
      001135 A3 11 46         [ 2] 3150 	cpw x,#step 
      001138 27 0C            [ 1] 3151 	jreq step
      00113A                       3152 3$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      00113A                       3153 	_unget_token   	 
      00113A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00113F                       3154 4$:	
      00113F AE 00 01         [ 2] 3155 	ldw x,#1   ; default step  
      001142 1F 03            [ 2] 3156 	ldw (FSTEP,sp),x 
      001144 20 14            [ 2] 3157 	jra store_loop_addr 
                                   3158 
                                   3159 
                                   3160 ;----------------------------------
                                   3161 ; BASIC: STEP expr 
                                   3162 ; optional third par of FOR loop
                                   3163 ; initialization. 	
                                   3164 ;------------------------------------
      001146                       3165 step: ; {var limit -- var limit step}
      001146 72 04 00 23 03   [ 2] 3166 	btjt flags,#FLOOP,1$
      00114B CC 07 BB         [ 2] 3167 	jp syntax_error
      00114E CD 0D AE         [ 4] 3168 1$: call relation
      001151 A1 84            [ 1] 3169 	cp a,#TK_INTGR
      001153 27 03            [ 1] 3170 	jreq 2$
      001155 CC 07 BB         [ 2] 3171 	jp syntax_error
      001158 1F 03            [ 2] 3172 2$:	ldw (FSTEP,sp),x ; step
                                   3173 ; leave loop back entry point on cstack 
                                   3174 ; cstack is 1 call deep from interpreter
      00115A                       3175 store_loop_addr:
      00115A CE 00 04         [ 2] 3176 	ldw x,basicptr  
      00115D 1F 0B            [ 2] 3177 	ldw (BPTR,sp),x 
      00115F CE 00 00         [ 2] 3178 	ldw x,in.w 
      001162 1F 09            [ 2] 3179 	ldw (INW,sp),x   
      001164 72 15 00 23      [ 1] 3180 	bres flags,#FLOOP 
      001168 72 5C 00 20      [ 1] 3181 	inc loop_depth  
      00116C 81               [ 4] 3182 	ret 
                                   3183 
                                   3184 ;--------------------------------
                                   3185 ; BASIC: NEXT var 
                                   3186 ; FOR loop control 
                                   3187 ; increment variable with step 
                                   3188 ; and compare with limit 
                                   3189 ; loop if threshold not crossed.
                                   3190 ; else stack. 
                                   3191 ; and decrement 'loop_depth' 
                                   3192 ;--------------------------------
      00116D                       3193 next: ; {var limit step retl1 -- [var limit step ] }
      00116D 72 5D 00 20      [ 1] 3194 	tnz loop_depth 
      001171 26 03            [ 1] 3195 	jrne 1$ 
      001173 CC 07 BB         [ 2] 3196 	jp syntax_error 
      001176                       3197 1$: 
      001176 A6 85            [ 1] 3198 	ld a,#TK_VAR 
      001178 CD 0C 54         [ 4] 3199 	call expect
                                   3200 ; check for good variable after NEXT 	 
      00117B 13 07            [ 2] 3201 	cpw x,(CVAR,sp)
      00117D 27 03            [ 1] 3202 	jreq 2$  
      00117F CC 07 BB         [ 2] 3203 	jp syntax_error ; not the good one 
      001182                       3204 2$: ; increment variable 
      001182 FE               [ 2] 3205 	ldw x,(x)  ; get var value 
      001183 72 FB 03         [ 2] 3206 	addw x,(FSTEP,sp) ; var+step 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001186 16 07            [ 2] 3207 	ldw y,(CVAR,sp)
      001188 90 FF            [ 2] 3208 	ldw (y),x ; save var new value 
                                   3209 ; check sign of STEP  
      00118A A6 80            [ 1] 3210 	ld a,#0x80
      00118C 15 03            [ 1] 3211 	bcp a,(FSTEP,sp)
      00118E 2A 06            [ 1] 3212 	jrpl 4$
                                   3213 ;negative step 
      001190 13 05            [ 2] 3214 	cpw x,(LIMIT,sp)
      001192 2F 1B            [ 1] 3215 	jrslt loop_done
      001194 20 04            [ 2] 3216 	jra loop_back 
      001196                       3217 4$: ; positive step
      001196 13 05            [ 2] 3218 	cpw x,(LIMIT,sp)
      001198 2C 15            [ 1] 3219 	jrsgt loop_done
      00119A                       3220 loop_back:
      00119A 1E 0B            [ 2] 3221 	ldw x,(BPTR,sp)
      00119C CF 00 04         [ 2] 3222 	ldw basicptr,x 
      00119F 72 01 00 23 05   [ 2] 3223 	btjf flags,#FRUN,1$ 
      0011A4 E6 02            [ 1] 3224 	ld a,(2,x)
      0011A6 C7 00 03         [ 1] 3225 	ld count,a
      0011A9 1E 09            [ 2] 3226 1$:	ldw x,(INW,sp)
      0011AB CF 00 00         [ 2] 3227 	ldw in.w,x 
      0011AE 81               [ 4] 3228 	ret 
      0011AF                       3229 loop_done:
                                   3230 	; remove loop data from stack  
      0011AF 85               [ 2] 3231 	popw x
      0011B0                       3232 	_drop VSIZE 
      0011B0 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0011B2 72 5A 00 20      [ 1] 3233 	dec loop_depth 
                                   3234 ;	pushw x 
                                   3235 ;	ret 
      0011B6 FC               [ 2] 3236 	jp (x)
                                   3237 
                                   3238 ;----------------------------
                                   3239 ; called by goto/gosub
                                   3240 ; to get target line number 
                                   3241 ;---------------------------
      0011B7                       3242 get_target_line:
      0011B7 CD 0D AE         [ 4] 3243 	call relation 
      0011BA A1 84            [ 1] 3244 	cp a,#TK_INTGR
      0011BC 27 03            [ 1] 3245 	jreq 1$
      0011BE CC 07 BB         [ 2] 3246 	jp syntax_error
      0011C1 CD 00 00         [ 4] 3247 1$:	call search_lineno  
      0011C4 5D               [ 2] 3248 	tnzw x 
      0011C5 26 05            [ 1] 3249 	jrne 2$ 
      0011C7 A6 05            [ 1] 3250 	ld a,#ERR_NO_LINE 
      0011C9 CC 07 BD         [ 2] 3251 	jp tb_error 
      0011CC 81               [ 4] 3252 2$:	ret 
                                   3253 
                                   3254 ;------------------------
                                   3255 ; BASIC: GOTO line# 
                                   3256 ; jump to line# 
                                   3257 ; here cstack is 2 call deep from interpreter 
                                   3258 ;------------------------
      0011CD                       3259 goto:
      0011CD 72 00 00 23 06   [ 2] 3260 	btjt flags,#FRUN,0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0011D2 A6 06            [ 1] 3261 	ld a,#ERR_RUN_ONLY
      0011D4 CC 07 BD         [ 2] 3262 	jp tb_error 
      0011D7 81               [ 4] 3263 	ret 
      0011D8 CD 11 B7         [ 4] 3264 0$:	call get_target_line
      0011DB                       3265 jp_to_target:
      0011DB CF 00 04         [ 2] 3266 	ldw basicptr,x 
      0011DE E6 02            [ 1] 3267 	ld a,(2,x)
      0011E0 C7 00 03         [ 1] 3268 	ld count,a 
      0011E3 35 03 00 01      [ 1] 3269 	mov in,#3 
      0011E7 81               [ 4] 3270 	ret 
                                   3271 
                                   3272 
                                   3273 ;--------------------
                                   3274 ; BASIC: GOSUB line#
                                   3275 ; basic subroutine call
                                   3276 ; actual line# and basicptr 
                                   3277 ; are saved on cstack
                                   3278 ; here cstack is 2 call deep from interpreter 
                                   3279 ;--------------------
                           000003  3280 	RET_ADDR=3
                           000005  3281 	RET_INW=5
                           000004  3282 	VSIZE=4  
      0011E8                       3283 gosub:
      0011E8 72 00 00 23 06   [ 2] 3284 	btjt flags,#FRUN,0$ 
      0011ED A6 06            [ 1] 3285 	ld a,#ERR_RUN_ONLY
      0011EF CC 07 BD         [ 2] 3286 	jp tb_error 
      0011F2 81               [ 4] 3287 	ret 
      0011F3 85               [ 2] 3288 0$:	popw x 
      0011F4                       3289 	_vars VSIZE  
      0011F4 52 04            [ 2]    1     sub sp,#VSIZE 
      0011F6 89               [ 2] 3290 	pushw x 
      0011F7 CE 00 04         [ 2] 3291 	ldw x,basicptr
      0011FA 1F 03            [ 2] 3292 	ldw (RET_ADDR,sp),x 
      0011FC CD 11 B7         [ 4] 3293 	call get_target_line  
      0011FF 89               [ 2] 3294 	pushw x 
      001200 CE 00 00         [ 2] 3295 	ldw x,in.w 
      001203 1F 07            [ 2] 3296 	ldw (RET_INW+2,sp),x
      001205 85               [ 2] 3297 	popw x 
      001206 20 D3            [ 2] 3298 	jra jp_to_target
                                   3299 
                                   3300 ;------------------------
                                   3301 ; BASIC: RETURN 
                                   3302 ; exit from a subroutine 
                                   3303 ; 
                                   3304 ;------------------------
      001208                       3305 return:
      001208 72 00 00 23 05   [ 2] 3306 	btjt flags,#FRUN,0$ 
      00120D A6 06            [ 1] 3307 	ld a,#ERR_RUN_ONLY
      00120F CC 07 BD         [ 2] 3308 	jp tb_error 
      001212                       3309 0$:	
      001212 1E 03            [ 2] 3310 	ldw x,(RET_ADDR,sp) 
      001214 CF 00 04         [ 2] 3311 	ldw basicptr,x
      001217 E6 02            [ 1] 3312 	ld a,(2,x)
      001219 C7 00 03         [ 1] 3313 	ld count,a  
      00121C 1E 05            [ 2] 3314 	ldw x,(RET_INW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00121E CF 00 00         [ 2] 3315 	ldw in.w,x 
      001221 85               [ 2] 3316 	popw x 
      001222                       3317 	_drop VSIZE 
      001222 5B 04            [ 2]    1     addw sp,#VSIZE 
      001224 89               [ 2] 3318 	pushw x
      001225 81               [ 4] 3319 	ret  
                                   3320 
                                   3321 
                                   3322 ;----------------------------------
                                   3323 ; BASIC: RUN
                                   3324 ; run BASIC program in RAM
                                   3325 ;----------------------------------- 
      001226                       3326 run: 
      001226 72 01 00 23 02   [ 2] 3327 	btjf flags,#FRUN,0$  
      00122B 4F               [ 1] 3328 	clr a 
      00122C 81               [ 4] 3329 	ret
      00122D                       3330 0$: 
      00122D 72 09 00 23 12   [ 2] 3331 	btjf flags,#FBREAK,1$
      001232                       3332 	_drop 2 
      001232 5B 02            [ 2]    1     addw sp,#2 
      001234 CD 0F BA         [ 4] 3333 	call rest_context
      001237                       3334 	_drop CTXT_SIZE 
      001237 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001239 72 19 00 23      [ 1] 3335 	bres flags,#FBREAK 
      00123D 72 10 00 23      [ 1] 3336 	bset flags,#FRUN 
      001241 CC 08 61         [ 2] 3337 	jp interpreter 
      001244 CE 00 1C         [ 2] 3338 1$:	ldw x,txtbgn
      001247 C3 00 1E         [ 2] 3339 	cpw x,txtend 
      00124A 2B 0C            [ 1] 3340 	jrmi run_it 
      00124C AE 07 54         [ 2] 3341 	ldw x,#err_no_prog
      00124F CD 00 00         [ 4] 3342 	call puts 
      001252 55 00 03 00 01   [ 1] 3343 	mov in,count
      001257 81               [ 4] 3344 	ret 
      001258                       3345 run_it:	 
      001258 CD 0E 5B         [ 4] 3346     call ubound 
      00125B                       3347 	_drop 2 ; drop return address 
      00125B 5B 02            [ 2]    1     addw sp,#2 
                                   3348 ; clear data pointer 
      00125D 5F               [ 1] 3349 	clrw x 
      00125E CF 00 06         [ 2] 3350 	ldw data_ptr,x 
      001261 72 5F 00 08      [ 1] 3351 	clr data_ofs 
      001265 72 5F 00 09      [ 1] 3352 	clr data_len 
                                   3353 ; initialize BASIC pointer 
      001269 CE 00 1C         [ 2] 3354 	ldw x,txtbgn 
      00126C CF 00 04         [ 2] 3355 	ldw basicptr,x 
      00126F E6 02            [ 1] 3356 	ld a,(2,x)
      001271 C7 00 03         [ 1] 3357 	ld count,a
      001274 35 03 00 01      [ 1] 3358 	mov in,#3	
      001278 72 10 00 23      [ 1] 3359 	bset flags,#FRUN 
      00127C CC 08 61         [ 2] 3360 	jp interpreter 
                                   3361 
                                   3362 
                                   3363 ;----------------------
                                   3364 ; BASIC: END
                                   3365 ; end running program
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3366 ;---------------------- 
      00127F                       3367 cmd_end: 
                                   3368 ; clean stack 
      00127F AE 17 FF         [ 2] 3369 	ldw x,#STACK_EMPTY
      001282 94               [ 1] 3370 	ldw sp,x 
      001283 CC 08 42         [ 2] 3371 	jp warm_start
                                   3372 
                                   3373 ;-----------------
                                   3374 ; 1 Khz beep 
                                   3375 ;-----------------
      001286                       3376 beep_1khz:: 
      001286 AE 00 64         [ 2] 3377 	ldw x,#100
      001289 90 AE 03 E8      [ 2] 3378 	ldw y,#1000
      00128D 20 0D            [ 2] 3379 	jra beep
                                   3380 
                                   3381 ;-----------------------
                                   3382 ; BASIC: TONE expr1,expr2
                                   3383 ; used TIMER2 channel 1
                                   3384 ; to produce a tone 
                                   3385 ; arguments:
                                   3386 ;    expr1   frequency 
                                   3387 ;    expr2   duration msec.
                                   3388 ;---------------------------
      00128F                       3389 tone:
      00128F CD 0C 66         [ 4] 3390 	call arg_list 
      001292 A1 02            [ 1] 3391 	cp a,#2 
      001294 27 03            [ 1] 3392 	jreq 1$
      001296 CC 07 BB         [ 2] 3393 	jp syntax_error 
      001299                       3394 1$: 
      001299 85               [ 2] 3395 	popw x ; duration
      00129A 90 85            [ 2] 3396 	popw y ; frequency 
      00129C                       3397 beep:  
      00129C 89               [ 2] 3398 	pushw x 
      00129D AE F4 24         [ 2] 3399 	ldw x,#TIM2_CLK_FREQ
      0012A0 65               [ 2] 3400 	divw x,y 
                                   3401 ; round to nearest integer 
      0012A1 90 A3 7A 12      [ 2] 3402 	cpw y,#TIM2_CLK_FREQ/2
      0012A5 2B 01            [ 1] 3403 	jrmi 2$
      0012A7 5C               [ 1] 3404 	incw x 
      0012A8                       3405 2$:	 
      0012A8 9E               [ 1] 3406 	ld a,xh 
      0012A9 C7 53 0D         [ 1] 3407 	ld TIM2_ARRH,a 
      0012AC 9F               [ 1] 3408 	ld a,xl 
      0012AD C7 53 0E         [ 1] 3409 	ld TIM2_ARRL,a 
                                   3410 ; 50% duty cycle 
      0012B0 8C               [ 1] 3411 	ccf 
      0012B1 56               [ 2] 3412 	rrcw x 
      0012B2 9E               [ 1] 3413 	ld a,xh 
      0012B3 C7 53 0F         [ 1] 3414 	ld TIM2_CCR1H,a 
      0012B6 9F               [ 1] 3415 	ld a,xl
      0012B7 C7 53 10         [ 1] 3416 	ld TIM2_CCR1L,a
      0012BA 72 10 53 08      [ 1] 3417 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0012BE 72 10 53 00      [ 1] 3418 	bset TIM2_CR1,#TIM2_CR1_CEN
      0012C2 72 10 53 04      [ 1] 3419 	bset TIM2_EGR,#TIM2_EGR_UG
      0012C6 85               [ 2] 3420 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0012C7 CD 18 55         [ 4] 3421 	call pause02
      0012CA 72 11 53 08      [ 1] 3422 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0012CE 72 11 53 00      [ 1] 3423 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0012D2 81               [ 4] 3424 	ret 
                                   3425 
                                   3426 ;-------------------------------
                                   3427 ; BASIC: ADCON 0|1 [,divisor]  
                                   3428 ; disable/enanble ADC 
                                   3429 ;-------------------------------
                           000003  3430 	ONOFF=3 
                           000001  3431 	DIVSOR=1
                           000004  3432 	VSIZE=4 
      0012D3                       3433 power_adc:
      0012D3 CD 0C 66         [ 4] 3434 	call arg_list 
      0012D6 A1 02            [ 1] 3435 	cp a,#2	
      0012D8 27 0B            [ 1] 3436 	jreq 1$
      0012DA A1 01            [ 1] 3437 	cp a,#1 
      0012DC 27 03            [ 1] 3438 	jreq 0$ 
      0012DE CC 07 BB         [ 2] 3439 	jp syntax_error 
      0012E1 AE 00 00         [ 2] 3440 0$: ldw x,#0
      0012E4 89               [ 2] 3441 	pushw x  ; divisor 
      0012E5 1E 03            [ 2] 3442 1$: ldw x,(ONOFF,sp)
      0012E7 5D               [ 2] 3443 	tnzw x 
      0012E8 27 1A            [ 1] 3444 	jreq 2$ 
      0012EA 1E 01            [ 2] 3445 	ldw x,(DIVSOR,sp) ; divisor 
      0012EC 9F               [ 1] 3446 	ld a,xl
      0012ED A4 07            [ 1] 3447 	and a,#7
      0012EF 4E               [ 1] 3448 	swap a 
      0012F0 C7 54 01         [ 1] 3449 	ld ADC_CR1,a
      0012F3 72 16 50 CA      [ 1] 3450 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0012F7 72 10 54 01      [ 1] 3451 	bset ADC_CR1,#ADC_CR1_ADON 
      0012FB                       3452 	_usec_dly 7 
      0012FB AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0012FE 5A               [ 2]    2     decw x
      0012FF 9D               [ 1]    3     nop 
      001300 26 FA            [ 1]    4     jrne .-4
      001302 20 08            [ 2] 3453 	jra 3$
      001304 72 11 54 01      [ 1] 3454 2$: bres ADC_CR1,#ADC_CR1_ADON
      001308 72 17 50 CA      [ 1] 3455 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00130C                       3456 3$:	_drop VSIZE 
      00130C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00130E 81               [ 4] 3457 	ret
                                   3458 
                                   3459 ;-----------------------------
                                   3460 ; BASIC: ADCREAD (channel)
                                   3461 ; read adc channel {0..5}
                                   3462 ; output:
                                   3463 ;   A 		TK_INTGR 
                                   3464 ;   X 		value 
                                   3465 ;-----------------------------
      00130F                       3466 analog_read:
      00130F CD 0C 61         [ 4] 3467 	call func_args 
      001312 A1 01            [ 1] 3468 	cp a,#1 
      001314 27 03            [ 1] 3469 	jreq 1$
      001316 CC 07 BB         [ 2] 3470 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001319 85               [ 2] 3471 1$: popw x 
      00131A A3 00 05         [ 2] 3472 	cpw x,#5 
      00131D 23 05            [ 2] 3473 	jrule 2$
      00131F A6 0A            [ 1] 3474 	ld a,#ERR_BAD_VALUE
      001321 CC 07 BD         [ 2] 3475 	jp tb_error 
      001324 9F               [ 1] 3476 2$: ld a,xl
      001325 C7 00 0D         [ 1] 3477 	ld acc8,a 
      001328 A6 05            [ 1] 3478 	ld a,#5
      00132A C0 00 0D         [ 1] 3479 	sub a,acc8 
      00132D C7 54 00         [ 1] 3480 	ld ADC_CSR,a
      001330 72 16 54 02      [ 1] 3481 	bset ADC_CR2,#ADC_CR2_ALIGN
      001334 72 10 54 01      [ 1] 3482 	bset ADC_CR1,#ADC_CR1_ADON
      001338 72 0F 54 00 FB   [ 2] 3483 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00133D CE 54 04         [ 2] 3484 	ldw x,ADC_DRH
      001340 A6 84            [ 1] 3485 	ld a,#TK_INTGR
      001342 81               [ 4] 3486 	ret 
                                   3487 
                                   3488 ;-----------------------
                                   3489 ; BASIC: DREAD(pin)
                                   3490 ; Arduino pins 
                                   3491 ; read state of a digital pin 
                                   3492 ; pin# {0..15}
                                   3493 ; output:
                                   3494 ;    A 		TK_INTGR
                                   3495 ;    X      0|1 
                                   3496 ;-------------------------
                           000001  3497 	PINNO=1
                           000001  3498 	VSIZE=1
      001343                       3499 digital_read:
      001343                       3500 	_vars VSIZE 
      001343 52 01            [ 2]    1     sub sp,#VSIZE 
      001345 CD 0C 61         [ 4] 3501 	call func_args
      001348 A1 01            [ 1] 3502 	cp a,#1
      00134A 27 03            [ 1] 3503 	jreq 1$
      00134C CC 07 BB         [ 2] 3504 	jp syntax_error
      00134F 85               [ 2] 3505 1$: popw x 
      001350 A3 00 0F         [ 2] 3506 	cpw x,#15 
      001353 23 05            [ 2] 3507 	jrule 2$
      001355 A6 0A            [ 1] 3508 	ld a,#ERR_BAD_VALUE
      001357 CC 07 BD         [ 2] 3509 	jp tb_error 
      00135A CD 19 93         [ 4] 3510 2$:	call select_pin 
      00135D 6B 01            [ 1] 3511 	ld (PINNO,sp),a
      00135F E6 01            [ 1] 3512 	ld a,(GPIO_IDR,x)
      001361 0D 01            [ 1] 3513 	tnz (PINNO,sp)
      001363 27 05            [ 1] 3514 	jreq 8$
      001365 44               [ 1] 3515 3$: srl a 
      001366 0A 01            [ 1] 3516 	dec (PINNO,sp)
      001368 26 FB            [ 1] 3517 	jrne 3$ 
      00136A A4 01            [ 1] 3518 8$: and a,#1 
      00136C 5F               [ 1] 3519 	clrw x 
      00136D 97               [ 1] 3520 	ld xl,a 
      00136E A6 84            [ 1] 3521 	ld a,#TK_INTGR
      001370                       3522 	_drop VSIZE
      001370 5B 01            [ 2]    1     addw sp,#VSIZE 
      001372 81               [ 4] 3523 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3524 
                                   3525 ;-----------------------
                                   3526 ; BASIC: DWRITE pin,0|1
                                   3527 ; Arduino pins 
                                   3528 ; write to a digital pin 
                                   3529 ; pin# {0..15}
                                   3530 ; output:
                                   3531 ;    A 		TK_INTGR
                                   3532 ;    X      0|1 
                                   3533 ;-------------------------
                           000001  3534 	PINNO=1
                           000002  3535 	PINVAL=2
                           000002  3536 	VSIZE=2
      001373                       3537 digital_write:
      001373                       3538 	_vars VSIZE 
      001373 52 02            [ 2]    1     sub sp,#VSIZE 
      001375 CD 0C 66         [ 4] 3539 	call arg_list  
      001378 A1 02            [ 1] 3540 	cp a,#2 
      00137A 27 03            [ 1] 3541 	jreq 1$
      00137C CC 07 BB         [ 2] 3542 	jp syntax_error
      00137F 85               [ 2] 3543 1$: popw x 
      001380 9F               [ 1] 3544 	ld a,xl 
      001381 6B 02            [ 1] 3545 	ld (PINVAL,sp),a
      001383 85               [ 2] 3546 	popw x 
      001384 A3 00 0F         [ 2] 3547 	cpw x,#15 
      001387 23 05            [ 2] 3548 	jrule 2$
      001389 A6 0A            [ 1] 3549 	ld a,#ERR_BAD_VALUE
      00138B CC 07 BD         [ 2] 3550 	jp tb_error 
      00138E CD 19 93         [ 4] 3551 2$:	call select_pin 
      001391 6B 01            [ 1] 3552 	ld (PINNO,sp),a 
      001393 A6 01            [ 1] 3553 	ld a,#1
      001395 0D 01            [ 1] 3554 	tnz (PINNO,sp)
      001397 27 05            [ 1] 3555 	jreq 4$
      001399 48               [ 1] 3556 3$: sll a
      00139A 0A 01            [ 1] 3557 	dec (PINNO,sp)
      00139C 26 FB            [ 1] 3558 	jrne 3$
      00139E 0D 02            [ 1] 3559 4$: tnz (PINVAL,sp)
      0013A0 26 05            [ 1] 3560 	jrne 5$
      0013A2 43               [ 1] 3561 	cpl a 
      0013A3 E4 00            [ 1] 3562 	and a,(GPIO_ODR,x)
      0013A5 20 02            [ 2] 3563 	jra 8$
      0013A7 EA 00            [ 1] 3564 5$: or a,(GPIO_ODR,x)
      0013A9 E7 00            [ 1] 3565 8$: ld (GPIO_ODR,x),a 
      0013AB                       3566 	_drop VSIZE 
      0013AB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013AD 81               [ 4] 3567 	ret
                                   3568 
                                   3569 
                                   3570 ;-----------------------
                                   3571 ; BASIC: STOP
                                   3572 ; stop progam execution  
                                   3573 ; without resetting pointers 
                                   3574 ; the program is resumed
                                   3575 ; with RUN 
                                   3576 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013AE                       3577 stop:
      0013AE 72 00 00 23 02   [ 2] 3578 	btjt flags,#FRUN,2$
      0013B3 4F               [ 1] 3579 	clr a
      0013B4 81               [ 4] 3580 	ret 
      0013B5                       3581 2$:	 
                                   3582 ; create space on cstack to save context 
      0013B5 AE 13 DC         [ 2] 3583 	ldw x,#break_point 
      0013B8 CD 00 00         [ 4] 3584 	call puts 
      0013BB                       3585 	_drop 2 ;drop return address 
      0013BB 5B 02            [ 2]    1     addw sp,#2 
      0013BD                       3586 	_vars CTXT_SIZE ; context size 
      0013BD 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0013BF CD 0F AA         [ 4] 3587 	call save_context 
      0013C2 AE 16 90         [ 2] 3588 	ldw x,#tib 
      0013C5 CF 00 04         [ 2] 3589 	ldw basicptr,x
      0013C8 7F               [ 1] 3590 	clr (x)
      0013C9 72 5F 00 03      [ 1] 3591 	clr count  
      0013CD 5F               [ 1] 3592 	clrw x 
      0013CE CF 00 00         [ 2] 3593 	ldw in.w,x
      0013D1 72 11 00 23      [ 1] 3594 	bres flags,#FRUN 
      0013D5 72 18 00 23      [ 1] 3595 	bset flags,#FBREAK
      0013D9 CC 08 61         [ 2] 3596 	jp interpreter 
      0013DC 0A 62 72 65 61 6B 20  3597 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3598 
                                   3599 ;-----------------------
                                   3600 ; BASIC: NEW
                                   3601 ; from command line only 
                                   3602 ; free program memory
                                   3603 ; and clear variables 
                                   3604 ;------------------------
      0013FA                       3605 new: 
      0013FA 72 01 00 23 01   [ 2] 3606 	btjf flags,#FRUN,0$ 
      0013FF 81               [ 4] 3607 	ret 
      001400                       3608 0$:	
      001400 CD 06 25         [ 4] 3609 	call clear_basic 
      001403 81               [ 4] 3610 	ret 
                                   3611 	 
                                   3612 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3613 ;  file system routines
                                   3614 ;  MCU flash memory from
                                   3615 ;  0x10000-0x27fff is 
                                   3616 ;  used to store BASIC 
                                   3617 ;  program files. 
                                   3618 ;  use 128 bytes sectors
                                   3619 ;  because this is the MCU 
                                   3620 ;  row size.
                                   3621 ;  file entry aligned to row
                                   3622 ;  	name  variable length
                                   3623 ;  	size  2 bytes  
                                   3624 ; 	data  variable length 
                                   3625 ;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3626 
                                   3627 ;---------------------------
                                   3628 ; fill pad with zeros 
                                   3629 ;--------------------------
      001404                       3630 zero_pad:
      001404 AE 16 E0         [ 2] 3631 	ldw x,#pad 
      001407 A6 80            [ 1] 3632 	ld a,#PAD_SIZE 
      001409 7F               [ 1] 3633 1$:	clr (x)
      00140A 5C               [ 1] 3634 	incw x 
      00140B 4A               [ 1] 3635 	dec a 
      00140C 26 FB            [ 1] 3636 	jrne 1$
      00140E 81               [ 4] 3637 	ret 
                                   3638 
                                   3639 ;--------------------------
                                   3640 ; align farptr to BLOCK_SIZE 
                                   3641 ;---------------------------
      00140F                       3642 row_align:
      00140F A6 7F            [ 1] 3643 	ld a,#0x7f 
      001411 C4 00 18         [ 1] 3644 	and a,farptr+2 
      001414 27 13            [ 1] 3645 	jreq 1$ 
      001416 CE 00 17         [ 2] 3646 	ldw x,farptr+1 
      001419 1C 00 80         [ 2] 3647 	addw x,#BLOCK_SIZE 
      00141C 24 04            [ 1] 3648 	jrnc 0$
      00141E 72 5C 00 16      [ 1] 3649 	inc farptr 
      001422 9F               [ 1] 3650 0$: ld a,xl 
      001423 A4 80            [ 1] 3651 	and a,#0x80
      001425 97               [ 1] 3652 	ld xl,a
      001426 CF 00 17         [ 2] 3653 	ldw farptr+1,x  	
      001429 81               [ 4] 3654 1$:	ret
                                   3655 
                                   3656 ;--------------------
                                   3657 ; input:
                                   3658 ;   X     increment 
                                   3659 ; output:
                                   3660 ;   farptr  incremented 
                                   3661 ;---------------------
      00142A                       3662 incr_farptr:
      00142A 72 BB 00 17      [ 2] 3663 	addw x,farptr+1 
      00142E 24 04            [ 1] 3664 	jrnc 1$
      001430 72 5C 00 16      [ 1] 3665 	inc farptr 
      001434 CF 00 17         [ 2] 3666 1$:	ldw farptr+1,x  
      001437 81               [ 4] 3667 	ret 
                                   3668 
                                   3669 ;------------------------------
                                   3670 ; extended flash memory used as FLASH_DRIVE 
                                   3671 ; seek end of used flash drive   
                                   3672 ; starting at 0x10000 address.
                                   3673 ; 4 consecutives 0 bytes signal free space. 
                                   3674 ; input:
                                   3675 ;	none
                                   3676 ; output:
                                   3677 ;   ffree     free_addr| 0 if memory full.
                                   3678 ;------------------------------
      001438                       3679 seek_fdrive:
                                   3680 ; start scan at 0x10000 address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001438 A6 01            [ 1] 3681 	ld a,#1
      00143A C7 00 16         [ 1] 3682 	ld farptr,a 
      00143D 5F               [ 1] 3683 	clrw x 
      00143E CF 00 17         [ 2] 3684 	ldw farptr+1,x 
      001441                       3685 1$:
      001441 AE 00 03         [ 2] 3686 	ldw x,#3  
      001444 92 AF 00 16      [ 5] 3687 2$:	ldf a,([farptr],x) 
      001448 26 05            [ 1] 3688 	jrne 3$
      00144A 5A               [ 2] 3689 	decw x
      00144B 2A F7            [ 1] 3690 	jrpl 2$
      00144D 20 0E            [ 2] 3691 	jra 4$ 
      00144F AE 00 80         [ 2] 3692 3$:	ldw x,#BLOCK_SIZE 
      001452 CD 14 2A         [ 4] 3693 	call incr_farptr
      001455 AE 02 80         [ 2] 3694 	ldw x,#0x280  
      001458 C3 00 16         [ 2] 3695 	cpw x,farptr
      00145B 22 E4            [ 1] 3696 	jrugt 1$
      00145D                       3697 4$: ; copy farptr to ffree	 
      00145D CE 00 16         [ 2] 3698 	ldw x,farptr 
      001460 C6 00 18         [ 1] 3699 	ld a,farptr+2 
      001463 CF 00 19         [ 2] 3700 	ldw ffree,x 
      001466 C7 00 1B         [ 1] 3701 	ld ffree+2,a  
      001469 81               [ 4] 3702 	ret 
                                   3703 
                                   3704 ;-----------------------
                                   3705 ; return amount of free 
                                   3706 ; space on flash drive
                                   3707 ; input:
                                   3708 ;   none
                                   3709 ; output:
                                   3710 ;   acc24   free space 
                                   3711 ;-----------------------
      00146A                       3712 disk_free:
      00146A AE 80 00         [ 2] 3713 	ldw x,#0x8000
      00146D 72 B0 00 1A      [ 2] 3714 	subw x,ffree+1
      001471 A6 02            [ 1] 3715 	ld a,#2
      001473 C2 00 19         [ 1] 3716 	sbc a,ffree 
      001476 C7 00 0B         [ 1] 3717 	ld acc24,a 
      001479 CF 00 0C         [ 2] 3718 	ldw acc16,x 
      00147C 81               [ 4] 3719 	ret 
                                   3720 
                                   3721 ;-----------------------
                                   3722 ; compare file name 
                                   3723 ; with name pointed by Y  
                                   3724 ; input:
                                   3725 ;   farptr   file name 
                                   3726 ;   Y        target name 
                                   3727 ; output:
                                   3728 ;   farptr 	 at file_name
                                   3729 ;   X 		 farptr[x] point at size field  
                                   3730 ;   Carry    0|1 no match|match  
                                   3731 ;----------------------
      00147D                       3732 cmp_name:
      00147D 5F               [ 1] 3733 	clrw x
      00147E 92 AF 00 16      [ 5] 3734 1$:	ldf a,([farptr],x)
      001482 90 F1            [ 1] 3735 	cp a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001484 26 08            [ 1] 3736 	jrne 4$
      001486 4D               [ 1] 3737 	tnz a 
      001487 27 12            [ 1] 3738 	jreq 9$ 
      001489 5C               [ 1] 3739     incw x 
      00148A 90 5C            [ 1] 3740 	incw y 
      00148C 20 F0            [ 2] 3741 	jra 1$
      00148E                       3742 4$: ;no match 
      00148E 4D               [ 1] 3743 	tnz a 
      00148F 27 07            [ 1] 3744 	jreq 5$
      001491 5C               [ 1] 3745 	incw x 
      001492 92 AF 00 16      [ 5] 3746 	ldf a,([farptr],x)
      001496 20 F6            [ 2] 3747 	jra 4$  
      001498 5C               [ 1] 3748 5$:	incw x ; farptr[x] point at 'size' field 
      001499 98               [ 1] 3749 	rcf 
      00149A 81               [ 4] 3750 	ret
      00149B                       3751 9$: ; match  
      00149B 5C               [ 1] 3752 	incw x  ; farptr[x] at 'size' field 
      00149C 99               [ 1] 3753 	scf 
      00149D 81               [ 4] 3754 	ret 
                                   3755 
                                   3756 ;-----------------------
                                   3757 ; search file in 
                                   3758 ; flash memory 
                                   3759 ; input:
                                   3760 ;   Y       file name  
                                   3761 ; output:
                                   3762 ;   farptr  addr at name|0
                                   3763 ;   X       offset to size field
                                   3764 ;   Carray   0 not found, 1 found 
                                   3765 ;-----------------------
                           000001  3766 	FSIZE=1
                           000003  3767 	YSAVE=3
                           000004  3768 	VSIZE=4 
      00149E                       3769 search_file: 
      00149E                       3770 	_vars VSIZE
      00149E 52 04            [ 2]    1     sub sp,#VSIZE 
      0014A0 17 03            [ 2] 3771 	ldw (YSAVE,sp),y  
      0014A2 5F               [ 1] 3772 	clrw x 
      0014A3 CF 00 17         [ 2] 3773 	ldw farptr+1,x 
      0014A6 35 01 00 16      [ 1] 3774 	mov farptr,#1
      0014AA                       3775 1$:	
                                   3776 ; check if farptr is after any file 
                                   3777 ; if  0 then so.
      0014AA 92 BC 00 16      [ 5] 3778 	ldf a,[farptr]
      0014AE 27 27            [ 1] 3779 	jreq 6$
      0014B0 5F               [ 1] 3780 2$: clrw x 	
      0014B1 16 03            [ 2] 3781 	ldw y,(YSAVE,sp) 
      0014B3 CD 14 7D         [ 4] 3782 	call cmp_name
      0014B6 25 2F            [ 1] 3783 	jrc 9$
      0014B8 92 AF 00 16      [ 5] 3784 	ldf a,([farptr],x)
      0014BC 6B 01            [ 1] 3785 	ld (FSIZE,sp),a 
      0014BE 5C               [ 1] 3786 	incw x 
      0014BF 92 AF 00 16      [ 5] 3787 	ldf a,([farptr],x)
      0014C3 6B 02            [ 1] 3788 	ld (FSIZE+1,sp),a 
      0014C5 5C               [ 1] 3789 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0014C6 72 FB 01         [ 2] 3790 	addw x,(FSIZE,sp) ; skip over file data
      0014C9 CD 14 2A         [ 4] 3791 	call incr_farptr
      0014CC CD 14 0F         [ 4] 3792 	call row_align  
      0014CF AE 02 80         [ 2] 3793 	ldw x,#0x280
      0014D2 C3 00 16         [ 2] 3794 	cpw x,farptr 
      0014D5 2A D3            [ 1] 3795 	jrpl 1$
      0014D7                       3796 6$: ; file not found 
      0014D7 72 5F 00 16      [ 1] 3797 	clr farptr
      0014DB 72 5F 00 17      [ 1] 3798 	clr farptr+1 
      0014DF 72 5F 00 18      [ 1] 3799 	clr farptr+2 
      0014E3                       3800 	_drop VSIZE 
      0014E3 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014E5 98               [ 1] 3801 	rcf
      0014E6 81               [ 4] 3802 	ret
      0014E7                       3803 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      0014E7                       3804 	_drop VSIZE 
      0014E7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014E9 99               [ 1] 3805 	scf 	
      0014EA 81               [ 4] 3806 	ret
                                   3807 
                                   3808 ;--------------------------------
                                   3809 ; BASIC: SAVE "name" 
                                   3810 ; save text program in 
                                   3811 ; flash memory used as permanent
                                   3812 ; storage from address 0x10000-0x27fff 
                                   3813 ;--------------------------------
                           000001  3814 	BSIZE=1
                           000003  3815 	NAMEPTR=3
                           000005  3816 	XSAVE=5
                           000007  3817 	YSAVE=7
                           000008  3818 	VSIZE=8 
      0014EB                       3819 save:
      0014EB 72 01 00 23 05   [ 2] 3820 	btjf flags,#FRUN,0$ 
      0014F0 A6 07            [ 1] 3821 	ld a,#ERR_CMD_ONLY 
      0014F2 CC 07 BD         [ 2] 3822 	jp tb_error
      0014F5                       3823 0$:	 
      0014F5 CE 00 1E         [ 2] 3824 	ldw x,txtend 
      0014F8 72 B0 00 1C      [ 2] 3825 	subw x,txtbgn
      0014FC 26 0C            [ 1] 3826 	jrne 1$
                                   3827 ; nothing to save 
      0014FE AE 07 54         [ 2] 3828 	ldw x,#err_no_prog 
      001501 CD 00 00         [ 4] 3829 	call puts 
      001504 55 00 03 00 01   [ 1] 3830 	mov in,count 
      001509 81               [ 4] 3831 	ret  	
      00150A                       3832 1$:	
      00150A                       3833 	_vars VSIZE 
      00150A 52 08            [ 2]    1     sub sp,#VSIZE 
      00150C 1F 01            [ 2] 3834 	ldw (BSIZE,sp),x 
      00150E CD 08 AD         [ 4] 3835 	call next_token	
      001511 A1 02            [ 1] 3836 	cp a,#TK_QSTR
      001513 27 03            [ 1] 3837 	jreq 2$
      001515 CC 07 BB         [ 2] 3838 	jp syntax_error
      001518                       3839 2$: 
      001518 1F 03            [ 2] 3840 	ldw (NAMEPTR,sp),x  
      00151A CD 01 9C         [ 4] 3841 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3842 ; check if enough free space 
      00151D 1E 03            [ 2] 3843 	ldw x,(NAMEPTR,sp)
      00151F CD 04 34         [ 4] 3844 	call strlen 
      001522 AB 03            [ 1] 3845 	add a,#3
      001524 5F               [ 1] 3846 	clrw x 
      001525 97               [ 1] 3847 	ld xl,a 
      001526 72 FB 01         [ 2] 3848 	addw x,(BSIZE,sp)
      001529 4F               [ 1] 3849 	clr a 
      00152A 72 BB 00 1A      [ 2] 3850 	addw x,ffree+1 
      00152E C9 00 19         [ 1] 3851 	adc a,ffree 
      001531 A1 02            [ 1] 3852 	cp a,#2
      001533 2B 0A            [ 1] 3853 	jrmi 21$
      001535 A3 80 00         [ 2] 3854 	cpw x,#0x8000
      001538 2B 05            [ 1] 3855 	jrmi 21$
      00153A A6 0E            [ 1] 3856 	ld a,#ERR_NO_FSPACE  
      00153C CC 07 BD         [ 2] 3857 	jp tb_error
      00153F                       3858 21$: 
                                   3859 ; check for existing file of that name 
      00153F 16 03            [ 2] 3860 	ldw y,(NAMEPTR,sp)	
      001541 CD 14 9E         [ 4] 3861 	call search_file 
      001544 24 05            [ 1] 3862 	jrnc 3$ 
      001546 A6 08            [ 1] 3863 	ld a,#ERR_DUPLICATE 
      001548 CC 07 BD         [ 2] 3864 	jp tb_error 
      00154B                       3865 3$:	; initialize farptr 
      00154B CE 00 19         [ 2] 3866 	ldw x,ffree 
      00154E C6 00 1B         [ 1] 3867 	ld a,ffree+2 
      001551 CF 00 16         [ 2] 3868 	ldw farptr,x 
      001554 C7 00 18         [ 1] 3869 	ld farptr+2,a 
                                   3870 ;** write file name to row buffer **	
      001557 16 03            [ 2] 3871 	ldw y,(NAMEPTR,sp)  
      001559 AE 16 E0         [ 2] 3872 	ldw x,#pad 
      00155C CD 04 50         [ 4] 3873 	call strcpy
      00155F CD 04 34         [ 4] 3874 	call strlen 
      001562 5F               [ 1] 3875 	clrw x 
      001563 97               [ 1] 3876 	ld xl,a 
      001564 5C               [ 1] 3877 	incw  x
      001565 1C 16 E0         [ 2] 3878 	addw x,#pad 
                                   3879 ; ** write file size to row buffer 
      001568 16 01            [ 2] 3880 	ldw y,(BSIZE,sp)
      00156A FF               [ 2] 3881 	ldw (x),y 
      00156B 1C 00 02         [ 2] 3882 	addw x,#2 
                                   3883 ; ** write file data to row buffer 
      00156E 90 CE 00 1C      [ 2] 3884 	ldw y,txtbgn 
      001572 90 F6            [ 1] 3885 6$:	ld a,(y)
      001574 90 5C            [ 1] 3886 	incw y
      001576 F7               [ 1] 3887 	ld (x),a 
      001577 5C               [ 1] 3888 	incw x
      001578 90 C3 00 1E      [ 2] 3889 	cpw y,txtend 
      00157C 27 05            [ 1] 3890 	jreq 12$
      00157E A3 17 60         [ 2] 3891 	cpw x,#stack_full 
      001581 2B EF            [ 1] 3892 	jrmi 6$
      001583                       3893 12$:
      001583 17 07            [ 2] 3894 	ldw (YSAVE,sp),y 
      001585                       3895 14$: ; zero buffer end 
      001585 A3 17 60         [ 2] 3896 	cpw x,#stack_full
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001588 27 04            [ 1] 3897 	jreq 16$
      00158A 7F               [ 1] 3898 	clr (x)
      00158B 5C               [ 1] 3899 	incw x 
      00158C 20 F7            [ 2] 3900 	jra 14$
      00158E                       3901 16$:
      00158E AE 16 E0         [ 2] 3902 	ldw x,#pad 
      001591 CD 01 B0         [ 4] 3903 	call write_row 
      001594 AE 00 80         [ 2] 3904 	ldw x,#BLOCK_SIZE 
      001597 CD 14 2A         [ 4] 3905 	call incr_farptr
      00159A AE 16 E0         [ 2] 3906 	ldw x,#pad 
      00159D 16 07            [ 2] 3907 	ldw y,(YSAVE,sp)
      00159F 90 C3 00 1E      [ 2] 3908 	cpw y,txtend 
      0015A3 2B CD            [ 1] 3909 	jrmi 6$
                                   3910 ; save farptr in ffree
      0015A5 CE 00 16         [ 2] 3911 	ldw x,farptr 
      0015A8 C6 00 18         [ 1] 3912 	ld a,farptr+2 
      0015AB CF 00 19         [ 2] 3913 	ldw ffree,x 
      0015AE C7 00 1B         [ 1] 3914 	ld ffree+2,a
                                   3915 ; print file size 	
      0015B1 1E 01            [ 2] 3916 	ldw x,(BSIZE,sp) 
      0015B3 CD 09 0E         [ 4] 3917 	call print_int 
      0015B6                       3918 	_drop VSIZE 
      0015B6 5B 08            [ 2]    1     addw sp,#VSIZE 
      0015B8 81               [ 4] 3919 	ret 
                                   3920 
                                   3921 ;----------------------
                                   3922 ; load file in RAM memory
                                   3923 ; input:
                                   3924 ;    farptr point at file size 
                                   3925 ; output:
                                   3926 ;   y point after BASIC program in RAM.
                                   3927 ;------------------------
      0015B9                       3928 load_file:
      0015B9 CD 14 2A         [ 4] 3929 	call incr_farptr  
      0015BC CD 06 25         [ 4] 3930 	call clear_basic  
      0015BF 5F               [ 1] 3931 	clrw x
      0015C0 92 AF 00 16      [ 5] 3932 	ldf a,([farptr],x)
      0015C4 90 95            [ 1] 3933 	ld yh,a 
      0015C6 5C               [ 1] 3934 	incw x  
      0015C7 92 AF 00 16      [ 5] 3935 	ldf a,([farptr],x)
      0015CB 5C               [ 1] 3936 	incw x 
      0015CC 90 97            [ 1] 3937 	ld yl,a 
      0015CE 72 B9 00 1C      [ 2] 3938 	addw y,txtbgn
      0015D2 90 CF 00 1E      [ 2] 3939 	ldw txtend,y
      0015D6 90 CE 00 1C      [ 2] 3940 	ldw y,txtbgn
      0015DA                       3941 3$:	; load BASIC text 	
      0015DA 92 AF 00 16      [ 5] 3942 	ldf a,([farptr],x)
      0015DE 90 F7            [ 1] 3943 	ld (y),a 
      0015E0 5C               [ 1] 3944 	incw x 
      0015E1 90 5C            [ 1] 3945 	incw y 
      0015E3 90 C3 00 1E      [ 2] 3946 	cpw y,txtend 
      0015E7 2B F1            [ 1] 3947 	jrmi 3$
      0015E9 81               [ 4] 3948 	ret 
                                   3949 
                                   3950 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3951 ; BASIC: LOAD "file" 
                                   3952 ; load file to RAM 
                                   3953 ; for execution 
                                   3954 ;------------------------
      0015EA                       3955 load:
      0015EA 72 01 00 23 07   [ 2] 3956 	btjf flags,#FRUN,0$ 
      0015EF 27 05            [ 1] 3957 	jreq 0$ 
      0015F1 A6 07            [ 1] 3958 	ld a,#ERR_CMD_ONLY 
      0015F3 CC 07 BD         [ 2] 3959 	jp tb_error 
      0015F6                       3960 0$:	
      0015F6 CD 08 AD         [ 4] 3961 	call next_token 
      0015F9 A1 02            [ 1] 3962 	cp a,#TK_QSTR
      0015FB 27 03            [ 1] 3963 	jreq 1$
      0015FD CC 07 BB         [ 2] 3964 	jp syntax_error 
      001600 90 93            [ 1] 3965 1$:	ldw y,x 
      001602 CD 14 9E         [ 4] 3966 	call search_file 
      001605 25 05            [ 1] 3967 	jrc 2$ 
      001607 A6 09            [ 1] 3968 	ld a,#ERR_NOT_FILE
      001609 CC 07 BD         [ 2] 3969 	jp tb_error  
      00160C                       3970 2$:
      00160C CD 15 B9         [ 4] 3971 	call load_file
                                   3972 ; print loaded size 	 
      00160F CE 00 1E         [ 2] 3973 	ldw x,txtend 
      001612 72 B0 00 1C      [ 2] 3974 	subw x,txtbgn
      001616 CD 09 0E         [ 4] 3975 	call print_int 
      001619 81               [ 4] 3976 	ret 
                                   3977 
                                   3978 ;-----------------------------------
                                   3979 ; BASIC: FORGET ["file_name"] 
                                   3980 ; erase file_name and all others 
                                   3981 ; after it. 
                                   3982 ; without argument erase all files 
                                   3983 ;-----------------------------------
                           000001  3984 	NEW_FREE=1   ; free address after file delete
                           000004  3985 	BLOCK_COUNT=4  ; how many rows to delete
                           000005  3986 	VSIZE=5 
      00161A                       3987 forget:
      00161A                       3988 	_vars VSIZE 
      00161A 52 05            [ 2]    1     sub sp,#VSIZE 
      00161C CD 08 AD         [ 4] 3989 	call next_token 
      00161F A1 00            [ 1] 3990 	cp a,#TK_NONE 
      001621 27 18            [ 1] 3991 	jreq 2$ 
      001623 A1 02            [ 1] 3992 	cp a,#TK_QSTR
      001625 27 03            [ 1] 3993 	jreq 1$
      001627 CC 07 BB         [ 2] 3994 	jp syntax_error
      00162A 90 93            [ 1] 3995 1$: ldw y,x 
      00162C 55 00 03 00 01   [ 1] 3996 	mov in,count 
      001631 CD 14 9E         [ 4] 3997 	call search_file
      001634 25 0F            [ 1] 3998 	jrc 3$
      001636 A6 09            [ 1] 3999 	ld a,#ERR_NOT_FILE 
      001638 CC 07 BD         [ 2] 4000 	jp tb_error 
      00163B                       4001 2$: 
      00163B AE 01 00         [ 2] 4002 	ldw x,#0x100
      00163E 4F               [ 1] 4003 	clr a 
      00163F CF 00 16         [ 2] 4004 	ldw farptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001642 C7 00 18         [ 1] 4005 	ld farptr+2,a 
      001645 C6 00 18         [ 1] 4006 3$:	ld a,farptr+2 
      001648 CE 00 16         [ 2] 4007 	ldw x,farptr 
                                   4008 ; save new free address 
      00164B 1F 01            [ 2] 4009 	ldw (NEW_FREE,sp),x
      00164D 6B 03            [ 1] 4010 	ld (NEW_FREE+2,sp),a 
                                   4011 ; count blocks to erase 
      00164F C6 00 1B         [ 1] 4012 	ld a,ffree+2 
      001652 CE 00 19         [ 2] 4013 	ldw x,ffree 
      001655 C0 00 18         [ 1] 4014 	sub a,farptr+2 
      001658 24 01            [ 1] 4015 	jrnc 4$
      00165A 5A               [ 2] 4016 	decw x 
      00165B 72 B0 00 16      [ 2] 4017 4$:	subw x,farptr 
                                   4018 ; X= X:A/BLOCK_SIZE 
      00165F 48               [ 1] 4019 	sll a 
      001660 59               [ 2] 4020 	rlcw x 
      001661 1F 04            [ 2] 4021 	ldw (BLOCK_COUNT,sp),x
      001663 CD 01 68         [ 4] 4022 	call move_erase_to_ram
      001666 1E 04            [ 2] 4023 5$: ldw x,(BLOCK_COUNT,sp)
      001668 5D               [ 2] 4024 	tnzw x
      001669 27 10            [ 1] 4025 	jreq 6$
      00166B CD 01 E3         [ 4] 4026 	call block_erase 
      00166E AE 00 80         [ 2] 4027 	ldw x,#BLOCK_SIZE 
      001671 CD 14 2A         [ 4] 4028 	call incr_farptr 
      001674 1E 04            [ 2] 4029 	ldw x,(BLOCK_COUNT,sp)
      001676 5A               [ 2] 4030 	decw x 
      001677 1F 04            [ 2] 4031 	ldw (BLOCK_COUNT,sp),x
      001679 20 EB            [ 2] 4032 	jra 5$  
                                   4033 ; save new free address
      00167B 7B 03            [ 1] 4034 6$:	ld a,(NEW_FREE+2,sp)
      00167D 1E 01            [ 2] 4035 	ldw x,(NEW_FREE,sp)
      00167F C7 00 1B         [ 1] 4036 	ld ffree+2,a 
      001682 CF 00 19         [ 2] 4037 	ldw ffree,x 
      001685                       4038 	_drop VSIZE 
      001685 5B 05            [ 2]    1     addw sp,#VSIZE 
      001687 81               [ 4] 4039 	ret 
                                   4040 
                                   4041 ;----------------------
                                   4042 ; BASIC: DIR 
                                   4043 ; list saved files 
                                   4044 ;----------------------
                           000001  4045 	COUNT=1 ; files counter 
                           000002  4046 	VSIZE=2 
      001688                       4047 directory:
      001688                       4048 	_vars VSIZE 
      001688 52 02            [ 2]    1     sub sp,#VSIZE 
      00168A 5F               [ 1] 4049 	clrw x 
      00168B 1F 01            [ 2] 4050 	ldw (COUNT,sp),x 
      00168D CF 00 17         [ 2] 4051 	ldw farptr+1,x 
      001690 35 01 00 16      [ 1] 4052 	mov farptr,#1 
      001694                       4053 dir_loop:
      001694 5F               [ 1] 4054 	clrw x 
      001695 92 AF 00 16      [ 5] 4055 	ldf a,([farptr],x)
      001699 27 3B            [ 1] 4056 	jreq 8$ 
      00169B                       4057 1$: ;name loop 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00169B 92 AF 00 16      [ 5] 4058 	ldf a,([farptr],x)
      00169F 27 06            [ 1] 4059 	jreq 2$ 
      0016A1 CD 03 2B         [ 4] 4060 	call putc 
      0016A4 5C               [ 1] 4061 	incw x 
      0016A5 20 F4            [ 2] 4062 	jra 1$
      0016A7 5C               [ 1] 4063 2$: incw x ; skip ending 0. 
      0016A8 A6 20            [ 1] 4064 	ld a,#SPACE 
      0016AA CD 03 2B         [ 4] 4065 	call putc 
                                   4066 ; get file size 	
      0016AD 92 AF 00 16      [ 5] 4067 	ldf a,([farptr],x)
      0016B1 90 95            [ 1] 4068 	ld yh,a 
      0016B3 5C               [ 1] 4069 	incw x 
      0016B4 92 AF 00 16      [ 5] 4070 	ldf a,([farptr],x)
      0016B8 5C               [ 1] 4071 	incw x 
      0016B9 90 97            [ 1] 4072 	ld yl,a 
      0016BB 90 89            [ 2] 4073 	pushw y 
      0016BD 72 FB 01         [ 2] 4074 	addw x,(1,sp)
                                   4075 ; skip to next file 
      0016C0 CD 14 2A         [ 4] 4076 	call incr_farptr
      0016C3 CD 14 0F         [ 4] 4077 	call row_align
                                   4078 ; print file size 
      0016C6 85               [ 2] 4079 	popw x ; file size 
      0016C7 CD 09 0E         [ 4] 4080 	call print_int 
      0016CA A6 0D            [ 1] 4081 	ld a,#CR 
      0016CC CD 03 2B         [ 4] 4082 	call putc
      0016CF 1E 01            [ 2] 4083 	ldw x,(COUNT,sp)
      0016D1 5C               [ 1] 4084 	incw x
      0016D2 1F 01            [ 2] 4085 	ldw (COUNT,sp),x  
      0016D4 20 BE            [ 2] 4086 	jra dir_loop
      0016D6                       4087 8$: ; print number of files 
      0016D6 1E 01            [ 2] 4088 	ldw x,(COUNT,sp)
      0016D8 CD 09 0E         [ 4] 4089 	call print_int 
      0016DB AE 16 F5         [ 2] 4090 	ldw x,#file_count 
      0016DE CD 00 00         [ 4] 4091 	call puts  
                                   4092 ; print drive free space 	
      0016E1 CD 14 6A         [ 4] 4093 	call disk_free
      0016E4 5F               [ 1] 4094 	clrw x  
      0016E5 35 0A 00 0A      [ 1] 4095 	mov base,#10 
      0016E9 CD 09 1E         [ 4] 4096 	call prti24 
      0016EC AE 16 FD         [ 2] 4097 	ldw x,#drive_free
      0016EF CD 00 00         [ 4] 4098 	call puts 
      0016F2                       4099 	_drop VSIZE 
      0016F2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0016F4 81               [ 4] 4100 	ret
      0016F5 20 66 69 6C 65 73 0A  4101 file_count: .asciz " files\n"
             00
      0016FD 20 62 79 74 65 73 20  4102 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4103 
                                   4104 ;---------------------
                                   4105 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4106 ; write 1 or more byte to FLASH or EEPROM
                                   4107 ; starting at address  
                                   4108 ; input:
                                   4109 ;   expr1  	is address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4110 ;   expr2,...,exprn   are bytes to write
                                   4111 ; output:
                                   4112 ;   none 
                                   4113 ;---------------------
                           000001  4114 	ADDR=1
                           000002  4115 	VSIZ=2 
      00170A                       4116 write:
      00170A                       4117 	_vars VSIZE 
      00170A 52 02            [ 2]    1     sub sp,#VSIZE 
      00170C 72 5F 00 16      [ 1] 4118 	clr farptr ; expect 16 bits address 
      001710 CD 0D 65         [ 4] 4119 	call expression
      001713 A1 84            [ 1] 4120 	cp a,#TK_INTGR 
      001715 27 03            [ 1] 4121 	jreq 0$
      001717 CC 07 BB         [ 2] 4122 	jp syntax_error
      00171A 1F 01            [ 2] 4123 0$: ldw (ADDR,sp),x 
      00171C CD 08 AD         [ 4] 4124 	call next_token 
      00171F A1 09            [ 1] 4125 	cp a,#TK_COMMA 
      001721 27 02            [ 1] 4126 	jreq 1$ 
      001723 20 19            [ 2] 4127 	jra 9$ 
      001725 CD 0D 65         [ 4] 4128 1$:	call expression
      001728 A1 84            [ 1] 4129 	cp a,#TK_INTGR
      00172A 27 03            [ 1] 4130 	jreq 2$
      00172C CC 07 BB         [ 2] 4131 	jp syntax_error
      00172F 9F               [ 1] 4132 2$:	ld a,xl 
      001730 1E 01            [ 2] 4133 	ldw x,(ADDR,sp) 
      001732 CF 00 17         [ 2] 4134 	ldw farptr+1,x 
      001735 5F               [ 1] 4135 	clrw x 
      001736 CD 02 0D         [ 4] 4136 	call write_byte
      001739 1E 01            [ 2] 4137 	ldw x,(ADDR,sp)
      00173B 5C               [ 1] 4138 	incw x 
      00173C 20 DC            [ 2] 4139 	jra 0$ 
      00173E                       4140 9$:
      00173E                       4141 	_drop VSIZE
      00173E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001740 81               [ 4] 4142 	ret 
                                   4143 
                                   4144 
                                   4145 ;---------------------
                                   4146 ;BASIC: CHAR(expr)
                                   4147 ; évaluate expression 
                                   4148 ; and take the 7 least 
                                   4149 ; bits as ASCII character
                                   4150 ; return a TK_CHAR 
                                   4151 ;---------------------
      001741                       4152 char:
      001741 CD 0C 61         [ 4] 4153 	call func_args 
      001744 A1 01            [ 1] 4154 	cp a,#1
      001746 27 03            [ 1] 4155 	jreq 1$
      001748 CC 07 BB         [ 2] 4156 	jp syntax_error
      00174B 85               [ 2] 4157 1$:	popw x 
      00174C 9F               [ 1] 4158 	ld a,xl 
      00174D A4 7F            [ 1] 4159 	and a,#0x7f 
      00174F 97               [ 1] 4160 	ld xl,a
      001750 A6 03            [ 1] 4161 	ld a,#TK_CHAR
      001752 81               [ 4] 4162 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4163 
                                   4164 ;---------------------
                                   4165 ; BASIC: ASC(string|char|TK_CFUNC)
                                   4166 ; extract first character 
                                   4167 ; of string argument 
                                   4168 ; return it as TK_INTGR 
                                   4169 ;---------------------
      001753                       4170 ascii:
      001753 A6 07            [ 1] 4171 	ld a,#TK_LPAREN
      001755 CD 0C 54         [ 4] 4172 	call expect 
      001758 CD 08 AD         [ 4] 4173 	call next_token 
      00175B A1 02            [ 1] 4174 	cp a,#TK_QSTR 
      00175D 27 0E            [ 1] 4175 	jreq 1$
      00175F A1 03            [ 1] 4176 	cp a,#TK_CHAR 
      001761 27 0D            [ 1] 4177 	jreq 2$ 
      001763 A1 82            [ 1] 4178 	cp a,#TK_CFUNC 
      001765 27 03            [ 1] 4179 	jreq 0$
      001767 CC 07 BB         [ 2] 4180 	jp syntax_error
      00176A FD               [ 4] 4181 0$: call (x)
      00176B 20 03            [ 2] 4182 	jra 2$
      00176D                       4183 1$: 
      00176D F6               [ 1] 4184 	ld a,(x) 
      00176E 5F               [ 1] 4185 	clrw x
      00176F 97               [ 1] 4186 	ld xl,a 
      001770                       4187 2$: 
      001770 89               [ 2] 4188 	pushw x 
      001771 A6 08            [ 1] 4189 	ld a,#TK_RPAREN 
      001773 CD 0C 54         [ 4] 4190 	call expect
      001776 85               [ 2] 4191 	popw x 
      001777 A6 84            [ 1] 4192 	ld a,#TK_INTGR 
      001779 81               [ 4] 4193 	ret 
                                   4194 
                                   4195 ;---------------------
                                   4196 ;BASIC: KEY
                                   4197 ; wait for a character 
                                   4198 ; received from STDIN 
                                   4199 ; input:
                                   4200 ;	none 
                                   4201 ; output:
                                   4202 ;	X 		ASCII character 
                                   4203 ;---------------------
      00177A                       4204 key:
      00177A CD 03 4B         [ 4] 4205 	call getc 
      00177D 5F               [ 1] 4206 	clrw x 
      00177E 97               [ 1] 4207 	ld xl,a 
      00177F A6 84            [ 1] 4208 	ld a,#TK_INTGR
      001781 81               [ 4] 4209 	ret
                                   4210 
                                   4211 ;----------------------
                                   4212 ; BASIC: QKEY
                                   4213 ; Return true if there 
                                   4214 ; is a character in 
                                   4215 ; waiting in STDIN 
                                   4216 ; input:
                                   4217 ;  none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4218 ; output:
                                   4219 ;   X 		0|-1 
                                   4220 ;-----------------------
      001782                       4221 qkey:: 
      001782 5F               [ 1] 4222 	clrw x 
      001783 C6 00 2D         [ 1] 4223 	ld a,rx1_head
      001786 C1 00 2E         [ 1] 4224 	cp a,rx1_tail 
      001789 27 01            [ 1] 4225 	jreq 9$ 
      00178B 53               [ 2] 4226 	cplw x 
      00178C A6 84            [ 1] 4227 9$: ld a,#TK_INTGR
      00178E 81               [ 4] 4228 	ret 
                                   4229 
                                   4230 ;---------------------
                                   4231 ; BASIC: GPIO(expr,reg)
                                   4232 ; return gpio address 
                                   4233 ; expr {0..8}
                                   4234 ; input:
                                   4235 ;   none 
                                   4236 ; output:
                                   4237 ;   X 		gpio register address
                                   4238 ;----------------------------
                           000003  4239 	PORT=3
                           000001  4240 	REG=1 
                           000004  4241 	VSIZE=4 
      00178F                       4242 gpio:
      00178F CD 0C 61         [ 4] 4243 	call func_args 
      001792 A1 02            [ 1] 4244 	cp a,#2
      001794 27 03            [ 1] 4245 	jreq 1$
      001796 CC 07 BB         [ 2] 4246 	jp syntax_error  
      001799                       4247 1$:	
      001799 1E 03            [ 2] 4248 	ldw x,(PORT,sp)
      00179B 2B 17            [ 1] 4249 	jrmi bad_port
      00179D A3 00 09         [ 2] 4250 	cpw x,#9
      0017A0 2A 12            [ 1] 4251 	jrpl bad_port
      0017A2 A6 05            [ 1] 4252 	ld a,#5
      0017A4 42               [ 4] 4253 	mul x,a
      0017A5 1C 50 00         [ 2] 4254 	addw x,#GPIO_BASE 
      0017A8 1F 03            [ 2] 4255 	ldw (PORT,sp),x  
      0017AA 1E 01            [ 2] 4256 	ldw x,(REG,sp) 
      0017AC 72 FB 03         [ 2] 4257 	addw x,(PORT,sp)
      0017AF A6 84            [ 1] 4258 	ld a,#TK_INTGR
      0017B1                       4259 	_drop VSIZE 
      0017B1 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017B3 81               [ 4] 4260 	ret
      0017B4                       4261 bad_port:
      0017B4 A6 0A            [ 1] 4262 	ld a,#ERR_BAD_VALUE
      0017B6 CC 07 BD         [ 2] 4263 	jp tb_error
                                   4264 
                                   4265 
                                   4266 ;-------------------------
                                   4267 ; BASIC: UFLASH 
                                   4268 ; return user flash address
                                   4269 ; input:
                                   4270 ;  none 
                                   4271 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4272 ;	A		TK_INTGR
                                   4273 ;   X 		user address 
                                   4274 ;---------------------------
      0017B9                       4275 uflash:
      0017B9 AE 22 00         [ 2] 4276 	ldw x,#user_space 
      0017BC A6 84            [ 1] 4277 	ld a,#TK_INTGR 
      0017BE 81               [ 4] 4278 	ret 
                                   4279 
                                   4280 
                                   4281 ;---------------------
                                   4282 ; BASIC: USR(addr[,arg])
                                   4283 ; execute a function written 
                                   4284 ; in binary code.
                                   4285 ; binary fonction should 
                                   4286 ; return token attribute in A 
                                   4287 ; and value in X. 
                                   4288 ; input:
                                   4289 ;   addr	routine address 
                                   4290 ;   arg 	is an optional argument 
                                   4291 ; output:
                                   4292 ;   A 		token attribute 
                                   4293 ;   X       returned value 
                                   4294 ;---------------------
      0017BF                       4295 usr:
      0017BF 90 89            [ 2] 4296 	pushw y 	
      0017C1 CD 0C 61         [ 4] 4297 	call func_args 
      0017C4 A1 01            [ 1] 4298 	cp a,#1 
      0017C6 27 07            [ 1] 4299 	jreq 2$
      0017C8 A1 02            [ 1] 4300 	cp a,#2
      0017CA 27 03            [ 1] 4301 	jreq 2$  
      0017CC CC 07 BB         [ 2] 4302 	jp syntax_error 
      0017CF 90 85            [ 2] 4303 2$: popw y  ; arg|addr 
      0017D1 A1 01            [ 1] 4304 	cp a,#1
      0017D3 27 02            [ 1] 4305 	jreq 3$
      0017D5 85               [ 2] 4306 	popw x ; addr
      0017D6 51               [ 1] 4307 	exgw x,y 
      0017D7 90 FD            [ 4] 4308 3$: call (y)
      0017D9 90 85            [ 2] 4309 	popw y 
      0017DB 81               [ 4] 4310 	ret 
                                   4311 
                                   4312 ;------------------------------
                                   4313 ; BASIC: BYE 
                                   4314 ; halt mcu in its lowest power mode 
                                   4315 ; wait for reset or external interrupt
                                   4316 ; do a cold start on wakeup.
                                   4317 ;------------------------------
      0017DC                       4318 bye:
      0017DC 72 0D 52 30 FB   [ 2] 4319 	btjf UART1_SR,#UART_SR_TC,.
      0017E1 8E               [10] 4320 	halt
      0017E2 CC 05 17         [ 2] 4321 	jp cold_start  
                                   4322 
                                   4323 ;----------------------------------
                                   4324 ; BASIC: AUTORUN ["file_name"] 
                                   4325 ; record in eeprom at adrress AUTORUN_NAME
                                   4326 ; the name of file to load and execute
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4327 ; at startup. 
                                   4328 ; empty string delete autorun name 
                                   4329 ; no argument display autorun name  
                                   4330 ; input:
                                   4331 ;   file_name   file to execute 
                                   4332 ; output:
                                   4333 ;   none
                                   4334 ;-----------------------------------
      0017E5                       4335 autorun: 
      0017E5 72 01 00 23 07   [ 2] 4336 	btjf flags,#FRUN,0$ 
      0017EA 27 05            [ 1] 4337 	jreq 0$ 
      0017EC A6 07            [ 1] 4338 	ld a,#ERR_CMD_ONLY 
      0017EE CC 07 BD         [ 2] 4339 	jp tb_error 
      0017F1                       4340 0$:	
      0017F1 CD 08 AD         [ 4] 4341 	call next_token
      0017F4 4D               [ 1] 4342 	tnz a 
      0017F5 26 08            [ 1] 4343 	jrne 1$
      0017F7 AE 40 00         [ 2] 4344 	ldw x,#AUTORUN_NAME
      0017FA CD 00 00         [ 4] 4345 	call puts 
      0017FD 4F               [ 1] 4346 	clr a 
      0017FE 81               [ 4] 4347 	ret 
      0017FF                       4348 1$:
      0017FF A1 02            [ 1] 4349 	cp a,#TK_QSTR
      001801 27 03            [ 1] 4350 	jreq 2$
      001803 CC 07 BB         [ 2] 4351 	jp syntax_error 
      001806                       4352 2$:	
      001806 7D               [ 1] 4353 	tnz (x) 
      001807 26 09            [ 1] 4354 	jrne 3$
                                   4355 ; empty string, delete autorun 	
      001809 CD 05 D8         [ 4] 4356 	call cancel_autorun
      00180C 55 00 03 00 01   [ 1] 4357 	mov in,count 
      001811 81               [ 4] 4358 	ret 
      001812 89               [ 2] 4359 3$:	pushw x 
      001813 90 93            [ 1] 4360 	ldw y,x  
      001815 CD 14 9E         [ 4] 4361 	call search_file 
      001818 25 05            [ 1] 4362 	jrc 4$ 
      00181A A6 09            [ 1] 4363 	ld a,#ERR_NOT_FILE
      00181C CC 07 BD         [ 2] 4364 	jp tb_error  
      00181F                       4365 4$: 
      00181F 55 00 03 00 01   [ 1] 4366 	mov in,count 
      001824 72 5F 00 16      [ 1] 4367 	clr farptr 
      001828 AE 40 00         [ 2] 4368 	ldw x,#AUTORUN_NAME
      00182B CF 00 17         [ 2] 4369 	ldw farptr+1,x 
      00182E 1E 01            [ 2] 4370 	ldw x,(1,sp)  
      001830 CD 04 34         [ 4] 4371 	call strlen  ; return length in A 
      001833 5F               [ 1] 4372 	clrw x 
      001834 97               [ 1] 4373 	ld xl,a 
      001835 5C               [ 1] 4374 	incw x 
      001836 90 85            [ 2] 4375 	popw y 
      001838 89               [ 2] 4376 	pushw x 
      001839 5F               [ 1] 4377 	clrw x 
      00183A CD 02 82         [ 4] 4378 	call write_block 
      00183D                       4379 	_drop 2 
      00183D 5B 02            [ 2]    1     addw sp,#2 
      00183F 81               [ 4] 4380 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4381 
                                   4382 ;----------------------------------
                                   4383 ; BASIC: SLEEP 
                                   4384 ; halt mcu until reset or external
                                   4385 ; interrupt.
                                   4386 ; Resume progam after SLEEP command
                                   4387 ;----------------------------------
      001840                       4388 sleep:
      001840 72 0D 52 30 FB   [ 2] 4389 	btjf UART1_SR,#UART_SR_TC,.
      001845 72 16 00 23      [ 1] 4390 	bset flags,#FSLEEP
      001849 8E               [10] 4391 	halt 
      00184A 81               [ 4] 4392 	ret 
                                   4393 
                                   4394 ;-------------------------------
                                   4395 ; BASIC: PAUSE expr 
                                   4396 ; suspend execution for n msec.
                                   4397 ; input:
                                   4398 ;	none
                                   4399 ; output:
                                   4400 ;	none 
                                   4401 ;------------------------------
      00184B                       4402 pause:
      00184B CD 0D 65         [ 4] 4403 	call expression
      00184E A1 84            [ 1] 4404 	cp a,#TK_INTGR
      001850 27 03            [ 1] 4405 	jreq pause02 
      001852 CC 07 BB         [ 2] 4406 	jp syntax_error
      001855                       4407 pause02: 
      001855 5D               [ 2] 4408 1$: tnzw x 
      001856 27 04            [ 1] 4409 	jreq 2$
      001858 8F               [10] 4410 	wfi 
      001859 5A               [ 2] 4411 	decw x 
      00185A 26 F9            [ 1] 4412 	jrne 1$
      00185C 4F               [ 1] 4413 2$:	clr a 
      00185D 81               [ 4] 4414 	ret 
                                   4415 
                                   4416 ;------------------------------
                                   4417 ; BASIC: AWU expr
                                   4418 ; halt mcu for 'expr' milliseconds
                                   4419 ; use Auto wakeup peripheral
                                   4420 ; all oscillators stopped except LSI
                                   4421 ; range: 1ms - 511ms
                                   4422 ; input:
                                   4423 ;  none
                                   4424 ; output:
                                   4425 ;  none:
                                   4426 ;------------------------------
      00185E                       4427 awu:
      00185E CD 0D 65         [ 4] 4428   call expression
      001861 A1 84            [ 1] 4429   cp a,#TK_INTGR
      001863 27 03            [ 1] 4430   jreq awu02
      001865 CC 07 BB         [ 2] 4431   jp syntax_error
      001868                       4432 awu02:
      001868 A3 14 00         [ 2] 4433   cpw x,#5120
      00186B 2B 0C            [ 1] 4434   jrmi 1$ 
      00186D 35 0F 50 F2      [ 1] 4435   mov AWU_TBR,#15 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001871 A6 1E            [ 1] 4436   ld a,#30
      001873 62               [ 2] 4437   div x,a
      001874 A6 10            [ 1] 4438   ld a,#16
      001876 62               [ 2] 4439   div x,a 
      001877 20 1E            [ 2] 4440   jra 4$
      001879                       4441 1$: 
      001879 A3 08 00         [ 2] 4442   cpw x,#2048
      00187C 2B 09            [ 1] 4443   jrmi 2$ 
      00187E 35 0E 50 F2      [ 1] 4444   mov AWU_TBR,#14
      001882 A6 50            [ 1] 4445   ld a,#80
      001884 62               [ 2] 4446   div x,a 
      001885 20 10            [ 2] 4447   jra 4$   
      001887                       4448 2$:
      001887 35 07 50 F2      [ 1] 4449   mov AWU_TBR,#7
      00188B                       4450 3$:  
                                   4451 ; while X > 64  divide by 2 and increment AWU_TBR 
      00188B A3 00 40         [ 2] 4452   cpw x,#64 
      00188E 23 07            [ 2] 4453   jrule 4$ 
      001890 72 5C 50 F2      [ 1] 4454   inc AWU_TBR 
      001894 54               [ 2] 4455   srlw x 
      001895 20 F4            [ 2] 4456   jra 3$ 
      001897                       4457 4$:
      001897 9F               [ 1] 4458   ld a, xl
      001898 4A               [ 1] 4459   dec a 
      001899 27 01            [ 1] 4460   jreq 5$
      00189B 4A               [ 1] 4461   dec a 	
      00189C                       4462 5$: 
      00189C A4 3E            [ 1] 4463   and a,#0x3e 
      00189E C7 50 F1         [ 1] 4464   ld AWU_APR,a 
      0018A1 72 18 50 F0      [ 1] 4465   bset AWU_CSR,#AWU_CSR_AWUEN
      0018A5 8E               [10] 4466   halt 
                                   4467 
      0018A6 81               [ 4] 4468   ret 
                                   4469 
                                   4470 ;------------------------------
                                   4471 ; BASIC: TICKS
                                   4472 ; return msec ticks counter value 
                                   4473 ; input:
                                   4474 ; 	none 
                                   4475 ; output:
                                   4476 ;	X 		TK_INTGR
                                   4477 ;-------------------------------
      0018A7                       4478 get_ticks:
      0018A7 CE 00 0E         [ 2] 4479 	ldw x,ticks 
      0018AA A6 84            [ 1] 4480 	ld a,#TK_INTGR
      0018AC 81               [ 4] 4481 	ret 
                                   4482 
                                   4483 
                                   4484 
                                   4485 ;------------------------------
                                   4486 ; BASIC: ABS(expr)
                                   4487 ; return absolute value of expr.
                                   4488 ; input:
                                   4489 ;   none
                                   4490 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4491 ;   X     	positive integer
                                   4492 ;-------------------------------
      0018AD                       4493 abs:
      0018AD CD 0C 61         [ 4] 4494 	call func_args 
      0018B0 A1 01            [ 1] 4495 	cp a,#1 
      0018B2 27 03            [ 1] 4496 	jreq 0$ 
      0018B4 CC 07 BB         [ 2] 4497 	jp syntax_error
      0018B7                       4498 0$:  
      0018B7 85               [ 2] 4499     popw x   
      0018B8 9E               [ 1] 4500 	ld a,xh 
      0018B9 A5 80            [ 1] 4501 	bcp a,#0x80 
      0018BB 27 01            [ 1] 4502 	jreq 2$ 
      0018BD 50               [ 2] 4503 	negw x 
      0018BE A6 84            [ 1] 4504 2$: ld a,#TK_INTGR 
      0018C0 81               [ 4] 4505 	ret 
                                   4506 
                                   4507 ;------------------------------
                                   4508 ; BASIC: AND(expr1,expr2)
                                   4509 ; Apply bit AND relation between
                                   4510 ; the 2 arguments, i.e expr1 & expr2 
                                   4511 ; output:
                                   4512 ; 	A 		TK_INTGR
                                   4513 ;   X 		result 
                                   4514 ;------------------------------
      0018C1                       4515 bit_and:
      0018C1 CD 0C 61         [ 4] 4516 	call func_args 
      0018C4 A1 02            [ 1] 4517 	cp a,#2
      0018C6 27 03            [ 1] 4518 	jreq 1$
      0018C8 CC 07 BB         [ 2] 4519 	jp syntax_error 
      0018CB 85               [ 2] 4520 1$:	popw x 
      0018CC 9E               [ 1] 4521 	ld a,xh 
      0018CD 14 01            [ 1] 4522 	and a,(1,sp)
      0018CF 95               [ 1] 4523 	ld xh,a 
      0018D0 9F               [ 1] 4524 	ld a,xl
      0018D1 14 02            [ 1] 4525 	and a,(2,sp)
      0018D3 97               [ 1] 4526 	ld xl,a 
      0018D4                       4527 	_drop 2 
      0018D4 5B 02            [ 2]    1     addw sp,#2 
      0018D6 A6 84            [ 1] 4528 	ld a,#TK_INTGR
      0018D8 81               [ 4] 4529 	ret
                                   4530 
                                   4531 ;------------------------------
                                   4532 ; BASIC: OR(expr1,expr2)
                                   4533 ; Apply bit OR relation between
                                   4534 ; the 2 arguments, i.e expr1 | expr2 
                                   4535 ; output:
                                   4536 ; 	A 		TK_INTGR
                                   4537 ;   X 		result 
                                   4538 ;------------------------------
      0018D9                       4539 bit_or:
      0018D9 CD 0C 61         [ 4] 4540 	call func_args 
      0018DC A1 02            [ 1] 4541 	cp a,#2
      0018DE 27 03            [ 1] 4542 	jreq 1$
      0018E0 CC 07 BB         [ 2] 4543 	jp syntax_error 
      0018E3                       4544 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0018E3 85               [ 2] 4545 	popw x 
      0018E4 9E               [ 1] 4546 	ld a,xh 
      0018E5 1A 01            [ 1] 4547 	or a,(1,sp)
      0018E7 95               [ 1] 4548 	ld xh,a 
      0018E8 9F               [ 1] 4549 	ld a,xl 
      0018E9 1A 02            [ 1] 4550 	or a,(2,sp)
      0018EB 97               [ 1] 4551 	ld xl,a 
      0018EC                       4552 	_drop 2 
      0018EC 5B 02            [ 2]    1     addw sp,#2 
      0018EE A6 84            [ 1] 4553 	ld a,#TK_INTGR 
      0018F0 81               [ 4] 4554 	ret
                                   4555 
                                   4556 ;------------------------------
                                   4557 ; BASIC: XOR(expr1,expr2)
                                   4558 ; Apply bit XOR relation between
                                   4559 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4560 ; output:
                                   4561 ; 	A 		TK_INTGR
                                   4562 ;   X 		result 
                                   4563 ;------------------------------
      0018F1                       4564 bit_xor:
      0018F1 CD 0C 61         [ 4] 4565 	call func_args 
      0018F4 A1 02            [ 1] 4566 	cp a,#2
      0018F6 27 03            [ 1] 4567 	jreq 1$
      0018F8 CC 07 BB         [ 2] 4568 	jp syntax_error 
      0018FB                       4569 1$: 
      0018FB 85               [ 2] 4570 	popw x 
      0018FC 9E               [ 1] 4571 	ld a,xh 
      0018FD 18 01            [ 1] 4572 	xor a,(1,sp)
      0018FF 95               [ 1] 4573 	ld xh,a 
      001900 9F               [ 1] 4574 	ld a,xl 
      001901 18 02            [ 1] 4575 	xor a,(2,sp)
      001903 97               [ 1] 4576 	ld xl,a 
      001904                       4577 	_drop 2 
      001904 5B 02            [ 2]    1     addw sp,#2 
      001906 A6 84            [ 1] 4578 	ld a,#TK_INTGR 
      001908 81               [ 4] 4579 	ret 
                                   4580 
                                   4581 ;------------------------------
                                   4582 ; BASIC: LSHIFT(expr1,expr2)
                                   4583 ; logical shift left expr1 by 
                                   4584 ; expr2 bits 
                                   4585 ; output:
                                   4586 ; 	A 		TK_INTGR
                                   4587 ;   X 		result 
                                   4588 ;------------------------------
      001909                       4589 lshift:
      001909 CD 0C 61         [ 4] 4590 	call func_args
      00190C A1 02            [ 1] 4591 	cp a,#2 
      00190E 27 03            [ 1] 4592 	jreq 1$
      001910 CC 07 BB         [ 2] 4593 	jp syntax_error
      001913 90 85            [ 2] 4594 1$: popw y   
      001915 85               [ 2] 4595 	popw x 
      001916 90 5D            [ 2] 4596 	tnzw y 
      001918 27 05            [ 1] 4597 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00191A 58               [ 2] 4598 2$:	sllw x 
      00191B 90 5A            [ 2] 4599 	decw y 
      00191D 26 FB            [ 1] 4600 	jrne 2$
      00191F                       4601 4$:  
      00191F A6 84            [ 1] 4602 	ld a,#TK_INTGR
      001921 81               [ 4] 4603 	ret
                                   4604 
                                   4605 ;------------------------------
                                   4606 ; BASIC: RSHIFT(expr1,expr2)
                                   4607 ; logical shift right expr1 by 
                                   4608 ; expr2 bits.
                                   4609 ; output:
                                   4610 ; 	A 		TK_INTGR
                                   4611 ;   X 		result 
                                   4612 ;------------------------------
      001922                       4613 rshift:
      001922 CD 0C 61         [ 4] 4614 	call func_args
      001925 A1 02            [ 1] 4615 	cp a,#2 
      001927 27 03            [ 1] 4616 	jreq 1$
      001929 CC 07 BB         [ 2] 4617 	jp syntax_error
      00192C 90 85            [ 2] 4618 1$: popw y  
      00192E 85               [ 2] 4619 	popw x
      00192F 90 5D            [ 2] 4620 	tnzw y 
      001931 27 05            [ 1] 4621 	jreq 4$
      001933 54               [ 2] 4622 2$:	srlw x 
      001934 90 5A            [ 2] 4623 	decw y 
      001936 26 FB            [ 1] 4624 	jrne 2$
      001938                       4625 4$:  
      001938 A6 84            [ 1] 4626 	ld a,#TK_INTGR
      00193A 81               [ 4] 4627 	ret
                                   4628 
                                   4629 ;--------------------------
                                   4630 ; BASIC: FCPU integer
                                   4631 ; set CPU frequency 
                                   4632 ;-------------------------- 
                                   4633 
      00193B                       4634 fcpu:
      00193B A6 84            [ 1] 4635 	ld a,#TK_INTGR
      00193D CD 0C 54         [ 4] 4636 	call expect 
      001940 9F               [ 1] 4637 	ld a,xl 
      001941 A4 07            [ 1] 4638 	and a,#7 
      001943 C7 50 C6         [ 1] 4639 	ld CLK_CKDIVR,a 
      001946 81               [ 4] 4640 	ret 
                                   4641 
                                   4642 ;------------------------------
                                   4643 ; BASIC: PMODE pin#, mode 
                                   4644 ; Arduino pin. 
                                   4645 ; define pin as input or output
                                   4646 ; pin#: {0..15}
                                   4647 ; mode: INPUT|OUTPUT  
                                   4648 ;------------------------------
                           000001  4649 	PINNO=1
                           000001  4650 	VSIZE=1
      001947                       4651 pin_mode:
      001947                       4652 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001947 52 01            [ 2]    1     sub sp,#VSIZE 
      001949 CD 0C 66         [ 4] 4653 	call arg_list 
      00194C A1 02            [ 1] 4654 	cp a,#2 
      00194E 27 03            [ 1] 4655 	jreq 1$
      001950 CC 07 BB         [ 2] 4656 	jp syntax_error 
      001953 90 85            [ 2] 4657 1$: popw y ; mode 
      001955 85               [ 2] 4658 	popw x ; Dx pin 
      001956 CD 19 93         [ 4] 4659 	call select_pin 
      001959 6B 01            [ 1] 4660 	ld (PINNO,sp),a  
      00195B A6 01            [ 1] 4661 	ld a,#1 
      00195D 0D 01            [ 1] 4662 	tnz (PINNO,sp)
      00195F 27 0D            [ 1] 4663 	jreq 4$
      001961 48               [ 1] 4664 2$:	sll a 
      001962 0A 01            [ 1] 4665 	dec (PINNO,sp)
      001964 26 FB            [ 1] 4666 	jrne 2$ 
      001966 6B 01            [ 1] 4667 	ld (PINNO,sp),a
      001968 7B 01            [ 1] 4668 	ld a,(PINNO,sp)
      00196A EA 03            [ 1] 4669 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      00196C E7 03            [ 1] 4670 	ld (GPIO_CR1,x),a 
      00196E 90 A3 00 01      [ 2] 4671 4$:	cpw y,#OUTP 
      001972 27 10            [ 1] 4672 	jreq 6$
                                   4673 ; input mode
                                   4674 ; disable external interrupt 
      001974 7B 01            [ 1] 4675 	ld a,(PINNO,sp)
      001976 43               [ 1] 4676 	cpl a 
      001977 E4 04            [ 1] 4677 	and a,(GPIO_CR2,x)
      001979 E7 04            [ 1] 4678 	ld (GPIO_CR2,x),a 
                                   4679 ;clear bit in DDR for input mode 
      00197B 7B 01            [ 1] 4680 	ld a,(PINNO,sp)
      00197D 43               [ 1] 4681 	cpl a 
      00197E E4 02            [ 1] 4682 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001980 E7 02            [ 1] 4683 	ld (GPIO_DDR,x),a 
      001982 20 0C            [ 2] 4684 	jra 9$
      001984                       4685 6$: ;output mode  
      001984 7B 01            [ 1] 4686 	ld a,(PINNO,sp)
      001986 EA 02            [ 1] 4687 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001988 E7 02            [ 1] 4688 	ld (GPIO_DDR,x),a 
      00198A 7B 01            [ 1] 4689 	ld a,(PINNO,sp)
      00198C EA 04            [ 1] 4690 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      00198E E7 04            [ 1] 4691 	ld (GPIO_CR2,x),a 
      001990                       4692 9$:	
      001990                       4693 	_drop VSIZE 
      001990 5B 01            [ 2]    1     addw sp,#VSIZE 
      001992 81               [ 4] 4694 	ret
                                   4695 
                                   4696 ;------------------------
                                   4697 ; select Arduino pin 
                                   4698 ; input:
                                   4699 ;   X 	 {0..15} Arduino Dx 
                                   4700 ; output:
                                   4701 ;   A     stm8s208 pin 
                                   4702 ;   X     base address s208 GPIO port 
                                   4703 ;---------------------------
      001993                       4704 select_pin:
      001993 58               [ 2] 4705 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001994 1C 19 A3         [ 2] 4706 	addw x,#arduino_to_8s208 
      001997 FE               [ 2] 4707 	ldw x,(x)
      001998 9F               [ 1] 4708 	ld a,xl 
      001999 88               [ 1] 4709 	push a 
      00199A 5E               [ 1] 4710 	swapw x 
      00199B A6 05            [ 1] 4711 	ld a,#5 
      00199D 42               [ 4] 4712 	mul x,a 
      00199E 1C 50 00         [ 2] 4713 	addw x,#GPIO_BASE 
      0019A1 84               [ 1] 4714 	pop a 
      0019A2 81               [ 4] 4715 	ret 
                                   4716 ; translation from Arduino D0..D15 to stm8s208rb 
      0019A3                       4717 arduino_to_8s208:
      0019A3 03 06                 4718 .byte 3,6 ; D0 
      0019A5 03 05                 4719 .byte 3,5 ; D1 
      0019A7 04 00                 4720 .byte 4,0 ; D2 
      0019A9 02 01                 4721 .byte 2,1 ; D3
      0019AB 06 00                 4722 .byte 6,0 ; D4
      0019AD 02 02                 4723 .byte 2,2 ; D5
      0019AF 02 03                 4724 .byte 2,3 ; D6
      0019B1 03 01                 4725 .byte 3,1 ; D7
      0019B3 03 03                 4726 .byte 3,3 ; D8
      0019B5 02 04                 4727 .byte 2,4 ; D9
      0019B7 04 05                 4728 .byte 4,5 ; D10
      0019B9 02 06                 4729 .byte 2,6 ; D11
      0019BB 02 07                 4730 .byte 2,7 ; D12
      0019BD 02 05                 4731 .byte 2,5 ; D13
      0019BF 04 02                 4732 .byte 4,2 ; D14
      0019C1 04 01                 4733 .byte 4,1 ; D15
                                   4734 
                                   4735 
                                   4736 ;------------------------------
                                   4737 ; BASIC: RND(expr)
                                   4738 ; return random number 
                                   4739 ; between 1 and expr inclusive
                                   4740 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4741 ; input:
                                   4742 ; 	none 
                                   4743 ; output:
                                   4744 ;	X 		random positive integer 
                                   4745 ;------------------------------
      0019C3                       4746 random:
      0019C3 CD 0C 61         [ 4] 4747 	call func_args 
      0019C6 A1 01            [ 1] 4748 	cp a,#1
      0019C8 27 03            [ 1] 4749 	jreq 1$
      0019CA CC 07 BB         [ 2] 4750 	jp syntax_error
      0019CD                       4751 1$:  
      0019CD A6 80            [ 1] 4752 	ld a,#0x80 
      0019CF 15 01            [ 1] 4753 	bcp a,(1,sp)
      0019D1 27 05            [ 1] 4754 	jreq 2$
      0019D3 A6 0A            [ 1] 4755 	ld a,#ERR_BAD_VALUE
      0019D5 CC 07 BD         [ 2] 4756 	jp tb_error
      0019D8                       4757 2$: 
                                   4758 ; acc16=(x<<5)^x 
      0019D8 CE 00 12         [ 2] 4759 	ldw x,seedx 
      0019DB 58               [ 2] 4760 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0019DC 58               [ 2] 4761 	sllw x 
      0019DD 58               [ 2] 4762 	sllw x 
      0019DE 58               [ 2] 4763 	sllw x 
      0019DF 58               [ 2] 4764 	sllw x 
      0019E0 9E               [ 1] 4765 	ld a,xh 
      0019E1 C8 00 12         [ 1] 4766 	xor a,seedx 
      0019E4 C7 00 0C         [ 1] 4767 	ld acc16,a 
      0019E7 9F               [ 1] 4768 	ld a,xl 
      0019E8 C8 00 13         [ 1] 4769 	xor a,seedx+1 
      0019EB C7 00 0D         [ 1] 4770 	ld acc8,a 
                                   4771 ; seedx=seedy 
      0019EE CE 00 14         [ 2] 4772 	ldw x,seedy 
      0019F1 CF 00 12         [ 2] 4773 	ldw seedx,x  
                                   4774 ; seedy=seedy^(seedy>>1)
      0019F4 90 54            [ 2] 4775 	srlw y 
      0019F6 90 9E            [ 1] 4776 	ld a,yh 
      0019F8 C8 00 14         [ 1] 4777 	xor a,seedy 
      0019FB C7 00 14         [ 1] 4778 	ld seedy,a  
      0019FE 90 9F            [ 1] 4779 	ld a,yl 
      001A00 C8 00 15         [ 1] 4780 	xor a,seedy+1 
      001A03 C7 00 15         [ 1] 4781 	ld seedy+1,a 
                                   4782 ; acc16>>3 
      001A06 CE 00 0C         [ 2] 4783 	ldw x,acc16 
      001A09 54               [ 2] 4784 	srlw x 
      001A0A 54               [ 2] 4785 	srlw x 
      001A0B 54               [ 2] 4786 	srlw x 
                                   4787 ; x=acc16^x 
      001A0C 9E               [ 1] 4788 	ld a,xh 
      001A0D C8 00 0C         [ 1] 4789 	xor a,acc16 
      001A10 95               [ 1] 4790 	ld xh,a 
      001A11 9F               [ 1] 4791 	ld a,xl 
      001A12 C8 00 0D         [ 1] 4792 	xor a,acc8 
      001A15 97               [ 1] 4793 	ld xl,a 
                                   4794 ; seedy=x^seedy 
      001A16 C8 00 15         [ 1] 4795 	xor a,seedy+1
      001A19 97               [ 1] 4796 	ld xl,a 
      001A1A 9E               [ 1] 4797 	ld a,xh 
      001A1B C8 00 14         [ 1] 4798 	xor a,seedy
      001A1E 95               [ 1] 4799 	ld xh,a 
      001A1F CF 00 14         [ 2] 4800 	ldw seedy,x 
                                   4801 ; return seedy modulo expr + 1 
      001A22 90 85            [ 2] 4802 	popw y 
      001A24 65               [ 2] 4803 	divw x,y 
      001A25 93               [ 1] 4804 	ldw x,y 
      001A26 5C               [ 1] 4805 	incw x 
      001A27                       4806 10$:
      001A27 A6 84            [ 1] 4807 	ld a,#TK_INTGR
      001A29 81               [ 4] 4808 	ret 
                                   4809 
                                   4810 ;---------------------------------
                                   4811 ; BASIC: WORDS 
                                   4812 ; affiche la listes des mots du
                                   4813 ; dictionnaire ainsi que le nombre
                                   4814 ; de mots.
                                   4815 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           000001  4816 	WLEN=1 ; word length
                           000002  4817 	LLEN=2 ; character sent to console
                           000003  4818 	WCNT=3 ; count words printed 
                           000003  4819 	VSIZE=3 
      001A2A                       4820 words:
      001A2A                       4821 	_vars VSIZE
      001A2A 52 03            [ 2]    1     sub sp,#VSIZE 
      001A2C 0F 02            [ 1] 4822 	clr (LLEN,sp)
      001A2E 0F 03            [ 1] 4823 	clr (WCNT,sp)
      001A30 90 AE 21 15      [ 2] 4824 	ldw y,#kword_dict+2
      001A34 93               [ 1] 4825 0$:	ldw x,y
      001A35 F6               [ 1] 4826 	ld a,(x)
      001A36 A4 0F            [ 1] 4827 	and a,#15 
      001A38 6B 01            [ 1] 4828 	ld (WLEN,sp),a 
      001A3A 0C 03            [ 1] 4829 	inc (WCNT,sp)
      001A3C 5C               [ 1] 4830 1$:	incw x 
      001A3D F6               [ 1] 4831 	ld a,(x)
      001A3E CD 03 2B         [ 4] 4832 	call putc 
      001A41 0C 02            [ 1] 4833 	inc (LLEN,sp)
      001A43 0A 01            [ 1] 4834 	dec (WLEN,sp)
      001A45 26 F5            [ 1] 4835 	jrne 1$
      001A47 A6 46            [ 1] 4836 	ld a,#70
      001A49 11 02            [ 1] 4837 	cp a,(LLEN,sp)
      001A4B 2B 09            [ 1] 4838 	jrmi 2$   
      001A4D A6 20            [ 1] 4839 	ld a,#SPACE 
      001A4F CD 03 2B         [ 4] 4840 	call putc 
      001A52 0C 02            [ 1] 4841 	inc (LLEN,sp) 
      001A54 20 07            [ 2] 4842 	jra 3$
      001A56 A6 0D            [ 1] 4843 2$: ld a,#CR 
      001A58 CD 03 2B         [ 4] 4844 	call putc 
      001A5B 0F 02            [ 1] 4845 	clr (LLEN,sp)
      001A5D 72 A2 00 02      [ 2] 4846 3$:	subw y,#2 
      001A61 90 FE            [ 2] 4847 	ldw y,(y)
      001A63 26 CF            [ 1] 4848 	jrne 0$ 
      001A65 A6 0D            [ 1] 4849 	ld a,#CR 
      001A67 CD 03 2B         [ 4] 4850 	call putc  
      001A6A 5F               [ 1] 4851 	clrw x 
      001A6B 7B 03            [ 1] 4852 	ld a,(WCNT,sp)
      001A6D 97               [ 1] 4853 	ld xl,a 
      001A6E CD 09 0E         [ 4] 4854 	call print_int 
      001A71 AE 1A 7A         [ 2] 4855 	ldw x,#words_count_msg
      001A74 CD 00 00         [ 4] 4856 	call puts 
      001A77                       4857 	_drop VSIZE 
      001A77 5B 03            [ 2]    1     addw sp,#VSIZE 
      001A79 81               [ 4] 4858 	ret 
      001A7A 20 77 6F 72 64 73 20  4859 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4860 
                                   4861 
                                   4862 ;-----------------------------
                                   4863 ; BASIC: TIMER expr 
                                   4864 ; initialize count down timer 
                                   4865 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001A90                       4866 set_timer:
      001A90 CD 0C 66         [ 4] 4867 	call arg_list
      001A93 A1 01            [ 1] 4868 	cp a,#1 
      001A95 27 03            [ 1] 4869 	jreq 1$
      001A97 CC 07 BB         [ 2] 4870 	jp syntax_error
      001A9A                       4871 1$: 
      001A9A 85               [ 2] 4872 	popw x 
      001A9B CF 00 10         [ 2] 4873 	ldw timer,x 
      001A9E 81               [ 4] 4874 	ret 
                                   4875 
                                   4876 ;------------------------------
                                   4877 ; BASIC: TIMEOUT 
                                   4878 ; return state of timer 
                                   4879 ;------------------------------
      001A9F                       4880 timeout:
      001A9F CE 00 10         [ 2] 4881 	ldw x,timer 
      001AA2                       4882 logical_complement:
      001AA2 53               [ 2] 4883 	cplw x 
      001AA3 A3 FF FF         [ 2] 4884 	cpw x,#-1
      001AA6 27 01            [ 1] 4885 	jreq 2$
      001AA8 5F               [ 1] 4886 	clrw x 
      001AA9 A6 84            [ 1] 4887 2$:	ld a,#TK_INTGR
      001AAB 81               [ 4] 4888 	ret 
                                   4889 
                                   4890 ;--------------------------------
                                   4891 ; BASIC NOT(expr) 
                                   4892 ; return logical complement of expr
                                   4893 ;--------------------------------
      001AAC                       4894 func_not:
      001AAC CD 0C 61         [ 4] 4895 	call func_args  
      001AAF A1 01            [ 1] 4896 	cp a,#1
      001AB1 27 03            [ 1] 4897 	jreq 1$
      001AB3 CC 07 BB         [ 2] 4898 	jp syntax_error
      001AB6 85               [ 2] 4899 1$:	popw x 
      001AB7 20 E9            [ 2] 4900 	jra logical_complement
                                   4901 
                                   4902 
                                   4903 
                                   4904 ;-----------------------------------
                                   4905 ; BASIC: IWDGEN expr1 
                                   4906 ; enable independant watchdog timer
                                   4907 ; expr1 is delay in multiple of 62.5µsec
                                   4908 ; expr1 -> {1..16383}
                                   4909 ;-----------------------------------
      001AB9                       4910 enable_iwdg:
      001AB9 CD 0C 66         [ 4] 4911 	call arg_list
      001ABC A1 01            [ 1] 4912 	cp a,#1 
      001ABE 27 03            [ 1] 4913 	jreq 1$
      001AC0 CC 07 BB         [ 2] 4914 	jp syntax_error 
      001AC3 85               [ 2] 4915 1$: popw x 
      001AC4 4B 00            [ 1] 4916 	push #0
      001AC6 35 CC 50 E0      [ 1] 4917 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001ACA 9E               [ 1] 4918 	ld a,xh 
      001ACB A4 3F            [ 1] 4919 	and a,#0x3f
      001ACD 95               [ 1] 4920 	ld xh,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001ACE A3 00 FF         [ 2] 4921 2$:	cpw x,#255
      001AD1 23 06            [ 2] 4922 	jrule 3$
      001AD3 0C 01            [ 1] 4923 	inc (1,sp)
      001AD5 98               [ 1] 4924 	rcf 
      001AD6 56               [ 2] 4925 	rrcw x 
      001AD7 20 F5            [ 2] 4926 	jra 2$
      001AD9 35 55 50 E0      [ 1] 4927 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001ADD 84               [ 1] 4928 	pop a  
      001ADE C7 50 E1         [ 1] 4929 	ld IWDG_PR,a 
      001AE1 9F               [ 1] 4930 	ld a,xl
      001AE2 4A               [ 1] 4931 	dec a 
      001AE3 35 55 50 E0      [ 1] 4932 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001AE7 C7 50 E2         [ 1] 4933 	ld IWDG_RLR,a 
      001AEA 35 AA 50 E0      [ 1] 4934 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001AEE 81               [ 4] 4935 	ret 
                                   4936 
                                   4937 
                                   4938 ;-----------------------------------
                                   4939 ; BASIC: IWDGREF  
                                   4940 ; refresh independant watchdog count down 
                                   4941 ; timer before it reset MCU. 
                                   4942 ;-----------------------------------
      001AEF                       4943 refresh_iwdg:
      001AEF 35 AA 50 E0      [ 1] 4944 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001AF3 81               [ 4] 4945 	ret 
                                   4946 
                                   4947 
                                   4948 ;-------------------------------------
                                   4949 ; BASIC: LOG(expr)
                                   4950 ; return logarithm base 2 of expr 
                                   4951 ; this is the position of most significant
                                   4952 ; bit set. 
                                   4953 ; input: 
                                   4954 ; output:
                                   4955 ;   X     log2 
                                   4956 ;   A     TK_INTGR 
                                   4957 ;*********************************
      001AF4                       4958 log2:
      001AF4 CD 0C 61         [ 4] 4959 	call func_args 
      001AF7 A1 01            [ 1] 4960 	cp a,#1 
      001AF9 27 03            [ 1] 4961 	jreq 1$
      001AFB CC 07 BB         [ 2] 4962 	jp syntax_error 
      001AFE 85               [ 2] 4963 1$: popw x 
      001AFF                       4964 leading_one:
      001AFF 5D               [ 2] 4965 	tnzw x 
      001B00 27 0A            [ 1] 4966 	jreq 4$
      001B02 A6 0F            [ 1] 4967 	ld a,#15 
      001B04 59               [ 2] 4968 2$: rlcw x 
      001B05 25 03            [ 1] 4969     jrc 3$
      001B07 4A               [ 1] 4970 	dec a 
      001B08 20 FA            [ 2] 4971 	jra 2$
      001B0A 5F               [ 1] 4972 3$: clrw x 
      001B0B 97               [ 1] 4973     ld xl,a
      001B0C A6 84            [ 1] 4974 4$:	ld a,#TK_INTGR
      001B0E 81               [ 4] 4975 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4976 
                                   4977 ;-----------------------------------
                                   4978 ; BASIC: BIT(expr) 
                                   4979 ; expr ->{0..15}
                                   4980 ; return 2^expr 
                                   4981 ; output:
                                   4982 ;    x    2^expr 
                                   4983 ;-----------------------------------
      001B0F                       4984 bitmask:
      001B0F CD 0C 61         [ 4] 4985     call func_args 
      001B12 A1 01            [ 1] 4986 	cp a,#1
      001B14 27 03            [ 1] 4987 	jreq 1$
      001B16 CC 07 BB         [ 2] 4988 	jp syntax_error 
      001B19 85               [ 2] 4989 1$: popw x 
      001B1A 9F               [ 1] 4990 	ld a,xl 
      001B1B A4 0F            [ 1] 4991 	and a,#15
      001B1D 5F               [ 1] 4992 	clrw x 
      001B1E 5C               [ 1] 4993 	incw x 
      001B1F 4D               [ 1] 4994 2$: tnz a 
      001B20 27 04            [ 1] 4995 	jreq 3$
      001B22 58               [ 2] 4996 	slaw x 
      001B23 4A               [ 1] 4997 	dec a 
      001B24 20 F9            [ 2] 4998 	jra 2$ 
      001B26 A6 84            [ 1] 4999 3$: ld a,#TK_INTGR
      001B28 81               [ 4] 5000 	ret 
                                   5001 
                                   5002 ;------------------------------
                                   5003 ; BASIC: INVERT(expr)
                                   5004 ; 1's complement 
                                   5005 ;--------------------------------
      001B29                       5006 invert:
      001B29 CD 0C 61         [ 4] 5007 	call func_args
      001B2C A1 01            [ 1] 5008 	cp a,#1 
      001B2E 27 03            [ 1] 5009 	jreq 1$
      001B30 CC 07 BB         [ 2] 5010 	jp syntax_error
      001B33 85               [ 2] 5011 1$: popw x  
      001B34 53               [ 2] 5012 	cplw x 
      001B35 A6 84            [ 1] 5013 	ld a,#TK_INTGR 
      001B37 81               [ 4] 5014 	ret 
                                   5015 
                                   5016 ;------------------------------
                                   5017 ; BASIC: DO 
                                   5018 ; initiate a DO ... UNTIL loop 
                                   5019 ;------------------------------
                           000003  5020 	DOLP_ADR=3 
                           000005  5021 	DOLP_INW=5
                           000004  5022 	VSIZE=4 
      001B38                       5023 do_loop:
      001B38 85               [ 2] 5024 	popw x 
      001B39                       5025 	_vars VSIZE 
      001B39 52 04            [ 2]    1     sub sp,#VSIZE 
      001B3B 89               [ 2] 5026 	pushw x 
      001B3C 90 CE 00 04      [ 2] 5027 	ldw y,basicptr 
      001B40 17 03            [ 2] 5028 	ldw (DOLP_ADR,sp),y
      001B42 90 CE 00 00      [ 2] 5029 	ldw y,in.w 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001B46 17 05            [ 2] 5030 	ldw (DOLP_INW,sp),y
      001B48 72 5C 00 20      [ 1] 5031 	inc loop_depth 
      001B4C 81               [ 4] 5032 	ret 
                                   5033 
                                   5034 ;--------------------------------
                                   5035 ; BASIC: UNTIL expr 
                                   5036 ; loop if exprssion is false 
                                   5037 ; else terminate loop
                                   5038 ;--------------------------------
      001B4D                       5039 until: 
      001B4D 72 5D 00 20      [ 1] 5040 	tnz loop_depth 
      001B51 26 03            [ 1] 5041 	jrne 1$ 
      001B53 CC 07 BB         [ 2] 5042 	jp syntax_error 
      001B56                       5043 1$: 
      001B56 CD 0D AE         [ 4] 5044 	call relation 
      001B59 A1 84            [ 1] 5045 	cp a,#TK_INTGR
      001B5B 27 03            [ 1] 5046 	jreq 2$
      001B5D CC 07 BB         [ 2] 5047 	jp syntax_error
      001B60                       5048 2$: 
      001B60 5D               [ 2] 5049 	tnzw x 
      001B61 26 10            [ 1] 5050 	jrne 9$
      001B63 1E 03            [ 2] 5051 	ldw x,(DOLP_ADR,sp)
      001B65 CF 00 04         [ 2] 5052 	ldw basicptr,x 
      001B68 E6 02            [ 1] 5053 	ld a,(2,x)
      001B6A C7 00 03         [ 1] 5054 	ld count,a 
      001B6D 1E 05            [ 2] 5055 	ldw x,(DOLP_INW,sp)
      001B6F CF 00 00         [ 2] 5056 	ldw in.w,x 
      001B72 81               [ 4] 5057 	ret 
      001B73                       5058 9$:	; remove loop data from stack  
      001B73 85               [ 2] 5059 	popw x
      001B74                       5060 	_drop VSIZE
      001B74 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B76 72 5A 00 20      [ 1] 5061 	dec loop_depth 
      001B7A FC               [ 2] 5062 	jp (x)
                                   5063 
                                   5064 ;--------------------------
                                   5065 ; BASIC: PRTA...PRTI  
                                   5066 ;  return constant value 
                                   5067 ;  PORT  offset in GPIO
                                   5068 ;  array
                                   5069 ;---------------------------
      001B7B                       5070 const_porta:
      001B7B AE 00 00         [ 2] 5071 	ldw x,#0
      001B7E A6 84            [ 1] 5072 	ld a,#TK_INTGR 
      001B80 81               [ 4] 5073 	ret 
      001B81                       5074 const_portb:
      001B81 AE 00 01         [ 2] 5075 	ldw x,#1
      001B84 A6 84            [ 1] 5076 	ld a,#TK_INTGR 
      001B86 81               [ 4] 5077 	ret 
      001B87                       5078 const_portc:
      001B87 AE 00 02         [ 2] 5079 	ldw x,#2
      001B8A A6 84            [ 1] 5080 	ld a,#TK_INTGR 
      001B8C 81               [ 4] 5081 	ret 
      001B8D                       5082 const_portd:
      001B8D AE 00 03         [ 2] 5083 	ldw x,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001B90 A6 84            [ 1] 5084 	ld a,#TK_INTGR 
      001B92 81               [ 4] 5085 	ret 
      001B93                       5086 const_porte:
      001B93 AE 00 04         [ 2] 5087 	ldw x,#4
      001B96 A6 84            [ 1] 5088 	ld a,#TK_INTGR 
      001B98 81               [ 4] 5089 	ret 
      001B99                       5090 const_portf:
      001B99 AE 00 05         [ 2] 5091 	ldw x,#5
      001B9C A6 84            [ 1] 5092 	ld a,#TK_INTGR 
      001B9E 81               [ 4] 5093 	ret 
      001B9F                       5094 const_portg:
      001B9F AE 00 06         [ 2] 5095 	ldw x,#6
      001BA2 A6 84            [ 1] 5096 	ld a,#TK_INTGR 
      001BA4 81               [ 4] 5097 	ret 
      001BA5                       5098 const_porth:
      001BA5 AE 00 07         [ 2] 5099 	ldw x,#7
      001BA8 A6 84            [ 1] 5100 	ld a,#TK_INTGR 
      001BAA 81               [ 4] 5101 	ret 
      001BAB                       5102 const_porti:
      001BAB AE 00 08         [ 2] 5103 	ldw x,#8
      001BAE A6 84            [ 1] 5104 	ld a,#TK_INTGR 
      001BB0 81               [ 4] 5105 	ret 
                                   5106 
                                   5107 ;-------------------------------
                                   5108 ; following return constant 
                                   5109 ; related to GPIO register offset 
                                   5110 ;---------------------------------
      001BB1                       5111 const_odr:
      001BB1 A6 84            [ 1] 5112 	ld a,#TK_INTGR 
      001BB3 AE 00 00         [ 2] 5113 	ldw x,#GPIO_ODR
      001BB6 81               [ 4] 5114 	ret 
      001BB7                       5115 const_idr:
      001BB7 A6 84            [ 1] 5116 	ld a,#TK_INTGR 
      001BB9 AE 00 01         [ 2] 5117 	ldw x,#GPIO_IDR
      001BBC 81               [ 4] 5118 	ret 
      001BBD                       5119 const_ddr:
      001BBD A6 84            [ 1] 5120 	ld a,#TK_INTGR 
      001BBF AE 00 02         [ 2] 5121 	ldw x,#GPIO_DDR
      001BC2 81               [ 4] 5122 	ret 
      001BC3                       5123 const_cr1:
      001BC3 A6 84            [ 1] 5124 	ld a,#TK_INTGR 
      001BC5 AE 00 03         [ 2] 5125 	ldw x,#GPIO_CR1
      001BC8 81               [ 4] 5126 	ret 
      001BC9                       5127 const_cr2:
      001BC9 A6 84            [ 1] 5128 	ld a,#TK_INTGR 
      001BCB AE 00 04         [ 2] 5129 	ldw x,#GPIO_CR2
      001BCE 81               [ 4] 5130 	ret 
                                   5131 ;-------------------------
                                   5132 ; BASIC: POUT 
                                   5133 ;  constant for port mode
                                   5134 ;  used by PMODE 
                                   5135 ;  to set pin as output
                                   5136 ;------------------------
      001BCF                       5137 const_output:
      001BCF A6 84            [ 1] 5138 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001BD1 AE 00 01         [ 2] 5139 	ldw x,#OUTP
      001BD4 81               [ 4] 5140 	ret 
                                   5141 
                                   5142 ;-------------------------
                                   5143 ; BASIC: PINP 
                                   5144 ;  constant for port mode
                                   5145 ;  used by PMODE 
                                   5146 ;  to set pin as input
                                   5147 ;------------------------
      001BD5                       5148 const_input:
      001BD5 A6 84            [ 1] 5149 	ld a,#TK_INTGR 
      001BD7 AE 00 00         [ 2] 5150 	ldw x,#INP 
      001BDA 81               [ 4] 5151 	ret 
                                   5152 	
                                   5153 ;-----------------------
                                   5154 ; memory area constants
                                   5155 ;-----------------------
      001BDB                       5156 const_eeprom_base:
      001BDB A6 84            [ 1] 5157 	ld a,#TK_INTGR 
      001BDD AE 40 00         [ 2] 5158 	ldw x,#EEPROM_BASE 
      001BE0 81               [ 4] 5159 	ret 
                                   5160 
                                   5161 ;---------------------------
                                   5162 ; BASIC: DATA 
                                   5163 ; when the interpreter find 
                                   5164 ; a DATA line it skip it.
                                   5165 ;---------------------------
      001BE1                       5166 data:
      001BE1 55 00 03 00 01   [ 1] 5167 	mov in,count 
      001BE6 81               [ 4] 5168 	ret 
                                   5169 
                                   5170 ;---------------------------
                                   5171 ; BASIC: DATLN  *expr*
                                   5172 ; set DATA pointer at line# 
                                   5173 ; specified by *expr* 
                                   5174 ;---------------------------
      001BE7                       5175 data_line:
      001BE7 CD 0D 65         [ 4] 5176 	call expression
      001BEA A1 84            [ 1] 5177 	cp a,#TK_INTGR
      001BEC 27 03            [ 1] 5178 	jreq 1$
      001BEE CC 07 BB         [ 2] 5179 	jp syntax_error 
      001BF1 CD 00 00         [ 4] 5180 1$: call search_lineno
      001BF4 5D               [ 2] 5181 	tnzw x 
      001BF5 26 05            [ 1] 5182 	jrne 3$
      001BF7 A6 05            [ 1] 5183 2$:	ld a,#ERR_NO_LINE 
      001BF9 CC 07 BD         [ 2] 5184 	jp tb_error
      001BFC                       5185 3$: ; check if valid data line 
      001BFC 90 93            [ 1] 5186     ldw y,x 
      001BFE EE 04            [ 2] 5187 	ldw x,(4,x)
      001C00 A3 1B E1         [ 2] 5188 	cpw x,#data 
      001C03 26 F2            [ 1] 5189 	jrne 2$ 
      001C05 90 CF 00 06      [ 2] 5190 	ldw data_ptr,y
      001C09 90 E6 02         [ 1] 5191 	ld a,(2,y)
      001C0C C7 00 09         [ 1] 5192 	ld data_len,a 
      001C0F 35 06 00 08      [ 1] 5193 	mov data_ofs,#FIRST_DATA_ITEM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001C13 81               [ 4] 5194 	ret
                                   5195 
                                   5196 ;---------------------------------
                                   5197 ; BASIC: RESTORE 
                                   5198 ; set data_ptr to first data line
                                   5199 ; if not DATA found pointer set to
                                   5200 ; zero 
                                   5201 ;---------------------------------
      001C14                       5202 restore:
      001C14 72 5F 00 06      [ 1] 5203 	clr data_ptr 
      001C18 72 5F 00 07      [ 1] 5204 	clr data_ptr+1
      001C1C 72 5F 00 08      [ 1] 5205 	clr data_ofs 
      001C20 72 5F 00 09      [ 1] 5206 	clr data_len
      001C24 CE 00 1C         [ 2] 5207 	ldw x,txtbgn
      001C27                       5208 data_search_loop: 	
      001C27 C3 00 1E         [ 2] 5209 	cpw x,txtend
      001C2A 24 1B            [ 1] 5210 	jruge 9$
      001C2C 90 93            [ 1] 5211 	ldw y,x 
      001C2E EE 04            [ 2] 5212 	ldw x,(4,x)
      001C30 1C 21 1B         [ 2] 5213 	addw x,#code_addr
      001C33 FE               [ 2] 5214 	ldw x,(x)
      001C34 A3 1B E1         [ 2] 5215 	cpw x,#data 
      001C37 26 1A            [ 1] 5216 	jrne try_next_line 
      001C39 90 CF 00 06      [ 2] 5217 	ldw data_ptr,y 
      001C3D 90 E6 02         [ 1] 5218 	ld a,(2,y)
      001C40 C7 00 09         [ 1] 5219 	ld data_len,a 
      001C43 35 06 00 08      [ 1] 5220 	mov data_ofs,#FIRST_DATA_ITEM
      001C47 72 5D 00 09      [ 1] 5221 9$:	tnz data_len 
      001C4B 26 05            [ 1] 5222     jrne 10$
      001C4D A6 0C            [ 1] 5223 	ld a,#ERR_NO_DATA 
      001C4F CC 07 BD         [ 2] 5224 	jp tb_error 
      001C52 81               [ 4] 5225 10$:ret
      001C53                       5226 try_next_line:
      001C53 93               [ 1] 5227 	ldw x,y 
      001C54 E6 02            [ 1] 5228 	ld a,(2,x)
      001C56 C7 00 0D         [ 1] 5229 	ld acc8,a 
      001C59 72 5F 00 0C      [ 1] 5230 	clr acc16 
      001C5D 72 BB 00 0C      [ 2] 5231 	addw x,acc16 
      001C61 20 C4            [ 2] 5232 	jra data_search_loop
                                   5233 
                                   5234 
                                   5235 ;---------------------------------
                                   5236 ; BASIC: READ 
                                   5237 ; return next data item | 0 
                                   5238 ;---------------------------------
                           000001  5239 	CTX_BPTR=1 
                           000003  5240 	CTX_IN=3 
                           000004  5241 	CTX_COUNT=4 
                           000005  5242 	XSAVE=5
                           000006  5243 	VSIZE=6
      001C63                       5244 read:
      001C63                       5245 	_vars  VSIZE 
      001C63 52 06            [ 2]    1     sub sp,#VSIZE 
      001C65                       5246 read01:	
      001C65 C6 00 08         [ 1] 5247 	ld a,data_ofs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001C68 C1 00 09         [ 1] 5248 	cp a,data_len 
      001C6B 27 37            [ 1] 5249 	jreq 2$ ; end of line  
      001C6D CD 0F AA         [ 4] 5250 	call save_context
      001C70 CE 00 06         [ 2] 5251 	ldw x,data_ptr 
      001C73 CF 00 04         [ 2] 5252 	ldw basicptr,x 
      001C76 55 00 08 00 01   [ 1] 5253 	mov in,data_ofs 
      001C7B 55 00 09 00 03   [ 1] 5254 	mov count,data_len  
      001C80 CD 0D 65         [ 4] 5255 	call expression 
      001C83 A1 84            [ 1] 5256 	cp a,#TK_INTGR 
      001C85 27 03            [ 1] 5257 	jreq 1$ 
      001C87 CC 07 BB         [ 2] 5258 	jp syntax_error 
      001C8A                       5259 1$:
      001C8A 1F 05            [ 2] 5260 	ldw (XSAVE,SP),x
      001C8C CD 08 AD         [ 4] 5261 	call next_token ; skip comma
      001C8F CE 00 04         [ 2] 5262 	ldw x,basicptr 
      001C92 CF 00 06         [ 2] 5263 	ldw data_ptr,x 
      001C95 55 00 01 00 08   [ 1] 5264 	mov data_ofs,in 
      001C9A CD 0F BA         [ 4] 5265 	call rest_context
      001C9D 1E 05            [ 2] 5266 	ldw x,(XSAVE,sp)
      001C9F A6 84            [ 1] 5267 	ld a,#TK_INTGR
      001CA1                       5268 	_drop VSIZE 
      001CA1 5B 06            [ 2]    1     addw sp,#VSIZE 
      001CA3 81               [ 4] 5269 	ret 
      001CA4                       5270 2$: ; end of line reached 
      001CA4 90 CE 00 06      [ 2] 5271 	ldw y, data_ptr 
      001CA8 72 5F 00 06      [ 1] 5272 	clr data_ptr
      001CAC 72 5F 00 07      [ 1] 5273 	clr data_ptr+1   
      001CB0 72 5F 00 08      [ 1] 5274 	clr data_ofs 
      001CB4 72 5F 00 09      [ 1] 5275 	clr data_len 
      001CB8 CD 1C 53         [ 4] 5276 	call try_next_line 
      001CBB 20 A8            [ 2] 5277 	jra read01
                                   5278 
                                   5279 
                                   5280 ;---------------------------------
                                   5281 ; BASIC: SPIEN clkdiv, 0|1  
                                   5282 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   5283 ; if clkdiv==-1 disable SPI
                                   5284 ; 0|1 -> disable|enable  
                                   5285 ;--------------------------------- 
                           000005  5286 SPI_CS_BIT=5
      001CBD                       5287 spi_enable:
      001CBD CD 0C 66         [ 4] 5288 	call arg_list 
      001CC0 A1 02            [ 1] 5289 	cp a,#2
      001CC2 27 03            [ 1] 5290 	jreq 1$
      001CC4 CC 07 BB         [ 2] 5291 	jp syntax_error 
      001CC7                       5292 1$: 
      001CC7 72 12 50 C7      [ 1] 5293 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      001CCB 85               [ 2] 5294 	popw x  
      001CCC 5D               [ 2] 5295 	tnzw x 
      001CCD 27 21            [ 1] 5296 	jreq spi_disable 
      001CCF 85               [ 2] 5297 	popw x 
      001CD0 A6 08            [ 1] 5298 	ld a,#(1<<SPI_CR1_BR)
      001CD2 42               [ 4] 5299 	mul x,a 
      001CD3 9F               [ 1] 5300 	ld a,xl 
      001CD4 C7 52 00         [ 1] 5301 	ld SPI_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   5302 ; configure ~CS on PE5 (D10 on CN8) as output. 
      001CD7 72 1A 50 14      [ 1] 5303 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      001CDB 72 1A 50 16      [ 1] 5304 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   5305 ; configure SPI as master mode 0.	
      001CDF 72 14 52 00      [ 1] 5306 	bset SPI_CR1,#SPI_CR1_MSTR
                                   5307 ; ~CS line controlled by sofware 	
      001CE3 72 12 52 01      [ 1] 5308 	bset SPI_CR2,#SPI_CR2_SSM 
      001CE7 72 10 52 01      [ 1] 5309     bset SPI_CR2,#SPI_CR2_SSI 
                                   5310 ; enable SPI
      001CEB 72 1C 52 00      [ 1] 5311 	bset SPI_CR1,#SPI_CR1_SPE 	
      001CEF 81               [ 4] 5312 	ret 
      001CF0                       5313 spi_disable:
      001CF0                       5314 	_drop #2; throw first argument.
      001CF0 5B 02            [ 2]    1     addw sp,##2 
                                   5315 ; wait spi idle 
      001CF2 A6 82            [ 1] 5316 1$:	ld a,#0x82 
      001CF4 C4 52 03         [ 1] 5317 	and a,SPI_SR
      001CF7 A1 02            [ 1] 5318 	cp a,#2 
      001CF9 26 F7            [ 1] 5319 	jrne 1$
      001CFB 72 1D 52 00      [ 1] 5320 	bres SPI_CR1,#SPI_CR1_SPE
      001CFF 72 13 50 C7      [ 1] 5321 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      001D03 72 1B 50 16      [ 1] 5322 	bres PE_DDR,#SPI_CS_BIT 
      001D07 81               [ 4] 5323 	ret 
                                   5324 
      001D08                       5325 spi_clear_error:
      001D08 A6 78            [ 1] 5326 	ld a,#0x78 
      001D0A C5 52 03         [ 1] 5327 	bcp a,SPI_SR 
      001D0D 27 04            [ 1] 5328 	jreq 1$
      001D0F 72 5F 52 03      [ 1] 5329 	clr SPI_SR 
      001D13 81               [ 4] 5330 1$: ret 
                                   5331 
      001D14                       5332 spi_send_byte:
      001D14 88               [ 1] 5333 	push a 
      001D15 CD 1D 08         [ 4] 5334 	call spi_clear_error
      001D18 84               [ 1] 5335 	pop a 
      001D19 72 03 52 03 FB   [ 2] 5336 	btjf SPI_SR,#SPI_SR_TXE,.
      001D1E C7 52 04         [ 1] 5337 	ld SPI_DR,a
      001D21 72 01 52 03 FB   [ 2] 5338 	btjf SPI_SR,#SPI_SR_RXNE,.  
      001D26 C6 52 04         [ 1] 5339 	ld a,SPI_DR 
      001D29 81               [ 4] 5340 	ret 
                                   5341 
      001D2A                       5342 spi_rcv_byte:
      001D2A A6 FF            [ 1] 5343 	ld a,#255
      001D2C 72 01 52 03 E3   [ 2] 5344 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      001D31 C6 52 04         [ 1] 5345 	ld a,SPI_DR 
      001D34 81               [ 4] 5346 	ret
                                   5347 
                                   5348 ;------------------------------
                                   5349 ; BASIC: SPIWR byte [,byte]
                                   5350 ; write 1 or more byte
                                   5351 ;------------------------------
      001D35                       5352 spi_write:
      001D35 CD 0D 65         [ 4] 5353 	call expression
      001D38 A1 84            [ 1] 5354 	cp a,#TK_INTGR 
      001D3A 27 03            [ 1] 5355 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D3C CC 07 BB         [ 2] 5356 	jp syntax_error 
      001D3F                       5357 1$:	
      001D3F 9F               [ 1] 5358 	ld a,xl 
      001D40 CD 1D 14         [ 4] 5359 	call spi_send_byte 
      001D43 CD 08 AD         [ 4] 5360 	call next_token 
      001D46 A1 09            [ 1] 5361 	cp a,#TK_COMMA 
      001D48 26 02            [ 1] 5362 	jrne 2$ 
      001D4A 20 E9            [ 2] 5363 	jra spi_write 
      001D4C 4D               [ 1] 5364 2$:	tnz a 
      001D4D 27 05            [ 1] 5365 	jreq 3$
      001D4F                       5366 	_unget_token  
      001D4F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001D54 81               [ 4] 5367 3$:	ret 
                                   5368 
                                   5369 
                                   5370 ;-------------------------------
                                   5371 ; BASIC: SPIRD 	
                                   5372 ; read one byte from SPI 
                                   5373 ;-------------------------------
      001D55                       5374 spi_read:
      001D55 CD 1D 2A         [ 4] 5375 	call spi_rcv_byte 
      001D58 5F               [ 1] 5376 	clrw x 
      001D59 97               [ 1] 5377 	ld xl,a 
      001D5A A6 84            [ 1] 5378 	ld a,#TK_INTGR 
      001D5C 81               [ 4] 5379 	ret 
                                   5380 
                                   5381 ;------------------------------
                                   5382 ; BASIC: SPISEL 0|1 
                                   5383 ; set state of ~CS line
                                   5384 ; 0|1 deselect|select  
                                   5385 ;------------------------------
      001D5D                       5386 spi_select:
      001D5D CD 08 AD         [ 4] 5387 	call next_token 
      001D60 A1 84            [ 1] 5388 	cp a,#TK_INTGR 
      001D62 27 03            [ 1] 5389 	jreq 1$
      001D64 CC 07 BB         [ 2] 5390 	jp syntax_error 
      001D67 5D               [ 2] 5391 1$: tnzw x  
      001D68 27 05            [ 1] 5392 	jreq cs_high 
      001D6A 72 1B 50 14      [ 1] 5393 	bres PE_ODR,#SPI_CS_BIT
      001D6E 81               [ 4] 5394 	ret 
      001D6F                       5395 cs_high: 
      001D6F 72 1A 50 14      [ 1] 5396 	bset PE_ODR,#SPI_CS_BIT
      001D73 81               [ 4] 5397 	ret 
                                   5398 
                                   5399 ;-------------------------------
                                   5400 ; BASIC: PAD 
                                   5401 ; Return pad buffer address.
                                   5402 ;------------------------------
      001D74                       5403 pad_ref:
      001D74 AE 16 E0         [ 2] 5404 	ldw x,#pad 
      001D77 B6 84            [ 1] 5405 	ld a,TK_INTGR
      001D79 81               [ 4] 5406 	ret 
                                   5407 
                                   5408 
                                   5409 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5410 ;      dictionary 
                                   5411 ; format:
                                   5412 ;   link:   2 bytes 
                                   5413 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5414 ;   cmd_name: 16 byte max 
                                   5415 ;   cmd_index: 2 bytes 
                                   5416 ;------------------------------
                                   5417 	.macro _dict_entry len,name,cmd_idx 
                                   5418 	.word LINK 
                                   5419 	LINK=.
                                   5420 name:
                                   5421 	.byte len 	
                                   5422 	.ascii "name"
                                   5423 	.word cmd_idx 
                                   5424 	.endm 
                                   5425 
                           000000  5426 	LINK=0
                                   5427 ; respect alphabetic order for BASIC names from Z-A
                                   5428 ; this sort order is for a cleaner WORDS cmd output. 	
      001D7A                       5429 kword_end:
      001D7A                       5430 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001D7A 00 00                    1 	.word LINK 
                           001D7C     2 	LINK=.
      001D7C                          3 XOR:
      001D7C 43                       4 	.byte 3+F_IFUNC 	
      001D7D 58 4F 52                 5 	.ascii "XOR"
      001D80 00 C6                    6 	.word XOR_IDX 
      001D82                       5431 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001D82 1D 7C                    1 	.word LINK 
                           001D84     2 	LINK=.
      001D84                          3 WRITE:
      001D84 05                       4 	.byte 5 	
      001D85 57 52 49 54 45           5 	.ascii "WRITE"
      001D8A 00 C4                    6 	.word WRITE_IDX 
      001D8C                       5432 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001D8C 1D 84                    1 	.word LINK 
                           001D8E     2 	LINK=.
      001D8E                          3 WORDS:
      001D8E 05                       4 	.byte 5 	
      001D8F 57 4F 52 44 53           5 	.ascii "WORDS"
      001D94 00 C2                    6 	.word WORDS_IDX 
      001D96                       5433 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001D96 1D 8E                    1 	.word LINK 
                           001D98     2 	LINK=.
      001D98                          3 WAIT:
      001D98 04                       4 	.byte 4 	
      001D99 57 41 49 54              5 	.ascii "WAIT"
      001D9D 00 C0                    6 	.word WAIT_IDX 
      001D9F                       5434 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001D9F 1D 98                    1 	.word LINK 
                           001DA1     2 	LINK=.
      001DA1                          3 USR:
      001DA1 43                       4 	.byte 3+F_IFUNC 	
      001DA2 55 53 52                 5 	.ascii "USR"
      001DA5 00 BE                    6 	.word USR_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001DA7                       5435 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      001DA7 1D A1                    1 	.word LINK 
                           001DA9     2 	LINK=.
      001DA9                          3 UNTIL:
      001DA9 05                       4 	.byte 5 	
      001DAA 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001DAF 00 BC                    6 	.word UNTIL_IDX 
      001DB1                       5436 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001DB1 1D A9                    1 	.word LINK 
                           001DB3     2 	LINK=.
      001DB3                          3 UFLASH:
      001DB3 46                       4 	.byte 6+F_IFUNC 	
      001DB4 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001DBA 00 BA                    6 	.word UFLASH_IDX 
      001DBC                       5437 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001DBC 1D B3                    1 	.word LINK 
                           001DBE     2 	LINK=.
      001DBE                          3 UBOUND:
      001DBE 46                       4 	.byte 6+F_IFUNC 	
      001DBF 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001DC5 00 B8                    6 	.word UBOUND_IDX 
      001DC7                       5438 	_dict_entry,4,TONE,TONE_IDX;tone  
      001DC7 1D BE                    1 	.word LINK 
                           001DC9     2 	LINK=.
      001DC9                          3 TONE:
      001DC9 04                       4 	.byte 4 	
      001DCA 54 4F 4E 45              5 	.ascii "TONE"
      001DCE 00 B6                    6 	.word TONE_IDX 
      001DD0                       5439 	_dict_entry,2,TO,TO_IDX;to
      001DD0 1D C9                    1 	.word LINK 
                           001DD2     2 	LINK=.
      001DD2                          3 TO:
      001DD2 02                       4 	.byte 2 	
      001DD3 54 4F                    5 	.ascii "TO"
      001DD5 00 B4                    6 	.word TO_IDX 
      001DD7                       5440 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001DD7 1D D2                    1 	.word LINK 
                           001DD9     2 	LINK=.
      001DD9                          3 TIMER:
      001DD9 05                       4 	.byte 5 	
      001DDA 54 49 4D 45 52           5 	.ascii "TIMER"
      001DDF 00 B0                    6 	.word TIMER_IDX 
      001DE1                       5441 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001DE1 1D D9                    1 	.word LINK 
                           001DE3     2 	LINK=.
      001DE3                          3 TIMEOUT:
      001DE3 47                       4 	.byte 7+F_IFUNC 	
      001DE4 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001DEB 00 B2                    6 	.word TMROUT_IDX 
      001DED                       5442 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001DED 1D E3                    1 	.word LINK 
                           001DEF     2 	LINK=.
      001DEF                          3 TICKS:
      001DEF 45                       4 	.byte 5+F_IFUNC 	
      001DF0 54 49 43 4B 53           5 	.ascii "TICKS"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001DF5 00 AE                    6 	.word TICKS_IDX 
      001DF7                       5443 	_dict_entry,4,STOP,STOP_IDX;stop 
      001DF7 1D EF                    1 	.word LINK 
                           001DF9     2 	LINK=.
      001DF9                          3 STOP:
      001DF9 04                       4 	.byte 4 	
      001DFA 53 54 4F 50              5 	.ascii "STOP"
      001DFE 00 AC                    6 	.word STOP_IDX 
      001E00                       5444 	_dict_entry,4,STEP,STEP_IDX;step 
      001E00 1D F9                    1 	.word LINK 
                           001E02     2 	LINK=.
      001E02                          3 STEP:
      001E02 04                       4 	.byte 4 	
      001E03 53 54 45 50              5 	.ascii "STEP"
      001E07 00 AA                    6 	.word STEP_IDX 
      001E09                       5445 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001E09 1E 02                    1 	.word LINK 
                           001E0B     2 	LINK=.
      001E0B                          3 SPIWR:
      001E0B 05                       4 	.byte 5 	
      001E0C 53 50 49 57 52           5 	.ascii "SPIWR"
      001E11 00 A8                    6 	.word SPIWR_IDX 
      001E13                       5446 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001E13 1E 0B                    1 	.word LINK 
                           001E15     2 	LINK=.
      001E15                          3 SPISEL:
      001E15 06                       4 	.byte 6 	
      001E16 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001E1C 00 A6                    6 	.word SPISEL_IDX 
      001E1E                       5447 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001E1E 1E 15                    1 	.word LINK 
                           001E20     2 	LINK=.
      001E20                          3 SPIRD:
      001E20 45                       4 	.byte 5+F_IFUNC 	
      001E21 53 50 49 52 44           5 	.ascii "SPIRD"
      001E26 00 A2                    6 	.word SPIRD_IDX 
      001E28                       5448 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001E28 1E 20                    1 	.word LINK 
                           001E2A     2 	LINK=.
      001E2A                          3 SPIEN:
      001E2A 05                       4 	.byte 5 	
      001E2B 53 50 49 45 4E           5 	.ascii "SPIEN"
      001E30 00 A4                    6 	.word SPIEN_IDX 
      001E32                       5449 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001E32 1E 2A                    1 	.word LINK 
                           001E34     2 	LINK=.
      001E34                          3 SLEEP:
      001E34 05                       4 	.byte 5 	
      001E35 53 4C 45 45 50           5 	.ascii "SLEEP"
      001E3A 00 A0                    6 	.word SLEEP_IDX 
      001E3C                       5450     _dict_entry,4,SHOW,SHOW_IDX;show 
      001E3C 1E 34                    1 	.word LINK 
                           001E3E     2 	LINK=.
      001E3E                          3 SHOW:
      001E3E 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E3F 53 48 4F 57              5 	.ascii "SHOW"
      001E43 00 9C                    6 	.word SHOW_IDX 
      001E45                       5451 	_dict_entry,4,SAVE,SAVE_IDX;save
      001E45 1E 3E                    1 	.word LINK 
                           001E47     2 	LINK=.
      001E47                          3 SAVE:
      001E47 04                       4 	.byte 4 	
      001E48 53 41 56 45              5 	.ascii "SAVE"
      001E4C 00 9A                    6 	.word SAVE_IDX 
      001E4E                       5452 	_dict_entry 3,RUN,RUN_IDX;run
      001E4E 1E 47                    1 	.word LINK 
                           001E50     2 	LINK=.
      001E50                          3 RUN:
      001E50 03                       4 	.byte 3 	
      001E51 52 55 4E                 5 	.ascii "RUN"
      001E54 00 98                    6 	.word RUN_IDX 
      001E56                       5453 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001E56 1E 50                    1 	.word LINK 
                           001E58     2 	LINK=.
      001E58                          3 RSHIFT:
      001E58 46                       4 	.byte 6+F_IFUNC 	
      001E59 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001E5F 00 96                    6 	.word RSHIFT_IDX 
      001E61                       5454 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      001E61 1E 58                    1 	.word LINK 
                           001E63     2 	LINK=.
      001E63                          3 RND:
      001E63 43                       4 	.byte 3+F_IFUNC 	
      001E64 52 4E 44                 5 	.ascii "RND"
      001E67 00 94                    6 	.word RND_IDX 
      001E69                       5455 	_dict_entry,6,RETURN,RET_IDX;return 
      001E69 1E 63                    1 	.word LINK 
                           001E6B     2 	LINK=.
      001E6B                          3 RETURN:
      001E6B 06                       4 	.byte 6 	
      001E6C 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001E72 00 92                    6 	.word RET_IDX 
      001E74                       5456 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001E74 1E 6B                    1 	.word LINK 
                           001E76     2 	LINK=.
      001E76                          3 RESTORE:
      001E76 07                       4 	.byte 7 	
      001E77 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001E7E 00 90                    6 	.word REST_IDX 
      001E80                       5457 	_dict_entry 6,REMARK,REM_IDX;remark 
      001E80 1E 76                    1 	.word LINK 
                           001E82     2 	LINK=.
      001E82                          3 REMARK:
      001E82 06                       4 	.byte 6 	
      001E83 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001E89 00 8E                    6 	.word REM_IDX 
      001E8B                       5458 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001E8B 1E 82                    1 	.word LINK 
                           001E8D     2 	LINK=.
      001E8D                          3 REBOOT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001E8D 06                       4 	.byte 6 	
      001E8E 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001E94 00 8C                    6 	.word RBT_IDX 
      001E96                       5459 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001E96 1E 8D                    1 	.word LINK 
                           001E98     2 	LINK=.
      001E98                          3 READ:
      001E98 44                       4 	.byte 4+F_IFUNC 	
      001E99 52 45 41 44              5 	.ascii "READ"
      001E9D 00 8A                    6 	.word READ_IDX 
      001E9F                       5460 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001E9F 1E 98                    1 	.word LINK 
                           001EA1     2 	LINK=.
      001EA1                          3 QKEY:
      001EA1 44                       4 	.byte 4+F_IFUNC 	
      001EA2 51 4B 45 59              5 	.ascii "QKEY"
      001EA6 00 88                    6 	.word QKEY_IDX 
      001EA8                       5461 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001EA8 1E A1                    1 	.word LINK 
                           001EAA     2 	LINK=.
      001EAA                          3 PRTI:
      001EAA 44                       4 	.byte 4+F_IFUNC 	
      001EAB 50 52 54 49              5 	.ascii "PRTI"
      001EAF 00 86                    6 	.word PRTI_IDX 
      001EB1                       5462 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001EB1 1E AA                    1 	.word LINK 
                           001EB3     2 	LINK=.
      001EB3                          3 PRTH:
      001EB3 44                       4 	.byte 4+F_IFUNC 	
      001EB4 50 52 54 48              5 	.ascii "PRTH"
      001EB8 00 84                    6 	.word PRTH_IDX 
      001EBA                       5463 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001EBA 1E B3                    1 	.word LINK 
                           001EBC     2 	LINK=.
      001EBC                          3 PRTG:
      001EBC 44                       4 	.byte 4+F_IFUNC 	
      001EBD 50 52 54 47              5 	.ascii "PRTG"
      001EC1 00 82                    6 	.word PRTG_IDX 
      001EC3                       5464 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001EC3 1E BC                    1 	.word LINK 
                           001EC5     2 	LINK=.
      001EC5                          3 PRTF:
      001EC5 44                       4 	.byte 4+F_IFUNC 	
      001EC6 50 52 54 46              5 	.ascii "PRTF"
      001ECA 00 80                    6 	.word PRTF_IDX 
      001ECC                       5465 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001ECC 1E C5                    1 	.word LINK 
                           001ECE     2 	LINK=.
      001ECE                          3 PRTE:
      001ECE 44                       4 	.byte 4+F_IFUNC 	
      001ECF 50 52 54 45              5 	.ascii "PRTE"
      001ED3 00 7E                    6 	.word PRTE_IDX 
      001ED5                       5466 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      001ED5 1E CE                    1 	.word LINK 
                           001ED7     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001ED7                          3 PRTD:
      001ED7 44                       4 	.byte 4+F_IFUNC 	
      001ED8 50 52 54 44              5 	.ascii "PRTD"
      001EDC 00 7C                    6 	.word PRTD_IDX 
      001EDE                       5467 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001EDE 1E D7                    1 	.word LINK 
                           001EE0     2 	LINK=.
      001EE0                          3 PRTC:
      001EE0 44                       4 	.byte 4+F_IFUNC 	
      001EE1 50 52 54 43              5 	.ascii "PRTC"
      001EE5 00 7A                    6 	.word PRTC_IDX 
      001EE7                       5468 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001EE7 1E E0                    1 	.word LINK 
                           001EE9     2 	LINK=.
      001EE9                          3 PRTB:
      001EE9 44                       4 	.byte 4+F_IFUNC 	
      001EEA 50 52 54 42              5 	.ascii "PRTB"
      001EEE 00 78                    6 	.word PRTB_IDX 
      001EF0                       5469 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001EF0 1E E9                    1 	.word LINK 
                           001EF2     2 	LINK=.
      001EF2                          3 PRTA:
      001EF2 44                       4 	.byte 4+F_IFUNC 	
      001EF3 50 52 54 41              5 	.ascii "PRTA"
      001EF7 00 76                    6 	.word PRTA_IDX 
      001EF9                       5470 	_dict_entry 5,PRINT,PRT_IDX;print 
      001EF9 1E F2                    1 	.word LINK 
                           001EFB     2 	LINK=.
      001EFB                          3 PRINT:
      001EFB 05                       4 	.byte 5 	
      001EFC 50 52 49 4E 54           5 	.ascii "PRINT"
      001F01 00 74                    6 	.word PRT_IDX 
      001F03                       5471 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001F03 1E FB                    1 	.word LINK 
                           001F05     2 	LINK=.
      001F05                          3 POUT:
      001F05 44                       4 	.byte 4+F_IFUNC 	
      001F06 50 4F 55 54              5 	.ascii "POUT"
      001F0A 00 72                    6 	.word POUT_IDX 
      001F0C                       5472 	_dict_entry,4,POKE,POKE_IDX;poke 
      001F0C 1F 05                    1 	.word LINK 
                           001F0E     2 	LINK=.
      001F0E                          3 POKE:
      001F0E 04                       4 	.byte 4 	
      001F0F 50 4F 4B 45              5 	.ascii "POKE"
      001F13 00 70                    6 	.word POKE_IDX 
      001F15                       5473 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001F15 1F 0E                    1 	.word LINK 
                           001F17     2 	LINK=.
      001F17                          3 PMODE:
      001F17 05                       4 	.byte 5 	
      001F18 50 4D 4F 44 45           5 	.ascii "PMODE"
      001F1D 00 6A                    6 	.word PMODE_IDX 
      001F1F                       5474 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001F1F 1F 17                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                           001F21     2 	LINK=.
      001F21                          3 PINP:
      001F21 44                       4 	.byte 4+F_IFUNC 	
      001F22 50 49 4E 50              5 	.ascii "PINP"
      001F26 00 6E                    6 	.word PINP_IDX 
      001F28                       5475 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001F28 1F 21                    1 	.word LINK 
                           001F2A     2 	LINK=.
      001F2A                          3 PEEK:
      001F2A 44                       4 	.byte 4+F_IFUNC 	
      001F2B 50 45 45 4B              5 	.ascii "PEEK"
      001F2F 00 6C                    6 	.word PEEK_IDX 
      001F31                       5476 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001F31 1F 2A                    1 	.word LINK 
                           001F33     2 	LINK=.
      001F33                          3 PAUSE:
      001F33 05                       4 	.byte 5 	
      001F34 50 41 55 53 45           5 	.ascii "PAUSE"
      001F39 00 68                    6 	.word PAUSE_IDX 
      001F3B                       5477 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001F3B 1F 33                    1 	.word LINK 
                           001F3D     2 	LINK=.
      001F3D                          3 PAD:
      001F3D 43                       4 	.byte 3+F_IFUNC 	
      001F3E 50 41 44                 5 	.ascii "PAD"
      001F41 00 66                    6 	.word PAD_IDX 
      001F43                       5478 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      001F43 1F 3D                    1 	.word LINK 
                           001F45     2 	LINK=.
      001F45                          3 OR:
      001F45 42                       4 	.byte 2+F_IFUNC 	
      001F46 4F 52                    5 	.ascii "OR"
      001F48 00 64                    6 	.word OR_IDX 
      001F4A                       5479 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001F4A 1F 45                    1 	.word LINK 
                           001F4C     2 	LINK=.
      001F4C                          3 ODR:
      001F4C 43                       4 	.byte 3+F_IFUNC 	
      001F4D 4F 44 52                 5 	.ascii "ODR"
      001F50 00 62                    6 	.word ODR_IDX 
      001F52                       5480 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001F52 1F 4C                    1 	.word LINK 
                           001F54     2 	LINK=.
      001F54                          3 NOT:
      001F54 43                       4 	.byte 3+F_IFUNC 	
      001F55 4E 4F 54                 5 	.ascii "NOT"
      001F58 00 60                    6 	.word NOT_IDX 
      001F5A                       5481 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001F5A 1F 54                    1 	.word LINK 
                           001F5C     2 	LINK=.
      001F5C                          3 NEXT:
      001F5C 04                       4 	.byte 4 	
      001F5D 4E 45 58 54              5 	.ascii "NEXT"
      001F61 00 5C                    6 	.word NEXT_IDX 
      001F63                       5482 	_dict_entry,3,NEW,NEW_IDX;new
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001F63 1F 5C                    1 	.word LINK 
                           001F65     2 	LINK=.
      001F65                          3 NEW:
      001F65 03                       4 	.byte 3 	
      001F66 4E 45 57                 5 	.ascii "NEW"
      001F69 00 5E                    6 	.word NEW_IDX 
      001F6B                       5483 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001F6B 1F 65                    1 	.word LINK 
                           001F6D     2 	LINK=.
      001F6D                          3 MULDIV:
      001F6D 46                       4 	.byte 6+F_IFUNC 	
      001F6E 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001F74 00 5A                    6 	.word MULDIV_IDX 
      001F76                       5484 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001F76 1F 6D                    1 	.word LINK 
                           001F78     2 	LINK=.
      001F78                          3 LSHIFT:
      001F78 46                       4 	.byte 6+F_IFUNC 	
      001F79 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001F7F 00 58                    6 	.word LSHIFT_IDX 
      001F81                       5485 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001F81 1F 78                    1 	.word LINK 
                           001F83     2 	LINK=.
      001F83                          3 LOG:
      001F83 43                       4 	.byte 3+F_IFUNC 	
      001F84 4C 4F 47                 5 	.ascii "LOG"
      001F87 00 56                    6 	.word LOG_IDX 
      001F89                       5486 	_dict_entry,4,LOAD,LOAD_IDX;load 
      001F89 1F 83                    1 	.word LINK 
                           001F8B     2 	LINK=.
      001F8B                          3 LOAD:
      001F8B 04                       4 	.byte 4 	
      001F8C 4C 4F 41 44              5 	.ascii "LOAD"
      001F90 00 54                    6 	.word LOAD_IDX 
      001F92                       5487 	_dict_entry 4,LIST,LIST_IDX;list
      001F92 1F 8B                    1 	.word LINK 
                           001F94     2 	LINK=.
      001F94                          3 LIST:
      001F94 04                       4 	.byte 4 	
      001F95 4C 49 53 54              5 	.ascii "LIST"
      001F99 00 52                    6 	.word LIST_IDX 
      001F9B                       5488 	_dict_entry 3,LET,LET_IDX;let 
      001F9B 1F 94                    1 	.word LINK 
                           001F9D     2 	LINK=.
      001F9D                          3 LET:
      001F9D 03                       4 	.byte 3 	
      001F9E 4C 45 54                 5 	.ascii "LET"
      001FA1 00 50                    6 	.word LET_IDX 
      001FA3                       5489 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001FA3 1F 9D                    1 	.word LINK 
                           001FA5     2 	LINK=.
      001FA5                          3 KEY:
      001FA5 43                       4 	.byte 3+F_IFUNC 	
      001FA6 4B 45 59                 5 	.ascii "KEY"
      001FA9 00 4E                    6 	.word KEY_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001FAB                       5490 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      001FAB 1F A5                    1 	.word LINK 
                           001FAD     2 	LINK=.
      001FAD                          3 IWDGREF:
      001FAD 07                       4 	.byte 7 	
      001FAE 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001FB5 00 4C                    6 	.word IWDGREF_IDX 
      001FB7                       5491 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001FB7 1F AD                    1 	.word LINK 
                           001FB9     2 	LINK=.
      001FB9                          3 IWDGEN:
      001FB9 06                       4 	.byte 6 	
      001FBA 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001FC0 00 4A                    6 	.word IWDGEN_IDX 
      001FC2                       5492 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001FC2 1F B9                    1 	.word LINK 
                           001FC4     2 	LINK=.
      001FC4                          3 INVERT:
      001FC4 46                       4 	.byte 6+F_IFUNC 	
      001FC5 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001FCB 00 48                    6 	.word INVERT_IDX 
      001FCD                       5493 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001FCD 1F C4                    1 	.word LINK 
                           001FCF     2 	LINK=.
      001FCF                          3 INPUT:
      001FCF 05                       4 	.byte 5 	
      001FD0 49 4E 50 55 54           5 	.ascii "INPUT"
      001FD5 00 46                    6 	.word INPUT_IDX 
      001FD7                       5494 	_dict_entry,2,IF,IF_IDX;if 
      001FD7 1F CF                    1 	.word LINK 
                           001FD9     2 	LINK=.
      001FD9                          3 IF:
      001FD9 02                       4 	.byte 2 	
      001FDA 49 46                    5 	.ascii "IF"
      001FDC 00 44                    6 	.word IF_IDX 
      001FDE                       5495 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001FDE 1F D9                    1 	.word LINK 
                           001FE0     2 	LINK=.
      001FE0                          3 IDR:
      001FE0 43                       4 	.byte 3+F_IFUNC 	
      001FE1 49 44 52                 5 	.ascii "IDR"
      001FE4 00 42                    6 	.word IDR_IDX 
      001FE6                       5496 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001FE6 1F E0                    1 	.word LINK 
                           001FE8     2 	LINK=.
      001FE8                          3 HEX:
      001FE8 03                       4 	.byte 3 	
      001FE9 48 45 58                 5 	.ascii "HEX"
      001FEC 00 40                    6 	.word HEX_IDX 
      001FEE                       5497 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001FEE 1F E8                    1 	.word LINK 
                           001FF0     2 	LINK=.
      001FF0                          3 GPIO:
      001FF0 44                       4 	.byte 4+F_IFUNC 	
      001FF1 47 50 49 4F              5 	.ascii "GPIO"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001FF5 00 3E                    6 	.word GPIO_IDX 
      001FF7                       5498 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001FF7 1F F0                    1 	.word LINK 
                           001FF9     2 	LINK=.
      001FF9                          3 GOTO:
      001FF9 04                       4 	.byte 4 	
      001FFA 47 4F 54 4F              5 	.ascii "GOTO"
      001FFE 00 3C                    6 	.word GOTO_IDX 
      002000                       5499 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      002000 1F F9                    1 	.word LINK 
                           002002     2 	LINK=.
      002002                          3 GOSUB:
      002002 05                       4 	.byte 5 	
      002003 47 4F 53 55 42           5 	.ascii "GOSUB"
      002008 00 3A                    6 	.word GOSUB_IDX 
      00200A                       5500 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      00200A 20 02                    1 	.word LINK 
                           00200C     2 	LINK=.
      00200C                          3 FREE:
      00200C 44                       4 	.byte 4+F_IFUNC 	
      00200D 46 52 45 45              5 	.ascii "FREE"
      002011 00 9E                    6 	.word FREE_IDX 
      002013                       5501 	_dict_entry,6,FORGET,FORGET_IDX;forget 
      002013 20 0C                    1 	.word LINK 
                           002015     2 	LINK=.
      002015                          3 FORGET:
      002015 06                       4 	.byte 6 	
      002016 46 4F 52 47 45 54        5 	.ascii "FORGET"
      00201C 00 38                    6 	.word FORGET_IDX 
      00201E                       5502 	_dict_entry,3,FOR,FOR_IDX;for 
      00201E 20 15                    1 	.word LINK 
                           002020     2 	LINK=.
      002020                          3 FOR:
      002020 03                       4 	.byte 3 	
      002021 46 4F 52                 5 	.ascii "FOR"
      002024 00 36                    6 	.word FOR_IDX 
      002026                       5503 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      002026 20 20                    1 	.word LINK 
                           002028     2 	LINK=.
      002028                          3 FCPU:
      002028 04                       4 	.byte 4 	
      002029 46 43 50 55              5 	.ascii "FCPU"
      00202D 00 34                    6 	.word FCPU_IDX 
      00202F                       5504 	_dict_entry,3,END,END_IDX;cmd_end  
      00202F 20 28                    1 	.word LINK 
                           002031     2 	LINK=.
      002031                          3 END:
      002031 03                       4 	.byte 3 	
      002032 45 4E 44                 5 	.ascii "END"
      002035 00 30                    6 	.word END_IDX 
      002037                       5505 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      002037 20 31                    1 	.word LINK 
                           002039     2 	LINK=.
      002039                          3 EEPROM:
      002039 46                       4 	.byte 6+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00203A 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002040 00 32                    6 	.word EEPROM_IDX 
      002042                       5506 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      002042 20 39                    1 	.word LINK 
                           002044     2 	LINK=.
      002044                          3 DWRITE:
      002044 06                       4 	.byte 6+F_CMD 	
      002045 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00204B 00 2E                    6 	.word DWRITE_IDX 
      00204D                       5507 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      00204D 20 44                    1 	.word LINK 
                           00204F     2 	LINK=.
      00204F                          3 DREAD:
      00204F 45                       4 	.byte 5+F_IFUNC 	
      002050 44 52 45 41 44           5 	.ascii "DREAD"
      002055 00 2C                    6 	.word DREAD_IDX 
      002057                       5508 	_dict_entry,2,DO,DO_IDX;do_loop
      002057 20 4F                    1 	.word LINK 
                           002059     2 	LINK=.
      002059                          3 DO:
      002059 02                       4 	.byte 2 	
      00205A 44 4F                    5 	.ascii "DO"
      00205C 00 2A                    6 	.word DO_IDX 
      00205E                       5509 	_dict_entry,3,DIR,DIR_IDX;directory 
      00205E 20 59                    1 	.word LINK 
                           002060     2 	LINK=.
      002060                          3 DIR:
      002060 03                       4 	.byte 3 	
      002061 44 49 52                 5 	.ascii "DIR"
      002064 00 28                    6 	.word DIR_IDX 
      002066                       5510 	_dict_entry,3,DEC,DEC_IDX;dec_base
      002066 20 60                    1 	.word LINK 
                           002068     2 	LINK=.
      002068                          3 DEC:
      002068 03                       4 	.byte 3 	
      002069 44 45 43                 5 	.ascii "DEC"
      00206C 00 26                    6 	.word DEC_IDX 
      00206E                       5511 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      00206E 20 68                    1 	.word LINK 
                           002070     2 	LINK=.
      002070                          3 DDR:
      002070 43                       4 	.byte 3+F_IFUNC 	
      002071 44 44 52                 5 	.ascii "DDR"
      002074 00 24                    6 	.word DDR_IDX 
      002076                       5512 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      002076 20 70                    1 	.word LINK 
                           002078     2 	LINK=.
      002078                          3 DATALN:
      002078 06                       4 	.byte 6 	
      002079 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      00207F 00 22                    6 	.word DATALN_IDX 
      002081                       5513 	_dict_entry,4,DATA,DATA_IDX;data  
      002081 20 78                    1 	.word LINK 
                           002083     2 	LINK=.
      002083                          3 DATA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002083 04                       4 	.byte 4 	
      002084 44 41 54 41              5 	.ascii "DATA"
      002088 00 20                    6 	.word DATA_IDX 
      00208A                       5514 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      00208A 20 83                    1 	.word LINK 
                           00208C     2 	LINK=.
      00208C                          3 CRL:
      00208C 43                       4 	.byte 3+F_IFUNC 	
      00208D 43 52 4C                 5 	.ascii "CRL"
      002090 00 1E                    6 	.word CRL_IDX 
      002092                       5515 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      002092 20 8C                    1 	.word LINK 
                           002094     2 	LINK=.
      002094                          3 CRH:
      002094 43                       4 	.byte 3+F_IFUNC 	
      002095 43 52 48                 5 	.ascii "CRH"
      002098 00 1C                    6 	.word CRH_IDX 
      00209A                       5516 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      00209A 20 94                    1 	.word LINK 
                           00209C     2 	LINK=.
      00209C                          3 CHAR:
      00209C 84                       4 	.byte 4+F_CFUNC 	
      00209D 43 48 41 52              5 	.ascii "CHAR"
      0020A1 00 1A                    6 	.word CHAR_IDX 
      0020A3                       5517 	_dict_entry,3,BYE,BYE_IDX;bye 
      0020A3 20 9C                    1 	.word LINK 
                           0020A5     2 	LINK=.
      0020A5                          3 BYE:
      0020A5 03                       4 	.byte 3 	
      0020A6 42 59 45                 5 	.ascii "BYE"
      0020A9 00 18                    6 	.word BYE_IDX 
      0020AB                       5518 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      0020AB 20 A5                    1 	.word LINK 
                           0020AD     2 	LINK=.
      0020AD                          3 BTOGL:
      0020AD 05                       4 	.byte 5 	
      0020AE 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0020B3 00 16                    6 	.word BTOGL_IDX 
      0020B5                       5519 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      0020B5 20 AD                    1 	.word LINK 
                           0020B7     2 	LINK=.
      0020B7                          3 BTEST:
      0020B7 45                       4 	.byte 5+F_IFUNC 	
      0020B8 42 54 45 53 54           5 	.ascii "BTEST"
      0020BD 00 14                    6 	.word BTEST_IDX 
      0020BF                       5520 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0020BF 20 B7                    1 	.word LINK 
                           0020C1     2 	LINK=.
      0020C1                          3 BSET:
      0020C1 04                       4 	.byte 4 	
      0020C2 42 53 45 54              5 	.ascii "BSET"
      0020C6 00 12                    6 	.word BSET_IDX 
      0020C8                       5521 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      0020C8 20 C1                    1 	.word LINK 
                           0020CA     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0020CA                          3 BRES:
      0020CA 04                       4 	.byte 4 	
      0020CB 42 52 45 53              5 	.ascii "BRES"
      0020CF 00 10                    6 	.word BRES_IDX 
      0020D1                       5522 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0020D1 20 CA                    1 	.word LINK 
                           0020D3     2 	LINK=.
      0020D3                          3 BIT:
      0020D3 43                       4 	.byte 3+F_IFUNC 	
      0020D4 42 49 54                 5 	.ascii "BIT"
      0020D7 00 0E                    6 	.word BIT_IDX 
      0020D9                       5523 	_dict_entry,3,AWU,AWU_IDX;awu 
      0020D9 20 D3                    1 	.word LINK 
                           0020DB     2 	LINK=.
      0020DB                          3 AWU:
      0020DB 03                       4 	.byte 3 	
      0020DC 41 57 55                 5 	.ascii "AWU"
      0020DF 00 0C                    6 	.word AWU_IDX 
      0020E1                       5524 	_dict_entry,7,AUTORUN,AUTORUN_IDX;autorun
      0020E1 20 DB                    1 	.word LINK 
                           0020E3     2 	LINK=.
      0020E3                          3 AUTORUN:
      0020E3 07                       4 	.byte 7 	
      0020E4 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      0020EB 00 0A                    6 	.word AUTORUN_IDX 
      0020ED                       5525 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0020ED 20 E3                    1 	.word LINK 
                           0020EF     2 	LINK=.
      0020EF                          3 ASC:
      0020EF 43                       4 	.byte 3+F_IFUNC 	
      0020F0 41 53 43                 5 	.ascii "ASC"
      0020F3 00 08                    6 	.word ASC_IDX 
      0020F5                       5526 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0020F5 20 EF                    1 	.word LINK 
                           0020F7     2 	LINK=.
      0020F7                          3 AND:
      0020F7 43                       4 	.byte 3+F_IFUNC 	
      0020F8 41 4E 44                 5 	.ascii "AND"
      0020FB 00 06                    6 	.word AND_IDX 
      0020FD                       5527 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0020FD 20 F7                    1 	.word LINK 
                           0020FF     2 	LINK=.
      0020FF                          3 ADCREAD:
      0020FF 47                       4 	.byte 7+F_IFUNC 	
      002100 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002107 00 04                    6 	.word ADCREAD_IDX 
      002109                       5528 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      002109 20 FF                    1 	.word LINK 
                           00210B     2 	LINK=.
      00210B                          3 ADCON:
      00210B 05                       4 	.byte 5 	
      00210C 41 44 43 4F 4E           5 	.ascii "ADCON"
      002111 00 02                    6 	.word ADCON_IDX 
      002113                       5529 kword_dict::
      002113                       5530 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002113 21 0B                    1 	.word LINK 
                           002115     2 	LINK=.
      002115                          3 ABS:
      002115 43                       4 	.byte 3+F_IFUNC 	
      002116 41 42 53                 5 	.ascii "ABS"
      002119 00 00                    6 	.word ABS_IDX 
                                   5531 
                                   5532 ;comands and fonctions address table 	
      00211B                       5533 code_addr::
      00211B 18 AD 12 D3 13 0F 18  5534 	.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask ; 0..7
             C1 17 53 17 E5 18 5E
             1B 0F
      00212B 10 71 10 61 10 92 10  5535 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             82 17 DC 17 41 1B C9
      002139 1B C3 1B E1 1B E7 1B  5536 	.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write ;16..23 
             BD 0E 4C 16 88 1B 38
             13 43 13 73
      00214B 12 7F 1B DB 19 3B 10  5537 	.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio ; 24..31 
             ED 16 1A 11 E8 11 CD
             17 8F
      00215B 0E 47 1B B7 10 D9 0F  5538 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             CA 1B 29 1A B9 1A EF
             17 7A
      00216B 0E 7D 0E A8 15 EA 1A  5539 	.word let,list,load,log2,lshift,muldiv,next,new ; 40..47
             F4 19 09 0B EB 11 6D
             13 FA
      00217B 1A AC 1B B1 18 D9 1D  5540 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             74 18 4B 19 47 10 C8
             1B D5
      00218B 10 B9 1B CF 0F 44 1B  5541 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             7B 1B 81 1B 87 1B 8D
             1B 93
      00219B 1B 99 1B 9F 1B A5 1B  5542 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             AB 17 82 1C 63 05 17
             10 36
      0021AB 1C 14 12 08 19 C3 19  5543 	.word restore,return, random,rshift,run,save,show,free ; 72..79
             22 12 26 14 EB 0E 06
             0E 51
      0021BB 18 40 1D 55 1C BD 1D  5544 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             5D 1D 35 11 46 13 AE
             18 A7
      0021CB 1A 90 1A 9F 11 16 12  5545 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             8F 0E 5B 17 B9 1B 4D
             17 BF
      0021DB 10 3C 1A 2A 17 0A 18  5546 	.word wait,words,write,bit_xor ; 96..99
             F1
      0021E3 00 00                 5547 	.word 0 
                                   5548 
      002200                       5549 	.bndry 128 ; align on FLASH block.
                                   5550 ; free space for user application  
      002200                       5551 user_space:
                                   5552 ; USR() function test
      002200 89               [ 2] 5553 	pushw x 
      002201 72 1A 50 0A      [ 1] 5554 	bset PC_ODR,#5 
      002205 85               [ 2] 5555 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002206 CD 18 55         [ 4] 5556 	call pause02 
      002209 72 1B 50 0A      [ 1] 5557 	bres PC_ODR,#5 
      00220D 81               [ 4] 5558 	ret
                                   5559 
                                   5560 	.area FLASH_DRIVE (ABS)
      010000                       5561 	.org 0x10000
      010000                       5562 fdrive:
                                   5563 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002115 R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      00210B R
    ADCON_ID=  000002     |   5 ADCREAD    0020FF R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        0020F7 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |   5 ASC        0020EF R   |     ASC_IDX =  000008 
  5 AUTORUN    0020E3 R   |     AUTORUN_=  00000A     |     AUTORUN_=  004000 
  5 AWU        0020DB R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000C 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |   5 BIT        0020D3 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000E 
    BLOCK_CO=  000004     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   5 BRES       0020CA R
    BRES_IDX=  000010     |     BS      =  000008     |     BSAVE   =  000001 
  5 BSET       0020C1 R   |     BSET_IDX=  000012     |     BSIZE   =  000001 
  5 BTEST      0020B7 R   |     BTEST_ID=  000014     |   5 BTOGL      0020AD R
    BTOGL_ID=  000016     |     BTW     =  000001     |   5 BYE        0020A5 R
    BYE_IDX =  000018     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       00209C R   |     CHAR_IDX=  00001A 
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        002094 R
    CRH_IDX =  00001C     |   5 CRL        00208C R   |     CRL_IDX =  00001E 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CVAR    =  000007     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   5 DATA       002083 R   |   5 DATALN     002078 R
    DATALN_I=  000022     |     DATA_IDX=  000020     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DBL     =  000003     |     DBLDIVDN=  000006     |     DBLHI   =  000001 
    DBLLO   =  000003     |     DBL_SIZE=  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        002070 R   |     DDR_IDX =  000024     |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |     DEBUG_PR=  000001 
  5 DEC        002068 R   |     DEC_IDX =  000026     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        002060 R   |     DIR_IDX =  000028 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DO         002059 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  00002A 
  5 DREAD      00204F R   |     DREAD_ID=  00002C     |   5 DWRITE     002044 R
    DWRITE_I=  00002E     |   5 EEPROM     002039 R   |     EEPROM_B=  004000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    EEPROM_E=  0047FF     |     EEPROM_I=  000032     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        002031 R   |     END_IDX =  000030 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       002028 R   |     FCPU_IDX=  000034     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        002020 R   |   5 FORGET     002015 R   |     FORGET_I=  000038 
    FOR_IDX =  000036     |   5 FREE       00200C R   |     FREE_IDX=  00009E 
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      002002 R   |     GOSUB_ID=  00003A 
  5 GOTO       001FF9 R   |     GOTO_IDX=  00003C     |   5 GPIO       001FF0 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003E 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        001FE8 R   |     HEX_IDX =  000040     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        001FE0 R   |     IDR_IDX =  000042     |   5 IF         001FD9 R
    IF_IDX  =  000044     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      001FCF R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000046 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   5 INVERT     001FC4 R
    INVERT_I=  000048     |     INW     =  000009     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   5 IWDGEN     001FB9 R   |     IWDGEN_I=  00004A 
  5 IWDGREF    001FAD R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        001FA5 R
    KEY_IDX =  00004E     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   5 LET        001F9D R   |     LET_IDX =  000050 
    LF      =  00000A     |     LIMIT   =  000005     |   5 LINK    =  002115 R
  5 LIST       001F94 R   |     LIST_IDX=  000052     |     LLEN    =  000002 
    LN_PTR  =  000005     |   5 LOAD       001F8B R   |     LOAD_IDX=  000054 
  5 LOG        001F83 R   |     LOG_IDX =  000056     |   5 LSHIFT     001F78 R
    LSHIFT_I=  000058     |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  5 MULDIV     001F6D R   |     MULDIV_I=  00005A     |     MULOP   =  000003 
    N1      =  000001     |     N2      =  000003     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000003     |     NCLKOPT =  004808 
    NEG     =  000001     |   5 NEW        001F65 R   |     NEW_FREE=  000001 
    NEW_IDX =  00005E     |   5 NEXT       001F5C R   |     NEXT_IDX=  00005C 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   5 NOT        001F54 R
    NOT_IDX =  000060     |     NUBC    =  004802     |     NWDGOPT =  004806 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R   |   5 ODR        001F4C R
    ODR_IDX =  000062     |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   5 OR         001F45 R   |     OR_IDX  =  000064 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |   5 PAD        001F3D R
    PAD_IDX =  000066     |     PAD_SIZE=  000080     |   5 PAUSE      001F33 R
    PAUSE_ID=  000068     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       001F2A R
    PEEK_IDX=  00006C     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       001F21 R   |     PINP_IDX=  00006E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      001F17 R   |     PMODE_ID=  00006A     |   5 POKE       001F0E R
    POKE_IDX=  000070     |     PORT    =  000003     |   5 POUT       001F05 R
    POUT_IDX=  000072     |   5 PRINT      001EFB R   |   5 PRTA       001EF2 R
    PRTA_IDX=  000076     |   5 PRTB       001EE9 R   |     PRTB_IDX=  000078 
  5 PRTC       001EE0 R   |     PRTC_IDX=  00007A     |   5 PRTD       001ED7 R
    PRTD_IDX=  00007C     |   5 PRTE       001ECE R   |     PRTE_IDX=  00007E 
  5 PRTF       001EC5 R   |     PRTF_IDX=  000080     |   5 PRTG       001EBC R
    PRTG_IDX=  000082     |   5 PRTH       001EB3 R   |     PRTH_IDX=  000084 
  5 PRTI       001EAA R   |     PRTI_IDX=  000086     |     PRT_IDX =  000074 
    PSTR    =  000003     |   5 QKEY       001EA1 R   |     QKEY_IDX=  000088 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
    RBT_IDX =  00008C     |   5 READ       001E98 R   |     READ_IDX=  00008A 
  5 REBOOT     001E8D R   |     REG     =  000001     |     REGA    =  000001 
    REGX    =  000003     |     REGY    =  000005     |     RELOP   =  000003 
  5 REMARK     001E82 R   |     REM_IDX =  00008E     |   5 RESTORE    001E76 R
    REST_IDX=  000090     |     RETL1   =  000001     |   5 RETURN     001E6B R
    RET_ADDR=  000003     |     RET_IDX =  000092     |     RET_INW =  000005 
  5 RND        001E63 R   |     RND_IDX =  000094     |     ROP     =  004800 
    RS      =  00001E     |   5 RSHIFT     001E58 R   |     RSHIFT_I=  000096 
    RST_SR  =  0050B3     |   5 RUN        001E50 R   |     RUN_IDX =  000098 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

    RX_QUEUE=  000008     |   5 SAVE       001E47 R   |     SAVEB   =  000002 
    SAVE_IDX=  00009A     |     SDIVSR  =  000005     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       001E3E R
    SHOW_IDX=  00009C     |     SI      =  00000F     |     SIGN    =  000001 
    SKIP    =  000005     |   5 SLEEP      001E34 R   |     SLEEP_ID=  0000A0 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      001E2A R   |     SPIEN_ID=  0000A4     |   5 SPIRD      001E20 R
    SPIRD_ID=  0000A2     |   5 SPISEL     001E15 R   |     SPISEL_I=  0000A6 
  5 SPIWR      001E0B R   |     SPIWR_ID=  0000A8     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SQUOT   =  000006     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       001E02 R   |     STEP_IDX=  0000AA 
  5 STOP       001DF9 R   |     STOP_IDX=  0000AC     |     STX     =  000002 
    SUB     =  00001A     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      001DEF R   |     TICKS_ID=  0000AE     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    001DE3 R   |   5 TIMER      001DD9 R   |     TIMER_ID=  0000B0 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000006 
    TK_CFUNC=  000082     |     TK_CHAR =  000003     |     TK_CMD  =  000080 
    TK_COLON=  000001     |     TK_COMMA=  000009     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_VAR  =  000085 
    TMROUT_I=  0000B2     |   5 TO         001DD2 R   |   5 TONE       001DC9 R
    TONE_IDX=  0000B6     |     TO_IDX  =  0000B4     |   5 Timer4Up   000078 R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     001DBE R
    UBOUND_I=  0000B8     |   5 UBTN_Han   0000BA R   |   5 UFLASH     001DB3 R
    UFLASH_I=  0000BA     |   5 UNTIL      001DA9 R   |     UNTIL_ID=  0000BC 
    US      =  00001F     |   5 USER_ABO   0000C2 R   |   5 USR        001DA1 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000BE     |   5 Uart1RxH   00000F R   |   5 Uart3RxH   000052 R
  5 UserButt   00008D R   |     VAR_ADDR=  000006     |     VSIZ    =  000002 
    VSIZE   =  000006     |     VT      =  00000B     |   5 WAIT       001D98 R
    WAIT_IDX=  0000C0     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WLEN    =  000001     |   5 WORDS      001D8E R
    WORDS_ID=  0000C2     |   5 WRITE      001D84 R   |     WRITE_ID=  0000C4 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        001D7C R
    XOR_IDX =  0000C6     |     XREG    =  000003     |     XSAVE   =  000005 
    YSAVE   =  000007     |   5 abs        0018AD R   |   1 acc16      00000C GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

  1 acc24      00000B GR  |   1 acc8       00000D GR  |   5 analog_r   00130F R
  5 arduino_   0019A3 R   |   5 arg_list   000C66 R   |   1 array_si   000021 R
  5 ascii      001753 R   |   5 atoi24     000A20 GR  |   5 atoi_exi   000A86 R
  5 autorun    0017E5 R   |   5 autorun_   000610 R   |   5 awu        00185E R
  5 awu02      001868 R   |   5 bad_port   0017B4 R   |   1 base       00000A GR
  1 basicptr   000004 GR  |   5 beep       00129C R   |   5 beep_1kh   001286 GR
  5 bit_and    0018C1 R   |   5 bit_or     0018D9 R   |   5 bit_rese   001071 R
  5 bit_set    001061 R   |   5 bit_test   001092 R   |   5 bit_togg   001082 R
  5 bit_xor    0018F1 R   |   5 bitmask    001B0F R   |   5 block_er   0001E3 R
  5 break_po   0013DC R   |   5 bye        0017DC R   |   5 cancel_a   0005D8 R
  5 char       001741 R   |   5 clear_ba   000625 R   |   5 clear_va   0004A0 R
  5 clock_in   0000DD R   |   5 cmd_end    00127F R   |   5 cmd_line   000845 R
  5 cmp_name   00147D R   |   5 code_add   00211B GR  |   5 cold_sta   000517 R
  5 comp_msg   00079A R   |     compile    ****** GX  |   5 const_cr   001BC3 R
  5 const_cr   001BC9 R   |   5 const_dd   001BBD R   |   5 const_ee   001BDB R
  5 const_id   001BB7 R   |   5 const_in   001BD5 R   |   5 const_od   001BB1 R
  5 const_ou   001BCF R   |   5 const_po   001B7B R   |   5 const_po   001B81 R
  5 const_po   001B87 R   |   5 const_po   001B8D R   |   5 const_po   001B93 R
  5 const_po   001B99 R   |   5 const_po   001B9F R   |   5 const_po   001BA5 R
  5 const_po   001BAB R   |   1 count      000003 GR  |   5 cp_loop    000C15 R
  5 cs_high    001D6F R   |   5 cstk_pro   000E20 R   |   5 data       001BE1 R
  1 data_len   000009 R   |   5 data_lin   001BE7 R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   001C27 R   |   5 dbl_sign   000B6F R
  5 dec_base   000E4C R   |     decompil   ****** GX  |   5 digital_   001343 R
  5 digital_   001373 R   |   5 dir_loop   001694 R   |   5 director   001688 R
  5 disk_fre   00146A R   |   5 div32_16   000B79 R   |   5 divide     000BD0 R
  5 divu24_8   00098F R   |   5 dneg       000B64 R   |   5 do_loop    001B38 R
  5 do_progr   0001D6 R   |   5 drive_fr   0016FD R   |   5 enable_i   001AB9 R
  5 erase_fl   000202 R   |   5 err_bad_   000705 R   |   5 err_buf_   00077B R
  5 err_cmd_   0006C9 R   |   5 err_div0   00068E R   |   5 err_dupl   0006E3 R
  5 err_math   000675 R   |   5 err_mem_   00065A R   |   5 err_msg    00063A R
  5 err_no_a   000711 R   |   5 err_no_d   000744 R   |   5 err_no_f   000768 R
  5 err_no_l   00069D R   |   5 err_no_p   000754 R   |   5 err_not_   0006F4 R
  5 err_run_   0006B3 R   |   5 err_synt   000667 R   |   5 expect     000C54 R
  5 expr_exi   000DAB R   |   5 expressi   000D65 R   |   5 factor     000CB6 R
  1 farptr     000016 R   |   5 fcpu       00193B R   |   7 fdrive     010000 R
  1 ffree      000019 R   |   5 file_cou   0016F5 R   |   5 first_li   000ED1 R
  1 flags      000023 GR  |   5 for        0010ED R   |   5 forget     00161A R
  5 free       000E51 R   |   1 free_ram   00006D R   |   5 func_arg   000C61 R
  5 func_not   001AAC R   |   5 get_arra   000C91 R   |   5 get_targ   0011B7 R
  5 get_tick   0018A7 R   |     get_toke   ****** GX  |   5 getc       00034B GR
  5 gosub      0011E8 R   |   5 goto       0011CD R   |   5 gpio       00178F R
  5 hex_base   000E47 R   |   5 hex_dump   0003F7 R   |   5 if         0010D9 R
  1 in         000001 GR  |   1 in.saved   000002 GR  |   1 in.w       000000 GR
  5 incr_far   00142A R   |   5 input_ex   001033 R   |   5 input_lo   000FCC R
  5 input_va   000FCA R   |   5 interp_l   000886 R   |   5 interpre   000861 R
  5 invert     001B29 R   |   5 is_alnum   0004C8 GR  |   5 is_alpha   0004AE GR
  5 is_digit   0004BF GR  |   5 itoa       00092A GR  |   5 itoa_loo   000949 R
  5 jp_to_ta   0011DB R   |   5 key        00177A R   |   5 kword_di   002113 GR
  5 kword_en   001D7A R   |   5 leading_   001AFF R   |   5 let        000E7D GR
  5 let_arra   000E8B R   |   5 let_var    000E8E R   |   5 lines_sk   000ED4 R
  5 list       000EA8 R   |   5 list_exi   000F16 R   |   5 list_loo   000EF4 R
  5 load       0015EA R   |   5 load_aut   0005E7 R   |   5 load_fil   0015B9 R
  5 log2       001AF4 R   |   5 logical_   001AA2 R   |   5 long_div   000B4C R
  5 loop_bac   00119A R   |   1 loop_dep   000020 R   |   5 loop_don   0011AF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Symbol Table

  5 lshift     001909 R   |   5 modulo     000BE6 R   |   5 move       00045E GR
  5 move_dow   00047C R   |   5 move_era   000168 R   |   5 move_exi   00049D R
  5 move_loo   000481 R   |   5 move_prg   00019C R   |   5 move_up    00046E R
  5 muldiv     000BEB R   |   5 multiply   000B17 R   |   5 mulu24_8   0009B7 R
  5 neg_acc2   0009F1 R   |   5 new        0013FA R   |   5 next       00116D R
  5 next_lin   000869 R   |   5 next_tok   0008AD GR  |   5 no_match   000C27 R
  3 pad        0016E0 GR  |   5 pad_ref    001D74 R   |   5 pause      00184B R
  5 pause02    001855 R   |   5 peek       0010C8 R   |   5 pin_mode   001947 R
  5 poke       0010B9 R   |   5 power_ad   0012D3 R   |   5 print      000F44 R
  5 print_ex   000F9E R   |   5 print_in   00090E R   |   5 printxy    000A8A R
  5 program_   00017C R   |   5 program_   00019C R   |   5 prt_basi   000F24 R
  5 prt_loop   000F48 R   |   5 prt_tok    000389 R   |   5 prti24     00091E R
  1 ptr16      000017 GR  |   1 ptr8       000018 R   |   5 putc       00032B GR
    puts       ****** GX  |   5 qgetc      00033D GR  |   5 qkey       001782 GR
  5 random     0019C3 R   |   5 read       001C63 R   |   5 read01     001C65 R
    readln     ****** GX  |   5 refresh_   001AEF R   |   5 rel_exit   000E03 R
  5 relation   000DAE R   |   5 remark     001036 GR  |   5 reset_co   000F46 R
  5 rest_con   000FBA R   |   5 restore    001C14 R   |   5 return     001208 R
    right_al   ****** GX  |   5 row_alig   00140F R   |   5 row_eras   000141 R
  5 row_eras   000168 R   |   5 row_loop   0003DA R   |   5 rshift     001922 R
  5 rt_msg     000788 R   |   5 run        001226 R   |   5 run_it     001258 R
  1 rx1_head   00002D R   |   1 rx1_queu   000025 R   |   1 rx1_tail   00002E R
  1 rx3_head   000037 R   |   1 rx3_queu   00002F R   |   1 rx3_tail   000038 R
  5 save       0014EB R   |   5 save_con   000FAA R   |   5 search_d   000C07 GR
  5 search_e   000C51 R   |   5 search_f   00149E R   |     search_l   ****** GX
  5 search_n   000C0B R   |   1 seedx      000012 R   |   1 seedy      000014 R
  5 seek_fdr   001438 R   |   5 select_p   001993 R   |   5 set_time   001A90 R
  5 show       000E06 R   |   5 show_row   0003C8 R   |   5 sleep      001840 R
  5 software   0004D1 R   |     spaces     ****** GX  |   5 spi_clea   001D08 R
  5 spi_disa   001CF0 R   |   5 spi_enab   001CBD R   |   5 spi_rcv_   001D2A R
  5 spi_read   001D55 R   |   5 spi_sele   001D5D R   |   5 spi_send   001D14 R
  5 spi_writ   001D35 R   |   3 stack_fu   001760 GR  |   3 stack_un   001800 R
  5 step       001146 R   |   5 stop       0013AE R   |   5 store_lo   00115A R
  5 str_matc   000C34 R   |   5 strcmp     00043F R   |   5 strcpy     000450 GR
  5 strlen     000434 GR  |   5 syntax_e   0007BB GR  |   1 tab_widt   000024 GR
  5 tb_error   0007BD GR  |   5 term       000D13 R   |   5 term01     000D1B R
  5 term_exi   000D62 R   |   3 tib        001690 GR  |   1 ticks      00000E R
  5 timeout    001A9F R   |   1 timer      000010 GR  |   5 timer2_i   0000F3 R
  5 timer4_i   000100 R   |   5 tk_id      0007AB R   |   5 to         001116 R
  5 to_eepro   0001BF R   |   5 to_flash   0001D3 R   |   5 to_upper   000A14 GR
  5 token_ms   0003C0 R   |   5 tone       00128F R   |   5 try_next   001C53 R
  1 txtbgn     00001C GR  |   1 txtend     00001E GR  |   5 uart1_ge   00034B GR
  5 uart1_in   0002E8 R   |   5 uart1_pu   00032B GR  |   5 uart1_qg   00033D GR
  5 uart1_se   0002F8 R   |   5 uart3_ge   00036A GR  |   5 uart3_in   0002A5 R
  5 uart3_pu   000334 GR  |   5 uart3_qg   000344 GR  |   5 uart3_se   0002B5 R
  5 ubound     000E5B R   |   5 udiv32_1   000B3A R   |   5 uflash     0017B9 R
  5 umstar     000ADD R   |   5 unlock_e   000115 R   |   5 unlock_f   00012B R
  5 until      001B4D R   |   5 user_int   0000A0 R   |   5 user_spa   002200 R
  5 usr        0017BF R   |     var_name   ****** GX  |   1 vars       000039 GR
  5 wait       00103C R   |   5 warm_ini   0005BA R   |   5 warm_sta   000842 R
  5 words      001A2A R   |   5 words_co   001A7A R   |   5 write      00170A R
  5 write_bl   000282 R   |   5 write_by   00020D R   |   5 write_ee   000249 R
  5 write_ex   00027D R   |   5 write_fl   000233 R   |   5 write_ro   0001B0 R
  5 zero_pad   001404 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     6D   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   220E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

