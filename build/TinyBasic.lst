ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           00008C    27 	STACK_SIZE=140
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000003    29         CELL_SIZE=3
                           00003C    30         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    31         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    32 	FRUN=0 ; flags run code in variable flags
                           000001    33 	FTRAP=1 ; inside trap handler 
                           000002    34 	FLOOP=2 ; FOR loop in preparation 
                           000003    35 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    36 	FBREAK=4 ; break point flag 
                           000005    37 	FCOMP=5  ; compiling flags 
                                     38 
                                     39 
                           000006    40         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     41 
                           007FFF    42 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     43 
                           000008    44 	RX_QUEUE_SIZE=8 
                                     45 
                           00F424    46         TIM2_CLK_FREQ=62500
                                     47 
                           000050    48 	TIB_SIZE=80
                           000080    49         PAD_SIZE=BLOCK_SIZE 
                                     50 
                                     51 ;--------------------------------------
                                     52 ;   constantes related to Arduino 
                                     53 ;   API mapping 
                                     54 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000000    55         INP=0
                           000001    56         OUTP=1 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;       token attribute
                                     60 ;--------------------------------------
                                     61         ; bits 4:5 identify token group 
                                     62         ; 0x0n -> miscelinous 
                                     63         ; 0x1n -> +|- operators 
                                     64         ; 0x2n -> *|/|% operators
                                     65         ; 0x3n -> relational operators 
                           000080    66         TK_CMD=128      ; BASIC command   
                           000081    67         TK_IFUNC=129    ; BASIC integer function
                           000082    68         TK_CFUNC=130    ; BASIC character function
                           000083    69         TK_CONST=131    ; BASIC constant 
                           000084    70         TK_INTGR=132    ; 16 bits integer 
                           000085    71         TK_VAR=133
                           000086    72         TK_FLOAT=134    ; float32 
                           000087    73         TK_AND=135      ;
                           000088    74         TK_OR=136       ;
                           000089    75         TK_XOR=137      ; 
                           000000    76         TK_NONE=0       ; not a token 
                           000002    77         TK_QSTR=2       ; quoted string  
                           000003    78         TK_LABEL=3      ; used for defined, constants, variables
                           000004    79         TK_CHAR=4       ; ASCII character 
                           000005    80         TK_ARRAY=5     ; array variable '@' 
                           000006    81         TK_LPAREN=6     ; left parenthesis '('
                           000007    82         TK_RPAREN=7     ; right parenthesis ')'
                           000008    83         TK_COMMA=8     ; item separator ',' 
                           000009    84         TK_SHARP=9     ; print colon width '#' 
                           00000A    85         TK_COLON=0xa      ; command separator ':' 
                                     86         
                           000010    87         TK_PLUS=0x10    ; addition operator '+'
                           000011    88         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    89         TK_MULT=0x20    ; multiplication operator '*'
                           000021    90         TK_DIV=0x21     ; division operator '/'
                           000022    91         TK_MOD=0x22     ; modulo operator '%'
                                     92 
                                     93         ; don't change these token values 
                                     94         ; values chosen to be used as a mask.
                                     95         ; bit 7   1 for dictionary words else 0 
                                     96         ; bits 6  always 0 
                                     97         ; bits 5:4 identify group 
                                     98         ; bits 3:0 token identifier inside group  
                           000031    99         TK_GT=0x31      ; relation operator '>'
                           000032   100         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   101         TK_GE=0x33      ; relation operator '>='
                           000034   102         TK_LT=0x34      ; relation operator '<'
                           000036   103         TK_LE=0x36      ; relation operator '<='
                           000035   104         TK_NE=0x35      ; relation operator '<>' not equal 
                                    105         ; token groups 
                           000030   106         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   107         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   108         TK_GRP_ADD=0x10  ; additive operators
                           000020   109         TK_GRP_MULT=0x20 ; multiplicative operators
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000030   110         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   111         CMD_END=2 
                                    112 
                                    113 ;--------------------------------------
                                    114 ;   error codes 
                                    115 ;--------------------------------------
                           000000   116     ERR_NONE=0
                           000001   117     ERR_MEM_FULL=1 
                           000002   118     ERR_SYNTAX=2
                           000003   119     ERR_MATH_OVF=3
                           000004   120     ERR_DIV0=4 
                           000005   121     ERR_NO_LINE=5
                           000006   122     ERR_RUN_ONLY=6
                           000007   123     ERR_CMD_ONLY=7
                           000008   124     ERR_DUPLICATE=8
                           000009   125     ERR_NOT_FILE=9
                           00000A   126     ERR_BAD_VALUE=10
                           00000B   127     ERR_NO_ACCESS=11
                           00000C   128     ERR_NO_DATA=12 
                           00000D   129     ERR_NO_PROG=13
                           00000E   130     ERR_NO_FSPACE=14
                           00000F   131     ERR_BUF_FULL=15
                           000010   132     ERR_OVERFLOW=16 
                                    133 
                                    134 ;--------------------------------------
                                    135 ;   assembler flags 
                                    136 ;-------------------------------------
                                    137 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    138 
                                    139      .macro _usec_dly n 
                                    140     ldw x,#(16*n-2)/4
                                    141     decw x
                                    142     nop 
                                    143     jrne .-4
                                    144     .endm 
                                    145     
                                    146     ; load X register with 
                                    147     ; entry point of dictionary
                                    148     ; before calling 'search_dict'
                                    149     .macro _ldx_dict dict_name
                                    150     ldw x,#dict_name+2
                                    151     .endm 
                                    152 
                                    153     ; reset BASIC pointer
                                    154     ; to beginning of last token
                                    155     ; extracted except if it was end of line 
                                    156     .macro _unget_token 
                                    157      mov in,in.saved  
                                    158     .endm
                                    159 
                                    160 
                                    161 ;---------------------------------------
                                    162 ;    xtack manipulation macros 
                                    163 ;    Y is used as xstack pointer  
                                    164 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; pop in A:X from XSTACK 
                                    166     .macro _xpop 
                                    167     ld a,(y)
                                    168     ldw x,y 
                                    169     ldw x,(1,x)
                                    170     addw y,#CELL_SIZE 
                                    171     .endm 
                                    172 
                                    173     ; push A:X  to XSTACK 
                                    174     .macro _xpush 
                                    175     subw y,#CELL_SIZE
                                    176     ld (y),a 
                                    177     ldw (1,y),x 
                                    178     .endm 
                                    179 
                                    180     ; drop from XSTACK 
                                    181     .macro _xdrop 
                                    182     addw y,#CELL_SIZE 
                                    183     .endm 
                                    184 
                                    185     ; @T fetch top xstack 
                                    186     .macro _at_top
                                    187     ld a,(y)
                                    188     ldw x,y 
                                    189     ldw x,(1,x)
                                    190     .endm 
                                    191 
                                    192     ; @N  fetch next on xstack 
                                    193     .macro _at_next 
                                    194     ld a,(3,y)
                                    195     ldw x,y 
                                    196     ldw x,(4,x)
                                    197     .endm 
                                    198 
                                    199     ; !T put on top of xtack 
                                    200     .macro _store_top 
                                    201     ld (y),a 
                                    202     ldw (1,y),x     
                                    203     .endm 
                                    204 
                                    205     ; !N put next on xstack 
                                    206     .macro _store_next 
                                    207     ld (3,y),a 
                                    208     ldw (4,y),x 
                                    209     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CRH_IDX=CHAR_IDX+2
                           00001A    38     CRL_IDX=CRH_IDX+2
                           00001C    39     DATA_IDX=CRL_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     GPIO_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     HEX_IDX=GPIO_IDX+2
                           00003E    56     IDR_IDX=HEX_IDX+2
                           000040    57     IF_IDX=IDR_IDX+2
                           000042    58     INPUT_IDX=IF_IDX+2
                           000044    59     INVERT_IDX=INPUT_IDX+2
                           000046    60     IWDGEN_IDX=INVERT_IDX+2
                           000048    61     IWDGREF_IDX=IWDGEN_IDX+2
                           00004A    62     KEY_IDX=IWDGREF_IDX+2
                           00004C    63     LET_IDX=KEY_IDX+2
                           00004E    64     LIST_IDX=LET_IDX+2
                           000050    65     LOG_IDX=LIST_IDX+2
                           000052    66     LSHIFT_IDX=LOG_IDX+2
                           000054    67     NEXT_IDX=LSHIFT_IDX+2
                           000056    68     NEW_IDX=NEXT_IDX+2
                           000058    69     NOT_IDX=NEW_IDX+2
                           00005A    70     ODR_IDX=NOT_IDX+2
                           00005C    71     PAD_IDX=ODR_IDX+2
                           00005E    72     PAUSE_IDX=PAD_IDX+2
                           000060    73     PMODE_IDX=PAUSE_IDX+2
                           000062    74     PEEK_IDX=PMODE_IDX+2
                           000064    75     PINP_IDX=PEEK_IDX+2
                           000066    76     POKE_IDX=PINP_IDX+2
                           000068    77     POUT_IDX=POKE_IDX+2
                           00006A    78    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           00006C    79     PRTA_IDX=PRT_IDX+2
                           00006E    80     PRTB_IDX=PRTA_IDX+2
                           000070    81     PRTC_IDX=PRTB_IDX+2
                           000072    82     PRTD_IDX=PRTC_IDX+2
                           000074    83     PRTE_IDX=PRTD_IDX+2
                           000076    84     PRTF_IDX=PRTE_IDX+2
                           000078    85     PRTG_IDX=PRTF_IDX+2
                           00007A    86     PRTH_IDX=PRTG_IDX+2
                           00007C    87     PRTI_IDX=PRTH_IDX+2
                           00007E    88     QKEY_IDX=PRTI_IDX+2
                           000080    89     READ_IDX=QKEY_IDX+2
                           000082    90     RBT_IDX=READ_IDX+2  ; REBOOT
                           000084    91 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           000086    92     REST_IDX=REM_IDX+2 ; RESTORE
                           000088    93     RET_IDX=REST_IDX+2  ; RETURN 
                           00008A    94     RND_IDX=RET_IDX+2 ; RANDOM 
                           00008C    95     RSHIFT_IDX=RND_IDX+2
                           00008E    96     RUN_IDX=RSHIFT_IDX+2
                           000090    97     FREE_IDX=RUN_IDX+2
                           000092    98     SLEEP_IDX=FREE_IDX+2
                           000094    99     SPIRD_IDX=SLEEP_IDX+2
                           000096   100     SPIEN_IDX=SPIRD_IDX+2
                           000098   101     SPISEL_IDX=SPIEN_IDX+2
                           00009A   102     SPIWR_IDX=SPISEL_IDX+2
                           00009C   103     STEP_IDX=SPIWR_IDX+2
                           00009E   104     STOP_IDX=STEP_IDX+2
                           0000A0   105     TICKS_IDX=STOP_IDX+2
                           0000A2   106     TIMER_IDX=TICKS_IDX+2
                           0000A4   107     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000A6   108     TO_IDX=TMROUT_IDX+2
                           0000A8   109     TONE_IDX=TO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000AA   110     UBOUND_IDX=TONE_IDX+2
                           0000AC   111     UFLASH_IDX=UBOUND_IDX+2
                           0000AE   112     UNTIL_IDX=UFLASH_IDX+2
                           0000B0   113     USR_IDX=UNTIL_IDX+2
                           0000B2   114     WAIT_IDX=USR_IDX+2
                           0000B4   115     WORDS_IDX=WAIT_IDX+2
                           0000B6   116     WRITE_IDX=WORDS_IDX+2
                           0000B8   117     SIZE_IDX=WRITE_IDX+2 
                           0000BA   118     ON_IDX=SIZE_IDX+2 
                           0000BC   119     GET_IDX=ON_IDX+2
                           0000BE   120     CONST_IDX=GET_IDX+2
                           0000C0   121     EEFREE_IDX=CONST_IDX+2 
                                    122      
                                    123         
                                    124 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 D2             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 C5         [ 4]  120 	call print_registers
      000019 CD 05 70         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 A1         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 17 2C         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5.
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 FF         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1D 18         [ 4]  280 	call func_eefree 
      000121 CD 1C 4F         [ 4]  281 	call ubound 
      000124 CD 14 FC         [ 4]  282 	call clear_basic
      000127 CD 25 59         [ 4]  283 	call beep_1khz  
      00012A CD 14 A9         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 27 8E         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 17 2C         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 DA         [ 4]  293 	call warm_init
      00013C AE 36 04         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 36 02      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 A1         [ 4]  299 	call puts 
      00014F CD 1E 3C         [ 4]  300 	call program_info 
      000152 CC 24 FD         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      00016A                         35 add24: ; ( i1 i2 -- i1 + i2 )
      00016A                         36     _xpop 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000173 89               [ 2]   37     pushw x  
      000174 88               [ 1]   38     push a  
      000175                         39     _at_top  
      000175 90 F6            [ 1]    1     ld a,(y)
      000177 93               [ 1]    2     ldw x,y 
      000178 EE 01            [ 2]    3     ldw x,(1,x)
      00017A 72 FB 02         [ 2]   40     addw x,(2,sp)
      00017D 19 01            [ 1]   41     adc a, (1,sp)
      00017F                         42     _store_top 
      00017F 90 F7            [ 1]    1     ld (y),a 
      000181 90 EF 01         [ 2]    2     ldw (1,y),x     
      000184                         43     _drop 3 
      000184 5B 03            [ 2]    1     addw sp,#3 
      000186 81               [ 4]   44     ret 
                                     45 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      000187                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      000187                         51     _xpop 
      000187 90 F6            [ 1]    1     ld a,(y)
      000189 93               [ 1]    2     ldw x,y 
      00018A EE 01            [ 2]    3     ldw x,(1,x)
      00018C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000190 89               [ 2]   52     pushw x 
      000191 88               [ 1]   53     push  a
      000192                         54     _at_top  
      000192 90 F6            [ 1]    1     ld a,(y)
      000194 93               [ 1]    2     ldw x,y 
      000195 EE 01            [ 2]    3     ldw x,(1,x)
      000197 72 F0 02         [ 2]   55     subw x,(2,sp) 
      00019A 12 01            [ 1]   56     sbc a, (1,sp)
      00019C                         57     _store_top  
      00019C 90 F7            [ 1]    1     ld (y),a 
      00019E 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A1                         58     _drop 3 
      0001A1 5B 03            [ 2]    1     addw sp,#3 
      0001A3 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24  i1 i2 -- 0x800000|0|0x010000
                                     63 ;------------------------------
      0001A4                         64 cp24:
      0001A4                         65     _xpop 
      0001A4 90 F6            [ 1]    1     ld a,(y)
      0001A6 93               [ 1]    2     ldw x,y 
      0001A7 EE 01            [ 2]    3     ldw x,(1,x)
      0001A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AD C7 00 0C         [ 1]   66     ld acc24,a 
      0001B0 CF 00 0D         [ 2]   67     ldw acc16,x
      0001B3                         68     _at_top 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 B0 00 0D      [ 2]   69     subw x,acc16
      0001BC C2 00 0C         [ 1]   70     sbc a,acc24
      0001BF 2F 08            [ 1]   71     jrslt 1$
      0001C1 26 0A            [ 1]   72     jrne 2$
      0001C3 5D               [ 2]   73     tnzw x 
      0001C4 26 07            [ 1]   74     jrne 2$
      0001C6 4F               [ 1]   75     clr a 
      0001C7 20 06            [ 2]   76     jra 9$ 
      0001C9                         77 1$: ; i1 < i2 
      0001C9 A6 FF            [ 1]   78     ld a,#255
      0001CB 20 02            [ 2]   79     jra 9$ 
      0001CD                         80 2$: ; i1 > i2 
      0001CD A6 01            [ 1]   81     ld a,#1 
      0001CF 5F               [ 1]   82 9$: clrw x
      0001D0                         83      _store_top 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0001D0 90 F7            [ 1]    1     ld (y),a 
      0001D2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D5 81               [ 4]   84     ret 
                                     85 
                                     86 ;-------------------------------
                                     87 ; cp24_ax 
                                     88 ; compare acc24 with A:X 
                                     89 ;-------------------------------
      0001D6                         90 cp24_ax:
      0001D6 88               [ 1]   91     push a 
      0001D7 C3 00 0D         [ 2]   92     cpw x,acc16 
      0001DA C2 00 0C         [ 1]   93     sbc a,acc24
      0001DD 84               [ 1]   94     pop a 
      0001DE 81               [ 4]   95     ret 
                                     96 
                                     97 
                                     98 ;-------------------------------
                                     99 ; abs24 
                                    100 ; abolute value of top  
                                    101 ;-------------------------------
      0001DF                        102 abs24: ; ( i -- u )
      0001DF 90 F6            [ 1]  103     ld a,(y)
      0001E1 A1 80            [ 1]  104     cp a,#0x80 
      0001E3 2A 0E            [ 1]  105     jrpl neg24 ; negative integer
      0001E5 81               [ 4]  106     ret  
                                    107 
                                    108 ;----------------------------
                                    109 ;  one's compleement 
                                    110 ;----------------------------
      0001E6                        111 cpl24:  ; i -- ~i 
      0001E6                        112     _at_top 
      0001E6 90 F6            [ 1]    1     ld a,(y)
      0001E8 93               [ 1]    2     ldw x,y 
      0001E9 EE 01            [ 2]    3     ldw x,(1,x)
      0001EB 43               [ 1]  113     cpl a 
      0001EC 53               [ 2]  114     cplw x 
      0001ED                        115     _store_top 
      0001ED 90 F7            [ 1]    1     ld (y),a 
      0001EF 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001F2 81               [ 4]  116     ret 
                                    117 
                                    118 ;----------------------------    
                                    119 ; two'2 complement of top  
                                    120 ;---------------------------
      0001F3                        121 neg24: ; (i -- -i )
      0001F3                        122     _at_top
      0001F3 90 F6            [ 1]    1     ld a,(y)
      0001F5 93               [ 1]    2     ldw x,y 
      0001F6 EE 01            [ 2]    3     ldw x,(1,x)
      0001F8 43               [ 1]  123     cpl  a  
      0001F9 53               [ 2]  124     cplw x 
      0001FA 1C 00 01         [ 2]  125     addw x,#1
      0001FD A9 00            [ 1]  126     adc a,#0
      0001FF                        127     _store_top  
      0001FF 90 F7            [ 1]    1     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000201 90 EF 01         [ 2]    2     ldw (1,y),x     
      000204 81               [ 4]  128 9$: ret 
                                    129 
                                    130 ;-----------------------------
                                    131 ; negate integer in A:X 
                                    132 ;----------------------------
      000205                        133 neg_ax:
      000205 43               [ 1]  134     cpl  a  
      000206 53               [ 2]  135     cplw x 
      000207 1C 00 01         [ 2]  136     addw x,#1
      00020A A9 00            [ 1]  137     adc a,#0
      00020C 81               [ 4]  138     ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ;  two's complement of acc24 
                                    142 ;-------------------------------------
      00020D                        143 neg_acc24: ; 
      00020D 72 53 00 0C      [ 1]  144     cpl acc24 
      000211 72 53 00 0D      [ 1]  145     cpl acc16 
      000215 72 53 00 0E      [ 1]  146     cpl acc8
      000219 72 5C 00 0E      [ 1]  147     inc acc8 
      00021D 26 0A            [ 1]  148     jrne 9$
      00021F 72 5C 00 0D      [ 1]  149     inc acc16 
      000223 26 04            [ 1]  150     jrne 9$
      000225 72 5C 00 0C      [ 1]  151     inc acc24 
      000229 81               [ 4]  152 9$: ret 
                                    153 
                                    154 
                                    155 ;--------------------------------------
                                    156 ; unsigned multiply uint24_t by uint8_t
                                    157 ; input:
                                    158 ;	acc24	uint24_t 
                                    159 ;   A		uint8_t
                                    160 ; output:
                                    161 ;   acc24   A*acc24
                                    162 ;      A    overflow, bits 31..24 
                                    163 ;-------------------------------------
                                    164 ; local variables offset  on sp
                           000001   165 	U8   = 1   ; A pushed on stack
                           000001   166 	VSIZE = 1 
      00022A                        167 mulu24_8:
      00022A 89               [ 2]  168 	pushw x    ; save X
                                    169 	; local variable
      00022B 88               [ 1]  170 	push a     ; U8
      00022C 72 5F 00 0B      [ 1]  171 	clr acc32 
                                    172 ; multiply bits 7..0 * U8   	
      000230 97               [ 1]  173 	ld xl,a 
      000231 C6 00 0E         [ 1]  174 	ld a,acc8 
      000234 42               [ 4]  175 	mul x,a 
      000235 C6 00 0D         [ 1]  176 	ld a, acc16 
      000238 CF 00 0D         [ 2]  177 	ldw acc16,x
                                    178 ; multiply middle byte, bits 15..8 * U8  	
      00023B 97               [ 1]  179 	ld xl,a 
      00023C 7B 01            [ 1]  180 	ld a,(U8,sp)
      00023E 42               [ 4]  181 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00023F C6 00 0C         [ 1]  182 	ld a,acc24
      000242 72 5F 00 0C      [ 1]  183 	clr acc24  
      000246 72 BB 00 0C      [ 2]  184 	addw x,acc24
      00024A CF 00 0C         [ 2]  185 	ldw acc24,x 
                                    186 ; multiply  MSB, bits 23..16 * U8 
      00024D 97               [ 1]  187 	ld xl,a 
      00024E 7B 01            [ 1]  188 	ld a,(U8,sp)
      000250 42               [ 4]  189 	mul x,a
      000251 72 BB 00 0B      [ 2]  190 	addw x,acc32  
      000255 CF 00 0B         [ 2]  191 	ldw acc32,x 
      000258 9E               [ 1]  192 	ld a,xh 
      000259                        193 	_drop VSIZE  
      000259 5B 01            [ 2]    1     addw sp,#VSIZE 
      00025B 85               [ 2]  194 	popw x 
      00025C 81               [ 4]  195 	ret 
                                    196 
                                    197 
                                    198 ;-------------------------------
                                    199 ; mul24 i1 i2 -- i1*i2  
                                    200 ; multiply 24 bits integers 
                                    201 ;------------------------------
                           000001   202     PROD=1 
                           000004   203     N1=4
                           000007   204     N2=7
                           00000A   205     PROD_SIGN=10
                           00000A   206     VSIZE=10 
      00025D                        207 mul24:
      00025D                        208     _vars VSIZE
      00025D 52 0A            [ 2]    1     sub sp,#VSIZE 
      00025F 0F 0A            [ 1]  209     clr (PROD_SIGN,sp)
      000261 0F 01            [ 1]  210     clr (PROD,sp)
      000263 5F               [ 1]  211     clrw x 
      000264 1F 02            [ 2]  212     ldw (PROD+1,sp),x
      000266                        213     _xpop 
      000266 90 F6            [ 1]    1     ld a,(y)
      000268 93               [ 1]    2     ldw x,y 
      000269 EE 01            [ 2]    3     ldw x,(1,x)
      00026B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00026F 4D               [ 1]  214     tnz a 
      000270 2A 05            [ 1]  215     jrpl 0$
      000272 03 0A            [ 1]  216     cpl (PROD_SIGN,sp)
      000274 CD 02 05         [ 4]  217     call neg_ax 
      000277                        218 0$:    
      000277 6B 04            [ 1]  219     ld (N1,sp),a 
      000279 1F 05            [ 2]  220     ldw (N1+1,sp),x
      00027B                        221     _at_top 
      00027B 90 F6            [ 1]    1     ld a,(y)
      00027D 93               [ 1]    2     ldw x,y 
      00027E EE 01            [ 2]    3     ldw x,(1,x)
      000280 4D               [ 1]  222     tnz a 
      000281 2A 09            [ 1]  223     jrpl 2$ 
      000283 03 0A            [ 1]  224     cpl (PROD_SIGN,sp) 
      000285 CD 02 05         [ 4]  225     call neg_ax
      000288 6B 07            [ 1]  226     ld (N2,sp),a 
      00028A 1F 08            [ 2]  227     ldw (N2+1,sp),x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00028C                        228 2$: 
      00028C C7 00 0C         [ 1]  229     ld acc24,a 
      00028F CF 00 0D         [ 2]  230     ldw acc16,x 
      000292 7B 06            [ 1]  231     ld a,(N1+2,sp); least byte     
      000294 27 12            [ 1]  232     jreq 4$
      000296 CD 02 2A         [ 4]  233     call mulu24_8
      000299 4D               [ 1]  234     tnz a 
      00029A 26 60            [ 1]  235     jrne 8$ ; overflow 
      00029C CE 00 0D         [ 2]  236     ldw x,acc16  
      00029F C6 00 0C         [ 1]  237     ld a,acc24
      0002A2 2B 58            [ 1]  238     jrmi 8$ ; overflow  
      0002A4 6B 01            [ 1]  239     ld (PROD,sp),a
      0002A6 1F 02            [ 2]  240     ldw (PROD+1,sp),x 
      0002A8                        241 4$:
      0002A8 7B 07            [ 1]  242     ld a,(N2,sp) 
      0002AA 1E 08            [ 2]  243     ldw x,(N2+1,sp)
      0002AC C7 00 0C         [ 1]  244     ld acc24,a 
      0002AF CF 00 0D         [ 2]  245     ldw acc16,x 
      0002B2 7B 05            [ 1]  246     ld a,(N1+1,sp); middle byte     
      0002B4 27 1F            [ 1]  247     jreq 5$
      0002B6 CD 02 2A         [ 4]  248     call mulu24_8
      0002B9 4D               [ 1]  249     tnz a 
      0002BA 26 40            [ 1]  250     jrne 8$ ; overflow 
      0002BC C6 00 0C         [ 1]  251     ld a,acc24 
      0002BF 26 3B            [ 1]  252     jrne 8$  ; overflow 
      0002C1 CE 00 0D         [ 2]  253     ldw x,acc16  
      0002C4 72 FB 01         [ 2]  254     addw x,(PROD,sp)
      0002C7 29 33            [ 1]  255     jrv 8$ ; overflow
      0002C9 1F 01            [ 2]  256     ldw (PROD,sp),x 
      0002CB 7B 07            [ 1]  257     ld a,(N2,sp)
      0002CD 1E 08            [ 2]  258     ldw x,(N2+1,sp)
      0002CF C7 00 0C         [ 1]  259     ld acc24,a 
      0002D2 CF 00 0D         [ 2]  260     ldw acc16,x 
      0002D5                        261 5$:
      0002D5 7B 04            [ 1]  262     ld a,(N1,sp) ; high byte 
      0002D7 27 16            [ 1]  263     jreq 6$
      0002D9 CD 02 2A         [ 4]  264     call mulu24_8
      0002DC 4D               [ 1]  265     tnz a 
      0002DD 26 1D            [ 1]  266     jrne 8$ ; overflow 
      0002DF CE 00 0C         [ 2]  267     ldw x,acc24 
      0002E2 26 18            [ 1]  268     jrne 8$ ; overflow 
      0002E4 C6 00 0E         [ 1]  269     ld a,acc8 
      0002E7 2B 13            [ 1]  270     jrmi 8$ ; overflow 
      0002E9 1B 01            [ 1]  271     add a,(PROD,sp)
      0002EB 6B 01            [ 1]  272     ld (PROD,sp),a 
      0002ED 29 0D            [ 1]  273     jrv 8$ ; overflow 
      0002EF                        274 6$:
      0002EF 7B 01            [ 1]  275     ld a,(PROD,sp)
      0002F1 1E 02            [ 2]  276     ldw x,(PROD+1,sp)
      0002F3 0D 0A            [ 1]  277     tnz (PROD_SIGN,sp)
      0002F5 27 0A            [ 1]  278     jreq 9$
      0002F7 CD 02 05         [ 4]  279     call neg_ax 
      0002FA 20 05            [ 2]  280     jra 9$ 
      0002FC                        281 8$: ; overflow
      0002FC A6 10            [ 1]  282     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002FE CC 16 A2         [ 2]  283     jp tb_error 
      000301                        284 9$:    
      000301                        285     _store_top 
      000301 90 F7            [ 1]    1     ld (y),a 
      000303 90 EF 01         [ 2]    2     ldw (1,y),x     
      000306                        286     _drop VSIZE 
      000306 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000308 81               [ 4]  287     ret 
                                    288 
                                    289 ;-------------------------------------
                                    290 ; divide uint24_t by uint8_t
                                    291 ; input:
                                    292 ;	acc24	dividend
                                    293 ;   A 		divisor
                                    294 ; output:
                                    295 ;   acc24	quotient
                                    296 ;   A		remainder
                                    297 ;------------------------------------- 
                                    298 ; offset  on sp of arguments and locals
                           000001   299 	U8   = 1   ; divisor on stack
                           000001   300 	VSIZE =1
      000309                        301 divu24_8:
      000309 89               [ 2]  302 	pushw x ; save x
      00030A 88               [ 1]  303 	push a 
                                    304 	; ld dividend UU:MM bytes in X
      00030B CE 00 0C         [ 2]  305 	ldw x,acc24
      00030E 7B 01            [ 1]  306 	ld a,(U8,SP) ; divisor
      000310 62               [ 2]  307 	div x,a ; UU:MM/U8
      000311 88               [ 1]  308 	push a  ;save remainder
      000312 CF 00 0C         [ 2]  309     ldw acc24,x ; quotient 
      000315 84               [ 1]  310 	pop a
      000316 95               [ 1]  311 	ld xh,a
      000317 C6 00 0E         [ 1]  312 	ld a,acc8
      00031A 97               [ 1]  313 	ld xl,a
      00031B 7B 01            [ 1]  314 	ld a,(U8,sp) ; divisor
      00031D 62               [ 2]  315 	div x,a  ; R:LL/U8
      00031E 6B 01            [ 1]  316 	ld (U8,sp),a ; save remainder
      000320 9F               [ 1]  317 	ld a,xl
      000321 C7 00 0E         [ 1]  318 	ld acc8,a
      000324 84               [ 1]  319 	pop a
      000325 85               [ 2]  320 	popw x
      000326 81               [ 4]  321 	ret
                                    322 
                                    323 
                                    324 ;-------------------------------
                                    325 ; div24 N/T   
                                    326 ; divide 24 bits integers
                                    327 ;  i1 i2 -- i1/i2 
                                    328 ;------------------------------
                           000001   329     DIVISOR=1
                           000004   330     CNTR=4
                           000005   331     QSIGN=5
                           000006   332     RSIGN=6 
                           000006   333     VSIZE=6 
      000327                        334 div24:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000327                        335     _vars VSIZE 
      000327 52 06            [ 2]    1     sub sp,#VSIZE 
      000329 0F 06            [ 1]  336     clr (RSIGN,sp)
      00032B 0F 05            [ 1]  337     clr (QSIGN,sp)
      00032D                        338     _xpop 
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000336 4D               [ 1]  339     tnz a 
      000337 2A 05            [ 1]  340     jrpl 0$ 
      000339 03 05            [ 1]  341     cpl (QSIGN,sp)
      00033B CD 02 05         [ 4]  342     call neg_ax
      00033E                        343 0$:
      00033E 6B 01            [ 1]  344     ld  (DIVISOR,sp),a
      000340 1F 02            [ 2]  345     ldw (DIVISOR+1,sp),x
      000342 1A 02            [ 1]  346     or a,(DIVISOR+1,sp)
      000344 1A 03            [ 1]  347     or a,(DIVISOR+2,sp)
      000346 26 05            [ 1]  348     jrne 1$ 
      000348 A6 04            [ 1]  349     ld a,#ERR_DIV0 
      00034A CC 16 A2         [ 2]  350     jp tb_error 
      00034D                        351 1$: 
      00034D                        352     _at_top
      00034D 90 F6            [ 1]    1     ld a,(y)
      00034F 93               [ 1]    2     ldw x,y 
      000350 EE 01            [ 2]    3     ldw x,(1,x)
      000352 4D               [ 1]  353     tnz a 
      000353 2A 07            [ 1]  354     jrpl 2$
      000355 CD 02 05         [ 4]  355     call neg_ax
      000358 03 05            [ 1]  356     cpl (QSIGN,sp)
      00035A 03 06            [ 1]  357     cpl (RSIGN,sp)
      00035C                        358 2$: 
      00035C C7 00 0C         [ 1]  359     ld acc24,a 
      00035F CF 00 0D         [ 2]  360     ldw acc16,x 
      000362 A6 18            [ 1]  361     ld a,#24 
      000364 6B 04            [ 1]  362     ld (CNTR,sp),a
      000366 7B 01            [ 1]  363     ld a,(DIVISOR,sp)
      000368 1E 02            [ 2]  364     ldw x,(DIVISOR+1,sp)
      00036A CD 01 D6         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00036D 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00036F C6 00 0C         [ 1]  368     ld a,acc24 
      000372 CE 00 0D         [ 2]  369     ldw x,acc16 
      000375 72 5F 00 0C      [ 1]  370     clr acc24 
      000379 72 5F 00 0D      [ 1]  371     clr acc16 
      00037D 72 5F 00 0E      [ 1]  372     clr acc8 
      000381 20 2E            [ 2]  373     jra 6$
      000383                        374 22$:     
      000383 4F               [ 1]  375     clr a 
      000384 5F               [ 1]  376     clrw x 
      000385 98               [ 1]  377     rcf  
      000386                        378 3$: 
      000386 72 59 00 0E      [ 1]  379     rlc acc8 
      00038A 72 59 00 0D      [ 1]  380     rlc acc16
      00038E 72 59 00 0C      [ 1]  381     rlc acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000392 59               [ 2]  382     rlcw x  
      000393 49               [ 1]  383     rlc a
      000394 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000397 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000399 24 05            [ 1]  386     jrnc 5$
      00039B 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      00039E 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      0003A0                        389 5$: ; shift carry in QUOTIENT 
      0003A0 8C               [ 1]  390     ccf
      0003A1 0A 04            [ 1]  391     dec (CNTR,sp)
      0003A3 26 E1            [ 1]  392     jrne 3$ 
      0003A5 72 59 00 0E      [ 1]  393     rlc acc8 
      0003A9 72 59 00 0D      [ 1]  394     rlc acc16 
      0003AD 72 59 00 0B      [ 1]  395     rlc acc32 
      0003B1                        396 6$:    
      0003B1 6B 01            [ 1]  397     ld (DIVISOR,sp),a 
      0003B3 1F 02            [ 2]  398     ldw (DIVISOR+1,sp),x 
      0003B5 C6 00 0C         [ 1]  399     ld a,acc24 
      0003B8 CE 00 0D         [ 2]  400     ldw x,acc16 
      0003BB 0D 05            [ 1]  401     tnz (QSIGN,sp)
      0003BD 27 03            [ 1]  402     jreq 8$
      0003BF CD 02 05         [ 4]  403     call neg_ax 
      0003C2                        404 8$: 
      0003C2                        405     _store_top 
      0003C2 90 F7            [ 1]    1     ld (y),a 
      0003C4 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003C7 7B 01            [ 1]  406     ld a,(DIVISOR,sp)
      0003C9 1E 02            [ 2]  407     ldw x,(DIVSOR+1,sp)
      0003CB                        408 81$:
      0003CB 0D 06            [ 1]  409     tnz (RSIGN,sp)
      0003CD 27 03            [ 1]  410     jreq 9$
      0003CF CD 02 05         [ 4]  411     call neg_ax       
      0003D2                        412 9$: _drop VSIZE 
      0003D2 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003D4 81               [ 4]  413     ret 
                                    414 
                                    415 
                                    416 ;-------------------------------
                                    417 ; mod24 A:X % acc24 
                                    418 ; remainder 24 bits integers 
                                    419 ; input:
                                    420 ;    acc24   dividend 
                                    421 ;    A:X     divisor 
                                    422 ; output:
                                    423 ;    acc24   acc24 % A:X 
                                    424 ;------------------------------
      0003D5                        425 mod24:
      0003D5 CD 03 27         [ 4]  426     call div24 
      0003D8                        427     _store_top  ; replace quotient by remainder 
      0003D8 90 F7            [ 1]    1     ld (y),a 
      0003DA 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003DD 81               [ 4]  428     ret 
                                    429 
                                    430 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003DE                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003DE                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003DE                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003DE                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003DE                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003DE                         37 prt_regs::
      0003DE AE 04 21         [ 2]   38 	ldw x,#regs_state 
      0003E1 CD 09 A1         [ 4]   39 	call puts
                                     40 ; register PC
      0003E4 16 01            [ 2]   41 	ldw y,(1,sp)
      0003E6 AE 05 55         [ 2]   42 	ldw x,#REG_EPC 
      0003E9 CD 04 A6         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003EC 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003EE AE 05 66         [ 2]   46 	ldw x,#REG_CC 
      0003F1 CD 04 84         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003F4 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003F6 AE 05 62         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0003F9 CD 04 84         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003FC 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003FE AE 05 5E         [ 2]   54 	ldw x,#REG_X 
      000401 CD 04 A6         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      000404 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      000406 AE 05 5A         [ 2]   58 	ldw x,#REG_Y 
      000409 CD 04 A6         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      00040C 90 96            [ 1]   61 	ldw y,sp
      00040E 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      000412 AE 05 6B         [ 2]   63 	ldw x,#REG_SP
      000415 CD 04 A6         [ 4]   64 	call prt_reg16
      000418 A6 0D            [ 1]   65 	ld a,#CR 
      00041A CD 09 44         [ 4]   66 	call putc
      00041D CD 09 44         [ 4]   67 	call putc   
      000420 81               [ 4]   68 	ret 
                                     69 
                                     70 
      000421 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000448                         81 prt_peek::
      000448 89               [ 2]   82 	pushw x 
      000449 35 10 00 0A      [ 1]   83 	mov base,#16 
      00044D CD 17 F6         [ 4]   84 	call prt_i16  
      000450 A6 3A            [ 1]   85 	ld a,#': 
      000452 CD 09 44         [ 4]   86 	call putc 
      000455 A6 20            [ 1]   87 	ld a,#SPACE 
      000457 CD 09 44         [ 4]   88 	call putc 
      00045A 85               [ 2]   89 	popw x 
      00045B F6               [ 1]   90 	ld a,(x)
      00045C 5F               [ 1]   91 	clrw x 
      00045D 97               [ 1]   92 	ld xl,a 
      00045E 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000462 CD 17 F6         [ 4]   94 	call prt_i16 
      000465 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000466                        102 ledon:
      000466 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      00046A 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      00046B                        107 ledoff:
      00046B 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00046F 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000470                        112 ledtoggle:
      000470 A6 20            [ 1]  113     ld a,#LED2_MASK
      000472 C8 50 0A         [ 1]  114     xor a,PC_ODR
      000475 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000478 81               [ 4]  116     ret 
                                    117 
      000479                        118 left_paren:
      000479 A6 20            [ 1]  119 	ld a,#SPACE 
      00047B CD 09 44         [ 4]  120 	call putc
      00047E A6 28            [ 1]  121 	ld a,#'( 
      000480 CD 09 44         [ 4]  122 	call putc 	
      000483 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000484                        133 prt_reg8:
      000484 88               [ 1]  134 	push a 
      000485 CD 09 A1         [ 4]  135 	call puts 
      000488 7B 01            [ 1]  136 	ld a,(1,sp) 
      00048A 5F               [ 1]  137 	clrw x 
      00048B 97               [ 1]  138 	ld xl,a 
      00048C 35 10 00 0A      [ 1]  139 	mov base,#16
      000490 CD 17 F6         [ 4]  140 	call prt_i16  
      000493 CD 04 79         [ 4]  141 	call left_paren 
      000496 84               [ 1]  142 	pop a 
      000497 5F               [ 1]  143 	clrw x 
      000498 97               [ 1]  144 	ld xl,a 
      000499 35 0A 00 0A      [ 1]  145 	mov base,#10 
      00049D CD 17 F6         [ 4]  146 	call prt_i16  
      0004A0 A6 29            [ 1]  147 	ld a,#') 
      0004A2 CD 09 44         [ 4]  148 	call putc
      0004A5 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      0004A6                        159 prt_reg16: 
      0004A6 90 89            [ 2]  160 	pushw y 
      0004A8 CD 09 A1         [ 4]  161 	call puts 
      0004AB 1E 01            [ 2]  162 	ldw x,(1,sp) 
      0004AD 35 10 00 0A      [ 1]  163 	mov base,#16 
      0004B1 CD 17 F6         [ 4]  164 	call prt_i16  
      0004B4 CD 04 79         [ 4]  165 	call left_paren 
      0004B7 85               [ 2]  166 	popw x 
      0004B8 35 0A 00 0A      [ 1]  167 	mov base,#10 
      0004BC CD 17 F6         [ 4]  168 	call prt_i16  
      0004BF A6 29            [ 1]  169 	ld a,#') 
      0004C1 CD 09 44         [ 4]  170 	call putc
      0004C4 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      0004C5                        177 print_registers:
      0004C5 AE 05 18         [ 2]  178 	ldw x,#STATES
      0004C8 CD 09 A1         [ 4]  179 	call puts
                                    180 ; print EPC 
      0004CB AE 05 55         [ 2]  181 	ldw x, #REG_EPC
      0004CE CD 09 A1         [ 4]  182 	call puts 
      0004D1 7B 0B            [ 1]  183 	ld a, (11,sp)
      0004D3 C7 00 0E         [ 1]  184 	ld acc8,a 
      0004D6 7B 0A            [ 1]  185 	ld a, (10,sp) 
      0004D8 C7 00 0D         [ 1]  186 	ld acc16,a 
      0004DB 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004DD C7 00 0C         [ 1]  188 	ld acc24,a
      0004E0 5F               [ 1]  189 	clrw x  
      0004E1 A6 10            [ 1]  190 	ld a,#16
      0004E3 CD 18 0D         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004E6 AE 05 5E         [ 2]  193 	ldw x,#REG_X
      0004E9 16 05            [ 2]  194 	ldw y,(5,sp)
      0004EB CD 04 A6         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004EE AE 05 5A         [ 2]  197 	ldw x,#REG_Y
      0004F1 16 07            [ 2]  198 	ldw y, (7,sp)
      0004F3 CD 04 A6         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004F6 AE 05 62         [ 2]  201 	ldw x,#REG_A
      0004F9 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004FB CD 04 84         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004FE AE 05 66         [ 2]  205 	ldw x,#REG_CC 
      000501 7B 03            [ 1]  206 	ld a, (3,sp) 
      000503 CD 04 84         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      000506 AE 05 6B         [ 2]  209 	ldw x,#REG_SP
      000509 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00050B 72 A9 00 0C      [ 2]  211 	addw y,#12
      00050F CD 04 A6         [ 4]  212 	call prt_reg16  
      000512 A6 0A            [ 1]  213 	ld a,#'\n' 
      000514 CD 09 44         [ 4]  214 	call putc
      000517 81               [ 4]  215 	ret
                                    216 
      000518 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000555 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      00055A 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00055E 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000562 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000566 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      00056B 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000570                        235 cmd_itf:
      000570 52 01            [ 2]  236 	sub sp,#VSIZE 
      000572 72 5F 00 18      [ 1]  237 	clr farptr 
      000576 72 5F 00 19      [ 1]  238 	clr farptr+1 
      00057A 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      00057E                        240 repl:
      00057E A6 0D            [ 1]  241 	ld a,#CR 
      000580 CD 09 44         [ 4]  242 	call putc 
      000583 A6 3F            [ 1]  243 	ld a,#'? 
      000585 CD 09 44         [ 4]  244 	call putc
      000588 72 5F 00 00      [ 1]  245 	clr in.w 
      00058C 72 5F 00 01      [ 1]  246 	clr in 
      000590 CD 0A A6         [ 4]  247 	call readln
      000593 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000597 90 F6            [ 1]  249 	ld a,(y)
      000599 27 E3            [ 1]  250 	jreq repl  
      00059B 72 5C 00 01      [ 1]  251 	inc in 
      00059F CD 18 8C         [ 4]  252 	call to_upper 
      0005A2 A1 51            [ 1]  253 	cp a,#'Q 
      0005A4 26 17            [ 1]  254 	jrne test_p
      0005A6                        255 repl_exit:
      0005A6 72 5F 16 68      [ 1]  256 	clr tib 
      0005AA 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0005AE 72 5F 00 01      [ 1]  258 	clr in 
      0005B2                        259 	_drop #VSIZE 	
      0005B2 5B 01            [ 2]    1     addw sp,##VSIZE 
      0005B4 81               [ 4]  260 	ret  
      0005B5                        261 invalid:
      0005B5 AE 06 36         [ 2]  262 	ldw x,#invalid_cmd 
      0005B8 CD 09 A1         [ 4]  263 	call puts 
      0005BB 20 C1            [ 2]  264 	jra repl 
      0005BD                        265 test_p:	
      0005BD A1 50            [ 1]  266     cp a,#'P 
      0005BF 27 11            [ 1]  267 	jreq mem_peek
      0005C1 A1 53            [ 1]  268     cp a,#'S 
      0005C3 26 F0            [ 1]  269 	jrne invalid 
      0005C5                        270 print_string:	
      0005C5 CD 0F 1F         [ 4]  271 	call get_token
      0005C8 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      0005CA 26 E9            [ 1]  273 	jrne invalid 
      0005CC CD 09 A1         [ 4]  274 	call puts
      0005CF CC 05 7E         [ 2]  275 	jp repl 	
      0005D2                        276 mem_peek:
      0005D2 A6 20            [ 1]  277 	ld a,#SPACE 
      0005D4 CD 0F 0C         [ 4]  278 	call skip  	 
      0005D7 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005DB AE 16 B8         [ 2]  280 	ldw x,#pad 
      0005DE CD 14 00         [ 4]  281 	call strcpy
      0005E1 AE 16 B8         [ 2]  282 	ldw x,#pad
      0005E4 CD 18 98         [ 4]  283 	call atoi24 	
      0005E7 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005EA CA 00 0D         [ 1]  285 	or a,acc16 
      0005ED CA 00 0E         [ 1]  286 	or a,acc8 
      0005F0 26 02            [ 1]  287 	jrne 1$ 
      0005F2 20 0C            [ 2]  288 	jra peek_byte  
      0005F4 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005F7 CF 00 18         [ 2]  290 	ldw farptr,x 
      0005FA C6 00 0E         [ 1]  291 	ld a,acc8 
      0005FD C7 00 1A         [ 1]  292 	ld farptr+2,a 
      000600                        293 peek_byte:
      000600 CD 06 45         [ 4]  294 	call print_farptr 
      000603 A6 08            [ 1]  295 	ld a,#8 
      000605 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      000607 5F               [ 1]  297 	clrw x 
      000608 CD 06 60         [ 4]  298 1$:	call fetchc  
      00060B 89               [ 2]  299 	pushw x 
      00060C C7 00 0E         [ 1]  300 	ld acc8,a 
      00060F 5F               [ 1]  301 	clrw x 
      000610 CF 00 0C         [ 2]  302 	ldw acc24,x 
      000613 A6 90            [ 1]  303 	ld a,#16+128
      000615 CD 18 0D         [ 4]  304 	call prt_acc24
      000618 85               [ 2]  305 	popw x 
      000619 0A 01            [ 1]  306 	dec (PSIZE,sp)
      00061B 26 EB            [ 1]  307 	jrne 1$ 
      00061D A6 08            [ 1]  308 	ld a,#8 
      00061F CB 00 1A         [ 1]  309 	add a,farptr+2 
      000622 C7 00 1A         [ 1]  310 	ld farptr+2,a
      000625 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000626 C9 00 19         [ 1]  312 	adc a,farptr+1 
      000629 C7 00 19         [ 1]  313 	ld farptr+1,a 
      00062C 4F               [ 1]  314 	clr a 
      00062D C9 00 18         [ 1]  315 	adc a,farptr 
      000630 C7 00 18         [ 1]  316 	ld farptr,a 
      000633 CC 05 7E         [ 2]  317 	jp repl  
                                    318 
      000636 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000645                        324 print_farptr:
      000645 C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      000648 C7 00 0E         [ 1]  326 	ld acc8,a 
      00064B CE 00 18         [ 2]  327 	ldw x,farptr 
      00064E CF 00 0C         [ 2]  328 	ldw acc24,x 
      000651 5F               [ 1]  329 	clrw x 
      000652 A6 10            [ 1]  330 	ld a,#16 
      000654 CD 18 0D         [ 4]  331 	call prt_acc24
      000657 A6 20            [ 1]  332 	ld a,#SPACE 
      000659 CD 09 44         [ 4]  333 	call putc 
      00065C CD 09 44         [ 4]  334 	call putc 
      00065F 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000660                        346 fetchc: ; @C
      000660 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      000664 5C               [ 1]  348 	incw x
      000665 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000666                        360 number:
      000666 CD 0F 1F         [ 4]  361 	call get_token
      000669 A1 84            [ 1]  362 	cp a,#TK_INTGR
      00066B 27 03            [ 1]  363 	jreq 1$
      00066D CC 16 A0         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000670 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000671                        380 show_row:
      000671 4D               [ 1]  381 	tnz a 
      000672 26 01            [ 1]  382 	jrne 1$
      000674 81               [ 4]  383 	ret 
      000675                        384 1$:	
      000675 89               [ 2]  385 	pushw x  
      000676 88               [ 1]  386 	push a 
      000677 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      00067B CD 17 F6         [ 4]  388 	call prt_i16 
      00067E A6 20            [ 1]  389 	ld a,#SPACE  
      000680 CD 09 44         [ 4]  390 	call putc
      000683                        391 row_loop:
      000683 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000685 F6               [ 1]  393 	ld a,(x)
      000686 5F               [ 1]  394 	clrw x 
      000687 97               [ 1]  395 	ld xl,a 
      000688 CD 17 F6         [ 4]  396 	call prt_i16 
      00068B 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      00068D 5C               [ 1]  398 	incw x 
      00068E 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000690 0A 01            [ 1]  400 	dec (CNT,sp)
      000692 26 EF            [ 1]  401 	jrne row_loop
      000694                        402 	_drop VSIZE  		
      000694 5B 03            [ 2]    1     addw sp,#VSIZE 
      000696 35 04 00 23      [ 1]  403 	mov tab_width,#4
      00069A A6 0D            [ 1]  404 	ld a,#CR 
      00069C CD 09 44         [ 4]  405 	call putc 
      00069F 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0006A0                        419 hex_dump:
      0006A0 88               [ 1]  420 	push a 
      0006A1                        421 	_vars VSIZE
      0006A1 52 04            [ 2]    1     sub sp,#VSIZE 
      0006A3 C6 00 0A         [ 1]  422 	ld a,base
      0006A6 6B 03            [ 1]  423 	ld (BASE,sp),a 
      0006A8 35 10 00 0A      [ 1]  424 	mov base,#16
      0006AC C6 00 23         [ 1]  425 	ld a,tab_width 
      0006AF 6B 04            [ 1]  426 	ld (TABW,sp),a
      0006B1 A6 0D            [ 1]  427 	ld a,#CR 
      0006B3 CD 09 44         [ 4]  428 	call putc 
      0006B6 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      0006B8 A6 10            [ 1]  430 	ld a,#16
      0006BA 90 A3 00 10      [ 2]  431 	cpw y,#16
      0006BE 2A 02            [ 1]  432 	jrpl 2$
      0006C0 90 9F            [ 1]  433 	ld a,yl
      0006C2                        434 2$: 	
      0006C2 CD 06 71         [ 4]  435 	call show_row 
      0006C5 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      0006C7 72 A2 00 10      [ 2]  437 	subw y,#16 
      0006CB 90 A3 00 01      [ 2]  438 	cpw y,#1
      0006CF 2A E5            [ 1]  439 	jrpl 1$
      0006D1 7B 03            [ 1]  440 	ld a,(BASE,sp)
      0006D3 C7 00 0A         [ 1]  441 	ld base,a
      0006D6 7B 04            [ 1]  442 	ld a,(TABW,sp)
      0006D8 C7 00 23         [ 1]  443 	ld tab_width,a 
      0006DB                        444 	_drop VSIZE
      0006DB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006DD 84               [ 1]  445 	pop a 
      0006DE 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006DF                         45 unlock_eeprom:
      0006DF 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006E4 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006E8 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006EC 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006F0 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006F4 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006F9 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006FA                         62 unlock_flash:
      0006FA 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006FF 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000703 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000707 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00070B 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00070F 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000714 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      000715                         76 row_erase:
      000715 88               [ 1]   77 	push a 
      000716 90 89            [ 2]   78 	pushw y 
      000718 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00071C 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000720 4F               [ 1]   81 	clr a 
      000721 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000723 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      000727 90 5C            [ 1]   84     incw y
      000729 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      00072D 90 5C            [ 1]   86     incw y
      00072F 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      000733 90 5C            [ 1]   88     incw y
      000735 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000739 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073E 90 85            [ 2]   91 	popw y 
      000740 84               [ 1]   92 	pop a 
      000741 81               [ 4]   93 	ret
      000742                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000742                         97 move_erase_to_ram:
      000742 89               [ 2]   98 	pushw x 
      000743 90 89            [ 2]   99 	pushw y 
      000745 AE 07 42         [ 2]  100 	ldw x,#row_erase_end 
      000748 1D 07 15         [ 2]  101 	subw x,#row_erase
      00074B CF 00 0D         [ 2]  102 	ldw acc16,x 
      00074E AE 16 68         [ 2]  103 	ldw x,#tib 
      000751 90 AE 07 15      [ 2]  104 	ldw y,#row_erase 
      000755 CD 14 10         [ 4]  105 	call move
      000758 90 85            [ 2]  106 	popw y
      00075A 85               [ 2]  107 	popw x
      00075B 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00075C                        123 program_row:
      00075C 88               [ 1]  124 	push a 
      00075D 90 89            [ 2]  125 	pushw y 
      00075F 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000761 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000765 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000769 90 5F            [ 1]  130 	clrw y 
      00076B F6               [ 1]  131 1$:	ld a,(x)
      00076C 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000770 5C               [ 1]  133 	incw x 
      000771 90 5C            [ 1]  134 	incw y 
      000773 0A 01            [ 1]  135 	dec (BCNT,sp)
      000775 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000777 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00077C                        139 	_drop 1 
      00077C 5B 01            [ 2]    1     addw sp,#1 
      00077E 90 85            [ 2]  140 	popw y 
      000780 84               [ 1]  141 	pop a 
      000781 81               [ 4]  142 	ret 
      000782                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000782                        149 move_prg_to_ram:
      000782 89               [ 2]  150 	pushw x 
      000783 90 89            [ 2]  151 	pushw y 
      000785 AE 07 82         [ 2]  152 	ldw x,#program_row_end 
      000788 1D 07 5C         [ 2]  153 	subw x,#program_row 
      00078B CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00078E AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000791 90 AE 07 5C      [ 2]  156 	ldw y,#program_row ; source address 
      000795 CD 14 10         [ 4]  157 	call move
      000798 90 85            [ 2]  158 	popw y 
      00079A 85               [ 2]  159 	popw x  
      00079B 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00079C                        169 write_buffer:
      00079C 89               [ 2]  170 	pushw x 
      00079D 72 5D 00 18      [ 1]  171 	tnz farptr 
      0007A1 26 0D            [ 1]  172 	jrne to_flash 
      0007A3 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      0007A6 A3 36 00         [ 2]  174 	cpw x,#app_space  
      0007A9 24 05            [ 1]  175 	jruge to_flash 
      0007AB                        176 to_eeprom:
      0007AB CD 06 DF         [ 4]  177 	call unlock_eeprom
      0007AE 20 03            [ 2]  178 	jra do_programming
      0007B0                        179 to_flash:
      0007B0 CD 06 FA         [ 4]  180 	call unlock_flash
      0007B3                        181 do_programming:
      0007B3 85               [ 2]  182 	popw x 
      0007B4 CD 16 68         [ 4]  183 	call tib
      0007B7 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0007BB 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0007BF 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0007C0                        197 block_erase:
      0007C0 89               [ 2]  198 	pushw x 
      0007C1 C6 00 18         [ 1]  199 	ld a,farptr 
      0007C4 26 14            [ 1]  200 	jrne erase_flash
      0007C6 CE 00 19         [ 2]  201 	ldw x,farptr+1
      0007C9 A3 36 00         [ 2]  202 	cpw x,#app_space 
      0007CC 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      0007CE CD 06 DF         [ 4]  205 	call unlock_eeprom 
      0007D1 CD 16 68         [ 4]  206 	call tib 
      0007D4 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007D8 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007DA                        210 erase_flash:
      0007DA CD 06 FA         [ 4]  211 	call unlock_flash 
      0007DD CD 16 68         [ 4]  212 	call tib 
      0007E0 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E4                        214 erase_exit: 
      0007E4 85               [ 2]  215 	popw x 
      0007E5 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007E6                        232 write_byte:
      0007E6 90 89            [ 2]  233 	pushw y
      0007E8                        234 	_vars VSIZE
      0007E8 52 02            [ 2]    1     sub sp,#VSIZE 
      0007EA 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007EC 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007EE 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007F2 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007F6 26 14            [ 1]  241 	jrne write_flash
      0007F8 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      0007FC 24 0E            [ 1]  243     jruge write_flash
      0007FE 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000802 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      000804 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      000808 22 51            [ 1]  247 	jrugt write_exit
      00080A 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      00080C                        250 write_flash:
      00080C CD 06 FA         [ 4]  251 	call unlock_flash 
      00080F 9B               [ 1]  252 1$:	sim 
      000810 7B 01            [ 1]  253 	ld a,(BTW,sp)
      000812 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      000816 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081B 9A               [ 1]  256     rim 
      00081C 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000820 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      000822                        260 write_eeprom:
      000822 CD 06 DF         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      000825 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      000829 2B 08            [ 1]  264 	jrmi 1$
      00082B 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      00082F 2A 02            [ 1]  266 	jrpl 1$
      000831 03 02            [ 1]  267 	cpl (OPT,sp)
      000833                        268 1$: 
      000833 0D 02            [ 1]  269     tnz (OPT,sp)
      000835 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000837 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      00083B 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00083F                        274 2$: 
      00083F 7B 01            [ 1]  275     ld a,(BTW,sp)
      000841 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000845 0D 02            [ 1]  277     tnz (OPT,sp)
      000847 27 08            [ 1]  278     jreq 3$
      000849 5C               [ 1]  279     incw x
      00084A 7B 01            [ 1]  280     ld a,(BTW,sp)
      00084C 43               [ 1]  281     cpl a
      00084D 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000851 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000856 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      00085B                        285 write_exit:
      00085B                        286 	_drop VSIZE 
      00085B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00085D 90 85            [ 2]  287 	popw y
      00085F 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000860                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000860                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000860                        309 write_block::
      000860 88               [ 1]  310 	push a 
      000861                        311 	_vars VSIZE
      000861 52 02            [ 2]    1     sub sp,#VSIZE 
      000863 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      000865 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000867 27 13            [ 1]  314 	jreq 9$
      000869 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      00086B 90 F6            [ 1]  316 	ld a,(y)
      00086D CD 07 E6         [ 4]  317 	call write_byte 
      000870 5C               [ 1]  318 	incw x 
      000871 90 5C            [ 1]  319 	incw y 
      000873 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000875 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000877 5A               [ 2]  322 	decw x
      000878 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      00087A 26 ED            [ 1]  324 	jrne 1$
      00087C                        325 9$:
      00087C 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00087E CD 08 B6         [ 4]  327 	call incr_farptr
      000881                        328 	_drop VSIZE
      000881 5B 02            [ 2]    1     addw sp,#VSIZE 
      000883 84               [ 1]  329 	pop a 
      000884 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000885                        347 write_nbytes:
      000885 90 89            [ 2]  348 	pushw y
      000887 88               [ 1]  349 	push a 
      000888 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00088A 5F               [ 1]  351 	clrw x 
      00088B                        352 1$:  
      00088B 90 F6            [ 1]  353 	ld a,(y)
      00088D 90 5C            [ 1]  354 	incw y
      00088F CD 07 E6         [ 4]  355 	call write_byte 
      000892 5C               [ 1]  356 	incw x 
      000893 0A 01            [ 1]  357 	dec (1,sp)  
      000895 26 F4            [ 1]  358 	jrne 1$ 
      000897 84               [ 1]  359 9$: pop a 
      000898 90 85            [ 2]  360 	popw y 
      00089A 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      00089B                        370 row_align:
      00089B A6 7F            [ 1]  371 	ld a,#0x7f 
      00089D C4 00 1A         [ 1]  372 	and a,farptr+2 
      0008A0 27 13            [ 1]  373 	jreq 1$ 
      0008A2 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      0008A5 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      0008A8 24 04            [ 1]  376 	jrnc 0$
      0008AA 72 5C 00 18      [ 1]  377 	inc farptr 
      0008AE 9F               [ 1]  378 0$: ld a,xl 
      0008AF A4 80            [ 1]  379 	and a,#0x80
      0008B1 97               [ 1]  380 	ld xl,a
      0008B2 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      0008B5 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      0008B6                        390 incr_farptr:
      0008B6 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      0008BA 24 04            [ 1]  392 	jrnc 1$
      0008BC 72 5C 00 18      [ 1]  393 	inc farptr 
      0008C0 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      0008C3 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      0008C4                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0008C4 5F               [ 1]  406 	clrw x 
      0008C5 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      0008C9 26 06            [ 1]  408 	jrne 2$
      0008CB 5C               [ 1]  409 	incw x 
      0008CC A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      0008CF 25 F4            [ 1]  411 	jrult 1$ 
      0008D1 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      0008D2                         66 Uart1RxHandler: ; console receive char 
      0008D2 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008D7 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008DA A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008DC 26 06            [ 1]   70 	jrne 2$
      0008DE CD 09 44         [ 4]   71 	call putc 
      0008E1 CC 00 57         [ 2]   72 	jp user_interrupted
      0008E4                         73 2$:
      0008E4 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008E6 26 03            [ 1]   75 	jrne 3$
      0008E8 CC 00 C3         [ 2]   76 	jp cold_start 	
      0008EB 88               [ 1]   77 3$:	push a 
      0008EC A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008EE CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008F1 5F               [ 1]   80 	clrw x 
      0008F2 97               [ 1]   81 	ld xl,a 
      0008F3 84               [ 1]   82 	pop a 
      0008F4 F7               [ 1]   83 	ld (x),a 
      0008F5 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008F8 4C               [ 1]   85 	inc a 
      0008F9 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008FB C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008FE 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008FF                         97 uart1_init:
      0008FF 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000903 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000907 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      00090B 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00090F                        103 uart1_set_baud: 
      00090F 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000910 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      000912 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000915 27 0A            [ 1]  109 	jreq 2$ 
      000917                        110 1$: ; 8 Mhz 	
      000917 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      00091B 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      00091F 20 08            [ 2]  113 	jra 3$
      000921                        114 2$: ; 16 Mhz 	
      000921 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      000925 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      000929                        117 3$:
      000929 72 5F 52 31      [ 1]  118     clr UART1_DR
      00092D 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000931 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000935 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      00093A 72 5F 00 2E      [ 1]  122     clr rx1_head 
      00093E 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000942 84               [ 1]  124 	pop a  
      000943 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000944                        133 putc:: ; console output always on UART1
      000944                        134 uart1_putc:: 
      000944 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000949 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      00094C 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      00094D                        148 qgetc::
      00094D                        149 uart1_qgetc::
      00094D C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000950 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      000953 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000954                        161 getc:: ;console input
      000954                        162 uart1_getc::
      000954 CD 09 4D         [ 4]  163 	call uart1_qgetc
      000957 27 FB            [ 1]  164 	jreq uart1_getc 
      000959 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      00095A A6 26            [ 1]  167 	ld a,#rx1_queue
      00095C CB 00 2E         [ 1]  168 	add a,rx1_head 
      00095F 5F               [ 1]  169 	clrw x  
      000960 97               [ 1]  170 	ld xl,a 
      000961 F6               [ 1]  171 	ld a,(x)
      000962 88               [ 1]  172 	push a
      000963 C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000966 4C               [ 1]  174 	inc a 
      000967 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000969 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      00096C 84               [ 1]  177 	pop a  
      00096D 85               [ 2]  178 	popw x
      00096E 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00096F 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      00097B                        207 get_escape:
      00097B CD 09 54         [ 4]  208     call getc 
      00097E A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000980 27 02            [ 1]  210     jreq 1$
      000982 4F               [ 1]  211     clr a
      000983 81               [ 4]  212     ret
      000984 CD 09 54         [ 4]  213 1$: call getc 
      000987 AE 09 6F         [ 2]  214     ldw x,#convert_table
      00098A                        215 2$:
      00098A F1               [ 1]  216     cp a,(x)
      00098B 27 08            [ 1]  217     jreq 4$
      00098D 1C 00 02         [ 2]  218     addw x,#2
      000990 7D               [ 1]  219     tnz (x)
      000991 26 F7            [ 1]  220     jrne 2$
      000993 4F               [ 1]  221     clr a
      000994 81               [ 4]  222     ret 
      000995 5C               [ 1]  223 4$: incw x 
      000996 F6               [ 1]  224     ld a,(x)
      000997 A1 84            [ 1]  225     cp a,#SUP
      000999 26 05            [ 1]  226     jrne 5$
      00099B 88               [ 1]  227     push a 
      00099C CD 09 54         [ 4]  228     call getc
      00099F 84               [ 1]  229     pop a 
      0009A0                        230 5$:
      0009A0 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      0009A1                        241 puts::
      0009A1 F6               [ 1]  242     ld a,(x)
      0009A2 27 06            [ 1]  243 	jreq 1$
      0009A4 CD 09 44         [ 4]  244 	call putc 
      0009A7 5C               [ 1]  245 	incw x 
      0009A8 20 F7            [ 2]  246 	jra puts 
      0009AA 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      0009AB                        258 bksp:
      0009AB A6 08            [ 1]  259 	ld a,#BS 
      0009AD CD 09 44         [ 4]  260 	call putc 
      0009B0 A6 20            [ 1]  261 	ld a,#SPACE 
      0009B2 CD 09 44         [ 4]  262 	call putc 
      0009B5 A6 08            [ 1]  263 	ld a,#BS 
      0009B7 CD 09 44         [ 4]  264 	call putc 
      0009BA 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      0009BB                        274 delete_nchar:
      0009BB 88               [ 1]  275 	push a 
      0009BC 0D 01            [ 1]  276 0$:	tnz (1,sp)
      0009BE 27 07            [ 1]  277 	jreq 1$
      0009C0 CD 09 AB         [ 4]  278 	call bksp 
      0009C3 0A 01            [ 1]  279 	dec (1,sp)
      0009C5 20 F5            [ 2]  280 	jra 0$
      0009C7 84               [ 1]  281 1$:	pop a 
      0009C8 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      0009C9                        290 send_escape:
      0009C9 A6 1B            [ 1]  291 	ld a,#ESC 
      0009CB CD 09 44         [ 4]  292 	call putc 
      0009CE A6 5B            [ 1]  293 	ld a,#'[
      0009D0 CD 09 44         [ 4]  294 	call putc 
      0009D3 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0009D4                        311 send_parameter:
      0009D4 89               [ 2]  312 	pushw x 
      0009D5 5F               [ 1]  313 	clrw x 
      0009D6 97               [ 1]  314 	ld xl,a 
      0009D7 A6 0A            [ 1]  315 	ld a,#10 
      0009D9 62               [ 2]  316 	div x,a 
      0009DA 95               [ 1]  317 	ld xh,a 
      0009DB 9F               [ 1]  318 	ld a,xl
      0009DC 4D               [ 1]  319     tnz a 
      0009DD 27 0B            [ 1]  320     jreq 2$
      0009DF A1 09            [ 1]  321 	cp a,#9 
      0009E1 23 02            [ 2]  322 	jrule 1$
      0009E3 A6 39            [ 1]  323 	ld a,#'9
      0009E5                        324 1$:
      0009E5 AB 30            [ 1]  325 	add a,#'0 
      0009E7 CD 09 44         [ 4]  326 	call putc
      0009EA 9E               [ 1]  327 2$:	ld a,xh 
      0009EB AB 30            [ 1]  328 	add a,#'0
      0009ED CD 09 44         [ 4]  329 	call putc 
      0009F0 85               [ 2]  330 	popw x 
      0009F1 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009F2                        344 move_left:
      0009F2 88               [ 1]  345 	push a 
      0009F3 CD 09 C9         [ 4]  346 	call send_escape
      0009F6 84               [ 1]  347     pop a
      0009F7 CD 09 D4         [ 4]  348 	call send_parameter 
      0009FA A6 44            [ 1]  349 	ld a,#'D 
      0009FC CD 09 44         [ 4]  350 	call putc 
      0009FF 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000A00                        362 move_right:
      000A00 88               [ 1]  363 	push a 
      000A01 CD 09 C9         [ 4]  364 	call send_escape
      000A04 84               [ 1]  365     pop a
      000A05 CD 09 D4         [ 4]  366 	call send_parameter 
      000A08 A6 43            [ 1]  367 	ld a,#'C 
      000A0A CD 09 44         [ 4]  368 	call putc 
      000A0D 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      000A0E                        379 spaces::
      000A0E A6 20            [ 1]  380 	ld a,#SPACE 
      000A10 5D               [ 2]  381 1$:	tnzw x
      000A11 27 06            [ 1]  382 	jreq 9$
      000A13 CD 09 44         [ 4]  383 	call putc 
      000A16 5A               [ 2]  384 	decw x
      000A17 20 F7            [ 2]  385 	jra 1$
      000A19                        386 9$: 
      000A19 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      000A1A                        404 insert_char: 
      000A1A                        405 	_vars VSIZE 
      000A1A 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1C 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      000A1E 9E               [ 1]  407     ld a,xh 
      000A1F 6B 01            [ 1]  408 	ld (IPOS,sp),a
      000A21 9F               [ 1]  409     ld a,xl 
      000A22 6B 03            [ 1]  410     ld (LLEN,sp),a  
      000A24 93               [ 1]  411     ldw x,y
      000A25 5C               [ 1]  412     incw x 
      000A26 7B 03            [ 1]  413     ld a,(LLEN,sp)
      000A28 10 01            [ 1]  414     sub a,(IPOS,sp)
      000A2A 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A2B C7 00 0E         [ 1]  416     ld acc8,a 
      000A2E 72 5F 00 0D      [ 1]  417     clr acc16
      000A32 CD 14 10         [ 4]  418     call move
      000A35 90 AE 16 68      [ 2]  419     ldw y,#tib 
      000A39 7B 01            [ 1]  420     ld a,(IPOS,sp)
      000A3B C7 00 0E         [ 1]  421     ld acc8,a 
      000A3E 72 B9 00 0D      [ 2]  422     addw y,acc16 
      000A42 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      000A44 90 F7            [ 1]  424     ld (y),a
      000A46 90 5C            [ 1]  425     incw y  
      000A48 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000A4A CD 09 F2         [ 4]  427     call move_left
      000A4D AE 16 68         [ 2]  428     ldw x,#tib 
      000A50 CD 09 A1         [ 4]  429     call puts 
      000A53 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000A55 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000A57 CD 09 F2         [ 4]  432     call move_left 
      000A5A                        433 	_drop VSIZE 
      000A5A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5C 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      000A5D                        447 delete_under:
      000A5D                        448 	_vars VSIZE 
      000A5D 52 02            [ 2]    1     sub sp,#VSIZE 
      000A5F 6B 02            [ 1]  449     ld (LLEN,sp),a 
      000A61 9F               [ 1]  450     ld a,xl 
      000A62 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000A64 93               [ 1]  452     ldw x,y ; move destination
      000A65 90 5C            [ 1]  453     incw y  ; move source 
      000A67 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000A69 10 01            [ 1]  455     sub a,(CPOS,sp)
      000A6B 4C               [ 1]  456     inc a ; move including zero at end.
      000A6C C7 00 0E         [ 1]  457     ld acc8,a 
      000A6F 72 5F 00 0D      [ 1]  458     clr acc16 
      000A73 CD 14 10         [ 4]  459 	call move 
      000A76 90 AE 16 68      [ 2]  460     ldw y,#tib 
      000A7A 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000A7C C7 00 0E         [ 1]  462     ld acc8,a 
      000A7F 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000A83 93               [ 1]  464     ldw x,y 
      000A84 CD 09 A1         [ 4]  465     call puts 
      000A87 A6 20            [ 1]  466     ld a,#SPACE  
      000A89 CD 09 44         [ 4]  467     call putc
      000A8C 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A8E 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A90 CD 09 F2         [ 4]  470     call move_left 
      000A93 0A 02            [ 1]  471     dec (LLEN,sp)
      000A95                        472 	_drop VSIZE 
      000A95 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A97 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000A98                        485 delete_line:
      000A98 CD 09 C9         [ 4]  486     call send_escape
      000A9B A6 32            [ 1]  487 	ld a,#'2
      000A9D CD 09 44         [ 4]  488 	call putc 
      000AA0 A6 4B            [ 1]  489 	ld a,#'K 
      000AA2 CD 09 44         [ 4]  490 	call putc 
      000AA5 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000AA6                        523 readln::
      000AA6                        524 	_vars VSIZE 
      000AA6 52 04            [ 2]    1     sub sp,#VSIZE 
      000AA8 5F               [ 1]  525 	clrw x 
      000AA9 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000AAB 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      000AAD 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      000AAF 90 AE 16 68      [ 2]  529  	ldw y,#tib ; input buffer
      000AB3                        530 readln_loop:
      000AB3 CD 09 54         [ 4]  531 	call getc
      000AB6 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000AB8 A1 1B            [ 1]  533     cp a,#ESC 
      000ABA 26 05            [ 1]  534     jrne 0$
      000ABC CD 09 7B         [ 4]  535     call get_escape 
      000ABF 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      000AC1 A1 0D            [ 1]  537 0$:	cp a,#CR
      000AC3 26 03            [ 1]  538 	jrne 1$
      000AC5 CC 0C 4F         [ 2]  539 	jp readln_quit
      000AC8 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000ACA 26 03            [ 1]  541 	jrne 2$ 
      000ACC CC 0C 4F         [ 2]  542 	jp readln_quit
      000ACF                        543 2$:
      000ACF A1 08            [ 1]  544 	cp a,#BS
      000AD1 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000AD3 0D 03            [ 1]  547     tnz (CPOS,sp)
      000AD5 27 DC            [ 1]  548     jreq readln_loop 
      000AD7 A6 01            [ 1]  549     ld a,#1 
      000AD9 CD 09 F2         [ 4]  550     call move_left
      000ADC 0A 03            [ 1]  551     dec (CPOS,sp)
      000ADE 90 5A            [ 2]  552     decw y 
      000AE0 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      000AE2 CC 0B FB         [ 2]  554     jp 12$
      000AE5                        555 3$:
      000AE5 A1 04            [ 1]  556 	cp a,#CTRL_D
      000AE7 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000AE9 CD 0A 98         [ 4]  559 	call delete_line 
      000AEC 7B 03            [ 1]  560     ld a,(CPOS,sp)
      000AEE 4C               [ 1]  561     inc a 
      000AEF CD 09 F2         [ 4]  562     call move_left 
      000AF2 A6 3E            [ 1]  563 	ld a,#'> 
      000AF4 CD 09 44         [ 4]  564 	call putc 
      000AF7 90 AE 16 68      [ 2]  565 	ldw y,#tib
      000AFB 90 7F            [ 1]  566 	clr (y)
      000AFD 0F 02            [ 1]  567 	clr (LL,sp)
      000AFF 0F 03            [ 1]  568 	clr (CPOS,sp)
      000B01 20 B0            [ 2]  569 	jra readln_loop
      000B03                        570 4$:
      000B03 A1 12            [ 1]  571 	cp a,#CTRL_R 
      000B05 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000B07 0D 02            [ 1]  574 	tnz (LL,sp)
      000B09 26 A8            [ 1]  575 	jrne readln_loop
      000B0B AE 16 68         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000B0E CD 13 E4         [ 4]  577 	call strlen 
      000B11 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000B15 27 9C            [ 1]  579 	jreq readln_loop
      000B17 6B 02            [ 1]  580 	ld (LL,sp),a 
      000B19 6B 03            [ 1]  581     ld (CPOS,sp),a
      000B1B AE 16 68         [ 2]  582 	ldw x,#tib 
      000B1E CD 09 A1         [ 4]  583 	call puts
      000B21 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000B23 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000B26 20 8B            [ 2]  586 	jra readln_loop 
      000B28                        587 5$:
      000B28 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000B2A 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      000B2C AE 16 68         [ 2]  591 	ldw x,#tib 
      000B2F CD 18 98         [ 4]  592 	call atoi24
      000B32 CE 00 0D         [ 2]  593 	ldw x,acc16
      000B35 CD 0C 89         [ 4]  594 	call search_lineno
      000B38 5D               [ 2]  595 	tnzw x 
      000B39 26 0B            [ 1]  596 	jrne 51$
      000B3B 0F 02            [ 1]  597 	clr (LL,sp)
      000B3D 90 AE 16 68      [ 2]  598 	ldw y,#tib
      000B41 90 7F            [ 1]  599     clr (y) 	
      000B43 CC 0C 4F         [ 2]  600 	jp readln_quit  
      000B46                        601 51$:
      000B46 CF 00 04         [ 2]  602 	ldw basicptr,x
      000B49 E6 02            [ 1]  603 	ld a,(2,x)
      000B4B C7 00 03         [ 1]  604 	ld count,a 
      000B4E 90 AE 16 68      [ 2]  605 	ldw y,#tib 
      000B52 CD 12 08         [ 4]  606 	call decompile 
      000B55 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000B57 A6 0D            [ 1]  608 	ld a,#CR 
      000B59 CD 09 44         [ 4]  609 	call putc 
      000B5C A6 3E            [ 1]  610 	ld a,#'>
      000B5E CD 09 44         [ 4]  611 	call putc
      000B61 AE 16 68         [ 2]  612     ldw x,#tib  
      000B64 CD 13 E4         [ 4]  613 	call strlen 
      000B67 6B 02            [ 1]  614 	ld (LL,sp),a 
      000B69 CD 09 A1         [ 4]  615 	call puts 
      000B6C 90 93            [ 1]  616 	ldw y,x
      000B6E 7B 02            [ 1]  617     ld a,(LL,sp)
      000B70 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000B72 CC 0A B3         [ 2]  619 	jp readln_loop
      000B75                        620 6$:
      000B75 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000B77 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000B79 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  625     cp a,(LL,sp)
      000B7D 2B 03            [ 1]  626     jrmi 61$
      000B7F CC 0A B3         [ 2]  627     jp readln_loop 
      000B82                        628 61$:
      000B82 A6 01            [ 1]  629     ld a,#1 
      000B84 CD 0A 00         [ 4]  630 	call move_right 
      000B87 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000B89 90 5C            [ 1]  632     incw y 
      000B8B CC 0A B3         [ 2]  633     jp readln_loop 
      000B8E A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      000B90 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000B92 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000B94 26 03            [ 1]  638 	jrne 71$
      000B96 CC 0A B3         [ 2]  639 	jp readln_loop
      000B99                        640 71$:
      000B99 A6 01            [ 1]  641     ld a,#1 
      000B9B CD 09 F2         [ 4]  642 	call move_left 
      000B9E 0A 03            [ 1]  643 	dec (CPOS,sp)
      000BA0 90 5A            [ 2]  644     decw y 
      000BA2 CC 0A B3         [ 2]  645 	jp readln_loop 
      000BA5 A1 82            [ 1]  646 8$: cp a,#HOME  
      000BA7 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000BA9 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000BAB CD 09 F2         [ 4]  650     call move_left 
      000BAE 0F 03            [ 1]  651 	clr (CPOS,sp)
      000BB0 90 AE 16 68      [ 2]  652     ldw y,#tib 
      000BB4 CC 0A B3         [ 2]  653 	jp readln_loop  
      000BB7 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000BB9 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000BBB 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      000BBD 11 02            [ 1]  658 	cp a,(LL,sp)
      000BBF 26 03            [ 1]  659 	jrne 91$
      000BC1 CC 0A B3         [ 2]  660 	jp readln_loop 
      000BC4                        661 91$:
      000BC4 7B 02            [ 1]  662 	ld a,(LL,sp)
      000BC6 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000BC8 CD 0A 00         [ 4]  664 	call move_right 
      000BCB 7B 02            [ 1]  665 	ld a,(LL,sp)
      000BCD 6B 03            [ 1]  666 	ld (CPOS,sp),a
      000BCF 90 AE 16 68      [ 2]  667     ldw y,#tib
      000BD3 72 5F 00 0D      [ 1]  668     clr acc16 
      000BD7 C7 00 0E         [ 1]  669     ld acc8,a 
      000BDA 72 B9 00 0D      [ 2]  670     addw y,acc16  
      000BDE CC 0A B3         [ 2]  671 	jp readln_loop 
      000BE1 A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000BE3 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000BE5 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000BE7 90 89            [ 2]  676 	pushw y 
      000BE9 CD 25 59         [ 4]  677 	call beep_1khz
      000BEC 90 85            [ 2]  678 	popw y 
      000BEE CC 0A B3         [ 2]  679 	jp readln_loop 
      000BF1 A1 84            [ 1]  680 11$: cp a,#SUP 
      000BF3 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000BF5 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  684     cp a,(LL,sp)
      000BF9 2A 08            [ 1]  685     jrpl 13$
      000BFB                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000BFB 97               [ 1]  687     ld xl,a    ; cursor position 
      000BFC 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      000BFE CD 0A 5D         [ 4]  689     call delete_under
      000C01 0A 02            [ 1]  690     dec (LLEN,sp)
      000C03                        691 13$:
      000C03 CC 0A B3         [ 2]  692     jp readln_loop 
      000C06                        693 final_test:
      000C06 A1 20            [ 1]  694 	cp a,#SPACE
      000C08 2A 03            [ 1]  695 	jrpl accept_char
      000C0A CC 0A B3         [ 2]  696 	jp readln_loop
      000C0D                        697 accept_char:
      000C0D A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      000C0F 11 02            [ 1]  699 	cp a, (LL,sp)
      000C11 2A 03            [ 1]  700 	jrpl 1$
      000C13 CC 0A B3         [ 2]  701 	jp readln_loop
      000C16 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000C18 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000C1A 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000C1C 11 02            [ 1]  706     cp a,(LL,sp)
      000C1E 27 12            [ 1]  707     jreq overwrite
      000C20 7B 02            [ 1]  708     ld a,(LL,sp)
      000C22 97               [ 1]  709     ld xl,a 
      000C23 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000C25 95               [ 1]  711     ld xh,a
      000C26 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000C28 CD 0A 1A         [ 4]  713     call insert_char
      000C2B 0C 02            [ 1]  714     inc (LLEN,sp)
      000C2D 0C 03            [ 1]  715     inc (CPOS,sp)
      000C2F CC 0A B3         [ 2]  716     jp readln_loop 
      000C32                        717 overwrite:
      000C32 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000C34 90 F7            [ 1]  719 	ld (y),a
      000C36 90 5C            [ 1]  720     incw y
      000C38 CD 09 44         [ 4]  721     call putc 
      000C3B 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      000C3D 11 02            [ 1]  723 	cp a,(LL,sp)
      000C3F 2B 09            [ 1]  724 	jrmi 1$
      000C41 90 7F            [ 1]  725 	clr (y)
      000C43 0C 02            [ 1]  726 	inc (LL,sp)
      000C45 0C 03            [ 1]  727     inc (CPOS,sp)
      000C47 CC 0A B3         [ 2]  728 	jp readln_loop 
      000C4A                        729 1$:	
      000C4A 0C 03            [ 1]  730 	inc (CPOS,sp)
      000C4C CC 0A B3         [ 2]  731 	jp readln_loop 
      000C4F                        732 readln_quit:
      000C4F 90 AE 16 68      [ 2]  733 	ldw y,#tib
      000C53 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000C55 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000C58 90 7F            [ 1]  736     clr (y)
      000C5A 7B 02            [ 1]  737 	ld a,(LL,sp)
      000C5C C7 00 03         [ 1]  738 	ld count,a 
      000C5F A6 0D            [ 1]  739 	ld a,#CR
      000C61 CD 09 44         [ 4]  740 	call putc
      000C64                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000C64 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C66 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000C67                        750 print_hex::
      000C67 88               [ 1]  751 	push a 
      000C68 4E               [ 1]  752 	swap a 
      000C69 CD 0C 7E         [ 4]  753 	call to_hex_char 
      000C6C CD 09 44         [ 4]  754 	call putc 
      000C6F 7B 01            [ 1]  755     ld a,(1,sp) 
      000C71 CD 0C 7E         [ 4]  756 	call to_hex_char
      000C74 CD 09 44         [ 4]  757 	call putc
      000C77 A6 20            [ 1]  758 	ld a,#SPACE 
      000C79 CD 09 44         [ 4]  759 	call putc 
      000C7C 84               [ 1]  760 	pop a 
      000C7D 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      000C7E                        770 to_hex_char::
      000C7E A4 0F            [ 1]  771 	and a,#15 
      000C80 A1 09            [ 1]  772 	cp a,#9 
      000C82 23 02            [ 2]  773 	jrule 1$ 
      000C84 AB 07            [ 1]  774 	add a,#7
      000C86 AB 30            [ 1]  775 1$: add a,#'0 
      000C88 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C89                         51 search_lineno::
      000C89                         52 	_vars VSIZE
      000C89 52 02            [ 2]    1     sub sp,#VSIZE 
      000C8B 0F 01            [ 1]   53 	clr (LL,sp)
      000C8D 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C91 4D               [ 1]   55 	tnz a 
      000C92 27 04            [ 1]   56 	jreq search_ln_loop
      000C94 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C98                         58 search_ln_loop:
      000C98 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C9C 2A 10            [ 1]   60 	jrpl 8$
      000C9E 90 F3            [ 1]   61 	cpw x,(y)
      000CA0 27 0E            [ 1]   62 	jreq 9$
      000CA2 2B 0A            [ 1]   63 	jrmi 8$ 
      000CA4 90 E6 02         [ 1]   64 	ld a,(2,y)
      000CA7 6B 02            [ 1]   65 	ld (LB,sp),a 
      000CA9 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000CAC 20 EA            [ 2]   67 	jra search_ln_loop 
      000CAE                         68 8$: 
      000CAE 5F               [ 1]   69 	clrw x 	
      000CAF 51               [ 1]   70 	exgw x,y 
      000CB0                         71 9$: _drop VSIZE
      000CB0 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CB2 51               [ 1]   72 	exgw x,y   
      000CB3 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000CB4                         83 del_line: 
      000CB4                         84 	_vars VSIZE 
      000CB4 52 04            [ 2]    1     sub sp,#VSIZE 
      000CB6 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000CB8 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000CBA 0F 01            [ 1]   87 	clr (LLEN,sp)
      000CBC 90 93            [ 1]   88 	ldw y,x  
      000CBE 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000CC1 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000CC3 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000CC7 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000CCA 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000CCE 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000CD0 CD 14 10         [ 4]   95 	call move
      000CD3 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000CD7 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000CDA 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000CDE                         99 	_drop VSIZE     
      000CDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CE0 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000CE1                        115 create_gap:
      000CE1                        116 	_vars VSIZE
      000CE1 52 06            [ 2]    1     sub sp,#VSIZE 
      000CE3 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CE5 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CE7 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CEB 90 93            [ 1]  120 	ldw y,x ; SRC
      000CED 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CF1 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CF3 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CF6 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CF9 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CFC 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CFE CD 14 10         [ 4]  128 	call move
      000D01 CE 00 1D         [ 2]  129 	ldw x,txtend
      000D04 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000D07 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000D0A                        132 9$:	_drop VSIZE 
      000D0A 5B 06            [ 2]    1     addw sp,#VSIZE 
      000D0C 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000D0D                        150 insert_line:
      000D0D                        151 	_vars VSIZE 
      000D0D 52 08            [ 2]    1     sub sp,#VSIZE 
      000D0F CE 00 1D         [ 2]  152 	ldw x,txtend  
      000D12 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000D15 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000D17 AE 00 02         [ 2]  156 	ldw x,#2 
      000D1A 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000D1E A1 03            [ 1]  158 	cp a,#3
      000D20 27 5A            [ 1]  159 	jreq insert_ln_exit
      000D22 5F               [ 1]  160 	clrw x 
      000D23 97               [ 1]  161 	ld xl,a
      000D24 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000D26 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000D29 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000D2B CE 00 1D         [ 2]  165 	ldw x,txtend 
      000D2E 20 38            [ 2]  166 	jra 4$
      000D30 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000D34 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000D36 AE 00 02         [ 2]  170 	ldw x,#2 
      000D39 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000D3D 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000D3E 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000D40 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000D42 4F               [ 1]  177 	clr a 
      000D43 CD 0C 89         [ 4]  178 	call search_lineno 
      000D46 5D               [ 2]  179 	tnzw x 
      000D47 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D49 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D4B 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D4D 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D4F CD 0C B4         [ 4]  188 	call del_line
      000D52                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D52 A6 03            [ 1]  192 	ld a,#3
      000D54 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D56 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D58 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D5A C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D5D 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D5F 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D61 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D63 CD 0C E1         [ 4]  204 	call create_gap
      000D66 20 06            [ 2]  205 	jra 5$
      000D68                        206 4$: 
      000D68 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D6B CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D6E 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D70 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D73 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D77 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D79 CD 14 10         [ 4]  214 	call move 
      000D7C                        215 insert_ln_exit:	
      000D7C                        216 	_drop VSIZE
      000D7C 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D7E 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D7F                        233 parse_quote: 
      000D7F                        234 	_vars VSIZE 
      000D7F 52 02            [ 2]    1     sub sp,#VSIZE 
      000D81 4F               [ 1]  235 	clr a
      000D82 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D84                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000D84 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D87 27 24            [ 1]  239 	jreq 6$
      000D89 72 5C 00 01      [ 1]  240 	inc in 
      000D8D 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D8F A6 5C            [ 1]  242 	ld a,#'\
      000D91 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D93 26 0A            [ 1]  244 	jrne 3$
      000D95 0F 01            [ 1]  245 	clr (PREV,sp)
      000D97 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D99 AD 1C            [ 4]  247 	callr convert_escape
      000D9B F7               [ 1]  248 	ld (x),a 
      000D9C 5C               [ 1]  249 	incw x 
      000D9D 20 E5            [ 2]  250 	jra 2$
      000D9F                        251 3$:
      000D9F 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000DA1 A1 5C            [ 1]  253 	cp a,#'\'
      000DA3 27 DD            [ 1]  254 	jreq 1$
      000DA5 A1 22            [ 1]  255 	cp a,#'"
      000DA7 27 04            [ 1]  256 	jreq 6$ 
      000DA9 F7               [ 1]  257 	ld (x),a 
      000DAA 5C               [ 1]  258 	incw x 
      000DAB 20 D7            [ 2]  259 	jra 2$
      000DAD                        260 6$:
      000DAD 7F               [ 1]  261 	clr (x)
      000DAE 5C               [ 1]  262 	incw x 
      000DAF 90 93            [ 1]  263 	ldw y,x 
      000DB1 5F               [ 1]  264 	clrw x 
      000DB2 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000DB4                        266 	_drop VSIZE
      000DB4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DB6 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000DB7                        278 convert_escape:
      000DB7 89               [ 2]  279 	pushw x 
      000DB8 AE 0D CC         [ 2]  280 	ldw x,#escaped 
      000DBB F1               [ 1]  281 1$:	cp a,(x)
      000DBC 27 06            [ 1]  282 	jreq 2$
      000DBE 7D               [ 1]  283 	tnz (x)
      000DBF 27 09            [ 1]  284 	jreq 3$
      000DC1 5C               [ 1]  285 	incw x 
      000DC2 20 F7            [ 2]  286 	jra 1$
      000DC4 1D 0D CC         [ 2]  287 2$: subw x,#escaped 
      000DC7 9F               [ 1]  288 	ld a,xl 
      000DC8 AB 07            [ 1]  289 	add a,#7
      000DCA 85               [ 2]  290 3$:	popw x 
      000DCB 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    292 
      000DCC 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000DD4                        310 parse_integer: ; { -- n }
      000DD4 89               [ 2]  311 	pushw x 	
      000DD5 4B 00            [ 1]  312 	push #0 ; TCHAR
      000DD7 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000DD9 A1 24            [ 1]  314 	cp a,#'$
      000DDB 26 04            [ 1]  315 	jrne 2$ 
      000DDD                        316     _drop #1
      000DDD 5B 01            [ 2]    1     addw sp,##1 
      000DDF 4B 10            [ 1]  317 	push #16  ; BASE=16
      000DE1 F7               [ 1]  318 2$:	ld (x),a 
      000DE2 5C               [ 1]  319 	incw x 
      000DE3 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DE6 72 5C 00 01      [ 1]  321 	inc in 
      000DEA CD 18 8C         [ 4]  322 	call to_upper 
      000DED 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DEF CD 0E 75         [ 4]  324 	call is_digit 
      000DF2 25 ED            [ 1]  325 	jrc 2$
      000DF4 A6 10            [ 1]  326 	ld a,#16 
      000DF6 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DF8 26 0A            [ 1]  328 	jrne 3$ 
      000DFA 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DFC A1 41            [ 1]  330 	cp a,#'A 
      000DFE 2B 04            [ 1]  331 	jrmi 3$ 
      000E00 A1 47            [ 1]  332 	cp a,#'G 
      000E02 2B DD            [ 1]  333 	jrmi 2$ 
      000E04 72 5A 00 01      [ 1]  334 3$: dec in 	
      000E08 7F               [ 1]  335     clr (x)
      000E09 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000E0B CD 18 98         [ 4]  337 	call atoi24
      000E0E 90 93            [ 1]  338 	ldw y,x
      000E10 C6 00 0C         [ 1]  339 	ld a,acc24 
      000E13 90 F7            [ 1]  340 	ld (y),a 
      000E15 72 A9 00 01      [ 2]  341 	addw y,#1  
      000E19 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000E1C 90 FF            [ 2]  343 	ldw (y),x 
      000E1E 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E22 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000E24                        346 	_drop VSIZE  
      000E24 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E26 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000E27                        364 parse_binary: ; { -- n }
      000E27 4B 00            [ 1]  365 	push #0
      000E29 4B 00            [ 1]  366 	push #0
      000E2B 4B 00            [ 1]  367 	push #0
      000E2D                        368 2$:	
      000E2D 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000E30 72 5C 00 01      [ 1]  370 	inc in 
      000E34 A1 30            [ 1]  371 	cp a,#'0 
      000E36 27 06            [ 1]  372 	jreq 3$
      000E38 A1 31            [ 1]  373 	cp a,#'1 
      000E3A 27 02            [ 1]  374 	jreq 3$ 
      000E3C 20 0B            [ 2]  375 	jra bin_exit 
      000E3E A0 30            [ 1]  376 3$: sub a,#'0 
      000E40 46               [ 1]  377 	rrc a
      000E41 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000E43 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000E45 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E47 20 E4            [ 2]  381 	jra 2$  
      000E49                        382 bin_exit:
      000E49 72 5A 00 01      [ 1]  383 	dec in 
      000E4D 90 93            [ 1]  384 	ldw y,x
      000E4F 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E51 C7 00 0C         [ 1]  386 	ld acc24,a 
      000E54 1E 02            [ 2]  387 	ldw x,(BINARY+1,sp)
      000E56 CF 00 0D         [ 2]  388 	ldw acc16,x
      000E59 90 FF            [ 2]  389 	ldw (y),x 
      000E5B 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E5F A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E61                        392 	_drop VSIZE 
      000E61 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E63 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E64                        402 is_alpha::
      000E64 A1 41            [ 1]  403 	cp a,#'A 
      000E66 8C               [ 1]  404 	ccf 
      000E67 24 0B            [ 1]  405 	jrnc 9$ 
      000E69 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E6B 25 07            [ 1]  407 	jrc 9$ 
      000E6D A1 61            [ 1]  408 	cp a,#'a 
      000E6F 8C               [ 1]  409 	ccf 
      000E70 24 02            [ 1]  410 	jrnc 9$
      000E72 A1 7B            [ 1]  411 	cp a,#'z+1
      000E74 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E75                        421 is_digit::
      000E75 A1 30            [ 1]  422 	cp a,#'0
      000E77 25 03            [ 1]  423 	jrc 1$
      000E79 A1 3A            [ 1]  424     cp a,#'9+1
      000E7B 8C               [ 1]  425 	ccf 
      000E7C 8C               [ 1]  426 1$:	ccf 
      000E7D 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E7E                        438 is_alnum::
      000E7E CD 0E 75         [ 4]  439 	call is_digit
      000E81 25 03            [ 1]  440 	jrc 1$ 
      000E83 CD 0E 64         [ 4]  441 	call is_alpha
      000E86 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E87                        453 is_symbol_char: 
      000E87 A1 5F            [ 1]  454 	cp a,#'_ 
      000E89 26 03            [ 1]  455 	jrne 1$
      000E8B 99               [ 1]  456 	scf 
      000E8C 20 03            [ 2]  457 	jra 9$ 
      000E8E CD 0E 7E         [ 4]  458 1$:	call is_alnum 
      000E91 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E92                        473 parse_symbol:
      000E92 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E93                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E93 CD 18 8C         [ 4]  477 	call to_upper  
      000E96 F7               [ 1]  478 	ld (x), a 
      000E97 5C               [ 1]  479 	incw x
      000E98 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E9B 72 5C 00 01      [ 1]  481 	inc in 
      000E9F CD 0E 87         [ 4]  482 	call is_symbol_char 
      000EA2 25 EF            [ 1]  483 	jrc symb_loop 
      000EA4 7F               [ 1]  484 	clr (x)
      000EA5 72 5A 00 01      [ 1]  485 	dec in  
      000EA9 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000EAA                        502 parse_keyword: 
      000EAA 89               [ 2]  503 	pushw x ; preserve *symbol 
      000EAB CD 0E 92         [ 4]  504 	call parse_symbol
      000EAE 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000EB0 E6 02            [ 1]  506 	ld a,(2,x)
      000EB2 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000EB4 E6 01            [ 1]  509 	ld a,(1,x) 
      000EB6 A0 41            [ 1]  510 	sub a,#'A 
      000EB8 AE 00 03         [ 2]  511 	ldw x,#3 
      000EBB 42               [ 4]  512 	mul x,a 
      000EBC 1C 00 30         [ 2]  513 	addw x,#vars 
      000EBF A6 85            [ 1]  514 	ld a,#TK_VAR 
      000EC1 20 35            [ 2]  515 	jra 4$ 
      000EC3                        516 2$: ; check for keyword, otherwise syntax error.
      000EC3                        517 	_ldx_dict kword_dict ; dictionary entry point
      000EC3 AE 33 5C         [ 2]    1     ldw x,#kword_dict+2
      000EC6 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000EC8 90 5C            [ 1]  519 	incw y 
      000ECA CD 19 02         [ 4]  520 	call search_dict
      000ECD 4D               [ 1]  521 	tnz a
      000ECE 26 28            [ 1]  522 	jrne 4$
                                    523 ; not in this dictionary 
                                    524 ; search for operators dictionary 
      000ED0 1E 01            [ 2]  525 	ldw x,(XFIRST,sp)
      000ED2 5C               [ 1]  526 	incw x  ; *name to search for
      000ED3 CD 2F A0         [ 4]  527 	call search_op_dict
      000ED6 4D               [ 1]  528 	tnz a
      000ED7 27 08            [ 1]  529 	jreq 22$
                                    530 ; operator 
      000ED9 16 01            [ 2]  531 	ldw y,(XFIRST,sp)
      000EDB 90 F7            [ 1]  532 	ld (y),a 
      000EDD 90 5C            [ 1]  533 	incw y 
      000EDF 20 28            [ 2]  534 	jra 5$
      000EE1                        535 22$:	 
                                    536 ; not in dictionary
                                    537 ; compile it as TK_LABEL
      000EE1 16 01            [ 2]  538 	ldw y,(XFIRST,sp)
      000EE3 A6 03            [ 1]  539 	ld a,#TK_LABEL 
      000EE5 90 F7            [ 1]  540 	ld (y),a 
      000EE7 90 5C            [ 1]  541 	incw y
      000EE9                        542 24$:	
      000EE9 90 F6            [ 1]  543     ld a,(y)
      000EEB 27 04            [ 1]  544 	jreq 3$
      000EED 90 5C            [ 1]  545 	incw y 
      000EEF 20 F8            [ 2]  546 	jra 24$ 
      000EF1 90 5C            [ 1]  547 3$: incw y 
      000EF3 A6 03            [ 1]  548 	ld a,#TK_LABEL 
      000EF5 5F               [ 1]  549 	clrw x 	
      000EF6 20 11            [ 2]  550 	jra 5$ 
      000EF8                        551 4$:	
      000EF8 16 01            [ 2]  552 	ldw y,(XFIRST,sp)
      000EFA A3 00 4C         [ 2]  553 	cpw x,#LET_IDX 
      000EFD 27 0A            [ 1]  554 	jreq 5$  ; don't compile LET command 
      000EFF 90 F7            [ 1]  555 	ld (y),a 
      000F01 90 5C            [ 1]  556 	incw y 
      000F03 90 FF            [ 2]  557 	ldw (y),x
      000F05 72 A9 00 02      [ 2]  558 	addw y,#2  
      000F09                        559 5$:	_drop VSIZE 
      000F09 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F0B 81               [ 4]  560 	ret  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    561 
                                    562 ;------------------------------------
                                    563 ; skip character c in text starting from 'in'
                                    564 ; input:
                                    565 ;	 y 		point to text buffer
                                    566 ;    a 		character to skip
                                    567 ; output:  
                                    568 ;	'in' ajusted to new position
                                    569 ;------------------------------------
                           000001   570 	C = 1 ; local var
      000F0C                        571 skip:
      000F0C 88               [ 1]  572 	push a
      000F0D 91 D6 00         [ 4]  573 1$:	ld a,([in.w],y)
      000F10 27 0A            [ 1]  574 	jreq 2$
      000F12 11 01            [ 1]  575 	cp a,(C,sp)
      000F14 26 06            [ 1]  576 	jrne 2$
      000F16 72 5C 00 01      [ 1]  577 	inc in
      000F1A 20 F1            [ 2]  578 	jra 1$
      000F1C                        579 2$: _drop 1 
      000F1C 5B 01            [ 2]    1     addw sp,#1 
      000F1E 81               [ 4]  580 	ret
                                    581 	
                                    582 
                                    583 ;------------------------------------
                                    584 ; scan text for next token
                                    585 ; input: 
                                    586 ;	X 		pointer to buffer where 
                                    587 ;	        token id and value are copied 
                                    588 ; use:
                                    589 ;	Y   pointer to text in tib 
                                    590 ; output:
                                    591 ;   A       token attribute 
                                    592 ;   X 		token value
                                    593 ;   Y       updated position in output buffer   
                                    594 ;------------------------------------
                                    595 	; use to check special character 
                                    596 	.macro _case c t  
                                    597 	ld a,#c 
                                    598 	cp a,(TCHAR,sp) 
                                    599 	jrne t
                                    600 	.endm 
                                    601 
                           000001   602 	TCHAR=1
                           000002   603 	ATTRIB=2
                           000002   604 	VSIZE=2
      000F1F                        605 get_token:: 
      000F1F                        606 	_vars VSIZE
      000F1F 52 02            [ 2]    1     sub sp,#VSIZE 
                                    607 ;	ld a,in 
                                    608 ;	sub a,count
                                    609 ;   jrmi 0$
                                    610 ;	clr a 
                                    611 ;	ret 
      000F21                        612 0$: 
      000F21 90 AE 16 68      [ 2]  613 	ldw y,#tib    	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F25 A6 20            [ 1]  614 	ld a,#SPACE
      000F27 CD 0F 0C         [ 4]  615 	call skip
      000F2A 55 00 01 00 02   [ 1]  616 	mov in.saved,in 
      000F2F 91 D6 00         [ 4]  617 	ld a,([in.w],y)
      000F32 26 05            [ 1]  618 	jrne 1$
      000F34 90 93            [ 1]  619 	ldw y,x 
      000F36 CC 10 DB         [ 2]  620 	jp token_exit ; end of line 
      000F39 72 5C 00 01      [ 1]  621 1$:	inc in 
      000F3D CD 18 8C         [ 4]  622 	call to_upper 
      000F40 6B 01            [ 1]  623 	ld (TCHAR,sp),a 
                                    624 ; check for quoted string
      000F42                        625 str_tst:  	
      000F42                        626 	_case '"' nbr_tst
      000F42 A6 22            [ 1]    1 	ld a,#'"' 
      000F44 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F46 26 0A            [ 1]    3 	jrne nbr_tst
      000F48 A6 02            [ 1]  627 	ld a,#TK_QSTR
      000F4A F7               [ 1]  628 	ld (x),a 
      000F4B 5C               [ 1]  629 	incw x 
      000F4C CD 0D 7F         [ 4]  630 	call parse_quote
      000F4F CC 10 DB         [ 2]  631 	jp token_exit
      000F52                        632 nbr_tst:
                                    633 ; check for hexadecimal number 
      000F52 A6 24            [ 1]  634 	ld a,#'$'
      000F54 11 01            [ 1]  635 	cp a,(TCHAR,sp) 
      000F56 27 17            [ 1]  636 	jreq 1$
                                    637 ;check for binary number 
      000F58 A6 26            [ 1]  638 	ld a,#'&
      000F5A 11 01            [ 1]  639 	cp a,(TCHAR,sp)
      000F5C 26 0A            [ 1]  640 	jrne 0$
      000F5E A6 84            [ 1]  641 	ld a,#TK_INTGR
      000F60 F7               [ 1]  642 	ld (x),a 
      000F61 5C               [ 1]  643 	incw x 
      000F62 CD 0E 27         [ 4]  644 	call parse_binary ; expect binary integer 
      000F65 CC 10 DB         [ 2]  645 	jp token_exit 
                                    646 ; check for decimal number 	
      000F68 7B 01            [ 1]  647 0$:	ld a,(TCHAR,sp)
      000F6A CD 0E 75         [ 4]  648 	call is_digit
      000F6D 24 0C            [ 1]  649 	jrnc 3$
      000F6F A6 84            [ 1]  650 1$:	ld a,#TK_INTGR 
      000F71 F7               [ 1]  651 	ld (x),a 
      000F72 5C               [ 1]  652 	incw x 
      000F73 7B 01            [ 1]  653 	ld a,(TCHAR,sp)
      000F75 CD 0D D4         [ 4]  654 	call parse_integer 
      000F78 CC 10 DB         [ 2]  655 	jp token_exit 
      000F7B                        656 3$: 
      000F7B                        657 	_case '(' bkslsh_tst 
      000F7B A6 28            [ 1]    1 	ld a,#'(' 
      000F7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7F 26 05            [ 1]    3 	jrne bkslsh_tst
      000F81 A6 06            [ 1]  658 	ld a,#TK_LPAREN
      000F83 CC 10 D7         [ 2]  659 	jp token_char   	
      000F86                        660 bkslsh_tst: ; character token 
      000F86                        661 	_case '\',rparnt_tst
      000F86 A6 5C            [ 1]    1 	ld a,#'\' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 16            [ 1]    3 	jrne rparnt_tst
      000F8C A6 04            [ 1]  662 	ld a,#TK_CHAR 
      000F8E F7               [ 1]  663 	ld (x),a 
      000F8F 5C               [ 1]  664 	incw x 
      000F90 91 D6 00         [ 4]  665 	ld a,([in.w],y)
      000F93 F7               [ 1]  666 	ld (x),a 
      000F94 5C               [ 1]  667 	incw x
      000F95 90 93            [ 1]  668 	ldw y,x 	 
      000F97 72 5C 00 01      [ 1]  669 	inc in  
      000F9B 5F               [ 1]  670 	clrw x 
      000F9C 97               [ 1]  671 	ld xl,a 
      000F9D A6 04            [ 1]  672 	ld a,#TK_CHAR 
      000F9F CC 10 DB         [ 2]  673 	jp token_exit 
      000FA2                        674 rparnt_tst:		
      000FA2                        675 	_case ')' colon_tst 
      000FA2 A6 29            [ 1]    1 	ld a,#')' 
      000FA4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA6 26 05            [ 1]    3 	jrne colon_tst
      000FA8 A6 07            [ 1]  676 	ld a,#TK_RPAREN 
      000FAA CC 10 D7         [ 2]  677 	jp token_char
      000FAD                        678 colon_tst:
      000FAD                        679 	_case ':' comma_tst 
      000FAD A6 3A            [ 1]    1 	ld a,#':' 
      000FAF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB1 26 05            [ 1]    3 	jrne comma_tst
      000FB3 A6 0A            [ 1]  680 	ld a,#TK_COLON 
      000FB5 CC 10 D7         [ 2]  681 	jp token_char  
      000FB8                        682 comma_tst:
      000FB8                        683 	_case COMMA sharp_tst 
      000FB8 A6 2C            [ 1]    1 	ld a,#COMMA 
      000FBA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBC 26 05            [ 1]    3 	jrne sharp_tst
      000FBE A6 08            [ 1]  684 	ld a,#TK_COMMA
      000FC0 CC 10 D7         [ 2]  685 	jp token_char
      000FC3                        686 sharp_tst:
      000FC3                        687 	_case SHARP dash_tst 
      000FC3 A6 23            [ 1]    1 	ld a,#SHARP 
      000FC5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC7 26 05            [ 1]    3 	jrne dash_tst
      000FC9 A6 09            [ 1]  688 	ld a,#TK_SHARP
      000FCB CC 10 D7         [ 2]  689 	jp token_char  	 	 
      000FCE                        690 dash_tst: 	
      000FCE                        691 	_case '-' at_tst 
      000FCE A6 2D            [ 1]    1 	ld a,#'-' 
      000FD0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD2 26 05            [ 1]    3 	jrne at_tst
      000FD4 A6 11            [ 1]  692 	ld a,#TK_MINUS  
      000FD6 CC 10 D7         [ 2]  693 	jp token_char 
      000FD9                        694 at_tst:
      000FD9                        695 	_case '@' qmark_tst 
      000FD9 A6 40            [ 1]    1 	ld a,#'@' 
      000FDB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDD 26 05            [ 1]    3 	jrne qmark_tst
      000FDF A6 05            [ 1]  696 	ld a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000FE1 CC 10 D7         [ 2]  697 	jp token_char
      000FE4                        698 qmark_tst:
      000FE4                        699 	_case '?' tick_tst 
      000FE4 A6 3F            [ 1]    1 	ld a,#'?' 
      000FE6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE8 26 12            [ 1]    3 	jrne tick_tst
      000FEA A6 80            [ 1]  700 	ld a,#TK_CMD  
      000FEC F7               [ 1]  701 	ld (x),a 
      000FED 5C               [ 1]  702 	incw x 
      000FEE 90 93            [ 1]  703 	ldw y,x 
      000FF0 AE 00 6A         [ 2]  704 	ldw x,#PRT_IDX 
      000FF3 90 FF            [ 2]  705 	ldw (y),x 
      000FF5 72 A9 00 02      [ 2]  706 	addw y,#2
      000FF9 CC 10 DB         [ 2]  707 	jp token_exit
      000FFC                        708 tick_tst: ; comment 
      000FFC                        709 	_case TICK plus_tst 
      000FFC A6 27            [ 1]    1 	ld a,#TICK 
      000FFE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001000 26 35            [ 1]    3 	jrne plus_tst
      001002 A6 80            [ 1]  710 	ld a,#TK_CMD
      001004 F7               [ 1]  711 	ld (x),a 
      001005 5C               [ 1]  712 	incw x
      001006 90 AE 00 84      [ 2]  713 	ldw y,#REM_IDX
      00100A FF               [ 2]  714 	ldw (x),y 
      00100B 1C 00 02         [ 2]  715 	addw x,#2  
      00100E                        716 copy_comment:
      00100E 90 AE 16 68      [ 2]  717 	ldw y,#tib 
      001012 72 B9 00 00      [ 2]  718 	addw y,in.w
      001016 90 89            [ 2]  719 	pushw y
      001018 CD 14 00         [ 4]  720 	call strcpy
      00101B 72 F2 01         [ 2]  721     subw y,(1,sp)
      00101E 90 9F            [ 1]  722 	ld a,yl 
      001020 CB 00 01         [ 1]  723 	add a,in
      001023 C7 00 01         [ 1]  724 	ld in,a 
      001026 1F 01            [ 2]  725 	ldw (1,sp),x
      001028 72 F9 01         [ 2]  726 	addw y,(1,sp)
      00102B 90 5C            [ 1]  727 	incw y 
      00102D                        728 	_drop 2 
      00102D 5B 02            [ 2]    1     addw sp,#2 
      00102F AE 00 84         [ 2]  729 	ldw x,#REM_IDX 
      001032 A6 80            [ 1]  730 	ld a,#TK_CMD 
      001034 CC 10 DB         [ 2]  731 	jp token_exit 
      001037                        732 plus_tst:
      001037                        733 	_case '+' star_tst 
      001037 A6 2B            [ 1]    1 	ld a,#'+' 
      001039 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00103B 26 05            [ 1]    3 	jrne star_tst
      00103D A6 10            [ 1]  734 	ld a,#TK_PLUS  
      00103F CC 10 D7         [ 2]  735 	jp token_char 
      001042                        736 star_tst:
      001042                        737 	_case '*' slash_tst 
      001042 A6 2A            [ 1]    1 	ld a,#'*' 
      001044 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001046 26 05            [ 1]    3 	jrne slash_tst
      001048 A6 20            [ 1]  738 	ld a,#TK_MULT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00104A CC 10 D7         [ 2]  739 	jp token_char 
      00104D                        740 slash_tst: 
      00104D                        741 	_case '/' prcnt_tst 
      00104D A6 2F            [ 1]    1 	ld a,#'/' 
      00104F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001051 26 05            [ 1]    3 	jrne prcnt_tst
      001053 A6 21            [ 1]  742 	ld a,#TK_DIV 
      001055 CC 10 D7         [ 2]  743 	jp token_char 
      001058                        744 prcnt_tst:
      001058                        745 	_case '%' eql_tst 
      001058 A6 25            [ 1]    1 	ld a,#'%' 
      00105A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00105C 26 05            [ 1]    3 	jrne eql_tst
      00105E A6 22            [ 1]  746 	ld a,#TK_MOD
      001060 CC 10 D7         [ 2]  747 	jp token_char  
                                    748 ; 1 or 2 character tokens 	
      001063                        749 eql_tst:
      001063                        750 	_case '=' gt_tst 		
      001063 A6 3D            [ 1]    1 	ld a,#'=' 
      001065 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001067 26 05            [ 1]    3 	jrne gt_tst
      001069 A6 32            [ 1]  751 	ld a,#TK_EQUAL
      00106B CC 10 D7         [ 2]  752 	jp token_char 
      00106E                        753 gt_tst:
      00106E                        754 	_case '>' lt_tst 
      00106E A6 3E            [ 1]    1 	ld a,#'>' 
      001070 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001072 26 23            [ 1]    3 	jrne lt_tst
      001074 A6 31            [ 1]  755 	ld a,#TK_GT 
      001076 6B 02            [ 1]  756 	ld (ATTRIB,sp),a 
      001078 91 D6 00         [ 4]  757 	ld a,([in.w],y)
      00107B 72 5C 00 01      [ 1]  758 	inc in 
      00107F A1 3D            [ 1]  759 	cp a,#'=
      001081 26 04            [ 1]  760 	jrne 1$
      001083 A6 33            [ 1]  761 	ld a,#TK_GE 
      001085 20 50            [ 2]  762 	jra token_char  
      001087 A1 3C            [ 1]  763 1$: cp a,#'<
      001089 26 04            [ 1]  764 	jrne 2$
      00108B A6 35            [ 1]  765 	ld a,#TK_NE 
      00108D 20 48            [ 2]  766 	jra token_char 
      00108F 72 5A 00 01      [ 1]  767 2$: dec in
      001093 7B 02            [ 1]  768 	ld a,(ATTRIB,sp)
      001095 20 40            [ 2]  769 	jra token_char 	 
      001097                        770 lt_tst:
      001097                        771 	_case '<' other
      001097 A6 3C            [ 1]    1 	ld a,#'<' 
      001099 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00109B 26 23            [ 1]    3 	jrne other
      00109D A6 34            [ 1]  772 	ld a,#TK_LT 
      00109F 6B 02            [ 1]  773 	ld (ATTRIB,sp),a 
      0010A1 91 D6 00         [ 4]  774 	ld a,([in.w],y)
      0010A4 72 5C 00 01      [ 1]  775 	inc in 
      0010A8 A1 3D            [ 1]  776 	cp a,#'=
      0010AA 26 04            [ 1]  777 	jrne 1$
      0010AC A6 36            [ 1]  778 	ld a,#TK_LE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0010AE 20 27            [ 2]  779 	jra token_char 
      0010B0 A1 3E            [ 1]  780 1$: cp a,#'>
      0010B2 26 04            [ 1]  781 	jrne 2$
      0010B4 A6 35            [ 1]  782 	ld a,#TK_NE 
      0010B6 20 1F            [ 2]  783 	jra token_char 
      0010B8 72 5A 00 01      [ 1]  784 2$: dec in 
      0010BC 7B 02            [ 1]  785 	ld a,(ATTRIB,sp)
      0010BE 20 17            [ 2]  786 	jra token_char 	
      0010C0                        787 other: ; not a special character 	 
      0010C0 7B 01            [ 1]  788 	ld a,(TCHAR,sp)
      0010C2 CD 0E 64         [ 4]  789 	call is_alpha 
      0010C5 25 03            [ 1]  790 	jrc 30$ 
      0010C7 CC 16 A0         [ 2]  791 	jp syntax_error 
      0010CA                        792 30$: 
      0010CA CD 0E AA         [ 4]  793 	call parse_keyword
      0010CD A3 21 12         [ 2]  794 	cpw x,#remark 
      0010D0 26 09            [ 1]  795 	jrne token_exit 
      0010D2 90 93            [ 1]  796 	ldw y,x 
      0010D4 CC 10 0E         [ 2]  797 	jp copy_comment 
      0010D7                        798 token_char:
      0010D7 F7               [ 1]  799 	ld (x),a 
      0010D8 5C               [ 1]  800 	incw x
      0010D9 90 93            [ 1]  801 	ldw y,x 
      0010DB                        802 token_exit:
      0010DB                        803 	_drop VSIZE 
      0010DB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010DD 81               [ 4]  804 	ret
                                    805 
                                    806 
                                    807 ;-----------------------------------
                                    808 ; create token list fromm text line 
                                    809 ; save this list in pad buffer 
                                    810 ;  compiled line format: 
                                    811 ;    line_no  2 bytes {0...32767}
                                    812 ;    count    1 byte  
                                    813 ;    tokens   variable length 
                                    814 ;   
                                    815 ; input:
                                    816 ;   none
                                    817 ; modified variables:
                                    818 ;   basicptr     token list buffer address 
                                    819 ;   in.w  		 3|count, i.e. index in buffer
                                    820 ;   count        length of line | 0  
                                    821 ;-----------------------------------
                           000001   822 	XSAVE=1
                           000002   823 	VSIZE=2
      0010DE                        824 compile::
      0010DE 90 89            [ 2]  825 	pushw y 
      0010E0                        826 	_vars VSIZE 
      0010E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0010E2 55 00 1B 00 04   [ 1]  827 	mov basicptr,txtbgn
      0010E7 72 1A 00 22      [ 1]  828 	bset flags,#FCOMP 
      0010EB A6 00            [ 1]  829 	ld a,#0
      0010ED AE 00 00         [ 2]  830 	ldw x,#0
      0010F0 CF 16 B8         [ 2]  831 	ldw pad,x ; destination buffer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0010F3 C7 16 BA         [ 1]  832 	ld pad+2,a ; count 
      0010F6 AE 16 BB         [ 2]  833 	ldw x,#pad+3
      0010F9 72 5F 00 01      [ 1]  834 	clr in 
      0010FD CD 0F 1F         [ 4]  835 	call get_token
      001100 A1 84            [ 1]  836 	cp a,#TK_INTGR
      001102 26 11            [ 1]  837 	jrne 2$
      001104 A3 00 01         [ 2]  838 	cpw x,#1 
      001107 2A 05            [ 1]  839 	jrpl 1$
      001109 A6 0A            [ 1]  840 	ld a,#ERR_BAD_VALUE
      00110B CC 16 A2         [ 2]  841 	jp tb_error
      00110E CF 16 B8         [ 2]  842 1$:	ldw pad,x 
      001111 90 AE 16 BB      [ 2]  843 	ldw y,#pad+3 
      001115 90 A3 17 74      [ 2]  844 2$:	cpw y,#stack_full 
      001119 25 05            [ 1]  845 	jrult 3$
      00111B A6 0F            [ 1]  846 	ld a,#ERR_BUF_FULL 
      00111D CC 16 A2         [ 2]  847 	jp tb_error 
      001120                        848 3$:	
      001120 93               [ 1]  849 	ldw x,y 
      001121 CD 0F 1F         [ 4]  850 	call get_token 
      001124 A1 00            [ 1]  851 	cp a,#TK_NONE 
      001126 26 ED            [ 1]  852 	jrne 2$ 
                                    853 ; compilation completed  
      001128 72 A2 16 B8      [ 2]  854 	subw y,#pad
      00112C 90 9F            [ 1]  855     ld a,yl
      00112E AE 16 B8         [ 2]  856 	ldw x,#pad 
      001131 CF 00 19         [ 2]  857 	ldw ptr16,x 
      001134 E7 02            [ 1]  858 	ld (2,x),a 
      001136 FE               [ 2]  859 	ldw x,(x)
      001137 27 09            [ 1]  860 	jreq 10$
      001139 CD 0D 0D         [ 4]  861 	call insert_line
      00113C 72 5F 00 03      [ 1]  862 	clr  count 
      001140 20 0F            [ 2]  863 	jra  11$ 
      001142                        864 10$: ; line# is zero 
      001142 CE 00 19         [ 2]  865 	ldw x,ptr16  
      001145 CF 00 04         [ 2]  866 	ldw basicptr,x 
      001148 E6 02            [ 1]  867 	ld a,(2,x)
      00114A C7 00 03         [ 1]  868 	ld count,a 
      00114D 35 03 00 01      [ 1]  869 	mov in,#3 
      001151                        870 11$:
      001151                        871 	_drop VSIZE 
      001151 5B 02            [ 2]    1     addw sp,#VSIZE 
      001153 72 1B 00 22      [ 1]  872 	bres flags,#FCOMP 
      001157 90 85            [ 2]  873 	popw y 
      001159 81               [ 4]  874 	ret 
                                    875 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      00115A                         48 cpy_cmd_name:
      00115A F6               [ 1]   49 	ld a,(x)
      00115B 5C               [ 1]   50 	incw x
      00115C A4 0F            [ 1]   51 	and a,#15  
      00115E 88               [ 1]   52 	push a 
      00115F 0D 01            [ 1]   53     tnz (1,sp) 
      001161 27 0A            [ 1]   54 	jreq 9$
      001163 F6               [ 1]   55 1$:	ld a,(x)
      001164 90 F7            [ 1]   56 	ld (y),a  
      001166 5C               [ 1]   57 	incw x
      001167 90 5C            [ 1]   58 	incw y 
      001169 0A 01            [ 1]   59 	dec (1,sp)	 
      00116B 26 F6            [ 1]   60 	jrne 1$
      00116D 84               [ 1]   61 9$: pop a 
      00116E 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      00116F                         72 add_space:
      00116F 90 5A            [ 2]   73 	decw y 
      001171 90 F6            [ 1]   74 	ld a,(y)
      001173 90 5C            [ 1]   75 	incw y
      001175 A1 29            [ 1]   76 	cp a,#') 
      001177 27 05            [ 1]   77 	jreq 0$
      001179 CD 0E 7E         [ 4]   78 	call is_alnum 
      00117C 24 06            [ 1]   79 	jrnc 1$
      00117E                         80 0$: 
      00117E A6 20            [ 1]   81 	ld a,#SPACE 
      001180 90 F7            [ 1]   82 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001182 90 5C            [ 1]   83 	incw y 
      001184 81               [ 4]   84 1$: ret 
                                     85 
                                     86 ;--------------------------
                                     87 ;  align text in buffer 
                                     88 ;  to tab_width padding 
                                     89 ;  left with  SPACE 
                                     90 ; input:
                                     91 ;   X      str*
                                     92 ;   A      str_length 
                                     93 ; output:
                                     94 ;   X      ajusted
                                     95 ;--------------------------
      001185                         96 right_align::
      001185 88               [ 1]   97 	push a 
      001186 7B 01            [ 1]   98 0$: ld a,(1,sp)
      001188 C1 00 23         [ 1]   99 	cp a,tab_width 
      00118B 2A 08            [ 1]  100 	jrpl 1$
      00118D A6 20            [ 1]  101 	ld a,#SPACE 
      00118F 5A               [ 2]  102 	decw x
      001190 F7               [ 1]  103 	ld (x),a  
      001191 0C 01            [ 1]  104 	inc (1,sp)
      001193 20 F1            [ 2]  105 	jra 0$ 
      001195 84               [ 1]  106 1$: pop a 	
      001196 81               [ 4]  107 	ret 
                                    108 
                                    109 ;--------------------------
                                    110 ; print TK_QSTR
                                    111 ; converting control character
                                    112 ; to backslash sequence
                                    113 ; input:
                                    114 ;   X        char *
                                    115 ;   Y        dest. buffer 
                                    116 ; output:
                                    117 ;   X        moved forward 
                                    118 ;   Y        moved forward 
                                    119 ;-----------------------------
      001197                        120 cpy_quote:
      001197 A6 22            [ 1]  121 	ld a,#'"
      001199 90 F7            [ 1]  122 	ld (y),a 
      00119B 90 5C            [ 1]  123 	incw y 
      00119D 89               [ 2]  124 	pushw x 
      00119E CD 17 C7         [ 4]  125 	call skip_string 
      0011A1 85               [ 2]  126 	popw x 
      0011A2 F6               [ 1]  127 1$:	ld a,(x)
      0011A3 27 30            [ 1]  128 	jreq 9$
      0011A5 5C               [ 1]  129 	incw x 
      0011A6 A1 20            [ 1]  130 	cp a,#SPACE 
      0011A8 25 0E            [ 1]  131 	jrult 3$
      0011AA 90 F7            [ 1]  132 	ld (y),a
      0011AC 90 5C            [ 1]  133 	incw y 
      0011AE A1 5C            [ 1]  134 	cp a,#'\ 
      0011B0 26 F0            [ 1]  135 	jrne 1$ 
      0011B2                        136 2$:
      0011B2 90 F7            [ 1]  137 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0011B4 90 5C            [ 1]  138 	incw y  
      0011B6 20 EA            [ 2]  139 	jra 1$
      0011B8 88               [ 1]  140 3$: push a 
      0011B9 A6 5C            [ 1]  141 	ld a,#'\
      0011BB 90 F7            [ 1]  142 	ld (y),a 
      0011BD 90 5C            [ 1]  143 	incw y  
      0011BF 84               [ 1]  144 	pop a 
      0011C0 A0 07            [ 1]  145 	sub a,#7
      0011C2 C7 00 0E         [ 1]  146 	ld acc8,a 
      0011C5 72 5F 00 0D      [ 1]  147 	clr acc16
      0011C9 89               [ 2]  148 	pushw x
      0011CA AE 0D CC         [ 2]  149 	ldw x,#escaped 
      0011CD 72 BB 00 0D      [ 2]  150 	addw x,acc16 
      0011D1 F6               [ 1]  151 	ld a,(x)
      0011D2 85               [ 2]  152 	popw x
      0011D3 20 DD            [ 2]  153 	jra 2$
      0011D5 A6 22            [ 1]  154 9$: ld a,#'"
      0011D7 90 F7            [ 1]  155 	ld (y),a 
      0011D9 90 5C            [ 1]  156 	incw y  
      0011DB 5C               [ 1]  157 	incw x 
      0011DC 81               [ 4]  158 	ret
                                    159 
                                    160 ;--------------------------
                                    161 ; return variable name 
                                    162 ; from its address.
                                    163 ; input:
                                    164 ;   X    variable address
                                    165 ; output:
                                    166 ;   A     variable letter
                                    167 ;--------------------------
      0011DD                        168 var_name::
      0011DD 1D 00 30         [ 2]  169 		subw x,#vars 
      0011E0 A6 03            [ 1]  170 		ld a,#3
      0011E2 62               [ 2]  171 		div x,a 
      0011E3 9F               [ 1]  172 		ld a,xl 
      0011E4 AB 41            [ 1]  173 		add a,#'A 
      0011E6 81               [ 4]  174 		ret 
                                    175 
                                    176 ;-----------------------------
                                    177 ; return cmd  idx from its 
                                    178 ; code address 
                                    179 ; input:
                                    180 ;   X      code address 
                                    181 ; output:
                                    182 ;   X      cmd_idx
                                    183 ;-----------------------------
      0011E7                        184 get_cmd_idx:
      0011E7 90 89            [ 2]  185 	pushw y
      0011E9 90 AE 33 62      [ 2]  186 	ldw y,#code_addr 
      0011ED 90 CF 00 19      [ 2]  187 	ldw ptr16,y 
      0011F1 90 5F            [ 1]  188 	clrw y 
      0011F3 91 D3 19         [ 5]  189 1$:	cpw x,([ptr16],y)
      0011F6 27 0C            [ 1]  190 	jreq 3$ 
      0011F8 90 5C            [ 1]  191 	incw y 
      0011FA 91 D6 19         [ 4]  192 	ld a,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0011FD 90 5C            [ 1]  193 	incw y
      0011FF 91 DA 19         [ 4]  194 	or a,([ptr16],y)	
      001202 26 EF            [ 1]  195 	jrne 1$
      001204 93               [ 1]  196 3$: ldw x,y 
      001205 90 85            [ 2]  197 	popw y 
      001207 81               [ 4]  198 	ret
                                    199 
                                    200 
                                    201 ;-------------------------------------
                                    202 ; decompile tokens list 
                                    203 ; to original text line 
                                    204 ; input:
                                    205 ;   [basicptr]  pointer at line 
                                    206 ;   Y           output buffer
                                    207 ; output:
                                    208 ;   A           length 
                                    209 ;   Y           after string  
                                    210 ;------------------------------------
                           000001   211 	BASE_SAV=1
                           000002   212 	WIDTH_SAV=2
                           000003   213 	STR=3
                           000004   214 	VSIZE=4 
      001208                        215 decompile::
      001208                        216 	_vars VSIZE
      001208 52 04            [ 2]    1     sub sp,#VSIZE 
      00120A C6 00 0A         [ 1]  217 	ld a,base
      00120D 6B 01            [ 1]  218 	ld (BASE_SAV,sp),a  
      00120F C6 00 23         [ 1]  219 	ld a,tab_width 
      001212 6B 02            [ 1]  220 	ld (WIDTH_SAV,sp),a 
      001214 17 03            [ 2]  221 	ldw (STR,sp),y   
      001216 72 CE 00 04      [ 5]  222 	ldw x,[basicptr] ; line number 
      00121A 35 0A 00 0A      [ 1]  223 	mov base,#10
      00121E 35 05 00 23      [ 1]  224 	mov tab_width,#5
      001222 72 5F 00 0C      [ 1]  225 	clr acc24 
      001226 CF 00 0D         [ 2]  226 	ldw acc16,x
      001229 4F               [ 1]  227 	clr a ; unsigned conversion 
      00122A CD 18 33         [ 4]  228 	call itoa  
      00122D CD 11 85         [ 4]  229 	call right_align 
      001230 88               [ 1]  230 	push a 
      001231 90 93            [ 1]  231 1$:	ldw y,x ; source
      001233 1E 04            [ 2]  232 	ldw x,(STR+1,sp) ; destination
      001235 CD 14 00         [ 4]  233 	call strcpy 
      001238 90 5F            [ 1]  234 	clrw y 
      00123A 84               [ 1]  235 	pop a 
      00123B 90 97            [ 1]  236 	ld yl,a 
      00123D 72 F9 03         [ 2]  237 	addw y,(STR,sp)
      001240 A6 20            [ 1]  238 	ld a,#SPACE 
      001242 90 F7            [ 1]  239 	ld (y),a 
      001244 90 5C            [ 1]  240 	incw y 
      001246 72 5F 00 23      [ 1]  241 	clr tab_width
      00124A AE 00 03         [ 2]  242 	ldw x,#3
      00124D CF 00 00         [ 2]  243 	ldw in.w,x 
      001250                        244 decomp_loop:
      001250 90 89            [ 2]  245 	pushw y
      001252 CD 17 A1         [ 4]  246 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001255 90 85            [ 2]  247 	popw y 
      001257 4D               [ 1]  248 	tnz a  
      001258 26 03            [ 1]  249 	jrne 1$
      00125A CC 13 77         [ 2]  250 	jp 20$
      00125D 2B 03            [ 1]  251 1$:	jrmi 2$
      00125F CC 12 E8         [ 2]  252 	jp 6$
      001262                        253 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      001262 A1 85            [ 1]  254 	cp a,#TK_VAR 
      001264 26 0F            [ 1]  255 	jrne 3$
                                    256 ;; TK_VAR 
      001266 CD 11 6F         [ 4]  257 	call add_space
      001269 CD 17 D6         [ 4]  258 	call get_addr   
      00126C CD 11 DD         [ 4]  259 	call var_name
      00126F 90 F7            [ 1]  260 	ld (y),a 
      001271 90 5C            [ 1]  261 	incw y  
      001273 20 DB            [ 2]  262 	jra decomp_loop
      001275                        263 3$:
      001275 A1 84            [ 1]  264 	cp a,#TK_INTGR
      001277 26 26            [ 1]  265 	jrne 4$
                                    266 ;; TK_INTGR
      001279 CD 17 E0         [ 4]  267 	call get_int24 
      00127C C7 00 0C         [ 1]  268 	ld acc24,a 
      00127F CF 00 0D         [ 2]  269 	ldw acc16,x 
      001282 CD 11 6F         [ 4]  270 	call add_space
      001285 90 89            [ 2]  271 	pushw y 
      001287 A6 FF            [ 1]  272 	ld a,#255 ; signed conversion 
      001289 CD 18 33         [ 4]  273 	call itoa  
      00128C 16 01            [ 2]  274 	ldw y,(1,sp) 
      00128E 88               [ 1]  275 	push a 
      00128F 51               [ 1]  276 	exgw x,y 
      001290 CD 14 00         [ 4]  277 	call strcpy 
      001293 90 5F            [ 1]  278 	clrw y
      001295 84               [ 1]  279 	pop a  
      001296 90 97            [ 1]  280 	ld yl,a 
      001298 72 F9 01         [ 2]  281 	addw y,(1,sp)
      00129B                        282 	_drop 2 
      00129B 5B 02            [ 2]    1     addw sp,#2 
      00129D 20 B1            [ 2]  283 	jra decomp_loop
      00129F                        284 4$: ; dictionary keyword 
      00129F FE               [ 2]  285 	ldw x,(x)
      0012A0 72 5C 00 01      [ 1]  286 	inc in 
      0012A4 72 5C 00 01      [ 1]  287 	inc in 
      0012A8 A3 00 84         [ 2]  288 	cpw x,#REM_IDX
      0012AB 26 23            [ 1]  289 	jrne 5$
      0012AD CE 00 04         [ 2]  290 	ldw x,basicptr 
                                    291 ; copy comment to buffer 
      0012B0 CD 11 6F         [ 4]  292 	call add_space
      0012B3 A6 27            [ 1]  293 	ld a,#''
      0012B5 90 F7            [ 1]  294 	ld (y),a 
      0012B7 90 5C            [ 1]  295 	incw y 
      0012B9                        296 46$:
      0012B9 72 D6 00 00      [ 4]  297 	ld a,([in.w],x)
      0012BD 72 5C 00 01      [ 1]  298 	inc in  
      0012C1 90 F7            [ 1]  299 	ld (y),a 
      0012C3 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0012C5 C6 00 01         [ 1]  301 	ld a,in 
      0012C8 C1 00 03         [ 1]  302 	cp a,count 
      0012CB 2B EC            [ 1]  303 	jrmi 46$
      0012CD CC 13 77         [ 2]  304 	jp 20$  
      0012D0 A3 00 4C         [ 2]  305 5$: cpw x,#LET_IDX 
      0012D3 26 03            [ 1]  306 	jrne 51$
      0012D5 CC 12 50         [ 2]  307 	jp decomp_loop ; down display LET 	
      0012D8                        308 51$: ; insert command name 
      0012D8 CD 11 6F         [ 4]  309 	call add_space  
      0012DB 90 89            [ 2]  310 	pushw y
      0012DD CD 13 B2         [ 4]  311 	call cmd_name
      0012E0 90 85            [ 2]  312 	popw y 
      0012E2 CD 11 5A         [ 4]  313 	call cpy_cmd_name
      0012E5 CC 12 50         [ 2]  314 	jp decomp_loop 
      0012E8                        315 6$:
                                    316 ; label?
      0012E8 A1 03            [ 1]  317 	cp a,#TK_LABEL 
      0012EA 26 1E            [ 1]  318 	jrne 64$
                                    319 ; copy label string to output buffer   	
      0012EC A6 20            [ 1]  320 	ld a,#32 
      0012EE 90 F7            [ 1]  321 	ld (y),a 
      0012F0 90 5C            [ 1]  322 	incw y 
      0012F2                        323 61$:
      0012F2 89               [ 2]  324 	pushw x 
      0012F3 CD 17 C7         [ 4]  325 	call skip_string 
      0012F6 85               [ 2]  326 	popw x 
      0012F7                        327 62$:	
      0012F7 F6               [ 1]  328 	ld a,(x)
      0012F8 27 07            [ 1]  329 	jreq 63$ 
      0012FA 5C               [ 1]  330 	incw x  
      0012FB 90 F7            [ 1]  331 	ld (y),a 
      0012FD 90 5C            [ 1]  332 	incw y 
      0012FF 20 F6            [ 2]  333 	jra 62$ 
      001301                        334 63$: 
      001301 A6 20            [ 1]  335 	ld a,#32 
      001303 90 F7            [ 1]  336 	ld (y),a 
      001305 90 5C            [ 1]  337 	incw y 
      001307 CC 12 50         [ 2]  338 	jp decomp_loop
      00130A                        339 64$:
      00130A A1 02            [ 1]  340 	cp a,#TK_QSTR 
      00130C 26 09            [ 1]  341 	jrne 7$
                                    342 ;; TK_QSTR
      00130E CD 11 6F         [ 4]  343 	call add_space
      001311 CD 11 97         [ 4]  344 	call cpy_quote  
      001314 CC 12 50         [ 2]  345 	jp decomp_loop
      001317                        346 7$:
      001317 A1 04            [ 1]  347 	cp a,#TK_CHAR 
      001319 26 10            [ 1]  348 	jrne 8$
                                    349 ;; TK_CHAR
      00131B CD 11 6F         [ 4]  350 	call add_space 
      00131E A6 5C            [ 1]  351 	ld a,#'\ 
      001320 90 F7            [ 1]  352 	ld (y),a 
      001322 90 5C            [ 1]  353 	incw y
      001324 F6               [ 1]  354 	ld a,(x)
      001325 72 5C 00 01      [ 1]  355 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001329 20 06            [ 2]  356 	jra 81$
      00132B A1 0A            [ 1]  357 8$: cp a,#TK_COLON 
      00132D 26 09            [ 1]  358 	jrne 9$
      00132F A6 3A            [ 1]  359 	ld a,#':
      001331                        360 81$:
      001331 90 F7            [ 1]  361 	ld (y),a 
      001333 90 5C            [ 1]  362 	incw y 
      001335                        363 82$:
      001335 CC 12 50         [ 2]  364 	jp decomp_loop
      001338                        365 9$: 
      001338 A1 09            [ 1]  366 	cp a,#TK_SHARP
      00133A 22 0A            [ 1]  367 	jrugt 10$ 
      00133C A0 05            [ 1]  368 	sub a,#TK_ARRAY 
      00133E 5F               [ 1]  369 	clrw x 
      00133F 97               [ 1]  370 	ld xl,a
      001340 1C 13 8D         [ 2]  371 	addw x,#single_char 
      001343 F6               [ 1]  372 	ld a,(x)
      001344 20 EB            [ 2]  373 	jra 81$ 
      001346                        374 10$: 
      001346 A1 11            [ 1]  375 	cp a,#TK_MINUS 
      001348 22 0A            [ 1]  376 	jrugt 11$
      00134A A0 10            [ 1]  377 	sub a,#TK_PLUS 
      00134C 5F               [ 1]  378 	clrw x 
      00134D 97               [ 1]  379 	ld xl,a 
      00134E 1C 13 92         [ 2]  380 	addw x,#add_char 
      001351 F6               [ 1]  381 	ld a,(x)
      001352 20 DD            [ 2]  382 	jra 81$
      001354                        383 11$:
      001354 A1 22            [ 1]  384     cp a,#TK_MOD 
      001356 22 0A            [ 1]  385 	jrugt 12$
      001358 A0 20            [ 1]  386 	sub a,#TK_MULT
      00135A 5F               [ 1]  387 	clrw x 
      00135B 97               [ 1]  388 	ld xl,a 
      00135C 1C 13 94         [ 2]  389 	addw x,#mul_char
      00135F F6               [ 1]  390 	ld a,(x)
      001360 20 CF            [ 2]  391 	jra 81$
      001362                        392 12$:
      001362 A0 31            [ 1]  393 	sub a,#TK_GT  
      001364 48               [ 1]  394 	sll a 
      001365 5F               [ 1]  395 	clrw x 
      001366 97               [ 1]  396 	ld xl,a 
      001367 1C 13 97         [ 2]  397 	addw x,#relop_str 
      00136A FE               [ 2]  398 	ldw x,(x)
      00136B F6               [ 1]  399 	ld a,(x)
      00136C 5C               [ 1]  400 	incw x 
      00136D 90 F7            [ 1]  401 	ld (y),a
      00136F 90 5C            [ 1]  402 	incw y 
      001371 F6               [ 1]  403 	ld a,(x)
      001372 26 BD            [ 1]  404 	jrne 81$
      001374 CC 12 50         [ 2]  405 	jp decomp_loop 
      001377                        406 20$: 
      001377 90 7F            [ 1]  407 	clr (y)
      001379 1E 03            [ 2]  408 	ldw x,(STR,sp)
      00137B 7B 01            [ 1]  409 	ld a,(BASE_SAV,sp)
      00137D C7 00 0A         [ 1]  410 	ld base,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      001380 7B 02            [ 1]  411 	ld a,(WIDTH_SAV,sp)
      001382 C7 00 23         [ 1]  412 	ld tab_width,a
      001385 72 F2 03         [ 2]  413 	subw y,(STR,sp) 
      001388 90 9F            [ 1]  414 	ld a,yl 
      00138A                        415 	_drop VSIZE 
      00138A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00138C 81               [ 4]  416 	ret 
                                    417 
      00138D 40 28 29 2C 23         418 single_char: .byte '@','(',')',',','#'
      001392 2B 2D                  419 add_char: .byte '+','-'
      001394 2A 2F 25               420 mul_char: .byte '*','/','%'
      001397 13 A3 13 A5 13 A7 13   421 relop_str: .word gt,equal,ge,lt,le,ne 
             AA 13 AC 13 AF
      0013A3 3E 00                  422 gt: .asciz ">"
      0013A5 3D 00                  423 equal: .asciz "="
      0013A7 3E 3D 00               424 ge: .asciz ">="
      0013AA 3C 00                  425 lt: .asciz "<"
      0013AC 3C 3D 00               426 le: .asciz "<="
      0013AF 3C 3E 00               427 ne:  .asciz "<>"
                                    428 
                                    429 ;----------------------------------
                                    430 ; search in kword_dict name
                                    431 ; from its execution address 
                                    432 ; input:
                                    433 ;   X       	cmd_index 
                                    434 ; output:
                                    435 ;   X 			cstr*  | 0 
                                    436 ;--------------------------------
                           000001   437 	CMDX=1 
                           000003   438 	LINK=3 
                           000004   439 	VSIZE=4
      0013B2                        440 cmd_name:
      0013B2                        441 	_vars VSIZE 
      0013B2 52 04            [ 2]    1     sub sp,#VSIZE 
      0013B4 72 5F 00 0D      [ 1]  442 	clr acc16 
      0013B8 1F 01            [ 2]  443 	ldw (CMDX,sp),x  
      0013BA AE 33 5A         [ 2]  444 	ldw x,#kword_dict	
      0013BD 1F 03            [ 2]  445 1$:	ldw (LINK,sp),x
      0013BF E6 02            [ 1]  446 	ld a,(2,x)
      0013C1 A4 0F            [ 1]  447 	and a,#15 
      0013C3 C7 00 0E         [ 1]  448 	ld acc8,a 
      0013C6 1C 00 03         [ 2]  449 	addw x,#3
      0013C9 72 BB 00 0D      [ 2]  450 	addw x,acc16
      0013CD FE               [ 2]  451 	ldw x,(x) ; command index  
      0013CE 13 01            [ 2]  452 	cpw x,(CMDX,sp)
      0013D0 27 0A            [ 1]  453 	jreq 2$
      0013D2 1E 03            [ 2]  454 	ldw x,(LINK,sp)
      0013D4 FE               [ 2]  455 	ldw x,(x) 
      0013D5 1D 00 02         [ 2]  456 	subw x,#2  
      0013D8 26 E3            [ 1]  457 	jrne 1$
      0013DA 20 05            [ 2]  458 	jra 9$
      0013DC 1E 03            [ 2]  459 2$: ldw x,(LINK,sp)
      0013DE 1C 00 02         [ 2]  460 	addw x,#2 	
      0013E1                        461 9$:	_drop VSIZE
      0013E1 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0013E3 81               [ 4]  462 	ret
                                    463 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      0013E4                        116 strlen::
      0013E4 89               [ 2]  117 	pushw x 
      0013E5 4F               [ 1]  118 	clr a
      0013E6 7D               [ 1]  119 1$:	tnz (x) 
      0013E7 27 04            [ 1]  120 	jreq 9$ 
      0013E9 4C               [ 1]  121 	inc a 
      0013EA 5C               [ 1]  122 	incw x 
      0013EB 20 F9            [ 2]  123 	jra 1$ 
      0013ED 85               [ 2]  124 9$:	popw x 
      0013EE 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      0013EF                        135 strcmp:
      0013EF F6               [ 1]  136 	ld a,(x)
      0013F0 27 0B            [ 1]  137 	jreq 5$ 
      0013F2 90 F1            [ 1]  138 	cp a,(y) 
      0013F4 26 05            [ 1]  139 	jrne 4$ 
      0013F6 5C               [ 1]  140 	incw x 
      0013F7 90 5C            [ 1]  141 	incw y 
      0013F9 20 F4            [ 2]  142 	jra strcmp 
      0013FB                        143 4$: ; not same  
      0013FB 4F               [ 1]  144 	clr a 
      0013FC 81               [ 4]  145 	ret 
      0013FD                        146 5$: ; same 
      0013FD A6 01            [ 1]  147 	ld a,#1 
      0013FF 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      001400                        159 strcpy::
      001400 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      001401 89               [ 2]  161 	pushw x 
      001402 90 F6            [ 1]  162 1$: ld a,(y)
      001404 27 06            [ 1]  163 	jreq 9$ 
      001406 F7               [ 1]  164 	ld (x),a 
      001407 5C               [ 1]  165 	incw x 
      001408 90 5C            [ 1]  166 	incw y 
      00140A 20 F6            [ 2]  167 	jra 1$ 
      00140C 7F               [ 1]  168 9$:	clr (x)
      00140D 85               [ 2]  169 	popw x 
      00140E 84               [ 1]  170 	pop a 
      00140F 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; increament high byte 
                           000002   183 	LB=2 ; increament low byte 
                           000002   184 	VSIZE=2
      001410                        185 move::
      001410 88               [ 1]  186 	push a 
      001411                        187 	_vars VSIZE 
      001411 52 02            [ 2]    1     sub sp,#VSIZE 
      001413 0F 01            [ 1]  188 	clr (INCR,sp)
      001415 0F 02            [ 1]  189 	clr (LB,sp)
      001417 90 89            [ 2]  190 	pushw y 
      001419 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      00141B 90 85            [ 2]  192 	popw y 
      00141D 27 31            [ 1]  193 	jreq move_exit ; x==y 
      00141F 2B 0E            [ 1]  194 	jrmi move_down
      001421                        195 move_up: ; start from top address with incr=-1
      001421 72 BB 00 0D      [ 2]  196 	addw x,acc16
      001425 72 B9 00 0D      [ 2]  197 	addw y,acc16
      001429 03 01            [ 1]  198 	cpl (INCR,sp)
      00142B 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      00142D 20 05            [ 2]  200 	jra move_loop  
      00142F                        201 move_down: ; start from bottom address with incr=1 
      00142F 5A               [ 2]  202     decw x 
      001430 90 5A            [ 2]  203 	decw y
      001432 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      001434                        205 move_loop:	
      001434 C6 00 0D         [ 1]  206     ld a, acc16 
      001437 CA 00 0E         [ 1]  207 	or a, acc8
      00143A 27 14            [ 1]  208 	jreq move_exit 
      00143C 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      00143F 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      001442 90 F6            [ 1]  211 	ld a,(y)
      001444 F7               [ 1]  212 	ld (x),a 
      001445 89               [ 2]  213 	pushw x 
      001446 CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      001449 5A               [ 2]  215 	decw x 
      00144A CF 00 0D         [ 2]  216 	ldw acc16,x 
      00144D 85               [ 2]  217 	popw x 
      00144E 20 E4            [ 2]  218 	jra move_loop
      001450                        219 move_exit:
      001450                        220 	_drop VSIZE
      001450 5B 02            [ 2]    1     addw sp,#VSIZE 
      001452 84               [ 1]  221 	pop a 
      001453 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      001454                        231 clear_vars:
      001454 89               [ 2]  232 	pushw x 
      001455 88               [ 1]  233 	push a  
      001456 AE 00 30         [ 2]  234 	ldw x,#vars 
      001459 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      00145B 7F               [ 1]  236 1$:	clr (x)
      00145C 5C               [ 1]  237 	incw x 
      00145D 4A               [ 1]  238 	dec a 
      00145E 26 FB            [ 1]  239 	jrne 1$
      001460 84               [ 1]  240 	pop a 
      001461 85               [ 2]  241 	popw x 
      001462 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      001463 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      0014A9                        253 system_information:
      0014A9 AE 14 63         [ 2]  254 	ldw x,#software 
      0014AC CD 09 A1         [ 4]  255 	call puts 
      0014AF A6 02            [ 1]  256 	ld a,#MAJOR 
      0014B1 C7 00 0E         [ 1]  257 	ld acc8,a 
      0014B4 5F               [ 1]  258 	clrw x 
      0014B5 CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0014B8 72 5F 00 23      [ 1]  260 	clr tab_width  
      0014BC 35 0A 00 0A      [ 1]  261 	mov base, #10 
      0014C0 CD 18 0D         [ 4]  262 	call prt_acc24 
      0014C3 A6 2E            [ 1]  263 	ld a,#'.
      0014C5 CD 09 44         [ 4]  264 	call putc 
      0014C8 A6 00            [ 1]  265 	ld a,#MINOR 
      0014CA C7 00 0E         [ 1]  266 	ld acc8,a 
      0014CD 5F               [ 1]  267 	clrw x 
      0014CE CF 00 0C         [ 2]  268 	ldw acc24,x 
      0014D1 CD 18 0D         [ 4]  269 	call prt_acc24
      0014D4 A6 0D            [ 1]  270 	ld a,#CR 
      0014D6 CD 09 44         [ 4]  271 	call putc
                                    272 ;call test 
      0014D9 81               [ 4]  273 	ret
                                    274 
      0014DA                        275 warm_init:
      0014DA 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      0014DE 72 5F 00 22      [ 1]  277 	clr flags 
      0014E2 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      0014E6 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      0014EA 35 0A 00 0A      [ 1]  280 	mov base,#10 
      0014EE AE 00 00         [ 2]  281 	ldw x,#0 
      0014F1 CF 00 04         [ 2]  282 	ldw basicptr,x 
      0014F4 CF 00 00         [ 2]  283 	ldw in.w,x 
      0014F7 72 5F 00 03      [ 1]  284 	clr count
      0014FB 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014FC                        291 clear_basic:
      0014FC 89               [ 2]  292 	pushw x 
      0014FD 72 5F 00 03      [ 1]  293 	clr count
      001501 72 5F 00 01      [ 1]  294 	clr in  
      001505 AE 00 80         [ 2]  295 	ldw x,#free_ram 
      001508 CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      00150B CF 00 1D         [ 2]  297 	ldw txtend,x 
      00150E CD 14 54         [ 4]  298 	call clear_vars 
      001511 85               [ 2]  299 	popw x
      001512 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001513                        305 err_msg:
      001513 00 00 15 35 15 42 15   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             50 15 69 15 78
      00151F 15 8E 15 A4 15 BE 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             CF 15 E0
      001529 15 EC 16 1F 16 2F 16   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             43 16 56
      001533 16 63                  309 	.word err_overflow 
                                    310 
      001535 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      001542 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      001550 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001569 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001578 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00158E 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0015A4 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0015BE 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0015CF 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015E0 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015EC 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00161F 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00162F 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001643 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001656 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001663 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      00166D 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00167F 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001690 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      0016A0                        332 syntax_error::
      0016A0 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      0016A2                        335 tb_error::
      0016A2 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      0016A7 88               [ 1]  337 	push a 
      0016A8 AE 16 6D         [ 2]  338 	ldw x, #rt_msg 
      0016AB CD 09 A1         [ 4]  339 	call puts 
      0016AE 84               [ 1]  340 	pop a 
      0016AF AE 15 13         [ 2]  341 	ldw x, #err_msg 
      0016B2 72 5F 00 0D      [ 1]  342 	clr acc16 
      0016B6 48               [ 1]  343 	sll a
      0016B7 72 59 00 0D      [ 1]  344 	rlc acc16  
      0016BB C7 00 0E         [ 1]  345 	ld acc8, a 
      0016BE 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      0016C2 FE               [ 2]  347 	ldw x,(x)
      0016C3 CD 09 A1         [ 4]  348 	call puts
      0016C6 CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      0016C9 C6 00 03         [ 1]  351 ld a,count 
      0016CC 90 5F            [ 1]  352 clrw y 
      0016CE 90 02            [ 1]  353 rlwa y  
      0016D0 CD 06 A0         [ 4]  354 call hex_dump
      0016D3 CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      0016D6 C6 00 01         [ 1]  357 	ld a,in 
      0016D9 CD 1F AE         [ 4]  358 	call prt_basic_line
      0016DC AE 16 90         [ 2]  359 	ldw x,#tk_id 
      0016DF CD 09 A1         [ 4]  360 	call puts 
      0016E2 C6 00 02         [ 1]  361 	ld a,in.saved 
      0016E5 5F               [ 1]  362 	clrw x 
      0016E6 97               [ 1]  363 	ld xl,a 
      0016E7 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      0016EB F6               [ 1]  365 	ld a,(x)
      0016EC 5F               [ 1]  366 	clrw x 
      0016ED 97               [ 1]  367 	ld xl,a 
      0016EE CD 17 F6         [ 4]  368 	call prt_i16
      0016F1 20 35            [ 2]  369 	jra 6$
      0016F3                        370 1$:	
      0016F3 88               [ 1]  371 	push a 
      0016F4 AE 16 7F         [ 2]  372 	ldw x,#comp_msg
      0016F7 CD 09 A1         [ 4]  373 	call puts 
      0016FA 84               [ 1]  374 	pop a 
      0016FB AE 15 13         [ 2]  375 	ldw x, #err_msg 
      0016FE 72 5F 00 0D      [ 1]  376 	clr acc16 
      001702 48               [ 1]  377 	sll a
      001703 72 59 00 0D      [ 1]  378 	rlc acc16  
      001707 C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00170A 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      00170E FE               [ 2]  381 	ldw x,(x)
      00170F CD 09 A1         [ 4]  382 	call puts
      001712 AE 16 68         [ 2]  383 	ldw x,#tib
      001715 CD 09 A1         [ 4]  384 	call puts 
      001718 A6 0D            [ 1]  385 	ld a,#CR 
      00171A CD 09 44         [ 4]  386 	call putc
      00171D CE 00 00         [ 2]  387 	ldw x,in.w
      001720 CD 0A 0E         [ 4]  388 	call spaces
      001723 A6 5E            [ 1]  389 	ld a,#'^
      001725 CD 09 44         [ 4]  390 	call putc 
      001728 AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      00172B 94               [ 1]  392     ldw sp,x
                                    393 
      00172C                        394 warm_start:
      00172C CD 14 DA         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      00172F                        399 cmd_line: ; user interface 
      00172F A6 0D            [ 1]  400 	ld a,#CR 
      001731 CD 09 44         [ 4]  401 	call putc 
      001734 A6 3E            [ 1]  402 	ld a,#'> 
      001736 CD 09 44         [ 4]  403 	call putc
      001739 CD 0A A6         [ 4]  404 	call readln
      00173C 72 5D 00 03      [ 1]  405 	tnz count 
      001740 27 ED            [ 1]  406 	jreq cmd_line
      001742 CD 10 DE         [ 4]  407 	call compile
                                    408 
                                    409 ;;;;;;;;;;;;;;;;;;;;;;	
                                    410 ;pushw y 
                                    411 ;ldw x,txtbgn  
                                    412 ;ldw y,txtend
                                    413 ;ldw acc16,x   
                                    414 ;subw y,acc16 
                                    415 ;call hex_dump
                                    416 ;popw y 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;
                                    418 
                                    419 ; if text begin with a line number
                                    420 ; the compiler set count to zero    
                                    421 ; so code is not interpreted
      001745 72 5D 00 03      [ 1]  422 	tnz count 
      001749 27 E4            [ 1]  423 	jreq cmd_line
                                    424 	
                                    425 ; if direct command 
                                    426 ; it's ready to interpret 
                                    427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    428 ;; This is the interpreter loop
                                    429 ;; for each BASIC code line. 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00174B                        431 interpreter: 
      00174B C6 00 01         [ 1]  432 	ld a,in 
      00174E C1 00 03         [ 1]  433 	cp a,count 
      001751 2B 1D            [ 1]  434 	jrmi interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001753                        435 next_line:
      001753 72 01 00 22 D7   [ 2]  436 	btjf flags, #FRUN, cmd_line
      001758 CE 00 04         [ 2]  437 	ldw x,basicptr
      00175B 72 BB 00 00      [ 2]  438 	addw x,in.w 
      00175F C3 00 1D         [ 2]  439 	cpw x,txtend 
      001762 2A C8            [ 1]  440 	jrpl warm_start
      001764 CF 00 04         [ 2]  441 	ldw basicptr,x ; start of next line  
      001767 E6 02            [ 1]  442 	ld a,(2,x)
      001769 C7 00 03         [ 1]  443 	ld count,a 
      00176C 35 03 00 01      [ 1]  444 	mov in,#3 ; skip first 3 bytes of line 
      001770                        445 interp_loop:
      001770 CD 17 A1         [ 4]  446 	call next_token
      001773 A1 00            [ 1]  447 	cp a,#TK_NONE 
      001775 27 DC            [ 1]  448 	jreq next_line 
      001777 A1 80            [ 1]  449 	cp a,#TK_CMD
      001779 26 06            [ 1]  450 	jrne 1$
      00177B CD 17 BA         [ 4]  451 	call get_code_addr
      00177E FD               [ 4]  452 	call (x) 
      00177F 20 EF            [ 2]  453 	jra interp_loop 
      001781                        454 1$:	 
      001781 A1 85            [ 1]  455 	cp a,#TK_VAR
      001783 26 05            [ 1]  456 	jrne 2$
      001785 CD 1C 6D         [ 4]  457 	call let_var  
      001788 20 E6            [ 2]  458 	jra interp_loop 
      00178A                        459 2$:	
      00178A A1 05            [ 1]  460 	cp a,#TK_ARRAY 
      00178C 26 05            [ 1]  461 	jrne 3$
      00178E CD 1C 68         [ 4]  462 	call let_array 
      001791 20 DD            [ 2]  463 	jra interp_loop
      001793                        464 3$:	
      001793 A1 0A            [ 1]  465 	cp a,#TK_COLON 
      001795 27 D9            [ 1]  466 	jreq interp_loop
      001797 A1 03            [ 1]  467 4$: cp a,#TK_LABEL
      001799 CD 17 C7         [ 4]  468 	call skip_string 
      00179C 20 D2            [ 2]  469 	jra interp_loop 
      00179E CC 16 A0         [ 2]  470 5$:	jp syntax_error 
                                    471 
                                    472 ;--------------------------
                                    473 ; extract next token from
                                    474 ; token list 
                                    475 ; basicptr -> base address 
                                    476 ; in  -> offset in list array 
                                    477 ; output:
                                    478 ;   A 		token attribute
                                    479 ;   X 		*token_value 
                                    480 ;----------------------------------------
      0017A1                        481 next_token::
                                    482 ;	clrw x 
      0017A1 C6 00 01         [ 1]  483 	ld a,in 
      0017A4 C7 00 02         [ 1]  484 	ld in.saved,a ; in case "_unget_token" needed 
                                    485 ; don't replace sub by "cp a,count" 
                                    486 ; if end of line must return with A=0   	
      0017A7 C0 00 03         [ 1]  487 	sub a,count 
      0017AA 27 0D            [ 1]  488 	jreq 9$ ; end of line 
      0017AC                        489 0$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0017AC CE 00 04         [ 2]  490 	ldw x,basicptr 
      0017AF 72 BB 00 00      [ 2]  491 	addw x,in.w 
      0017B3 F6               [ 1]  492 	ld a,(x)
      0017B4 5C               [ 1]  493 	incw x
      0017B5 72 5C 00 01      [ 1]  494 	inc in   
      0017B9 81               [ 4]  495 9$: ret 
                                    496 
                                    497 ;------------------------
                                    498 ; get cmd and function 
                                    499 ; code address 
                                    500 ; input:
                                    501 ;    X   * cmd|func index 
                                    502 ;        in code_addr table 
                                    503 ;------------------------
      0017BA                        504 get_code_addr:
      0017BA FE               [ 2]  505 	ldw x,(x)
      0017BB DE 33 62         [ 2]  506 	ldw x,(code_addr,x)
      0017BE                        507 skip_2_bytes:
      0017BE 72 5C 00 01      [ 1]  508 	inc in 
      0017C2 72 5C 00 01      [ 1]  509 	inc in 
      0017C6 81               [ 4]  510 	ret
                                    511 
                                    512 ;-------------------------
                                    513 ;  skip .asciz in BASIC line 
                                    514 ;  name 
                                    515 ;  input:
                                    516 ;     x		* string 
                                    517 ;  output:
                                    518 ;     none 
                                    519 ;-------------------------
      0017C7                        520 skip_string:
      0017C7 F6               [ 1]  521 	ld a,(x)
      0017C8 27 03            [ 1]  522 	jreq 1$
      0017CA 5C               [ 1]  523 	incw x 
      0017CB 20 FA            [ 2]  524 	jra skip_string 
      0017CD 5C               [ 1]  525 1$: incw x 	
      0017CE 72 B0 00 04      [ 2]  526 	subw x,basicptr 
      0017D2 CF 00 00         [ 2]  527 	ldw in.w,x 
      0017D5 81               [ 4]  528 	ret 
                                    529 
                                    530 ;---------------------
                                    531 ; extract 16 bits  
                                    532 ; address from BASIC
                                    533 ; code 
                                    534 ; input:
                                    535 ;    X    *address
                                    536 ; output:
                                    537 ;    X    address 
                                    538 ;-------------------- 
      0017D6                        539 get_addr:
      0017D6 FE               [ 2]  540 	ldw x,(x)
      0017D7 72 5C 00 01      [ 1]  541 	inc in 
      0017DB 72 5C 00 01      [ 1]  542 	inc in 
      0017DF 81               [ 4]  543 	ret 
                                    544 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    545 ;--------------------
                                    546 ; extract int24_t  
                                    547 ; value from BASIC 
                                    548 ; code 
                                    549 ; input:
                                    550 ;    X   *integer 
                                    551 ; output:
                                    552 ;    A:X   int24  
                                    553 ;--------------------
      0017E0                        554 get_int24:
      0017E0 F6               [ 1]  555 	ld a,(x)
      0017E1 EE 01            [ 2]  556 	ldw x,(1,x)
                                    557 ; skip 3 bytes 
      0017E3 72 5C 00 01      [ 1]  558 	inc in 
      0017E7 72 5C 00 01      [ 1]  559 	inc in 
      0017EB 72 5C 00 01      [ 1]  560 	inc in 
      0017EF 81               [ 4]  561 	ret 
                                    562 
                                    563 ;-------------------------
                                    564 ; get character from 
                                    565 ; BASIC code 
                                    566 ; input:
                                    567 ;    X   *char 
                                    568 ; output:
                                    569 ;    A    char 
                                    570 ;-------------------------
      0017F0                        571 get_char:
      0017F0 F6               [ 1]  572 	ld a,(x)
      0017F1 72 5C 00 01      [ 1]  573 	inc in  
      0017F5 81               [ 4]  574     ret 
                                    575 
                                    576 ;-----------------------------------
                                    577 ; print a 16 bit integer 
                                    578 ; using variable 'base' as conversion
                                    579 ; format.
                                    580 ; input:
                                    581 ;    X       integer to print 
                                    582 ;   'base'    conversion base 
                                    583 ; output:
                                    584 ;   terminal  
                                    585 ;-----------------------------------
      0017F6                        586 prt_i16:
      0017F6 72 5F 00 0C      [ 1]  587 	clr acc24 
      0017FA CF 00 0D         [ 2]  588 	ldw acc16,x 
      0017FD A6 10            [ 1]  589 	ld a,#16
      0017FF C1 00 0A         [ 1]  590 	cp a,base
      001802 27 09            [ 1]  591 	jreq prt_acc24  
      001804 72 0F 00 0D 04   [ 2]  592 	btjf acc16,#7,prt_acc24
      001809 72 53 00 0C      [ 1]  593 	cpl acc24 ; sign extend 
                                    594 	
                                    595 ;------------------------------------
                                    596 ; print integer in acc24 
                                    597 ; input:
                                    598 ;	acc24 		integer to print 
                                    599 ;	'base' 		numerical base for conversion 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    600 ;   'tab_width' field width 
                                    601 ;    A 			signed||unsigned conversion
                                    602 ;  output:
                                    603 ;    A          string length
                                    604 ;------------------------------------
      00180D                        605 prt_acc24:
      00180D A6 FF            [ 1]  606 	ld a,#255  ; signed conversion  
      00180F CD 18 33         [ 4]  607     call itoa  ; conversion entier en  .asciz
      001812 CD 11 85         [ 4]  608 	call right_align  
      001815 88               [ 1]  609 	push a 
      001816 CD 09 A1         [ 4]  610 	call puts
      001819 84               [ 1]  611 	pop a 
      00181A 81               [ 4]  612     ret	
                                    613 
                                    614 ;---------------------------------------
                                    615 ;  print value at xstack top 
                                    616 ;---------------------------------------
      00181B                        617 print_top: 
      00181B                        618 	_xpop 
      00181B 90 F6            [ 1]    1     ld a,(y)
      00181D 93               [ 1]    2     ldw x,y 
      00181E EE 01            [ 2]    3     ldw x,(1,x)
      001820 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001824 C7 00 0C         [ 1]  619 	ld acc24,a 
      001827 CF 00 0D         [ 2]  620 	ldw acc16,x 
      00182A CD 18 0D         [ 4]  621 	call prt_acc24 
      00182D A6 20            [ 1]  622 	ld a,#SPACE
      00182F CD 09 44         [ 4]  623 	call putc 
      001832 81               [ 4]  624 	ret 
                                    625 
                                    626 ;------------------------------------
                                    627 ; convert integer in acc24 to string
                                    628 ; input:
                                    629 ;   'base'	conversion base 
                                    630 ;	acc24	integer to convert
                                    631 ;   A       0=unsigned, else signed 
                                    632 ; output:
                                    633 ;   X  		pointer to first char of string
                                    634 ;   A       string length
                                    635 ;------------------------------------
                           000001   636 	SIGN=1  ; integer sign 
                           000002   637 	LEN=2 
                           000003   638 	PSTR=3
                           000004   639 	VSIZE=4 ;locals size
      001833                        640 itoa::
      001833                        641 	_vars VSIZE
      001833 52 04            [ 2]    1     sub sp,#VSIZE 
      001835 0F 02            [ 1]  642 	clr (LEN,sp) ; string length  
      001837 0F 01            [ 1]  643 	clr (SIGN,sp)    ; sign
      001839 4D               [ 1]  644 	tnz A
      00183A 27 11            [ 1]  645 	jreq 1$ ; unsigned conversion  
      00183C C6 00 0A         [ 1]  646 	ld a,base 
      00183F A1 0A            [ 1]  647 	cp a,#10
      001841 26 0A            [ 1]  648 	jrne 1$
                                    649 	; base 10 string display with negative sign if bit 23==1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001843 72 0F 00 0C 05   [ 2]  650 	btjf acc24,#7,1$
      001848 03 01            [ 1]  651 	cpl (SIGN,sp)
      00184A CD 02 0D         [ 4]  652 	call neg_acc24
      00184D                        653 1$:
                                    654 ; initialize string pointer 
      00184D AE 16 68         [ 2]  655 	ldw x,#tib 
      001850 1C 00 50         [ 2]  656 	addw x,#TIB_SIZE
      001853 5A               [ 2]  657 	decw x 
      001854 7F               [ 1]  658 	clr (x)
      001855                        659 itoa_loop:
      001855 C6 00 0A         [ 1]  660     ld a,base
                                    661 ;	ldw (PSTR,sp),x 
      001858 CD 03 09         [ 4]  662     call divu24_8 ; acc24/A 
                                    663 ;	ldw x,(PSTR,sp)
      00185B AB 30            [ 1]  664     add a,#'0  ; remainder of division
      00185D A1 3A            [ 1]  665     cp a,#'9+1
      00185F 2B 02            [ 1]  666     jrmi 2$
      001861 AB 07            [ 1]  667     add a,#7 
      001863                        668 2$:	
      001863 5A               [ 2]  669 	decw x
      001864 F7               [ 1]  670     ld (x),a
      001865 0C 02            [ 1]  671 	inc (LEN,sp)
                                    672 	; if acc24==0 conversion done
      001867 C6 00 0C         [ 1]  673 	ld a,acc24
      00186A CA 00 0D         [ 1]  674 	or a,acc16
      00186D CA 00 0E         [ 1]  675 	or a,acc8
      001870 26 E3            [ 1]  676     jrne itoa_loop
                                    677 	;conversion done, next add '$' or '-' as required
      001872 C6 00 0A         [ 1]  678 	ld a,base 
      001875 A1 10            [ 1]  679 	cp a,#16
      001877 27 08            [ 1]  680 	jreq 8$
      001879 7B 01            [ 1]  681 	ld a,(SIGN,sp)
      00187B 27 0A            [ 1]  682     jreq 10$
      00187D A6 2D            [ 1]  683     ld a,#'-
      00187F 20 02            [ 2]  684 	jra 9$ 
      001881                        685 8$:	
      001881 A6 24            [ 1]  686 	ld a,#'$ 
      001883 5A               [ 2]  687 9$: decw x
      001884 F7               [ 1]  688     ld (x),a
      001885 0C 02            [ 1]  689 	inc (LEN,sp)
      001887                        690 10$:
      001887 7B 02            [ 1]  691 	ld a,(LEN,sp)
      001889                        692 	_drop VSIZE
      001889 5B 04            [ 2]    1     addw sp,#VSIZE 
      00188B 81               [ 4]  693 	ret
                                    694 
                                    695 ;------------------------------------
                                    696 ; convert alpha to uppercase
                                    697 ; input:
                                    698 ;    a  character to convert
                                    699 ; output:
                                    700 ;    a  uppercase character
                                    701 ;------------------------------------
      00188C                        702 to_upper::
      00188C A1 61            [ 1]  703 	cp a,#'a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00188E 2A 01            [ 1]  704 	jrpl 1$
      001890 81               [ 4]  705 0$:	ret
      001891 A1 7A            [ 1]  706 1$: cp a,#'z	
      001893 22 FB            [ 1]  707 	jrugt 0$
      001895 A0 20            [ 1]  708 	sub a,#32
      001897 81               [ 4]  709 	ret
                                    710 	
                                    711 ;------------------------------------
                                    712 ; convert pad content in integer
                                    713 ; input:
                                    714 ;    x		* .asciz to convert
                                    715 ; output:
                                    716 ;    acc24      int24_t
                                    717 ;------------------------------------
                                    718 	; local variables
                           000001   719 	SIGN=1 ; 1 byte, 
                           000002   720 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   721 	TEMP=3 ; 1 byte, temporary storage
                           000003   722 	VSIZE=3 ; 3 bytes reserved for local storage
      001898                        723 atoi24::
      001898 89               [ 2]  724 	pushw x 
      001899                        725 	_vars VSIZE
      001899 52 03            [ 2]    1     sub sp,#VSIZE 
                                    726 	; acc24=0 
      00189B 72 5F 00 0C      [ 1]  727 	clr acc24    
      00189F 72 5F 00 0D      [ 1]  728 	clr acc16
      0018A3 72 5F 00 0E      [ 1]  729 	clr acc8 
      0018A7 0F 01            [ 1]  730 	clr (SIGN,sp)
      0018A9 A6 0A            [ 1]  731 	ld a,#10
      0018AB 6B 02            [ 1]  732 	ld (BASE,sp),a ; default base decimal
      0018AD F6               [ 1]  733 	ld a,(x)
      0018AE 27 47            [ 1]  734 	jreq 9$  ; completed if 0
      0018B0 A1 2D            [ 1]  735 	cp a,#'-
      0018B2 26 04            [ 1]  736 	jrne 1$
      0018B4 03 01            [ 1]  737 	cpl (SIGN,sp)
      0018B6 20 08            [ 2]  738 	jra 2$
      0018B8 A1 24            [ 1]  739 1$: cp a,#'$
      0018BA 26 06            [ 1]  740 	jrne 3$
      0018BC A6 10            [ 1]  741 	ld a,#16
      0018BE 6B 02            [ 1]  742 	ld (BASE,sp),a
      0018C0 5C               [ 1]  743 2$:	incw x
      0018C1 F6               [ 1]  744 	ld a,(x)
      0018C2                        745 3$:	
      0018C2 A1 61            [ 1]  746 	cp a,#'a
      0018C4 2B 02            [ 1]  747 	jrmi 4$
      0018C6 A0 20            [ 1]  748 	sub a,#32
      0018C8 A1 30            [ 1]  749 4$:	cp a,#'0
      0018CA 2B 2B            [ 1]  750 	jrmi 9$
      0018CC A0 30            [ 1]  751 	sub a,#'0
      0018CE A1 0A            [ 1]  752 	cp a,#10
      0018D0 2B 06            [ 1]  753 	jrmi 5$
      0018D2 A0 07            [ 1]  754 	sub a,#7
      0018D4 11 02            [ 1]  755 	cp a,(BASE,sp)
      0018D6 2A 1F            [ 1]  756 	jrpl 9$
      0018D8 6B 03            [ 1]  757 5$:	ld (TEMP,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018DA 7B 02            [ 1]  758 	ld a,(BASE,sp)
      0018DC CD 02 2A         [ 4]  759 	call mulu24_8
      0018DF 7B 03            [ 1]  760 	ld a,(TEMP,sp)
      0018E1 CB 00 0E         [ 1]  761 	add a,acc24+2
      0018E4 C7 00 0E         [ 1]  762 	ld acc24+2,a
      0018E7 4F               [ 1]  763 	clr a
      0018E8 C9 00 0D         [ 1]  764 	adc a,acc24+1
      0018EB C7 00 0D         [ 1]  765 	ld acc24+1,a
      0018EE 4F               [ 1]  766 	clr a
      0018EF C9 00 0C         [ 1]  767 	adc a,acc24
      0018F2 C7 00 0C         [ 1]  768 	ld acc24,a
      0018F5 20 C9            [ 2]  769 	jra 2$
      0018F7 0D 01            [ 1]  770 9$:	tnz (SIGN,sp)
      0018F9 27 03            [ 1]  771     jreq atoi_exit
      0018FB CD 02 0D         [ 4]  772     call neg_acc24
      0018FE                        773 atoi_exit: 
      0018FE                        774 	_drop VSIZE
      0018FE 5B 03            [ 2]    1     addw sp,#VSIZE 
      001900 85               [ 2]  775 	popw x ; restore x
      001901 81               [ 4]  776 	ret
                                    777 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    780 ;;   TINY BASIC  operators,
                                    781 ;;   commands and functions 
                                    782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    783 
                                    784 ;---------------------------------
                                    785 ; dictionary search 
                                    786 ; input:
                                    787 ;	X 		dictionary entry point, name field  
                                    788 ;   y		.asciz name to search 
                                    789 ; output:
                                    790 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    791 ;  X		cmd_index
                                    792 ;---------------------------------
                           000001   793 	NLEN=1 ; cmd length 
                           000002   794 	XSAVE=2
                           000004   795 	YSAVE=4
                           000005   796 	VSIZE=5 
      001902                        797 search_dict::
      001902                        798 	_vars VSIZE 
      001902 52 05            [ 2]    1     sub sp,#VSIZE 
      001904 17 04            [ 2]  799 	ldw (YSAVE,sp),y 
      001906                        800 search_next:
      001906 1F 02            [ 2]  801 	ldw (XSAVE,sp),x 
                                    802 ; get name length in dictionary	
      001908 F6               [ 1]  803 	ld a,(x)
      001909 A4 0F            [ 1]  804 	and a,#0xf 
      00190B 6B 01            [ 1]  805 	ld (NLEN,sp),a  
      00190D 16 04            [ 2]  806 	ldw y,(YSAVE,sp) ; name pointer 
      00190F 5C               [ 1]  807 	incw x 
      001910                        808 cp_loop:
      001910 90 F6            [ 1]  809 	ld a,(y)
      001912 27 1B            [ 1]  810 	jreq str_match 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001914 0D 01            [ 1]  811 	tnz (NLEN,sp)
      001916 27 0A            [ 1]  812 	jreq no_match  
      001918 F1               [ 1]  813 	cp a,(x)
      001919 26 07            [ 1]  814 	jrne no_match 
      00191B 90 5C            [ 1]  815 	incw y 
      00191D 5C               [ 1]  816 	incw x
      00191E 0A 01            [ 1]  817 	dec (NLEN,sp)
      001920 20 EE            [ 2]  818 	jra cp_loop 
      001922                        819 no_match:
      001922 1E 02            [ 2]  820 	ldw x,(XSAVE,sp) 
      001924 1D 00 02         [ 2]  821 	subw x,#2 ; move X to link field
      001927 4B 00            [ 1]  822 	push #TK_NONE 
      001929 FE               [ 2]  823 	ldw x,(x) ; next word link 
      00192A 84               [ 1]  824 	pop a ; TK_NONE 
      00192B 27 1F            [ 1]  825 	jreq search_exit  ; not found  
                                    826 ;try next 
      00192D 20 D7            [ 2]  827 	jra search_next
      00192F                        828 str_match:
      00192F 1E 02            [ 2]  829 	ldw x,(XSAVE,sp)
      001931 F6               [ 1]  830 	ld a,(X)
      001932 6B 01            [ 1]  831 	ld (NLEN,sp),a ; needed to test keyword type  
      001934 A4 0F            [ 1]  832 	and a,#0xf 
                                    833 ; move x to procedure address field 	
      001936 4C               [ 1]  834 	inc a 
      001937 C7 00 0E         [ 1]  835 	ld acc8,a 
      00193A 72 5F 00 0D      [ 1]  836 	clr acc16 
      00193E 72 BB 00 0D      [ 2]  837 	addw x,acc16 
      001942 FE               [ 2]  838 	ldw x,(x) ; routine index  
                                    839 ;determine keyword type bits 7:6 
      001943 7B 01            [ 1]  840 	ld a,(NLEN,sp)
      001945 4E               [ 1]  841 	swap a 
      001946 A4 0C            [ 1]  842 	and a,#0xc
      001948 44               [ 1]  843 	srl a
      001949 44               [ 1]  844 	srl a 
      00194A AB 80            [ 1]  845 	add a,#128
      00194C                        846 search_exit: 
      00194C                        847 	_drop VSIZE 
      00194C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00194E 81               [ 4]  848 	ret 
                                    849 
                                    850 ;---------------------
                                    851 ; check if next token
                                    852 ;  is of expected type 
                                    853 ; input:
                                    854 ;   A 		 expected token attribute
                                    855 ;  ouput:
                                    856 ;   none     if fail call syntax_error 
                                    857 ;--------------------
      00194F                        858 expect:
      00194F 88               [ 1]  859 	push a 
      001950 CD 17 A1         [ 4]  860 	call next_token 
      001953 11 01            [ 1]  861 	cp a,(1,sp)
      001955 27 03            [ 1]  862 	jreq 1$
      001957 CC 16 A0         [ 2]  863 	jp syntax_error
      00195A 84               [ 1]  864 1$: pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00195B 81               [ 4]  865 	ret 
                                    866 
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    868 ; parse arguments list 
                                    869 ; between ()
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195C                        871 func_args:
      00195C A6 06            [ 1]  872 	ld a,#TK_LPAREN 
      00195E CD 19 4F         [ 4]  873 	call expect 
                                    874 ; expected to continue in arg_list 
                                    875 ; caller must check for TK_RPAREN 
                                    876 
                                    877 ;-------------------------------
                                    878 ; parse embedded BASIC routines 
                                    879 ; arguments list.
                                    880 ; arg_list::=  expr[','expr]*
                                    881 ; all arguments are of int24_t type
                                    882 ; and pushed on stack 
                                    883 ; input:
                                    884 ;   none
                                    885 ; output:
                                    886 ;   xstack{n}   arguments pushed on xstack
                                    887 ;   A 	number of arguments pushed on xstack  
                                    888 ;--------------------------------
      001961                        889 arg_list:
      001961 4B 00            [ 1]  890 	push #0
      001963 CD 1B 88         [ 4]  891 1$:	call condition 
      001966 4D               [ 1]  892 	tnz a 
      001967 27 09            [ 1]  893 	jreq 6$  
      001969 0C 01            [ 1]  894 	inc (1,sp)
      00196B CD 17 A1         [ 4]  895 	call next_token 
      00196E A1 08            [ 1]  896 	cp a,#TK_COMMA 
      001970 27 F1            [ 1]  897 	jreq 1$ 
      001972 84               [ 1]  898 6$:	pop a  
      001973 81               [ 4]  899 	ret 
                                    900 
                                    901 ;--------------------------------
                                    902 ;   BASIC commnands 
                                    903 ;--------------------------------
                                    904 
                                    905 ;--------------------------------
                                    906 ;  arithmetic and relational 
                                    907 ;  routines
                                    908 ;  operators precedence
                                    909 ;  highest to lowest
                                    910 ;  operators on same row have 
                                    911 ;  same precedence and are executed
                                    912 ;  from left to right.
                                    913 ;	'*','/','%'
                                    914 ;   '-','+'
                                    915 ;   '=','>','<','>=','<=','<>','><'
                                    916 ;   '<>' and '><' are equivalent for not equal.
                                    917 ;--------------------------------
                                    918 
                                    919 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    920 ; return array element
                                    921 ; address from @(expr)
                                    922 ; input:
                                    923 ;   A 		TK_ARRAY
                                    924 ; output:
                                    925 ;	X 		element address 
                                    926 ;----------------------
      001974                        927 get_array_element:
      001974 CD 19 5C         [ 4]  928 	call func_args 
      001977 A1 01            [ 1]  929 	cp a,#1
      001979 27 03            [ 1]  930 	jreq 1$
      00197B CC 16 A0         [ 2]  931 	jp syntax_error
      00197E                        932 1$: _xpop 
      00197E 90 F6            [ 1]    1     ld a,(y)
      001980 93               [ 1]    2     ldw x,y 
      001981 EE 01            [ 2]    3     ldw x,(1,x)
      001983 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    933     ; ignore A, index < 65536 in any case 
                                    934 	; check for bounds 
      001987 C3 00 20         [ 2]  935 	cpw x,array_size 
      00198A 23 05            [ 2]  936 	jrule 3$
                                    937 ; bounds {1..array_size}	
      00198C A6 0A            [ 1]  938 2$: ld a,#ERR_BAD_VALUE 
      00198E CC 16 A2         [ 2]  939 	jp tb_error 
      001991 5D               [ 2]  940 3$: tnzw  x
      001992 27 F8            [ 1]  941 	jreq 2$ 
      001994 89               [ 2]  942 	pushw x 
      001995 58               [ 2]  943 	sllw x 
      001996 72 FB 01         [ 2]  944 	addw x,(1,sp) ; index*size_of(int24)
      001999 1F 01            [ 2]  945 	ldw (1,sp),x  
      00199B AE 16 68         [ 2]  946 	ldw x,#tib ; array is below tib 
      00199E 72 F0 01         [ 2]  947 	subw x,(1,sp)
      0019A1                        948 	_drop 2   
      0019A1 5B 02            [ 2]    1     addw sp,#2 
      0019A3 81               [ 4]  949 	ret 
                                    950 
                                    951 
                                    952 ;***********************************
                                    953 ;   expression parse,execute 
                                    954 ;***********************************
                                    955 ;-----------------------------------
                                    956 ; factor ::= ['+'|'-'|e]  var | @ |
                                    957 ;			 integer | function |
                                    958 ;			 '('relation')' 
                                    959 ; output:
                                    960 ;   A       token attribute 
                                    961 ;   xstack  value  
                                    962 ; ---------------------------------
                           000001   963 	NEG=1
                           000001   964 	VSIZE=1
      0019A4                        965 factor:
      0019A4                        966 	_vars VSIZE 
      0019A4 52 01            [ 2]    1     sub sp,#VSIZE 
      0019A6 0F 01            [ 1]  967 	clr (NEG,sp)
      0019A8 CD 17 A1         [ 4]  968 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0019AB 4D               [ 1]  969 	tnz a 
      0019AC 26 03            [ 1]  970 	jrne 1$ 
      0019AE CC 1A 3D         [ 2]  971 	jp 22$ 
      0019B1 A1 10            [ 1]  972 1$:	cp a,#TK_PLUS 
      0019B3 27 06            [ 1]  973 	jreq 2$
      0019B5 A1 11            [ 1]  974 	cp a,#TK_MINUS 
      0019B7 26 05            [ 1]  975 	jrne 4$ 
      0019B9 03 01            [ 1]  976 	cpl (NEG,sp)
      0019BB                        977 2$:	
      0019BB CD 17 A1         [ 4]  978 	call next_token
      0019BE                        979 4$:
      0019BE 4D               [ 1]  980 	tnz a 
      0019BF 26 03            [ 1]  981 	jrne 41$ 
      0019C1 CC 16 A0         [ 2]  982 	jp syntax_error  
      0019C4                        983 41$:	
      0019C4 A1 81            [ 1]  984 	cp a,#TK_IFUNC 
      0019C6 26 06            [ 1]  985 	jrne 5$ 
      0019C8 CD 17 BA         [ 4]  986 	call get_code_addr 
      0019CB FD               [ 4]  987 	call (x); result in A:X  
      0019CC 20 5D            [ 2]  988 	jra 18$ 
      0019CE                        989 5$:
      0019CE A1 84            [ 1]  990 	cp a,#TK_INTGR
      0019D0 26 05            [ 1]  991 	jrne 6$
      0019D2 CD 17 E0         [ 4]  992 	call get_int24 ; A:X
      0019D5 20 54            [ 2]  993 	jra 18$
      0019D7                        994 6$:
      0019D7 A1 05            [ 1]  995 	cp a,#TK_ARRAY
      0019D9 26 05            [ 1]  996 	jrne 7$
      0019DB CD 19 74         [ 4]  997 	call get_array_element
      0019DE 20 07            [ 2]  998     jra 71$
      0019E0                        999 7$:
      0019E0 A1 85            [ 1] 1000 	cp a,#TK_VAR 
      0019E2 26 08            [ 1] 1001 	jrne 8$
      0019E4 CD 17 D6         [ 4] 1002 	call get_addr 
      0019E7                       1003 71$: ; put value in A:X
      0019E7 F6               [ 1] 1004 	ld a,(x)
      0019E8 EE 01            [ 2] 1005 	ldw x,(1,x)
      0019EA 20 3F            [ 2] 1006 	jra 18$
      0019EC                       1007 8$:
      0019EC A1 03            [ 1] 1008 	cp a,#TK_LABEL 
      0019EE 26 10            [ 1] 1009 	jrne 9$ 
      0019F0 89               [ 2] 1010 	pushw x 
      0019F1 CD 17 C7         [ 4] 1011 	call skip_string
      0019F4 85               [ 2] 1012 	popw x 
      0019F5 CD 1D 41         [ 4] 1013 	call search_const 
      0019F8 5D               [ 2] 1014 	tnzw x 
      0019F9 27 28            [ 1] 1015 	jreq 16$
      0019FB CD 1C 9D         [ 4] 1016 	call get_const_value ; in A:X 
      0019FE 20 2B            [ 2] 1017 	jra 18$
      001A00                       1018 9$: 
      001A00 A1 82            [ 1] 1019 	cp a,#TK_CFUNC 
      001A02 26 08            [ 1] 1020 	jrne 12$
      001A04 CD 17 BA         [ 4] 1021 	call get_code_addr 
      001A07 FD               [ 4] 1022 	call(x)
      001A08 5F               [ 1] 1023 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A09 02               [ 1] 1024 	rlwa x  ; char>int24 in A:X 
      001A0A 20 1F            [ 2] 1025 	jra 18$ 	 
      001A0C                       1026 12$:			
      001A0C A1 06            [ 1] 1027 	cp a,#TK_LPAREN
      001A0E 26 13            [ 1] 1028 	jrne 16$
      001A10 CD 1A 83         [ 4] 1029 	call expression
      001A13 A6 07            [ 1] 1030 	ld a,#TK_RPAREN 
      001A15 CD 19 4F         [ 4] 1031 	call expect
      001A18                       1032 	_xpop 
      001A18 90 F6            [ 1]    1     ld a,(y)
      001A1A 93               [ 1]    2     ldw x,y 
      001A1B EE 01            [ 2]    3     ldw x,(1,x)
      001A1D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A21 20 08            [ 2] 1033 	jra 18$	
      001A23                       1034 16$:
      001A23                       1035 	_unget_token 
      001A23 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A28 4F               [ 1] 1036 	clr a 
      001A29 20 12            [ 2] 1037 	jra 22$ 
      001A2B                       1038 18$: 
      001A2B 0D 01            [ 1] 1039 	tnz (NEG,sp)
      001A2D 27 03            [ 1] 1040 	jreq 20$
      001A2F CD 02 05         [ 4] 1041 	call neg_ax   
      001A32                       1042 20$:
      001A32                       1043 	_xpush 
      001A32 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A36 90 F7            [ 1]    2     ld (y),a 
      001A38 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A3B A6 84            [ 1] 1044 	ld a,#TK_INTGR
      001A3D                       1045 22$:
      001A3D                       1046 	_drop VSIZE
      001A3D 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A3F 81               [ 4] 1047 	ret
                                   1048 
                                   1049 
                                   1050 ;-----------------------------------
                                   1051 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1052 ; output:
                                   1053 ;   A    	token attribute 
                                   1054 ;	xstack		value 
                                   1055 ;-----------------------------------
                           000001  1056 	MULOP=1
                           000001  1057 	VSIZE=1
      001A40                       1058 term:
      001A40                       1059 	_vars VSIZE
      001A40 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1060 ; first factor 	
      001A42 CD 19 A4         [ 4] 1061 	call factor
      001A45 4D               [ 1] 1062 	tnz a 
      001A46 27 38            [ 1] 1063 	jreq term_exit  
      001A48                       1064 term01:	 ; check for  operator '*'|'/'|'%' 
      001A48 CD 17 A1         [ 4] 1065 	call next_token
      001A4B 6B 01            [ 1] 1066 	ld (MULOP,sp),a
      001A4D A4 30            [ 1] 1067 	and a,#TK_GRP_MASK
      001A4F A1 20            [ 1] 1068 	cp a,#TK_GRP_MULT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A51 27 09            [ 1] 1069 	jreq 1$
      001A53 A6 84            [ 1] 1070 	ld a,#TK_INTGR
      001A55                       1071 	_unget_token 
      001A55 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A5A 20 24            [ 2] 1072 	jra term_exit 
      001A5C                       1073 1$:	; got *|/|%
                                   1074 ;second factor
      001A5C CD 19 A4         [ 4] 1075 	call factor
      001A5F 4D               [ 1] 1076 	tnz a 
      001A60 26 03            [ 1] 1077 	jrne 2$ 
      001A62 CC 16 A0         [ 2] 1078 	jp syntax_error 
      001A65                       1079 2$: ; select operation 	
      001A65 7B 01            [ 1] 1080 	ld a,(MULOP,sp) 
      001A67 A1 20            [ 1] 1081 	cp a,#TK_MULT 
      001A69 26 05            [ 1] 1082 	jrne 3$
                                   1083 ; '*' operator
      001A6B CD 02 5D         [ 4] 1084 	call mul24 
      001A6E 20 D8            [ 2] 1085 	jra term01
      001A70 A1 21            [ 1] 1086 3$: cp a,#TK_DIV 
      001A72 26 05            [ 1] 1087 	jrne 4$ 
                                   1088 ; '/' operator	
      001A74 CD 03 27         [ 4] 1089 	call div24 
      001A77 20 CF            [ 2] 1090 	jra term01 
      001A79                       1091 4$: ; '%' operator
      001A79 CD 03 D5         [ 4] 1092 	call mod24
      001A7C 20 CA            [ 2] 1093 	jra term01 
      001A7E                       1094 9$: 
      001A7E A6 84            [ 1] 1095 	ld a,#TK_INTGR
      001A80                       1096 term_exit:
      001A80                       1097 	_drop VSIZE 
      001A80 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A82 81               [ 4] 1098 	ret 
                                   1099 
                                   1100 ;-------------------------------
                                   1101 ;  expr ::= term [['+'|'-'] term]*
                                   1102 ;  result range {-32768..32767}
                                   1103 ;  output:
                                   1104 ;   A    token attribute 
                                   1105 ;   xstack	 result    
                                   1106 ;-------------------------------
                           000001  1107 	OP=1 
                           000001  1108 	VSIZE=1 
      001A83                       1109 expression:
      001A83                       1110 	_vars VSIZE 
      001A83 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1111 ; first term 	
      001A85 CD 1A 40         [ 4] 1112 	call term
      001A88 4D               [ 1] 1113 	tnz a 
      001A89 27 2D            [ 1] 1114 	jreq 9$
      001A8B                       1115 1$:	; operator '+'|'-'
      001A8B CD 17 A1         [ 4] 1116 	call next_token
      001A8E 6B 01            [ 1] 1117 	ld (OP,sp),a 
      001A90 A4 30            [ 1] 1118 	and a,#TK_GRP_MASK
      001A92 A1 10            [ 1] 1119 	cp a,#TK_GRP_ADD 
      001A94 27 09            [ 1] 1120 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A96                       1121 	_unget_token 
      001A96 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A9B A6 84            [ 1] 1122 	ld a,#TK_INTGR
      001A9D 20 19            [ 2] 1123 	jra 9$ 
      001A9F                       1124 2$: ; second term 
      001A9F CD 1A 40         [ 4] 1125 	call term
      001AA2 4D               [ 1] 1126 	tnz a 
      001AA3 26 03            [ 1] 1127 	jrne 3$
      001AA5 CC 16 A0         [ 2] 1128 	jp syntax_error
      001AA8                       1129 3$:
      001AA8 7B 01            [ 1] 1130 	ld a,(OP,sp)
      001AAA A1 10            [ 1] 1131 	cp a,#TK_PLUS 
      001AAC 26 05            [ 1] 1132 	jrne 4$
                                   1133 ; '+' operator	
      001AAE CD 01 6A         [ 4] 1134 	call add24
      001AB1 20 D8            [ 2] 1135 	jra 1$ 
      001AB3                       1136 4$:	; '-' operator 
      001AB3 CD 01 87         [ 4] 1137 	call sub24
      001AB6 20 D3            [ 2] 1138 	jra 1$
      001AB8                       1139 9$:
      001AB8                       1140 	_drop VSIZE 
      001AB8 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ABA 81               [ 4] 1141 	ret 
                                   1142 
                                   1143 ;---------------------------------------------
                                   1144 ; rel ::= expr rel_op expr
                                   1145 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1146 ;  relation return  integer , zero is false 
                                   1147 ;  output:
                                   1148 ;	 xstack		value  
                                   1149 ;---------------------------------------------
                           000001  1150 	RELOP=1
                           000001  1151 	VSIZE=1 
      001ABB                       1152 relation: 
      001ABB                       1153 	_vars VSIZE
      001ABB 52 01            [ 2]    1     sub sp,#VSIZE 
      001ABD CD 1A 83         [ 4] 1154 	call expression
      001AC0 4D               [ 1] 1155 	tnz a 
      001AC1 27 54            [ 1] 1156 	jreq 9$ 
                                   1157 ; expect rel_op or leave 
      001AC3 CD 17 A1         [ 4] 1158 	call next_token 
      001AC6 6B 01            [ 1] 1159 	ld (RELOP,sp),a 
      001AC8 A4 30            [ 1] 1160 	and a,#TK_GRP_MASK
      001ACA A1 30            [ 1] 1161 	cp a,#TK_GRP_RELOP 
      001ACC 27 09            [ 1] 1162 	jreq 2$
      001ACE A6 84            [ 1] 1163 	ld a,#TK_INTGR 
      001AD0                       1164 	_unget_token 
      001AD0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AD5 20 40            [ 2] 1165 	jra 9$ 
      001AD7                       1166 2$:	; expect another expression
      001AD7 CD 1A 83         [ 4] 1167 	call expression
      001ADA 4D               [ 1] 1168 	tnz a 
      001ADB 26 03            [ 1] 1169 	jrne 3$
      001ADD CC 16 A0         [ 2] 1170 	jp syntax_error 
      001AE0                       1171 3$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001AE0 CD 01 A4         [ 4] 1172 	call cp24 
      001AE3                       1173 	_xpop  
      001AE3 90 F6            [ 1]    1     ld a,(y)
      001AE5 93               [ 1]    2     ldw x,y 
      001AE6 EE 01            [ 2]    3     ldw x,(1,x)
      001AE8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AEC 4D               [ 1] 1174 	tnz a 
      001AED 2B 08            [ 1] 1175 	jrmi 4$
      001AEF 26 0C            [ 1] 1176 	jrne 5$
      001AF1 35 02 00 0E      [ 1] 1177 	mov acc8,#2 ; i1==i2
      001AF5 20 0A            [ 2] 1178 	jra 6$ 
      001AF7                       1179 4$: ; i1<i2
      001AF7 35 04 00 0E      [ 1] 1180 	mov acc8,#4 
      001AFB 20 04            [ 2] 1181 	jra 6$
      001AFD                       1182 5$: ; i1>i2
      001AFD 35 01 00 0E      [ 1] 1183 	mov acc8,#1  
      001B01                       1184 6$: ; 0=false, -1=true 
      001B01 5F               [ 1] 1185 	clrw x 
      001B02 C6 00 0E         [ 1] 1186 	ld a, acc8  
      001B05 14 01            [ 1] 1187 	and a,(RELOP,sp)
      001B07 27 03            [ 1] 1188 	jreq 7$
      001B09 53               [ 2] 1189 	cplw x 
      001B0A A6 FF            [ 1] 1190 	ld a,#255 
      001B0C                       1191 7$:	_xpush 
      001B0C 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B10 90 F7            [ 1]    2     ld (y),a 
      001B12 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B15 A6 84            [ 1] 1192 	ld a,#TK_INTGR
      001B17                       1193 9$: 
      001B17                       1194 	_drop VSIZE
      001B17 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B19 81               [ 4] 1195 	ret 
                                   1196 
                                   1197 ;-------------------------------------------
                                   1198 ;  AND factor:   relation | (condition)
                                   1199 ;  output:
                                   1200 ;     A      TK_INTGR|0
                                   1201 ;-------------------------------------------
      001B1A                       1202 and_factor:
      001B1A CD 17 A1         [ 4] 1203 	call next_token  
      001B1D 4D               [ 1] 1204 	tnz a 
      001B1E 27 15            [ 1] 1205 	jreq 8$ 
      001B20 A1 06            [ 1] 1206 	cp a,#TK_LPAREN 
      001B22 26 09            [ 1] 1207 	jrne 1$
      001B24 CD 1B 88         [ 4] 1208 	call condition
      001B27 A6 07            [ 1] 1209 	ld a,#TK_RPAREN 
      001B29 CD 19 4F         [ 4] 1210 	call expect
      001B2C 81               [ 4] 1211 	ret
      001B2D                       1212 1$: _unget_token 
      001B2D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B32 CD 1A BB         [ 4] 1213 	call relation 
      001B35 81               [ 4] 1214 8$: ret 
                                   1215 
                                   1216 
                                   1217 ;--------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   1218 ;  AND operator as priority over OR||XOR 
                                   1219 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1220 ;          
                                   1221 ;  output:
                                   1222 ;     A     TK_INTGR|0
                                   1223 ;    xtack   value 
                                   1224 ;--------------------------------------------
      001B36                       1225 and_cond:
      001B36 CD 1B 1A         [ 4] 1226 	call and_factor
      001B39 4D               [ 1] 1227 	tnz a 
      001B3A 27 4B            [ 1] 1228 	jreq 9$  
      001B3C CD 17 A1         [ 4] 1229 1$: call next_token 
      001B3F 4D               [ 1] 1230 	tnz a 
      001B40 27 43            [ 1] 1231 	jreq 6$ 
      001B42 A1 87            [ 1] 1232 	cp a,#TK_AND 
      001B44 27 07            [ 1] 1233 	jreq 3$
      001B46                       1234 	_unget_token 
      001B46 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B4B 20 38            [ 2] 1235 	jra 6$ 
      001B4D CD 1B 1A         [ 4] 1236 3$:	call and_factor  
      001B50 4D               [ 1] 1237 	tnz a 
      001B51 26 03            [ 1] 1238 	jrne 4$
      001B53 CC 16 A0         [ 2] 1239 	jp syntax_error 
      001B56                       1240 4$:	
      001B56                       1241 	_xpop 
      001B56 90 F6            [ 1]    1     ld a,(y)
      001B58 93               [ 1]    2     ldw x,y 
      001B59 EE 01            [ 2]    3     ldw x,(1,x)
      001B5B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B5F C7 00 0C         [ 1] 1242 	ld acc24,a 
      001B62 CF 00 0D         [ 2] 1243 	ldw acc16,x
      001B65                       1244 	_xpop 
      001B65 90 F6            [ 1]    1     ld a,(y)
      001B67 93               [ 1]    2     ldw x,y 
      001B68 EE 01            [ 2]    3     ldw x,(1,x)
      001B6A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B6E C4 00 0C         [ 1] 1245 	and a,acc24 
      001B71 02               [ 1] 1246 	rlwa x 
      001B72 C4 00 0D         [ 1] 1247 	and a,acc16 
      001B75 02               [ 1] 1248 	rlwa x 
      001B76 C4 00 0E         [ 1] 1249 	and a,acc8 
      001B79 02               [ 1] 1250 	rlwa x
      001B7A                       1251 	_xpush
      001B7A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B7E 90 F7            [ 1]    2     ld (y),a 
      001B80 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B83 20 B7            [ 2] 1252 	jra 1$  
      001B85 A6 84            [ 1] 1253 6$: ld a,#TK_INTGR 
      001B87 81               [ 4] 1254 9$:	ret 	 
                                   1255 
                                   1256 
                                   1257 ;--------------------------------------------
                                   1258 ; condition for IF and UNTIL 
                                   1259 ; operators: OR,XOR 
                                   1260 ; format:  and_cond [ OP and_cond ]* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1261 ; output:
                                   1262 ;    A        INTGR|0 
                                   1263 ;    xstack   value 
                                   1264 ;--------------------------------------------
                           000001  1265 	ATMP=1
                           000002  1266 	OP=2
                           000002  1267 	VSIZE=2 
      001B88                       1268 condition:
      001B88                       1269 	_vars VSIZE 
      001B88 52 02            [ 2]    1     sub sp,#VSIZE 
      001B8A CD 1B 36         [ 4] 1270 	call and_cond
      001B8D 4D               [ 1] 1271 	tnz a 
      001B8E 27 69            [ 1] 1272 	jreq 9$ 
      001B90 CD 17 A1         [ 4] 1273 1$:	call next_token 
      001B93 A1 88            [ 1] 1274 	cp a,#TK_OR 
      001B95 27 0B            [ 1] 1275 	jreq 2$
      001B97 A1 89            [ 1] 1276 	cp a,#TK_XOR
      001B99 27 07            [ 1] 1277 	jreq 2$ 
      001B9B                       1278 	_unget_token 
      001B9B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BA0 20 55            [ 2] 1279 	jra 8$ 
      001BA2 6B 02            [ 1] 1280 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BA4 CD 1B 36         [ 4] 1281 	call and_cond
      001BA7 A1 84            [ 1] 1282 	cp a,#TK_INTGR 
      001BA9 27 03            [ 1] 1283 	jreq 3$
      001BAB CC 16 A0         [ 2] 1284 	jp syntax_error 
      001BAE                       1285 3$:	 
      001BAE                       1286 	_xpop  ; rigth arg 
      001BAE 90 F6            [ 1]    1     ld a,(y)
      001BB0 93               [ 1]    2     ldw x,y 
      001BB1 EE 01            [ 2]    3     ldw x,(1,x)
      001BB3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BB7 C7 00 0C         [ 1] 1287 	ld acc24,a 
      001BBA CF 00 0D         [ 2] 1288 	ldw acc16,x 
      001BBD                       1289 	_xpop  ; left arg  
      001BBD 90 F6            [ 1]    1     ld a,(y)
      001BBF 93               [ 1]    2     ldw x,y 
      001BC0 EE 01            [ 2]    3     ldw x,(1,x)
      001BC2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BC6 6B 01            [ 1] 1290 	ld (ATMP,sp),a 
      001BC8 7B 02            [ 1] 1291 	ld a,(OP,sp)
      001BCA A1 89            [ 1] 1292 	cp a,#TK_XOR 
      001BCC 27 10            [ 1] 1293 	jreq 5$ 
      001BCE                       1294 4$: ; A:X OR acc24   
      001BCE 7B 01            [ 1] 1295 	ld a,(ATMP,sp)
      001BD0 CA 00 0C         [ 1] 1296 	or a,acc24 
      001BD3 02               [ 1] 1297 	rlwa x 
      001BD4 CA 00 0D         [ 1] 1298 	or a,acc16 
      001BD7 02               [ 1] 1299 	rlwa x 
      001BD8 CA 00 0E         [ 1] 1300 	or a,acc8 
      001BDB 02               [ 1] 1301 	rlwa x 
      001BDC 20 0E            [ 2] 1302 	jra 6$  
      001BDE                       1303 5$: ; A:X XOR acc24 
      001BDE 7B 01            [ 1] 1304 	ld a,(ATMP,sp)
      001BE0 C8 00 0C         [ 1] 1305 	xor a,acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001BE3 02               [ 1] 1306 	rlwa x 
      001BE4 C8 00 0D         [ 1] 1307 	xor a,acc16 
      001BE7 02               [ 1] 1308 	rlwa x 
      001BE8 C8 00 0E         [ 1] 1309 	xor a,acc8 
      001BEB 02               [ 1] 1310 	rlwa x 
      001BEC                       1311 6$: _xpush
      001BEC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BF0 90 F7            [ 1]    2     ld (y),a 
      001BF2 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BF5 20 99            [ 2] 1312 	jra 1$ 
      001BF7 A6 84            [ 1] 1313 8$:	ld a,#TK_INTGR 
      001BF9                       1314 9$:	_drop VSIZE 
      001BF9 5B 02            [ 2]    1     addw sp,#VSIZE 
      001BFB 81               [ 4] 1315 	ret 
                                   1316 
                                   1317 
                                   1318 ;--------------------------------------------
                                   1319 ; BASIC: HEX 
                                   1320 ; select hexadecimal base for integer print
                                   1321 ;---------------------------------------------
      001BFC                       1322 hex_base:
      001BFC 35 10 00 0A      [ 1] 1323 	mov base,#16 
      001C00 81               [ 4] 1324 	ret 
                                   1325 
                                   1326 ;--------------------------------------------
                                   1327 ; BASIC: DEC 
                                   1328 ; select decimal base for integer print
                                   1329 ;---------------------------------------------
      001C01                       1330 dec_base:
      001C01 35 0A 00 0A      [ 1] 1331 	mov base,#10
      001C05 81               [ 4] 1332 	ret 
                                   1333 
                                   1334 ;------------------------
                                   1335 ; BASIC: FREE 
                                   1336 ; return free size in RAM 
                                   1337 ; output:
                                   1338 ;   A:x		size 
                                   1339 ;--------------------------
      001C06                       1340 free:
      001C06 90 89            [ 2] 1341 	pushw y 
      001C08 4F               [ 1] 1342 	clr a 
      001C09 AE 16 68         [ 2] 1343 	ldw x,#tib 
      001C0C 90 CE 00 1B      [ 2] 1344 	ldw y,txtbgn 
      001C10 90 A3 36 00      [ 2] 1345 	cpw y,#app_space
      001C14 25 05            [ 1] 1346 	jrult 1$
      001C16 1D 00 80         [ 2] 1347 	subw x,#free_ram 
      001C19 20 04            [ 2] 1348 	jra 2$ 
      001C1B                       1349 1$:	
      001C1B 72 B0 00 1D      [ 2] 1350 	subw x,txtend
      001C1F 90 85            [ 2] 1351 2$:	popw y 
      001C21 81               [ 4] 1352 	ret 
                                   1353 
                                   1354 ;------------------------------
                                   1355 ; BASIC: SIZE 
                                   1356 ; command that print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1357 ; program start addres and size 
                                   1358 ;------------------------------
      001C22                       1359 cmd_size:
      001C22 3B 00 0A         [ 1] 1360 	push base 
      001C25 AE 1E 7B         [ 2] 1361 	ldw x,#PROG_ADDR 
      001C28 CD 09 A1         [ 4] 1362 	call puts 
      001C2B CE 00 1B         [ 2] 1363 	ldw x,txtbgn     
      001C2E 35 10 00 0A      [ 1] 1364 	mov base,#16 
      001C32 CD 17 F6         [ 4] 1365 	call prt_i16
      001C35 32 00 0A         [ 1] 1366 	pop base 
      001C38 AE 1E 8D         [ 2] 1367 	ldw x,#PROG_SIZE 
      001C3B CD 09 A1         [ 4] 1368 	call puts 
      001C3E CE 00 1D         [ 2] 1369 	ldw x,txtend 
      001C41 72 B0 00 1B      [ 2] 1370 	subw x,txtbgn 
      001C45 CD 17 F6         [ 4] 1371 	call prt_i16
      001C48 AE 1E 9E         [ 2] 1372 	ldw x,#STR_BYTES 
      001C4B CD 09 A1         [ 4] 1373 	call puts  
      001C4E 81               [ 4] 1374 	ret 
                                   1375 
                                   1376 
                                   1377 ;------------------------
                                   1378 ; BASIC: UBOUND  
                                   1379 ; return array variable size 
                                   1380 ; and set 'array_size' variable 
                                   1381 ; output:
                                   1382 ;   A:X 	array_size
                                   1383 ;--------------------------
      001C4F                       1384 ubound:
      001C4F CD 1C 06         [ 4] 1385 	call free 
      001C52 A6 03            [ 1] 1386 	ld a,#CELL_SIZE 
      001C54 42               [ 4] 1387 	mul x,a 
      001C55 CF 00 20         [ 2] 1388 	ldw array_size,x
      001C58 4F               [ 1] 1389 	clr a 
      001C59 81               [ 4] 1390 	ret 
                                   1391 
                                   1392 ;-----------------------------
                                   1393 ; BASIC: LET var=expr 
                                   1394 ; variable assignement 
                                   1395 ; output:
                                   1396 ;   A 		TK_NONE 
                                   1397 ;-----------------------------
      001C5A                       1398 let::
      001C5A CD 17 A1         [ 4] 1399 	call next_token 
      001C5D A1 85            [ 1] 1400 	cp a,#TK_VAR 
      001C5F 27 0C            [ 1] 1401 	jreq let_var
      001C61 A1 05            [ 1] 1402 	cp a,#TK_ARRAY 
      001C63 27 03            [ 1] 1403 	jreq  let_array
      001C65 CC 16 A0         [ 2] 1404 	jp syntax_error
      001C68                       1405 let_array:
      001C68 CD 19 74         [ 4] 1406 	call get_array_element
      001C6B 20 03            [ 2] 1407 	jra let_eval 
      001C6D                       1408 let_var:
      001C6D CD 17 D6         [ 4] 1409 	call get_addr
      001C70                       1410 let_eval:
      001C70 CF 00 19         [ 2] 1411 	ldw ptr16,x  ; variable address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C73 CD 17 A1         [ 4] 1412 	call next_token 
      001C76 A1 32            [ 1] 1413 	cp a,#TK_EQUAL
      001C78 27 03            [ 1] 1414 	jreq 1$
      001C7A CC 16 A0         [ 2] 1415 	jp syntax_error
      001C7D                       1416 1$:	
      001C7D CD 1B 88         [ 4] 1417 	call condition   
      001C80 A1 84            [ 1] 1418 	cp a,#TK_INTGR 
      001C82 27 03            [ 1] 1419 	jreq 2$
      001C84 CC 16 A0         [ 2] 1420 	jp syntax_error
      001C87                       1421 2$:	
      001C87                       1422 	_xpop ; value 
      001C87 90 F6            [ 1]    1     ld a,(y)
      001C89 93               [ 1]    2     ldw x,y 
      001C8A EE 01            [ 2]    3     ldw x,(1,x)
      001C8C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C90                       1423 3$:
      001C90 72 C7 00 19      [ 4] 1424 	ld [ptr16],a
      001C94 72 5C 00 1A      [ 1] 1425 	inc ptr8  
      001C98 72 CF 00 19      [ 5] 1426 	ldw [ptr16],x 
      001C9C 81               [ 4] 1427 	ret 
                                   1428 
                                   1429 
                                   1430 ;--------------------------
                                   1431 ; return constant value 
                                   1432 ; from it's record address
                                   1433 ; input:
                                   1434 ;	X	*const record 
                                   1435 ; output:
                                   1436 ;   A:X   const  value
                                   1437 ;--------------------------
      001C9D                       1438 get_const_value: ; -- i 
      001C9D F6               [ 1] 1439 	ld a,(x) ; record size 
      001C9E A0 03            [ 1] 1440 	sub a,#3 ; * value 
      001CA0 88               [ 1] 1441 	push a 
      001CA1 4B 00            [ 1] 1442 	push #0 
      001CA3 72 FB 01         [ 2] 1443 	addw x,(1,sp)
      001CA6 F6               [ 1] 1444 	ld a,(x)
      001CA7 EE 01            [ 2] 1445 	ldw x,(1,x)
      001CA9                       1446 	_drop 2
      001CA9 5B 02            [ 2]    1     addw sp,#2 
      001CAB 81               [ 4] 1447 	ret 
                                   1448 
                                   1449 
                                   1450 ;--------------------------
                                   1451 ; list constants in EEPROM 
                                   1452 ; call when using LIST \C 
                                   1453 ;-------------------------
                           000001  1454 	COUNT=1
                           000003  1455 	YTEMP=3
                           000004  1456 	VSIZE=4 
      001CAC                       1457 list_const:
      001CAC 90 89            [ 2] 1458 	pushw y 
      001CAE                       1459 	_vars 4 
      001CAE 52 04            [ 2]    1     sub sp,#4 
      001CB0 5F               [ 1] 1460 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001CB1 1F 01            [ 2] 1461 	ldw (COUNT,sp),x  
      001CB3 90 AE 40 00      [ 2] 1462 	ldw Y,#EEPROM_BASE 
      001CB7 90 C3 00 24      [ 2] 1463 1$:	cpw y,free_eeprom 
      001CBB 24 35            [ 1] 1464 	jruge 9$
      001CBD 17 03            [ 2] 1465     ldw (YTEMP,sp),y 
      001CBF 93               [ 1] 1466 	ldw x,y
      001CC0 5C               [ 1] 1467 	incw x 
      001CC1 CD 09 A1         [ 4] 1468 	call puts  
      001CC4 A6 3D            [ 1] 1469 	ld a,#'= 
      001CC6 CD 09 44         [ 4] 1470 	call putc 
      001CC9 1E 03            [ 2] 1471 	ldw x,(YTEMP,sp)
      001CCB CD 1C 9D         [ 4] 1472 	call get_const_value 
      001CCE C7 00 0C         [ 1] 1473 	ld acc24,a 
      001CD1 CF 00 0D         [ 2] 1474 	ldw acc16,x 
      001CD4 CD 18 0D         [ 4] 1475 	call prt_acc24
      001CD7 A6 0D            [ 1] 1476 	ld a,#CR 
      001CD9 CD 09 44         [ 4] 1477 	call putc 
      001CDC 1E 01            [ 2] 1478 	ldw x,(COUNT,sp)
      001CDE 5C               [ 1] 1479 	incw x 
      001CDF 1F 01            [ 2] 1480 	ldw (COUNT,sp),x 
      001CE1 72 5F 00 0D      [ 1] 1481 	clr acc16 
      001CE5 16 03            [ 2] 1482 	ldw y,(YTEMP,sp)
      001CE7 90 F6            [ 1] 1483 	ld a,(y)
      001CE9 C7 00 0E         [ 1] 1484 	ld acc8,a
      001CEC 72 B9 00 0D      [ 2] 1485 	addw y,acc16 
      001CF0 20 C5            [ 2] 1486 	jra 1$ 
      001CF2                       1487 9$:	
      001CF2 1E 01            [ 2] 1488 	ldw x,(COUNT,sp)
      001CF4 CD 17 F6         [ 4] 1489 	call prt_i16 
      001CF7 AE 1D 02         [ 2] 1490 	ldw x,#CONST_COUNT 
      001CFA CD 09 A1         [ 4] 1491 	call puts 
      001CFD                       1492 	_drop VSIZE 
      001CFD 5B 04            [ 2]    1     addw sp,#VSIZE 
      001CFF 90 85            [ 2] 1493 	popw y 
      001D01 81               [ 4] 1494 	ret 
                                   1495 
      001D02 20 63 6F 6E 73 74 61  1496 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1497 
                                   1498 
                                   1499 ;--------------------------
                                   1500 ; BASIC: EEFREE 
                                   1501 ; eeprom_free 
                                   1502 ; search end of data  
                                   1503 ; in EEPROM 
                                   1504 ; input:
                                   1505 ;    none 
                                   1506 ; output:
                                   1507 ;    A:X     address free
                                   1508 ;-------------------------
      001D18                       1509 func_eefree:
      001D18 AE 40 00         [ 2] 1510 	ldw x,#EEPROM_BASE 
      001D1B 35 08 00 0E      [ 1] 1511 1$:	mov acc8,#8 ; count 8 consecutive zeros
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001D1F A3 47 F8         [ 2] 1512     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D22 24 17            [ 1] 1513 	jruge 8$ ; no free space 
      001D24 F6               [ 1] 1514 2$: ld a,(x)
      001D25 26 0C            [ 1] 1515 	jrne 3$
      001D27 5C               [ 1] 1516 	incw x 
      001D28 72 5A 00 0E      [ 1] 1517 	dec acc8 
      001D2C 26 F6            [ 1] 1518 	jrne 2$
      001D2E 1D 00 08         [ 2] 1519 	subw x,#8 
      001D31 20 09            [ 2] 1520 	jra 9$  
      001D33 F6               [ 1] 1521 3$: ld a,(x)
      001D34 5C               [ 1] 1522 	incw x
      001D35 4D               [ 1] 1523 	tnz a  
      001D36 26 FB            [ 1] 1524 	jrne 3$
      001D38 5A               [ 2] 1525 	decw x   
      001D39 20 E0            [ 2] 1526 	jra 1$ 
      001D3B 5F               [ 1] 1527 8$: clrw x ; no free space 
      001D3C 4F               [ 1] 1528 9$: clr a 
      001D3D CF 00 24         [ 2] 1529 	ldw free_eeprom,x ; save in system variable 
      001D40 81               [ 4] 1530 	ret 
                                   1531 
                           000005  1532 CONST_REC_XTRA_BYTES=5 
                                   1533 ;--------------------------
                                   1534 ; search constant name 
                                   1535 ; format of constant record  
                                   1536 ;   .byte record length 
                                   1537 ;         = strlen(name)+5 
                                   1538 ;   .asciz name (variable length)
                                   1539 ;   .int24 value (3 bytes )
                                   1540 ; a constant record use 7+ bytes
                                   1541 ; constants are saved in EEPROM  
                                   1542 ; input:
                                   1543 ;    X     *name
                                   1544 ; output:
                                   1545 ;    X     address|0
                                   1546 ; use:
                                   1547 ;   A,Y, acc16 
                                   1548 ;-------------------------
                           000001  1549 	NAMEPTR=1 ; target name pointer 
                           000003  1550 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1551 	RECLEN=5  ; record length of target
                           000005  1552 	VSIZE=5
      001D41                       1553 search_const:
      001D41 90 89            [ 2] 1554 	pushw y 
      001D43                       1555 	_vars VSIZE
      001D43 52 05            [ 2]    1     sub sp,#VSIZE 
      001D45 72 5F 00 0D      [ 1] 1556 	clr acc16 
      001D49 CD 13 E4         [ 4] 1557 	call strlen 
      001D4C AB 05            [ 1] 1558 	add a,#CONST_REC_XTRA_BYTES
      001D4E 6B 05            [ 1] 1559 	ld (RECLEN,sp),a    
      001D50 1F 01            [ 2] 1560 	ldw (NAMEPTR,sp),x
      001D52 90 AE 40 00      [ 2] 1561 	ldw y,#EEPROM_BASE 
      001D56 1E 01            [ 2] 1562 1$:	ldw x,(NAMEPTR,sp)
      001D58 17 03            [ 2] 1563 	ldw (EEPTR,sp),y
      001D5A 90 C3 00 24      [ 2] 1564 	cpw y, free_eeprom 
      001D5E 24 1A            [ 1] 1565 	jruge 7$ ; no match found 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D60 90 F6            [ 1] 1566 	ld a,(y)
      001D62 11 05            [ 1] 1567 	cp a,(RECLEN,sp)
      001D64 26 07            [ 1] 1568 	jrne 2$ 
      001D66 90 5C            [ 1] 1569 	incw y 
      001D68 CD 13 EF         [ 4] 1570 	call strcmp
      001D6B 26 11            [ 1] 1571 	jrne 8$ ; match found 
      001D6D                       1572 2$: ; skip this one 	
      001D6D 16 03            [ 2] 1573 	ldW Y,(EEPTR,sp)
      001D6F 90 F6            [ 1] 1574 	ld a,(y)
      001D71 C7 00 0E         [ 1] 1575 	ld acc8,a 
      001D74 72 B9 00 0D      [ 2] 1576 	addw y,acc16 
      001D78 20 DC            [ 2] 1577 	jra 1$  
      001D7A                       1578 7$: ; no match found 
      001D7A 0F 03            [ 1] 1579 	clr (EEPTR,sp)
      001D7C 0F 04            [ 1] 1580 	clr (EEPTR+1,sp)
      001D7E                       1581 8$: ; match found 
      001D7E 1E 03            [ 2] 1582 	ldw x,(EEPTR,sp) ; record address 
      001D80                       1583 9$:	_DROP VSIZE
      001D80 5B 05            [ 2]    1     addw sp,#VSIZE 
      001D82 90 85            [ 2] 1584 	 popw y 
      001D84 81               [ 4] 1585 	 ret 
                                   1586 
                                   1587 
                                   1588 ;--------------------------------------------
                                   1589 ; BASIC: CONST name=value [, name=value]*
                                   1590 ; define constant(s) saved in EEPROM
                                   1591 ;--------------------------------------------
                           000001  1592 	CNAME=1 
                           000003  1593 	BUFPTR=3
                           000005  1594 	RECLEN=5
                           000006  1595 	UPDATE=6
                           000007  1596 	YSAVE=7
                           000008  1597 	VSIZE=8 
      001D85                       1598 cmd_const:
      001D85 90 89            [ 2] 1599 	pushw y 
      001D87                       1600 	_vars VSIZE 
      001D87 52 08            [ 2]    1     sub sp,#VSIZE 
      001D89 0F 06            [ 1] 1601 	clr (UPDATE,sp)
      001D8B CD 17 A1         [ 4] 1602 	call next_token 
      001D8E A1 04            [ 1] 1603 	cp a,#TK_CHAR 
      001D90 26 0D            [ 1] 1604 	jrne 0$
      001D92 CD 17 F0         [ 4] 1605 	call get_char 
      001D95 A4 DF            [ 1] 1606 	and a,#0xDF 
      001D97 A1 55            [ 1] 1607 	cp a,#'U 
      001D99 26 08            [ 1] 1608 	jrne 1$
      001D9B 03 06            [ 1] 1609 	cpl (UPDATE,sp)
      001D9D 20 07            [ 2] 1610 	jra const_loop 
      001D9F A1 03            [ 1] 1611 0$: cp a,#TK_LABEL 
      001DA1 27 08            [ 1] 1612 	jreq cloop_1
      001DA3 CC 16 A0         [ 2] 1613 1$: jp syntax_error
      001DA6                       1614 const_loop: 
      001DA6 A6 03            [ 1] 1615 	ld a,#TK_LABEL 
      001DA8 CD 19 4F         [ 4] 1616 	call expect  
      001DAB                       1617 cloop_1: 
      001DAB 1F 01            [ 2] 1618 	ldw (CNAME,sp),x ; *const_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001DAD CD 17 C7         [ 4] 1619 	call skip_string
      001DB0 1E 01            [ 2] 1620 	ldw x,(CNAME,sp)
      001DB2 CD 13 E4         [ 4] 1621 	call strlen  
      001DB5 AB 05            [ 1] 1622 	add a,#CONST_REC_XTRA_BYTES 
      001DB7 6B 05            [ 1] 1623 	ld (RECLEN,sp),a 
                                   1624 ; copy name in buffer  
      001DB9 16 01            [ 2] 1625 	ldw y,(CNAME,sp) 
      001DBB AE 16 68         [ 2] 1626 	ldw x,#tib  
      001DBE 7B 05            [ 1] 1627 	ld a,(RECLEN,sp)
      001DC0 F7               [ 1] 1628 	ld (x),a 
      001DC1 5C               [ 1] 1629 	incw x  
      001DC2 CD 14 00         [ 4] 1630 	call strcpy 
      001DC5 1F 03            [ 2] 1631 	ldw (BUFPTR,sp),x 
                                   1632 ; x not updated by strcpy 
                                   1633 ; BUFPTR must be incremented 
                                   1634 ; to point after name 
      001DC7 5F               [ 1] 1635 	clrw x 
      001DC8 7B 05            [ 1] 1636 	ld a,(RECLEN,sp)
      001DCA A0 04            [ 1] 1637 	sub a,#CONST_REC_XTRA_BYTES-1
      001DCC 97               [ 1] 1638 	ld xl,a  
      001DCD 72 FB 03         [ 2] 1639 	addw x,(BUFPTR,sp)
      001DD0 1F 03            [ 2] 1640 	ldw (BUFPTR,sp),x 
      001DD2 A6 32            [ 1] 1641 	ld a,#TK_EQUAL 
      001DD4 CD 19 4F         [ 4] 1642 	call expect 
      001DD7 16 07            [ 2] 1643 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001DD9 CD 1A 83         [ 4] 1644 	call expression 
      001DDC A1 84            [ 1] 1645 	cp a,#TK_INTGR 
      001DDE 27 03            [ 1] 1646 	jreq 5$ 
      001DE0 CC 16 A0         [ 2] 1647 	jp syntax_error 
      001DE3                       1648 5$:	_xpop 
      001DE3 90 F6            [ 1]    1     ld a,(y)
      001DE5 93               [ 1]    2     ldw x,y 
      001DE6 EE 01            [ 2]    3     ldw x,(1,x)
      001DE8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001DEC 17 07            [ 2] 1649 	ldw (YSAVE,sp),y ; save xtack pointer 
      001DEE 16 03            [ 2] 1650 	ldw y,(BUFPTR,sp)
      001DF0 90 F7            [ 1] 1651 	ld (y),a 
      001DF2 90 EF 01         [ 2] 1652 	ldw (1,y),x 
                                   1653 ; record completed in buffer 
                                   1654 ; check if constant already exist 
                                   1655 ; if exist and \U option then update  
      001DF5 72 5F 00 18      [ 1] 1656 	clr farptr 
      001DF9 1E 01            [ 2] 1657 	ldw x,(CNAME,sp)
      001DFB CD 1D 41         [ 4] 1658 	call search_const 
      001DFE 5D               [ 2] 1659 	tnzw x 
      001DFF 27 06            [ 1] 1660 	jreq 6$ ; new constant  
      001E01 0D 06            [ 1] 1661 	tnz (UPDATE,sp)
      001E03 27 1B            [ 1] 1662 	jreq 8$ 
      001E05 20 03            [ 2] 1663 	jra 7$	
      001E07                       1664 6$:	
      001E07 CE 00 24         [ 2] 1665 	ldw x,free_eeprom  
      001E0A                       1666 7$:	
      001E0A CF 00 19         [ 2] 1667 	ldw farptr+1,x 
      001E0D AE 16 68         [ 2] 1668 	ldw x,#tib 
      001E10 7B 05            [ 1] 1669 	ld a,(RECLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001E12 CD 08 85         [ 4] 1670 	call write_nbytes
                                   1671 ; update free_eeprom 
      001E15 5F               [ 1] 1672 	clrw x 
      001E16 7B 05            [ 1] 1673 	ld a,(RECLEN,sp)
      001E18 97               [ 1] 1674 	ld xl,a 
      001E19 72 BB 00 24      [ 2] 1675 	addw x,free_eeprom 
      001E1D CF 00 24         [ 2] 1676 	ldw free_eeprom,x
      001E20                       1677 8$: ; check for next constant 
      001E20 CD 17 A1         [ 4] 1678 	call next_token 
      001E23 A1 08            [ 1] 1679 	cp a,#TK_COMMA 
      001E25 26 03            [ 1] 1680 	jrne 9$ ; no other constant 
      001E27 CC 1D A6         [ 2] 1681 	jp const_loop 
      001E2A                       1682 9$: 
      001E2A                       1683 	_unget_token    
      001E2A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E2F                       1684 10$: 
      001E2F                       1685 	_drop VSIZE 
      001E2F 5B 08            [ 2]    1     addw sp,#VSIZE 
      001E31 90 85            [ 2] 1686 	popw y ; restore xstack pointer 
      001E33 81               [ 4] 1687 	ret 
                                   1688 
                                   1689 
                                   1690 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1691 ; return program size 
                                   1692 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E34                       1693 prog_size:
      001E34 CE 00 1D         [ 2] 1694 	ldw x,txtend 
      001E37 72 B0 00 1B      [ 2] 1695 	subw x,txtbgn 
      001E3B 81               [ 4] 1696 	ret 
                                   1697 
                                   1698 ;----------------------------
                                   1699 ; print program information 
                                   1700 ;---------------------------
      001E3C                       1701 program_info: 
      001E3C AE 1E 7B         [ 2] 1702 	ldw x,#PROG_ADDR 
      001E3F CD 09 A1         [ 4] 1703 	call puts 
      001E42 CE 00 1B         [ 2] 1704 	ldw x,txtbgn 
      001E45 35 10 00 0A      [ 1] 1705 	mov base,#16 
      001E49 CD 17 F6         [ 4] 1706 	call prt_i16
      001E4C 35 0A 00 0A      [ 1] 1707 	mov base,#10  
      001E50 AE 1E 8D         [ 2] 1708 	ldw x,#PROG_SIZE
      001E53 CD 09 A1         [ 4] 1709 	call puts 
      001E56 CD 1E 34         [ 4] 1710 	call prog_size 
      001E59 CD 17 F6         [ 4] 1711 	call prt_i16 
      001E5C AE 1E 9E         [ 2] 1712 	ldw x,#STR_BYTES 
      001E5F CD 09 A1         [ 4] 1713 	call puts
      001E62 CE 00 1B         [ 2] 1714 	ldw x,txtbgn
      001E65 A3 36 04         [ 2] 1715 	cpw x,#app 
      001E68 25 05            [ 1] 1716 	jrult 2$
      001E6A AE 1E A5         [ 2] 1717 	ldw x,#FLASH_MEM 
      001E6D 20 03            [ 2] 1718 	jra 3$
      001E6F AE 1E B6         [ 2] 1719 2$: ldw x,#RAM_MEM 	 
      001E72 CD 09 A1         [ 4] 1720 3$:	call puts 
      001E75 A6 0D            [ 1] 1721 	ld a,#CR 
      001E77 CD 09 44         [ 4] 1722 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E7A 81               [ 4] 1723 	ret 
                                   1724 
      001E7B 70 72 6F 67 72 61 6D  1725 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E8D 2C 20 70 72 6F 67 72  1726 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001E9E 20 62 79 74 65 73 00  1727 STR_BYTES: .asciz " bytes" 
      001EA5 20 69 6E 20 46 4C 41  1728 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001EB6 20 69 6E 20 52 41 4D  1729 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1730 
                                   1731 
                                   1732 ;----------------------------
                                   1733 ; BASIC: LIST [[start][,end]]
                                   1734 ; list program lines 
                                   1735 ; form start to end 
                                   1736 ; if empty argument list then 
                                   1737 ; list all.
                                   1738 ;----------------------------
                           000001  1739 	FIRST=1
                           000003  1740 	LAST=3 
                           000005  1741 	LN_PTR=5
                           000006  1742 	VSIZE=6 
      001EC5                       1743 list:
      001EC5 72 01 00 22 05   [ 2] 1744 	btjf flags,#FRUN,0$
      001ECA A6 07            [ 1] 1745 	ld a,#ERR_CMD_ONLY
      001ECC CC 16 A2         [ 2] 1746 	jp tb_error
      001ECF                       1747 0$:	 
      001ECF CD 17 A1         [ 4] 1748 	call next_token 
      001ED2 A1 04            [ 1] 1749 	cp a,#TK_CHAR 
      001ED4 26 10            [ 1] 1750 	jrne 2$
      001ED6 CD 17 F0         [ 4] 1751 	call get_char 
      001ED9 A4 DF            [ 1] 1752 	and a,#0xDF 
      001EDB A1 43            [ 1] 1753 	cp a,#'C 
      001EDD 26 04            [ 1] 1754 	jrne 1$
      001EDF CD 1C AC         [ 4] 1755 	call list_const
      001EE2 81               [ 4] 1756 	ret 
      001EE3 CC 16 A0         [ 2] 1757 1$: jp syntax_error 
      001EE6                       1758 2$:	_unget_token 
      001EE6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001EEB CD 1E 34         [ 4] 1759 	call prog_size 
      001EEE 22 01            [ 1] 1760 	jrugt 3$
      001EF0 81               [ 4] 1761 	ret 
      001EF1                       1762 3$: _vars VSIZE
      001EF1 52 06            [ 2]    1     sub sp,#VSIZE 
      001EF3 CE 00 1B         [ 2] 1763 	ldw x,txtbgn 
      001EF6 1F 05            [ 2] 1764 	ldw (LN_PTR,sp),x 
      001EF8 FE               [ 2] 1765 	ldw x,(x) 
      001EF9 1F 01            [ 2] 1766 	ldw (FIRST,sp),x ; list from first line 
      001EFB AE 7F FF         [ 2] 1767 	ldw x,#MAX_LINENO ; biggest line number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001EFE 1F 03            [ 2] 1768 	ldw (LAST,sp),x 
      001F00 CD 19 61         [ 4] 1769 	call arg_list
      001F03 4D               [ 1] 1770 	tnz a
      001F04 27 31            [ 1] 1771 	jreq list_loop 
      001F06 A1 02            [ 1] 1772 	cp a,#2 
      001F08 27 07            [ 1] 1773 	jreq 4$
      001F0A A1 01            [ 1] 1774 	cp a,#1 
      001F0C 27 06            [ 1] 1775 	jreq first_line 
      001F0E CC 16 A0         [ 2] 1776 	jp syntax_error 
      001F11 85               [ 2] 1777 4$:	popw x 
      001F12 1F 05            [ 2] 1778 	ldw (LAST+2,sp),x 
      001F14                       1779 first_line:
      001F14 85               [ 2] 1780 	popw x
      001F15 1F 01            [ 2] 1781 	ldw (FIRST,sp),x 
      001F17                       1782 lines_skip:
      001F17 CE 00 1B         [ 2] 1783 	ldw x,txtbgn
      001F1A 1F 05            [ 2] 1784 2$:	ldw (LN_PTR,sp),x 
      001F1C C3 00 1D         [ 2] 1785 	cpw x,txtend 
      001F1F 2A 38            [ 1] 1786 	jrpl list_exit 
      001F21 FE               [ 2] 1787 	ldw x,(x) ;line# 
      001F22 13 01            [ 2] 1788 	cpw x,(FIRST,sp)
      001F24 2A 11            [ 1] 1789 	jrpl list_loop 
      001F26 1E 05            [ 2] 1790 	ldw x,(LN_PTR,sp) 
      001F28 E6 02            [ 1] 1791 	ld a,(2,x)
      001F2A C7 00 0E         [ 1] 1792 	ld acc8,a 
      001F2D 72 5F 00 0D      [ 1] 1793 	clr acc16 
      001F31 72 BB 00 0D      [ 2] 1794 	addw x,acc16
      001F35 20 E3            [ 2] 1795 	jra 2$ 
                                   1796 ; print loop
      001F37                       1797 list_loop:
      001F37 1E 05            [ 2] 1798 	ldw x,(LN_PTR,sp)
      001F39 E6 02            [ 1] 1799 	ld a,(2,x) 
      001F3B CD 1F AE         [ 4] 1800 	call prt_basic_line
      001F3E 1E 05            [ 2] 1801 	ldw x,(LN_PTR,sp)
      001F40 E6 02            [ 1] 1802 	ld a,(2,x)
      001F42 C7 00 0E         [ 1] 1803 	ld acc8,a 
      001F45 72 5F 00 0D      [ 1] 1804 	clr acc16 
      001F49 72 BB 00 0D      [ 2] 1805 	addw x,acc16
      001F4D C3 00 1D         [ 2] 1806 	cpw x,txtend 
      001F50 2A 07            [ 1] 1807 	jrpl list_exit
      001F52 1F 05            [ 2] 1808 	ldw (LN_PTR,sp),x
      001F54 FE               [ 2] 1809 	ldw x,(x)
      001F55 13 03            [ 2] 1810 	cpw x,(LAST,sp)  
      001F57 2F DE            [ 1] 1811 	jrslt list_loop
      001F59                       1812 list_exit:
      001F59 55 00 03 00 01   [ 1] 1813 	mov in,count 
      001F5E AE 16 B8         [ 2] 1814 	ldw x,#pad 
      001F61 CF 00 04         [ 2] 1815 	ldw basicptr,x 
      001F64                       1816 	_drop VSIZE 
      001F64 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F66 CD 1E 3C         [ 4] 1817 	call program_info 
      001F69 81               [ 4] 1818 	ret
                                   1819 
                                   1820 
                                   1821 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   1822 ; BASIC: EDIT 
                                   1823 ;  copy program in FLASH 
                                   1824 ;  to RAM for edition 
                                   1825 ;-------------------------
      001F6A                       1826 edit:
      001F6A CD 27 8E         [ 4] 1827 	call qsign 
      001F6D 27 07            [ 1] 1828 	jreq 1$ 
      001F6F AE 1F 97         [ 2] 1829 	ldw x,#NOT_SAVED 
      001F72 CD 09 A1         [ 4] 1830 	call puts 
      001F75 81               [ 4] 1831 	ret 
      001F76                       1832 1$: 
      001F76 90 AE 36 00      [ 2] 1833 	ldw y,#app_sign ; source address 
      001F7A CE 36 02         [ 2] 1834     ldw x,app_size  
      001F7D 1C 00 04         [ 2] 1835 	addw x,#4 
      001F80 CF 00 0D         [ 2] 1836 	ldw acc16,x  ; bytes to copy 
      001F83 AE 00 7C         [ 2] 1837 	ldw x,#rsign ; destination address 
      001F86 CD 14 10         [ 4] 1838 	call move  
      001F89 AE 00 80         [ 2] 1839 	ldw x,#free_ram 
      001F8C CF 00 1B         [ 2] 1840 	ldw txtbgn,x 
      001F8F 72 BB 00 7E      [ 2] 1841 	addw x,rsize  
      001F93 CF 00 1D         [ 2] 1842 	ldw txtend,x 
      001F96 81               [ 4] 1843 	ret 
                                   1844 
      001F97 4E 6F 20 61 70 70 6C  1845 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1846 
                                   1847 
                                   1848 ;--------------------------
                                   1849 ; decompile line from token list
                                   1850 ; and print it. 
                                   1851 ; input:
                                   1852 ;   A       stop at this position 
                                   1853 ;   X 		pointer at line
                                   1854 ; output:
                                   1855 ;   none 
                                   1856 ;--------------------------	
      001FAE                       1857 prt_basic_line:
      001FAE 90 89            [ 2] 1858 	pushw y 
      001FB0 C7 00 03         [ 1] 1859 	ld count,a 
      001FB3 E6 02            [ 1] 1860 	ld a,(2,x)
      001FB5 C1 00 03         [ 1] 1861 	cp a,count 
      001FB8 2A 03            [ 1] 1862 	jrpl 1$ 
      001FBA C7 00 03         [ 1] 1863 	ld count,a 
      001FBD CF 00 04         [ 2] 1864 1$:	ldw basicptr,x 
      001FC0 90 AE 16 68      [ 2] 1865 	ldw y,#tib  
      001FC4 CD 12 08         [ 4] 1866 	call decompile 
      001FC7 CD 09 A1         [ 4] 1867 	call puts 
      001FCA A6 0D            [ 1] 1868 	ld a,#CR 
      001FCC CD 09 44         [ 4] 1869 	call putc 
      001FCF 90 85            [ 2] 1870 	popw y 
      001FD1 81               [ 4] 1871 	ret 
                                   1872 
                                   1873 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   1874 ;---------------------------------
                                   1875 ; BASIC: PRINT|? arg_list 
                                   1876 ; print values from argument list
                                   1877 ;----------------------------------
                           000001  1878 	CCOMMA=1
                           000001  1879 	VSIZE=1
      001FD2                       1880 print:
      001FD2                       1881 	_vars VSIZE 
      001FD2 52 01            [ 2]    1     sub sp,#VSIZE 
      001FD4                       1882 reset_comma:
      001FD4 0F 01            [ 1] 1883 	clr (CCOMMA,sp)
      001FD6                       1884 prt_loop:
      001FD6 CD 17 A1         [ 4] 1885 	call next_token
      001FD9 A1 02            [ 1] 1886 	cp a,#CMD_END 
      001FDB 25 08            [ 1] 1887 	jrult 0$
      001FDD A1 0A            [ 1] 1888 	cp a,#TK_COLON 
      001FDF 27 04            [ 1] 1889 	jreq 0$
      001FE1 A1 80            [ 1] 1890 	cp a,#TK_CMD
      001FE3 26 07            [ 1] 1891 	jrne 10$
      001FE5                       1892 0$:
      001FE5                       1893 	_unget_token 
      001FE5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FEA 20 5D            [ 2] 1894 	jra 8$ 
      001FEC                       1895 10$:	
      001FEC A1 02            [ 1] 1896 	cp a,#TK_QSTR
      001FEE 27 12            [ 1] 1897 	jreq 1$
      001FF0 A1 04            [ 1] 1898 	cp a,#TK_CHAR 
      001FF2 27 1B            [ 1] 1899 	jreq 2$ 
      001FF4 A1 82            [ 1] 1900 	cp a,#TK_CFUNC 
      001FF6 27 1F            [ 1] 1901 	jreq 3$
      001FF8 A1 08            [ 1] 1902 	cp a,#TK_COMMA 
      001FFA 27 24            [ 1] 1903 	jreq 4$
      001FFC A1 09            [ 1] 1904 	cp a,#TK_SHARP 
      001FFE 27 24            [ 1] 1905 	jreq 5$
      002000 20 37            [ 2] 1906 	jra 7$ 
      002002                       1907 1$:	; print string 
      002002 CD 09 A1         [ 4] 1908 	call puts
      002005 5C               [ 1] 1909 	incw x
      002006 72 B0 00 04      [ 2] 1910 	subw x,basicptr 
      00200A CF 00 00         [ 2] 1911 	ldw in.w,x  
      00200D 20 C5            [ 2] 1912 	jra reset_comma
      00200F                       1913 2$:	; print character 
      00200F CD 17 F0         [ 4] 1914 	call get_char 
      002012 CD 09 44         [ 4] 1915 	call putc 
      002015 20 BD            [ 2] 1916 	jra reset_comma 
      002017                       1917 3$: ; print character function value  	
      002017 CD 17 BA         [ 4] 1918 	call get_code_addr 
      00201A FD               [ 4] 1919 	call (x)
      00201B CD 09 44         [ 4] 1920 	call putc
      00201E 20 B4            [ 2] 1921 	jra reset_comma 
      002020                       1922 4$: ; set comma state 
      002020 03 01            [ 1] 1923 	cpl (CCOMMA,sp)
      002022 20 B2            [ 2] 1924 	jra prt_loop   
      002024                       1925 5$: ; # character must be followed by an integer   
      002024 CD 17 A1         [ 4] 1926 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002027 A1 84            [ 1] 1927 	cp a,#TK_INTGR 
      002029 27 03            [ 1] 1928 	jreq 6$
      00202B CC 16 A0         [ 2] 1929 	jp syntax_error 
      00202E                       1930 6$: ; set tab width
      00202E CD 17 E0         [ 4] 1931 	call get_int24 
      002031 9F               [ 1] 1932 	ld a,xl 
      002032 A4 0F            [ 1] 1933 	and a,#15 
      002034 C7 00 23         [ 1] 1934 	ld tab_width,a 
      002037 20 9B            [ 2] 1935 	jra reset_comma 
      002039                       1936 7$:	
      002039                       1937 	_unget_token 
      002039 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00203E CD 1B 88         [ 4] 1938 	call condition
      002041 4D               [ 1] 1939 	tnz a 
      002042 27 05            [ 1] 1940 	jreq 8$    
      002044 CD 18 1B         [ 4] 1941     call print_top
      002047 20 8B            [ 2] 1942 	jra reset_comma 
      002049                       1943 8$:
      002049 0D 01            [ 1] 1944 	tnz (CCOMMA,sp)
      00204B 26 05            [ 1] 1945 	jrne 9$
      00204D A6 0D            [ 1] 1946 	ld a,#CR 
      00204F CD 09 44         [ 4] 1947     call putc 
      002052                       1948 9$:	_drop VSIZE 
      002052 5B 01            [ 2]    1     addw sp,#VSIZE 
      002054 81               [ 4] 1949 	ret 
                                   1950 
                                   1951 ;----------------------
                                   1952 ; 'save_context' and
                                   1953 ; 'rest_context' must be 
                                   1954 ; called at the same 
                                   1955 ; call stack depth 
                                   1956 ; i.e. SP must have the 
                                   1957 ; save value at  
                                   1958 ; entry point of both 
                                   1959 ; routine. 
                                   1960 ;---------------------
                           000004  1961 	CTXT_SIZE=4 ; size of saved data 
                                   1962 ;--------------------
                                   1963 ; save current BASIC
                                   1964 ; interpreter context 
                                   1965 ; on stack 
                                   1966 ;--------------------
      002055                       1967 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      002055                       1968 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      002055                       1969 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      002055                       1970 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      002055                       1971 save_context:
      002055 CE 00 04         [ 2] 1972 	ldw x,basicptr 
      002058 1F 03            [ 2] 1973 	ldw (BPTR,sp),x
      00205A C6 00 01         [ 1] 1974 	ld a,in 
      00205D 6B 05            [ 1] 1975 	ld (IN,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      00205F C6 00 03         [ 1] 1976 	ld a,count 
      002062 6B 06            [ 1] 1977 	ld (CNT,sp),a  
      002064 81               [ 4] 1978 	ret
                                   1979 
                                   1980 ;-----------------------
                                   1981 ; restore previously saved 
                                   1982 ; BASIC interpreter context 
                                   1983 ; from stack 
                                   1984 ;-------------------------
      002065                       1985 rest_context:
      002065 1E 03            [ 2] 1986 	ldw x,(BPTR,sp)
      002067 CF 00 04         [ 2] 1987 	ldw basicptr,x 
      00206A 7B 05            [ 1] 1988 	ld a,(IN,sp)
      00206C C7 00 01         [ 1] 1989 	ld in,a
      00206F 7B 06            [ 1] 1990 	ld a,(CNT,sp)
      002071 C7 00 03         [ 1] 1991 	ld count,a  
      002074 81               [ 4] 1992 	ret
                                   1993 
                                   1994 
                                   1995 
                                   1996 ;------------------------------------------
                                   1997 ; BASIC: INPUT [string]var[,[string]var]
                                   1998 ; input value in variables 
                                   1999 ; [string] optionally can be used as prompt 
                                   2000 ;-----------------------------------------
                           000001  2001 	CX_BPTR=1
                           000003  2002 	CX_IN=3
                           000004  2003 	CX_CNT=4
                           000005  2004 	SKIP=5
                           000005  2005 	VSIZE=5
      002075                       2006 input_var:
      002075 90 89            [ 2] 2007 	pushw y 
      002077                       2008 	_vars VSIZE 
      002077 52 05            [ 2]    1     sub sp,#VSIZE 
      002079                       2009 input_loop:
      002079 0F 05            [ 1] 2010 	clr (SKIP,sp)
      00207B CD 17 A1         [ 4] 2011 	call next_token 
      00207E A1 02            [ 1] 2012 	cp a,#TK_QSTR 
      002080 26 10            [ 1] 2013 	jrne 1$ 
      002082 CD 09 A1         [ 4] 2014 	call puts 
      002085 5C               [ 1] 2015 	incw x 
      002086 72 B0 00 04      [ 2] 2016 	subw x,basicptr 
      00208A CF 00 00         [ 2] 2017 	ldw in.w,x 
      00208D 03 05            [ 1] 2018 	cpl (SKIP,sp)
      00208F CD 17 A1         [ 4] 2019 	call next_token 
      002092 A1 85            [ 1] 2020 1$: cp a,#TK_VAR  
      002094 27 03            [ 1] 2021 	jreq 2$ 
      002096 CC 16 A0         [ 2] 2022 	jp syntax_error
      002099 CD 17 D6         [ 4] 2023 2$:	call get_addr
      00209C CF 00 19         [ 2] 2024 	ldw ptr16,x 
      00209F 0D 05            [ 1] 2025 	tnz (SKIP,sp)
      0020A1 26 06            [ 1] 2026 	jrne 21$ 
      0020A3 CD 11 DD         [ 4] 2027 	call var_name 
      0020A6 CD 09 44         [ 4] 2028 	call putc   
      0020A9                       2029 21$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0020A9 A6 3A            [ 1] 2030 	ld a,#':
      0020AB CD 09 44         [ 4] 2031 	call putc 
      0020AE CD 20 55         [ 4] 2032 	call save_context 
      0020B1 72 5F 00 03      [ 1] 2033 	clr count  
      0020B5 CD 0A A6         [ 4] 2034 	call readln 
      0020B8 AE 16 68         [ 2] 2035 	ldw x,#tib 
      0020BB 3B 00 03         [ 1] 2036 	push count
      0020BE 4B 00            [ 1] 2037 	push #0 
      0020C0 72 FB 01         [ 2] 2038 	addw x,(1,sp)
      0020C3 5C               [ 1] 2039 	incw x 
      0020C4                       2040 	_drop 2 
      0020C4 5B 02            [ 2]    1     addw sp,#2 
      0020C6 72 5F 00 01      [ 1] 2041 	clr in 
      0020CA CD 0F 1F         [ 4] 2042 	call get_token
      0020CD A1 84            [ 1] 2043 	cp a,#TK_INTGR
      0020CF 27 12            [ 1] 2044 	jreq 3$ 
      0020D1 A1 11            [ 1] 2045 	cp a,#TK_MINUS
      0020D3 CD 0F 1F         [ 4] 2046 	call get_token 
      0020D6 A1 84            [ 1] 2047 	cp a,#TK_INTGR 
      0020D8 27 06            [ 1] 2048 	jreq 22$
      0020DA CD 20 65         [ 4] 2049 	call rest_context 
      0020DD CC 16 A0         [ 2] 2050 	jp syntax_error
      0020E0                       2051 22$:
      0020E0 CD 02 0D         [ 4] 2052 	call neg_acc24	
      0020E3                       2053 3$: 
      0020E3 C6 00 0C         [ 1] 2054 	ld a,acc24 
      0020E6 CE 00 0D         [ 2] 2055 	ldw x,acc16 
      0020E9 72 C7 00 19      [ 4] 2056 	ld [ptr16],a
      0020ED 72 5C 00 1A      [ 1] 2057 	inc ptr8  
      0020F1 72 CF 00 19      [ 5] 2058 	ldw [ptr16],x 
      0020F5 CD 20 65         [ 4] 2059 	call rest_context
      0020F8 CD 17 A1         [ 4] 2060 	call next_token 
      0020FB A1 08            [ 1] 2061 	cp a,#TK_COMMA
      0020FD 26 03            [ 1] 2062 	jrne 4$ 
      0020FF CC 20 79         [ 2] 2063 	jp input_loop
      002102                       2064 4$:
      002102 A1 00            [ 1] 2065 	cp a,#TK_NONE 
      002104 27 07            [ 1] 2066 	jreq input_exit  
      002106 A1 0A            [ 1] 2067 	cp a,#TK_COLON 
      002108 27 03            [ 1] 2068     jreq input_exit 
      00210A CC 16 A0         [ 2] 2069 	jp syntax_error 
      00210D                       2070 input_exit:
      00210D                       2071 	_drop VSIZE 
      00210D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00210F 90 85            [ 2] 2072 	popw y 
      002111 81               [ 4] 2073 	ret 
                                   2074 
                                   2075 
                                   2076 ;---------------------
                                   2077 ; BASIC: REM | ' 
                                   2078 ; skip comment to end of line 
                                   2079 ;---------------------- 
      002112                       2080 remark::
      002112 55 00 03 00 01   [ 1] 2081 	mov in,count 
      002117 81               [ 4] 2082  	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2083 
                                   2084 
                                   2085 ;---------------------
                                   2086 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2087 ; read in loop 'addr'  
                                   2088 ; apply & 'mask' to value 
                                   2089 ; loop while result==0.  
                                   2090 ; 'xor_mask' is used to 
                                   2091 ; invert the wait logic.
                                   2092 ; i.e. loop while not 0.
                                   2093 ;---------------------
                           000001  2094 	XMASK=1 
                           000002  2095 	MASK=2
                           000003  2096 	ADDR=3
                           000004  2097 	VSIZE=4
      002118                       2098 wait: 
      002118                       2099 	_vars VSIZE
      002118 52 04            [ 2]    1     sub sp,#VSIZE 
      00211A 0F 01            [ 1] 2100 	clr (XMASK,sp) 
      00211C CD 19 61         [ 4] 2101 	call arg_list 
      00211F A1 02            [ 1] 2102 	cp a,#2
      002121 24 03            [ 1] 2103 	jruge 0$
      002123 CC 16 A0         [ 2] 2104 	jp syntax_error 
      002126 A1 03            [ 1] 2105 0$:	cp a,#3
      002128 25 0C            [ 1] 2106 	jrult 1$
      00212A                       2107 	_xpop  ; xor mask 
      00212A 90 F6            [ 1]    1     ld a,(y)
      00212C 93               [ 1]    2     ldw x,y 
      00212D EE 01            [ 2]    3     ldw x,(1,x)
      00212F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002133 9F               [ 1] 2108 	ld a,xl 
      002134 6B 01            [ 1] 2109 	ld (XMASK,sp),a 
      002136                       2110 1$: _xpop ; mask
      002136 90 F6            [ 1]    1     ld a,(y)
      002138 93               [ 1]    2     ldw x,y 
      002139 EE 01            [ 2]    3     ldw x,(1,x)
      00213B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00213F 9F               [ 1] 2111     ld a,xl  
      002140 6B 02            [ 1] 2112 	ld (MASK,sp),a 
      002142                       2113 	_xpop ; address 
      002142 90 F6            [ 1]    1     ld a,(y)
      002144 93               [ 1]    2     ldw x,y 
      002145 EE 01            [ 2]    3     ldw x,(1,x)
      002147 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00214B F6               [ 1] 2114 2$:	ld a,(x)
      00214C 14 02            [ 1] 2115 	and a,(MASK,sp)
      00214E 18 01            [ 1] 2116 	xor a,(XMASK,sp)
      002150 27 F9            [ 1] 2117 	jreq 2$ 
      002152                       2118 	_drop VSIZE 
      002152 5B 04            [ 2]    1     addw sp,#VSIZE 
      002154 81               [ 4] 2119 	ret 
                                   2120 
                                   2121 ;---------------------
                                   2122 ; BASIC: BSET addr,mask
                                   2123 ; set bits at 'addr' corresponding 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2124 ; to those of 'mask' that are at 1.
                                   2125 ; arguments:
                                   2126 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2127 ;   mask        mask|addr
                                   2128 ; output:
                                   2129 ;	none 
                                   2130 ;--------------------------
      002155                       2131 bit_set:
      002155 CD 19 61         [ 4] 2132 	call arg_list 
      002158 A1 02            [ 1] 2133 	cp a,#2	 
      00215A 27 03            [ 1] 2134 	jreq 1$ 
      00215C CC 16 A0         [ 2] 2135 	jp syntax_error
      00215F                       2136 1$: 
      00215F                       2137 	_xpop ; mask 
      00215F 90 F6            [ 1]    1     ld a,(y)
      002161 93               [ 1]    2     ldw x,y 
      002162 EE 01            [ 2]    3     ldw x,(1,x)
      002164 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002168 9F               [ 1] 2138 	ld a,xl
      002169 88               [ 1] 2139 	push a  
      00216A                       2140 	_xpop ; addr  
      00216A 90 F6            [ 1]    1     ld a,(y)
      00216C 93               [ 1]    2     ldw x,y 
      00216D EE 01            [ 2]    3     ldw x,(1,x)
      00216F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002173 84               [ 1] 2141 	pop a 
      002174 FA               [ 1] 2142 	or a,(x)
      002175 F7               [ 1] 2143 	ld (x),a
      002176 81               [ 4] 2144 	ret 
                                   2145 
                                   2146 ;---------------------
                                   2147 ; BASIC: BRES addr,mask
                                   2148 ; reset bits at 'addr' corresponding 
                                   2149 ; to those of 'mask' that are at 1.
                                   2150 ; arguments:
                                   2151 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2152 ;   mask	    ~mask&*addr  
                                   2153 ; output:
                                   2154 ;	none 
                                   2155 ;--------------------------
      002177                       2156 bit_reset:
      002177 CD 19 61         [ 4] 2157 	call arg_list 
      00217A A1 02            [ 1] 2158 	cp a,#2  
      00217C 27 03            [ 1] 2159 	jreq 1$ 
      00217E CC 16 A0         [ 2] 2160 	jp syntax_error
      002181                       2161 1$: 
      002181                       2162 	_xpop ; mask 
      002181 90 F6            [ 1]    1     ld a,(y)
      002183 93               [ 1]    2     ldw x,y 
      002184 EE 01            [ 2]    3     ldw x,(1,x)
      002186 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00218A 9F               [ 1] 2163 	ld a,xl 
      00218B 43               [ 1] 2164 	cpl a
      00218C 88               [ 1] 2165 	push a  
      00218D                       2166 	_xpop ; addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      00218D 90 F6            [ 1]    1     ld a,(y)
      00218F 93               [ 1]    2     ldw x,y 
      002190 EE 01            [ 2]    3     ldw x,(1,x)
      002192 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002196 84               [ 1] 2167 	pop a 
      002197 F4               [ 1] 2168 	and a,(x)
      002198 F7               [ 1] 2169 	ld (x),a 
      002199 81               [ 4] 2170 	ret 
                                   2171 
                                   2172 ;---------------------
                                   2173 ; BASIC: BTOGL addr,mask
                                   2174 ; toggle bits at 'addr' corresponding 
                                   2175 ; to those of 'mask' that are at 1.
                                   2176 ; arguments:
                                   2177 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2178 ;   mask	    mask^*addr  
                                   2179 ; output:
                                   2180 ;	none 
                                   2181 ;--------------------------
      00219A                       2182 bit_toggle:
      00219A CD 19 61         [ 4] 2183 	call arg_list 
      00219D A1 02            [ 1] 2184 	cp a,#2 
      00219F 27 03            [ 1] 2185 	jreq 1$ 
      0021A1 CC 16 A0         [ 2] 2186 	jp syntax_error
      0021A4                       2187 1$: _xpop ; mask 
      0021A4 90 F6            [ 1]    1     ld a,(y)
      0021A6 93               [ 1]    2     ldw x,y 
      0021A7 EE 01            [ 2]    3     ldw x,(1,x)
      0021A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021AD 9F               [ 1] 2188 	ld a,xl
      0021AE 88               [ 1] 2189 	push a 
      0021AF                       2190 	_xpop  ; addr  
      0021AF 90 F6            [ 1]    1     ld a,(y)
      0021B1 93               [ 1]    2     ldw x,y 
      0021B2 EE 01            [ 2]    3     ldw x,(1,x)
      0021B4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B8 84               [ 1] 2191 	pop a 
      0021B9 F8               [ 1] 2192 	xor a,(x)
      0021BA F7               [ 1] 2193 	ld (x),a 
      0021BB 81               [ 4] 2194 	ret 
                                   2195 
                                   2196 
                                   2197 ;---------------------
                                   2198 ; BASIC: BTEST(addr,bit)
                                   2199 ; return bit value at 'addr' 
                                   2200 ; bit is in range {0..7}.
                                   2201 ; arguments:
                                   2202 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2203 ;   bit 	    bit position {0..7}  
                                   2204 ; output:
                                   2205 ;	A:X       bit value  
                                   2206 ;--------------------------
      0021BC                       2207 bit_test:
      0021BC CD 19 5C         [ 4] 2208 	call func_args 
      0021BF A1 02            [ 1] 2209 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021C1 27 03            [ 1] 2210 	jreq 0$
      0021C3 CC 16 A0         [ 2] 2211 	jp syntax_error
      0021C6                       2212 0$:	
      0021C6                       2213 	_xpop 
      0021C6 90 F6            [ 1]    1     ld a,(y)
      0021C8 93               [ 1]    2     ldw x,y 
      0021C9 EE 01            [ 2]    3     ldw x,(1,x)
      0021CB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021CF 9F               [ 1] 2214 	ld a,xl 
      0021D0 A4 07            [ 1] 2215 	and a,#7
      0021D2 88               [ 1] 2216 	push a   
      0021D3 A6 01            [ 1] 2217 	ld a,#1 
      0021D5 0D 01            [ 1] 2218 1$: tnz (1,sp)
      0021D7 27 05            [ 1] 2219 	jreq 2$
      0021D9 48               [ 1] 2220 	sll a 
      0021DA 0A 01            [ 1] 2221 	dec (1,sp)
      0021DC 20 F7            [ 2] 2222 	jra 1$
      0021DE 6B 01            [ 1] 2223 2$: ld (1,sp),a  
      0021E0                       2224 	_xpop ; address  
      0021E0 90 F6            [ 1]    1     ld a,(y)
      0021E2 93               [ 1]    2     ldw x,y 
      0021E3 EE 01            [ 2]    3     ldw x,(1,x)
      0021E5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E9 84               [ 1] 2225 	pop a 
      0021EA F4               [ 1] 2226 	and a,(x)
      0021EB 27 02            [ 1] 2227 	jreq 3$
      0021ED A6 01            [ 1] 2228 	ld a,#1 
      0021EF 5F               [ 1] 2229 3$:	clrw x 
      0021F0 97               [ 1] 2230 	ld xl,a
      0021F1 4F               [ 1] 2231 	clr a  
      0021F2 81               [ 4] 2232 	ret
                                   2233 
                                   2234 ;--------------------
                                   2235 ; BASIC: POKE addr,byte
                                   2236 ; put a byte at addr 
                                   2237 ;--------------------
      0021F3                       2238 poke:
      0021F3 CD 19 61         [ 4] 2239 	call arg_list 
      0021F6 A1 02            [ 1] 2240 	cp a,#2
      0021F8 27 03            [ 1] 2241 	jreq 1$
      0021FA CC 16 A0         [ 2] 2242 	jp syntax_error
      0021FD                       2243 1$:	
      0021FD                       2244 	_xpop ; byte   
      0021FD 90 F6            [ 1]    1     ld a,(y)
      0021FF 93               [ 1]    2     ldw x,y 
      002200 EE 01            [ 2]    3     ldw x,(1,x)
      002202 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002206 9F               [ 1] 2245     ld a,xl 
      002207 88               [ 1] 2246 	push a 
      002208                       2247 	_xpop ; address 
      002208 90 F6            [ 1]    1     ld a,(y)
      00220A 93               [ 1]    2     ldw x,y 
      00220B EE 01            [ 2]    3     ldw x,(1,x)
      00220D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002211 84               [ 1] 2248 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002212 F7               [ 1] 2249 	ld (x),a 
      002213 81               [ 4] 2250 	ret 
                                   2251 
                                   2252 ;-----------------------
                                   2253 ; BASIC: PEEK(addr)
                                   2254 ; get the byte at addr 
                                   2255 ; input:
                                   2256 ;	none 
                                   2257 ; output:
                                   2258 ;	X 		value 
                                   2259 ;-----------------------
      002214                       2260 peek:
      002214 CD 19 5C         [ 4] 2261 	call func_args
      002217 A1 01            [ 1] 2262 	cp a,#1 
      002219 27 03            [ 1] 2263 	jreq 1$
      00221B CC 16 A0         [ 2] 2264 	jp syntax_error
      00221E                       2265 1$: _xpop ; address  
      00221E 90 F6            [ 1]    1     ld a,(y)
      002220 93               [ 1]    2     ldw x,y 
      002221 EE 01            [ 2]    3     ldw x,(1,x)
      002223 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002227 C7 00 18         [ 1] 2266 	ld farptr,a 
      00222A CF 00 19         [ 2] 2267 	ldw ptr16,x 
      00222D 92 BC 00 18      [ 5] 2268 	ldf a,[farptr]
      002231 5F               [ 1] 2269 	clrw x 
      002232 97               [ 1] 2270 	ld xl,a 
      002233 4F               [ 1] 2271 	clr a 
      002234 81               [ 4] 2272 	ret 
                                   2273 
                                   2274 ;---------------------------
                                   2275 ; BASIC IF expr : instructions
                                   2276 ; evaluate expr and if true 
                                   2277 ; execute instructions on same line. 
                                   2278 ;----------------------------
      002235                       2279 if: 
      002235 CD 1B 88         [ 4] 2280 	call condition  
      002238                       2281 	_xpop 
      002238 90 F6            [ 1]    1     ld a,(y)
      00223A 93               [ 1]    2     ldw x,y 
      00223B EE 01            [ 2]    3     ldw x,(1,x)
      00223D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002241 4D               [ 1] 2282 	tnz  a  
      002242 26 0A            [ 1] 2283 	jrne 9$ 
                                   2284 ;skip to next line
      002244 55 00 03 00 01   [ 1] 2285 	mov in,count
      002249                       2286 	_drop 2 
      002249 5B 02            [ 2]    1     addw sp,#2 
      00224B CC 17 53         [ 2] 2287 	jp next_line
      00224E 81               [ 4] 2288 9$:	ret 
                                   2289 
                                   2290 ;------------------------
                                   2291 ; BASIC: FOR var=expr 
                                   2292 ; set variable to expression 
                                   2293 ; leave variable address 
                                   2294 ; on stack and set
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   2295 ; FLOOP bit in 'flags'
                                   2296 ;-----------------
                           000001  2297 	RETL1=1 ; return address  
                           000003  2298 	FSTEP=3  ; variable increment int24
                           000006  2299 	LIMIT=6 ; loop limit, int24  
                           000009  2300 	CVAR=9   ; control variable 
                           00000B  2301 	INW=11   ;  in.w saved
                           00000D  2302 	BPTR=13 ; baseptr saved
                           00000D  2303 	VSIZE=13  
      00224F                       2304 for: ; { -- var_addr }
      00224F 85               [ 2] 2305 	popw x ; call return address 
      002250                       2306 	_vars VSIZE 
      002250 52 0D            [ 2]    1     sub sp,#VSIZE 
      002252 89               [ 2] 2307 	pushw x  ; RETL1 
      002253 A6 85            [ 1] 2308 	ld a,#TK_VAR 
      002255 CD 19 4F         [ 4] 2309 	call expect
      002258 CD 17 D6         [ 4] 2310 	call get_addr
      00225B 1F 09            [ 2] 2311 	ldw (CVAR,sp),x  ; control variable 
      00225D CD 1C 70         [ 4] 2312 	call let_eval 
      002260 72 14 00 22      [ 1] 2313 	bset flags,#FLOOP 
      002264 CD 17 A1         [ 4] 2314 	call next_token 
      002267 A1 80            [ 1] 2315 	cp a,#TK_CMD 
      002269 27 03            [ 1] 2316 	jreq 1$
      00226B CC 16 A0         [ 2] 2317 	jp syntax_error
      00226E                       2318 1$:  
      00226E CD 17 BA         [ 4] 2319 	call get_code_addr
      002271 A3 22 79         [ 2] 2320 	cpw x,#to   
      002274 27 03            [ 1] 2321 	jreq to
      002276 CC 16 A0         [ 2] 2322 	jp syntax_error 
                                   2323 
                                   2324 ;-----------------------------------
                                   2325 ; BASIC: TO expr 
                                   2326 ; second part of FOR loop initilization
                                   2327 ; leave limit on stack and set 
                                   2328 ; FTO bit in 'flags'
                                   2329 ;-----------------------------------
      002279                       2330 to: ; { var_addr -- var_addr limit step }
      002279 72 04 00 22 03   [ 2] 2331 	btjt flags,#FLOOP,1$
      00227E CC 16 A0         [ 2] 2332 	jp syntax_error
      002281 CD 1A 83         [ 4] 2333 1$: call expression   
      002284 A1 84            [ 1] 2334 	cp a,#TK_INTGR 
      002286 27 03            [ 1] 2335 	jreq 2$ 
      002288 CC 16 A0         [ 2] 2336 	jp syntax_error
      00228B                       2337 2$: _xpop
      00228B 90 F6            [ 1]    1     ld a,(y)
      00228D 93               [ 1]    2     ldw x,y 
      00228E EE 01            [ 2]    3     ldw x,(1,x)
      002290 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002294 6B 06            [ 1] 2338 	ld (LIMIT,sp),a 
      002296 1F 07            [ 2] 2339 	ldw (LIMIT+1,sp),x
      002298 CD 17 A1         [ 4] 2340 	call next_token
      00229B A1 00            [ 1] 2341 	cp a,#TK_NONE  
      00229D 27 11            [ 1] 2342 	jreq 4$ 
      00229F A1 80            [ 1] 2343 	cp a,#TK_CMD
      0022A1 26 08            [ 1] 2344 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0022A3 CD 17 BA         [ 4] 2345 	call get_code_addr
      0022A6 A3 22 B9         [ 2] 2346 	cpw x,#step 
      0022A9 27 0E            [ 1] 2347 	jreq step
      0022AB                       2348 3$:	
      0022AB                       2349 	_unget_token   	 
      0022AB 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022B0                       2350 4$:	
      0022B0 0F 03            [ 1] 2351 	clr (FSTEP,sp) 
      0022B2 AE 00 01         [ 2] 2352 	ldw x,#1   ; default step  
      0022B5 1F 04            [ 2] 2353 	ldw (FSTEP+1,sp),x 
      0022B7 20 2F            [ 2] 2354 	jra store_loop_addr 
                                   2355 
                                   2356 
                                   2357 ;----------------------------------
                                   2358 ; BASIC: STEP expr 
                                   2359 ; optional third par of FOR loop
                                   2360 ; initialization. 	
                                   2361 ;------------------------------------
      0022B9                       2362 step: ; {var limit -- var limit step}
      0022B9 72 04 00 22 03   [ 2] 2363 	btjt flags,#FLOOP,1$
      0022BE CC 16 A0         [ 2] 2364 	jp syntax_error
      0022C1 CD 1A 83         [ 4] 2365 1$: call expression 
      0022C4 A1 84            [ 1] 2366 	cp a,#TK_INTGR
      0022C6 27 03            [ 1] 2367 	jreq 2$
      0022C8 CC 16 A0         [ 2] 2368 	jp syntax_error
      0022CB                       2369 2$:	
      0022CB                       2370 	_xpop 
      0022CB 90 F6            [ 1]    1     ld a,(y)
      0022CD 93               [ 1]    2     ldw x,y 
      0022CE EE 01            [ 2]    3     ldw x,(1,x)
      0022D0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022D4 6B 03            [ 1] 2371 	ld (FSTEP,sp),a 
      0022D6 1F 04            [ 2] 2372 	ldw (FSTEP+1,sp),x ; step
                                   2373 ; if step < 0 decrement LIMIT 
      0022D8 4D               [ 1] 2374 	tnz a
      0022D9 2A 0D            [ 1] 2375 	jrpl store_loop_addr 
      0022DB 7B 06            [ 1] 2376 	ld a,(LIMIT,sp)
      0022DD 1E 07            [ 2] 2377 	ldw x,(LIMIT+1,sp)
      0022DF 1D 00 01         [ 2] 2378 	subw x,#1 
      0022E2 A2 00            [ 1] 2379 	sbc a,#0 
      0022E4 6B 06            [ 1] 2380 	ld (LIMIT,sp),a 
      0022E6 1F 07            [ 2] 2381 	ldw (LIMIT+1,sp),x 
                                   2382 ; leave loop back entry point on cstack 
                                   2383 ; cstack is 1 call deep from interpreter
      0022E8                       2384 store_loop_addr:
      0022E8 CE 00 04         [ 2] 2385 	ldw x,basicptr
      0022EB 1F 0D            [ 2] 2386 	ldw (BPTR,sp),x 
      0022ED CE 00 00         [ 2] 2387 	ldw x,in.w 
      0022F0 1F 0B            [ 2] 2388 	ldw (INW,sp),x   
      0022F2 72 15 00 22      [ 1] 2389 	bres flags,#FLOOP 
      0022F6 72 5C 00 1F      [ 1] 2390 	inc loop_depth  
      0022FA 81               [ 4] 2391 	ret 
                                   2392 
                                   2393 ;--------------------------------
                                   2394 ; BASIC: NEXT var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2395 ; FOR loop control 
                                   2396 ; increment variable with step 
                                   2397 ; and compare with limit 
                                   2398 ; loop if threshold not crossed.
                                   2399 ; else stack. 
                                   2400 ; and decrement 'loop_depth' 
                                   2401 ;--------------------------------
      0022FB                       2402 next: ; {var limit step retl1 -- [var limit step ] }
      0022FB 72 5D 00 1F      [ 1] 2403 	tnz loop_depth 
      0022FF 26 03            [ 1] 2404 	jrne 1$ 
      002301 CC 16 A0         [ 2] 2405 	jp syntax_error 
      002304                       2406 1$: 
      002304 A6 85            [ 1] 2407 	ld a,#TK_VAR 
      002306 CD 19 4F         [ 4] 2408 	call expect
      002309 CD 17 D6         [ 4] 2409 	call get_addr 
                                   2410 ; check for good variable after NEXT 	 
      00230C 13 09            [ 2] 2411 	cpw x,(CVAR,sp)
      00230E 27 03            [ 1] 2412 	jreq 2$  
      002310 CC 16 A0         [ 2] 2413 	jp syntax_error ; not the good one 
      002313                       2414 2$: 
      002313 CF 00 19         [ 2] 2415 	ldw ptr16,x 
                                   2416 	; increment variable 
      002316 F6               [ 1] 2417 	ld a,(x)
      002317 EE 01            [ 2] 2418 	ldw x,(1,x)  ; get var value 
      002319 72 FB 04         [ 2] 2419 	addw x,(FSTEP+1,sp) ; var+step 
      00231C 19 03            [ 1] 2420 	adc a,(FSTEP,sp)
      00231E 72 C7 00 19      [ 4] 2421 	ld [ptr16],a
      002322 72 5C 00 1A      [ 1] 2422 	inc ptr8  
      002326 72 CF 00 19      [ 5] 2423 	ldw [ptr16],x 
      00232A C7 00 0C         [ 1] 2424 	ld acc24,a 
      00232D CF 00 0D         [ 2] 2425 	ldw acc16,x 
      002330 7B 06            [ 1] 2426 	ld a,(LIMIT,sp)
      002332 1E 07            [ 2] 2427 	ldw x,(LIMIT+1,sp)
      002334 72 B0 00 0D      [ 2] 2428 	subw x,acc16 
      002338 C2 00 0C         [ 1] 2429 	sbc a,acc24
      00233B 18 03            [ 1] 2430 	xor a,(FSTEP,sp)
      00233D A8 80            [ 1] 2431 	xor a,#0x80
      00233F 2B 12            [ 1] 2432 	jrmi loop_back  
      002341 20 25            [ 2] 2433 	jra loop_done   
                                   2434 ; check sign of STEP  
      002343 7B 03            [ 1] 2435 	ld a,(FSTEP,sp)
      002345 2A 07            [ 1] 2436 	jrpl 4$
                                   2437 ;negative step
      002347 C6 00 0E         [ 1] 2438     ld a,acc8 
      00234A 2F 07            [ 1] 2439 	jrslt loop_back   
      00234C 20 1A            [ 2] 2440 	jra loop_done  
      00234E                       2441 4$: ; positive step
      00234E 72 0E 00 0E 15   [ 2] 2442 	btjt acc8,#7,loop_done 
      002353                       2443 loop_back:
      002353 1E 0D            [ 2] 2444 	ldw x,(BPTR,sp)
      002355 CF 00 04         [ 2] 2445 	ldw basicptr,x 
      002358 72 01 00 22 05   [ 2] 2446 	btjf flags,#FRUN,1$ 
      00235D E6 02            [ 1] 2447 	ld a,(2,x)
      00235F C7 00 03         [ 1] 2448 	ld count,a
      002362 1E 0B            [ 2] 2449 1$:	ldw x,(INW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002364 CF 00 00         [ 2] 2450 	ldw in.w,x 
      002367 81               [ 4] 2451 	ret 
      002368                       2452 loop_done:
                                   2453 	; remove loop data from stack  
      002368 85               [ 2] 2454 	popw x
      002369                       2455 	_drop VSIZE 
      002369 5B 0D            [ 2]    1     addw sp,#VSIZE 
      00236B 72 5A 00 1F      [ 1] 2456 	dec loop_depth 
      00236F FC               [ 2] 2457 	jp (x)
                                   2458 
                                   2459 ;----------------------------
                                   2460 ; called by goto/gosub
                                   2461 ; to get target line number 
                                   2462 ; output:
                                   2463 ;    x    line address 
                                   2464 ;---------------------------
      002370                       2465 get_target_line:
      002370 CD 17 A1         [ 4] 2466 	call next_token  
      002373 A1 84            [ 1] 2467 	cp a,#TK_INTGR
      002375 27 07            [ 1] 2468 	jreq get_target_line_addr 
      002377 A1 03            [ 1] 2469 	cp a,#TK_LABEL 
      002379 27 26            [ 1] 2470 	jreq look_target_symbol 
      00237B CC 16 A0         [ 2] 2471 	jp syntax_error
                                   2472 ; the target is a line number 
                                   2473 ; search it. 
      00237E                       2474 get_target_line_addr:
      00237E 90 89            [ 2] 2475 	pushw y 
      002380 CD 17 E0         [ 4] 2476 	call get_int24 ; line # 
      002383 4F               [ 1] 2477 	clr a
      002384 90 CE 00 04      [ 2] 2478 	ldw y,basicptr 
      002388 90 FE            [ 2] 2479 	ldw y,(y)
      00238A 90 89            [ 2] 2480 	pushw y 
      00238C 13 01            [ 2] 2481 	cpw x,(1,sp)
      00238E                       2482 	_drop 2  
      00238E 5B 02            [ 2]    1     addw sp,#2 
      002390 25 01            [ 1] 2483 	jrult 11$
      002392 4C               [ 1] 2484 	inc a 
      002393                       2485 11$: ; scan program for this line# 	
      002393 CD 0C 89         [ 4] 2486 	call search_lineno  
      002396 5D               [ 2] 2487 	tnzw x ; 0| line# address 
      002397 26 05            [ 1] 2488 	jrne 2$ 
      002399 A6 05            [ 1] 2489 	ld a,#ERR_NO_LINE 
      00239B CC 16 A2         [ 2] 2490 	jp tb_error 
      00239E 90 85            [ 2] 2491 2$:	popw y  
      0023A0 81               [ 4] 2492 	ret 
                                   2493 
                                   2494 ; the GOTO|GOSUB target is a symbol.
      0023A1                       2495 look_target_symbol:
      0023A1 90 89            [ 2] 2496 	pushw y 
      0023A3 89               [ 2] 2497 	pushw x 
      0023A4 72 5F 00 0D      [ 1] 2498 	clr acc16 
      0023A8 90 CE 00 1B      [ 2] 2499 	ldw y,txtbgn 
      0023AC 90 E6 03         [ 1] 2500 1$:	ld a,(3,y) ; first TK_ID on line 
      0023AF A1 03            [ 1] 2501 	cp a,#TK_LABEL 
      0023B1 27 15            [ 1] 2502 	jreq 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023B3 90 E6 02         [ 1] 2503 2$:	ld a,(2,y); line length 
      0023B6 C7 00 0E         [ 1] 2504 	ld acc8,a 
      0023B9 72 B9 00 0D      [ 2] 2505 	addw y,acc16 ;point to next line 
      0023BD 90 C3 00 1D      [ 2] 2506 	cpw y,txtend 
      0023C1 25 E9            [ 1] 2507 	jrult 1$
      0023C3 A6 0A            [ 1] 2508 	ld a,#ERR_BAD_VALUE
      0023C5 CC 16 A2         [ 2] 2509 	jp tb_error 
      0023C8                       2510 3$: ; found a TK_LABEL 
                                   2511 	; compare with GOTO|GOSUB target 
      0023C8 90 89            [ 2] 2512 	pushw y ; line address 
      0023CA 72 A9 00 04      [ 2] 2513 	addw y,#4 ; label string 
      0023CE 1E 03            [ 2] 2514 	ldw x,(3,sp) ; target string 
      0023D0 CD 13 EF         [ 4] 2515 	call strcmp
      0023D3 26 04            [ 1] 2516 	jrne 4$
      0023D5 90 85            [ 2] 2517 	popw y 
      0023D7 20 DA            [ 2] 2518 	jra 2$ 
      0023D9                       2519 4$: ; target found 
      0023D9 85               [ 2] 2520 	popw x ;  address line target  
      0023DA                       2521 	_drop 2 ; target string 
      0023DA 5B 02            [ 2]    1     addw sp,#2 
      0023DC 90 85            [ 2] 2522 	popw y 
      0023DE 81               [ 4] 2523 	ret
                                   2524 
                                   2525 
                                   2526 ;--------------------------------
                                   2527 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2528 ; selective goto or gosub 
                                   2529 ;--------------------------------
      0023DF                       2530 cmd_on:
      0023DF 72 00 00 22 05   [ 2] 2531 	btjt flags,#FRUN,0$ 
      0023E4 A6 06            [ 1] 2532 	ld a,#ERR_RUN_ONLY
      0023E6 CC 16 A2         [ 2] 2533 	jp tb_error 
      0023E9 CD 1A 83         [ 4] 2534 0$:	call expression 
      0023EC A1 84            [ 1] 2535 	cp a,#TK_INTGR
      0023EE 27 03            [ 1] 2536 	jreq 1$
      0023F0 CC 16 A0         [ 2] 2537 	jp syntax_error
      0023F3                       2538 1$: _xpop
      0023F3 90 F6            [ 1]    1     ld a,(y)
      0023F5 93               [ 1]    2     ldw x,y 
      0023F6 EE 01            [ 2]    3     ldw x,(1,x)
      0023F8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2539 ; the selector is the element indice 
                                   2540 ; in the list of arguments. {1..#elements} 
      0023FC 9F               [ 1] 2541 	ld a,xl ; keep only bits 7..0
      0023FD 27 62            [ 1] 2542 	jreq 9$ ; element # begin at 1. 
      0023FF 88               [ 1] 2543 	push a  ; selector  
      002400 CD 17 A1         [ 4] 2544 	call next_token
      002403 A1 80            [ 1] 2545 	cp a,#TK_CMD 
      002405 27 03            [ 1] 2546 	jreq 2$ 
      002407 CC 16 A0         [ 2] 2547 	jp syntax_error 
      00240A CD 17 BA         [ 4] 2548 2$: call get_code_addr
                                   2549 ;; must be a GOTO or GOSUB 
      00240D A3 24 6B         [ 2] 2550 	cpw x,#goto 
      002410 27 08            [ 1] 2551 	jreq 4$
      002412 A3 24 85         [ 2] 2552 	cpw x,#gosub 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002415 27 03            [ 1] 2553 	jreq 4$ 
      002417 CC 16 A0         [ 2] 2554 	jp syntax_error 
      00241A                       2555 4$: 
      00241A 84               [ 1] 2556 	pop a 
      00241B 89               [ 2] 2557 	pushw x ; save routine address 	
      00241C 88               [ 1] 2558 	push a  ; selector  
      00241D                       2559 5$: ; skip elements in list until selector==0 
      00241D 0A 01            [ 1] 2560 	dec (1,sp)
      00241F 27 26            [ 1] 2561 	jreq 6$ 
                                   2562 ; can be a line# or a label 
      002421 CD 17 A1         [ 4] 2563 	call next_token 
      002424 A1 84            [ 1] 2564 	cp a,#TK_INTGR 
      002426 27 07            [ 1] 2565 	jreq 52$
      002428 A1 03            [ 1] 2566 	cp a,#TK_LABEL 
      00242A 27 0D            [ 1] 2567 	jreq 54$
      00242C CC 16 A0         [ 2] 2568 	jp syntax_error 
      00242F                       2569 52$: ; got a line number 
      00242F C6 00 01         [ 1] 2570 	ld a,in ; skip over int24 value 
      002432 AB 03            [ 1] 2571 	add a,#CELL_SIZE ; integer size  
      002434 C7 00 01         [ 1] 2572 	ld in,a 
      002437 20 03            [ 2] 2573 	jra 56$
      002439 CD 17 C7         [ 4] 2574 54$: call skip_string ; skip over label 	
      00243C                       2575 56$: ; if another element comma present 
      00243C CD 17 A1         [ 4] 2576 	call next_token
      00243F A1 08            [ 1] 2577 	cp a,#TK_COMMA 
      002441 27 DA            [ 1] 2578 	jreq 5$ 
                                   2579 ; arg list exhausted, selector to big 
                                   2580 ; continue execution on next line 
      002443                       2581 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002443 5B 03            [ 2]    1     addw sp,#3 
      002445 20 1A            [ 2] 2582 	jra 9$
      002447                       2583 6$: ;at selected position  
      002447                       2584 	_drop 1 ; discard selector
      002447 5B 01            [ 2]    1     addw sp,#1 
                                   2585 ; here only the routine address 
                                   2586 ; of GOTO|GOSUB is on stack 
      002449 CD 23 70         [ 4] 2587     call get_target_line
      00244C CF 00 19         [ 2] 2588 	ldw ptr16,x 	
      00244F 55 00 03 00 01   [ 1] 2589 	mov in,count ; move to end of line  
      002454 85               [ 2] 2590 	popw x ; cmd address, GOTO||GOSUB 
      002455 A3 24 6B         [ 2] 2591 	cpw x,#goto 
      002458 26 05            [ 1] 2592 	jrne 7$ 
      00245A CE 00 19         [ 2] 2593 	ldw x,ptr16 
      00245D 20 19            [ 2] 2594 	jra jp_to_target
      00245F                       2595 7$: 
      00245F 20 35            [ 2] 2596 	jra gosub_2 ; target in ptr16 
      002461                       2597 9$: ; expr out of range skip to end of line
                                   2598     ; this will force a fall to next line  
      002461 55 00 03 00 01   [ 1] 2599 	mov in,count
      002466                       2600 	_drop 2
      002466 5B 02            [ 2]    1     addw sp,#2 
      002468 CC 17 53         [ 2] 2601 	jp next_line  
                                   2602 
                                   2603 
                                   2604 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



                                   2605 ; BASIC: GOTO line# 
                                   2606 ; jump to line# 
                                   2607 ; here cstack is 2 call deep from interpreter 
                                   2608 ;------------------------
      00246B                       2609 goto:
      00246B 72 00 00 22 05   [ 2] 2610 	btjt flags,#FRUN,goto_1  
      002470 A6 06            [ 1] 2611 	ld a,#ERR_RUN_ONLY
      002472 CC 16 A2         [ 2] 2612 	jp tb_error 
      002475                       2613 goto_1:
      002475 CD 23 70         [ 4] 2614 	call get_target_line
      002478                       2615 jp_to_target:
      002478 CF 00 04         [ 2] 2616 	ldw basicptr,x 
      00247B E6 02            [ 1] 2617 	ld a,(2,x)
      00247D C7 00 03         [ 1] 2618 	ld count,a 
      002480 35 03 00 01      [ 1] 2619 	mov in,#3 
      002484 81               [ 4] 2620 	ret 
                                   2621 
                                   2622 
                                   2623 ;--------------------
                                   2624 ; BASIC: GOSUB line#
                                   2625 ; basic subroutine call
                                   2626 ; actual line# and basicptr 
                                   2627 ; are saved on cstack
                                   2628 ; here cstack is 2 call deep from interpreter 
                                   2629 ;--------------------
                           000001  2630 	TARGET=1   ; target address 
                           000003  2631 	RET_ADDR=3 ; subroutine return address 
                           000005  2632 	RET_BPTR=5 ; basicptr return point 
                           000007  2633 	RET_INW=7  ; in.w return point 
                           000004  2634 	VSIZE=4  
      002485                       2635 gosub:
      002485 72 00 00 22 06   [ 2] 2636 	btjt flags,#FRUN,gosub_1 
      00248A A6 06            [ 1] 2637 	ld a,#ERR_RUN_ONLY
      00248C CC 16 A2         [ 2] 2638 	jp tb_error 
      00248F 81               [ 4] 2639 	ret 
      002490                       2640 gosub_1:
      002490 CD 23 70         [ 4] 2641 	call get_target_line 
      002493 CF 00 19         [ 2] 2642 	ldw ptr16,x 
      002496                       2643 gosub_2: 
      002496 85               [ 2] 2644 	popw x 
      002497                       2645 	_vars VSIZE  
      002497 52 04            [ 2]    1     sub sp,#VSIZE 
      002499 89               [ 2] 2646 	pushw x ; RET_ADDR 
      00249A CE 00 19         [ 2] 2647 	ldw x,ptr16 
      00249D 89               [ 2] 2648 	pushw x ; TARGET
                                   2649 ; save BASIC subroutine return point.   
      00249E CE 00 04         [ 2] 2650 	ldw x,basicptr
      0024A1 1F 05            [ 2] 2651 	ldw (RET_BPTR,sp),x 
      0024A3 CE 00 00         [ 2] 2652 	ldw x,in.w 
      0024A6 1F 07            [ 2] 2653 	ldw (RET_INW,sp),x
      0024A8 85               [ 2] 2654 	popw x 
      0024A9 20 CD            [ 2] 2655 	jra jp_to_target
                                   2656 
                                   2657 ;------------------------
                                   2658 ; BASIC: RETURN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                   2659 ; exit from BASIC subroutine 
                                   2660 ;------------------------
                           000003  2661 	RET_BPTR=3 ; basicptr return point 
                           000005  2662 	RET_INW=5  ; in.w return point 
                           000004  2663 	VSIZE=4  
      0024AB                       2664 return:
      0024AB 72 00 00 22 05   [ 2] 2665 	btjt flags,#FRUN,0$ 
      0024B0 A6 06            [ 1] 2666 	ld a,#ERR_RUN_ONLY
      0024B2 CC 16 A2         [ 2] 2667 	jp tb_error 
      0024B5                       2668 0$:	
      0024B5 1E 03            [ 2] 2669 	ldw x,(RET_ADDR,sp) 
      0024B7 CF 00 04         [ 2] 2670 	ldw basicptr,x
      0024BA E6 02            [ 1] 2671 	ld a,(2,x)
      0024BC C7 00 03         [ 1] 2672 	ld count,a  
      0024BF 1E 05            [ 2] 2673 	ldw x,(RET_INW,sp)
      0024C1 CF 00 00         [ 2] 2674 	ldw in.w,x 
      0024C4 85               [ 2] 2675 	popw x 
      0024C5                       2676 	_drop VSIZE 
      0024C5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024C7 89               [ 2] 2677 	pushw x
      0024C8 81               [ 4] 2678 	ret  
                                   2679 
                                   2680 ;----------------------------------
                                   2681 ; BASIC: RUN
                                   2682 ; run BASIC program in RAM
                                   2683 ;----------------------------------- 
      0024C9                       2684 run: 
      0024C9 72 01 00 22 02   [ 2] 2685 	btjf flags,#FRUN,0$  
      0024CE 4F               [ 1] 2686 	clr a 
      0024CF 81               [ 4] 2687 	ret
      0024D0                       2688 0$: 
      0024D0 72 09 00 22 12   [ 2] 2689 	btjf flags,#FBREAK,1$
      0024D5                       2690 	_drop 2 
      0024D5 5B 02            [ 2]    1     addw sp,#2 
      0024D7 CD 20 65         [ 4] 2691 	call rest_context
      0024DA                       2692 	_drop CTXT_SIZE 
      0024DA 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024DC 72 19 00 22      [ 1] 2693 	bres flags,#FBREAK 
      0024E0 72 10 00 22      [ 1] 2694 	bset flags,#FRUN 
      0024E4 CC 17 4B         [ 2] 2695 	jp interpreter 
      0024E7 CE 00 1B         [ 2] 2696 1$:	ldw x,txtbgn
      0024EA C3 00 1D         [ 2] 2697 	cpw x,txtend 
      0024ED 2B 0C            [ 1] 2698 	jrmi run_it 
      0024EF AE 16 2F         [ 2] 2699 	ldw x,#err_no_prog
      0024F2 CD 09 A1         [ 4] 2700 	call puts 
      0024F5 55 00 03 00 01   [ 1] 2701 	mov in,count
      0024FA 81               [ 4] 2702 	ret 
      0024FB                       2703 run_it:	 
      0024FB                       2704 	_drop 2 ; drop return address 
      0024FB 5B 02            [ 2]    1     addw sp,#2 
      0024FD                       2705 run_it_02: 
      0024FD CD 1C 4F         [ 4] 2706     call ubound 
      002500 CD 14 54         [ 4] 2707 	call clear_vars 
                                   2708 ; clear data pointer 
      002503 5F               [ 1] 2709 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002504 CF 00 06         [ 2] 2710 	ldw data_ptr,x 
      002507 72 5F 00 08      [ 1] 2711 	clr data_ofs 
      00250B 72 5F 00 09      [ 1] 2712 	clr data_len 
                                   2713 ; initialize BASIC pointer 
      00250F CE 00 1B         [ 2] 2714 	ldw x,txtbgn 
      002512 CF 00 04         [ 2] 2715 	ldw basicptr,x 
      002515 E6 02            [ 1] 2716 	ld a,(2,x)
      002517 C7 00 03         [ 1] 2717 	ld count,a
      00251A 35 03 00 01      [ 1] 2718 	mov in,#3	
      00251E 72 10 00 22      [ 1] 2719 	bset flags,#FRUN 
      002522 CC 17 4B         [ 2] 2720 	jp interpreter 
                                   2721 
                                   2722 
                                   2723 ;----------------------
                                   2724 ; BASIC: END
                                   2725 ; end running program
                                   2726 ;---------------------- 
      002525                       2727 cmd_end: 
                                   2728 ; clean stack 
      002525 AE 17 FF         [ 2] 2729 	ldw x,#STACK_EMPTY
      002528 94               [ 1] 2730 	ldw sp,x 
      002529 CC 17 2C         [ 2] 2731 	jp warm_start
                                   2732 
                                   2733 ;---------------------------
                                   2734 ; BASIC: GET var 
                                   2735 ; receive a key in variable 
                                   2736 ; don't wait 
                                   2737 ;---------------------------
      00252C                       2738 cmd_get:
      00252C CD 17 A1         [ 4] 2739 	call next_token 
      00252F A1 85            [ 1] 2740 	cp a,#TK_VAR 
      002531 27 03            [ 1] 2741 	jreq 0$
      002533 CC 16 A0         [ 2] 2742 	jp syntax_error 
      002536 CD 17 D6         [ 4] 2743 0$: call get_addr 
      002539 CF 00 19         [ 2] 2744 	ldw ptr16,x 
      00253C CD 09 4D         [ 4] 2745 	call qgetc 
      00253F 27 03            [ 1] 2746 	jreq 2$
      002541 CD 09 54         [ 4] 2747 	call getc  
      002544 72 3F 00 19      [ 4] 2748 2$: clr [ptr16]
      002548 72 5C 00 1A      [ 1] 2749 	inc ptr8 
      00254C 72 3F 00 19      [ 4] 2750 	clr [ptr16]
      002550 72 5C 00 1A      [ 1] 2751 	inc ptr8 
      002554 72 C7 00 19      [ 4] 2752 	ld [ptr16],a 
      002558 81               [ 4] 2753 	ret 
                                   2754 
                                   2755 
                                   2756 ;-----------------
                                   2757 ; 1 Khz beep 
                                   2758 ;-----------------
      002559                       2759 beep_1khz:: 
      002559 AE 00 64         [ 2] 2760 	ldw x,#100
      00255C 90 AE 03 E8      [ 2] 2761 	ldw y,#1000
      002560 20 20            [ 2] 2762 	jra beep
                                   2763 
                                   2764 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



                                   2765 ; BASIC: TONE expr1,expr2
                                   2766 ; used TIMER2 channel 1
                                   2767 ; to produce a tone 
                                   2768 ; arguments:
                                   2769 ;    expr1   frequency 
                                   2770 ;    expr2   duration msec.
                                   2771 ;---------------------------
      002562                       2772 tone:
      002562 CD 19 61         [ 4] 2773 	call arg_list 
      002565 A1 02            [ 1] 2774 	cp a,#2 
      002567 27 03            [ 1] 2775 	jreq 1$
      002569 CC 16 A0         [ 2] 2776 	jp syntax_error 
      00256C                       2777 1$: 
      00256C                       2778 	_xpop 
      00256C 90 F6            [ 1]    1     ld a,(y)
      00256E 93               [ 1]    2     ldw x,y 
      00256F EE 01            [ 2]    3     ldw x,(1,x)
      002571 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002575 89               [ 2] 2779 	pushw x ; duration 
      002576                       2780 	_xpop ; frequency
      002576 90 F6            [ 1]    1     ld a,(y)
      002578 93               [ 1]    2     ldw x,y 
      002579 EE 01            [ 2]    3     ldw x,(1,x)
      00257B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00257F 90 93            [ 1] 2781 	ldw y,x ; frequency 
      002581 85               [ 2] 2782 	popw x  ; duration 
      002582                       2783 beep:  
      002582 89               [ 2] 2784 	pushw x 
      002583 AE F4 24         [ 2] 2785 	ldw x,#TIM2_CLK_FREQ
      002586 65               [ 2] 2786 	divw x,y ; cntr=Fclk/freq 
                                   2787 ; round to nearest integer 
      002587 90 A3 7A 12      [ 2] 2788 	cpw y,#TIM2_CLK_FREQ/2
      00258B 2B 01            [ 1] 2789 	jrmi 2$
      00258D 5C               [ 1] 2790 	incw x 
      00258E                       2791 2$:	 
      00258E 9E               [ 1] 2792 	ld a,xh 
      00258F C7 53 0D         [ 1] 2793 	ld TIM2_ARRH,a 
      002592 9F               [ 1] 2794 	ld a,xl 
      002593 C7 53 0E         [ 1] 2795 	ld TIM2_ARRL,a 
                                   2796 ; 50% duty cycle 
      002596 8C               [ 1] 2797 	ccf 
      002597 56               [ 2] 2798 	rrcw x 
      002598 9E               [ 1] 2799 	ld a,xh 
      002599 C7 53 0F         [ 1] 2800 	ld TIM2_CCR1H,a 
      00259C 9F               [ 1] 2801 	ld a,xl
      00259D C7 53 10         [ 1] 2802 	ld TIM2_CCR1L,a
      0025A0 72 10 53 08      [ 1] 2803 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025A4 72 10 53 00      [ 1] 2804 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025A8 72 10 53 04      [ 1] 2805 	bset TIM2_EGR,#TIM2_EGR_UG
      0025AC 85               [ 2] 2806 	popw x 
      0025AD CD 29 FD         [ 4] 2807 	call pause02
      0025B0 72 11 53 08      [ 1] 2808 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025B4 72 11 53 00      [ 1] 2809 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0025B8 81               [ 4] 2810 	ret 
                                   2811 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   2812 ;-------------------------------
                                   2813 ; BASIC: ADCON 0|1 [,divisor]  
                                   2814 ; disable/enanble ADC 
                                   2815 ;-------------------------------
                           000003  2816 	ONOFF=3 
                           000001  2817 	DIVSOR=1
                           000004  2818 	VSIZE=4 
      0025B9                       2819 power_adc:
      0025B9 CD 19 61         [ 4] 2820 	call arg_list 
      0025BC A1 02            [ 1] 2821 	cp a,#2	
      0025BE 27 12            [ 1] 2822 	jreq 1$
      0025C0 A1 01            [ 1] 2823 	cp a,#1 
      0025C2 27 03            [ 1] 2824 	jreq 0$ 
      0025C4 CC 16 A0         [ 2] 2825 	jp syntax_error 
      0025C7 4F               [ 1] 2826 0$:	clr a 
      0025C8 5F               [ 1] 2827 	clrw x
      0025C9                       2828 	_xpush   ; divisor  
      0025C9 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0025CD 90 F7            [ 1]    2     ld (y),a 
      0025CF 90 EF 01         [ 2]    3     ldw (1,y),x 
      0025D2                       2829 1$: _at_next 
      0025D2 90 E6 03         [ 1]    1     ld a,(3,y)
      0025D5 93               [ 1]    2     ldw x,y 
      0025D6 EE 04            [ 2]    3     ldw x,(4,x)
      0025D8 5D               [ 2] 2830 	tnzw x 
      0025D9 27 25            [ 1] 2831 	jreq 2$ 
      0025DB                       2832 	_xpop
      0025DB 90 F6            [ 1]    1     ld a,(y)
      0025DD 93               [ 1]    2     ldw x,y 
      0025DE EE 01            [ 2]    3     ldw x,(1,x)
      0025E0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025E4                       2833 	_xdrop  
      0025E4 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0025E8 9F               [ 1] 2834 	ld a,xl
      0025E9 A4 07            [ 1] 2835 	and a,#7
      0025EB 4E               [ 1] 2836 	swap a 
      0025EC C7 54 01         [ 1] 2837 	ld ADC_CR1,a
      0025EF 72 16 50 CA      [ 1] 2838 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0025F3 72 10 54 01      [ 1] 2839 	bset ADC_CR1,#ADC_CR1_ADON 
      0025F7                       2840 	_usec_dly 7 
      0025F7 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0025FA 5A               [ 2]    2     decw x
      0025FB 9D               [ 1]    3     nop 
      0025FC 26 FA            [ 1]    4     jrne .-4
      0025FE 20 08            [ 2] 2841 	jra 3$
      002600 72 11 54 01      [ 1] 2842 2$: bres ADC_CR1,#ADC_CR1_ADON
      002604 72 17 50 CA      [ 1] 2843 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002608                       2844 3$:	
      002608 81               [ 4] 2845 	ret
                                   2846 
                                   2847 ;-----------------------------
                                   2848 ; BASIC: ADCREAD (channel)
                                   2849 ; read adc channel {0..5}
                                   2850 ; output:
                                   2851 ;   A 		TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                   2852 ;   X 		value 
                                   2853 ;-----------------------------
      002609                       2854 analog_read:
      002609 CD 19 5C         [ 4] 2855 	call func_args 
      00260C A1 01            [ 1] 2856 	cp a,#1 
      00260E 27 03            [ 1] 2857 	jreq 1$
      002610 CC 16 A0         [ 2] 2858 	jp syntax_error
      002613                       2859 1$: _xpop 
      002613 90 F6            [ 1]    1     ld a,(y)
      002615 93               [ 1]    2     ldw x,y 
      002616 EE 01            [ 2]    3     ldw x,(1,x)
      002618 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00261C A3 00 05         [ 2] 2860 	cpw x,#5 
      00261F 23 05            [ 2] 2861 	jrule 2$
      002621 A6 0A            [ 1] 2862 	ld a,#ERR_BAD_VALUE
      002623 CC 16 A2         [ 2] 2863 	jp tb_error 
      002626 9F               [ 1] 2864 2$: ld a,xl
      002627 C7 00 0E         [ 1] 2865 	ld acc8,a 
      00262A A6 05            [ 1] 2866 	ld a,#5
      00262C C0 00 0E         [ 1] 2867 	sub a,acc8 
      00262F C7 54 00         [ 1] 2868 	ld ADC_CSR,a
      002632 72 16 54 02      [ 1] 2869 	bset ADC_CR2,#ADC_CR2_ALIGN
      002636 72 10 54 01      [ 1] 2870 	bset ADC_CR1,#ADC_CR1_ADON
      00263A 72 0F 54 00 FB   [ 2] 2871 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00263F CE 54 04         [ 2] 2872 	ldw x,ADC_DRH
      002642 A6 84            [ 1] 2873 	ld a,#TK_INTGR
      002644 81               [ 4] 2874 	ret 
                                   2875 
                                   2876 ;-----------------------
                                   2877 ; BASIC: DREAD(pin)
                                   2878 ; Arduino pins 
                                   2879 ; read state of a digital pin 
                                   2880 ; pin# {0..15}
                                   2881 ; output:
                                   2882 ;    A 		TK_INTGR
                                   2883 ;    X      0|1 
                                   2884 ;-------------------------
                           000001  2885 	PINNO=1
                           000001  2886 	VSIZE=1
      002645                       2887 digital_read:
      002645                       2888 	_vars VSIZE 
      002645 52 01            [ 2]    1     sub sp,#VSIZE 
      002647 CD 19 5C         [ 4] 2889 	call func_args
      00264A A1 01            [ 1] 2890 	cp a,#1
      00264C 27 03            [ 1] 2891 	jreq 1$
      00264E CC 16 A0         [ 2] 2892 	jp syntax_error
      002651                       2893 1$: _xpop 
      002651 90 F6            [ 1]    1     ld a,(y)
      002653 93               [ 1]    2     ldw x,y 
      002654 EE 01            [ 2]    3     ldw x,(1,x)
      002656 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00265A A3 00 0F         [ 2] 2894 	cpw x,#15 
      00265D 23 05            [ 2] 2895 	jrule 2$
      00265F A6 0A            [ 1] 2896 	ld a,#ERR_BAD_VALUE
      002661 CC 16 A2         [ 2] 2897 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002664 CD 2B 41         [ 4] 2898 2$:	call select_pin 
      002667 6B 01            [ 1] 2899 	ld (PINNO,sp),a
      002669 E6 01            [ 1] 2900 	ld a,(GPIO_IDR,x)
      00266B 0D 01            [ 1] 2901 	tnz (PINNO,sp)
      00266D 27 05            [ 1] 2902 	jreq 8$
      00266F 44               [ 1] 2903 3$: srl a 
      002670 0A 01            [ 1] 2904 	dec (PINNO,sp)
      002672 26 FB            [ 1] 2905 	jrne 3$ 
      002674 A4 01            [ 1] 2906 8$: and a,#1 
      002676 5F               [ 1] 2907 	clrw x 
      002677 97               [ 1] 2908 	ld xl,a 
      002678 4F               [ 1] 2909 	clr a 
      002679                       2910 	_drop VSIZE
      002679 5B 01            [ 2]    1     addw sp,#VSIZE 
      00267B 81               [ 4] 2911 	ret
                                   2912 
                                   2913 
                                   2914 ;-----------------------
                                   2915 ; BASIC: DWRITE pin,0|1
                                   2916 ; Arduino pins 
                                   2917 ; write to a digital pin 
                                   2918 ; pin# {0..15}
                                   2919 ; output:
                                   2920 ;    A 		TK_INTGR
                                   2921 ;    X      0|1 
                                   2922 ;-------------------------
                           000001  2923 	PINNO=1
                           000002  2924 	PINVAL=2
                           000002  2925 	VSIZE=2
      00267C                       2926 digital_write:
      00267C                       2927 	_vars VSIZE 
      00267C 52 02            [ 2]    1     sub sp,#VSIZE 
      00267E CD 19 61         [ 4] 2928 	call arg_list  
      002681 A1 02            [ 1] 2929 	cp a,#2 
      002683 27 03            [ 1] 2930 	jreq 1$
      002685 CC 16 A0         [ 2] 2931 	jp syntax_error
      002688                       2932 1$: _xpop 
      002688 90 F6            [ 1]    1     ld a,(y)
      00268A 93               [ 1]    2     ldw x,y 
      00268B EE 01            [ 2]    3     ldw x,(1,x)
      00268D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002691 9F               [ 1] 2933 	ld a,xl 
      002692 6B 02            [ 1] 2934 	ld (PINVAL,sp),a
      002694                       2935 	_xpop 
      002694 90 F6            [ 1]    1     ld a,(y)
      002696 93               [ 1]    2     ldw x,y 
      002697 EE 01            [ 2]    3     ldw x,(1,x)
      002699 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00269D A3 00 0F         [ 2] 2936 	cpw x,#15 
      0026A0 23 05            [ 2] 2937 	jrule 2$
      0026A2 A6 0A            [ 1] 2938 	ld a,#ERR_BAD_VALUE
      0026A4 CC 16 A2         [ 2] 2939 	jp tb_error 
      0026A7 CD 2B 41         [ 4] 2940 2$:	call select_pin 
      0026AA 6B 01            [ 1] 2941 	ld (PINNO,sp),a 
      0026AC A6 01            [ 1] 2942 	ld a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0026AE 0D 01            [ 1] 2943 	tnz (PINNO,sp)
      0026B0 27 05            [ 1] 2944 	jreq 4$
      0026B2 48               [ 1] 2945 3$: sll a
      0026B3 0A 01            [ 1] 2946 	dec (PINNO,sp)
      0026B5 26 FB            [ 1] 2947 	jrne 3$
      0026B7 0D 02            [ 1] 2948 4$: tnz (PINVAL,sp)
      0026B9 26 05            [ 1] 2949 	jrne 5$
      0026BB 43               [ 1] 2950 	cpl a 
      0026BC E4 00            [ 1] 2951 	and a,(GPIO_ODR,x)
      0026BE 20 02            [ 2] 2952 	jra 8$
      0026C0 EA 00            [ 1] 2953 5$: or a,(GPIO_ODR,x)
      0026C2 E7 00            [ 1] 2954 8$: ld (GPIO_ODR,x),a 
      0026C4                       2955 	_drop VSIZE 
      0026C4 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026C6 81               [ 4] 2956 	ret
                                   2957 
                                   2958 
                                   2959 ;-----------------------
                                   2960 ; BASIC: STOP
                                   2961 ; stop progam execution  
                                   2962 ; without resetting pointers 
                                   2963 ; the program is resumed
                                   2964 ; with RUN 
                                   2965 ;-------------------------
      0026C7                       2966 stop:
      0026C7 72 00 00 22 02   [ 2] 2967 	btjt flags,#FRUN,2$
      0026CC 4F               [ 1] 2968 	clr a
      0026CD 81               [ 4] 2969 	ret 
      0026CE                       2970 2$:	 
                                   2971 ; create space on cstack to save context 
      0026CE AE 26 F5         [ 2] 2972 	ldw x,#break_point 
      0026D1 CD 09 A1         [ 4] 2973 	call puts 
      0026D4                       2974 	_drop 2 ;drop return address 
      0026D4 5B 02            [ 2]    1     addw sp,#2 
      0026D6                       2975 	_vars CTXT_SIZE ; context size 
      0026D6 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0026D8 CD 20 55         [ 4] 2976 	call save_context 
      0026DB AE 16 68         [ 2] 2977 	ldw x,#tib 
      0026DE CF 00 04         [ 2] 2978 	ldw basicptr,x
      0026E1 7F               [ 1] 2979 	clr (x)
      0026E2 72 5F 00 03      [ 1] 2980 	clr count  
      0026E6 5F               [ 1] 2981 	clrw x 
      0026E7 CF 00 00         [ 2] 2982 	ldw in.w,x
      0026EA 72 11 00 22      [ 1] 2983 	bres flags,#FRUN 
      0026EE 72 18 00 22      [ 1] 2984 	bset flags,#FBREAK
      0026F2 CC 17 4B         [ 2] 2985 	jp interpreter 
      0026F5 0A 62 72 65 61 6B 20  2986 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2987 
                                   2988 ;-----------------------
                                   2989 ; BASIC: NEW
                                   2990 ; from command line only 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   2991 ; free program memory
                                   2992 ; and clear variables 
                                   2993 ;------------------------
      002713                       2994 new: 
      002713 72 01 00 22 01   [ 2] 2995 	btjf flags,#FRUN,0$ 
      002718 81               [ 4] 2996 	ret 
      002719                       2997 0$:	
      002719 CD 14 FC         [ 4] 2998 	call clear_basic 
      00271C 81               [ 4] 2999 	ret 
                                   3000 
                                   3001 ;-----------------------------------
                                   3002 ; BASIC: ERASE \E | \F 
                                   3003 ; erase all block in range from 
                                   3004 ;  'app_space' to FLASH end (0x20000)
                                   3005 ;  or all EEPROM 
                                   3006 ; that contains a non zero byte.  
                                   3007 ;-----------------------------------
                           000001  3008 	LIMIT=1 
                           000003  3009 	VSIZE = 3 
      00271D                       3010 erase:
      00271D 72 5F 00 18      [ 1] 3011 	clr farptr 
      002721                       3012 	_vars VSIZE 
      002721 52 03            [ 2]    1     sub sp,#VSIZE 
      002723 CD 17 A1         [ 4] 3013 	call next_token 
      002726 A1 04            [ 1] 3014 	cp a,#TK_CHAR 
      002728 27 03            [ 1] 3015 	jreq 0$ 
      00272A CC 16 A0         [ 2] 3016 	jp syntax_error
      00272D CD 17 F0         [ 4] 3017 0$: call get_char 
      002730 A4 DF            [ 1] 3018 	and a,#0XDF 
      002732 A1 45            [ 1] 3019 	cp a,#'E
      002734 26 0C            [ 1] 3020 	jrne 1$
      002736 AE 40 00         [ 2] 3021 	ldw x,#EEPROM_BASE 
      002739 CF 00 19         [ 2] 3022 	ldw farptr+1,x 
      00273C AE 47 FF         [ 2] 3023 	ldw x,#EEPROM_END
      00273F 4F               [ 1] 3024 	clr a 
      002740 20 15            [ 2] 3025 	jra 3$ 
      002742 A1 46            [ 1] 3026 1$: cp a,#'F 
      002744 27 06            [ 1] 3027 	jreq 2$
      002746 AE 15 E0         [ 2] 3028 	ldw x,#err_bad_value
      002749 CC 16 A2         [ 2] 3029 	jp tb_error
      00274C                       3030 2$:
      00274C AE 36 00         [ 2] 3031 	ldw x,#app_space  
      00274F CF 00 19         [ 2] 3032 	ldw farptr+1,x 
      002752 A6 02            [ 1] 3033 	ld a,#(FLASH_END>>16)&0XFF 
      002754 AE 7F FF         [ 2] 3034 	ldw x,#FLASH_END&0xffff
      002757                       3035 3$:
      002757 6B 01            [ 1] 3036 	ld (LIMIT,sp),a 
      002759 1F 02            [ 2] 3037 	ldw (LIMIT+1,sp),x 
                                   3038  ; operation done from RAM
                                   3039  ; copy code to RAM in tib   
      00275B CD 07 42         [ 4] 3040 	call move_erase_to_ram
      00275E                       3041 4$:	 
      00275E CD 08 C4         [ 4] 3042     call scan_block 
      002761 27 08            [ 1] 3043 	jreq 5$  ; block already erased 
      002763 A6 45            [ 1] 3044     ld a,#'E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002765 CD 09 44         [ 4] 3045     call putc 
      002768 CD 07 C0         [ 4] 3046 	call block_erase   
                                   3047 ; this block is clean, next  
      00276B AE 00 80         [ 2] 3048 5$:	ldw x,#BLOCK_SIZE
      00276E CD 08 B6         [ 4] 3049 	call incr_farptr
                                   3050 ; check limit, 24 bit substraction  	
      002771 7B 01            [ 1] 3051 	ld a,(LIMIT,sp)
      002773 1E 02            [ 2] 3052 	ldw x,(LIMIT+1,sp)
      002775 72 B0 00 19      [ 2] 3053 	subw x,farptr+1
      002779 C2 00 18         [ 1] 3054 	sbc a,farptr 
      00277C 22 E0            [ 1] 3055 	jrugt 4$ 
      00277E CD 14 FC         [ 4] 3056 9$: call clear_basic
      002781 1E 02            [ 2] 3057 	ldw x,(LIMIT+1,sp)
      002783 A3 47 FF         [ 2] 3058 	cpw x,#EEPROM_END
      002786 26 03            [ 1] 3059 	jrne 10$
      002788 CD 1D 18         [ 4] 3060 	call func_eefree 
      00278B                       3061 10$:
      00278B                       3062 	_drop VSIZE 
      00278B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00278D 81               [ 4] 3063 	ret 
                                   3064 	
                                   3065 
                                   3066 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3067 ;  check for application signature 
                                   3068 ; output:
                                   3069 ;   Carry    0 app present 
                                   3070 ;            1 no app installed  
                                   3071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00278E                       3072 qsign: 
      00278E CE 36 00         [ 2] 3073 	ldw x,app_sign 
      002791 C3 28 4E         [ 2] 3074 	cpw x,SIGNATURE ; "BC" 
      002794 81               [ 4] 3075 	ret 
                                   3076 
                                   3077 ;--------------------------------------
                                   3078 ;  fill write buffer 
                                   3079 ;  input:
                                   3080 ;    y  point to output buffer 
                                   3081 ;    x  point to source 
                                   3082 ;    a  bytes to write in buffer 
                                   3083 ;  output:
                                   3084 ;    y   += A 
                                   3085 ;    X   += A 
                                   3086 ;    A   0 
                                   3087 ;---------------------------------------
      002795                       3088 fill_write_buffer:
      002795 88               [ 1] 3089 	push a 
      002796 4D               [ 1] 3090 	tnz a 
      002797 27 0A            [ 1] 3091 	jreq 9$ 
      002799 F6               [ 1] 3092 1$: ld a,(x)
      00279A 5C               [ 1] 3093 	incw x 
      00279B 90 F7            [ 1] 3094 	ld (y),a 
      00279D 90 5C            [ 1] 3095 	incw y 
      00279F 0A 01            [ 1] 3096 	dec (1,sp) 
      0027A1 26 F6            [ 1] 3097 	jrne 1$ 
      0027A3 84               [ 1] 3098 9$:	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      0027A4 81               [ 4] 3099     ret 	
                                   3100 
                                   3101 ;--------------------------------------
                                   3102 ;  fill pad buffer with zero 
                                   3103 ;  input:
                                   3104 ;	none 
                                   3105 ;  output:
                                   3106 ;    y     buffer address  
                                   3107 ;--------------------------------------
      0027A5                       3108 clear_block_buffer:
      0027A5 88               [ 1] 3109 	push a 
      0027A6 90 AE 16 B8      [ 2] 3110 	ldw y,#block_buffer 
      0027AA 90 89            [ 2] 3111 	pushw y
      0027AC A6 80            [ 1] 3112 	ld a,#BLOCK_SIZE   
      0027AE 90 7F            [ 1] 3113 1$:	clr (y)
      0027B0 90 5C            [ 1] 3114 	incw y
      0027B2 4A               [ 1] 3115 	dec a  
      0027B3 26 F9            [ 1] 3116 	jrne 1$ 	
      0027B5 90 85            [ 2] 3117 9$: popw y 
      0027B7 84               [ 1] 3118 	pop a 			
      0027B8 81               [ 4] 3119 	ret 
                                   3120 
                                   3121 
                                   3122 ;---------------------------------------
                                   3123 ; BASIC: SAVE
                                   3124 ; write application from RAM to FLASH
                                   3125 ;--------------------------------------
                           000001  3126 	XTEMP=1
                           000003  3127 	COUNT=3  ; last count bytes written 
                           000004  3128 	CNT_LO=4 ; count low byte 
                           000005  3129 	TOWRITE=5 ; how bytes left to write  
                           000006  3130 	VSIZE=6 
      0027B9                       3131 save_app:
      0027B9 89               [ 2] 3132 	pushw x 
      0027BA 90 89            [ 2] 3133 	pushw y 
      0027BC                       3134 	_vars VSIZE
      0027BC 52 06            [ 2]    1     sub sp,#VSIZE 
      0027BE CD 27 8E         [ 4] 3135 	call qsign 
      0027C1 26 09            [ 1] 3136 	jrne 1$
      0027C3 AE 28 50         [ 2] 3137 	ldw x,#CANT_DO 
      0027C6 CD 09 A1         [ 4] 3138 	call puts 
      0027C9 CC 28 48         [ 2] 3139 	jp 9$
      0027CC                       3140 1$: 
      0027CC CE 00 1B         [ 2] 3141 	ldw x,txtbgn
      0027CF C3 00 1D         [ 2] 3142 	cpw x,txtend 
      0027D2 25 09            [ 1] 3143 	jrult 2$ 
      0027D4 AE 28 92         [ 2] 3144 	ldw x,#NO_APP
      0027D7 CD 09 A1         [ 4] 3145 	call puts 
      0027DA CC 28 48         [ 2] 3146 	jp 9$
      0027DD                       3147 2$: 
                                   3148 ; block programming flash
                                   3149 ; must be done from RAM
                                   3150 ; moved in tib  
      0027DD CD 07 82         [ 4] 3151 	call move_prg_to_ram
                                   3152 ; initialize farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3153 ; to app_sign address 
      0027E0 72 5F 00 18      [ 1] 3154 	clr farptr 
      0027E4 AE 36 00         [ 2] 3155 	ldw x,#app_sign 
      0027E7 CF 00 19         [ 2] 3156 	ldw farptr+1,x
                                   3157 ; initialize local variables 
      0027EA CD 1E 34         [ 4] 3158 	call prog_size
      0027ED 1F 05            [ 2] 3159 	ldw (TOWRITE,sp),x
      0027EF 0F 03            [ 1] 3160 	clr (COUNT,sp)
                                   3161 ; first bock 
                                   3162 ; containt signature 2 bytes 
                                   3163 ; and size 	2 bytes 
                                   3164 ; use Y as pointer to block_buffer
      0027F1 CD 27 A5         [ 4] 3165 	call clear_block_buffer ; -- y=*block_buffer	
                                   3166 ; write signature
      0027F4 CE 28 4E         [ 2] 3167 	ldw x,SIGNATURE ; "BC" 
      0027F7 90 FF            [ 2] 3168 	ldw (y),x 
      0027F9 72 A9 00 02      [ 2] 3169 	addw y,#2
      0027FD 1E 05            [ 2] 3170 	ldw x,(TOWRITE,sp)
      0027FF 90 FF            [ 2] 3171 	ldw (y),x
      002801 72 A9 00 02      [ 2] 3172 	addw y,#2   
      002805 A6 7C            [ 1] 3173 	ld a,#(BLOCK_SIZE-4)
      002807 6B 04            [ 1] 3174 	ld (CNT_LO,sp),a 
      002809 A3 00 7C         [ 2] 3175 	cpw x,#(BLOCK_SIZE-4) 
      00280C 22 01            [ 1] 3176 	jrugt 3$
      00280E 9F               [ 1] 3177 	ld a,xl 
      00280F 6B 04            [ 1] 3178 3$:	ld (CNT_LO,sp),a   
      002811 CE 00 1B         [ 2] 3179 	ldw x,txtbgn 
      002814 1F 01            [ 2] 3180 	ldw (XTEMP,sp),x 
      002816                       3181 32$: 
      002816 1E 01            [ 2] 3182 	ldw x,(XTEMP,sp)
      002818 7B 04            [ 1] 3183 	ld a,(CNT_LO,sp)
      00281A CD 27 95         [ 4] 3184 	call fill_write_buffer 
      00281D 1F 01            [ 2] 3185 	ldw (XTEMP,sp),x 
      00281F AE 16 B8         [ 2] 3186 	ldw x,#block_buffer
      002822 CD 07 9C         [ 4] 3187 	call write_buffer
      002825 AE 00 80         [ 2] 3188 	ldw x,#BLOCK_SIZE 
      002828 CD 08 B6         [ 4] 3189 	call incr_farptr  
                                   3190 ; following blocks 
      00282B 1E 01            [ 2] 3191 	ldw x,(XTEMP,sp)
      00282D C3 00 1D         [ 2] 3192 	cpw x,txtend 
      002830 24 16            [ 1] 3193 	jruge 9$ 
      002832 1E 05            [ 2] 3194 	ldw x,(TOWRITE,sp)
      002834 72 F0 03         [ 2] 3195 	subw x,(COUNT,sp)
      002837 1F 05            [ 2] 3196 	ldw (TOWRITE,sp),x 
      002839 A6 80            [ 1] 3197 	ld a,#BLOCK_SIZE 
      00283B A3 00 80         [ 2] 3198 	cpw x,#BLOCK_SIZE 
      00283E 24 01            [ 1] 3199 	jruge 4$ 
      002840 9F               [ 1] 3200 	ld a,xl 
      002841 6B 04            [ 1] 3201 4$:	ld (CNT_LO,sp),a 
      002843 CD 27 A5         [ 4] 3202 	call clear_block_buffer 
      002846 20 CE            [ 2] 3203 	jra 32$ 
      002848                       3204 9$:	_drop VSIZE 
      002848 5B 06            [ 2]    1     addw sp,#VSIZE 
      00284A 90 85            [ 2] 3205     popw y 
      00284C 85               [ 2] 3206 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00284D 81               [ 4] 3207 	ret 
                                   3208 
                                   3209 
      00284E 42 43                 3210 SIGNATURE: .ascii "BC"
      002850 43 61 6E 27 74 20 66  3211 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      002892 4E 6F 20 61 70 70 6C  3212 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3213 
                                   3214 ;---------------------
                                   3215 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3216 ; write 1 or more byte to FLASH or EEPROM
                                   3217 ; starting at address  
                                   3218 ; input:
                                   3219 ;   expr1  	is address 
                                   3220 ;   expr2,...,exprn   are bytes to write
                                   3221 ; output:
                                   3222 ;   none 
                                   3223 ;---------------------
      0028A8                       3224 write:
      0028A8 CD 1A 83         [ 4] 3225 	call expression
      0028AB A1 84            [ 1] 3226 	cp a,#TK_INTGR 
      0028AD 27 03            [ 1] 3227 	jreq 0$
      0028AF CC 16 A0         [ 2] 3228 	jp syntax_error
      0028B2                       3229 0$: _xpop 
      0028B2 90 F6            [ 1]    1     ld a,(y)
      0028B4 93               [ 1]    2     ldw x,y 
      0028B5 EE 01            [ 2]    3     ldw x,(1,x)
      0028B7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028BB C7 00 18         [ 1] 3230 	ld farptr,a 
      0028BE CF 00 19         [ 2] 3231 	ldw ptr16,x 
      0028C1                       3232 1$:	
      0028C1 CD 17 A1         [ 4] 3233 	call next_token 
      0028C4 A1 08            [ 1] 3234 	cp a,#TK_COMMA 
      0028C6 27 02            [ 1] 3235 	jreq 2$ 
      0028C8 20 20            [ 2] 3236 	jra 9$ ; no more data 
      0028CA CD 1A 83         [ 4] 3237 2$:	call expression
      0028CD A1 84            [ 1] 3238 	cp a,#TK_INTGR
      0028CF 27 03            [ 1] 3239 	jreq 3$
      0028D1 CC 16 A0         [ 2] 3240 	jp syntax_error
      0028D4                       3241 3$:	_xpop 
      0028D4 90 F6            [ 1]    1     ld a,(y)
      0028D6 93               [ 1]    2     ldw x,y 
      0028D7 EE 01            [ 2]    3     ldw x,(1,x)
      0028D9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0028DD 9F               [ 1] 3242 	ld a,xl 
      0028DE 5F               [ 1] 3243 	clrw x 
      0028DF CD 07 E6         [ 4] 3244 	call write_byte
      0028E2 AE 00 01         [ 2] 3245 	ldw x,#1 
      0028E5 CD 08 B6         [ 4] 3246 	call incr_farptr 
      0028E8 20 D7            [ 2] 3247 	jra 1$ 
      0028EA                       3248 9$:
      0028EA 81               [ 4] 3249 	ret 
                                   3250 
                                   3251 
                                   3252 ;---------------------
                                   3253 ;BASIC: CHAR(expr)
                                   3254 ; évaluate expression 
                                   3255 ; and take the 7 least 
                                   3256 ; bits as ASCII character
                                   3257 ; output: 
                                   3258 ; 	A char 
                                   3259 ;---------------------
      0028EB                       3260 char:
      0028EB CD 19 5C         [ 4] 3261 	call func_args 
      0028EE A1 01            [ 1] 3262 	cp a,#1
      0028F0 27 03            [ 1] 3263 	jreq 1$
      0028F2 CC 16 A0         [ 2] 3264 	jp syntax_error
      0028F5                       3265 1$:	_xpop
      0028F5 90 F6            [ 1]    1     ld a,(y)
      0028F7 93               [ 1]    2     ldw x,y 
      0028F8 EE 01            [ 2]    3     ldw x,(1,x)
      0028FA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028FE 9F               [ 1] 3266 	ld a,xl
      0028FF A4 7F            [ 1] 3267 	and a,#0x7f 
      002901 81               [ 4] 3268 	ret
                                   3269 
                                   3270 ;---------------------
                                   3271 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3272 ; extract first character 
                                   3273 ; of string argument 
                                   3274 ; output:
                                   3275 ;    A:X    int24 
                                   3276 ;---------------------
      002902                       3277 ascii:
      002902 A6 06            [ 1] 3278 	ld a,#TK_LPAREN
      002904 CD 19 4F         [ 4] 3279 	call expect 
      002907 CD 17 A1         [ 4] 3280 	call next_token 
      00290A A1 02            [ 1] 3281 	cp a,#TK_QSTR 
      00290C 27 0E            [ 1] 3282 	jreq 1$
      00290E A1 04            [ 1] 3283 	cp a,#TK_CHAR 
      002910 27 12            [ 1] 3284 	jreq 2$ 
      002912 A1 82            [ 1] 3285 	cp a,#TK_CFUNC 
      002914 27 03            [ 1] 3286 	jreq 0$
      002916 CC 16 A0         [ 2] 3287 	jp syntax_error
      002919                       3288 0$: ; cfunc 
      002919 FD               [ 4] 3289 	call (x)
      00291A 20 0B            [ 2] 3290 	jra 3$
      00291C                       3291 1$: ; quoted string 
      00291C F6               [ 1] 3292 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      00291D 88               [ 1] 3293 	push a  
      00291E CD 17 C7         [ 4] 3294 	call skip_string
      002921 84               [ 1] 3295 	pop a  	
      002922 20 03            [ 2] 3296 	jra 3$ 
      002924                       3297 2$: ; character 
      002924 CD 17 F0         [ 4] 3298 	call get_char 
      002927 5F               [ 1] 3299 3$:	clrw x 
      002928 02               [ 1] 3300 	rlwa x   
      002929                       3301 4$:	_xpush  
      002929 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00292D 90 F7            [ 1]    2     ld (y),a 
      00292F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002932 A6 07            [ 1] 3302 	ld a,#TK_RPAREN 
      002934 CD 19 4F         [ 4] 3303 	call expect
      002937                       3304 9$:	
      002937                       3305 	_xpop  
      002937 90 F6            [ 1]    1     ld a,(y)
      002939 93               [ 1]    2     ldw x,y 
      00293A EE 01            [ 2]    3     ldw x,(1,x)
      00293C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002940 81               [ 4] 3306 	ret 
                                   3307 
                                   3308 ;---------------------
                                   3309 ;BASIC: KEY
                                   3310 ; wait for a character 
                                   3311 ; received from STDIN 
                                   3312 ; input:
                                   3313 ;	none 
                                   3314 ; output:
                                   3315 ;	a	 character 
                                   3316 ;---------------------
      002941                       3317 key:
      002941 CD 09 54         [ 4] 3318 	call getc 
      002944 81               [ 4] 3319 	ret
                                   3320 
                                   3321 ;----------------------
                                   3322 ; BASIC: QKEY
                                   3323 ; Return true if there 
                                   3324 ; is a character in 
                                   3325 ; waiting in STDIN 
                                   3326 ; input:
                                   3327 ;  none 
                                   3328 ; output:
                                   3329 ;   A     0|-1
                                   3330 ;-----------------------
      002945                       3331 qkey:: 
      002945 5F               [ 1] 3332 	clrw x 
      002946 C6 00 2E         [ 1] 3333 	ld a,rx1_head
      002949 C0 00 2F         [ 1] 3334 	sub a,rx1_tail 
      00294C 27 03            [ 1] 3335 	jreq 9$ 
      00294E 53               [ 2] 3336 	cplw x
      00294F A6 FF            [ 1] 3337 	ld a,#255    
      002951                       3338 9$: 
      002951 81               [ 4] 3339 	ret 
                                   3340 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3341 ;---------------------
                                   3342 ; BASIC: GPIO(port,reg)
                                   3343 ; return gpio register address 
                                   3344 ; expr {PORTA..PORTI}
                                   3345 ; input:
                                   3346 ;   none 
                                   3347 ; output:
                                   3348 ;   A:X 	gpio register address
                                   3349 ;----------------------------
                                   3350 ;	N=PORT
                                   3351 ;	T=REG 
      002952                       3352 gpio:
      002952 CD 19 5C         [ 4] 3353 	call func_args 
      002955 A1 02            [ 1] 3354 	cp a,#2
      002957 27 03            [ 1] 3355 	jreq 1$
      002959 CC 16 A0         [ 2] 3356 	jp syntax_error  
      00295C                       3357 1$:	_at_next 
      00295C 90 E6 03         [ 1]    1     ld a,(3,y)
      00295F 93               [ 1]    2     ldw x,y 
      002960 EE 04            [ 2]    3     ldw x,(4,x)
      002962 A3 50 00         [ 2] 3358 	cpw x,#PA_BASE 
      002965 2B 16            [ 1] 3359 	jrmi bad_port
      002967 A3 50 29         [ 2] 3360 	cpw x,#PI_BASE+1 
      00296A 2A 11            [ 1] 3361 	jrpl bad_port
      00296C 89               [ 2] 3362 	pushw x 
      00296D                       3363 	_xpop
      00296D 90 F6            [ 1]    1     ld a,(y)
      00296F 93               [ 1]    2     ldw x,y 
      002970 EE 01            [ 2]    3     ldw x,(1,x)
      002972 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002976 72 FB 01         [ 2] 3364 	addw x,(1,sp)
      002979                       3365 	_drop 2 
      002979 5B 02            [ 2]    1     addw sp,#2 
      00297B 4F               [ 1] 3366 	clr a 
      00297C 81               [ 4] 3367 	ret
      00297D                       3368 bad_port:
      00297D A6 0A            [ 1] 3369 	ld a,#ERR_BAD_VALUE
      00297F CC 16 A2         [ 2] 3370 	jp tb_error
                                   3371 
                                   3372 
                                   3373 ;-------------------------
                                   3374 ; BASIC: UFLASH 
                                   3375 ; return free flash address
                                   3376 ; input:
                                   3377 ;  none 
                                   3378 ; output:
                                   3379 ;	A		TK_INTGR
                                   3380 ;   xstack	free address 
                                   3381 ;---------------------------
      002982                       3382 uflash:
      002982 CE 36 00         [ 2] 3383 	ldw x,app_sign
      002985 A3 10 93         [ 2] 3384 	cpw x,#4243 ; signature "BC" 
      002988 27 08            [ 1] 3385 	jreq 1$
      00298A CE 36 02         [ 2] 3386 	ldw x,app_size 
      00298D 1C 36 04         [ 2] 3387 	addw x,#app
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002990 20 03            [ 2] 3388 	jra 2$
      002992 AE 36 00         [ 2] 3389 1$:	ldw x,#app_space 
      002995 4F               [ 1] 3390 2$:	clr a 
      002996 81               [ 4] 3391 	ret 
                                   3392 
                                   3393 
                                   3394 ;---------------------
                                   3395 ; BASIC: USR(addr[,arg])
                                   3396 ; execute a function written 
                                   3397 ; in binary code.
                                   3398 ; binary fonction should 
                                   3399 ; return token attribute in A 
                                   3400 ; and value in YL:X. 
                                   3401 ; input:
                                   3402 ;   addr	routine address 
                                   3403 ;   arg 	is an optional argument 
                                   3404 ; output:
                                   3405 ;   A 		token attribute 
                                   3406 ;   xstack  returned value 
                                   3407 ;---------------------
      002997                       3408 usr:
      002997 89               [ 2] 3409 	pushw x 
      002998 90 89            [ 2] 3410 	pushw y 	
      00299A CD 19 5C         [ 4] 3411 	call func_args 
      00299D A1 01            [ 1] 3412 	cp a,#1 
      00299F 27 07            [ 1] 3413 	jreq 1$
      0029A1 A1 02            [ 1] 3414 	cp a,#2
      0029A3 27 03            [ 1] 3415 	jreq 1$  
      0029A5 CC 16 A0         [ 2] 3416 	jp syntax_error 
      0029A8 88               [ 1] 3417 1$: push a 
      0029A9                       3418 	_xpop 
      0029A9 90 F6            [ 1]    1     ld a,(y)
      0029AB 93               [ 1]    2     ldw x,y 
      0029AC EE 01            [ 2]    3     ldw x,(1,x)
      0029AE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029B2 90 93            [ 1] 3419 	ldw y,x  ; arg|addr 
      0029B4 84               [ 1] 3420     pop a 
      0029B5 A1 01            [ 1] 3421 	cp a,#1 
      0029B7 27 0A            [ 1] 3422 	jreq 3$
      0029B9                       3423 	_xpop  ; x=code addr  
      0029B9 90 F6            [ 1]    1     ld a,(y)
      0029BB 93               [ 1]    2     ldw x,y 
      0029BC EE 01            [ 2]    3     ldw x,(1,x)
      0029BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C2 51               [ 1] 3424 	exgw x,y ; y=code addr, x=arg 
      0029C3 90 FD            [ 4] 3425 3$: call (y)
      0029C5 88               [ 1] 3426 	push a 
      0029C6 90 9F            [ 1] 3427 	ld a,yl  
      0029C8                       3428 	_xpush 
      0029C8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0029CC 90 F7            [ 1]    2     ld (y),a 
      0029CE 90 EF 01         [ 2]    3     ldw (1,y),x 
      0029D1 84               [ 1] 3429 	pop a 
      0029D2 90 85            [ 2] 3430 	popw y 
      0029D4 85               [ 2] 3431 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029D5 81               [ 4] 3432 	ret 
                                   3433 
                                   3434 
                                   3435 ;------------------------------
                                   3436 ; BASIC: BYE 
                                   3437 ; halt mcu in its lowest power mode 
                                   3438 ; wait for reset or external interrupt
                                   3439 ; do a cold start on wakeup.
                                   3440 ;------------------------------
      0029D6                       3441 bye:
      0029D6 72 0D 52 30 FB   [ 2] 3442 	btjf UART1_SR,#UART_SR_TC,.
      0029DB 8E               [10] 3443 	halt
      0029DC CC 00 C3         [ 2] 3444 	jp cold_start  
                                   3445 
                                   3446 ;----------------------------------
                                   3447 ; BASIC: SLEEP 
                                   3448 ; halt mcu until reset or external
                                   3449 ; interrupt.
                                   3450 ; Resume progam after SLEEP command
                                   3451 ;----------------------------------
      0029DF                       3452 sleep:
      0029DF 72 0D 52 30 FB   [ 2] 3453 	btjf UART1_SR,#UART_SR_TC,.
      0029E4 72 16 00 22      [ 1] 3454 	bset flags,#FSLEEP
      0029E8 8E               [10] 3455 	halt 
      0029E9 81               [ 4] 3456 	ret 
                                   3457 
                                   3458 ;-------------------------------
                                   3459 ; BASIC: PAUSE expr 
                                   3460 ; suspend execution for n msec.
                                   3461 ; input:
                                   3462 ;	none
                                   3463 ; output:
                                   3464 ;	none 
                                   3465 ;------------------------------
      0029EA                       3466 pause:
      0029EA CD 1A 83         [ 4] 3467 	call expression
      0029ED A1 84            [ 1] 3468 	cp a,#TK_INTGR
      0029EF 27 03            [ 1] 3469 	jreq 1$ 
      0029F1 CC 16 A0         [ 2] 3470 	jp syntax_error
      0029F4                       3471 1$: _xpop 
      0029F4 90 F6            [ 1]    1     ld a,(y)
      0029F6 93               [ 1]    2     ldw x,y 
      0029F7 EE 01            [ 2]    3     ldw x,(1,x)
      0029F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029FD                       3472 pause02:
      0029FD CF 00 12         [ 2] 3473 	ldw timer,x 
      002A00 CE 00 12         [ 2] 3474 1$: ldw x,timer 
      002A03 5D               [ 2] 3475 	tnzw x 
      002A04 27 03            [ 1] 3476 	jreq 2$
      002A06 8F               [10] 3477 	wfi 
      002A07 26 F7            [ 1] 3478 	jrne 1$
      002A09 4F               [ 1] 3479 2$:	clr a 
      002A0A 81               [ 4] 3480 	ret 
                                   3481 
                                   3482 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3483 ; BASIC: AWU expr
                                   3484 ; halt mcu for 'expr' milliseconds
                                   3485 ; use Auto wakeup peripheral
                                   3486 ; all oscillators stopped except LSI
                                   3487 ; range: 1ms - 511ms
                                   3488 ; input:
                                   3489 ;  none
                                   3490 ; output:
                                   3491 ;  none:
                                   3492 ;------------------------------
      002A0B                       3493 awu:
      002A0B CD 1A 83         [ 4] 3494   call expression
      002A0E A1 84            [ 1] 3495   cp a,#TK_INTGR
      002A10 27 03            [ 1] 3496   jreq 1$
      002A12 CC 16 A0         [ 2] 3497   jp syntax_error
      002A15                       3498 1$: _xpop 
      002A15 90 F6            [ 1]    1     ld a,(y)
      002A17 93               [ 1]    2     ldw x,y 
      002A18 EE 01            [ 2]    3     ldw x,(1,x)
      002A1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A1E                       3499 awu02:
      002A1E A3 14 00         [ 2] 3500   cpw x,#5120
      002A21 2B 0C            [ 1] 3501   jrmi 1$ 
      002A23 35 0F 50 F2      [ 1] 3502   mov AWU_TBR,#15 
      002A27 A6 1E            [ 1] 3503   ld a,#30
      002A29 62               [ 2] 3504   div x,a
      002A2A A6 10            [ 1] 3505   ld a,#16
      002A2C 62               [ 2] 3506   div x,a 
      002A2D 20 1E            [ 2] 3507   jra 4$
      002A2F                       3508 1$: 
      002A2F A3 08 00         [ 2] 3509   cpw x,#2048
      002A32 2B 09            [ 1] 3510   jrmi 2$ 
      002A34 35 0E 50 F2      [ 1] 3511   mov AWU_TBR,#14
      002A38 A6 50            [ 1] 3512   ld a,#80
      002A3A 62               [ 2] 3513   div x,a 
      002A3B 20 10            [ 2] 3514   jra 4$   
      002A3D                       3515 2$:
      002A3D 35 07 50 F2      [ 1] 3516   mov AWU_TBR,#7
      002A41                       3517 3$:  
                                   3518 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A41 A3 00 40         [ 2] 3519   cpw x,#64 
      002A44 23 07            [ 2] 3520   jrule 4$ 
      002A46 72 5C 50 F2      [ 1] 3521   inc AWU_TBR 
      002A4A 54               [ 2] 3522   srlw x 
      002A4B 20 F4            [ 2] 3523   jra 3$ 
      002A4D                       3524 4$:
      002A4D 9F               [ 1] 3525   ld a, xl
      002A4E 4A               [ 1] 3526   dec a 
      002A4F 27 01            [ 1] 3527   jreq 5$
      002A51 4A               [ 1] 3528   dec a 	
      002A52                       3529 5$: 
      002A52 A4 3E            [ 1] 3530   and a,#0x3e 
      002A54 C7 50 F1         [ 1] 3531   ld AWU_APR,a 
      002A57 72 18 50 F0      [ 1] 3532   bset AWU_CSR,#AWU_CSR_AWUEN
      002A5B 8E               [10] 3533   halt 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                                   3534 
      002A5C 81               [ 4] 3535   ret 
                                   3536 
                                   3537 ;------------------------------
                                   3538 ; BASIC: TICKS
                                   3539 ; return msec ticks counter value 
                                   3540 ; input:
                                   3541 ; 	none 
                                   3542 ; output:
                                   3543 ;	X 		TK_INTGR
                                   3544 ;-------------------------------
      002A5D                       3545 get_ticks:
      002A5D C6 00 0F         [ 1] 3546 	ld a,ticks 
      002A60 CE 00 10         [ 2] 3547 	ldw x,ticks+1 
      002A63 81               [ 4] 3548 	ret 
                                   3549 
                                   3550 ;------------------------------
                                   3551 ; BASIC: ABS(expr)
                                   3552 ; return absolute value of expr.
                                   3553 ; input:
                                   3554 ;   none
                                   3555 ; output:
                                   3556 ;   xstack    positive int24 
                                   3557 ;-------------------------------
      002A64                       3558 abs:
      002A64 CD 19 5C         [ 4] 3559 	call func_args 
      002A67 A1 01            [ 1] 3560 	cp a,#1 
      002A69 27 03            [ 1] 3561 	jreq 0$ 
      002A6B CC 16 A0         [ 2] 3562 	jp syntax_error
      002A6E                       3563 0$:  
      002A6E CD 01 DF         [ 4] 3564 	call abs24 
      002A71                       3565 	_xpop 
      002A71 90 F6            [ 1]    1     ld a,(y)
      002A73 93               [ 1]    2     ldw x,y 
      002A74 EE 01            [ 2]    3     ldw x,(1,x)
      002A76 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A7A 81               [ 4] 3566 	ret 
                                   3567 
                                   3568 ;------------------------------
                                   3569 ; BASIC: LSHIFT(expr1,expr2)
                                   3570 ; logical shift left expr1 by 
                                   3571 ; expr2 bits 
                                   3572 ; output:
                                   3573 ; 	A 		TK_INTGR
                                   3574 ;   X 		result 
                                   3575 ;------------------------------
      002A7B                       3576 lshift:
      002A7B CD 19 5C         [ 4] 3577 	call func_args
      002A7E A1 02            [ 1] 3578 	cp a,#2 
      002A80 27 03            [ 1] 3579 	jreq 1$
      002A82 CC 16 A0         [ 2] 3580 	jp syntax_error
      002A85                       3581 1$: _xpop 
      002A85 90 F6            [ 1]    1     ld a,(y)
      002A87 93               [ 1]    2     ldw x,y 
      002A88 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002A8A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A8E 90 93            [ 1] 3582     ldw y,x    
      002A90                       3583 	_at_top  ; T@ 
      002A90 90 F6            [ 1]    1     ld a,(y)
      002A92 93               [ 1]    2     ldw x,y 
      002A93 EE 01            [ 2]    3     ldw x,(1,x)
      002A95 90 5D            [ 2] 3584 	tnzw y 
      002A97 27 07            [ 1] 3585 	jreq 4$
      002A99 98               [ 1] 3586 2$:	rcf 
      002A9A 59               [ 2] 3587 	rlcw x 
      002A9B 49               [ 1] 3588 	rlc a 
      002A9C 90 5A            [ 2] 3589 	decw y 
      002A9E 26 F9            [ 1] 3590 	jrne 2$
      002AA0                       3591 4$: _store_top  ; T! 
      002AA0 90 F7            [ 1]    1     ld (y),a 
      002AA2 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AA5 A6 84            [ 1] 3592 	ld a,#TK_INTGR
      002AA7 81               [ 4] 3593 	ret
                                   3594 
                                   3595 ;------------------------------
                                   3596 ; BASIC: RSHIFT(expr1,expr2)
                                   3597 ; logical shift right expr1 by 
                                   3598 ; expr2 bits.
                                   3599 ; output:
                                   3600 ; 	A 		TK_INTGR
                                   3601 ;   X 		result 
                                   3602 ;------------------------------
      002AA8                       3603 rshift:
      002AA8 CD 19 5C         [ 4] 3604 	call func_args
      002AAB A1 02            [ 1] 3605 	cp a,#2 
      002AAD 27 03            [ 1] 3606 	jreq 1$
      002AAF CC 16 A0         [ 2] 3607 	jp syntax_error
      002AB2                       3608 1$: _xpop 
      002AB2 90 F6            [ 1]    1     ld a,(y)
      002AB4 93               [ 1]    2     ldw x,y 
      002AB5 EE 01            [ 2]    3     ldw x,(1,x)
      002AB7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ABB 90 93            [ 1] 3609     ldw y,x   
      002ABD                       3610 	_at_top  ; T@  
      002ABD 90 F6            [ 1]    1     ld a,(y)
      002ABF 93               [ 1]    2     ldw x,y 
      002AC0 EE 01            [ 2]    3     ldw x,(1,x)
      002AC2 90 5D            [ 2] 3611 	tnzw y 
      002AC4 27 07            [ 1] 3612 	jreq 4$
      002AC6 98               [ 1] 3613 2$:	rcf 
      002AC7 56               [ 2] 3614 	rrcw x
      002AC8 46               [ 1] 3615 	rrc a  
      002AC9 90 5A            [ 2] 3616 	decw y 
      002ACB 26 F9            [ 1] 3617 	jrne 2$
      002ACD                       3618 4$: _store_top  ; T! 
      002ACD 90 F7            [ 1]    1     ld (y),a 
      002ACF 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AD2 A6 84            [ 1] 3619 	ld a,#TK_INTGR
      002AD4 81               [ 4] 3620 	ret
                                   3621 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3622 ;--------------------------
                                   3623 ; BASIC: FCPU integer
                                   3624 ; set CPU frequency 
                                   3625 ;-------------------------- 
                                   3626 
      002AD5                       3627 fcpu:
      002AD5 A6 84            [ 1] 3628 	ld a,#TK_INTGR
      002AD7 CD 19 4F         [ 4] 3629 	call expect 
      002ADA CD 17 E0         [ 4] 3630 	call get_int24 
      002ADD 9F               [ 1] 3631 	ld a,xl 
      002ADE A4 07            [ 1] 3632 	and a,#7 
      002AE0 C7 50 C6         [ 1] 3633 	ld CLK_CKDIVR,a 
      002AE3 81               [ 4] 3634 	ret 
                                   3635 
                                   3636 ;------------------------------
                                   3637 ; BASIC: PMODE pin#, mode 
                                   3638 ; Arduino pin. 
                                   3639 ; define pin as input or output
                                   3640 ; pin#: {0..15}
                                   3641 ; mode: INPUT|OUTPUT  
                                   3642 ;------------------------------
                           000001  3643 	PINNO=1
                           000001  3644 	VSIZE=1
      002AE4                       3645 pin_mode:
      002AE4                       3646 	_vars VSIZE 
      002AE4 52 01            [ 2]    1     sub sp,#VSIZE 
      002AE6 CD 19 61         [ 4] 3647 	call arg_list 
      002AE9 A1 02            [ 1] 3648 	cp a,#2 
      002AEB 27 03            [ 1] 3649 	jreq 1$
      002AED CC 16 A0         [ 2] 3650 	jp syntax_error 
      002AF0                       3651 1$: _xpop 
      002AF0 90 F6            [ 1]    1     ld a,(y)
      002AF2 93               [ 1]    2     ldw x,y 
      002AF3 EE 01            [ 2]    3     ldw x,(1,x)
      002AF5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AF9 90 93            [ 1] 3652 	ldw y,x ; mode 
      002AFB                       3653 	_xpop ; Dx pin 
      002AFB 90 F6            [ 1]    1     ld a,(y)
      002AFD 93               [ 1]    2     ldw x,y 
      002AFE EE 01            [ 2]    3     ldw x,(1,x)
      002B00 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B04 CD 2B 41         [ 4] 3654 	call select_pin 
      002B07 6B 01            [ 1] 3655 	ld (PINNO,sp),a  
      002B09 A6 01            [ 1] 3656 	ld a,#1 
      002B0B 0D 01            [ 1] 3657 	tnz (PINNO,sp)
      002B0D 27 0D            [ 1] 3658 	jreq 4$
      002B0F 48               [ 1] 3659 2$:	sll a 
      002B10 0A 01            [ 1] 3660 	dec (PINNO,sp)
      002B12 26 FB            [ 1] 3661 	jrne 2$ 
      002B14 6B 01            [ 1] 3662 	ld (PINNO,sp),a
      002B16 7B 01            [ 1] 3663 	ld a,(PINNO,sp)
      002B18 EA 03            [ 1] 3664 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B1A E7 03            [ 1] 3665 	ld (GPIO_CR1,x),a 
      002B1C 90 A3 00 01      [ 2] 3666 4$:	cpw y,#OUTP 
      002B20 27 10            [ 1] 3667 	jreq 6$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                                   3668 ; input mode
                                   3669 ; disable external interrupt 
      002B22 7B 01            [ 1] 3670 	ld a,(PINNO,sp)
      002B24 43               [ 1] 3671 	cpl a 
      002B25 E4 04            [ 1] 3672 	and a,(GPIO_CR2,x)
      002B27 E7 04            [ 1] 3673 	ld (GPIO_CR2,x),a 
                                   3674 ;clear bit in DDR for input mode 
      002B29 7B 01            [ 1] 3675 	ld a,(PINNO,sp)
      002B2B 43               [ 1] 3676 	cpl a 
      002B2C E4 02            [ 1] 3677 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B2E E7 02            [ 1] 3678 	ld (GPIO_DDR,x),a 
      002B30 20 0C            [ 2] 3679 	jra 9$
      002B32                       3680 6$: ;output mode  
      002B32 7B 01            [ 1] 3681 	ld a,(PINNO,sp)
      002B34 EA 02            [ 1] 3682 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B36 E7 02            [ 1] 3683 	ld (GPIO_DDR,x),a 
      002B38 7B 01            [ 1] 3684 	ld a,(PINNO,sp)
      002B3A EA 04            [ 1] 3685 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B3C E7 04            [ 1] 3686 	ld (GPIO_CR2,x),a 
      002B3E                       3687 9$:	
      002B3E                       3688 	_drop VSIZE 
      002B3E 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B40 81               [ 4] 3689 	ret
                                   3690 
                                   3691 ;------------------------
                                   3692 ; select Arduino pin 
                                   3693 ; input:
                                   3694 ;   X 	 {0..15} Arduino Dx 
                                   3695 ; output:
                                   3696 ;   A     stm8s208 pin 
                                   3697 ;   X     base address s208 GPIO port 
                                   3698 ;---------------------------
      002B41                       3699 select_pin:
      002B41 58               [ 2] 3700 	sllw x 
      002B42 1C 2B 51         [ 2] 3701 	addw x,#arduino_to_8s208 
      002B45 FE               [ 2] 3702 	ldw x,(x)
      002B46 9F               [ 1] 3703 	ld a,xl 
      002B47 88               [ 1] 3704 	push a 
      002B48 5E               [ 1] 3705 	swapw x 
      002B49 A6 05            [ 1] 3706 	ld a,#5 
      002B4B 42               [ 4] 3707 	mul x,a 
      002B4C 1C 50 00         [ 2] 3708 	addw x,#GPIO_BASE 
      002B4F 84               [ 1] 3709 	pop a 
      002B50 81               [ 4] 3710 	ret 
                                   3711 ; translation from Arduino D0..D15 to stm8s208rb 
      002B51                       3712 arduino_to_8s208:
      002B51 03 06                 3713 .byte 3,6 ; D0 
      002B53 03 05                 3714 .byte 3,5 ; D1 
      002B55 04 00                 3715 .byte 4,0 ; D2 
      002B57 02 01                 3716 .byte 2,1 ; D3
      002B59 06 00                 3717 .byte 6,0 ; D4
      002B5B 02 02                 3718 .byte 2,2 ; D5
      002B5D 02 03                 3719 .byte 2,3 ; D6
      002B5F 03 01                 3720 .byte 3,1 ; D7
      002B61 03 03                 3721 .byte 3,3 ; D8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B63 02 04                 3722 .byte 2,4 ; D9
      002B65 04 05                 3723 .byte 4,5 ; D10
      002B67 02 06                 3724 .byte 2,6 ; D11
      002B69 02 07                 3725 .byte 2,7 ; D12
      002B6B 02 05                 3726 .byte 2,5 ; D13
      002B6D 04 02                 3727 .byte 4,2 ; D14
      002B6F 04 01                 3728 .byte 4,1 ; D15
                                   3729 
                                   3730 
                                   3731 ;------------------------------
                                   3732 ; BASIC: RND(expr)
                                   3733 ; return random number 
                                   3734 ; between 1 and expr inclusive
                                   3735 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3736 ; input:
                                   3737 ; 	none 
                                   3738 ; output:
                                   3739 ;	xstack 	random positive integer 
                                   3740 ;------------------------------
      002B71                       3741 random:
      002B71 CD 19 5C         [ 4] 3742 	call func_args 
      002B74 A1 01            [ 1] 3743 	cp a,#1
      002B76 27 03            [ 1] 3744 	jreq 1$
      002B78 CC 16 A0         [ 2] 3745 	jp syntax_error
      002B7B                       3746 1$:  
      002B7B                       3747 	_xpop   
      002B7B 90 F6            [ 1]    1     ld a,(y)
      002B7D 93               [ 1]    2     ldw x,y 
      002B7E EE 01            [ 2]    3     ldw x,(1,x)
      002B80 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B84 89               [ 2] 3748 	pushw x 
      002B85 88               [ 1] 3749 	push a  
      002B86 A6 80            [ 1] 3750 	ld a,#0x80 
      002B88 15 01            [ 1] 3751 	bcp a,(1,sp)
      002B8A 27 05            [ 1] 3752 	jreq 2$
      002B8C A6 0A            [ 1] 3753 	ld a,#ERR_BAD_VALUE
      002B8E CC 16 A2         [ 2] 3754 	jp tb_error
      002B91                       3755 2$: 
                                   3756 ; acc16=(x<<5)^x 
      002B91 CE 00 14         [ 2] 3757 	ldw x,seedx 
      002B94 58               [ 2] 3758 	sllw x 
      002B95 58               [ 2] 3759 	sllw x 
      002B96 58               [ 2] 3760 	sllw x 
      002B97 58               [ 2] 3761 	sllw x 
      002B98 58               [ 2] 3762 	sllw x 
      002B99 9E               [ 1] 3763 	ld a,xh 
      002B9A C8 00 14         [ 1] 3764 	xor a,seedx 
      002B9D C7 00 0D         [ 1] 3765 	ld acc16,a 
      002BA0 9F               [ 1] 3766 	ld a,xl 
      002BA1 C8 00 15         [ 1] 3767 	xor a,seedx+1 
      002BA4 C7 00 0E         [ 1] 3768 	ld acc8,a 
                                   3769 ; seedx=seedy 
      002BA7 CE 00 16         [ 2] 3770 	ldw x,seedy 
      002BAA CF 00 14         [ 2] 3771 	ldw seedx,x  
                                   3772 ; seedy=seedy^(seedy>>1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002BAD CE 00 16         [ 2] 3773 	ldw x,seedy 
      002BB0 54               [ 2] 3774 	srlw x 
      002BB1 9E               [ 1] 3775 	ld a,xh 
      002BB2 C8 00 16         [ 1] 3776 	xor a,seedy 
      002BB5 C7 00 16         [ 1] 3777 	ld seedy,a  
      002BB8 9F               [ 1] 3778 	ld a,xl 
      002BB9 C8 00 17         [ 1] 3779 	xor a,seedy+1 
      002BBC C7 00 17         [ 1] 3780 	ld seedy+1,a 
                                   3781 ; acc16>>3 
      002BBF CE 00 0D         [ 2] 3782 	ldw x,acc16 
      002BC2 54               [ 2] 3783 	srlw x 
      002BC3 54               [ 2] 3784 	srlw x 
      002BC4 54               [ 2] 3785 	srlw x 
                                   3786 ; x=acc16^x 
      002BC5 9E               [ 1] 3787 	ld a,xh 
      002BC6 C8 00 0D         [ 1] 3788 	xor a,acc16 
      002BC9 C7 00 0D         [ 1] 3789 	ld acc16,a 
      002BCC 9F               [ 1] 3790 	ld a,xl 
      002BCD C8 00 0E         [ 1] 3791 	xor a,acc8 
      002BD0 C7 00 0E         [ 1] 3792 	ld acc8,a 
                                   3793 ; seedy=acc16^seedy 
      002BD3 C8 00 17         [ 1] 3794 	xor a,seedy+1
      002BD6 97               [ 1] 3795 	ld xl,a 
      002BD7 C6 00 0D         [ 1] 3796 	ld a,acc16 
      002BDA C8 00 16         [ 1] 3797 	xor a,seedy
      002BDD 95               [ 1] 3798 	ld xh,a 
      002BDE CF 00 16         [ 2] 3799 	ldw seedy,x 
                                   3800 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002BE1 C6 00 15         [ 1] 3801 	ld a,seedx+1
      002BE4 A4 7F            [ 1] 3802 	and a,#127
      002BE6                       3803 	_xpush 
      002BE6 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BEA 90 F7            [ 1]    2     ld (y),a 
      002BEC 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BEF 84               [ 1] 3804 	pop a 
      002BF0 85               [ 2] 3805 	popw x 
      002BF1                       3806 	_xpush 
      002BF1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BF5 90 F7            [ 1]    2     ld (y),a 
      002BF7 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BFA CD 03 D5         [ 4] 3807 	call mod24 
      002BFD                       3808 	_xpop
      002BFD 90 F6            [ 1]    1     ld a,(y)
      002BFF 93               [ 1]    2     ldw x,y 
      002C00 EE 01            [ 2]    3     ldw x,(1,x)
      002C02 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C06 1C 00 01         [ 2] 3809 	addw x,#1 
      002C09 A9 00            [ 1] 3810 	adc a,#0  
      002C0B 81               [ 4] 3811 	ret 
                                   3812 
                                   3813 ;---------------------------------
                                   3814 ; BASIC: WORDS 
                                   3815 ; affiche la listes des mots du
                                   3816 ; dictionnaire ainsi que le nombre
                                   3817 ; de mots.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   3818 ;---------------------------------
                           000001  3819 	WLEN=1 ; word length
                           000002  3820 	LLEN=2 ; character sent to console
                           000003  3821 	WCNT=3 ; count words printed 
                           000003  3822 	VSIZE=3 
      002C0C                       3823 words:
      002C0C                       3824 	_vars VSIZE
      002C0C 52 03            [ 2]    1     sub sp,#VSIZE 
      002C0E 0F 02            [ 1] 3825 	clr (LLEN,sp)
      002C10 0F 03            [ 1] 3826 	clr (WCNT,sp)
      002C12 90 AE 33 5C      [ 2] 3827 	ldw y,#kword_dict+2
      002C16 93               [ 1] 3828 0$:	ldw x,y
      002C17 F6               [ 1] 3829 	ld a,(x)
      002C18 A4 0F            [ 1] 3830 	and a,#15 
      002C1A 6B 01            [ 1] 3831 	ld (WLEN,sp),a 
      002C1C 0C 03            [ 1] 3832 	inc (WCNT,sp)
      002C1E 5C               [ 1] 3833 1$:	incw x 
      002C1F F6               [ 1] 3834 	ld a,(x)
      002C20 CD 09 44         [ 4] 3835 	call putc 
      002C23 0C 02            [ 1] 3836 	inc (LLEN,sp)
      002C25 0A 01            [ 1] 3837 	dec (WLEN,sp)
      002C27 26 F5            [ 1] 3838 	jrne 1$
      002C29 A6 46            [ 1] 3839 	ld a,#70
      002C2B 11 02            [ 1] 3840 	cp a,(LLEN,sp)
      002C2D 2B 09            [ 1] 3841 	jrmi 2$   
      002C2F A6 20            [ 1] 3842 	ld a,#SPACE 
      002C31 CD 09 44         [ 4] 3843 	call putc 
      002C34 0C 02            [ 1] 3844 	inc (LLEN,sp) 
      002C36 20 07            [ 2] 3845 	jra 3$
      002C38 A6 0D            [ 1] 3846 2$: ld a,#CR 
      002C3A CD 09 44         [ 4] 3847 	call putc 
      002C3D 0F 02            [ 1] 3848 	clr (LLEN,sp)
      002C3F 72 A2 00 02      [ 2] 3849 3$:	subw y,#2 
      002C43 90 FE            [ 2] 3850 	ldw y,(y)
      002C45 26 CF            [ 1] 3851 	jrne 0$ 
      002C47 A6 0D            [ 1] 3852 	ld a,#CR 
      002C49 CD 09 44         [ 4] 3853 	call putc  
      002C4C 5F               [ 1] 3854 	clrw x 
      002C4D 7B 03            [ 1] 3855 	ld a,(WCNT,sp)
      002C4F 97               [ 1] 3856 	ld xl,a 
      002C50 CD 17 F6         [ 4] 3857 	call prt_i16 
      002C53 AE 2C 5C         [ 2] 3858 	ldw x,#words_count_msg
      002C56 CD 09 A1         [ 4] 3859 	call puts 
      002C59                       3860 	_drop VSIZE 
      002C59 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C5B 81               [ 4] 3861 	ret 
      002C5C 20 77 6F 72 64 73 20  3862 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3863 
                                   3864 
                                   3865 ;-----------------------------
                                   3866 ; BASIC: TIMER expr 
                                   3867 ; initialize count down timer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



                                   3868 ;-----------------------------
      002C72                       3869 set_timer:
      002C72 CD 19 61         [ 4] 3870 	call arg_list
      002C75 A1 01            [ 1] 3871 	cp a,#1 
      002C77 27 03            [ 1] 3872 	jreq 1$
      002C79 CC 16 A0         [ 2] 3873 	jp syntax_error
      002C7C                       3874 1$: 
      002C7C                       3875 	_xpop  
      002C7C 90 F6            [ 1]    1     ld a,(y)
      002C7E 93               [ 1]    2     ldw x,y 
      002C7F EE 01            [ 2]    3     ldw x,(1,x)
      002C81 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C85 CF 00 12         [ 2] 3876 	ldw timer,x 
      002C88 81               [ 4] 3877 	ret 
                                   3878 
                                   3879 ;------------------------------
                                   3880 ; BASIC: TIMEOUT 
                                   3881 ; return state of timer 
                                   3882 ; output:
                                   3883 ;   A:X     0 not timeout 
                                   3884 ;   A:X     -1 timeout 
                                   3885 ;------------------------------
      002C89                       3886 timeout:
      002C89 CE 00 12         [ 2] 3887 	ldw x,timer 
      002C8C 4F               [ 1] 3888 	clr a 
      002C8D 20 13            [ 2] 3889 	jra logical_not 
                                   3890 
                                   3891 ;--------------------------------
                                   3892 ; BASIC NOT(expr) 
                                   3893 ; return logical complement of expr
                                   3894 ;--------------------------------
      002C8F                       3895 func_not:
      002C8F CD 19 5C         [ 4] 3896 	call func_args  
      002C92 A1 01            [ 1] 3897 	cp a,#1
      002C94 27 03            [ 1] 3898 	jreq 1$
      002C96 CC 16 A0         [ 2] 3899 	jp syntax_error
      002C99                       3900 1$: _xpop 
      002C99 90 F6            [ 1]    1     ld a,(y)
      002C9B 93               [ 1]    2     ldw x,y 
      002C9C EE 01            [ 2]    3     ldw x,(1,x)
      002C9E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CA2                       3901 logical_not: 
      002CA2 4D               [ 1] 3902 	tnz a 
      002CA3 26 06            [ 1] 3903 	jrne 2$
      002CA5 5D               [ 2] 3904 	tnzw x 
      002CA6 26 03            [ 1] 3905 	jrne 2$  
      002CA8 43               [ 1] 3906 	cpl a 
      002CA9 53               [ 2] 3907 	cplw x  
      002CAA 81               [ 4] 3908 	ret 
      002CAB 4F               [ 1] 3909 2$: clr a 
      002CAC 5F               [ 1] 3910 	clrw x 
      002CAD 81               [ 4] 3911 	ret 
                                   3912 
                                   3913 
                                   3914 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   3915 ; BASIC: IWDGEN expr1 
                                   3916 ; enable independant watchdog timer
                                   3917 ; expr1 is delay in multiple of 62.5µsec
                                   3918 ; expr1 -> {1..16383}
                                   3919 ;-----------------------------------
      002CAE                       3920 enable_iwdg:
      002CAE CD 19 61         [ 4] 3921 	call arg_list
      002CB1 A1 01            [ 1] 3922 	cp a,#1 
      002CB3 27 03            [ 1] 3923 	jreq 1$
      002CB5 CC 16 A0         [ 2] 3924 	jp syntax_error 
      002CB8                       3925 1$: _xpop  
      002CB8 90 F6            [ 1]    1     ld a,(y)
      002CBA 93               [ 1]    2     ldw x,y 
      002CBB EE 01            [ 2]    3     ldw x,(1,x)
      002CBD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CC1 4B 00            [ 1] 3926 	push #0
      002CC3 35 CC 50 E0      [ 1] 3927 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CC7 9E               [ 1] 3928 	ld a,xh 
      002CC8 A4 3F            [ 1] 3929 	and a,#0x3f
      002CCA 95               [ 1] 3930 	ld xh,a  
      002CCB A3 00 FF         [ 2] 3931 2$:	cpw x,#255
      002CCE 23 06            [ 2] 3932 	jrule 3$
      002CD0 0C 01            [ 1] 3933 	inc (1,sp)
      002CD2 98               [ 1] 3934 	rcf 
      002CD3 56               [ 2] 3935 	rrcw x 
      002CD4 20 F5            [ 2] 3936 	jra 2$
      002CD6 35 55 50 E0      [ 1] 3937 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CDA 84               [ 1] 3938 	pop a  
      002CDB C7 50 E1         [ 1] 3939 	ld IWDG_PR,a 
      002CDE 9F               [ 1] 3940 	ld a,xl
      002CDF 4A               [ 1] 3941 	dec a 
      002CE0 35 55 50 E0      [ 1] 3942 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CE4 C7 50 E2         [ 1] 3943 	ld IWDG_RLR,a 
      002CE7 35 AA 50 E0      [ 1] 3944 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002CEB 81               [ 4] 3945 	ret 
                                   3946 
                                   3947 
                                   3948 ;-----------------------------------
                                   3949 ; BASIC: IWDGREF  
                                   3950 ; refresh independant watchdog count down 
                                   3951 ; timer before it reset MCU. 
                                   3952 ;-----------------------------------
      002CEC                       3953 refresh_iwdg:
      002CEC 35 AA 50 E0      [ 1] 3954 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CF0 81               [ 4] 3955 	ret 
                                   3956 
                                   3957 
                                   3958 ;-------------------------------------
                                   3959 ; BASIC: LOG(expr)
                                   3960 ; return logarithm base 2 of expr 
                                   3961 ; this is the position of most significant
                                   3962 ; bit set. 
                                   3963 ; input: 
                                   3964 ; output:
                                   3965 ;   A     TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   3966 ;   xstack log2 
                                   3967 ;*********************************
      002CF1                       3968 log2:
      002CF1 CD 19 5C         [ 4] 3969 	call func_args 
      002CF4 A1 01            [ 1] 3970 	cp a,#1 
      002CF6 27 03            [ 1] 3971 	jreq 1$
      002CF8 CC 16 A0         [ 2] 3972 	jp syntax_error 
      002CFB                       3973 1$: 
      002CFB                       3974 	_xpop    
      002CFB 90 F6            [ 1]    1     ld a,(y)
      002CFD 93               [ 1]    2     ldw x,y 
      002CFE EE 01            [ 2]    3     ldw x,(1,x)
      002D00 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D04 4D               [ 1] 3975 	tnz a
      002D05 26 08            [ 1] 3976 	jrne 2$ 
      002D07 5D               [ 2] 3977 	tnzw x 
      002D08 26 05            [ 1] 3978 	jrne 2$
      002D0A A6 0A            [ 1] 3979 	ld a,#ERR_BAD_VALUE
      002D0C CC 16 A2         [ 2] 3980 	jp tb_error 
      002D0F 4B 18            [ 1] 3981 2$: push #24 
      002D11 59               [ 2] 3982 3$: rlcw x 
      002D12 49               [ 1] 3983     rlc a 
      002D13 25 04            [ 1] 3984 	jrc 4$
      002D15 0A 01            [ 1] 3985 	dec (1,sp) 
      002D17 26 F8            [ 1] 3986 	jrne 3$
      002D19 5F               [ 1] 3987 4$: clrw x 
      002D1A 84               [ 1] 3988     pop a 
      002D1B 4A               [ 1] 3989 	dec a
      002D1C 02               [ 1] 3990 	rlwa x  
      002D1D                       3991 9$:	
      002D1D 81               [ 4] 3992 	ret 
                                   3993 
                                   3994 ;-----------------------------------
                                   3995 ; BASIC: BIT(expr) 
                                   3996 ; expr ->{0..23}
                                   3997 ; return 2^expr 
                                   3998 ; output:
                                   3999 ;    A:X    2^expr 
                                   4000 ;-----------------------------------
      002D1E                       4001 bitmask:
      002D1E CD 19 5C         [ 4] 4002     call func_args 
      002D21 A1 01            [ 1] 4003 	cp a,#1
      002D23 27 03            [ 1] 4004 	jreq 1$
      002D25 CC 16 A0         [ 2] 4005 	jp syntax_error 
      002D28                       4006 1$: _xpop 
      002D28 90 F6            [ 1]    1     ld a,(y)
      002D2A 93               [ 1]    2     ldw x,y 
      002D2B EE 01            [ 2]    3     ldw x,(1,x)
      002D2D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D31 9F               [ 1] 4007 	ld a,xl 
      002D32 AE 00 01         [ 2] 4008 	ldw x,#1 
      002D35 A4 17            [ 1] 4009 	and a,#23
      002D37 27 0A            [ 1] 4010 	jreq 9$
      002D39 88               [ 1] 4011 	push a 
      002D3A 4F               [ 1] 4012 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D3B                       4013 2$: 
      002D3B 58               [ 2] 4014 	slaw x 
      002D3C 49               [ 1] 4015 	rlc a 	
      002D3D 0A 01            [ 1] 4016 	dec (1,sp)
      002D3F 26 FA            [ 1] 4017 	jrne 2$ 
      002D41                       4018 4$:
      002D41                       4019     _drop 1 
      002D41 5B 01            [ 2]    1     addw sp,#1 
      002D43 81               [ 4] 4020 9$:	ret 
                                   4021 
                                   4022 ;------------------------------
                                   4023 ; BASIC: INVERT(expr)
                                   4024 ; 1's complement 
                                   4025 ;--------------------------------
      002D44                       4026 invert:
      002D44 CD 19 5C         [ 4] 4027 	call func_args
      002D47 A1 01            [ 1] 4028 	cp a,#1 
      002D49 27 03            [ 1] 4029 	jreq 1$
      002D4B CC 16 A0         [ 2] 4030 	jp syntax_error
      002D4E                       4031 1$: _xpop 
      002D4E 90 F6            [ 1]    1     ld a,(y)
      002D50 93               [ 1]    2     ldw x,y 
      002D51 EE 01            [ 2]    3     ldw x,(1,x)
      002D53 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D57 43               [ 1] 4032 	cpl a 
      002D58 53               [ 2] 4033 	cplw x 
      002D59 81               [ 4] 4034 	ret 
                                   4035 
                                   4036 ;------------------------------
                                   4037 ; BASIC: DO 
                                   4038 ; initiate a DO ... UNTIL loop 
                                   4039 ;------------------------------
                           000003  4040 	DOLP_ADR=3 
                           000005  4041 	DOLP_INW=5
                           000004  4042 	VSIZE=4 
      002D5A                       4043 do_loop:
      002D5A 85               [ 2] 4044 	popw x 
      002D5B                       4045 	_vars VSIZE 
      002D5B 52 04            [ 2]    1     sub sp,#VSIZE 
      002D5D 89               [ 2] 4046 	pushw x 
      002D5E CE 00 04         [ 2] 4047 	ldw x,basicptr 
      002D61 1F 03            [ 2] 4048 	ldw (DOLP_ADR,sp),x
      002D63 CE 00 00         [ 2] 4049 	ldw x,in.w 
      002D66 1F 05            [ 2] 4050 	ldw (DOLP_INW,sp),x
      002D68 72 5C 00 1F      [ 1] 4051 	inc loop_depth 
      002D6C 81               [ 4] 4052 	ret 
                                   4053 
                                   4054 ;--------------------------------
                                   4055 ; BASIC: UNTIL expr 
                                   4056 ; loop if exprssion is false 
                                   4057 ; else terminate loop
                                   4058 ;--------------------------------
      002D6D                       4059 until: 
      002D6D 72 5D 00 1F      [ 1] 4060 	tnz loop_depth 
      002D71 26 03            [ 1] 4061 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D73 CC 16 A0         [ 2] 4062 	jp syntax_error 
      002D76                       4063 1$: 
      002D76 CD 1B 88         [ 4] 4064 	call condition  
      002D79                       4065 	_xpop 
      002D79 90 F6            [ 1]    1     ld a,(y)
      002D7B 93               [ 1]    2     ldw x,y 
      002D7C EE 01            [ 2]    3     ldw x,(1,x)
      002D7E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D82 4D               [ 1] 4066 	tnz a 
      002D83 26 13            [ 1] 4067 	jrne 9$ 
      002D85 5D               [ 2] 4068 	tnzw x   
      002D86 26 10            [ 1] 4069 	jrne 9$
      002D88 1E 03            [ 2] 4070 	ldw x,(DOLP_ADR,sp)
      002D8A CF 00 04         [ 2] 4071 	ldw basicptr,x 
      002D8D E6 02            [ 1] 4072 	ld a,(2,x)
      002D8F C7 00 03         [ 1] 4073 	ld count,a 
      002D92 1E 05            [ 2] 4074 	ldw x,(DOLP_INW,sp)
      002D94 CF 00 00         [ 2] 4075 	ldw in.w,x 
      002D97 81               [ 4] 4076 	ret 
      002D98                       4077 9$:	; remove loop data from stack  
      002D98 85               [ 2] 4078 	popw x
      002D99                       4079 	_drop VSIZE
      002D99 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D9B 72 5A 00 1F      [ 1] 4080 	dec loop_depth 
      002D9F FC               [ 2] 4081 	jp (x)
                                   4082 
                                   4083 ;--------------------------
                                   4084 ; BASIC: PORTA...PORTI  
                                   4085 ;  return constant value 
                                   4086 ;  PORT  base address 
                                   4087 ;---------------------------
      002DA0                       4088 const_porta:
      002DA0 AE 50 00         [ 2] 4089 	ldw x,#PA_BASE 
      002DA3 4F               [ 1] 4090 	clr a 
      002DA4 81               [ 4] 4091 	ret 
      002DA5                       4092 const_portb:
      002DA5 AE 50 05         [ 2] 4093 	ldw x,#PB_BASE 
      002DA8 4F               [ 1] 4094 	clr a 
      002DA9 81               [ 4] 4095 	ret 
      002DAA                       4096 const_portc:
      002DAA AE 50 0A         [ 2] 4097 	ldw x,#PC_BASE 
      002DAD 4F               [ 1] 4098 	clr a 
      002DAE 81               [ 4] 4099 	ret 
      002DAF                       4100 const_portd:
      002DAF AE 50 0F         [ 2] 4101 	ldw x,#PD_BASE 
      002DB2 4F               [ 1] 4102 	clr a 
      002DB3 81               [ 4] 4103 	ret 
      002DB4                       4104 const_porte:
      002DB4 AE 50 14         [ 2] 4105 	ldw x,#PE_BASE 
      002DB7 4F               [ 1] 4106 	clr a 
      002DB8 81               [ 4] 4107 	ret 
      002DB9                       4108 const_portf:
      002DB9 AE 50 19         [ 2] 4109 	ldw x,#PF_BASE 
      002DBC 4F               [ 1] 4110 	clr a 
      002DBD 81               [ 4] 4111 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002DBE                       4112 const_portg:
      002DBE AE 50 1E         [ 2] 4113 	ldw x,#PG_BASE 
      002DC1 4F               [ 1] 4114 	clr a 
      002DC2 81               [ 4] 4115 	ret 
      002DC3                       4116 const_porth:
      002DC3 AE 50 23         [ 2] 4117 	ldw x,#PH_BASE 
      002DC6 4F               [ 1] 4118 	clr a 
      002DC7 81               [ 4] 4119 	ret 
      002DC8                       4120 const_porti:
      002DC8 AE 50 28         [ 2] 4121 	ldw x,#PI_BASE 
      002DCB 4F               [ 1] 4122 	clr a 
      002DCC 81               [ 4] 4123 	ret 
                                   4124 
                                   4125 ;-------------------------------
                                   4126 ; following return constant 
                                   4127 ; related to GPIO register offset 
                                   4128 ;---------------------------------
      002DCD                       4129 const_odr:
      002DCD 4F               [ 1] 4130 	clr a 
      002DCE AE 00 00         [ 2] 4131 	ldw x,#GPIO_ODR
      002DD1 81               [ 4] 4132 	ret 
      002DD2                       4133 const_idr:
      002DD2 4F               [ 1] 4134 	clr a 
      002DD3 AE 00 01         [ 2] 4135 	ldw x,#GPIO_IDR
      002DD6 81               [ 4] 4136 	ret 
      002DD7                       4137 const_ddr:
      002DD7 4F               [ 1] 4138 	clr a
      002DD8 AE 00 02         [ 2] 4139 	ldw x,#GPIO_DDR
      002DDB 81               [ 4] 4140 	ret 
      002DDC                       4141 const_cr1:
      002DDC 4F               [ 1] 4142 	clr a 
      002DDD AE 00 03         [ 2] 4143 	ldw x,#GPIO_CR1
      002DE0 81               [ 4] 4144 	ret 
      002DE1                       4145 const_cr2:
      002DE1 4F               [ 1] 4146 	clr a
      002DE2 AE 00 04         [ 2] 4147 	ldw x,#GPIO_CR2
      002DE5 81               [ 4] 4148 	ret 
                                   4149 ;-------------------------
                                   4150 ; BASIC: POUT 
                                   4151 ;  constant for port mode
                                   4152 ;  used by PMODE 
                                   4153 ;  to set pin as output
                                   4154 ;------------------------
      002DE6                       4155 const_output:
      002DE6 4F               [ 1] 4156 	clr a 
      002DE7 AE 00 01         [ 2] 4157 	ldw x,#OUTP
      002DEA 81               [ 4] 4158 	ret 
                                   4159 
                                   4160 ;-------------------------
                                   4161 ; BASIC: PINP 
                                   4162 ;  constant for port mode
                                   4163 ;  used by PMODE 
                                   4164 ;  to set pin as input
                                   4165 ;------------------------
      002DEB                       4166 const_input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002DEB 4F               [ 1] 4167 	clr a  
      002DEC AE 00 00         [ 2] 4168 	ldw x,#INP 
      002DEF 81               [ 4] 4169 	ret 
                                   4170 	
                                   4171 ;-----------------------
                                   4172 ; memory area constants
                                   4173 ;-----------------------
      002DF0                       4174 const_eeprom_base:
      002DF0 4F               [ 1] 4175 	clr a  
      002DF1 AE 40 00         [ 2] 4176 	ldw x,#EEPROM_BASE 
      002DF4 81               [ 4] 4177 	ret 
                                   4178 
                                   4179 ;---------------------------
                                   4180 ; BASIC: DATA 
                                   4181 ; when the interpreter find 
                                   4182 ; a DATA line it skip it.
                                   4183 ;---------------------------
      002DF5                       4184 data:
      002DF5 55 00 03 00 01   [ 1] 4185 	mov in,count 
      002DFA 81               [ 4] 4186 	ret 
                                   4187 
                                   4188 ;------------------------------
                                   4189 ; check if it is a DATA line 
                                   4190 ; input: 
                                   4191 ;    X    line address 
                                   4192 ; output:
                                   4193 ;    Z    set if DATA line 
                                   4194 ;----------------------------
      002DFB                       4195 is_data_line:
      002DFB EE 04            [ 2] 4196 	ldw x,(4,x)
      002DFD DE 33 62         [ 2] 4197 	ldw x,(code_addr,x)
      002E00 A3 2D F5         [ 2] 4198 	cpw x,#data 
      002E03 81               [ 4] 4199 	ret 
                                   4200 
                                   4201 ;---------------------------
                                   4202 ; set DATA pointer at line# 
                                   4203 ; specified by X 
                                   4204 ;---------------------------
      002E04                       4205 data_line:
      002E04 90 89            [ 2] 4206 	pushw y 
      002E06 4F               [ 1] 4207 	clr a 
      002E07 CD 0C 89         [ 4] 4208 	call search_lineno
      002E0A 5D               [ 2] 4209 	tnzw x 
      002E0B 26 05            [ 1] 4210 	jrne 3$
      002E0D A6 05            [ 1] 4211 2$:	ld a,#ERR_NO_LINE 
      002E0F CC 16 A2         [ 2] 4212 	jp tb_error
      002E12                       4213 3$: ; check if valid data line 
      002E12 90 93            [ 1] 4214     ldw y,x 
      002E14 CD 2D FB         [ 4] 4215 	call is_data_line 
      002E17 26 F4            [ 1] 4216 	jrne 2$ 
      002E19                       4217 set_data_ptr: 	
      002E19 90 CF 00 06      [ 2] 4218 	ldw data_ptr,y
      002E1D 90 E6 02         [ 1] 4219 	ld a,(2,y)
      002E20 C7 00 09         [ 1] 4220 	ld data_len,a 
      002E23 35 06 00 08      [ 1] 4221 	mov data_ofs,#FIRST_DATA_ITEM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002E27 90 85            [ 2] 4222 	popw y 
      002E29 81               [ 4] 4223 	ret
                                   4224 
                                   4225 ;---------------------------------
                                   4226 ; BASIC: RESTORE [line#]
                                   4227 ; set data_ptr to first data line
                                   4228 ; if no DATA found pointer set to
                                   4229 ; zero.
                                   4230 ; if a line# is given as argument 
                                   4231 ; a data line with that number 
                                   4232 ; is searched and the data pointer 
                                   4233 ; is set to it. If there is no 
                                   4234 ; data line with that number 
                                   4235 ; the program is interrupted. 
                                   4236 ;---------------------------------
      002E2A                       4237 restore:
      002E2A 72 5F 00 06      [ 1] 4238 	clr data_ptr 
      002E2E 72 5F 00 07      [ 1] 4239 	clr data_ptr+1
      002E32 72 5F 00 08      [ 1] 4240 	clr data_ofs 
      002E36 72 5F 00 09      [ 1] 4241 	clr data_len
      002E3A CD 17 A1         [ 4] 4242 	call next_token 
      002E3D A1 84            [ 1] 4243 	cp a,#TK_INTGR
      002E3F 26 05            [ 1] 4244 	jrne 0$
      002E41 CD 17 E0         [ 4] 4245 	call get_int24 
      002E44 20 BE            [ 2] 4246 	jra data_line 
      002E46                       4247 0$:	
      002E46                       4248 	_unget_token  
      002E46 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002E4B CE 00 1B         [ 2] 4249 	ldw x,txtbgn
      002E4E 90 89            [ 2] 4250 	pushw y 
                                   4251 ; search first DATA line 
      002E50                       4252 data_search_loop: 	
      002E50 C3 00 1D         [ 2] 4253 	cpw x,txtend
      002E53 24 17            [ 1] 4254 	jruge restore_error 
      002E55 90 93            [ 1] 4255 	ldw y,x 
      002E57 CD 2D FB         [ 4] 4256 	call is_data_line 
      002E5A 27 BD            [ 1] 4257 	jreq set_data_ptr
      002E5C                       4258 try_next_line: 
      002E5C 93               [ 1] 4259 	ldw x,y 
      002E5D E6 02            [ 1] 4260 	ld a,(2,x)
      002E5F C7 00 0E         [ 1] 4261 	ld acc8,a 
      002E62 72 5F 00 0D      [ 1] 4262 	clr acc16 
      002E66 72 BB 00 0D      [ 2] 4263 	addw x,acc16 
      002E6A 20 E4            [ 2] 4264 	jra data_search_loop
      002E6C                       4265 restore_error:	
      002E6C A6 0C            [ 1] 4266     ld a,#ERR_NO_DATA 
      002E6E CC 16 A2         [ 2] 4267 	jp tb_error 
                                   4268 
                                   4269 
                                   4270 ;---------------------------------
                                   4271 ; BASIC: READ 
                                   4272 ; return next data item | 0 
                                   4273 ;---------------------------------
                           000001  4274 	CTX_BPTR=1 
                           000003  4275 	CTX_IN=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                           000004  4276 	CTX_COUNT=4 
                           000005  4277 	INT24=5
                           000007  4278 	VSIZE=7 
      002E71                       4279 read:
      002E71                       4280 	_vars  VSIZE 
      002E71 52 07            [ 2]    1     sub sp,#VSIZE 
      002E73                       4281 read01:	
      002E73 C6 00 08         [ 1] 4282 	ld a,data_ofs
      002E76 C1 00 09         [ 1] 4283 	cp a,data_len 
      002E79 27 3A            [ 1] 4284 	jreq 2$ ; end of line  
      002E7B CD 20 55         [ 4] 4285 	call save_context
      002E7E CE 00 06         [ 2] 4286 	ldw x,data_ptr 
      002E81 CF 00 04         [ 2] 4287 	ldw basicptr,x 
      002E84 55 00 08 00 01   [ 1] 4288 	mov in,data_ofs 
      002E89 55 00 09 00 03   [ 1] 4289 	mov count,data_len  
      002E8E CD 1A 83         [ 4] 4290 	call expression 
      002E91 A1 84            [ 1] 4291 	cp a,#TK_INTGR 
      002E93 27 03            [ 1] 4292 	jreq 1$ 
      002E95 CC 16 A0         [ 2] 4293 	jp syntax_error 
      002E98                       4294 1$:
      002E98 CD 17 A1         [ 4] 4295 	call next_token ; skip comma
      002E9B CE 00 04         [ 2] 4296 	ldw x,basicptr 
      002E9E CF 00 06         [ 2] 4297 	ldw data_ptr,x 
      002EA1 55 00 01 00 08   [ 1] 4298 	mov data_ofs,in 
      002EA6 CD 20 65         [ 4] 4299 	call rest_context
      002EA9                       4300 	_xpop 
      002EA9 90 F6            [ 1]    1     ld a,(y)
      002EAB 93               [ 1]    2     ldw x,y 
      002EAC EE 01            [ 2]    3     ldw x,(1,x)
      002EAE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EB2                       4301 	_drop VSIZE 
      002EB2 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EB4 81               [ 4] 4302 	ret 
      002EB5                       4303 2$: ; end of line reached 
      002EB5 90 CE 00 06      [ 2] 4304 	ldw y, data_ptr 
      002EB9 72 5F 00 06      [ 1] 4305 	clr data_ptr
      002EBD 72 5F 00 07      [ 1] 4306 	clr data_ptr+1   
      002EC1 72 5F 00 08      [ 1] 4307 	clr data_ofs 
      002EC5 72 5F 00 09      [ 1] 4308 	clr data_len 
      002EC9 CD 2E 5C         [ 4] 4309 	call try_next_line 
      002ECC 20 A5            [ 2] 4310 	jra read01
                                   4311 
                                   4312 
                                   4313 ;---------------------------------
                                   4314 ; BASIC: SPIEN clkdiv, 0|1  
                                   4315 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4316 ; if clkdiv==-1 disable SPI
                                   4317 ; 0|1 -> disable|enable  
                                   4318 ;--------------------------------- 
                           000005  4319 SPI_CS_BIT=5
      002ECE                       4320 spi_enable:
      002ECE CD 19 61         [ 4] 4321 	call arg_list 
      002ED1 A1 02            [ 1] 4322 	cp a,#2
      002ED3 27 03            [ 1] 4323 	jreq 1$
      002ED5 CC 16 A0         [ 2] 4324 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002ED8                       4325 1$: 
      002ED8 72 12 50 C7      [ 1] 4326 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EDC 85               [ 2] 4327 	popw x  
      002EDD 5D               [ 2] 4328 	tnzw x 
      002EDE 27 21            [ 1] 4329 	jreq spi_disable 
      002EE0 85               [ 2] 4330 	popw x 
      002EE1 A6 08            [ 1] 4331 	ld a,#(1<<SPI_CR1_BR)
      002EE3 42               [ 4] 4332 	mul x,a 
      002EE4 9F               [ 1] 4333 	ld a,xl 
      002EE5 C7 52 00         [ 1] 4334 	ld SPI_CR1,a 
                                   4335 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EE8 72 1A 50 14      [ 1] 4336 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EEC 72 1A 50 16      [ 1] 4337 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4338 ; configure SPI as master mode 0.	
      002EF0 72 14 52 00      [ 1] 4339 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4340 ; ~CS line controlled by sofware 	
      002EF4 72 12 52 01      [ 1] 4341 	bset SPI_CR2,#SPI_CR2_SSM 
      002EF8 72 10 52 01      [ 1] 4342     bset SPI_CR2,#SPI_CR2_SSI 
                                   4343 ; enable SPI
      002EFC 72 1C 52 00      [ 1] 4344 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F00 81               [ 4] 4345 	ret 
      002F01                       4346 spi_disable:
      002F01                       4347 	_drop #2; throw first argument.
      002F01 5B 02            [ 2]    1     addw sp,##2 
                                   4348 ; wait spi idle 
      002F03 A6 82            [ 1] 4349 1$:	ld a,#0x82 
      002F05 C4 52 03         [ 1] 4350 	and a,SPI_SR
      002F08 A1 02            [ 1] 4351 	cp a,#2 
      002F0A 26 F7            [ 1] 4352 	jrne 1$
      002F0C 72 1D 52 00      [ 1] 4353 	bres SPI_CR1,#SPI_CR1_SPE
      002F10 72 13 50 C7      [ 1] 4354 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F14 72 1B 50 16      [ 1] 4355 	bres PE_DDR,#SPI_CS_BIT 
      002F18 81               [ 4] 4356 	ret 
                                   4357 
      002F19                       4358 spi_clear_error:
      002F19 A6 78            [ 1] 4359 	ld a,#0x78 
      002F1B C5 52 03         [ 1] 4360 	bcp a,SPI_SR 
      002F1E 27 04            [ 1] 4361 	jreq 1$
      002F20 72 5F 52 03      [ 1] 4362 	clr SPI_SR 
      002F24 81               [ 4] 4363 1$: ret 
                                   4364 
      002F25                       4365 spi_send_byte:
      002F25 88               [ 1] 4366 	push a 
      002F26 CD 2F 19         [ 4] 4367 	call spi_clear_error
      002F29 84               [ 1] 4368 	pop a 
      002F2A 72 03 52 03 FB   [ 2] 4369 	btjf SPI_SR,#SPI_SR_TXE,.
      002F2F C7 52 04         [ 1] 4370 	ld SPI_DR,a
      002F32 72 01 52 03 FB   [ 2] 4371 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F37 C6 52 04         [ 1] 4372 	ld a,SPI_DR 
      002F3A 81               [ 4] 4373 	ret 
                                   4374 
      002F3B                       4375 spi_rcv_byte:
      002F3B A6 FF            [ 1] 4376 	ld a,#255
      002F3D 72 01 52 03 E3   [ 2] 4377 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F42 C6 52 04         [ 1] 4378 	ld a,SPI_DR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002F45 81               [ 4] 4379 	ret
                                   4380 
                                   4381 ;------------------------------
                                   4382 ; BASIC: SPIWR byte [,byte]
                                   4383 ; write 1 or more byte
                                   4384 ;------------------------------
      002F46                       4385 spi_write:
      002F46 CD 1A 83         [ 4] 4386 	call expression
      002F49 A1 84            [ 1] 4387 	cp a,#TK_INTGR 
      002F4B 27 03            [ 1] 4388 	jreq 1$
      002F4D CC 16 A0         [ 2] 4389 	jp syntax_error 
      002F50                       4390 1$:	
      002F50 9F               [ 1] 4391 	ld a,xl 
      002F51 CD 2F 25         [ 4] 4392 	call spi_send_byte 
      002F54 CD 17 A1         [ 4] 4393 	call next_token 
      002F57 A1 08            [ 1] 4394 	cp a,#TK_COMMA 
      002F59 26 02            [ 1] 4395 	jrne 2$ 
      002F5B 20 E9            [ 2] 4396 	jra spi_write 
      002F5D 4D               [ 1] 4397 2$:	tnz a 
      002F5E 27 05            [ 1] 4398 	jreq 3$
      002F60                       4399 	_unget_token  
      002F60 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F65 81               [ 4] 4400 3$:	ret 
                                   4401 
                                   4402 
                                   4403 ;-------------------------------
                                   4404 ; BASIC: SPIRD 	
                                   4405 ; read one byte from SPI 
                                   4406 ;-------------------------------
      002F66                       4407 spi_read:
      002F66 CD 2F 3B         [ 4] 4408 	call spi_rcv_byte 
      002F69 5F               [ 1] 4409 	clrw x 
      002F6A 97               [ 1] 4410 	ld xl,a 
      002F6B 4F               [ 1] 4411 	clr a  
      002F6C 81               [ 4] 4412 	ret 
                                   4413 
                                   4414 ;------------------------------
                                   4415 ; BASIC: SPISEL 0|1 
                                   4416 ; set state of ~CS line
                                   4417 ; 0|1 deselect|select  
                                   4418 ;------------------------------
      002F6D                       4419 spi_select:
      002F6D CD 17 A1         [ 4] 4420 	call next_token 
      002F70 A1 84            [ 1] 4421 	cp a,#TK_INTGR 
      002F72 27 03            [ 1] 4422 	jreq 1$
      002F74 CC 16 A0         [ 2] 4423 	jp syntax_error 
      002F77 5D               [ 2] 4424 1$: tnzw x  
      002F78 27 05            [ 1] 4425 	jreq cs_high 
      002F7A 72 1B 50 14      [ 1] 4426 	bres PE_ODR,#SPI_CS_BIT
      002F7E 81               [ 4] 4427 	ret 
      002F7F                       4428 cs_high: 
      002F7F 72 1A 50 14      [ 1] 4429 	bset PE_ODR,#SPI_CS_BIT
      002F83 81               [ 4] 4430 	ret 
                                   4431 
                                   4432 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4433 ; BASIC: PAD 
                                   4434 ; Return pad buffer address.
                                   4435 ;------------------------------
      002F84                       4436 pad_ref:
      002F84 AE 16 B8         [ 2] 4437 	ldw x,#pad 
      002F87 4F               [ 1] 4438 	clr a
      002F88 81               [ 4] 4439 	ret 
                                   4440 
                                   4441 
                                   4442 ;------------------------------
                                   4443 ; logical operators dictonary 
                                   4444 ; format:
                                   4445 ;    link: 2 bytes 
                                   4446 ;    name_length: 1 byte 
                                   4447 ;    op_name: 4 char max 
                                   4448 ;    op_id: # byte
                                   4449 ;-------------------------------
                                   4450 	.macro _op_entry len,name,id 
                                   4451 	.word OP_LINK 
                                   4452 	OP_LINK=.
                                   4453 name:
                                   4454 	.byte len 
                                   4455 	.asciz "name" 
                                   4456 	.byte  id 
                                   4457 	.endm 
                                   4458 
                           000000  4459 	OP_LINK=0 
      002F89                       4460 op_end:
      002F89                       4461 	_op_entry 3,XOR,TK_XOR 
      002F89 00 00                    1 	.word OP_LINK 
                           002F8B     2 	OP_LINK=.
      002F8B                          3 XOR:
      002F8B 03                       4 	.byte 3 
      002F8C 58 4F 52 00              5 	.asciz "XOR" 
      002F90 89                       6 	.byte  TK_XOR 
      002F91                       4462 	_op_entry 2,OR,TK_OR 
      002F91 2F 8B                    1 	.word OP_LINK 
                           002F93     2 	OP_LINK=.
      002F93                          3 OR:
      002F93 02                       4 	.byte 2 
      002F94 4F 52 00                 5 	.asciz "OR" 
      002F97 88                       6 	.byte  TK_OR 
      002F98                       4463 op_dict:	
      002F98                       4464 	_op_entry 3,AND,TK_AND 
      002F98 2F 93                    1 	.word OP_LINK 
                           002F9A     2 	OP_LINK=.
      002F9A                          3 AND:
      002F9A 03                       4 	.byte 3 
      002F9B 41 4E 44 00              5 	.asciz "AND" 
      002F9F 87                       6 	.byte  TK_AND 
                                   4465 
                                   4466 ;------------------------------
                                   4467 ;  search operator dictonary 
                                   4468 ;  input:
                                   4469 ;     x    *name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



                                   4470 ;  output:
                                   4471 ;     A     op_id | 0 
                                   4472 ;-----------------------------
                           000001  4473 	NLEN=1 
                           000002  4474 	NAME=2
                           000004  4475 	XSAVE=4
                           000005  4476 	VSIZE=5 
      002FA0                       4477 search_op_dict:
      002FA0                       4478 	_vars VSIZE 
      002FA0 52 05            [ 2]    1     sub sp,#VSIZE 
      002FA2 1F 02            [ 2] 4479 	ldw (NAME,sp),x 
      002FA4 CD 13 E4         [ 4] 4480 	call strlen 
      002FA7 6B 01            [ 1] 4481 	ld (NLEN,sp),a 
      002FA9 AE 2F 9A         [ 2] 4482 	ldw x,#op_dict+2
      002FAC 1F 04            [ 2] 4483 1$:	ldw (XSAVE,sp),x 
      002FAE F6               [ 1] 4484 	ld a,(x)
      002FAF 11 01            [ 1] 4485 	cp a,(NLEN,sp)
      002FB1 27 0A            [ 1] 4486 	jreq 3$
                                   4487 ; skip over this one 	
      002FB3 1E 04            [ 2] 4488 2$:	ldw x,(XSAVE,sp)
      002FB5 1D 00 02         [ 2] 4489 	subw x,#2 
      002FB8 FE               [ 2] 4490 	ldw x,(x) ; link 
      002FB9 27 1A            [ 1] 4491 	jreq 8$ 
      002FBB 20 EF            [ 2] 4492 	jra 1$
      002FBD                       4493 3$: ; len good compare string 
      002FBD 5C               [ 1] 4494 	incw x  
      002FBE 16 02            [ 2] 4495 	ldw y,(NAME,sp)
      002FC0 CD 13 EF         [ 4] 4496 	call strcmp 
      002FC3 27 EE            [ 1] 4497 	jreq 2$ 
                                   4498 ; found 
      002FC5 1E 04            [ 2] 4499 	ldw x,(XSAVE,sp)
                                   4500 ; skip to id field 
      002FC7 F6               [ 1] 4501 	ld a,(x) ; len field 
      002FC8 AB 02            [ 1] 4502 	add a,#2 ; len and 0 at end of string 
      002FCA 88               [ 1] 4503 	push a 
      002FCB 4B 00            [ 1] 4504 	push #0 
      002FCD 72 FB 01         [ 2] 4505 	addw x,(1,sp)
      002FD0                       4506 	_drop 2 
      002FD0 5B 02            [ 2]    1     addw sp,#2 
      002FD2 F6               [ 1] 4507 	ld a,(x)
      002FD3 20 01            [ 2] 4508 	jra 9$ 
      002FD5                       4509 8$: ; not found 	
      002FD5 4F               [ 1] 4510 	clr a 	
      002FD6                       4511 9$:	_drop VSIZE 
      002FD6 5B 05            [ 2]    1     addw sp,#VSIZE 
      002FD8 81               [ 4] 4512 	ret 
                                   4513 
                                   4514 
                                   4515 ;------------------------------
                                   4516 ;      dictionary 
                                   4517 ; format:
                                   4518 ;   link:   2 bytes 
                                   4519 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4520 ;   cmd_name: 16 byte max 
                                   4521 ;   cmd_index: 2 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



                                   4522 ;------------------------------
                                   4523 	.macro _dict_entry len,name,cmd_idx 
                                   4524 	.word LINK 
                                   4525 	LINK=.
                                   4526 name:
                                   4527 	.byte len 	
                                   4528 	.ascii "name"
                                   4529 	.word cmd_idx 
                                   4530 	.endm 
                                   4531 
                           000000  4532 	LINK=0
                                   4533 ; respect alphabetic order for BASIC names from Z-A
                                   4534 ; this sort order is for a cleaner WORDS cmd output. 	
      002FD9                       4535 kword_end:
      002FD9                       4536 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002FD9 00 00                    1 	.word LINK 
                           002FDB     2 	LINK=.
      002FDB                          3 WRITE:
      002FDB 05                       4 	.byte 5 	
      002FDC 57 52 49 54 45           5 	.ascii "WRITE"
      002FE1 00 B6                    6 	.word WRITE_IDX 
      002FE3                       4537 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002FE3 2F DB                    1 	.word LINK 
                           002FE5     2 	LINK=.
      002FE5                          3 WORDS:
      002FE5 05                       4 	.byte 5 	
      002FE6 57 4F 52 44 53           5 	.ascii "WORDS"
      002FEB 00 B4                    6 	.word WORDS_IDX 
      002FED                       4538 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002FED 2F E5                    1 	.word LINK 
                           002FEF     2 	LINK=.
      002FEF                          3 WAIT:
      002FEF 04                       4 	.byte 4 	
      002FF0 57 41 49 54              5 	.ascii "WAIT"
      002FF4 00 B2                    6 	.word WAIT_IDX 
      002FF6                       4539 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002FF6 2F EF                    1 	.word LINK 
                           002FF8     2 	LINK=.
      002FF8                          3 USR:
      002FF8 43                       4 	.byte 3+F_IFUNC 	
      002FF9 55 53 52                 5 	.ascii "USR"
      002FFC 00 B0                    6 	.word USR_IDX 
      002FFE                       4540 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      002FFE 2F F8                    1 	.word LINK 
                           003000     2 	LINK=.
      003000                          3 UNTIL:
      003000 05                       4 	.byte 5 	
      003001 55 4E 54 49 4C           5 	.ascii "UNTIL"
      003006 00 AE                    6 	.word UNTIL_IDX 
      003008                       4541 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      003008 30 00                    1 	.word LINK 
                           00300A     2 	LINK=.
      00300A                          3 UFLASH:
      00300A 46                       4 	.byte 6+F_IFUNC 	
      00300B 55 46 4C 41 53 48        5 	.ascii "UFLASH"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003011 00 AC                    6 	.word UFLASH_IDX 
      003013                       4542 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      003013 30 0A                    1 	.word LINK 
                           003015     2 	LINK=.
      003015                          3 UBOUND:
      003015 46                       4 	.byte 6+F_IFUNC 	
      003016 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00301C 00 AA                    6 	.word UBOUND_IDX 
      00301E                       4543 	_dict_entry,4,TONE,TONE_IDX;tone  
      00301E 30 15                    1 	.word LINK 
                           003020     2 	LINK=.
      003020                          3 TONE:
      003020 04                       4 	.byte 4 	
      003021 54 4F 4E 45              5 	.ascii "TONE"
      003025 00 A8                    6 	.word TONE_IDX 
      003027                       4544 	_dict_entry,2,TO,TO_IDX;to
      003027 30 20                    1 	.word LINK 
                           003029     2 	LINK=.
      003029                          3 TO:
      003029 02                       4 	.byte 2 	
      00302A 54 4F                    5 	.ascii "TO"
      00302C 00 A6                    6 	.word TO_IDX 
      00302E                       4545 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      00302E 30 29                    1 	.word LINK 
                           003030     2 	LINK=.
      003030                          3 TIMER:
      003030 05                       4 	.byte 5 	
      003031 54 49 4D 45 52           5 	.ascii "TIMER"
      003036 00 A2                    6 	.word TIMER_IDX 
      003038                       4546 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      003038 30 30                    1 	.word LINK 
                           00303A     2 	LINK=.
      00303A                          3 TIMEOUT:
      00303A 47                       4 	.byte 7+F_IFUNC 	
      00303B 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003042 00 A4                    6 	.word TMROUT_IDX 
      003044                       4547 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      003044 30 3A                    1 	.word LINK 
                           003046     2 	LINK=.
      003046                          3 TICKS:
      003046 45                       4 	.byte 5+F_IFUNC 	
      003047 54 49 43 4B 53           5 	.ascii "TICKS"
      00304C 00 A0                    6 	.word TICKS_IDX 
      00304E                       4548 	_dict_entry,4,STOP,STOP_IDX;stop 
      00304E 30 46                    1 	.word LINK 
                           003050     2 	LINK=.
      003050                          3 STOP:
      003050 04                       4 	.byte 4 	
      003051 53 54 4F 50              5 	.ascii "STOP"
      003055 00 9E                    6 	.word STOP_IDX 
      003057                       4549 	_dict_entry,4,STEP,STEP_IDX;step 
      003057 30 50                    1 	.word LINK 
                           003059     2 	LINK=.
      003059                          3 STEP:
      003059 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      00305A 53 54 45 50              5 	.ascii "STEP"
      00305E 00 9C                    6 	.word STEP_IDX 
      003060                       4550 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      003060 30 59                    1 	.word LINK 
                           003062     2 	LINK=.
      003062                          3 SPIWR:
      003062 05                       4 	.byte 5 	
      003063 53 50 49 57 52           5 	.ascii "SPIWR"
      003068 00 9A                    6 	.word SPIWR_IDX 
      00306A                       4551 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      00306A 30 62                    1 	.word LINK 
                           00306C     2 	LINK=.
      00306C                          3 SPISEL:
      00306C 06                       4 	.byte 6 	
      00306D 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003073 00 98                    6 	.word SPISEL_IDX 
      003075                       4552 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      003075 30 6C                    1 	.word LINK 
                           003077     2 	LINK=.
      003077                          3 SPIRD:
      003077 45                       4 	.byte 5+F_IFUNC 	
      003078 53 50 49 52 44           5 	.ascii "SPIRD"
      00307D 00 94                    6 	.word SPIRD_IDX 
      00307F                       4553 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      00307F 30 77                    1 	.word LINK 
                           003081     2 	LINK=.
      003081                          3 SPIEN:
      003081 05                       4 	.byte 5 	
      003082 53 50 49 45 4E           5 	.ascii "SPIEN"
      003087 00 96                    6 	.word SPIEN_IDX 
      003089                       4554 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      003089 30 81                    1 	.word LINK 
                           00308B     2 	LINK=.
      00308B                          3 SLEEP:
      00308B 05                       4 	.byte 5 	
      00308C 53 4C 45 45 50           5 	.ascii "SLEEP"
      003091 00 92                    6 	.word SLEEP_IDX 
      003093                       4555     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      003093 30 8B                    1 	.word LINK 
                           003095     2 	LINK=.
      003095                          3 SIZE:
      003095 04                       4 	.byte 4 	
      003096 53 49 5A 45              5 	.ascii "SIZE"
      00309A 00 B8                    6 	.word SIZE_IDX 
      00309C                       4556 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      00309C 30 95                    1 	.word LINK 
                           00309E     2 	LINK=.
      00309E                          3 SAVE:
      00309E 04                       4 	.byte 4 	
      00309F 53 41 56 45              5 	.ascii "SAVE"
      0030A3 00 32                    6 	.word SAVE_IDX 
      0030A5                       4557 	_dict_entry 3,RUN,RUN_IDX;run
      0030A5 30 9E                    1 	.word LINK 
                           0030A7     2 	LINK=.
      0030A7                          3 RUN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0030A7 03                       4 	.byte 3 	
      0030A8 52 55 4E                 5 	.ascii "RUN"
      0030AB 00 8E                    6 	.word RUN_IDX 
      0030AD                       4558 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      0030AD 30 A7                    1 	.word LINK 
                           0030AF     2 	LINK=.
      0030AF                          3 RSHIFT:
      0030AF 46                       4 	.byte 6+F_IFUNC 	
      0030B0 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0030B6 00 8C                    6 	.word RSHIFT_IDX 
      0030B8                       4559 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      0030B8 30 AF                    1 	.word LINK 
                           0030BA     2 	LINK=.
      0030BA                          3 RND:
      0030BA 43                       4 	.byte 3+F_IFUNC 	
      0030BB 52 4E 44                 5 	.ascii "RND"
      0030BE 00 8A                    6 	.word RND_IDX 
      0030C0                       4560 	_dict_entry,6,RETURN,RET_IDX;return 
      0030C0 30 BA                    1 	.word LINK 
                           0030C2     2 	LINK=.
      0030C2                          3 RETURN:
      0030C2 06                       4 	.byte 6 	
      0030C3 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0030C9 00 88                    6 	.word RET_IDX 
      0030CB                       4561 	_dict_entry,7,RESTORE,REST_IDX;restore 
      0030CB 30 C2                    1 	.word LINK 
                           0030CD     2 	LINK=.
      0030CD                          3 RESTORE:
      0030CD 07                       4 	.byte 7 	
      0030CE 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0030D5 00 86                    6 	.word REST_IDX 
      0030D7                       4562 	_dict_entry 3,REM,REM_IDX;remark 
      0030D7 30 CD                    1 	.word LINK 
                           0030D9     2 	LINK=.
      0030D9                          3 REM:
      0030D9 03                       4 	.byte 3 	
      0030DA 52 45 4D                 5 	.ascii "REM"
      0030DD 00 84                    6 	.word REM_IDX 
      0030DF                       4563 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      0030DF 30 D9                    1 	.word LINK 
                           0030E1     2 	LINK=.
      0030E1                          3 REBOOT:
      0030E1 06                       4 	.byte 6 	
      0030E2 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0030E8 00 82                    6 	.word RBT_IDX 
      0030EA                       4564 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      0030EA 30 E1                    1 	.word LINK 
                           0030EC     2 	LINK=.
      0030EC                          3 READ:
      0030EC 44                       4 	.byte 4+F_IFUNC 	
      0030ED 52 45 41 44              5 	.ascii "READ"
      0030F1 00 80                    6 	.word READ_IDX 
      0030F3                       4565 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      0030F3 30 EC                    1 	.word LINK 
                           0030F5     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0030F5                          3 QKEY:
      0030F5 44                       4 	.byte 4+F_IFUNC 	
      0030F6 51 4B 45 59              5 	.ascii "QKEY"
      0030FA 00 7E                    6 	.word QKEY_IDX 
      0030FC                       4566 	_dict_entry,5+F_IFUNC,PORTI,PRTI_IDX;const_porti 
      0030FC 30 F5                    1 	.word LINK 
                           0030FE     2 	LINK=.
      0030FE                          3 PORTI:
      0030FE 45                       4 	.byte 5+F_IFUNC 	
      0030FF 50 4F 52 54 49           5 	.ascii "PORTI"
      003104 00 7C                    6 	.word PRTI_IDX 
      003106                       4567 	_dict_entry,5+F_IFUNC,PORTH,PRTH_IDX;const_porth 
      003106 30 FE                    1 	.word LINK 
                           003108     2 	LINK=.
      003108                          3 PORTH:
      003108 45                       4 	.byte 5+F_IFUNC 	
      003109 50 4F 52 54 48           5 	.ascii "PORTH"
      00310E 00 7A                    6 	.word PRTH_IDX 
      003110                       4568 	_dict_entry,5+F_IFUNC,PORTG,PRTG_IDX;const_portg 
      003110 31 08                    1 	.word LINK 
                           003112     2 	LINK=.
      003112                          3 PORTG:
      003112 45                       4 	.byte 5+F_IFUNC 	
      003113 50 4F 52 54 47           5 	.ascii "PORTG"
      003118 00 78                    6 	.word PRTG_IDX 
      00311A                       4569 	_dict_entry,5+F_IFUNC,PORTF,PRTF_IDX;const_portf
      00311A 31 12                    1 	.word LINK 
                           00311C     2 	LINK=.
      00311C                          3 PORTF:
      00311C 45                       4 	.byte 5+F_IFUNC 	
      00311D 50 4F 52 54 46           5 	.ascii "PORTF"
      003122 00 76                    6 	.word PRTF_IDX 
      003124                       4570 	_dict_entry,5+F_IFUNC,PORTE,PRTE_IDX;const_porte
      003124 31 1C                    1 	.word LINK 
                           003126     2 	LINK=.
      003126                          3 PORTE:
      003126 45                       4 	.byte 5+F_IFUNC 	
      003127 50 4F 52 54 45           5 	.ascii "PORTE"
      00312C 00 74                    6 	.word PRTE_IDX 
      00312E                       4571 	_dict_entry,5+F_IFUNC,PORTD,PRTD_IDX;const_portd
      00312E 31 26                    1 	.word LINK 
                           003130     2 	LINK=.
      003130                          3 PORTD:
      003130 45                       4 	.byte 5+F_IFUNC 	
      003131 50 4F 52 54 44           5 	.ascii "PORTD"
      003136 00 72                    6 	.word PRTD_IDX 
      003138                       4572 	_dict_entry,5+F_IFUNC,PORTC,PRTC_IDX;const_portc
      003138 31 30                    1 	.word LINK 
                           00313A     2 	LINK=.
      00313A                          3 PORTC:
      00313A 45                       4 	.byte 5+F_IFUNC 	
      00313B 50 4F 52 54 43           5 	.ascii "PORTC"
      003140 00 70                    6 	.word PRTC_IDX 
      003142                       4573 	_dict_entry,5+F_IFUNC,PORTB,PRTB_IDX;const_portb
      003142 31 3A                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                           003144     2 	LINK=.
      003144                          3 PORTB:
      003144 45                       4 	.byte 5+F_IFUNC 	
      003145 50 4F 52 54 42           5 	.ascii "PORTB"
      00314A 00 6E                    6 	.word PRTB_IDX 
      00314C                       4574 	_dict_entry,5+F_IFUNC,PORTA,PRTA_IDX;const_porta 
      00314C 31 44                    1 	.word LINK 
                           00314E     2 	LINK=.
      00314E                          3 PORTA:
      00314E 45                       4 	.byte 5+F_IFUNC 	
      00314F 50 4F 52 54 41           5 	.ascii "PORTA"
      003154 00 6C                    6 	.word PRTA_IDX 
      003156                       4575 	_dict_entry 5,PRINT,PRT_IDX;print 
      003156 31 4E                    1 	.word LINK 
                           003158     2 	LINK=.
      003158                          3 PRINT:
      003158 05                       4 	.byte 5 	
      003159 50 52 49 4E 54           5 	.ascii "PRINT"
      00315E 00 6A                    6 	.word PRT_IDX 
      003160                       4576 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      003160 31 58                    1 	.word LINK 
                           003162     2 	LINK=.
      003162                          3 POUT:
      003162 44                       4 	.byte 4+F_IFUNC 	
      003163 50 4F 55 54              5 	.ascii "POUT"
      003167 00 68                    6 	.word POUT_IDX 
      003169                       4577 	_dict_entry,4,POKE,POKE_IDX;poke 
      003169 31 62                    1 	.word LINK 
                           00316B     2 	LINK=.
      00316B                          3 POKE:
      00316B 04                       4 	.byte 4 	
      00316C 50 4F 4B 45              5 	.ascii "POKE"
      003170 00 66                    6 	.word POKE_IDX 
      003172                       4578 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      003172 31 6B                    1 	.word LINK 
                           003174     2 	LINK=.
      003174                          3 PMODE:
      003174 05                       4 	.byte 5 	
      003175 50 4D 4F 44 45           5 	.ascii "PMODE"
      00317A 00 60                    6 	.word PMODE_IDX 
      00317C                       4579 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      00317C 31 74                    1 	.word LINK 
                           00317E     2 	LINK=.
      00317E                          3 PINP:
      00317E 44                       4 	.byte 4+F_IFUNC 	
      00317F 50 49 4E 50              5 	.ascii "PINP"
      003183 00 64                    6 	.word PINP_IDX 
      003185                       4580 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      003185 31 7E                    1 	.word LINK 
                           003187     2 	LINK=.
      003187                          3 PEEK:
      003187 44                       4 	.byte 4+F_IFUNC 	
      003188 50 45 45 4B              5 	.ascii "PEEK"
      00318C 00 62                    6 	.word PEEK_IDX 
      00318E                       4581 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      00318E 31 87                    1 	.word LINK 
                           003190     2 	LINK=.
      003190                          3 PAUSE:
      003190 05                       4 	.byte 5 	
      003191 50 41 55 53 45           5 	.ascii "PAUSE"
      003196 00 5E                    6 	.word PAUSE_IDX 
      003198                       4582 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      003198 31 90                    1 	.word LINK 
                           00319A     2 	LINK=.
      00319A                          3 PAD:
      00319A 43                       4 	.byte 3+F_IFUNC 	
      00319B 50 41 44                 5 	.ascii "PAD"
      00319E 00 5C                    6 	.word PAD_IDX 
      0031A0                       4583 	_dict_entry,2,ON,ON_IDX; cmd_on 
      0031A0 31 9A                    1 	.word LINK 
                           0031A2     2 	LINK=.
      0031A2                          3 ON:
      0031A2 02                       4 	.byte 2 	
      0031A3 4F 4E                    5 	.ascii "ON"
      0031A5 00 BA                    6 	.word ON_IDX 
      0031A7                       4584 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      0031A7 31 A2                    1 	.word LINK 
                           0031A9     2 	LINK=.
      0031A9                          3 ODR:
      0031A9 43                       4 	.byte 3+F_IFUNC 	
      0031AA 4F 44 52                 5 	.ascii "ODR"
      0031AD 00 5A                    6 	.word ODR_IDX 
      0031AF                       4585 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      0031AF 31 A9                    1 	.word LINK 
                           0031B1     2 	LINK=.
      0031B1                          3 NOT:
      0031B1 43                       4 	.byte 3+F_IFUNC 	
      0031B2 4E 4F 54                 5 	.ascii "NOT"
      0031B5 00 58                    6 	.word NOT_IDX 
      0031B7                       4586 	_dict_entry,4,NEXT,NEXT_IDX;next 
      0031B7 31 B1                    1 	.word LINK 
                           0031B9     2 	LINK=.
      0031B9                          3 NEXT:
      0031B9 04                       4 	.byte 4 	
      0031BA 4E 45 58 54              5 	.ascii "NEXT"
      0031BE 00 54                    6 	.word NEXT_IDX 
      0031C0                       4587 	_dict_entry,3,NEW,NEW_IDX;new
      0031C0 31 B9                    1 	.word LINK 
                           0031C2     2 	LINK=.
      0031C2                          3 NEW:
      0031C2 03                       4 	.byte 3 	
      0031C3 4E 45 57                 5 	.ascii "NEW"
      0031C6 00 56                    6 	.word NEW_IDX 
      0031C8                       4588 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      0031C8 31 C2                    1 	.word LINK 
                           0031CA     2 	LINK=.
      0031CA                          3 LSHIFT:
      0031CA 46                       4 	.byte 6+F_IFUNC 	
      0031CB 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0031D1 00 52                    6 	.word LSHIFT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0031D3                       4589 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      0031D3 31 CA                    1 	.word LINK 
                           0031D5     2 	LINK=.
      0031D5                          3 LOG:
      0031D5 43                       4 	.byte 3+F_IFUNC 	
      0031D6 4C 4F 47                 5 	.ascii "LOG"
      0031D9 00 50                    6 	.word LOG_IDX 
      0031DB                       4590 	_dict_entry 4,LIST,LIST_IDX;list
      0031DB 31 D5                    1 	.word LINK 
                           0031DD     2 	LINK=.
      0031DD                          3 LIST:
      0031DD 04                       4 	.byte 4 	
      0031DE 4C 49 53 54              5 	.ascii "LIST"
      0031E2 00 4E                    6 	.word LIST_IDX 
      0031E4                       4591 	_dict_entry 3,LET,LET_IDX;let 
      0031E4 31 DD                    1 	.word LINK 
                           0031E6     2 	LINK=.
      0031E6                          3 LET:
      0031E6 03                       4 	.byte 3 	
      0031E7 4C 45 54                 5 	.ascii "LET"
      0031EA 00 4C                    6 	.word LET_IDX 
      0031EC                       4592 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      0031EC 31 E6                    1 	.word LINK 
                           0031EE     2 	LINK=.
      0031EE                          3 KEY:
      0031EE 83                       4 	.byte 3+F_CFUNC 	
      0031EF 4B 45 59                 5 	.ascii "KEY"
      0031F2 00 4A                    6 	.word KEY_IDX 
      0031F4                       4593 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      0031F4 31 EE                    1 	.word LINK 
                           0031F6     2 	LINK=.
      0031F6                          3 IWDGREF:
      0031F6 07                       4 	.byte 7 	
      0031F7 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0031FE 00 48                    6 	.word IWDGREF_IDX 
      003200                       4594 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      003200 31 F6                    1 	.word LINK 
                           003202     2 	LINK=.
      003202                          3 IWDGEN:
      003202 06                       4 	.byte 6 	
      003203 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003209 00 46                    6 	.word IWDGEN_IDX 
      00320B                       4595 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      00320B 32 02                    1 	.word LINK 
                           00320D     2 	LINK=.
      00320D                          3 INVERT:
      00320D 46                       4 	.byte 6+F_IFUNC 	
      00320E 49 4E 56 45 52 54        5 	.ascii "INVERT"
      003214 00 44                    6 	.word INVERT_IDX 
      003216                       4596 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      003216 32 0D                    1 	.word LINK 
                           003218     2 	LINK=.
      003218                          3 INPUT:
      003218 05                       4 	.byte 5 	
      003219 49 4E 50 55 54           5 	.ascii "INPUT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      00321E 00 42                    6 	.word INPUT_IDX 
      003220                       4597 	_dict_entry,2,IF,IF_IDX;if 
      003220 32 18                    1 	.word LINK 
                           003222     2 	LINK=.
      003222                          3 IF:
      003222 02                       4 	.byte 2 	
      003223 49 46                    5 	.ascii "IF"
      003225 00 40                    6 	.word IF_IDX 
      003227                       4598 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      003227 32 22                    1 	.word LINK 
                           003229     2 	LINK=.
      003229                          3 IDR:
      003229 43                       4 	.byte 3+F_IFUNC 	
      00322A 49 44 52                 5 	.ascii "IDR"
      00322D 00 3E                    6 	.word IDR_IDX 
      00322F                       4599 	_dict_entry,3,HEX,HEX_IDX;hex_base
      00322F 32 29                    1 	.word LINK 
                           003231     2 	LINK=.
      003231                          3 HEX:
      003231 03                       4 	.byte 3 	
      003232 48 45 58                 5 	.ascii "HEX"
      003235 00 3C                    6 	.word HEX_IDX 
      003237                       4600 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      003237 32 31                    1 	.word LINK 
                           003239     2 	LINK=.
      003239                          3 GPIO:
      003239 44                       4 	.byte 4+F_IFUNC 	
      00323A 47 50 49 4F              5 	.ascii "GPIO"
      00323E 00 3A                    6 	.word GPIO_IDX 
      003240                       4601 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      003240 32 39                    1 	.word LINK 
                           003242     2 	LINK=.
      003242                          3 GOTO:
      003242 04                       4 	.byte 4 	
      003243 47 4F 54 4F              5 	.ascii "GOTO"
      003247 00 38                    6 	.word GOTO_IDX 
      003249                       4602 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      003249 32 42                    1 	.word LINK 
                           00324B     2 	LINK=.
      00324B                          3 GOSUB:
      00324B 05                       4 	.byte 5 	
      00324C 47 4F 53 55 42           5 	.ascii "GOSUB"
      003251 00 36                    6 	.word GOSUB_IDX 
      003253                       4603 	_dict_entry,3,GET,GET_IDX; cmd_get 
      003253 32 4B                    1 	.word LINK 
                           003255     2 	LINK=.
      003255                          3 GET:
      003255 03                       4 	.byte 3 	
      003256 47 45 54                 5 	.ascii "GET"
      003259 00 BC                    6 	.word GET_IDX 
      00325B                       4604 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      00325B 32 55                    1 	.word LINK 
                           00325D     2 	LINK=.
      00325D                          3 FREE:
      00325D 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00325E 46 52 45 45              5 	.ascii "FREE"
      003262 00 90                    6 	.word FREE_IDX 
      003264                       4605 	_dict_entry,3,FOR,FOR_IDX;for 
      003264 32 5D                    1 	.word LINK 
                           003266     2 	LINK=.
      003266                          3 FOR:
      003266 03                       4 	.byte 3 	
      003267 46 4F 52                 5 	.ascii "FOR"
      00326A 00 34                    6 	.word FOR_IDX 
      00326C                       4606 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      00326C 32 66                    1 	.word LINK 
                           00326E     2 	LINK=.
      00326E                          3 FCPU:
      00326E 04                       4 	.byte 4 	
      00326F 46 43 50 55              5 	.ascii "FCPU"
      003273 00 30                    6 	.word FCPU_IDX 
      003275                       4607 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      003275 32 6E                    1 	.word LINK 
                           003277     2 	LINK=.
      003277                          3 ERASE:
      003277 05                       4 	.byte 5 	
      003278 45 52 41 53 45           5 	.ascii "ERASE"
      00327D 00 2E                    6 	.word ERASE_IDX 
      00327F                       4608 	_dict_entry,3,END,END_IDX;cmd_end  
      00327F 32 77                    1 	.word LINK 
                           003281     2 	LINK=.
      003281                          3 END:
      003281 03                       4 	.byte 3 	
      003282 45 4E 44                 5 	.ascii "END"
      003285 00 2C                    6 	.word END_IDX 
      003287                       4609 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      003287 32 81                    1 	.word LINK 
                           003289     2 	LINK=.
      003289                          3 EEPROM:
      003289 46                       4 	.byte 6+F_IFUNC 	
      00328A 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003290 00 2A                    6 	.word EEPROM_IDX 
      003292                       4610 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      003292 32 89                    1 	.word LINK 
                           003294     2 	LINK=.
      003294                          3 EEFREE:
      003294 46                       4 	.byte 6+F_IFUNC 	
      003295 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00329B 00 C0                    6 	.word EEFREE_IDX 
      00329D                       4611 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      00329D 32 94                    1 	.word LINK 
                           00329F     2 	LINK=.
      00329F                          3 EDIT:
      00329F 04                       4 	.byte 4 	
      0032A0 45 44 49 54              5 	.ascii "EDIT"
      0032A4 00 28                    6 	.word EDIT_IDX 
      0032A6                       4612 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      0032A6 32 9F                    1 	.word LINK 
                           0032A8     2 	LINK=.
      0032A8                          3 DWRITE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0032A8 06                       4 	.byte 6+F_CMD 	
      0032A9 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0032AF 00 26                    6 	.word DWRITE_IDX 
      0032B1                       4613 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      0032B1 32 A8                    1 	.word LINK 
                           0032B3     2 	LINK=.
      0032B3                          3 DREAD:
      0032B3 45                       4 	.byte 5+F_IFUNC 	
      0032B4 44 52 45 41 44           5 	.ascii "DREAD"
      0032B9 00 24                    6 	.word DREAD_IDX 
      0032BB                       4614 	_dict_entry,2,DO,DO_IDX;do_loop
      0032BB 32 B3                    1 	.word LINK 
                           0032BD     2 	LINK=.
      0032BD                          3 DO:
      0032BD 02                       4 	.byte 2 	
      0032BE 44 4F                    5 	.ascii "DO"
      0032C0 00 22                    6 	.word DO_IDX 
      0032C2                       4615 	_dict_entry,3,DEC,DEC_IDX;dec_base
      0032C2 32 BD                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 DEC:
      0032C4 03                       4 	.byte 3 	
      0032C5 44 45 43                 5 	.ascii "DEC"
      0032C8 00 20                    6 	.word DEC_IDX 
      0032CA                       4616 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      0032CA 32 C4                    1 	.word LINK 
                           0032CC     2 	LINK=.
      0032CC                          3 DDR:
      0032CC 43                       4 	.byte 3+F_IFUNC 	
      0032CD 44 44 52                 5 	.ascii "DDR"
      0032D0 00 1E                    6 	.word DDR_IDX 
      0032D2                       4617 	_dict_entry,4,DATA,DATA_IDX;data  
      0032D2 32 CC                    1 	.word LINK 
                           0032D4     2 	LINK=.
      0032D4                          3 DATA:
      0032D4 04                       4 	.byte 4 	
      0032D5 44 41 54 41              5 	.ascii "DATA"
      0032D9 00 1C                    6 	.word DATA_IDX 
      0032DB                       4618 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      0032DB 32 D4                    1 	.word LINK 
                           0032DD     2 	LINK=.
      0032DD                          3 CRL:
      0032DD 43                       4 	.byte 3+F_IFUNC 	
      0032DE 43 52 4C                 5 	.ascii "CRL"
      0032E1 00 1A                    6 	.word CRL_IDX 
      0032E3                       4619 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      0032E3 32 DD                    1 	.word LINK 
                           0032E5     2 	LINK=.
      0032E5                          3 CRH:
      0032E5 43                       4 	.byte 3+F_IFUNC 	
      0032E6 43 52 48                 5 	.ascii "CRH"
      0032E9 00 18                    6 	.word CRH_IDX 
      0032EB                       4620 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      0032EB 32 E5                    1 	.word LINK 
                           0032ED     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0032ED                          3 CONST:
      0032ED 05                       4 	.byte 5 	
      0032EE 43 4F 4E 53 54           5 	.ascii "CONST"
      0032F3 00 BE                    6 	.word CONST_IDX 
      0032F5                       4621 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      0032F5 32 ED                    1 	.word LINK 
                           0032F7     2 	LINK=.
      0032F7                          3 CHAR:
      0032F7 84                       4 	.byte 4+F_CFUNC 	
      0032F8 43 48 41 52              5 	.ascii "CHAR"
      0032FC 00 16                    6 	.word CHAR_IDX 
      0032FE                       4622 	_dict_entry,3,BYE,BYE_IDX;bye 
      0032FE 32 F7                    1 	.word LINK 
                           003300     2 	LINK=.
      003300                          3 BYE:
      003300 03                       4 	.byte 3 	
      003301 42 59 45                 5 	.ascii "BYE"
      003304 00 14                    6 	.word BYE_IDX 
      003306                       4623 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      003306 33 00                    1 	.word LINK 
                           003308     2 	LINK=.
      003308                          3 BTOGL:
      003308 05                       4 	.byte 5 	
      003309 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00330E 00 12                    6 	.word BTOGL_IDX 
      003310                       4624 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      003310 33 08                    1 	.word LINK 
                           003312     2 	LINK=.
      003312                          3 BTEST:
      003312 45                       4 	.byte 5+F_IFUNC 	
      003313 42 54 45 53 54           5 	.ascii "BTEST"
      003318 00 10                    6 	.word BTEST_IDX 
      00331A                       4625 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      00331A 33 12                    1 	.word LINK 
                           00331C     2 	LINK=.
      00331C                          3 BSET:
      00331C 04                       4 	.byte 4 	
      00331D 42 53 45 54              5 	.ascii "BSET"
      003321 00 0E                    6 	.word BSET_IDX 
      003323                       4626 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      003323 33 1C                    1 	.word LINK 
                           003325     2 	LINK=.
      003325                          3 BRES:
      003325 04                       4 	.byte 4 	
      003326 42 52 45 53              5 	.ascii "BRES"
      00332A 00 0C                    6 	.word BRES_IDX 
      00332C                       4627 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      00332C 33 25                    1 	.word LINK 
                           00332E     2 	LINK=.
      00332E                          3 BIT:
      00332E 43                       4 	.byte 3+F_IFUNC 	
      00332F 42 49 54                 5 	.ascii "BIT"
      003332 00 0A                    6 	.word BIT_IDX 
      003334                       4628 	_dict_entry,3,AWU,AWU_IDX;awu 
      003334 33 2E                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                           003336     2 	LINK=.
      003336                          3 AWU:
      003336 03                       4 	.byte 3 	
      003337 41 57 55                 5 	.ascii "AWU"
      00333A 00 08                    6 	.word AWU_IDX 
      00333C                       4629 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      00333C 33 36                    1 	.word LINK 
                           00333E     2 	LINK=.
      00333E                          3 ASC:
      00333E 43                       4 	.byte 3+F_IFUNC 	
      00333F 41 53 43                 5 	.ascii "ASC"
      003342 00 06                    6 	.word ASC_IDX 
      003344                       4630 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      003344 33 3E                    1 	.word LINK 
                           003346     2 	LINK=.
      003346                          3 ADCREAD:
      003346 47                       4 	.byte 7+F_IFUNC 	
      003347 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00334E 00 04                    6 	.word ADCREAD_IDX 
      003350                       4631 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      003350 33 46                    1 	.word LINK 
                           003352     2 	LINK=.
      003352                          3 ADCON:
      003352 05                       4 	.byte 5 	
      003353 41 44 43 4F 4E           5 	.ascii "ADCON"
      003358 00 02                    6 	.word ADCON_IDX 
      00335A                       4632 kword_dict::
      00335A                       4633 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      00335A 33 52                    1 	.word LINK 
                           00335C     2 	LINK=.
      00335C                          3 ABS:
      00335C 43                       4 	.byte 3+F_IFUNC 	
      00335D 41 42 53                 5 	.ascii "ABS"
      003360 00 00                    6 	.word ABS_IDX 
                                   4634 
                                   4635 ;comands and fonctions address table 	
      003362                       4636 code_addr::
      003362 2A 64 25 B9 26 09 29  4637 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
             02 2A 0B 2D 1E
      00336E 21 77 21 55 21 BC 21  4638 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             9A 29 D6 28 EB 2D E1
      00337C 2D DC 2D F5 2D D7 1C  4639 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             01 2D 5A 26 45 26 7C
      00338A 1F 6A 2D F0 25 25 27  4640 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             1D 2A D5 27 B9 22 4F
             24 85 24 6B 29 52
      00339E 1B FC 2D D2 22 35 20  4641 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             75 2D 44 2C AE 2C EC
             29 41
      0033AE 1C 5A 1E C5 2C F1 2A  4642 	.word let,list,log2,lshift,next,new ; 40..47
             7B 22 FB 27 13
      0033BA 2C 8F 2D CD 2F 84 29  4643 	.word func_not,const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             EA 2A E4 22 14 2D EB
      0033C8 21 F3 2D E6 1F D2 2D  4644 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             A0 2D A5 2D AA 2D AF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



             2D B4
      0033D8 2D B9 2D BE 2D C3 2D  4645 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             C8 29 45 2E 71 00 C3
             21 12
      0033E8 2E 2A 24 AB 2B 71 2A  4646 	.word restore,return, random,rshift,run,free ; 72..79
             A8 24 C9 1C 06
      0033F4 29 DF 2F 66 2E CE 2F  4647 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             6D 2F 46 22 B9 26 C7
             2A 5D
      003404 2C 72 2C 89 22 79 25  4648 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             62 1C 4F 29 82 2D 6D
             29 97
      003414 21 18 2C 0C 28 A8 1C  4649 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             22 23 DF 25 2C 1D 85
      003422 1D 18 00 00           4650 	.word func_eefree,0 
                                   4651 
                                   4652 
                                   4653 
                                   4654 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      003426                         30 test:
      003426                         31     _vars VSIZE 
      003426 52 08            [ 2]    1     sub sp,#VSIZE 
      003428 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      00342B 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      00342D CE 00 0F         [ 2]   34     ldw x,ticks 
      003430 1F 01            [ 2]   35     ldw (T,sp),x
      003432                         36 1$: ; test add24 
      003432 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      003434 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      003437 C7 00 0C         [ 1]   39     ld acc24,a 
      00343A CF 00 0D         [ 2]   40     ldw acc24+1,x  
      00343D A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      00343F AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003442 CD 01 6A         [ 4]   43     call add24 
      003445 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003447 1D 00 01         [ 2]   45     subw x,#1
      00344A 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      00344C 26 E4            [ 1]   47     jrne 1$
      00344E CD 18 0D         [ 4]   48     call prt_acc24
      003451 A6 20            [ 1]   49     ld a,#SPACE 
      003453 CD 09 44         [ 4]   50     call putc 
      003456 CE 00 0F         [ 2]   51     ldw x,ticks 
      003459 72 F0 01         [ 2]   52     subw x,(T,sp)
      00345C CD 17 F6         [ 4]   53     call prt_i16  
      00345F A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003461 CD 09 44         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003464 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003467 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003469 CE 00 0F         [ 2]   60     ldw x,ticks 
      00346C 1F 01            [ 2]   61     ldw (T,sp),x 
      00346E                         62 2$: 
      00346E A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      003470 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003473 C7 00 0C         [ 1]   65     ld acc24,a 
      003476 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003479 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      00347B AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00347E CD 02 5D         [ 4]   69     call mul24 
      003481 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003483 1D 00 01         [ 2]   71     subw x,#1
      003486 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003488 26 E4            [ 1]   73     jrne 2$ 
      00348A CD 18 0D         [ 4]   74    call prt_acc24 
      00348D A6 20            [ 1]   75    ld a,#SPACE 
      00348F CD 09 44         [ 4]   76    call putc 
      003492 CE 00 0F         [ 2]   77     ldw x,ticks 
      003495 72 F0 01         [ 2]   78     subw x,(T,sp)
      003498 CD 17 F6         [ 4]   79     call prt_i16 
      00349B A6 0D            [ 1]   80     ld a,#CR 
      00349D CD 09 44         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      0034A0 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      0034A3 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      0034A5 CE 00 0F         [ 2]   85     ldw x,ticks 
      0034A8 1F 01            [ 2]   86     ldw (T,sp),x 
      0034AA                         87 3$: 
      0034AA A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      0034AC AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      0034AF C7 00 0C         [ 1]   90     ld acc24,a 
      0034B2 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      0034B5 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      0034B7 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034BA CD 02 5D         [ 4]   94     call mul24 
      0034BD 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034BF 1D 00 01         [ 2]   96     subw x,#1
      0034C2 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034C4 26 E4            [ 1]   98     jrne 3$ 
      0034C6 CD 18 0D         [ 4]   99     call prt_acc24    
      0034C9 A6 20            [ 1]  100     ld a,#SPACE 
      0034CB CD 09 44         [ 4]  101     call putc 
      0034CE CE 00 0F         [ 2]  102     ldw x,ticks 
      0034D1 72 F0 01         [ 2]  103     subw x,(T,sp)
      0034D4 CD 17 F6         [ 4]  104     call prt_i16 
      0034D7 A6 0D            [ 1]  105     ld a,#CR 
      0034D9 CD 09 44         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      0034DC CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      0034DF 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      0034E1 CE 00 0F         [ 2]  110     ldw x,ticks 
      0034E4 1F 01            [ 2]  111     ldw (T,sp),x 
      0034E6                        112 4$:
      0034E6 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034E8 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0034EB C7 00 0C         [ 1]  115     ld acc24,a 
      0034EE CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0034F1 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0034F3 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0034F6 CD 02 5D         [ 4]  119     call mul24 
      0034F9 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0034FB 1D 00 01         [ 2]  121     subw x,#1
      0034FE 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003500 26 E4            [ 1]  123     jrne 4$ 
      003502 CD 18 0D         [ 4]  124     call prt_acc24 
      003505 A6 20            [ 1]  125     ld a,#SPACE 
      003507 CD 09 44         [ 4]  126     call putc 
      00350A CE 00 0F         [ 2]  127     ldw x,ticks 
      00350D 72 F0 01         [ 2]  128     subw x,(T,sp)
      003510 CD 17 F6         [ 4]  129     call prt_i16 
      003513 A6 0D            [ 1]  130     ld a,#CR 
      003515 CD 09 44         [ 4]  131     call putc 
                                    132 ; test abs24 
      003518 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      00351B 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      00351D CE 00 0F         [ 2]  135     ldw x,ticks 
      003520 1F 01            [ 2]  136     ldw (T,sp),x 
      003522                        137 5$: 
      003522 A6 FF            [ 1]  138     ld a,#0xff
      003524 AE FF FF         [ 2]  139     ldw x,#0xffff
      003527 CD 01 DF         [ 4]  140     call abs24 
      00352A C7 00 0C         [ 1]  141     ld acc24,a 
      00352D CF 00 0D         [ 2]  142     ldw acc24+1,x
      003530 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003532 1D 00 01         [ 2]  144     subw x,#1
      003535 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      003537 26 E9            [ 1]  146     jrne 5$ 
      003539 CD 18 0D         [ 4]  147     call prt_acc24 
      00353C A6 20            [ 1]  148     ld a,#SPACE 
      00353E CD 09 44         [ 4]  149     call putc 
      003541 CE 00 0F         [ 2]  150     ldw x,ticks 
      003544 72 F0 01         [ 2]  151     subw x,(T,sp)
      003547 CD 17 F6         [ 4]  152     call prt_i16 
      00354A                        153 6$:
      00354A A6 0D            [ 1]  154     ld a,#CR 
      00354C CD 09 44         [ 4]  155     call putc 
      00354F CD 35 95         [ 4]  156     call read_integer 
      003552 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003557 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      00355C 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003561 CD 35 95         [ 4]  160     call read_integer 
      003564 C6 00 0C         [ 1]  161     ld a,acc24 
      003567 CE 00 0D         [ 2]  162     ldw x,acc16 
      00356A 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      00356F 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      003574 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003579 CD 03 27         [ 4]  166     call div24 
      00357C 88               [ 1]  167     push a 
      00357D 89               [ 2]  168     pushw x 
      00357E CD 18 0D         [ 4]  169     call prt_acc24 
      003581 A6 20            [ 1]  170     ld a,#SPACE 
      003583 CD 09 44         [ 4]  171     call putc 
      003586 85               [ 2]  172     popw x
      003587 CF 00 0D         [ 2]  173     ldw acc16,x  
      00358A 32 00 0C         [ 1]  174     pop acc24 
      00358D CD 18 0D         [ 4]  175     call prt_acc24
      003590 20 B8            [ 2]  176     jra 6$
      003592                        177     _drop VSIZE 
      003592 5B 08            [ 2]    1     addw sp,#VSIZE 
      003594 81               [ 4]  178     ret 
                                    179 
                                    180 
      003595                        181 read_integer:
      003595 A6 3F            [ 1]  182     ld a,#'? 
      003597 CD 09 44         [ 4]  183     call putc  
      00359A 72 5F 00 03      [ 1]  184 	clr count  
      00359E CD 0A A6         [ 4]  185 	call readln 
      0035A1 AE 16 68         [ 2]  186 	ldw x,#tib 
      0035A4 3B 00 03         [ 1]  187 	push count
      0035A7 4B 00            [ 1]  188 	push #0 
      0035A9 72 FB 01         [ 2]  189 	addw x,(1,sp)
      0035AC 5C               [ 1]  190 	incw x 
      0035AD                        191 	_drop 2 
      0035AD 5B 02            [ 2]    1     addw sp,#2 
      0035AF 72 5F 00 01      [ 1]  192 	clr in 
      0035B3 CD 0F 1F         [ 4]  193 	call get_token
      0035B6 A1 84            [ 1]  194 	cp a,#TK_INTGR
      0035B8 27 0F            [ 1]  195 	jreq 3$ 
      0035BA A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035BC CD 0F 1F         [ 4]  197 	call get_token 
      0035BF A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035C1 27 03            [ 1]  199 	jreq 2$
      0035C3 CC 16 A0         [ 2]  200 	jp syntax_error
      0035C6                        201 2$:
      0035C6 CD 02 0D         [ 4]  202 	call neg_acc24  	
      0035C9                        203 3$: 
      0035C9 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        00335C R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003352 R
    ADCON_ID=  000002     |   4 ADCREAD    003346 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        002F9A R   |     ARG_OFS =  000002     |     ARROW_LE=  000080 
    ARROW_RI=  000081     |   4 ASC        00333E R   |     ASC_IDX =  000006 
    ATMP    =  000001     |     ATTRIB  =  000002     |   4 AUTO_RUN   000157 R
  4 AWU        003336 R   |   4 AWUHandl   000004 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  000008 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   4 BIT        00332E R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BIT_IDX =  00000A     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000D 
  4 BRES       003325 R   |     BRES_IDX=  00000C     |     BS      =  000008 
  4 BSET       00331C R   |     BSET_IDX=  00000E     |     BSIZE   =  000006 
  4 BTEST      003312 R   |     BTEST_ID=  000010     |   4 BTOGL      003308 R
    BTOGL_ID=  000012     |     BTW     =  000001     |     BUFPTR  =  000003 
  4 BYE        003300 R   |     BYE_IDX =  000014     |     C       =  000001 
    CAN     =  000018     |   4 CANT_DO    002850 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       0032F7 R
    CHAR_IDX=  000016     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     COMMA   =  00002C     |   4 CONST      0032ED R
  4 CONST_CO   001D02 R   |     CONST_ID=  0000BE     |     CONST_RE=  000005 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        0032E5 R
    CRH_IDX =  000018     |   4 CRL        0032DD R   |     CRL_IDX =  00001A 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       0032D4 R
    DATA_IDX=  00001C     |     DBG_A   =  000008     |     DBG_CC  =  000009 
    DBG_X   =  000006     |     DBG_Y   =  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        0032CC R   |     DDR_IDX =  00001E     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        0032C4 R
    DEC_IDX =  000020     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |     DIVISOR =  000001     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  4 DO         0032BD R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
    DO_IDX  =  000022     |   4 DREAD      0032B3 R   |     DREAD_ID=  000024 
  4 DWRITE     0032A8 R   |     DWRITE_I=  000026     |   4 EDIT       00329F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    EDIT_IDX=  000028     |   4 EEFREE     003294 R   |     EEFREE_I=  0000C0 
  4 EEPROM     003289 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EEPTR   =  000003 
    EM      =  000019     |   4 END        003281 R   |     END_IDX =  00002C 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
  4 ERASE      003277 R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_OVER=  000010     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       00326E R
    FCPU_IDX=  000030     |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |   4 FLASH_ME   001EA5 R
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        003266 R   |     FOR_IDX =  000034     |   4 FREE       00325D R
    FREE_IDX=  000090     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   4 GET        003255 R   |     GET_IDX =  0000BC 
  4 GOSUB      00324B R   |     GOSUB_ID=  000036     |   4 GOTO       003242 R
    GOTO_IDX=  000038     |   4 GPIO       003239 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_IDX=  00003A     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        003231 R
    HEX_IDX =  00003C     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        003229 R   |     IDR_IDX =  00003E     |   4 IF         003222 R
    IF_IDX  =  000040     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      003218 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000042 
    INPUT_PU=  000001     |     INT24   =  000005     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  4 INVERT     00320D R   |     INVERT_I=  000044     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     003202 R   |     IWDGEN_I=  000046     |   4 IWDGREF    0031F6 R
    IWDGREF_=  000048     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        0031EE R
    KEY_END =  000083     |     KEY_IDX =  00004A     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        0031E6 R
    LET_IDX =  00004C     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  00335C R   |   4 LIST       0031DD R
    LIST_IDX=  00004E     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG        0031D5 R
    LOG_IDX =  000050     |     LOOP_CNT=  002710     |   4 LSHIFT     0031CA R
    LSHIFT_I=  000052     |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000004     |     N2      =  000007     |     NAFR    =  004804 
    NAK     =  000015     |     NAME    =  000002     |     NAMEPTR =  000001 
    NCLKOPT =  004808     |     NEG     =  000001     |   4 NEW        0031C2 R
    NEW_IDX =  000056     |   4 NEXT       0031B9 R   |     NEXT_IDX=  000054 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   4 NOT        0031B1 R
    NOT_IDX =  000058     |   4 NOT_SAVE   001F97 R   |   4 NO_APP     002892 R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        0031A9 R   |     ODR_IDX =  00005A 
  4 ON         0031A2 R   |     ONOFF   =  000003     |     ON_IDX  =  0000BA 
    OP      =  000002     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OP_LINK =  002F9A R
  4 OR         002F93 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        00319A R
    PAD_IDX =  00005C     |     PAD_SIZE=  000080     |   4 PAUSE      003190 R
    PAUSE_ID=  00005E     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       003187 R
    PEEK_IDX=  000062     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  4 PINP       00317E R   |     PINP_IDX=  000064     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      003174 R   |     PMODE_ID=  000060     |   4 POKE       00316B R
    POKE_IDX=  000066     |   4 PORTA      00314E R   |   4 PORTB      003144 R
  4 PORTC      00313A R   |   4 PORTD      003130 R   |   4 PORTE      003126 R
  4 PORTF      00311C R   |   4 PORTG      003112 R   |   4 PORTH      003108 R
  4 PORTI      0030FE R   |   4 POUT       003162 R   |     POUT_IDX=  000068 
    PREV    =  000001     |   4 PRINT      003158 R   |     PROD    =  000001 
    PROD_SIG=  00000A     |   4 PROG_ADD   001E7B R   |   4 PROG_SIZ   001E8D R
    PRTA_IDX=  00006C     |     PRTB_IDX=  00006E     |     PRTC_IDX=  000070 
    PRTD_IDX=  000072     |     PRTE_IDX=  000074     |     PRTF_IDX=  000076 
    PRTG_IDX=  000078     |     PRTH_IDX=  00007A     |     PRTI_IDX=  00007C 
    PRT_IDX =  00006A     |     PSIZE   =  000001     |     PSTR    =  000003 
  4 QKEY       0030F5 R   |     QKEY_IDX=  00007E     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001EB6 R
    RAM_SIZE=  001800     |     RBT_IDX =  000082     |   4 READ       0030EC R
    READ_IDX=  000080     |   4 REBOOT     0030E1 R   |     RECLEN  =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

  4 REG_A      000562 R   |   4 REG_CC     000566 R   |   4 REG_EPC    000555 R
  4 REG_SP     00056B R   |   4 REG_X      00055E R   |   4 REG_Y      00055A R
    RELOP   =  000001     |   4 REM        0030D9 R   |     REM_IDX =  000084 
  4 RESTORE    0030CD R   |     REST_IDX=  000086     |     RETL1   =  000001 
  4 RETURN     0030C2 R   |     RET_ADDR=  000003     |     RET_BPTR=  000003 
    RET_IDX =  000088     |     RET_INW =  000005     |   4 RND        0030BA R
    RND_IDX =  00008A     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     0030AF R   |     RSHIFT_I=  00008C     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        0030A7 R   |     RUN_IDX =  00008E 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  4 SAVE       00309E R   |     SAVE_IDX=  000032     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   00284E R
  4 SIZE       003095 R   |     SIZE_IDX=  0000B8     |     SKIP    =  000005 
  4 SLEEP      00308B R   |     SLEEP_ID=  000092     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      003081 R
    SPIEN_ID=  000096     |   4 SPIRD      003077 R   |     SPIRD_ID=  000094 
  4 SPISEL     00306C R   |     SPISEL_I=  000098     |   4 SPIWR      003062 R
    SPIWR_ID=  00009A     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     000518 R   |   4 STEP       003059 R   |     STEP_IDX=  00009C 
  4 STOP       003050 R   |     STOP_IDX=  00009E     |     STR     =  000003 
  4 STR_BYTE   001E9E R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TARGET  =  000001     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      003046 R   |     TICKS_ID=  0000A0     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    00303A R   |   4 TIMER      003030 R   |     TIMER_ID=  0000A2 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_AND  =  000087 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_OR   =  000088     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000007     |     TK_SHARP=  000009 
    TK_VAR  =  000085     |     TK_XOR  =  000089     |     TMROUT_I=  0000A4 
  4 TO         003029 R   |   4 TONE       003020 R   |     TONE_IDX=  0000A8 
    TOWRITE =  000005     |     TO_IDX  =  0000A6     |   4 Timer4Up   000021 R
  4 TrapHand   000012 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     003015 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    UBOUND_I=  0000AA     |   4 UBTN_Han   000068 R   |   4 UFLASH     00300A R
    UFLASH_I=  0000AC     |   4 UNTIL      003000 R   |     UNTIL_ID=  0000AE 
    UPDATE  =  000006     |     US      =  00001F     |   4 USER_ABO   000070 R
  4 USR        002FF8 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000B0     |   4 Uart1RxH   0008D2 R
  4 UserButt   000044 R   |     VAL1    =  02FFFF     |     VAL2    =  00002A 
    VAL3    =  000003     |     VAL4    =  0005FF     |     VAL5    =  FFFFFFFD 
    VSISE   =  000003     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       002FEF R   |     WAIT_IDX=  0000B2     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   4 WORDS      002FE5 R   |     WORDS_ID=  0000B4 
  4 WRITE      002FDB R   |     WRITE_ID=  0000B6     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        002F8B R
    XSAVE   =  000004     |     XSTACK_E=  001773     |     XSTACK_S=  00003C 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000003 
  4 abs        002A64 R   |   4 abs24      0001DF R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000C0D R   |   4 add24      00016A R   |   4 add_char   001392 R
  4 add_spac   00116F R   |   4 analog_r   002609 R   |   4 and_cond   001B36 R
  4 and_fact   001B1A R   |   4 app        003604 R   |   4 app_sign   003600 R
  4 app_size   003602 R   |   4 app_spac   003600 GR  |   4 arduino_   002B51 R
  4 arg_list   001961 R   |   5 array_si   000020 R   |   4 ascii      002902 R
  4 at_tst     000FD9 R   |   4 atoi24     001898 GR  |   4 atoi_exi   0018FE R
  4 awu        002A0B R   |   4 awu02      002A1E R   |   4 bad_port   00297D R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       002582 R
  4 beep_1kh   002559 GR  |   4 bin_exit   000E49 R   |   4 bit_rese   002177 R
  4 bit_set    002155 R   |   4 bit_test   0021BC R   |   4 bit_togg   00219A R
  4 bitmask    002D1E R   |   4 bkslsh_t   000F86 R   |   4 bksp       0009AB R
  2 block_bu   0016B8 GR  |   4 block_er   0007C0 R   |   4 break_po   0026F5 R
  4 bye        0029D6 R   |   4 char       0028EB R   |   4 clear_ba   0014FC R
  4 clear_bl   0027A5 R   |   4 clear_va   001454 R   |   4 clock_in   00008B R
  4 cloop_1    001DAB R   |   4 cmd_cons   001D85 R   |   4 cmd_end    002525 R
  4 cmd_get    00252C R   |   4 cmd_itf    000570 R   |   4 cmd_line   00172F R
  4 cmd_name   0013B2 R   |   4 cmd_on     0023DF R   |   4 cmd_size   001C22 R
  4 code_add   003362 GR  |   4 cold_sta   0000C3 R   |   4 colon_ts   000FAD R
  4 comma_ts   000FB8 R   |   4 comp_msg   00167F R   |   4 compile    0010DE GR
  4 conditio   001B88 R   |   4 const_cr   002DDC R   |   4 const_cr   002DE1 R
  4 const_dd   002DD7 R   |   4 const_ee   002DF0 R   |   4 const_id   002DD2 R
  4 const_in   002DEB R   |   4 const_lo   001DA6 R   |   4 const_od   002DCD R
  4 const_ou   002DE6 R   |   4 const_po   002DA0 R   |   4 const_po   002DA5 R
  4 const_po   002DAA R   |   4 const_po   002DAF R   |   4 const_po   002DB4 R
  4 const_po   002DB9 R   |   4 const_po   002DBE R   |   4 const_po   002DC3 R
  4 const_po   002DC8 R   |   4 convert_   000DB7 R   |   4 convert_   00096F R
  4 copy_com   00100E R   |   5 count      000003 GR  |   4 cp24       0001A4 R
  4 cp24_ax    0001D6 R   |   4 cp_loop    001910 R   |   4 cpl24      0001E6 R
  4 cpy_cmd_   00115A R   |   4 cpy_quot   001197 R   |   4 create_g   000CE1 R
  4 cs_high    002F7F R   |   4 dash_tst   000FCE R   |   4 data       002DF5 R
  5 data_len   000009 R   |   4 data_lin   002E04 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 data_sea   002E50 R   |   4 dec_base   001C01 R
  4 decomp_l   001250 R   |   4 decompil   001208 GR  |   4 del_line   000CB4 R
  4 delete_l   000A98 R   |   4 delete_n   0009BB R   |   4 delete_u   000A5D R
  4 digital_   002645 R   |   4 digital_   00267C R   |   4 div24      000327 R
  4 divu24_8   000309 R   |   4 do_loop    002D5A R   |   4 do_progr   0007B3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

  4 edit       001F6A R   |   4 enable_i   002CAE R   |   4 eql_tst    001063 R
  4 equal      0013A5 R   |   4 erase      00271D R   |   4 erase_ex   0007E4 R
  4 erase_fl   0007DA R   |   4 err_bad_   0015E0 R   |   4 err_buf_   001656 R
  4 err_cmd_   0015A4 R   |   4 err_div0   001569 R   |   4 err_dupl   0015BE R
  4 err_math   001550 R   |   4 err_mem_   001535 R   |   4 err_msg    001513 R
  4 err_no_a   0015EC R   |   4 err_no_d   00161F R   |   4 err_no_f   001643 R
  4 err_no_l   001578 R   |   4 err_no_p   00162F R   |   4 err_not_   0015CF R
  4 err_over   001663 R   |   4 err_run_   00158E R   |   4 err_synt   001542 R
  4 escaped    000DCC GR  |   4 expect     00194F R   |   4 expressi   001A83 R
  4 factor     0019A4 R   |   5 farptr     000018 R   |   4 fcpu       002AD5 R
  4 fetchc     000660 R   |   4 fill_wri   002795 R   |   4 final_te   000C06 R
  4 first_li   001F14 R   |   5 flags      000022 GR  |   4 for        00224F R
  4 free       001C06 R   |   5 free_eep   000024 R   |   7 free_ram   000080 R
  4 func_arg   00195C R   |   4 func_eef   001D18 R   |   4 func_not   002C8F R
  4 ge         0013A7 R   |   4 get_addr   0017D6 R   |   4 get_arra   001974 R
  4 get_char   0017F0 R   |   4 get_cmd_   0011E7 R   |   4 get_code   0017BA R
  4 get_cons   001C9D R   |   4 get_esca   00097B R   |   4 get_int2   0017E0 R
  4 get_targ   002370 R   |   4 get_targ   00237E R   |   4 get_tick   002A5D R
  4 get_toke   000F1F GR  |   4 getc       000954 GR  |   4 gosub      002485 R
  4 gosub_1    002490 R   |   4 gosub_2    002496 R   |   4 goto       00246B R
  4 goto_1     002475 R   |   4 gpio       002952 R   |   4 gt         0013A3 R
  4 gt_tst     00106E R   |   4 hex_base   001BFC R   |   4 hex_dump   0006A0 R
  4 if         002235 R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   0008B6 R   |   4 input_ex   00210D R
  4 input_lo   002079 R   |   4 input_va   002075 R   |   4 insert_c   000A1A R
  4 insert_l   000D0D R   |   4 insert_l   000D7C R   |   4 interp_l   001770 R
  4 interpre   00174B R   |   4 invalid    0005B5 R   |   4 invalid_   000636 R
  4 invert     002D44 R   |   4 is_alnum   000E7E GR  |   4 is_alpha   000E64 GR
  4 is_data_   002DFB R   |   4 is_digit   000E75 GR  |   4 is_symbo   000E87 R
  4 itoa       001833 GR  |   4 itoa_loo   001855 R   |   4 jp_to_ta   002478 R
  4 key        002941 R   |   4 kword_di   00335A GR  |   4 kword_en   002FD9 R
  4 le         0013AC R   |   4 ledoff     00046B R   |   4 ledon      000466 R
  4 ledtoggl   000470 R   |   4 left_par   000479 R   |   4 let        001C5A GR
  4 let_arra   001C68 R   |   4 let_eval   001C70 R   |   4 let_var    001C6D R
  4 lines_sk   001F17 R   |   4 list       001EC5 R   |   4 list_con   001CAC R
  4 list_exi   001F59 R   |   4 list_loo   001F37 R   |   4 log2       002CF1 R
  4 logical_   002CA2 R   |   4 look_tar   0023A1 R   |   4 loop_bac   002353 R
  5 loop_dep   00001F R   |   4 loop_don   002368 R   |   4 lshift     002A7B R
  4 lt         0013AA R   |   4 lt_tst     001097 R   |   4 mem_peek   0005D2 R
  4 mod24      0003D5 R   |   4 move       001410 GR  |   4 move_dow   00142F R
  4 move_era   000742 R   |   4 move_exi   001450 R   |   4 move_lef   0009F2 R
  4 move_loo   001434 R   |   4 move_prg   000782 R   |   4 move_rig   000A00 R
  4 move_up    001421 R   |   4 mul24      00025D R   |   4 mul_char   001394 R
  4 mulu24_8   00022A R   |   4 nbr_tst    000F52 R   |   4 ne         0013AF R
  4 neg24      0001F3 R   |   4 neg_acc2   00020D R   |   4 neg_ax     000205 R
  4 new        002713 R   |   4 next       0022FB R   |   4 next_lin   001753 R
  4 next_tok   0017A1 GR  |   4 no_match   001922 R   |   4 number     000666 R
  4 op_dict    002F98 R   |   4 op_end     002F89 R   |   4 other      0010C0 R
  4 overwrit   000C32 R   |   2 pad        0016B8 GR  |   4 pad_ref    002F84 R
  4 parse_bi   000E27 R   |   4 parse_in   000DD4 R   |   4 parse_ke   000EAA R
  4 parse_qu   000D7F R   |   4 parse_sy   000E92 R   |   4 pause      0029EA R
  4 pause02    0029FD R   |   4 peek       002214 R   |   4 peek_byt   000600 R
  4 pin_mode   002AE4 R   |   4 plus_tst   001037 R   |   4 poke       0021F3 R
  4 power_ad   0025B9 R   |   4 prcnt_ts   001058 R   |   4 print      001FD2 R
  4 print_fa   000645 R   |   4 print_he   000C67 GR  |   4 print_re   0004C5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

  4 print_st   0005C5 R   |   4 print_to   00181B R   |   4 prog_siz   001E34 R
  4 program_   001E3C R   |   4 program_   00075C R   |   4 program_   000782 R
  4 prt_acc2   00180D R   |   4 prt_basi   001FAE R   |   4 prt_i16    0017F6 R
  4 prt_loop   001FD6 R   |   4 prt_peek   000448 GR  |   4 prt_reg1   0004A6 R
  4 prt_reg8   000484 R   |   4 prt_regs   0003DE GR  |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       000944 GR  |   4 puts       0009A1 GR
  4 qgetc      00094D GR  |   4 qkey       002945 GR  |   4 qmark_ts   000FE4 R
  4 qsign      00278E R   |   4 random     002B71 R   |   4 read       002E71 R
  4 read01     002E73 R   |   4 read_int   003595 R   |   4 readln     000AA6 GR
  4 readln_l   000AB3 R   |   4 readln_q   000C4F R   |   4 refresh_   002CEC R
  4 regs_sta   000421 R   |   4 relation   001ABB R   |   4 relop_st   001397 R
  4 remark     002112 GR  |   4 repl       00057E R   |   4 repl_exi   0005A6 R
  4 reset_co   001FD4 R   |   4 rest_con   002065 R   |   4 restore    002E2A R
  4 restore_   002E6C R   |   4 return     0024AB R   |   4 right_al   001185 GR
  4 row_alig   00089B R   |   4 row_eras   000715 R   |   4 row_eras   000742 R
  4 row_loop   000683 R   |   4 rparnt_t   000FA2 R   |   4 rshift     002AA8 R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     00166D R
  4 run        0024C9 R   |   4 run_app    000135 R   |   4 run_it     0024FB R
  4 run_it_0   0024FD R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   0027B9 R   |   4 save_con   002055 R
  4 scan_blo   0008C4 R   |   4 search_c   001D41 R   |   4 search_d   001902 GR
  4 search_e   00194C R   |   4 search_l   000C89 GR  |   4 search_l   000C98 R
  4 search_n   001906 R   |   4 search_o   002FA0 R   |   5 seedx      000014 R
  5 seedy      000016 R   |   4 select_p   002B41 R   |   4 send_esc   0009C9 R
  4 send_par   0009D4 R   |   4 set_data   002E19 R   |   4 set_time   002C72 R
  4 sharp_ts   000FC3 R   |   4 show_row   000671 R   |   4 single_c   00138D R
  4 skip       000F0C R   |   4 skip_2_b   0017BE R   |   4 skip_str   0017C7 R
  4 slash_ts   00104D R   |   4 sleep      0029DF R   |   4 software   001463 R
  4 spaces     000A0E GR  |   4 spi_clea   002F19 R   |   4 spi_disa   002F01 R
  4 spi_enab   002ECE R   |   4 spi_rcv_   002F3B R   |   4 spi_read   002F66 R
  4 spi_sele   002F6D R   |   4 spi_send   002F25 R   |   4 spi_writ   002F46 R
  2 stack_fu   001774 GR  |   2 stack_un   001800 R   |   4 star_tst   001042 R
  4 step       0022B9 R   |   4 stop       0026C7 R   |   4 store_lo   0022E8 R
  4 str_matc   00192F R   |   4 str_tst    000F42 R   |   4 strcmp     0013EF R
  4 strcpy     001400 GR  |   4 strlen     0013E4 GR  |   4 sub24      000187 R
  4 symb_loo   000E93 R   |   4 syntax_e   0016A0 GR  |   4 system_i   0014A9 R
  5 tab_widt   000023 GR  |   4 tb_error   0016A2 GR  |   4 term       001A40 R
  4 term01     001A48 R   |   4 term_exi   001A80 R   |   4 test       003426 R
  4 test_p     0005BD R   |   2 tib        001668 GR  |   4 tick_tst   000FFC R
  5 ticks      00000F R   |   4 timeout    002C89 R   |   5 timer      000012 GR
  4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R   |   4 tk_id      001690 R
  4 to         002279 R   |   4 to_eepro   0007AB R   |   4 to_flash   0007B0 R
  4 to_hex_c   000C7E GR  |   4 to_upper   00188C GR  |   4 token_ch   0010D7 R
  4 token_ex   0010DB R   |   4 tone       002562 R   |   4 try_next   002E5C R
  5 txtbgn     00001B GR  |   5 txtend     00001D GR  |   4 uart1_ge   000954 GR
  4 uart1_in   0008FF R   |   4 uart1_pu   000944 GR  |   4 uart1_qg   00094D GR
  4 uart1_se   00090F R   |   4 ubound     001C4F R   |   4 uflash     002982 R
  4 unlock_e   0006DF R   |   4 unlock_f   0006FA R   |   4 until      002D6D R
  4 user_int   000057 R   |   4 usr        002997 R   |   4 var_name   0011DD GR
  5 vars       000030 GR  |   4 wait       002118 R   |   4 warm_ini   0014DA R
  4 warm_sta   00172C R   |   4 words      002C0C R   |   4 words_co   002C5C R
  4 write      0028A8 R   |   4 write_bl   000860 GR  |   4 write_bu   00079C R
  4 write_by   0007E6 R   |   4 write_ee   000822 R   |   4 write_ex   00085B R
  4 write_fl   00080C R   |   4 write_nb   000885 R   |   2 xstack_f   001738 GR
  2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

