ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                                    144 
                                    145 ;--------------------------------------
                                    146 ;   assembler flags 
                                    147 ;-------------------------------------
                                    148 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    149 
                                    150      .macro _usec_dly n 
                                    151     ldw x,#(16*n-2)/4
                                    152     decw x
                                    153     nop 
                                    154     jrne .-4
                                    155     .endm 
                                    156     
                                    157     ; load X register with 
                                    158     ; entry point of dictionary
                                    159     ; before calling 'search_dict'
                                    160     .macro _ldx_dict dict_name
                                    161     ldw x,#dict_name+2
                                    162     .endm 
                                    163 
                                    164     ; reset BASIC pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; to beginning of last token
                                    166     ; extracted except if it was end of line 
                                    167     .macro _unget_token 
                                    168      mov in,in.saved  
                                    169     .endm
                                    170 
                                    171 
                                    172     ; extract code address for 
                                    173     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    174     .macro _get_code_addr
                                    175         ldw x,(x)
                                    176         inc in 
                                    177         inc in 
                                    178     .endm 
                                    179 
                                    180 
                                    181 
                                    182 ;---------------------------------------
                                    183 ;    xtack manipulation macros 
                                    184 ;    Y is used as xstack pointer  
                                    185 ;----------------------------------------
                                    186     ; pop in A:X from XSTACK 
                                    187     .macro _xpop 
                                    188     ld a,(y)
                                    189     ldw x,y 
                                    190     ldw x,(1,x)
                                    191     addw y,#CELL_SIZE 
                                    192     .endm 
                                    193 
                                    194     ; push A:X  to XSTACK 
                                    195     .macro _xpush 
                                    196     subw y,#CELL_SIZE
                                    197     ld (y),a 
                                    198     ldw (1,y),x 
                                    199     .endm 
                                    200 
                                    201     ; drop from XSTACK 
                                    202     .macro _xdrop 
                                    203     addw y,#CELL_SIZE 
                                    204     .endm 
                                    205 
                                    206     ; @T fetch top xstack 
                                    207     .macro _at_top
                                    208     ld a,(y)
                                    209     ldw x,y 
                                    210     ldw x,(1,x)
                                    211     .endm 
                                    212 
                                    213     ; @N  fetch next on xstack 
                                    214     .macro _at_next 
                                    215     ld a,(3,y)
                                    216     ldw x,y 
                                    217     ldw x,(4,x)
                                    218     .endm 
                                    219 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ; !T put on top of xtack 
                                    221     .macro _store_top 
                                    222     ld (y),a 
                                    223     ldw (1,y),x     
                                    224     .endm 
                                    225 
                                    226     ; !N put next on xstack 
                                    227     .macro _store_next 
                                    228     ld (3,y),a 
                                    229     ldw (4,y),x 
                                    230     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001690                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         45 xstack_unf:: ; xstack underflow 
      00179C                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 63             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 32         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 16 BC         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 90         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1D 3E         [ 4]  270 	call func_eefree 
      000113 CD 1C 73         [ 4]  271 	call ubound 
      000116 CD 14 68         [ 4]  272 	call clear_basic
      000119 CD 25 A3         [ 4]  273 	call beep_1khz  
      00011C CD 14 15         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for application in flash memory 
      00011F CD 27 DE         [ 4]  277 	call qsign 
      000122 27 03            [ 1]  278 	jreq run_app
      000124 CC 16 BC         [ 2]  279 	jp warm_start 
      000127                        280 run_app:
                                    281 ; run application in FLASH|EEPROM 
      000127 90 CE 17 73      [ 2]  282 	ldw y,XSTACK_EMPTY
      00012B CD 14 46         [ 4]  283 	call warm_init
      00012E AE 36 04         [ 2]  284 	ldw x,#app 
      000131 CF 00 1B         [ 2]  285 	ldw txtbgn,x
      000134 72 BB 36 02      [ 2]  286 	addw x,app_size 
      000138 CF 00 1D         [ 2]  287 	ldw txtend,x 
      00013B AE 01 49         [ 2]  288 	ldw x,#AUTO_RUN 
      00013E CD 09 32         [ 4]  289 	call puts 
      000141 CD 1E 60         [ 4]  290 	call program_info 
      000144 CC 25 3E         [ 2]  291 	jp run_it_02  
      000147 20 FE            [ 2]  292     jra .  
                                    293 
      000149 20 61 75 74 6F 20 72   294 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    295 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00015C                         37 dup24:
      00015C                         38     _at_top 
      00015C 90 F6            [ 1]    1     ld a,(y)
      00015E 93               [ 1]    2     ldw x,y 
      00015F EE 01            [ 2]    3     ldw x,(1,x)
      000161                         39     _xpush 
      000161 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000165 90 F7            [ 1]    2     ld (y),a 
      000167 90 EF 01         [ 2]    3     ldw (1,y),x 
      00016A 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00016B                         48 add24: ; ( N T -- N+T )
      00016B                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00016B 90 F6            [ 1]    1     ld a,(y)
      00016D 93               [ 1]    2     ldw x,y 
      00016E EE 01            [ 2]    3     ldw x,(1,x)
      000170 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000174 89               [ 2]   50     pushw x  
      000175 88               [ 1]   51     push a  
      000176                         52     _at_top  
      000176 90 F6            [ 1]    1     ld a,(y)
      000178 93               [ 1]    2     ldw x,y 
      000179 EE 01            [ 2]    3     ldw x,(1,x)
      00017B 72 FB 02         [ 2]   53     addw x,(2,sp)
      00017E 19 01            [ 1]   54     adc a, (1,sp)
      000180                         55     _store_top 
      000180 90 F7            [ 1]    1     ld (y),a 
      000182 90 EF 01         [ 2]    2     ldw (1,y),x     
      000185                         56     _drop 3 
      000185 5B 03            [ 2]    1     addw sp,#3 
      000187 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      000188                         63 sub24: ; ( N T -- N-T ) 
      000188                         64     _xpop 
      000188 90 F6            [ 1]    1     ld a,(y)
      00018A 93               [ 1]    2     ldw x,y 
      00018B EE 01            [ 2]    3     ldw x,(1,x)
      00018D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000191 89               [ 2]   65     pushw x 
      000192 88               [ 1]   66     push  a
      000193                         67     _at_top  
      000193 90 F6            [ 1]    1     ld a,(y)
      000195 93               [ 1]    2     ldw x,y 
      000196 EE 01            [ 2]    3     ldw x,(1,x)
      000198 72 F0 02         [ 2]   68     subw x,(2,sp) 
      00019B 12 01            [ 1]   69     sbc a, (1,sp)
      00019D                         70     _store_top  
      00019D 90 F7            [ 1]    1     ld (y),a 
      00019F 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A2                         71     _drop 3 
      0001A2 5B 03            [ 2]    1     addw sp,#3 
      0001A4 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001A5                         77 cp24:
      0001A5                         78     _xpop 
      0001A5 90 F6            [ 1]    1     ld a,(y)
      0001A7 93               [ 1]    2     ldw x,y 
      0001A8 EE 01            [ 2]    3     ldw x,(1,x)
      0001AA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AE C7 00 0C         [ 1]   79     ld acc24,a 
      0001B1 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0001B4                         81     _at_top 
      0001B4 90 F6            [ 1]    1     ld a,(y)
      0001B6 93               [ 1]    2     ldw x,y 
      0001B7 EE 01            [ 2]    3     ldw x,(1,x)
      0001B9 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001BD C2 00 0C         [ 1]   83     sbc a,acc24
      0001C0 2F 08            [ 1]   84     jrslt 1$
      0001C2 26 0A            [ 1]   85     jrne 2$
      0001C4 5D               [ 2]   86     tnzw x 
      0001C5 26 07            [ 1]   87     jrne 2$
      0001C7 4F               [ 1]   88     clr a 
      0001C8 20 06            [ 2]   89     jra 9$ 
      0001CA                         90 1$: ; i1 < i2 
      0001CA A6 FF            [ 1]   91     ld a,#255
      0001CC 20 02            [ 2]   92     jra 9$ 
      0001CE                         93 2$: ; i1 > i2 
      0001CE A6 01            [ 1]   94     ld a,#1 
      0001D0 5F               [ 1]   95 9$: clrw x
      0001D1                         96      _store_top 
      0001D1 90 F7            [ 1]    1     ld (y),a 
      0001D3 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D6 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001D7                        103 cp24_ax:
      0001D7 88               [ 1]  104     push a 
      0001D8 C3 00 0D         [ 2]  105     cpw x,acc16 
      0001DB C2 00 0C         [ 1]  106     sbc a,acc24
      0001DE 84               [ 1]  107     pop a 
      0001DF 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001E0                        115 abs24: ; ( i -- u )
      0001E0 90 F6            [ 1]  116     ld a,(y)
      0001E2 A1 80            [ 1]  117     cp a,#0x80 
      0001E4 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001E6 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001E7                        124 cpl24:  ; i -- ~i 
      0001E7 90 73            [ 1]  125     cpl (y) 
      0001E9 90 63 01         [ 1]  126     cpl (1,y)
      0001EC 90 63 02         [ 1]  127     cpl (2,y)
      0001EF 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001F0                        133 neg24: ; (i -- -i )
      0001F0                        134     _at_top
      0001F0 90 F6            [ 1]    1     ld a,(y)
      0001F2 93               [ 1]    2     ldw x,y 
      0001F3 EE 01            [ 2]    3     ldw x,(1,x)
      0001F5 43               [ 1]  135     cpl  a  
      0001F6 53               [ 2]  136     cplw x 
      0001F7 1C 00 01         [ 2]  137     addw x,#1
      0001FA A9 00            [ 1]  138     adc a,#0
      0001FC                        139     _store_top  
      0001FC 90 F7            [ 1]    1     ld (y),a 
      0001FE 90 EF 01         [ 2]    2     ldw (1,y),x     
      000201 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000202                        145 neg_ax:
      000202 43               [ 1]  146     cpl  a  
      000203 53               [ 2]  147     cplw x 
      000204 1C 00 01         [ 2]  148     addw x,#1
      000207 A9 00            [ 1]  149     adc a,#0
      000209 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00020A                        155 neg_acc24: ; 
      00020A 72 53 00 0C      [ 1]  156     cpl acc24 
      00020E 72 53 00 0D      [ 1]  157     cpl acc16 
      000212 72 53 00 0E      [ 1]  158     cpl acc8
      000216 72 5C 00 0E      [ 1]  159     inc acc8 
      00021A 26 0A            [ 1]  160     jrne 9$
      00021C 72 5C 00 0D      [ 1]  161     inc acc16 
      000220 26 04            [ 1]  162     jrne 9$
      000222 72 5C 00 0C      [ 1]  163     inc acc24 
      000226 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      000227                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000227 88               [ 1]  181     push a 
      000228 72 5F 00 0B      [ 1]  182 	clr acc32
      00022C 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000230 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000233 97               [ 1]  186     ld xl,a 
      000234 7B 01            [ 1]  187     ld a,(U8,sp)
      000236 42               [ 4]  188     mul x,a 
      000237 CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00023A 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      00023D 97               [ 1]  192     ld xl,a 
      00023E 7B 01            [ 1]  193     ld a,(U8,sp) 
      000240 42               [ 4]  194     mul x,a 
      000241 72 BB 00 0C      [ 2]  195     addw x,acc24
      000245 72 59 00 0B      [ 1]  196     rlc acc32 
      000249 CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00024C 90 F6            [ 1]  199     ld a,(Y)
      00024E 97               [ 1]  200     ld xl,a 
      00024F 7B 01            [ 1]  201     ld a,(U8,sp)
      000251 42               [ 4]  202     mul x,a 
      000252 72 BB 00 0B      [ 2]  203     addw x,acc32
      000256 02               [ 1]  204     rlwa x 
      000257 4D               [ 1]  205     tnz a 
      000258 27 05            [ 1]  206     jreq 1$
      00025A A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00025C CC 16 32         [ 2]  208     jp tb_error 
      00025F                        209 1$:
      00025F 9E               [ 1]  210     ld a,xh  
      000260 CE 00 0D         [ 2]  211     ldw x,acc16   
      000263                        212     _drop VSIZE 
      000263 5B 01            [ 2]    1     addw sp,#VSIZE 
      000265 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000266                        224 mul24:
      000266                        225     _vars VSIZE
      000266 52 07            [ 2]    1     sub sp,#VSIZE 
      000268 5F               [ 1]  226     clrw x 
      000269 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00026B 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      00026D                        229     _xpop 
      00026D 90 F6            [ 1]    1     ld a,(y)
      00026F 93               [ 1]    2     ldw x,y 
      000270 EE 01            [ 2]    3     ldw x,(1,x)
      000272 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000276 4D               [ 1]  230     tnz a 
      000277 2A 05            [ 1]  231     jrpl 0$
      000279 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00027B CD 02 02         [ 4]  233     call neg_ax 
      00027E                        234 0$:    
      00027E 6B 05            [ 1]  235     ld (N1,sp),a 
      000280 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000282 90 7D            [ 1]  237     tnz (Y)
      000284 2A 05            [ 1]  238     jrpl 2$ 
      000286 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      000288 CD 01 F0         [ 4]  240     call neg24
      00028B                        241 2$: 
      00028B 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      00028D 27 0A            [ 1]  243     jreq 4$
      00028F CD 02 27         [ 4]  244     call mulu24_8
      000292 4D               [ 1]  245     tnz a 
      000293 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      000295 6B 01            [ 1]  247     ld (PROD,sp),a
      000297 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      000299                        249 4$:
      000299 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      00029B 27 0D            [ 1]  251     jreq 5$
      00029D CD 02 27         [ 4]  252     call mulu24_8
      0002A0 4D               [ 1]  253     tnz a 
      0002A1 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002A3 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002A6 29 29            [ 1]  256     jrv 8$ ; overflow
      0002A8 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002AA                        258 5$:
      0002AA 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002AC 27 10            [ 1]  260     jreq 6$
      0002AE CD 02 27         [ 4]  261     call mulu24_8
      0002B1 01               [ 1]  262     rrwa x 
      0002B2 5D               [ 2]  263     tnzw x 
      0002B3 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002B5 4D               [ 1]  265     tnz a 
      0002B6 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002B8 1B 01            [ 1]  267     add a,(PROD,sp)
      0002BA 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002BC 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002BE                        270 6$:
      0002BE 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002C0 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002C2 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002C4 27 03            [ 1]  274     jreq 9$
      0002C6 CD 02 02         [ 4]  275     call neg_ax 
      0002C9                        276 9$:
      0002C9                        277     _store_top 
      0002C9 90 F7            [ 1]    1     ld (y),a 
      0002CB 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002CE                        278     _drop VSIZE 
      0002CE 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002D0 81               [ 4]  279     ret 
      0002D1                        280 8$: ; overflow
      0002D1 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0002D3 CC 16 32         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002D6                        296 divu24_8:
      0002D6 89               [ 2]  297 	pushw x ; save x
      0002D7 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002D8 CE 00 0C         [ 2]  300 	ldw x,acc24
      0002DB 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002DD 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002DE 88               [ 1]  303 	push a  ;save remainder
      0002DF CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002E2 84               [ 1]  305 	pop a
      0002E3 95               [ 1]  306 	ld xh,a
      0002E4 C6 00 0E         [ 1]  307 	ld a,acc8
      0002E7 97               [ 1]  308 	ld xl,a
      0002E8 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002EA 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002EB 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002ED 9F               [ 1]  312 	ld a,xl
      0002EE C7 00 0E         [ 1]  313 	ld acc8,a
      0002F1 84               [ 1]  314 	pop a
      0002F2 85               [ 2]  315 	popw x
      0002F3 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      0002F4                        332 div24:
      0002F4                        333     _vars VSIZE 
      0002F4 52 06            [ 2]    1     sub sp,#VSIZE 
      0002F6 0F 06            [ 1]  334     clr (RSIGN,sp)
      0002F8 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002FA                        336     _xpop 
      0002FA 90 F6            [ 1]    1     ld a,(y)
      0002FC 93               [ 1]    2     ldw x,y 
      0002FD EE 01            [ 2]    3     ldw x,(1,x)
      0002FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000303 4D               [ 1]  337     tnz a 
      000304 2A 05            [ 1]  338     jrpl 0$ 
      000306 03 05            [ 1]  339     cpl (QSIGN,sp)
      000308 CD 02 02         [ 4]  340     call neg_ax
      00030B                        341 0$:
      00030B 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      00030D 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      00030F 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000311 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000313 26 05            [ 1]  346     jrne 1$ 
      000315 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      000317 CC 16 32         [ 2]  348     jp tb_error 
      00031A                        349 1$: ; dividend  
      00031A                        350     _at_top
      00031A 90 F6            [ 1]    1     ld a,(y)
      00031C 93               [ 1]    2     ldw x,y 
      00031D EE 01            [ 2]    3     ldw x,(1,x)
      00031F 4D               [ 1]  351     tnz a 
      000320 2A 07            [ 1]  352     jrpl 2$
      000322 CD 02 02         [ 4]  353     call neg_ax
      000325 03 05            [ 1]  354     cpl (QSIGN,sp)
      000327 03 06            [ 1]  355     cpl (RSIGN,sp)
      000329                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      000329                        359     _store_top 
      000329 90 F7            [ 1]    1     ld (y),a 
      00032B 90 EF 01         [ 2]    2     ldw (1,y),x     
      00032E A6 18            [ 1]  360     ld a,#24 
      000330 6B 04            [ 1]  361     ld (CNTR,sp),a
      000332 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000334 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000336 CD 01 D7         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      000339 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00033B C6 00 0C         [ 1]  368     ld a,acc24 
      00033E CE 00 0D         [ 2]  369     ldw x,acc16 
      000341 72 5F 00 0C      [ 1]  370     clr acc24 
      000345 72 5F 00 0D      [ 1]  371     clr acc16 
      000349 72 5F 00 0E      [ 1]  372     clr acc8 
      00034D 20 26            [ 2]  373     jra 6$
      00034F                        374 22$:     
      00034F 4F               [ 1]  375     clr a 
      000350 5F               [ 1]  376     clrw x 
      000351 98               [ 1]  377     rcf  
      000352                        378 3$: ; shift carry in acc24 bit 0 
      000352 90 69 02         [ 1]  379     rlc (2,y) 
      000355 90 69 01         [ 1]  380     rlc (1,y)
      000358 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00035A 59               [ 2]  382     rlcw x  
      00035B 49               [ 1]  383     rlc a
      00035C 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      00035F 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000361 24 05            [ 1]  386     jrnc 5$
      000363 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000366 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      000368                        389 5$: ; shift carry in QUOTIENT 
      000368 8C               [ 1]  390     ccf
      000369 0A 04            [ 1]  391     dec (CNTR,sp)
      00036B 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      00036D 90 69 02         [ 1]  394     rlc (2,y)
      000370 90 69 01         [ 1]  395     rlc (1,y) 
      000373 90 79            [ 1]  396     rlc (y) 
      000375                        397 6$:    
      000375 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      000377 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      000379 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00037B 27 03            [ 1]  401     jreq 8$
      00037D CD 01 F0         [ 4]  402     call neg24
      000380                        403 8$: 
      000380 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000382 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000384                        406 81$:
      000384 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000386 27 03            [ 1]  408     jreq 9$
      000388 CD 02 02         [ 4]  409     call neg_ax       
      00038B                        410 9$: _drop VSIZE 
      00038B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00038D 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      00038E                        423 mod24:
      00038E CD 02 F4         [ 4]  424     call div24 
      000391                        425     _store_top  ; replace quotient by remainder 
      000391 90 F7            [ 1]    1     ld (y),a 
      000393 90 EF 01         [ 2]    2     ldw (1,y),x     
      000396 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      000397                         48 prt_peek::
      000397 89               [ 2]   49 	pushw x 
      000398 35 10 00 0A      [ 1]   50 	mov base,#16 
      00039C CD 17 E2         [ 4]   51 	call prt_i16  
      00039F A6 3A            [ 1]   52 	ld a,#': 
      0003A1 CD 08 D5         [ 4]   53 	call putc 
      0003A4 A6 20            [ 1]   54 	ld a,#SPACE 
      0003A6 CD 08 D5         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0003A9 85               [ 2]   56 	popw x 
      0003AA F6               [ 1]   57 	ld a,(x)
      0003AB 5F               [ 1]   58 	clrw x 
      0003AC 97               [ 1]   59 	ld xl,a 
      0003AD 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003B1 CD 17 E2         [ 4]   61 	call prt_i16 
      0003B4 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003B5                         69 ledon:
      0003B5 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003B9 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003BA                         74 ledoff:
      0003BA 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003BE 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003BF                         79 ledtoggle:
      0003BF A6 20            [ 1]   80     ld a,#LED2_MASK
      0003C1 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003C4 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003C7 81               [ 4]   83     ret 
                                     84 
      0003C8                         85 left_paren:
      0003C8 A6 20            [ 1]   86 	ld a,#SPACE 
      0003CA CD 08 D5         [ 4]   87 	call putc
      0003CD A6 28            [ 1]   88 	ld a,#'( 
      0003CF CD 08 D5         [ 4]   89 	call putc 	
      0003D2 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003D3                        100 prt_reg8:
      0003D3 88               [ 1]  101 	push a 
      0003D4 CD 09 32         [ 4]  102 	call puts 
      0003D7 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003D9 5F               [ 1]  104 	clrw x 
      0003DA 97               [ 1]  105 	ld xl,a 
      0003DB 35 10 00 0A      [ 1]  106 	mov base,#16
      0003DF CD 17 E2         [ 4]  107 	call prt_i16  
      0003E2 CD 03 C8         [ 4]  108 	call left_paren 
      0003E5 84               [ 1]  109 	pop a 
      0003E6 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003E7 97               [ 1]  111 	ld xl,a 
      0003E8 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003EC CD 17 E2         [ 4]  113 	call prt_i16  
      0003EF A6 29            [ 1]  114 	ld a,#') 
      0003F1 CD 08 D5         [ 4]  115 	call putc
      0003F4 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      0003F5                        126 prt_reg16: 
      0003F5 90 89            [ 2]  127 	pushw y 
      0003F7 CD 09 32         [ 4]  128 	call puts 
      0003FA 1E 01            [ 2]  129 	ldw x,(1,sp) 
      0003FC 35 10 00 0A      [ 1]  130 	mov base,#16 
      000400 CD 17 E2         [ 4]  131 	call prt_i16  
      000403 CD 03 C8         [ 4]  132 	call left_paren 
      000406 85               [ 2]  133 	popw x 
      000407 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00040B CD 17 E2         [ 4]  135 	call prt_i16  
      00040E A6 29            [ 1]  136 	ld a,#') 
      000410 CD 08 D5         [ 4]  137 	call putc
      000413 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000414                        152 print_registers:
      000414 8A               [ 1]  153 	push cc 
      000415                        154 	_vars VSIZE 
      000415 52 08            [ 2]    1     sub sp,#VSIZE 
      000417 6B 01            [ 1]  155 	ld (R_A,sp),a 
      000419 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00041B 17 04            [ 2]  157 	ldw (R_Y,sp),y
      00041D C6 00 0C         [ 1]  158 	ld a,acc24 
      000420 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000423 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000425 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      000427 AE 04 7E         [ 2]  162 	ldw x,#STATES
      00042A CD 09 32         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00042D AE 04 BA         [ 2]  165 	ldw x, #REG_PC
      000430 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000432 72 A2 00 03      [ 2]  167 	subw y,#3
      000436 CD 03 F5         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      000439 AE 04 C2         [ 2]  170 	ldw x,#REG_X
      00043C 16 02            [ 2]  171 	ldw y,(R_X,sp)
      00043E CD 03 F5         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000441 AE 04 BE         [ 2]  174 	ldw x,#REG_Y
      000444 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000446 CD 03 F5         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      000449 AE 04 C6         [ 2]  178 	ldw x,#REG_A
      00044C 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      00044E CD 03 D3         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000451 AE 04 CA         [ 2]  182 	ldw x,#REG_CC 
      000454 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000456 CD 03 D3         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      000459 AE 04 CF         [ 2]  186 	ldw x,#REG_SP
      00045C 90 96            [ 1]  187 	ldw y,sp 
      00045E 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000462 CD 03 F5         [ 4]  189 	call prt_reg16  
      000465 A6 0A            [ 1]  190 	ld a,#'\n' 
      000467 CD 08 D5         [ 4]  191 	call putc
      00046A 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00046C 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      00046E C7 00 0C         [ 1]  194 	ld acc24,a 
      000471 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000474 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000476 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      000478 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00047A                        199 	_drop VSIZE
      00047A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00047C 86               [ 1]  200 	pop cc   	
      00047D 81               [ 4]  201 	ret
                                    202 
      00047E 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at TRAP point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 54
             52 41 50 20 70 6F 69
             6E 74 2E 0A 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
      0004BA 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004BE 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004C2 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004C6 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004CA 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004CF 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004D4                        217 parse_addr:
      0004D4 A6 20            [ 1]  218 	ld a,#SPACE 
      0004D6 CD 0E 99         [ 4]  219 	call skip  	 
      0004D9 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004DD AE 16 E0         [ 2]  221 	ldw x,#pad 
      0004E0 CD 13 6C         [ 4]  222 	call strcpy
      0004E3 AE 16 E0         [ 2]  223 	ldw x,#pad
      0004E6 CD 18 84         [ 4]  224 	call atoi24 	
      0004E9 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004EA                        244 cmd_itf:
      0004EA 8A               [ 1]  245 	push cc 
      0004EB                        246 	_vars VSIZE
      0004EB 52 0B            [ 2]    1     sub sp,#VSIZE 
      0004ED 6B 01            [ 1]  247 	ld (R_A,sp),a
      0004EF C6 00 03         [ 1]  248 	ld a,count 
      0004F2 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      0004F4 C6 00 01         [ 1]  250 	ld a,in 
      0004F7 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      0004F9 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      0004FB 17 04            [ 2]  253 	ldw (R_Y,sp),y
      0004FD C6 00 0C         [ 1]  254 	ld a,acc24 
      000500 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000503 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000505 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      000507 72 5F 00 18      [ 1]  258 	clr farptr 
      00050B 72 5F 00 19      [ 1]  259 	clr farptr+1 
      00050F 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000513                        261 repl:
      000513 A6 0D            [ 1]  262 	ld a,#CR 
      000515 CD 08 D5         [ 4]  263 	call putc 
      000518 A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00051A CD 08 D5         [ 4]  265 	call putc
      00051D 72 5F 00 00      [ 1]  266 	clr in.w 
      000521 72 5F 00 01      [ 1]  267 	clr in 
      000525 CD 0A 37         [ 4]  268 	call readln
      000528 90 AE 16 90      [ 2]  269 	ldw y,#tib  
      00052C 90 F6            [ 1]  270 	ld a,(y)
      00052E 27 E3            [ 1]  271 	jreq repl  
      000530 72 5C 00 01      [ 1]  272 	inc in 
      000534 CD 18 78         [ 4]  273 	call to_upper 
      000537 A1 51            [ 1]  274 	cp a,#'Q 
      000539 26 26            [ 1]  275 	jrne test_p
      00053B                        276 repl_exit:
                                    277 ; restore original context 
      00053B 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      00053D 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      00053F C7 00 0C         [ 1]  280 	ld acc24,a 
      000542 CF 00 0D         [ 2]  281 	ldw acc16,x
      000545 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      000547 C7 00 03         [ 1]  283 	ld count,a 
      00054A 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      00054C C7 00 01         [ 1]  285 	ld in,a 
      00054F 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000551 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000553 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000555                        289 	_drop VSIZE
      000555 5B 0B            [ 2]    1     addw sp,#VSIZE 
      000557 86               [ 1]  290 	pop cc 
      000558 81               [ 4]  291 	ret  
      000559                        292 invalid:
      000559 AE 05 C7         [ 2]  293 	ldw x,#invalid_cmd 
      00055C CD 09 32         [ 4]  294 	call puts 
      00055F 20 B2            [ 2]  295 	jra repl 
      000561                        296 test_p:	
      000561 A1 50            [ 1]  297     cp a,#'P 
      000563 27 10            [ 1]  298 	jreq mem_peek
      000565 A1 53            [ 1]  299     cp a,#'S 
      000567 26 F0            [ 1]  300 	jrne invalid 
      000569                        301 print_string:
      000569 CD 04 D4         [ 4]  302 	call parse_addr 	
      00056C CE 00 0D         [ 2]  303 	ldw x,acc16
      00056F CD 09 32         [ 4]  304 	call puts
      000572 CC 05 13         [ 2]  305 	jp repl 	
      000575                        306 mem_peek:
      000575 CD 04 D4         [ 4]  307 	call parse_addr 
      000578 C6 00 0C         [ 1]  308 	ld a, acc24 
      00057B CA 00 0D         [ 1]  309 	or a,acc16 
      00057E CA 00 0E         [ 1]  310 	or a,acc8 
      000581 26 02            [ 1]  311 	jrne 1$ 
      000583 20 0C            [ 2]  312 	jra peek_byte  
      000585 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      000588 CF 00 18         [ 2]  314 	ldw farptr,x 
      00058B C6 00 0E         [ 1]  315 	ld a,acc8 
      00058E C7 00 1A         [ 1]  316 	ld farptr+2,a 
      000591                        317 peek_byte:
      000591 CD 05 D6         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000594 A6 08            [ 1]  319 	ld a,#8 
      000596 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      000598 5F               [ 1]  321 	clrw x 
      000599 CD 05 F1         [ 4]  322 1$:	call fetchc  
      00059C 89               [ 2]  323 	pushw x 
      00059D C7 00 0E         [ 1]  324 	ld acc8,a 
      0005A0 5F               [ 1]  325 	clrw x 
      0005A1 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005A4 A6 90            [ 1]  327 	ld a,#16+128
      0005A6 CD 17 F9         [ 4]  328 	call prt_acc24
      0005A9 85               [ 2]  329 	popw x 
      0005AA 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005AC 26 EB            [ 1]  331 	jrne 1$ 
      0005AE A6 08            [ 1]  332 	ld a,#8 
      0005B0 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005B3 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005B6 4F               [ 1]  335 	clr a 
      0005B7 C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005BA C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005BD 4F               [ 1]  338 	clr a 
      0005BE C9 00 18         [ 1]  339 	adc a,farptr 
      0005C1 C7 00 18         [ 1]  340 	ld farptr,a 
      0005C4 CC 05 13         [ 2]  341 	jp repl  
                                    342 
      0005C7 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005D6                        348 print_farptr:
      0005D6 C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005D9 C7 00 0E         [ 1]  350 	ld acc8,a 
      0005DC CE 00 18         [ 2]  351 	ldw x,farptr 
      0005DF CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005E2 5F               [ 1]  353 	clrw x 
      0005E3 A6 10            [ 1]  354 	ld a,#16 
      0005E5 CD 17 F9         [ 4]  355 	call prt_acc24
      0005E8 A6 20            [ 1]  356 	ld a,#SPACE 
      0005EA CD 08 D5         [ 4]  357 	call putc 
      0005ED CD 08 D5         [ 4]  358 	call putc 
      0005F0 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      0005F1                        370 fetchc: ; @C
      0005F1 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005F5 5C               [ 1]  372 	incw x
      0005F6 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      0005F7                        384 number:
      0005F7 CD 0E AC         [ 4]  385 	call get_token
      0005FA A1 84            [ 1]  386 	cp a,#TK_INTGR
      0005FC 27 03            [ 1]  387 	jreq 1$
      0005FE CC 16 30         [ 2]  388 	jp syntax_error
      000601 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000602                        404 show_row:
      000602 4D               [ 1]  405 	tnz a 
      000603 26 01            [ 1]  406 	jrne 1$
      000605 81               [ 4]  407 	ret 
      000606                        408 1$:	
      000606 89               [ 2]  409 	pushw x  
      000607 88               [ 1]  410 	push a 
      000608 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      00060C CD 17 E2         [ 4]  412 	call prt_i16 
      00060F A6 20            [ 1]  413 	ld a,#SPACE  
      000611 CD 08 D5         [ 4]  414 	call putc
      000614                        415 row_loop:
      000614 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      000616 F6               [ 1]  417 	ld a,(x)
      000617 5F               [ 1]  418 	clrw x 
      000618 97               [ 1]  419 	ld xl,a 
      000619 CD 17 E2         [ 4]  420 	call prt_i16 
      00061C 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      00061E 5C               [ 1]  422 	incw x 
      00061F 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000621 0A 01            [ 1]  424 	dec (CNT,sp)
      000623 26 EF            [ 1]  425 	jrne row_loop
      000625                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000625 5B 03            [ 2]    1     addw sp,#VSIZE 
      000627 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00062B A6 0D            [ 1]  428 	ld a,#CR 
      00062D CD 08 D5         [ 4]  429 	call putc 
      000630 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000631                        443 hex_dump:
      000631 88               [ 1]  444 	push a 
      000632                        445 	_vars VSIZE
      000632 52 04            [ 2]    1     sub sp,#VSIZE 
      000634 C6 00 0A         [ 1]  446 	ld a,base
      000637 6B 03            [ 1]  447 	ld (BASE,sp),a 
      000639 35 10 00 0A      [ 1]  448 	mov base,#16
      00063D C6 00 23         [ 1]  449 	ld a,tab_width 
      000640 6B 04            [ 1]  450 	ld (TABW,sp),a
      000642 A6 0D            [ 1]  451 	ld a,#CR 
      000644 CD 08 D5         [ 4]  452 	call putc 
      000647 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      000649 A6 10            [ 1]  454 	ld a,#16
      00064B 90 A3 00 10      [ 2]  455 	cpw y,#16
      00064F 2A 02            [ 1]  456 	jrpl 2$
      000651 90 9F            [ 1]  457 	ld a,yl
      000653                        458 2$: 	
      000653 CD 06 02         [ 4]  459 	call show_row 
      000656 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      000658 72 A2 00 10      [ 2]  461 	subw y,#16 
      00065C 90 A3 00 01      [ 2]  462 	cpw y,#1
      000660 2A E5            [ 1]  463 	jrpl 1$
      000662 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000664 C7 00 0A         [ 1]  465 	ld base,a
      000667 7B 04            [ 1]  466 	ld a,(TABW,sp)
      000669 C7 00 23         [ 1]  467 	ld tab_width,a 
      00066C                        468 	_drop VSIZE
      00066C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00066E 84               [ 1]  469 	pop a 
      00066F 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000670                         45 unlock_eeprom:
      000670 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000675 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      000679 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      00067D 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000681 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000685 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00068A 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00068B                         62 unlock_flash:
      00068B 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      000690 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000694 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000698 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00069C 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006A0 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006A5 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006A6                         76 row_erase:
      0006A6 88               [ 1]   77 	push a 
      0006A7 90 89            [ 2]   78 	pushw y 
      0006A9 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006AD 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006B1 4F               [ 1]   81 	clr a 
      0006B2 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0006B4 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006B8 90 5C            [ 1]   84     incw y
      0006BA 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006BE 90 5C            [ 1]   86     incw y
      0006C0 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006C4 90 5C            [ 1]   88     incw y
      0006C6 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006CA 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006CF 90 85            [ 2]   91 	popw y 
      0006D1 84               [ 1]   92 	pop a 
      0006D2 81               [ 4]   93 	ret
      0006D3                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006D3                         97 move_erase_to_ram:
      0006D3 89               [ 2]   98 	pushw x 
      0006D4 90 89            [ 2]   99 	pushw y 
      0006D6 AE 06 D3         [ 2]  100 	ldw x,#row_erase_end 
      0006D9 1D 06 A6         [ 2]  101 	subw x,#row_erase
      0006DC CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006DF AE 16 90         [ 2]  103 	ldw x,#tib 
      0006E2 90 AE 06 A6      [ 2]  104 	ldw y,#row_erase 
      0006E6 CD 13 7C         [ 4]  105 	call move
      0006E9 90 85            [ 2]  106 	popw y
      0006EB 85               [ 2]  107 	popw x
      0006EC 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      0006ED                        123 program_row:
      0006ED 88               [ 1]  124 	push a 
      0006EE 90 89            [ 2]  125 	pushw y 
      0006F0 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      0006F2 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      0006F6 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      0006FA 90 5F            [ 1]  130 	clrw y 
      0006FC F6               [ 1]  131 1$:	ld a,(x)
      0006FD 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000701 5C               [ 1]  133 	incw x 
      000702 90 5C            [ 1]  134 	incw y 
      000704 0A 01            [ 1]  135 	dec (BCNT,sp)
      000706 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000708 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00070D                        139 	_drop 1 
      00070D 5B 01            [ 2]    1     addw sp,#1 
      00070F 90 85            [ 2]  140 	popw y 
      000711 84               [ 1]  141 	pop a 
      000712 81               [ 4]  142 	ret 
      000713                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000713                        149 move_prg_to_ram:
      000713 89               [ 2]  150 	pushw x 
      000714 90 89            [ 2]  151 	pushw y 
      000716 AE 07 13         [ 2]  152 	ldw x,#program_row_end 
      000719 1D 06 ED         [ 2]  153 	subw x,#program_row 
      00071C CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00071F AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000722 90 AE 06 ED      [ 2]  156 	ldw y,#program_row ; source address 
      000726 CD 13 7C         [ 4]  157 	call move
      000729 90 85            [ 2]  158 	popw y 
      00072B 85               [ 2]  159 	popw x  
      00072C 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00072D                        169 write_buffer:
      00072D 89               [ 2]  170 	pushw x 
      00072E 72 5D 00 18      [ 1]  171 	tnz farptr 
      000732 26 0D            [ 1]  172 	jrne to_flash 
      000734 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000737 A3 36 00         [ 2]  174 	cpw x,#app_space  
      00073A 24 05            [ 1]  175 	jruge to_flash 
      00073C                        176 to_eeprom:
      00073C CD 06 70         [ 4]  177 	call unlock_eeprom
      00073F 20 03            [ 2]  178 	jra do_programming
      000741                        179 to_flash:
      000741 CD 06 8B         [ 4]  180 	call unlock_flash
      000744                        181 do_programming:
      000744 85               [ 2]  182 	popw x 
      000745 CD 16 90         [ 4]  183 	call tib
      000748 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00074C 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000750 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000751                        197 block_erase:
      000751 89               [ 2]  198 	pushw x 
      000752 C6 00 18         [ 1]  199 	ld a,farptr 
      000755 26 14            [ 1]  200 	jrne erase_flash
      000757 CE 00 19         [ 2]  201 	ldw x,farptr+1
      00075A A3 36 00         [ 2]  202 	cpw x,#app_space 
      00075D 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      00075F CD 06 70         [ 4]  205 	call unlock_eeprom 
      000762 CD 16 90         [ 4]  206 	call tib 
      000765 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000769 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00076B                        210 erase_flash:
      00076B CD 06 8B         [ 4]  211 	call unlock_flash 
      00076E CD 16 90         [ 4]  212 	call tib 
      000771 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000775                        214 erase_exit: 
      000775 85               [ 2]  215 	popw x 
      000776 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      000777                        232 write_byte:
      000777 90 89            [ 2]  233 	pushw y
      000779                        234 	_vars VSIZE
      000779 52 02            [ 2]    1     sub sp,#VSIZE 
      00077B 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      00077D 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      00077F 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000783 72 5D 00 18      [ 1]  240 	tnz farptr 
      000787 26 14            [ 1]  241 	jrne write_flash
      000789 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      00078D 24 0E            [ 1]  243     jruge write_flash
      00078F 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000793 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000795 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      000799 22 51            [ 1]  247 	jrugt write_exit
      00079B 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      00079D                        250 write_flash:
      00079D CD 06 8B         [ 4]  251 	call unlock_flash 
      0007A0 9B               [ 1]  252 1$:	sim 
      0007A1 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007A3 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007A7 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007AC 9A               [ 1]  256     rim 
      0007AD 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007B1 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007B3                        260 write_eeprom:
      0007B3 CD 06 70         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007B6 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007BA 2B 08            [ 1]  264 	jrmi 1$
      0007BC 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007C0 2A 02            [ 1]  266 	jrpl 1$
      0007C2 03 02            [ 1]  267 	cpl (OPT,sp)
      0007C4                        268 1$: 
      0007C4 0D 02            [ 1]  269     tnz (OPT,sp)
      0007C6 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007C8 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007CC 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007D0                        274 2$: 
      0007D0 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007D2 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007D6 0D 02            [ 1]  277     tnz (OPT,sp)
      0007D8 27 08            [ 1]  278     jreq 3$
      0007DA 5C               [ 1]  279     incw x
      0007DB 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007DD 43               [ 1]  281     cpl a
      0007DE 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007E2 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007E7 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      0007EC                        285 write_exit:
      0007EC                        286 	_drop VSIZE 
      0007EC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0007EE 90 85            [ 2]  287 	popw y
      0007F0 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      0007F1                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      0007F1                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      0007F1                        309 write_block::
      0007F1 88               [ 1]  310 	push a 
      0007F2                        311 	_vars VSIZE
      0007F2 52 02            [ 2]    1     sub sp,#VSIZE 
      0007F4 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      0007F6 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      0007F8 27 13            [ 1]  314 	jreq 9$
      0007FA 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      0007FC 90 F6            [ 1]  316 	ld a,(y)
      0007FE CD 07 77         [ 4]  317 	call write_byte 
      000801 5C               [ 1]  318 	incw x 
      000802 90 5C            [ 1]  319 	incw y 
      000804 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000806 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000808 5A               [ 2]  322 	decw x
      000809 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      00080B 26 ED            [ 1]  324 	jrne 1$
      00080D                        325 9$:
      00080D 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00080F CD 08 47         [ 4]  327 	call incr_farptr
      000812                        328 	_drop VSIZE
      000812 5B 02            [ 2]    1     addw sp,#VSIZE 
      000814 84               [ 1]  329 	pop a 
      000815 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000816                        347 write_nbytes:
      000816 90 89            [ 2]  348 	pushw y
      000818 88               [ 1]  349 	push a 
      000819 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00081B 5F               [ 1]  351 	clrw x 
      00081C                        352 1$:  
      00081C 90 F6            [ 1]  353 	ld a,(y)
      00081E 90 5C            [ 1]  354 	incw y
      000820 CD 07 77         [ 4]  355 	call write_byte 
      000823 5C               [ 1]  356 	incw x 
      000824 0A 01            [ 1]  357 	dec (1,sp)  
      000826 26 F4            [ 1]  358 	jrne 1$ 
      000828 84               [ 1]  359 9$: pop a 
      000829 90 85            [ 2]  360 	popw y 
      00082B 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      00082C                        370 row_align:
      00082C A6 7F            [ 1]  371 	ld a,#0x7f 
      00082E C4 00 1A         [ 1]  372 	and a,farptr+2 
      000831 27 13            [ 1]  373 	jreq 1$ 
      000833 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      000836 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      000839 24 04            [ 1]  376 	jrnc 0$
      00083B 72 5C 00 18      [ 1]  377 	inc farptr 
      00083F 9F               [ 1]  378 0$: ld a,xl 
      000840 A4 80            [ 1]  379 	and a,#0x80
      000842 97               [ 1]  380 	ld xl,a
      000843 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      000846 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      000847                        390 incr_farptr:
      000847 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      00084B 24 04            [ 1]  392 	jrnc 1$
      00084D 72 5C 00 18      [ 1]  393 	inc farptr 
      000851 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      000854 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      000855                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      000855 5F               [ 1]  406 	clrw x 
      000856 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      00085A 26 06            [ 1]  408 	jrne 2$
      00085C 5C               [ 1]  409 	incw x 
      00085D A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      000860 25 F4            [ 1]  411 	jrult 1$ 
      000862 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      000863                         66 Uart1RxHandler: ; console receive char 
      000863 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000868 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      00086B A1 03            [ 1]   69 	cp a,#CTRL_C 
      00086D 26 06            [ 1]   70 	jrne 2$
      00086F CD 08 D5         [ 4]   71 	call putc 
      000872 CC 00 49         [ 2]   72 	jp user_interrupted
      000875                         73 2$:
      000875 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000877 26 03            [ 1]   75 	jrne 3$
      000879 CC 00 B5         [ 2]   76 	jp cold_start 	
      00087C 88               [ 1]   77 3$:	push a 
      00087D A6 26            [ 1]   78 	ld a,#rx1_queue 
      00087F CB 00 2F         [ 1]   79 	add a,rx1_tail 
      000882 5F               [ 1]   80 	clrw x 
      000883 97               [ 1]   81 	ld xl,a 
      000884 84               [ 1]   82 	pop a 
      000885 F7               [ 1]   83 	ld (x),a 
      000886 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      000889 4C               [ 1]   85 	inc a 
      00088A A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      00088C C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00088F 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      000890                         97 uart1_init:
      000890 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000894 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000898 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      00089C 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008A0                        103 uart1_set_baud: 
      0008A0 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008A1 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008A3 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008A6 27 0A            [ 1]  109 	jreq 2$ 
      0008A8                        110 1$: ; 8 Mhz 	
      0008A8 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008AC 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008B0 20 08            [ 2]  113 	jra 3$
      0008B2                        114 2$: ; 16 Mhz 	
      0008B2 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008B6 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008BA                        117 3$:
      0008BA 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008BE 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008C2 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008C6 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0008CB 72 5F 00 2E      [ 1]  122     clr rx1_head 
      0008CF 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      0008D3 84               [ 1]  124 	pop a  
      0008D4 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0008D5                        133 putc:: ; console output always on UART1
      0008D5                        134 uart1_putc:: 
      0008D5 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0008DA C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0008DD 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0008DE                        148 qgetc::
      0008DE                        149 uart1_qgetc::
      0008DE C6 00 2E         [ 1]  150 	ld a,rx1_head 
      0008E1 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      0008E4 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      0008E5                        161 getc:: ;console input
      0008E5                        162 uart1_getc::
      0008E5 CD 08 DE         [ 4]  163 	call uart1_qgetc
      0008E8 27 FB            [ 1]  164 	jreq uart1_getc 
      0008EA 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      0008EB A6 26            [ 1]  167 	ld a,#rx1_queue
      0008ED CB 00 2E         [ 1]  168 	add a,rx1_head 
      0008F0 5F               [ 1]  169 	clrw x  
      0008F1 97               [ 1]  170 	ld xl,a 
      0008F2 F6               [ 1]  171 	ld a,(x)
      0008F3 88               [ 1]  172 	push a
      0008F4 C6 00 2E         [ 1]  173 	ld a,rx1_head 
      0008F7 4C               [ 1]  174 	inc a 
      0008F8 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      0008FA C7 00 2E         [ 1]  176 	ld rx1_head,a 
      0008FD 84               [ 1]  177 	pop a  
      0008FE 85               [ 2]  178 	popw x
      0008FF 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000900 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      00090C                        207 get_escape:
      00090C CD 08 E5         [ 4]  208     call getc 
      00090F A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000911 27 02            [ 1]  210     jreq 1$
      000913 4F               [ 1]  211     clr a
      000914 81               [ 4]  212     ret
      000915 CD 08 E5         [ 4]  213 1$: call getc 
      000918 AE 09 00         [ 2]  214     ldw x,#convert_table
      00091B                        215 2$:
      00091B F1               [ 1]  216     cp a,(x)
      00091C 27 08            [ 1]  217     jreq 4$
      00091E 1C 00 02         [ 2]  218     addw x,#2
      000921 7D               [ 1]  219     tnz (x)
      000922 26 F7            [ 1]  220     jrne 2$
      000924 4F               [ 1]  221     clr a
      000925 81               [ 4]  222     ret 
      000926 5C               [ 1]  223 4$: incw x 
      000927 F6               [ 1]  224     ld a,(x)
      000928 A1 84            [ 1]  225     cp a,#SUP
      00092A 26 05            [ 1]  226     jrne 5$
      00092C 88               [ 1]  227     push a 
      00092D CD 08 E5         [ 4]  228     call getc
      000930 84               [ 1]  229     pop a 
      000931                        230 5$:
      000931 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      000932                        241 puts::
      000932 F6               [ 1]  242     ld a,(x)
      000933 27 06            [ 1]  243 	jreq 1$
      000935 CD 08 D5         [ 4]  244 	call putc 
      000938 5C               [ 1]  245 	incw x 
      000939 20 F7            [ 2]  246 	jra puts 
      00093B 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      00093C                        258 bksp:
      00093C A6 08            [ 1]  259 	ld a,#BS 
      00093E CD 08 D5         [ 4]  260 	call putc 
      000941 A6 20            [ 1]  261 	ld a,#SPACE 
      000943 CD 08 D5         [ 4]  262 	call putc 
      000946 A6 08            [ 1]  263 	ld a,#BS 
      000948 CD 08 D5         [ 4]  264 	call putc 
      00094B 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      00094C                        274 delete_nchar:
      00094C 88               [ 1]  275 	push a 
      00094D 0D 01            [ 1]  276 0$:	tnz (1,sp)
      00094F 27 07            [ 1]  277 	jreq 1$
      000951 CD 09 3C         [ 4]  278 	call bksp 
      000954 0A 01            [ 1]  279 	dec (1,sp)
      000956 20 F5            [ 2]  280 	jra 0$
      000958 84               [ 1]  281 1$:	pop a 
      000959 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      00095A                        290 send_escape:
      00095A A6 1B            [ 1]  291 	ld a,#ESC 
      00095C CD 08 D5         [ 4]  292 	call putc 
      00095F A6 5B            [ 1]  293 	ld a,#'[
      000961 CD 08 D5         [ 4]  294 	call putc 
      000964 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      000965                        311 send_parameter:
      000965 89               [ 2]  312 	pushw x 
      000966 5F               [ 1]  313 	clrw x 
      000967 97               [ 1]  314 	ld xl,a 
      000968 A6 0A            [ 1]  315 	ld a,#10 
      00096A 62               [ 2]  316 	div x,a 
      00096B 95               [ 1]  317 	ld xh,a 
      00096C 9F               [ 1]  318 	ld a,xl
      00096D 4D               [ 1]  319     tnz a 
      00096E 27 0B            [ 1]  320     jreq 2$
      000970 A1 09            [ 1]  321 	cp a,#9 
      000972 23 02            [ 2]  322 	jrule 1$
      000974 A6 09            [ 1]  323 	ld a,#9
      000976                        324 1$:
      000976 AB 30            [ 1]  325 	add a,#'0 
      000978 CD 08 D5         [ 4]  326 	call putc
      00097B 9E               [ 1]  327 2$:	ld a,xh 
      00097C AB 30            [ 1]  328 	add a,#'0
      00097E CD 08 D5         [ 4]  329 	call putc 
      000981 85               [ 2]  330 	popw x 
      000982 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      000983                        344 move_left:
      000983 88               [ 1]  345 	push a 
      000984 CD 09 5A         [ 4]  346 	call send_escape
      000987 84               [ 1]  347     pop a
      000988 CD 09 65         [ 4]  348 	call send_parameter 
      00098B A6 44            [ 1]  349 	ld a,#'D 
      00098D CD 08 D5         [ 4]  350 	call putc 
      000990 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      000991                        362 move_right:
      000991 88               [ 1]  363 	push a 
      000992 CD 09 5A         [ 4]  364 	call send_escape
      000995 84               [ 1]  365     pop a
      000996 CD 09 65         [ 4]  366 	call send_parameter 
      000999 A6 43            [ 1]  367 	ld a,#'C 
      00099B CD 08 D5         [ 4]  368 	call putc 
      00099E 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      00099F                        379 spaces::
      00099F A6 20            [ 1]  380 	ld a,#SPACE 
      0009A1 5D               [ 2]  381 1$:	tnzw x
      0009A2 27 06            [ 1]  382 	jreq 9$
      0009A4 CD 08 D5         [ 4]  383 	call putc 
      0009A7 5A               [ 2]  384 	decw x
      0009A8 20 F7            [ 2]  385 	jra 1$
      0009AA                        386 9$: 
      0009AA 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009AB                        405 insert_char: 
      0009AB                        406 	_vars VSIZE 
      0009AB 52 03            [ 2]    1     sub sp,#VSIZE 
      0009AD 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009AF 9E               [ 1]  408     ld a,xh 
      0009B0 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009B2 9F               [ 1]  410     ld a,xl 
      0009B3 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009B5 93               [ 1]  412     ldw x,y
      0009B6 5C               [ 1]  413     incw x 
      0009B7 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009B9 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0009BB 4C               [ 1]  416     inc a 
      0009BC C7 00 0E         [ 1]  417     ld acc8,a 
      0009BF 72 5F 00 0D      [ 1]  418     clr acc16
      0009C3 CD 13 7C         [ 4]  419     call move
      0009C6 90 AE 16 90      [ 2]  420     ldw y,#tib 
      0009CA 7B 01            [ 1]  421     ld a,(IPOS,sp)
      0009CC C7 00 0E         [ 1]  422     ld acc8,a 
      0009CF 72 B9 00 0D      [ 2]  423     addw y,acc16 
      0009D3 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      0009D5 90 F7            [ 1]  425     ld (y),a
      0009D7 90 5C            [ 1]  426     incw y  
      0009D9 7B 01            [ 1]  427     ld a,(IPOS,sp)
      0009DB CD 09 83         [ 4]  428     call move_left
      0009DE AE 16 90         [ 2]  429     ldw x,#tib 
      0009E1 CD 09 32         [ 4]  430     call puts 
      0009E4 7B 03            [ 1]  431     ld a,(LLEN,sp)
      0009E6 10 01            [ 1]  432     sub a,(IPOS,sp) 
      0009E8 CD 09 83         [ 4]  433     call move_left 
      0009EB                        434 	_drop VSIZE 
      0009EB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009ED 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      0009EE                        448 delete_under:
      0009EE                        449 	_vars VSIZE 
      0009EE 52 02            [ 2]    1     sub sp,#VSIZE 
      0009F0 6B 02            [ 1]  450     ld (LLEN,sp),a 
      0009F2 9F               [ 1]  451     ld a,xl 
      0009F3 6B 01            [ 1]  452     ld (CPOS,sp),a 
      0009F5 93               [ 1]  453     ldw x,y ; move destination
      0009F6 90 5C            [ 1]  454     incw y  ; move source 
      0009F8 7B 02            [ 1]  455     ld a,(LLEN,sp)
      0009FA 10 01            [ 1]  456     sub a,(CPOS,sp)
      0009FC 4C               [ 1]  457     inc a ; move including zero at end.
      0009FD C7 00 0E         [ 1]  458     ld acc8,a 
      000A00 72 5F 00 0D      [ 1]  459     clr acc16 
      000A04 CD 13 7C         [ 4]  460 	call move 
      000A07 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A0B 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A0D C7 00 0E         [ 1]  463     ld acc8,a 
      000A10 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A14 93               [ 1]  465     ldw x,y 
      000A15 CD 09 32         [ 4]  466     call puts 
      000A18 A6 20            [ 1]  467     ld a,#SPACE  
      000A1A CD 08 D5         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      000A1D 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A1F 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A21 CD 09 83         [ 4]  471     call move_left 
      000A24 0A 02            [ 1]  472     dec (LLEN,sp)
      000A26                        473 	_drop VSIZE 
      000A26 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A28 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A29                        486 delete_line:
      000A29 CD 09 5A         [ 4]  487     call send_escape
      000A2C A6 32            [ 1]  488 	ld a,#'2
      000A2E CD 08 D5         [ 4]  489 	call putc 
      000A31 A6 4B            [ 1]  490 	ld a,#'K 
      000A33 CD 08 D5         [ 4]  491 	call putc 
      000A36 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A37                        524 readln::
      000A37 90 89            [ 2]  525 	pushw y 
      000A39                        526 	_vars VSIZE 
      000A39 52 04            [ 2]    1     sub sp,#VSIZE 
      000A3B 5F               [ 1]  527 	clrw x 
      000A3C 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A3E 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A40 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A42 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A46                        532 readln_loop:
      000A46 CD 08 E5         [ 4]  533 	call getc
      000A49 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A4B A1 1B            [ 1]  535     cp a,#ESC 
      000A4D 26 05            [ 1]  536     jrne 0$
      000A4F CD 09 0C         [ 4]  537     call get_escape 
      000A52 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A54 A1 0D            [ 1]  539 0$:	cp a,#CR
      000A56 26 03            [ 1]  540 	jrne 1$
      000A58 CC 0B D3         [ 2]  541 	jp readln_quit
      000A5B A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A5D 26 03            [ 1]  543 	jrne 2$ 
      000A5F CC 0B D3         [ 2]  544 	jp readln_quit
      000A62                        545 2$:
      000A62 A1 08            [ 1]  546 	cp a,#BS
      000A64 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A66 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A68 27 DC            [ 1]  550     jreq readln_loop 
      000A6A A6 01            [ 1]  551     ld a,#1 
      000A6C CD 09 83         [ 4]  552     call move_left
      000A6F 0A 03            [ 1]  553     dec (CPOS,sp)
      000A71 90 5A            [ 2]  554     decw y 
      000A73 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000A75 CC 0B 7F         [ 2]  556     jp 12$
      000A78                        557 3$:
      000A78 A1 04            [ 1]  558 	cp a,#CTRL_D
      000A7A 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000A7C CD 0A 29         [ 4]  561 	call delete_line 
      000A7F 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000A81 4C               [ 1]  563     inc a 
      000A82 CD 09 83         [ 4]  564     call move_left 
      000A85 A6 3E            [ 1]  565 	ld a,#'> 
      000A87 CD 08 D5         [ 4]  566 	call putc 
      000A8A 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000A8E 90 7F            [ 1]  568 	clr (y)
      000A90 0F 02            [ 1]  569 	clr (LL,sp)
      000A92 0F 03            [ 1]  570 	clr (CPOS,sp)
      000A94 20 B0            [ 2]  571 	jra readln_loop
      000A96                        572 4$:
      000A96 A1 12            [ 1]  573 	cp a,#CTRL_R 
      000A98 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000A9A 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000A9C 26 A8            [ 1]  577 	jrne readln_loop
      000A9E 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AA2 93               [ 1]  579 	ldw x,y
      000AA3 CD 13 50         [ 4]  580 	call strlen
      000AA6 4D               [ 1]  581 	tnz a  
      000AA7 27 9D            [ 1]  582 	jreq readln_loop
      000AA9 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AAB 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AAD 93               [ 1]  585 	ldw x,y  
      000AAE CD 09 32         [ 4]  586 	call puts
      000AB1 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000AB3 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000AB6 20 8E            [ 2]  589 	jra readln_loop 
      000AB8                        590 5$:
      000AB8 A1 05            [ 1]  591 	cp a,#CTRL_E 
      000ABA 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000ABC AE 16 90         [ 2]  594 	ldw x,#tib 
      000ABF CD 18 84         [ 4]  595 	call atoi24
      000AC2 CE 00 0D         [ 2]  596 	ldw x,acc16
      000AC5 CD 0C 0F         [ 4]  597 	call search_lineno
      000AC8 5D               [ 2]  598 	tnzw x 
      000AC9 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000ACB CC 0B D3         [ 2]  603 	jp readln_quit  
      000ACE                        604 51$:
      000ACE CF 00 04         [ 2]  605 	ldw basicptr,x
      000AD1 E6 02            [ 1]  606 	ld a,(2,x)
      000AD3 C7 00 03         [ 1]  607 	ld count,a 
      000AD6 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000ADA CD 11 6C         [ 4]  609 	call decompile 
      000ADD 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000ADF A6 0D            [ 1]  611 	ld a,#CR 
      000AE1 CD 08 D5         [ 4]  612 	call putc 
      000AE4 A6 3E            [ 1]  613 	ld a,#'>
      000AE6 CD 08 D5         [ 4]  614 	call putc
      000AE9 AE 16 90         [ 2]  615     ldw x,#tib  
      000AEC CD 13 50         [ 4]  616 	call strlen 
      000AEF 6B 02            [ 1]  617 	ld (LL,sp),a 
      000AF1 CD 09 32         [ 4]  618 	call puts 
      000AF4 90 93            [ 1]  619 	ldw y,x
      000AF6 7B 02            [ 1]  620     ld a,(LL,sp)
      000AF8 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000AFA CC 0A 46         [ 2]  622 	jp readln_loop
      000AFD                        623 6$:
      000AFD A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000AFF 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B01 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B03 11 02            [ 1]  628     cp a,(LL,sp)
      000B05 2B 03            [ 1]  629     jrmi 61$
      000B07 CC 0A 46         [ 2]  630     jp readln_loop 
      000B0A                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000B0A A6 01            [ 1]  632     ld a,#1 
      000B0C CD 09 91         [ 4]  633 	call move_right 
      000B0F 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B11 90 5C            [ 1]  635     incw y 
      000B13 CC 0A 46         [ 2]  636     jp readln_loop 
      000B16 A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B18 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B1A 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B1C 26 03            [ 1]  641 	jrne 71$
      000B1E CC 0A 46         [ 2]  642 	jp readln_loop
      000B21                        643 71$:
      000B21 A6 01            [ 1]  644     ld a,#1 
      000B23 CD 09 83         [ 4]  645 	call move_left 
      000B26 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B28 90 5A            [ 2]  647     decw y 
      000B2A CC 0A 46         [ 2]  648 	jp readln_loop 
      000B2D A1 82            [ 1]  649 8$: cp a,#HOME  
      000B2F 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B31 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B33 CD 09 83         [ 4]  653     call move_left 
      000B36 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B38 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B3C CC 0A 46         [ 2]  656 	jp readln_loop  
      000B3F A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B41 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B43 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B45 11 02            [ 1]  661 	cp a,(LL,sp)
      000B47 26 03            [ 1]  662 	jrne 91$
      000B49 CC 0A 46         [ 2]  663 	jp readln_loop 
      000B4C                        664 91$:
      000B4C 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B4E 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B50 CD 09 91         [ 4]  667 	call move_right 
      000B53 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B55 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B57 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B5B 72 5F 00 0D      [ 1]  671     clr acc16 
      000B5F C7 00 0E         [ 1]  672     ld acc8,a 
      000B62 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B66 CC 0A 46         [ 2]  674 	jp readln_loop 
      000B69 A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000B6B 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000B6D 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000B6F CD 25 A3         [ 4]  679 	call beep_1khz
      000B72 CC 0A 46         [ 2]  680 	jp readln_loop 
      000B75 A1 84            [ 1]  681 11$: cp a,#SUP 
      000B77 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000B79 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  685     cp a,(LL,sp)
      000B7D 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B7F                        687 12$:
      000B7F 97               [ 1]  688     ld xl,a    ; cursor position 
      000B80 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000B82 CD 09 EE         [ 4]  690     call delete_under
      000B85 0A 02            [ 1]  691     dec (LLEN,sp)
      000B87                        692 13$:
      000B87 CC 0A 46         [ 2]  693     jp readln_loop 
      000B8A                        694 final_test:
      000B8A A1 20            [ 1]  695 	cp a,#SPACE
      000B8C 2A 03            [ 1]  696 	jrpl accept_char
      000B8E CC 0A 46         [ 2]  697 	jp readln_loop
      000B91                        698 accept_char:
      000B91 A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000B93 11 02            [ 1]  700 	cp a, (LL,sp)
      000B95 2A 03            [ 1]  701 	jrpl 1$
      000B97 CC 0A 46         [ 2]  702 	jp readln_loop
      000B9A 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000B9C 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000B9E 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BA0 11 02            [ 1]  707     cp a,(LL,sp)
      000BA2 27 12            [ 1]  708     jreq overwrite
      000BA4 7B 02            [ 1]  709     ld a,(LL,sp)
      000BA6 97               [ 1]  710     ld xl,a 
      000BA7 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BA9 95               [ 1]  712     ld xh,a
      000BAA 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BAC CD 09 AB         [ 4]  714     call insert_char
      000BAF 0C 02            [ 1]  715     inc (LLEN,sp)
      000BB1 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BB3 CC 0A 46         [ 2]  717     jp readln_loop 
      000BB6                        718 overwrite:
      000BB6 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BB8 90 F7            [ 1]  720 	ld (y),a
      000BBA 90 5C            [ 1]  721     incw y
      000BBC CD 08 D5         [ 4]  722     call putc 
      000BBF 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BC1 11 02            [ 1]  724 	cp a,(LL,sp)
      000BC3 2B 09            [ 1]  725 	jrmi 1$
      000BC5 90 7F            [ 1]  726 	clr (y)
      000BC7 0C 02            [ 1]  727 	inc (LL,sp)
      000BC9 0C 03            [ 1]  728     inc (CPOS,sp)
      000BCB CC 0A 46         [ 2]  729 	jp readln_loop 
      000BCE                        730 1$:	
      000BCE 0C 03            [ 1]  731 	inc (CPOS,sp)
      000BD0 CC 0A 46         [ 2]  732 	jp readln_loop 
      000BD3                        733 readln_quit:
      000BD3 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000BD7 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000BD9 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000BDC 90 7F            [ 1]  737     clr (y)
      000BDE 7B 02            [ 1]  738 	ld a,(LL,sp)
      000BE0 C7 00 03         [ 1]  739 	ld count,a 
      000BE3 A6 0D            [ 1]  740 	ld a,#CR
      000BE5 CD 08 D5         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000BE8                        742 	_drop VSIZE 
      000BE8 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BEA 90 85            [ 2]  743 	popw y 
      000BEC 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000BED                        752 print_hex::
      000BED 88               [ 1]  753 	push a 
      000BEE 4E               [ 1]  754 	swap a 
      000BEF CD 0C 04         [ 4]  755 	call to_hex_char 
      000BF2 CD 08 D5         [ 4]  756 	call putc 
      000BF5 7B 01            [ 1]  757     ld a,(1,sp) 
      000BF7 CD 0C 04         [ 4]  758 	call to_hex_char
      000BFA CD 08 D5         [ 4]  759 	call putc
      000BFD A6 20            [ 1]  760 	ld a,#SPACE 
      000BFF CD 08 D5         [ 4]  761 	call putc 
      000C02 84               [ 1]  762 	pop a 
      000C03 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C04                        772 to_hex_char::
      000C04 A4 0F            [ 1]  773 	and a,#15 
      000C06 A1 09            [ 1]  774 	cp a,#9 
      000C08 23 02            [ 2]  775 	jrule 1$ 
      000C0A AB 07            [ 1]  776 	add a,#7
      000C0C AB 30            [ 1]  777 1$: add a,#'0 
      000C0E 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C0F                         51 search_lineno::
      000C0F                         52 	_vars VSIZE
      000C0F 52 02            [ 2]    1     sub sp,#VSIZE 
      000C11 0F 01            [ 1]   53 	clr (LL,sp)
      000C13 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C17 4D               [ 1]   55 	tnz a 
      000C18 27 04            [ 1]   56 	jreq search_ln_loop
      000C1A 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C1E                         58 search_ln_loop:
      000C1E 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C22 2A 10            [ 1]   60 	jrpl 8$
      000C24 90 F3            [ 1]   61 	cpw x,(y)
      000C26 27 0E            [ 1]   62 	jreq 9$
      000C28 2B 0A            [ 1]   63 	jrmi 8$ 
      000C2A 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C2D 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C2F 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C32 20 EA            [ 2]   67 	jra search_ln_loop 
      000C34                         68 8$: 
      000C34 5F               [ 1]   69 	clrw x 	
      000C35 51               [ 1]   70 	exgw x,y 
      000C36                         71 9$: _drop VSIZE
      000C36 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C38 51               [ 1]   72 	exgw x,y   
      000C39 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C3A                         83 del_line: 
      000C3A                         84 	_vars VSIZE 
      000C3A 52 04            [ 2]    1     sub sp,#VSIZE 
      000C3C E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C3E 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C40 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C42 90 93            [ 1]   88 	ldw y,x  
      000C44 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C47 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C49 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C4D 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C50 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C54 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C56 CD 13 7C         [ 4]   95 	call move
      000C59 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C5D 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C60 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C64                         99 	_drop VSIZE     
      000C64 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C66 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C67                        115 create_gap:
      000C67                        116 	_vars VSIZE
      000C67 52 06            [ 2]    1     sub sp,#VSIZE 
      000C69 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000C6B 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000C6D 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000C71 90 93            [ 1]  120 	ldw y,x ; SRC
      000C73 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000C77 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000C79 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000C7C 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000C7F CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000C82 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000C84 CD 13 7C         [ 4]  128 	call move
      000C87 CE 00 1D         [ 2]  129 	ldw x,txtend
      000C8A 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000C8D CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C90                        132 9$:	_drop VSIZE 
      000C90 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C92 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000C93                        150 insert_line:
      000C93                        151 	_vars VSIZE 
      000C93 52 08            [ 2]    1     sub sp,#VSIZE 
      000C95 CE 00 1D         [ 2]  152 	ldw x,txtend  
      000C98 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000C9B 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000C9D AE 00 02         [ 2]  156 	ldw x,#2 
      000CA0 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CA4 A1 03            [ 1]  158 	cp a,#3
      000CA6 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CA8 5F               [ 1]  160 	clrw x 
      000CA9 97               [ 1]  161 	ld xl,a
      000CAA 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CAC CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CAF 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CB1 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CB4 20 38            [ 2]  166 	jra 4$
      000CB6 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CBA 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CBC AE 00 02         [ 2]  170 	ldw x,#2 
      000CBF 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CC3 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CC4 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CC6 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CC8 4F               [ 1]  177 	clr a 
      000CC9 CD 0C 0F         [ 4]  178 	call search_lineno 
      000CCC 5D               [ 2]  179 	tnzw x 
      000CCD 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000CCF 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000CD1 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000CD3 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000CD5 CD 0C 3A         [ 4]  188 	call del_line
      000CD8                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000CD8 A6 03            [ 1]  192 	ld a,#3
      000CDA 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000CDC 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000CDE 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000CE0 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000CE3 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000CE5 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000CE7 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000CE9 CD 0C 67         [ 4]  204 	call create_gap
      000CEC 20 06            [ 2]  205 	jra 5$
      000CEE                        206 4$: 
      000CEE 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000CF1 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000CF4 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000CF6 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000CF9 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000CFD 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000CFF CD 13 7C         [ 4]  214 	call move 
      000D02                        215 insert_ln_exit:	
      000D02                        216 	_drop VSIZE
      000D02 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D04 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D05                        233 parse_quote: 
      000D05                        234 	_vars VSIZE 
      000D05 52 02            [ 2]    1     sub sp,#VSIZE 
      000D07 4F               [ 1]  235 	clr a
      000D08 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D0A                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000D0A 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D0D 27 24            [ 1]  239 	jreq 6$
      000D0F 72 5C 00 01      [ 1]  240 	inc in 
      000D13 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D15 A6 5C            [ 1]  242 	ld a,#'\
      000D17 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D19 26 0A            [ 1]  244 	jrne 3$
      000D1B 0F 01            [ 1]  245 	clr (PREV,sp)
      000D1D 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D1F AD 1C            [ 4]  247 	callr convert_escape
      000D21 F7               [ 1]  248 	ld (x),a 
      000D22 5C               [ 1]  249 	incw x 
      000D23 20 E5            [ 2]  250 	jra 2$
      000D25                        251 3$:
      000D25 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D27 A1 5C            [ 1]  253 	cp a,#'\'
      000D29 27 DD            [ 1]  254 	jreq 1$
      000D2B A1 22            [ 1]  255 	cp a,#'"
      000D2D 27 04            [ 1]  256 	jreq 6$ 
      000D2F F7               [ 1]  257 	ld (x),a 
      000D30 5C               [ 1]  258 	incw x 
      000D31 20 D7            [ 2]  259 	jra 2$
      000D33                        260 6$:
      000D33 7F               [ 1]  261 	clr (x)
      000D34 5C               [ 1]  262 	incw x 
      000D35 90 93            [ 1]  263 	ldw y,x 
      000D37 5F               [ 1]  264 	clrw x 
      000D38 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D3A                        266 	_drop VSIZE
      000D3A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D3C 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D3D                        278 convert_escape:
      000D3D 89               [ 2]  279 	pushw x 
      000D3E AE 0D 52         [ 2]  280 	ldw x,#escaped 
      000D41 F1               [ 1]  281 1$:	cp a,(x)
      000D42 27 06            [ 1]  282 	jreq 2$
      000D44 7D               [ 1]  283 	tnz (x)
      000D45 27 09            [ 1]  284 	jreq 3$
      000D47 5C               [ 1]  285 	incw x 
      000D48 20 F7            [ 2]  286 	jra 1$
      000D4A 1D 0D 52         [ 2]  287 2$: subw x,#escaped 
      000D4D 9F               [ 1]  288 	ld a,xl 
      000D4E AB 07            [ 1]  289 	add a,#7
      000D50 85               [ 2]  290 3$:	popw x 
      000D51 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    292 
      000D52 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D5A                        310 parse_integer: ; { -- n }
      000D5A 89               [ 2]  311 	pushw x 	
      000D5B 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D5D 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D5F A1 24            [ 1]  314 	cp a,#'$
      000D61 26 04            [ 1]  315 	jrne 2$ 
      000D63                        316     _drop #1
      000D63 5B 01            [ 2]    1     addw sp,##1 
      000D65 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D67 F7               [ 1]  318 2$:	ld (x),a 
      000D68 5C               [ 1]  319 	incw x 
      000D69 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000D6C 72 5C 00 01      [ 1]  321 	inc in 
      000D70 CD 18 78         [ 4]  322 	call to_upper 
      000D73 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000D75 CD 0D F7         [ 4]  324 	call is_digit 
      000D78 25 ED            [ 1]  325 	jrc 2$
      000D7A A6 10            [ 1]  326 	ld a,#16 
      000D7C 11 01            [ 1]  327 	cp a,(BASE,sp)
      000D7E 26 0A            [ 1]  328 	jrne 3$ 
      000D80 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000D82 A1 41            [ 1]  330 	cp a,#'A 
      000D84 2B 04            [ 1]  331 	jrmi 3$ 
      000D86 A1 47            [ 1]  332 	cp a,#'G 
      000D88 2B DD            [ 1]  333 	jrmi 2$ 
      000D8A 72 5A 00 01      [ 1]  334 3$: dec in 	
      000D8E 7F               [ 1]  335     clr (x)
      000D8F 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000D91 CD 18 84         [ 4]  337 	call atoi24
      000D94 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000D96 C6 00 0C         [ 1]  339 	ld a,acc24 
      000D99 90 F7            [ 1]  340 	ld (y),a 
      000D9B 90 5C            [ 1]  341 	incw y  
      000D9D CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DA0 90 FF            [ 2]  343 	ldw (y),x 
      000DA2 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000DA6 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DA8                        346 	_drop VSIZE  
      000DA8 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DAA 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DAB                        364 parse_binary: ; { -- n }
      000DAB 4B 00            [ 1]  365 	push #0
      000DAD 4B 00            [ 1]  366 	push #0
      000DAF 4B 00            [ 1]  367 	push #0
      000DB1                        368 2$:	
      000DB1 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DB4 72 5C 00 01      [ 1]  370 	inc in 
      000DB8 A1 30            [ 1]  371 	cp a,#'0 
      000DBA 27 06            [ 1]  372 	jreq 3$
      000DBC A1 31            [ 1]  373 	cp a,#'1 
      000DBE 27 02            [ 1]  374 	jreq 3$ 
      000DC0 20 0B            [ 2]  375 	jra bin_exit 
      000DC2 A0 30            [ 1]  376 3$: sub a,#'0 
      000DC4 46               [ 1]  377 	rrc a
      000DC5 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DC7 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DC9 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000DCB 20 E4            [ 2]  381 	jra 2$  
      000DCD                        382 bin_exit:
      000DCD 72 5A 00 01      [ 1]  383 	dec in 
      000DD1 90 93            [ 1]  384 	ldw y,x
      000DD3 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000DD5 90 F7            [ 1]  386 	ld (y),a 
      000DD7 90 5C            [ 1]  387 	incw y 
      000DD9 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000DDB 90 FF            [ 2]  389 	ldw (y),x 
      000DDD 72 A9 00 02      [ 2]  390 	addw y,#2  
      000DE1 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000DE3                        392 	_drop VSIZE 
      000DE3 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DE5 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000DE6                        402 is_alpha::
      000DE6 A1 41            [ 1]  403 	cp a,#'A 
      000DE8 8C               [ 1]  404 	ccf 
      000DE9 24 0B            [ 1]  405 	jrnc 9$ 
      000DEB A1 5B            [ 1]  406 	cp a,#'Z+1 
      000DED 25 07            [ 1]  407 	jrc 9$ 
      000DEF A1 61            [ 1]  408 	cp a,#'a 
      000DF1 8C               [ 1]  409 	ccf 
      000DF2 24 02            [ 1]  410 	jrnc 9$
      000DF4 A1 7B            [ 1]  411 	cp a,#'z+1
      000DF6 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000DF7                        421 is_digit::
      000DF7 A1 30            [ 1]  422 	cp a,#'0
      000DF9 25 03            [ 1]  423 	jrc 1$
      000DFB A1 3A            [ 1]  424     cp a,#'9+1
      000DFD 8C               [ 1]  425 	ccf 
      000DFE 8C               [ 1]  426 1$:	ccf 
      000DFF 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E00                        438 is_alnum::
      000E00 CD 0D F7         [ 4]  439 	call is_digit
      000E03 25 03            [ 1]  440 	jrc 1$ 
      000E05 CD 0D E6         [ 4]  441 	call is_alpha
      000E08 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000E09                        453 is_symbol_char: 
      000E09 A1 5F            [ 1]  454 	cp a,#'_ 
      000E0B 26 03            [ 1]  455 	jrne 1$
      000E0D 99               [ 1]  456 	scf 
      000E0E 20 03            [ 2]  457 	jra 9$ 
      000E10 CD 0E 00         [ 4]  458 1$:	call is_alnum 
      000E13 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E14                        473 parse_symbol:
      000E14 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E15                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E15 CD 18 78         [ 4]  477 	call to_upper  
      000E18 F7               [ 1]  478 	ld (x), a 
      000E19 5C               [ 1]  479 	incw x
      000E1A 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E1D 72 5C 00 01      [ 1]  481 	inc in 
      000E21 CD 0E 09         [ 4]  482 	call is_symbol_char 
      000E24 25 EF            [ 1]  483 	jrc symb_loop 
      000E26 7F               [ 1]  484 	clr (x)
      000E27 72 5A 00 01      [ 1]  485 	dec in  
      000E2B 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E2C                        502 parse_keyword: 
      000E2C 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E2D CD 0E 14         [ 4]  504 	call parse_symbol
      000E30 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E32 E6 02            [ 1]  506 	ld a,(2,x)
      000E34 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E36 E6 01            [ 1]  509 	ld a,(1,x) 
      000E38 A0 41            [ 1]  510 	sub a,#'A 
      000E3A AE 00 03         [ 2]  511 	ldw x,#3 
      000E3D 42               [ 4]  512 	mul x,a 
      000E3E 1C 00 34         [ 2]  513 	addw x,#vars 
      000E41 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E43 20 36            [ 2]  515 	jra 4$ 
      000E45                        516 2$: ; check for keyword, otherwise syntax error.
      000E45                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E45 AE 34 1F         [ 2]    1     ldw x,#kword_dict+2
      000E48 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E4A 90 5C            [ 1]  519 	incw y 
      000E4C CD 19 05         [ 4]  520 	call search_dict
      000E4F 4D               [ 1]  521 	tnz a
      000E50 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E52 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E54 A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E56 90 F7            [ 1]  527 	ld (y),a 
      000E58 90 5C            [ 1]  528 	incw y
      000E5A 93               [ 1]  529 	ldw x,y 
      000E5B CD 13 50         [ 4]  530 	call strlen
      000E5E A1 0F            [ 1]  531 	cp a,#NAME_MAX_LEN 
      000E60 23 02            [ 2]  532 	jrule 22$ 
      000E62 A6 0F            [ 1]  533 	ld a,#NAME_MAX_LEN 
      000E64                        534 22$:	
      000E64 88               [ 1]  535 	push a 
      000E65                        536 24$:
      000E65 90 F6            [ 1]  537     ld a,(y)
      000E67 27 09            [ 1]  538 	jreq 3$
      000E69 90 5C            [ 1]  539 	incw y
      000E6B 0A 01            [ 1]  540 	dec (1,sp) 
      000E6D 26 F6            [ 1]  541 	jrne 24$
      000E6F 4F               [ 1]  542 	clr a 
      000E70 90 F7            [ 1]  543 	ld (y),a 
      000E72 90 5C            [ 1]  544 3$: incw y 
      000E74                        545 	_drop 1 
      000E74 5B 01            [ 2]    1     addw sp,#1 
      000E76 A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000E78 5F               [ 1]  547 	clrw x 
      000E79 20 1B            [ 2]  548 	jra 5$ 
      000E7B                        549 4$:	
      000E7B 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000E7D A1 87            [ 1]  551 	cp a,#TK_NOT 
      000E7F 2B 06            [ 1]  552 	jrmi 41$
      000E81 90 F7            [ 1]  553 	ld (y),a 
      000E83 90 5C            [ 1]  554 	incw y 
      000E85 20 0F            [ 2]  555 	jra 5$ 
      000E87                        556 41$:	
      000E87 A3 1C 7E         [ 2]  557 	cpw x,#let  
      000E8A 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000E8C 90 F7            [ 1]  559 	ld (y),a 
      000E8E 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E90 90 FF            [ 2]  561 	ldw (y),x
      000E92 72 A9 00 02      [ 2]  562 	addw y,#2  
      000E96                        563 5$:	_drop VSIZE 
      000E96 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E98 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000E99                        575 skip:
      000E99 88               [ 1]  576 	push a
      000E9A 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000E9D 27 0A            [ 1]  578 	jreq 2$
      000E9F 11 01            [ 1]  579 	cp a,(C,sp)
      000EA1 26 06            [ 1]  580 	jrne 2$
      000EA3 72 5C 00 01      [ 1]  581 	inc in
      000EA7 20 F1            [ 2]  582 	jra 1$
      000EA9                        583 2$: _drop 1 
      000EA9 5B 01            [ 2]    1     addw sp,#1 
      000EAB 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EAC                        609 get_token:: 
      000EAC                        610 	_vars VSIZE
      000EAC 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EAE                        616 0$: 
      000EAE 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EB2 A6 20            [ 1]  618 	ld a,#SPACE
      000EB4 CD 0E 99         [ 4]  619 	call skip
      000EB7 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EBC 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EBF 26 05            [ 1]  622 	jrne 1$
      000EC1 90 93            [ 1]  623 	ldw y,x 
      000EC3 CC 10 5D         [ 2]  624 	jp token_exit ; end of line 
      000EC6 72 5C 00 01      [ 1]  625 1$:	inc in 
      000ECA CD 18 78         [ 4]  626 	call to_upper 
      000ECD 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000ECF                        629 str_tst:  	
      000ECF                        630 	_case '"' nbr_tst
      000ECF A6 22            [ 1]    1 	ld a,#'"' 
      000ED1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000ED3 26 0A            [ 1]    3 	jrne nbr_tst
      000ED5 A6 02            [ 1]  631 	ld a,#TK_QSTR
      000ED7 F7               [ 1]  632 	ld (x),a 
      000ED8 5C               [ 1]  633 	incw x 
      000ED9 CD 0D 05         [ 4]  634 	call parse_quote
      000EDC CC 10 5D         [ 2]  635 	jp token_exit
      000EDF                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000EDF A6 24            [ 1]  638 	ld a,#'$'
      000EE1 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000EE3 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000EE5 A6 26            [ 1]  642 	ld a,#'&
      000EE7 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000EE9 26 0A            [ 1]  644 	jrne 0$
      000EEB A6 84            [ 1]  645 	ld a,#TK_INTGR
      000EED F7               [ 1]  646 	ld (x),a 
      000EEE 5C               [ 1]  647 	incw x 
      000EEF CD 0D AB         [ 4]  648 	call parse_binary ; expect binary integer 
      000EF2 CC 10 5D         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000EF5 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000EF7 CD 0D F7         [ 4]  652 	call is_digit
      000EFA 24 0C            [ 1]  653 	jrnc 3$
      000EFC A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000EFE F7               [ 1]  655 	ld (x),a 
      000EFF 5C               [ 1]  656 	incw x 
      000F00 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F02 CD 0D 5A         [ 4]  658 	call parse_integer 
      000F05 CC 10 5D         [ 2]  659 	jp token_exit 
      000F08                        660 3$: 
      000F08                        661 	_case '(' bkslsh_tst 
      000F08 A6 28            [ 1]    1 	ld a,#'(' 
      000F0A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F0C 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000F0E A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F10 CC 10 59         [ 2]  663 	jp token_char   	
      000F13                        664 bkslsh_tst: ; character token 
      000F13                        665 	_case '\',rparnt_tst
      000F13 A6 5C            [ 1]    1 	ld a,#'\' 
      000F15 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F17 26 16            [ 1]    3 	jrne rparnt_tst
      000F19 A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F1B F7               [ 1]  667 	ld (x),a 
      000F1C 5C               [ 1]  668 	incw x 
      000F1D 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F20 F7               [ 1]  670 	ld (x),a 
      000F21 5C               [ 1]  671 	incw x
      000F22 90 93            [ 1]  672 	ldw y,x 	 
      000F24 72 5C 00 01      [ 1]  673 	inc in  
      000F28 5F               [ 1]  674 	clrw x 
      000F29 97               [ 1]  675 	ld xl,a 
      000F2A A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F2C CC 10 5D         [ 2]  677 	jp token_exit 
      000F2F                        678 rparnt_tst:		
      000F2F                        679 	_case ')' colon_tst 
      000F2F A6 29            [ 1]    1 	ld a,#')' 
      000F31 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F33 26 05            [ 1]    3 	jrne colon_tst
      000F35 A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F37 CC 10 59         [ 2]  681 	jp token_char
      000F3A                        682 colon_tst:
      000F3A                        683 	_case ':' comma_tst 
      000F3A A6 3A            [ 1]    1 	ld a,#':' 
      000F3C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F3E 26 05            [ 1]    3 	jrne comma_tst
      000F40 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F42 CC 10 59         [ 2]  685 	jp token_char  
      000F45                        686 comma_tst:
      000F45                        687 	_case COMMA sharp_tst 
      000F45 A6 2C            [ 1]    1 	ld a,#COMMA 
      000F47 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F49 26 05            [ 1]    3 	jrne sharp_tst
      000F4B A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F4D CC 10 59         [ 2]  689 	jp token_char
      000F50                        690 sharp_tst:
      000F50                        691 	_case SHARP dash_tst 
      000F50 A6 23            [ 1]    1 	ld a,#SHARP 
      000F52 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F54 26 05            [ 1]    3 	jrne dash_tst
      000F56 A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F58 CC 10 59         [ 2]  693 	jp token_char  	 	 
      000F5B                        694 dash_tst: 	
      000F5B                        695 	_case '-' at_tst 
      000F5B A6 2D            [ 1]    1 	ld a,#'-' 
      000F5D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F5F 26 05            [ 1]    3 	jrne at_tst
      000F61 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F63 CC 10 59         [ 2]  697 	jp token_char 
      000F66                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F66                        699 	_case '@' qmark_tst 
      000F66 A6 40            [ 1]    1 	ld a,#'@' 
      000F68 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F6A 26 05            [ 1]    3 	jrne qmark_tst
      000F6C A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000F6E CC 10 59         [ 2]  701 	jp token_char
      000F71                        702 qmark_tst:
      000F71                        703 	_case '?' tick_tst 
      000F71 A6 3F            [ 1]    1 	ld a,#'?' 
      000F73 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F75 26 12            [ 1]    3 	jrne tick_tst
      000F77 A6 80            [ 1]  704 	ld a,#TK_CMD  
      000F79 F7               [ 1]  705 	ld (x),a 
      000F7A 5C               [ 1]  706 	incw x 
      000F7B 90 93            [ 1]  707 	ldw y,x 
      000F7D AE 1F F6         [ 2]  708 	ldw x,#print
      000F80 90 FF            [ 2]  709 	ldw (y),x 
      000F82 72 A9 00 02      [ 2]  710 	addw y,#2
      000F86 CC 10 5D         [ 2]  711 	jp token_exit
      000F89                        712 tick_tst: ; comment 
      000F89                        713 	_case TICK plus_tst 
      000F89 A6 27            [ 1]    1 	ld a,#TICK 
      000F8B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8D 26 2B            [ 1]    3 	jrne plus_tst
      000F8F A6 80            [ 1]  714 	ld a,#TK_CMD
      000F91 F7               [ 1]  715 	ld (x),a 
      000F92 5C               [ 1]  716 	incw x
      000F93 90 AE 21 3E      [ 2]  717 	ldw y,#remark 
      000F97 FF               [ 2]  718 	ldw (x),y 
      000F98 1C 00 02         [ 2]  719 	addw x,#2  
      000F9B                        720 copy_comment:
      000F9B 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000F9F 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FA3 90 89            [ 2]  723 	pushw y 
      000FA5 CD 13 6C         [ 4]  724 	call strcpy
      000FA8 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FAB 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FAD 17 01            [ 2]  727 	ldw (1,sp),y 
      000FAF 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FB2                        729 	_drop 2 
      000FB2 5B 02            [ 2]    1     addw sp,#2 
      000FB4 4F               [ 1]  730 	clr a 
      000FB5 90 93            [ 1]  731 	ldw y,x 
      000FB7 CC 10 5D         [ 2]  732 	jp token_exit 
      000FBA                        733 plus_tst:
      000FBA                        734 	_case '+' star_tst 
      000FBA A6 2B            [ 1]    1 	ld a,#'+' 
      000FBC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBE 26 05            [ 1]    3 	jrne star_tst
      000FC0 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FC2 CC 10 59         [ 2]  736 	jp token_char 
      000FC5                        737 star_tst:
      000FC5                        738 	_case '*' slash_tst 
      000FC5 A6 2A            [ 1]    1 	ld a,#'*' 
      000FC7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000FC9 26 05            [ 1]    3 	jrne slash_tst
      000FCB A6 20            [ 1]  739 	ld a,#TK_MULT 
      000FCD CC 10 59         [ 2]  740 	jp token_char 
      000FD0                        741 slash_tst: 
      000FD0                        742 	_case '/' prcnt_tst 
      000FD0 A6 2F            [ 1]    1 	ld a,#'/' 
      000FD2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD4 26 05            [ 1]    3 	jrne prcnt_tst
      000FD6 A6 21            [ 1]  743 	ld a,#TK_DIV 
      000FD8 CC 10 59         [ 2]  744 	jp token_char 
      000FDB                        745 prcnt_tst:
      000FDB                        746 	_case '%' eql_tst 
      000FDB A6 25            [ 1]    1 	ld a,#'%' 
      000FDD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDF 26 05            [ 1]    3 	jrne eql_tst
      000FE1 A6 22            [ 1]  747 	ld a,#TK_MOD
      000FE3 CC 10 59         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      000FE6                        750 eql_tst:
      000FE6                        751 	_case '=' gt_tst 		
      000FE6 A6 3D            [ 1]    1 	ld a,#'=' 
      000FE8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FEA 26 05            [ 1]    3 	jrne gt_tst
      000FEC A6 32            [ 1]  752 	ld a,#TK_EQUAL
      000FEE CC 10 59         [ 2]  753 	jp token_char 
      000FF1                        754 gt_tst:
      000FF1                        755 	_case '>' lt_tst 
      000FF1 A6 3E            [ 1]    1 	ld a,#'>' 
      000FF3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF5 26 23            [ 1]    3 	jrne lt_tst
      000FF7 A6 31            [ 1]  756 	ld a,#TK_GT 
      000FF9 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      000FFB 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      000FFE 72 5C 00 01      [ 1]  759 	inc in 
      001002 A1 3D            [ 1]  760 	cp a,#'=
      001004 26 04            [ 1]  761 	jrne 1$
      001006 A6 33            [ 1]  762 	ld a,#TK_GE 
      001008 20 4F            [ 2]  763 	jra token_char  
      00100A A1 3C            [ 1]  764 1$: cp a,#'<
      00100C 26 04            [ 1]  765 	jrne 2$
      00100E A6 35            [ 1]  766 	ld a,#TK_NE 
      001010 20 47            [ 2]  767 	jra token_char 
      001012 72 5A 00 01      [ 1]  768 2$: dec in
      001016 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      001018 20 3F            [ 2]  770 	jra token_char 	 
      00101A                        771 lt_tst:
      00101A                        772 	_case '<' other
      00101A A6 3C            [ 1]    1 	ld a,#'<' 
      00101C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101E 26 23            [ 1]    3 	jrne other
      001020 A6 34            [ 1]  773 	ld a,#TK_LT 
      001022 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      001024 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      001027 72 5C 00 01      [ 1]  776 	inc in 
      00102B A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      00102D 26 04            [ 1]  778 	jrne 1$
      00102F A6 36            [ 1]  779 	ld a,#TK_LE 
      001031 20 26            [ 2]  780 	jra token_char 
      001033 A1 3E            [ 1]  781 1$: cp a,#'>
      001035 26 04            [ 1]  782 	jrne 2$
      001037 A6 35            [ 1]  783 	ld a,#TK_NE 
      001039 20 1E            [ 2]  784 	jra token_char 
      00103B 72 5A 00 01      [ 1]  785 2$: dec in 
      00103F 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001041 20 16            [ 2]  787 	jra token_char 	
      001043                        788 other: ; not a special character 	 
      001043 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      001045 CD 0D E6         [ 4]  790 	call is_alpha 
      001048 25 03            [ 1]  791 	jrc 30$ 
      00104A CC 16 30         [ 2]  792 	jp syntax_error 
      00104D                        793 30$: 
      00104D CD 0E 2C         [ 4]  794 	call parse_keyword
      001050 A3 21 3E         [ 2]  795 	cpw x,#remark 
      001053 26 08            [ 1]  796 	jrne token_exit 
      001055 93               [ 1]  797 	ldw x,y 
      001056 CC 0F 9B         [ 2]  798 	jp copy_comment 
      001059                        799 token_char:
      001059 F7               [ 1]  800 	ld (x),a 
      00105A 5C               [ 1]  801 	incw x
      00105B 90 93            [ 1]  802 	ldw y,x 
      00105D                        803 token_exit:
      00105D                        804 	_drop VSIZE 
      00105D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00105F 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001060                        825 compile::
      001060 90 89            [ 2]  826 	pushw y 
      001062                        827 	_vars VSIZE 
      001062 52 02            [ 2]    1     sub sp,#VSIZE 
      001064 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      001069 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      00106D A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00106F AE 00 00         [ 2]  831 	ldw x,#0
      001072 CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      001075 C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      001078 AE 16 E3         [ 2]  834 	ldw x,#pad+3
      00107B 72 5F 00 01      [ 1]  835 	clr in 
      00107F CD 0E AC         [ 4]  836 	call get_token
      001082 A1 84            [ 1]  837 	cp a,#TK_INTGR
      001084 26 11            [ 1]  838 	jrne 2$
      001086 A3 00 01         [ 2]  839 	cpw x,#1 
      001089 2A 05            [ 1]  840 	jrpl 1$
      00108B A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      00108D CC 16 32         [ 2]  842 	jp tb_error
      001090 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      001093 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      001097 90 A3 17 60      [ 2]  845 2$:	cpw y,#xstack_full 
      00109B 25 05            [ 1]  846 	jrult 3$
      00109D A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      00109F CC 16 32         [ 2]  848 	jp tb_error 
      0010A2                        849 3$:	
      0010A2 93               [ 1]  850 	ldw x,y 
      0010A3 CD 0E AC         [ 4]  851 	call get_token 
      0010A6 A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010A8 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010AA 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010AE 90 9F            [ 1]  856     ld a,yl
      0010B0 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010B3 CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010B6 E7 02            [ 1]  859 	ld (2,x),a 
      0010B8 FE               [ 2]  860 	ldw x,(x)
      0010B9 27 09            [ 1]  861 	jreq 10$
      0010BB CD 0C 93         [ 4]  862 	call insert_line
      0010BE 72 5F 00 03      [ 1]  863 	clr  count 
      0010C2 20 0F            [ 2]  864 	jra  11$ 
      0010C4                        865 10$: ; line# is zero 
      0010C4 CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010C7 CF 00 04         [ 2]  867 	ldw basicptr,x 
      0010CA E6 02            [ 1]  868 	ld a,(2,x)
      0010CC C7 00 03         [ 1]  869 	ld count,a 
      0010CF 35 03 00 01      [ 1]  870 	mov in,#3 
      0010D3                        871 11$:
      0010D3                        872 	_drop VSIZE 
      0010D3 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010D5 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      0010D9 90 85            [ 2]  874 	popw y 
      0010DB 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      0010DC                         48 cpy_cmd_name:
      0010DC 5D               [ 2]   49 	tnzw x 
      0010DD 27 14            [ 1]   50 	jreq 10$
      0010DF F6               [ 1]   51 	ld a,(x)
      0010E0 5C               [ 1]   52 	incw x
      0010E1 A4 0F            [ 1]   53 	and a,#15  
      0010E3 88               [ 1]   54 	push a 
      0010E4 0D 01            [ 1]   55     tnz (1,sp) 
      0010E6 27 0A            [ 1]   56 	jreq 9$
      0010E8 F6               [ 1]   57 1$:	ld a,(x)
      0010E9 90 F7            [ 1]   58 	ld (y),a  
      0010EB 5C               [ 1]   59 	incw x
      0010EC 90 5C            [ 1]   60 	incw y 
      0010EE 0A 01            [ 1]   61 	dec (1,sp)	 
      0010F0 26 F6            [ 1]   62 	jrne 1$
      0010F2 84               [ 1]   63 9$: pop a 
      0010F3                         64 10$: 
      0010F3 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      0010F4                         75 add_space:
      0010F4 90 5A            [ 2]   76 	decw y 
      0010F6 90 F6            [ 1]   77 	ld a,(y)
      0010F8 90 5C            [ 1]   78 	incw y
      0010FA A1 29            [ 1]   79 	cp a,#') 
      0010FC 27 05            [ 1]   80 	jreq 0$
      0010FE CD 0E 00         [ 4]   81 	call is_alnum 
      001101 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001103                         83 0$: 
      001103 A6 20            [ 1]   84 	ld a,#SPACE 
      001105 90 F7            [ 1]   85 	ld (y),a 
      001107 90 5C            [ 1]   86 	incw y 
      001109 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      00110A                         99 right_align::
      00110A 88               [ 1]  100 	push a 
      00110B 7B 01            [ 1]  101 0$: ld a,(1,sp)
      00110D C1 00 23         [ 1]  102 	cp a,tab_width 
      001110 2A 08            [ 1]  103 	jrpl 1$
      001112 A6 20            [ 1]  104 	ld a,#SPACE 
      001114 5A               [ 2]  105 	decw x
      001115 F7               [ 1]  106 	ld (x),a  
      001116 0C 01            [ 1]  107 	inc (1,sp)
      001118 20 F1            [ 2]  108 	jra 0$ 
      00111A 84               [ 1]  109 1$: pop a 	
      00111B 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      00111C                        123 cpy_quote:
      00111C A6 22            [ 1]  124 	ld a,#'"
      00111E 90 F7            [ 1]  125 	ld (y),a 
      001120 90 5C            [ 1]  126 	incw y 
      001122 89               [ 2]  127 	pushw x 
      001123 CD 17 B3         [ 4]  128 	call skip_string 
      001126 85               [ 2]  129 	popw x 
      001127 F6               [ 1]  130 1$:	ld a,(x)
      001128 27 30            [ 1]  131 	jreq 9$
      00112A 5C               [ 1]  132 	incw x 
      00112B A1 20            [ 1]  133 	cp a,#SPACE 
      00112D 25 0E            [ 1]  134 	jrult 3$
      00112F 90 F7            [ 1]  135 	ld (y),a
      001131 90 5C            [ 1]  136 	incw y 
      001133 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001135 26 F0            [ 1]  138 	jrne 1$ 
      001137                        139 2$:
      001137 90 F7            [ 1]  140 	ld (y),a
      001139 90 5C            [ 1]  141 	incw y  
      00113B 20 EA            [ 2]  142 	jra 1$
      00113D 88               [ 1]  143 3$: push a 
      00113E A6 5C            [ 1]  144 	ld a,#'\
      001140 90 F7            [ 1]  145 	ld (y),a 
      001142 90 5C            [ 1]  146 	incw y  
      001144 84               [ 1]  147 	pop a 
      001145 A0 07            [ 1]  148 	sub a,#7
      001147 C7 00 0E         [ 1]  149 	ld acc8,a 
      00114A 72 5F 00 0D      [ 1]  150 	clr acc16
      00114E 89               [ 2]  151 	pushw x
      00114F AE 0D 52         [ 2]  152 	ldw x,#escaped 
      001152 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      001156 F6               [ 1]  154 	ld a,(x)
      001157 85               [ 2]  155 	popw x
      001158 20 DD            [ 2]  156 	jra 2$
      00115A A6 22            [ 1]  157 9$: ld a,#'"
      00115C 90 F7            [ 1]  158 	ld (y),a 
      00115E 90 5C            [ 1]  159 	incw y  
      001160 5C               [ 1]  160 	incw x 
      001161 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      001162                        171 var_name::
      001162 1D 00 34         [ 2]  172 		subw x,#vars 
      001165 A6 03            [ 1]  173 		ld a,#3
      001167 62               [ 2]  174 		div x,a 
      001168 9F               [ 1]  175 		ld a,xl 
      001169 AB 41            [ 1]  176 		add a,#'A 
      00116B 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      00116C                        195 decompile::
      00116C                        196 	_vars VSIZE
      00116C 52 04            [ 2]    1     sub sp,#VSIZE 
      00116E C6 00 0A         [ 1]  197 	ld a,base
      001171 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      001173 C6 00 23         [ 1]  199 	ld a,tab_width 
      001176 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      001178 17 03            [ 2]  201 	ldw (STR,sp),y   
      00117A 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      00117E 35 0A 00 0A      [ 1]  203 	mov base,#10
      001182 35 05 00 23      [ 1]  204 	mov tab_width,#5
      001186 72 5F 00 0C      [ 1]  205 	clr acc24 
      00118A CF 00 0D         [ 2]  206 	ldw acc16,x
      00118D 4F               [ 1]  207 	clr a ; unsigned conversion 
      00118E CD 18 1F         [ 4]  208 	call itoa  
      001191 CD 11 0A         [ 4]  209 	call right_align 
      001194 88               [ 1]  210 	push a 
      001195 90 93            [ 1]  211 1$:	ldw y,x ; source
      001197 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      001199 CD 13 6C         [ 4]  213 	call strcpy 
      00119C 90 5F            [ 1]  214 	clrw y 
      00119E 84               [ 1]  215 	pop a 
      00119F 90 97            [ 1]  216 	ld yl,a 
      0011A1 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011A4 A6 20            [ 1]  218 	ld a,#SPACE 
      0011A6 90 F7            [ 1]  219 	ld (y),a 
      0011A8 90 5C            [ 1]  220 	incw y 
      0011AA 72 5F 00 23      [ 1]  221 	clr tab_width
      0011AE AE 00 03         [ 2]  222 	ldw x,#3
      0011B1 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011B4                        224 decomp_loop:
      0011B4 90 89            [ 2]  225 	pushw y
      0011B6 CD 17 9A         [ 4]  226 	call next_token 
      0011B9 90 85            [ 2]  227 	popw y 
      0011BB 4D               [ 1]  228 	tnz a  
      0011BC 26 03            [ 1]  229 	jrne 1$
      0011BE CC 12 E1         [ 2]  230 	jp 20$
      0011C1 2B 03            [ 1]  231 1$:	jrmi 2$
      0011C3 CC 12 52         [ 2]  232 	jp 6$
      0011C6                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011C6 A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011C8 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      0011CA CD 10 F4         [ 4]  237 	call add_space
      0011CD CD 17 C2         [ 4]  238 	call get_addr   
      0011D0 CD 11 62         [ 4]  239 	call var_name
      0011D3 90 F7            [ 1]  240 	ld (y),a 
      0011D5 90 5C            [ 1]  241 	incw y  
      0011D7 20 DB            [ 2]  242 	jra decomp_loop
      0011D9                        243 3$:
      0011D9 A1 84            [ 1]  244 	cp a,#TK_INTGR
      0011DB 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0011DD CD 17 CC         [ 4]  247 	call get_int24 
      0011E0 C7 00 0C         [ 1]  248 	ld acc24,a 
      0011E3 CF 00 0D         [ 2]  249 	ldw acc16,x 
      0011E6 CD 10 F4         [ 4]  250 	call add_space
      0011E9 90 89            [ 2]  251 	pushw y 
      0011EB A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      0011ED CD 18 1F         [ 4]  253 	call itoa  
      0011F0 16 01            [ 2]  254 	ldw y,(1,sp) 
      0011F2 88               [ 1]  255 	push a 
      0011F3 51               [ 1]  256 	exgw x,y 
      0011F4 CD 13 6C         [ 4]  257 	call strcpy 
      0011F7 90 5F            [ 1]  258 	clrw y
      0011F9 84               [ 1]  259 	pop a  
      0011FA 90 97            [ 1]  260 	ld yl,a 
      0011FC 72 F9 01         [ 2]  261 	addw y,(1,sp)
      0011FF                        262 	_drop 2 
      0011FF 5B 02            [ 2]    1     addw sp,#2 
      001201 20 B1            [ 2]  263 	jra decomp_loop
      001203                        264 4$: ; dictionary keyword
      001203 A1 87            [ 1]  265 	cp a,#TK_NOT 
      001205 24 39            [ 1]  266 	jruge 50$ 
      001207 FE               [ 2]  267 	ldw x,(x)
      001208 72 5C 00 01      [ 1]  268 	inc in 
      00120C 72 5C 00 01      [ 1]  269 	inc in 
      001210 A3 21 3E         [ 2]  270 	cpw x,#remark 
      001213 26 23            [ 1]  271 	jrne 5$
      001215 CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      001218 CD 10 F4         [ 4]  274 	call add_space
      00121B A6 27            [ 1]  275 	ld a,#''
      00121D 90 F7            [ 1]  276 	ld (y),a 
      00121F 90 5C            [ 1]  277 	incw y 
      001221                        278 46$:
      001221 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      001225 72 5C 00 01      [ 1]  280 	inc in  
      001229 90 F7            [ 1]  281 	ld (y),a 
      00122B 90 5C            [ 1]  282 	incw y 
      00122D C6 00 01         [ 1]  283 	ld a,in 
      001230 C1 00 03         [ 1]  284 	cp a,count 
      001233 2B EC            [ 1]  285 	jrmi 46$
      001235 CC 12 E1         [ 2]  286 	jp 20$  
      001238 A3 1C 7E         [ 2]  287 5$: cpw x,#let  
      00123B 26 05            [ 1]  288 	jrne 54$
      00123D CC 11 B4         [ 2]  289 	jp decomp_loop ; down display LET
      001240                        290 50$:
      001240 5F               [ 1]  291 	clrw x 
      001241 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001242                        297 54$: ; insert command name 
      001242 CD 10 F4         [ 4]  298 	call add_space  
      001245 90 89            [ 2]  299 	pushw y
      001247 CD 13 1C         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00124A 90 85            [ 2]  301 	popw y 
      00124C CD 10 DC         [ 4]  302 	call cpy_cmd_name
      00124F CC 11 B4         [ 2]  303 	jp decomp_loop 
      001252                        304 6$:
                                    305 ; label?
      001252 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      001254 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      001256 A6 20            [ 1]  309 	ld a,#32 
      001258 90 F7            [ 1]  310 	ld (y),a 
      00125A 90 5C            [ 1]  311 	incw y 
      00125C                        312 61$:
      00125C 89               [ 2]  313 	pushw x 
      00125D CD 17 B3         [ 4]  314 	call skip_string 
      001260 85               [ 2]  315 	popw x 
      001261                        316 62$:	
      001261 F6               [ 1]  317 	ld a,(x)
      001262 27 07            [ 1]  318 	jreq 63$ 
      001264 5C               [ 1]  319 	incw x  
      001265 90 F7            [ 1]  320 	ld (y),a 
      001267 90 5C            [ 1]  321 	incw y 
      001269 20 F6            [ 2]  322 	jra 62$ 
      00126B                        323 63$: 
      00126B A6 20            [ 1]  324 	ld a,#32 
      00126D 90 F7            [ 1]  325 	ld (y),a 
      00126F 90 5C            [ 1]  326 	incw y 
      001271 CC 11 B4         [ 2]  327 	jp decomp_loop
      001274                        328 64$:
      001274 A1 02            [ 1]  329 	cp a,#TK_QSTR 
      001276 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      001278 CD 10 F4         [ 4]  332 	call add_space
      00127B CD 11 1C         [ 4]  333 	call cpy_quote  
      00127E CC 11 B4         [ 2]  334 	jp decomp_loop
      001281                        335 7$:
      001281 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      001283 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      001285 CD 10 F4         [ 4]  339 	call add_space 
      001288 A6 5C            [ 1]  340 	ld a,#'\ 
      00128A 90 F7            [ 1]  341 	ld (y),a 
      00128C 90 5C            [ 1]  342 	incw y
      00128E F6               [ 1]  343 	ld a,(x)
      00128F 72 5C 00 01      [ 1]  344 	inc in  
      001293 20 06            [ 2]  345 	jra 81$
      001295 A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      001297 26 09            [ 1]  347 	jrne 9$
      001299 A6 3A            [ 1]  348 	ld a,#':
      00129B                        349 81$:
      00129B 90 F7            [ 1]  350 	ld (y),a 
      00129D 90 5C            [ 1]  351 	incw y 
      00129F                        352 82$:
      00129F CC 11 B4         [ 2]  353 	jp decomp_loop
      0012A2                        354 9$: 
      0012A2 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0012A4 22 0A            [ 1]  356 	jrugt 10$ 
      0012A6 A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012A8 5F               [ 1]  358 	clrw x 
      0012A9 97               [ 1]  359 	ld xl,a
      0012AA 1C 12 F7         [ 2]  360 	addw x,#single_char 
      0012AD F6               [ 1]  361 	ld a,(x)
      0012AE 20 EB            [ 2]  362 	jra 81$ 
      0012B0                        363 10$: 
      0012B0 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012B2 22 0A            [ 1]  365 	jrugt 11$
      0012B4 A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012B6 5F               [ 1]  367 	clrw x 
      0012B7 97               [ 1]  368 	ld xl,a 
      0012B8 1C 12 FC         [ 2]  369 	addw x,#add_char 
      0012BB F6               [ 1]  370 	ld a,(x)
      0012BC 20 DD            [ 2]  371 	jra 81$
      0012BE                        372 11$:
      0012BE A1 22            [ 1]  373     cp a,#TK_MOD 
      0012C0 22 0A            [ 1]  374 	jrugt 12$
      0012C2 A0 20            [ 1]  375 	sub a,#TK_MULT
      0012C4 5F               [ 1]  376 	clrw x 
      0012C5 97               [ 1]  377 	ld xl,a 
      0012C6 1C 12 FE         [ 2]  378 	addw x,#mul_char
      0012C9 F6               [ 1]  379 	ld a,(x)
      0012CA 20 CF            [ 2]  380 	jra 81$
      0012CC                        381 12$:
      0012CC A0 31            [ 1]  382 	sub a,#TK_GT  
      0012CE 48               [ 1]  383 	sll a 
      0012CF 5F               [ 1]  384 	clrw x 
      0012D0 97               [ 1]  385 	ld xl,a 
      0012D1 1C 13 01         [ 2]  386 	addw x,#relop_str 
      0012D4 FE               [ 2]  387 	ldw x,(x)
      0012D5 F6               [ 1]  388 	ld a,(x)
      0012D6 5C               [ 1]  389 	incw x 
      0012D7 90 F7            [ 1]  390 	ld (y),a
      0012D9 90 5C            [ 1]  391 	incw y 
      0012DB F6               [ 1]  392 	ld a,(x)
      0012DC 26 BD            [ 1]  393 	jrne 81$
      0012DE CC 11 B4         [ 2]  394 	jp decomp_loop 
      0012E1                        395 20$: 
      0012E1 90 7F            [ 1]  396 	clr (y)
      0012E3 1E 03            [ 2]  397 	ldw x,(STR,sp)
      0012E5 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      0012E7 C7 00 0A         [ 1]  399 	ld base,a 
      0012EA 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      0012EC C7 00 23         [ 1]  401 	ld tab_width,a
      0012EF 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      0012F2 90 9F            [ 1]  403 	ld a,yl 
      0012F4                        404 	_drop VSIZE 
      0012F4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0012F6 81               [ 4]  405 	ret 
                                    406 
      0012F7 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      0012FC 2B 2D                  408 add_char: .byte '+','-'
      0012FE 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001301 13 0D 13 0F 13 11 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             14 13 19 13 16
      00130D 3E 00                  411 gt: .asciz ">"
      00130F 3D 00                  412 equal: .asciz "="
      001311 3E 3D 00               413 ge: .asciz ">="
      001314 3C 00                  414 lt: .asciz "<"
      001316 3C 3D 00               415 le: .asciz "<="
      001319 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      00131C                        429 cmd_name:
      00131C                        430 	_vars VSIZE 
      00131C 52 04            [ 2]    1     sub sp,#VSIZE 
      00131E 72 5F 00 0D      [ 1]  431 	clr acc16 
      001322 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      001324 AE 34 1D         [ 2]  433 	ldw x,#kword_dict	
      001327 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      001329 E6 02            [ 1]  435 	ld a,(2,x)
      00132B A4 0F            [ 1]  436 	and a,#15 
      00132D C7 00 0E         [ 1]  437 	ld acc8,a 
      001330 1C 00 03         [ 2]  438 	addw x,#3
      001333 72 BB 00 0D      [ 2]  439 	addw x,acc16
      001337 FE               [ 2]  440 	ldw x,(x) ; code address   
      001338 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      00133A 27 0C            [ 1]  442 	jreq 2$
      00133C 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      00133E FE               [ 2]  444 	ldw x,(x) 
      00133F 1D 00 02         [ 2]  445 	subw x,#2  
      001342 26 E3            [ 1]  446 	jrne 1$
      001344 4F               [ 1]  447 	clr a 
      001345 5F               [ 1]  448 	clrw x 
      001346 20 05            [ 2]  449 	jra 9$
      001348 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      00134A 1C 00 02         [ 2]  451 	addw x,#2 	
      00134D                        452 9$:	_drop VSIZE
      00134D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00134F 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001350                        118 strlen::
      001350 89               [ 2]  119 	pushw x 
      001351 4F               [ 1]  120 	clr a
      001352 7D               [ 1]  121 1$:	tnz (x) 
      001353 27 04            [ 1]  122 	jreq 9$ 
      001355 4C               [ 1]  123 	inc a 
      001356 5C               [ 1]  124 	incw x 
      001357 20 F9            [ 2]  125 	jra 1$ 
      001359 85               [ 2]  126 9$:	popw x 
      00135A 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      00135B                        137 strcmp:
      00135B F6               [ 1]  138 	ld a,(x)
      00135C 27 0B            [ 1]  139 	jreq 5$ 
      00135E 90 F1            [ 1]  140 	cp a,(y) 
      001360 26 05            [ 1]  141 	jrne 4$ 
      001362 5C               [ 1]  142 	incw x 
      001363 90 5C            [ 1]  143 	incw y 
      001365 20 F4            [ 2]  144 	jra strcmp 
      001367                        145 4$: ; not same  
      001367 4F               [ 1]  146 	clr a 
      001368 81               [ 4]  147 	ret 
      001369                        148 5$: ; same 
      001369 A6 01            [ 1]  149 	ld a,#1 
      00136B 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00136C                        161 strcpy::
      00136C 88               [ 1]  162 	push a 
      00136D 89               [ 2]  163 	pushw x 
      00136E 90 F6            [ 1]  164 1$: ld a,(y)
      001370 27 06            [ 1]  165 	jreq 9$ 
      001372 F7               [ 1]  166 	ld (x),a 
      001373 5C               [ 1]  167 	incw x 
      001374 90 5C            [ 1]  168 	incw y 
      001376 20 F6            [ 2]  169 	jra 1$ 
      001378 7F               [ 1]  170 9$:	clr (x)
      001379 85               [ 2]  171 	popw x 
      00137A 84               [ 1]  172 	pop a 
      00137B 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      00137C                        187 move::
      00137C 88               [ 1]  188 	push a 
      00137D                        189 	_vars VSIZE 
      00137D 52 02            [ 2]    1     sub sp,#VSIZE 
      00137F 0F 01            [ 1]  190 	clr (INCR,sp)
      001381 0F 02            [ 1]  191 	clr (LB,sp)
      001383 90 89            [ 2]  192 	pushw y 
      001385 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      001387 90 85            [ 2]  194 	popw y 
      001389 27 31            [ 1]  195 	jreq move_exit ; x==y 
      00138B 2B 0E            [ 1]  196 	jrmi move_down
      00138D                        197 move_up: ; start from top address with incr=-1
      00138D 72 BB 00 0D      [ 2]  198 	addw x,acc16
      001391 72 B9 00 0D      [ 2]  199 	addw y,acc16
      001395 03 01            [ 1]  200 	cpl (INCR,sp)
      001397 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      001399 20 05            [ 2]  202 	jra move_loop  
      00139B                        203 move_down: ; start from bottom address with incr=1 
      00139B 5A               [ 2]  204     decw x 
      00139C 90 5A            [ 2]  205 	decw y
      00139E 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013A0                        207 move_loop:	
      0013A0 C6 00 0D         [ 1]  208     ld a, acc16 
      0013A3 CA 00 0E         [ 1]  209 	or a, acc8
      0013A6 27 14            [ 1]  210 	jreq move_exit 
      0013A8 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013AB 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013AE 90 F6            [ 1]  213 	ld a,(y)
      0013B0 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0013B1 89               [ 2]  215 	pushw x 
      0013B2 CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013B5 5A               [ 2]  217 	decw x 
      0013B6 CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013B9 85               [ 2]  219 	popw x 
      0013BA 20 E4            [ 2]  220 	jra move_loop
      0013BC                        221 move_exit:
      0013BC                        222 	_drop VSIZE
      0013BC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013BE 84               [ 1]  223 	pop a 
      0013BF 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013C0                        233 clear_vars:
      0013C0 89               [ 2]  234 	pushw x 
      0013C1 88               [ 1]  235 	push a  
      0013C2 AE 00 34         [ 2]  236 	ldw x,#vars 
      0013C5 A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013C7 7F               [ 1]  238 1$:	clr (x)
      0013C8 5C               [ 1]  239 	incw x 
      0013C9 4A               [ 1]  240 	dec a 
      0013CA 26 FB            [ 1]  241 	jrne 1$
      0013CC 84               [ 1]  242 	pop a 
      0013CD 85               [ 2]  243 	popw x 
      0013CE 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      0013CF 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      001415                        255 system_information:
      001415 AE 13 CF         [ 2]  256 	ldw x,#software 
      001418 CD 09 32         [ 4]  257 	call puts 
      00141B A6 02            [ 1]  258 	ld a,#MAJOR 
      00141D C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      001420 5F               [ 1]  260 	clrw x 
      001421 CF 00 0C         [ 2]  261 	ldw acc24,x
      001424 72 5F 00 23      [ 1]  262 	clr tab_width  
      001428 35 0A 00 0A      [ 1]  263 	mov base, #10 
      00142C CD 17 F9         [ 4]  264 	call prt_acc24 
      00142F A6 2E            [ 1]  265 	ld a,#'.
      001431 CD 08 D5         [ 4]  266 	call putc 
      001434 A6 00            [ 1]  267 	ld a,#MINOR 
      001436 C7 00 0E         [ 1]  268 	ld acc8,a 
      001439 5F               [ 1]  269 	clrw x 
      00143A CF 00 0C         [ 2]  270 	ldw acc24,x 
      00143D CD 17 F9         [ 4]  271 	call prt_acc24
      001440 A6 0D            [ 1]  272 	ld a,#CR 
      001442 CD 08 D5         [ 4]  273 	call putc
                                    274 ;call test 
      001445 81               [ 4]  275 	ret
                                    276 
      001446                        277 warm_init:
      001446 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      00144A 72 5F 00 22      [ 1]  279 	clr flags 
      00144E 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      001452 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      001456 35 0A 00 0A      [ 1]  282 	mov base,#10 
      00145A AE 00 00         [ 2]  283 	ldw x,#0 
      00145D CF 00 04         [ 2]  284 	ldw basicptr,x 
      001460 CF 00 00         [ 2]  285 	ldw in.w,x 
      001463 72 5F 00 03      [ 1]  286 	clr count
      001467 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      001468                        293 clear_basic:
      001468 89               [ 2]  294 	pushw x 
      001469 72 5F 00 03      [ 1]  295 	clr count
      00146D 72 5F 00 01      [ 1]  296 	clr in  
      001471 AE 00 90         [ 2]  297 	ldw x,#free_ram 
      001474 CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      001477 CF 00 1D         [ 2]  299 	ldw txtend,x 
      00147A CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      00147D CF 00 32         [ 2]  301 	ldw dvar_end,x 
      001480 CD 13 C0         [ 4]  302 	call clear_vars 
      001483 85               [ 2]  303 	popw x
      001484 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001485                        309 err_msg:
      001485 00 00 14 A9 14 B6 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             C4 14 DD 14 EC
      001491 15 02 15 18 15 32 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             43 15 54
      00149B 15 60 15 93 15 A3 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



             B7 15 CA
      0014A5 15 D7 15 E1            313 	.word err_overflow,err_read_only  
                                    314 
      0014A9 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014B6 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014C4 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0014DD 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      0014EC 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001502 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001518 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001532 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001543 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001554 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001560 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      001593 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015A3 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015B7 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015CA 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      0015D7 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0015E1 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
                                    332 
      0015FD 0A 72 75 6E 20 74 69   333 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      00160F 0A 63 6F 6D 70 69 6C   334 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001620 6C 61 73 74 20 74 6F   335 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    336 
      001630                        337 syntax_error::
      001630 A6 02            [ 1]  338 	ld a,#ERR_SYNTAX 
                                    339 
      001632                        340 tb_error::
      001632 72 0A 00 22 4C   [ 2]  341 	btjt flags,#FCOMP,1$
      001637 88               [ 1]  342 	push a 
      001638 AE 15 FD         [ 2]  343 	ldw x, #rt_msg 
      00163B CD 09 32         [ 4]  344 	call puts 
      00163E 84               [ 1]  345 	pop a 
      00163F AE 14 85         [ 2]  346 	ldw x, #err_msg 
      001642 72 5F 00 0D      [ 1]  347 	clr acc16 
      001646 48               [ 1]  348 	sll a
      001647 72 59 00 0D      [ 1]  349 	rlc acc16  
      00164B C7 00 0E         [ 1]  350 	ld acc8, a 
      00164E 72 BB 00 0D      [ 2]  351 	addw x,acc16 
      001652 FE               [ 2]  352 	ldw x,(x)
      001653 CD 09 32         [ 4]  353 	call puts
      001656 CE 00 04         [ 2]  354 	ldw x,basicptr 
                           000001   355 .if DEBUG 
      001659 C6 00 03         [ 1]  356 ld a,count 
      00165C 90 5F            [ 1]  357 clrw y 
      00165E 90 02            [ 1]  358 rlwa y  
      001660 CD 06 31         [ 4]  359 call hex_dump
      001663 CE 00 04         [ 2]  360 ldw x,basicptr
                                    361 .endif 
      001666 C6 00 01         [ 1]  362 	ld a,in 
      001669 CD 1F D2         [ 4]  363 	call prt_basic_line
      00166C AE 16 20         [ 2]  364 	ldw x,#tk_id 
      00166F CD 09 32         [ 4]  365 	call puts 
      001672 C6 00 02         [ 1]  366 	ld a,in.saved 
      001675 5F               [ 1]  367 	clrw x 
      001676 97               [ 1]  368 	ld xl,a 
      001677 72 BB 00 04      [ 2]  369 	addw x,basicptr 
      00167B F6               [ 1]  370 	ld a,(x)
      00167C 5F               [ 1]  371 	clrw x 
      00167D 97               [ 1]  372 	ld xl,a 
      00167E CD 17 E2         [ 4]  373 	call prt_i16
      001681 20 35            [ 2]  374 	jra 6$
      001683                        375 1$:	
      001683 88               [ 1]  376 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      001684 AE 16 0F         [ 2]  377 	ldw x,#comp_msg
      001687 CD 09 32         [ 4]  378 	call puts 
      00168A 84               [ 1]  379 	pop a 
      00168B AE 14 85         [ 2]  380 	ldw x, #err_msg 
      00168E 72 5F 00 0D      [ 1]  381 	clr acc16 
      001692 48               [ 1]  382 	sll a
      001693 72 59 00 0D      [ 1]  383 	rlc acc16  
      001697 C7 00 0E         [ 1]  384 	ld acc8, a 
      00169A 72 BB 00 0D      [ 2]  385 	addw x,acc16 
      00169E FE               [ 2]  386 	ldw x,(x)
      00169F CD 09 32         [ 4]  387 	call puts
      0016A2 AE 16 90         [ 2]  388 	ldw x,#tib
      0016A5 CD 09 32         [ 4]  389 	call puts 
      0016A8 A6 0D            [ 1]  390 	ld a,#CR 
      0016AA CD 08 D5         [ 4]  391 	call putc
      0016AD CE 00 00         [ 2]  392 	ldw x,in.w
      0016B0 CD 09 9F         [ 4]  393 	call spaces
      0016B3 A6 5E            [ 1]  394 	ld a,#'^
      0016B5 CD 08 D5         [ 4]  395 	call putc 
      0016B8 AE 17 FF         [ 2]  396 6$: ldw x,#STACK_EMPTY 
      0016BB 94               [ 1]  397     ldw sp,x
                                    398 
      0016BC                        399 warm_start:
      0016BC CD 14 46         [ 4]  400 	call warm_init
                                    401 ;----------------------------
                                    402 ;   BASIC interpreter
                                    403 ;----------------------------
      0016BF                        404 cmd_line: ; user interface 
      0016BF A6 0D            [ 1]  405 	ld a,#CR 
      0016C1 CD 08 D5         [ 4]  406 	call putc 
      0016C4 A6 3E            [ 1]  407 	ld a,#'> 
      0016C6 CD 08 D5         [ 4]  408 	call putc
      0016C9 CD 0A 37         [ 4]  409 	call readln
      0016CC 72 5D 00 03      [ 1]  410 	tnz count 
      0016D0 27 ED            [ 1]  411 	jreq cmd_line
      0016D2 CD 10 60         [ 4]  412 	call compile
                                    413 ;;;;;;;;;;;;;;;;;;;;;;	
                                    414 ;pushw y 
                                    415 ;ldw x,txtbgn  
                                    416 ;ldw y,txtend
                                    417 ;ldw acc16,x   
                                    418 ;subw y,acc16 
                                    419 ;call hex_dump
                                    420 ;popw y 
                                    421 ;;;;;;;;;;;;;;;;;;;;;;
                                    422 
                                    423 ; if text begin with a line number
                                    424 ; the compiler set count to zero    
                                    425 ; so code is not interpreted
      0016D5 72 5D 00 03      [ 1]  426 	tnz count 
      0016D9 27 E4            [ 1]  427 	jreq cmd_line
                                    428 	
                                    429 ; if direct command 
                                    430 ; it's ready to interpret 
                                    431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                    432 ;; This is the interpreter loop
                                    433 ;; for each BASIC code line. 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016DB                        435 interpreter: 
      0016DB C6 00 01         [ 1]  436 	ld a,in 
      0016DE C1 00 03         [ 1]  437 	cp a,count 
      0016E1 2B 1D            [ 1]  438 	jrmi interp_loop
      0016E3                        439 next_line:
      0016E3 72 01 00 22 D7   [ 2]  440 	btjf flags, #FRUN, cmd_line
      0016E8 CE 00 04         [ 2]  441 	ldw x,basicptr
      0016EB 72 BB 00 00      [ 2]  442 	addw x,in.w 
      0016EF C3 00 1D         [ 2]  443 	cpw x,txtend 
      0016F2 2A C8            [ 1]  444 	jrpl warm_start
      0016F4 CF 00 04         [ 2]  445 	ldw basicptr,x ; start of next line  
      0016F7 E6 02            [ 1]  446 	ld a,(2,x)
      0016F9 C7 00 03         [ 1]  447 	ld count,a 
      0016FC 35 03 00 01      [ 1]  448 	mov in,#3 ; skip first 3 bytes of line 
      001700                        449 interp_loop:
      001700 CD 17 9A         [ 4]  450 	call next_token
      001703                        451 _dbg_prt_regs
                           000001     1 	.if DEBUG 
      001703 CD 04 14         [ 4]    2 		call print_registers  
                                      3 	.endif 
      001706                        452 _dbg_cmd_itf 
                           000001     1 	.if DEBUG 
      001706 CD 04 EA         [ 4]    2 		call cmd_itf 
                                      3 	.endif 
      001709 A1 00            [ 1]  453 	cp a,#TK_NONE 
      00170B 27 D6            [ 1]  454 	jreq next_line 
      00170D A1 80            [ 1]  455 	cp a,#TK_CMD
      00170F 26 0C            [ 1]  456 	jrne 1$
      001711                        457 	_get_code_addr
      001711 FE               [ 2]    1         ldw x,(x)
      001712 72 5C 00 01      [ 1]    2         inc in 
      001716 72 5C 00 01      [ 1]    3         inc in 
      00171A FD               [ 4]  458 	call(x)
      00171B 20 E3            [ 2]  459 	jra interp_loop 
      00171D                        460 1$:	 
      00171D A1 85            [ 1]  461 	cp a,#TK_VAR
      00171F 26 05            [ 1]  462 	jrne 2$
      001721 CD 1C 91         [ 4]  463 	call let_var  
      001724 20 DA            [ 2]  464 	jra interp_loop 
      001726                        465 2$:	
      001726 A1 05            [ 1]  466 	cp a,#TK_ARRAY 
      001728 26 05            [ 1]  467 	jrne 3$
      00172A CD 1C 8C         [ 4]  468 	call let_array 
      00172D 20 D1            [ 2]  469 	jra interp_loop
      00172F                        470 3$:	
      00172F A1 03            [ 1]  471 	cp a,#TK_LABEL
      001731 26 05            [ 1]  472 	jrne 4$
      001733 CD 17 3F         [ 4]  473 	call let_dvar  
      001736 20 C8            [ 2]  474 	jra interp_loop 
      001738                        475 4$: 
      001738 A1 0A            [ 1]  476 	cp a,#TK_COLON 
      00173A 27 C4            [ 1]  477 	jreq interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00173C CC 16 30         [ 2]  478 5$:	jp syntax_error 
                                    479 
                                    480 
                                    481 ;----------------------
                                    482 ; when a label is met 
                                    483 ; at interp_loop
                                    484 ; it may be a variable 
                                    485 ; assignement to DIM 
                                    486 ; variable 
                                    487 ;----------------------
                           000001   488 	VAR_NAME=1 
                           000003   489 	REC_LEN=3
                           000004   490 	VSIZE=4 
      00173F                        491 let_dvar:
      00173F                        492 	_vars VSIZE 
      00173F 52 04            [ 2]    1     sub sp,#VSIZE 
      001741 1F 01            [ 2]  493 	ldw (VAR_NAME,sp),x
      001743 0F 03            [ 1]  494 	clr (REC_LEN,sp) 
      001745 CD 17 B3         [ 4]  495 	call skip_string 
      001748 CE 00 04         [ 2]  496 	ldw x,basicptr 
      00174B 72 BB 00 00      [ 2]  497 	addw x,in.w 
      00174F F6               [ 1]  498 	ld a,(x)
      001750 A1 32            [ 1]  499 	cp a,#TK_EQUAL 
      001752 26 43            [ 1]  500 	jrne 9$ 
                                    501 ; dvar assignment 
      001754 72 5C 00 01      [ 1]  502 	inc in  
      001758 CD 1B BF         [ 4]  503 	call condition  
      00175B A1 84            [ 1]  504 	cp a,#TK_INTGR 
      00175D 27 03            [ 1]  505 	jreq 1$ 
      00175F CC 16 30         [ 2]  506 0$:	jp syntax_error 
      001762                        507 1$: 
      001762 1E 01            [ 2]  508 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      001764 CD 13 50         [ 4]  509 	call strlen 
      001767 AB 05            [ 1]  510 	add a,#REC_XTRA_BYTES
      001769 6B 04            [ 1]  511 	ld (REC_LEN+1,sp),a 
      00176B CD 1D 67         [ 4]  512 	call search_name 
      00176E 5D               [ 2]  513 	tnzw x 
      00176F 27 EE            [ 1]  514 	jreq 0$ 
      001771 F6               [ 1]  515 	ld a,(x)
      001772 2A 05            [ 1]  516 	jrpl 2$
      001774 A6 11            [ 1]  517 	ld a,#ERR_RD_ONLY 
      001776 CC 16 32         [ 2]  518 	jp tb_error 
      001779                        519 2$:
      001779 72 FB 03         [ 2]  520 	addw x,(REC_LEN,sp)
      00177C 1D 00 03         [ 2]  521 	subw x,#CELL_SIZE 
      00177F CF 00 19         [ 2]  522 	ldw ptr16,x
      001782                        523 	_xpop 
      001782 90 F6            [ 1]    1     ld a,(y)
      001784 93               [ 1]    2     ldw x,y 
      001785 EE 01            [ 2]    3     ldw x,(1,x)
      001787 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00178B 72 C7 00 19      [ 4]  524 	ld [ptr16],a 
      00178F 72 5C 00 1A      [ 1]  525 	inc ptr8 
      001793 72 CF 00 19      [ 5]  526 	ldw [ptr16],x 
      001797                        527 9$: _drop VSIZE 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      001797 5B 04            [ 2]    1     addw sp,#VSIZE 
      001799 81               [ 4]  528 	ret 
                                    529 
                                    530 
                                    531 ;--------------------------
                                    532 ; extract next token from
                                    533 ; token list 
                                    534 ; basicptr -> base address 
                                    535 ; in  -> offset in list array 
                                    536 ; output:
                                    537 ;   A 		token attribute
                                    538 ;   X 		*token_value 
                                    539 ;----------------------------------------
      00179A                        540 next_token::
                                    541 ;	clrw x 
      00179A C6 00 01         [ 1]  542 	ld a,in 
      00179D C7 00 02         [ 1]  543 	ld in.saved,a ; in case "_unget_token" needed 
                                    544 ; don't replace sub by "cp a,count" 
                                    545 ; if end of line must return with A=0   	
      0017A0 C0 00 03         [ 1]  546 	sub a,count 
      0017A3 27 0D            [ 1]  547 	jreq 9$ ; end of line 
      0017A5                        548 0$: 
      0017A5 CE 00 04         [ 2]  549 	ldw x,basicptr 
      0017A8 72 BB 00 00      [ 2]  550 	addw x,in.w 
      0017AC F6               [ 1]  551 	ld a,(x)
      0017AD 5C               [ 1]  552 	incw x
      0017AE 72 5C 00 01      [ 1]  553 	inc in   
      0017B2 81               [ 4]  554 9$: ret 
                                    555 
                                    556 ;-------------------------
                                    557 ;  skip .asciz in BASIC line 
                                    558 ;  name 
                                    559 ;  input:
                                    560 ;     x		* string 
                                    561 ;  output:
                                    562 ;     none 
                                    563 ;-------------------------
      0017B3                        564 skip_string:
      0017B3 F6               [ 1]  565 	ld a,(x)
      0017B4 27 03            [ 1]  566 	jreq 1$
      0017B6 5C               [ 1]  567 	incw x 
      0017B7 20 FA            [ 2]  568 	jra skip_string 
      0017B9 5C               [ 1]  569 1$: incw x 	
      0017BA 72 B0 00 04      [ 2]  570 	subw x,basicptr 
      0017BE CF 00 00         [ 2]  571 	ldw in.w,x 
      0017C1 81               [ 4]  572 	ret 
                                    573 
                                    574 ;---------------------
                                    575 ; extract 16 bits  
                                    576 ; address from BASIC
                                    577 ; code 
                                    578 ; input:
                                    579 ;    X    *address
                                    580 ; output:
                                    581 ;    X    address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    582 ;-------------------- 
      0017C2                        583 get_addr:
      0017C2 FE               [ 2]  584 	ldw x,(x)
      0017C3 72 5C 00 01      [ 1]  585 	inc in 
      0017C7 72 5C 00 01      [ 1]  586 	inc in 
      0017CB 81               [ 4]  587 	ret 
                                    588 
                                    589 ;--------------------
                                    590 ; extract int24_t  
                                    591 ; value from BASIC 
                                    592 ; code 
                                    593 ; input:
                                    594 ;    X   *integer 
                                    595 ; output:
                                    596 ;    A:X   int24  
                                    597 ;--------------------
      0017CC                        598 get_int24:
      0017CC F6               [ 1]  599 	ld a,(x)
      0017CD EE 01            [ 2]  600 	ldw x,(1,x)
                                    601 ; skip 3 bytes 
      0017CF 72 5C 00 01      [ 1]  602 	inc in 
      0017D3 72 5C 00 01      [ 1]  603 	inc in 
      0017D7 72 5C 00 01      [ 1]  604 	inc in 
      0017DB 81               [ 4]  605 	ret 
                                    606 
                                    607 ;-------------------------
                                    608 ; get character from 
                                    609 ; BASIC code 
                                    610 ; input:
                                    611 ;    X   *char 
                                    612 ; output:
                                    613 ;    A    char 
                                    614 ;-------------------------
      0017DC                        615 get_char:
      0017DC F6               [ 1]  616 	ld a,(x)
      0017DD 72 5C 00 01      [ 1]  617 	inc in  
      0017E1 81               [ 4]  618     ret 
                                    619 
                                    620 ;-----------------------------------
                                    621 ; print a 16 bit integer 
                                    622 ; using variable 'base' as conversion
                                    623 ; format.
                                    624 ; input:
                                    625 ;    X       integer to print 
                                    626 ;   'base'    conversion base 
                                    627 ; output:
                                    628 ;   terminal  
                                    629 ;-----------------------------------
      0017E2                        630 prt_i16:
      0017E2 72 5F 00 0C      [ 1]  631 	clr acc24 
      0017E6 CF 00 0D         [ 2]  632 	ldw acc16,x 
      0017E9 A6 10            [ 1]  633 	ld a,#16
      0017EB C1 00 0A         [ 1]  634 	cp a,base
      0017EE 27 09            [ 1]  635 	jreq prt_acc24  
      0017F0 72 0F 00 0D 04   [ 2]  636 	btjf acc16,#7,prt_acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0017F5 72 53 00 0C      [ 1]  637 	cpl acc24 ; sign extend 
                                    638 	
                                    639 ;------------------------------------
                                    640 ; print integer in acc24 
                                    641 ; input:
                                    642 ;	acc24 		integer to print 
                                    643 ;	'base' 		numerical base for conversion 
                                    644 ;   'tab_width' field width 
                                    645 ;    A 			signed||unsigned conversion
                                    646 ;  output:
                                    647 ;    A          string length
                                    648 ;------------------------------------
      0017F9                        649 prt_acc24:
      0017F9 A6 FF            [ 1]  650 	ld a,#255  ; signed conversion  
      0017FB CD 18 1F         [ 4]  651     call itoa  ; conversion entier en  .asciz
      0017FE CD 11 0A         [ 4]  652 	call right_align  
      001801 88               [ 1]  653 	push a 
      001802 CD 09 32         [ 4]  654 	call puts
      001805 84               [ 1]  655 	pop a 
      001806 81               [ 4]  656     ret	
                                    657 
                                    658 ;---------------------------------------
                                    659 ;  print value at xstack top 
                                    660 ;---------------------------------------
      001807                        661 print_top: 
      001807                        662 	_xpop 
      001807 90 F6            [ 1]    1     ld a,(y)
      001809 93               [ 1]    2     ldw x,y 
      00180A EE 01            [ 2]    3     ldw x,(1,x)
      00180C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001810 C7 00 0C         [ 1]  663 	ld acc24,a 
      001813 CF 00 0D         [ 2]  664 	ldw acc16,x 
      001816 CD 17 F9         [ 4]  665 	call prt_acc24 
      001819 A6 20            [ 1]  666 	ld a,#SPACE
      00181B CD 08 D5         [ 4]  667 	call putc 
      00181E 81               [ 4]  668 	ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; convert integer in acc24 to string
                                    672 ; input:
                                    673 ;   'base'	conversion base 
                                    674 ;	acc24	integer to convert
                                    675 ;   A       0=unsigned, else signed 
                                    676 ; output:
                                    677 ;   X  		pointer to first char of string
                                    678 ;   A       string length
                                    679 ;------------------------------------
                           000001   680 	SIGN=1  ; integer sign 
                           000002   681 	LEN=2 
                           000003   682 	PSTR=3
                           000004   683 	VSIZE=4 ;locals size
      00181F                        684 itoa::
      00181F                        685 	_vars VSIZE
      00181F 52 04            [ 2]    1     sub sp,#VSIZE 
      001821 0F 02            [ 1]  686 	clr (LEN,sp) ; string length  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001823 0F 01            [ 1]  687 	clr (SIGN,sp)    ; sign
      001825 4D               [ 1]  688 	tnz A
      001826 27 11            [ 1]  689 	jreq 1$ ; unsigned conversion  
      001828 C6 00 0A         [ 1]  690 	ld a,base 
      00182B A1 0A            [ 1]  691 	cp a,#10
      00182D 26 0A            [ 1]  692 	jrne 1$
                                    693 	; base 10 string display with negative sign if bit 23==1
      00182F 72 0F 00 0C 05   [ 2]  694 	btjf acc24,#7,1$
      001834 03 01            [ 1]  695 	cpl (SIGN,sp)
      001836 CD 02 0A         [ 4]  696 	call neg_acc24
      001839                        697 1$:
                                    698 ; initialize string pointer 
      001839 AE 16 90         [ 2]  699 	ldw x,#tib 
      00183C 1C 00 50         [ 2]  700 	addw x,#TIB_SIZE
      00183F 5A               [ 2]  701 	decw x 
      001840 7F               [ 1]  702 	clr (x)
      001841                        703 itoa_loop:
      001841 C6 00 0A         [ 1]  704     ld a,base
      001844 CD 02 D6         [ 4]  705     call divu24_8 ; acc24/A 
      001847 AB 30            [ 1]  706     add a,#'0  ; remainder of division
      001849 A1 3A            [ 1]  707     cp a,#'9+1
      00184B 2B 02            [ 1]  708     jrmi 2$
      00184D AB 07            [ 1]  709     add a,#7 
      00184F                        710 2$:	
      00184F 5A               [ 2]  711 	decw x
      001850 F7               [ 1]  712     ld (x),a
      001851 0C 02            [ 1]  713 	inc (LEN,sp)
                                    714 	; if acc24==0 conversion done
      001853 C6 00 0C         [ 1]  715 	ld a,acc24
      001856 CA 00 0D         [ 1]  716 	or a,acc16
      001859 CA 00 0E         [ 1]  717 	or a,acc8
      00185C 26 E3            [ 1]  718     jrne itoa_loop
                                    719 	;conversion done, next add '$' or '-' as required
      00185E C6 00 0A         [ 1]  720 	ld a,base 
      001861 A1 10            [ 1]  721 	cp a,#16
      001863 27 08            [ 1]  722 	jreq 8$
      001865 7B 01            [ 1]  723 	ld a,(SIGN,sp)
      001867 27 0A            [ 1]  724     jreq 10$
      001869 A6 2D            [ 1]  725     ld a,#'-
      00186B 20 02            [ 2]  726 	jra 9$ 
      00186D                        727 8$:	
      00186D A6 24            [ 1]  728 	ld a,#'$ 
      00186F 5A               [ 2]  729 9$: decw x
      001870 F7               [ 1]  730     ld (x),a
      001871 0C 02            [ 1]  731 	inc (LEN,sp)
      001873                        732 10$:
      001873 7B 02            [ 1]  733 	ld a,(LEN,sp)
      001875                        734 	_drop VSIZE
      001875 5B 04            [ 2]    1     addw sp,#VSIZE 
      001877 81               [ 4]  735 	ret
                                    736 
                                    737 ;------------------------------------
                                    738 ; convert alpha to uppercase
                                    739 ; input:
                                    740 ;    a  character to convert
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    741 ; output:
                                    742 ;    a  uppercase character
                                    743 ;------------------------------------
      001878                        744 to_upper::
      001878 A1 61            [ 1]  745 	cp a,#'a
      00187A 2A 01            [ 1]  746 	jrpl 1$
      00187C 81               [ 4]  747 0$:	ret
      00187D A1 7A            [ 1]  748 1$: cp a,#'z	
      00187F 22 FB            [ 1]  749 	jrugt 0$
      001881 A0 20            [ 1]  750 	sub a,#32
      001883 81               [ 4]  751 	ret
                                    752 	
                                    753 ;------------------------------------
                                    754 ; convert pad content in integer
                                    755 ; input:
                                    756 ;    x		* .asciz to convert
                                    757 ; output:
                                    758 ;    acc24      int24_t
                                    759 ;------------------------------------
                                    760 	; local variables
                           000001   761 	SIGN=1 ; 1 byte, 
                           000002   762 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   763 	TEMP=3 ; 1 byte, temporary storage
                           000004   764 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   765 	VSIZE=5 ; 5 bytes reserved for local storage
      001884                        766 atoi24::
      001884                        767 	_vars VSIZE
      001884 52 05            [ 2]    1     sub sp,#VSIZE 
      001886 1F 04            [ 2]  768 	ldw (XTEMP,sp),x 
                                    769 ; conversion made on xstack 
      001888 4F               [ 1]  770 	clr a 
      001889 5F               [ 1]  771 	clrw x 
      00188A                        772 	_xpush 
      00188A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00188E 90 F7            [ 1]    2     ld (y),a 
      001890 90 EF 01         [ 2]    3     ldw (1,y),x 
      001893 0F 01            [ 1]  773 	clr (SIGN,sp)
      001895 A6 0A            [ 1]  774 	ld a,#10
      001897 6B 02            [ 1]  775 	ld (BASE,sp),a ; default base decimal
      001899 1E 04            [ 2]  776 	ldw x,(XTEMP,sp)
      00189B F6               [ 1]  777 	ld a,(x)
      00189C 27 4E            [ 1]  778 	jreq 9$  ; completed if 0
      00189E A1 2D            [ 1]  779 	cp a,#'-
      0018A0 26 04            [ 1]  780 	jrne 1$
      0018A2 03 01            [ 1]  781 	cpl (SIGN,sp)
      0018A4 20 08            [ 2]  782 	jra 2$
      0018A6 A1 24            [ 1]  783 1$: cp a,#'$
      0018A8 26 08            [ 1]  784 	jrne 3$
      0018AA A6 10            [ 1]  785 	ld a,#16
      0018AC 6B 02            [ 1]  786 	ld (BASE,sp),a
      0018AE 5C               [ 1]  787 2$:	incw x
      0018AF 1F 04            [ 2]  788 	ldw (XTEMP,sp),x 
      0018B1 F6               [ 1]  789 	ld a,(x)
      0018B2                        790 3$:	; char to digit 
      0018B2 A1 61            [ 1]  791 	cp a,#'a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0018B4 2B 02            [ 1]  792 	jrmi 4$
      0018B6 A0 20            [ 1]  793 	sub a,#32
      0018B8 A1 30            [ 1]  794 4$:	cp a,#'0
      0018BA 2B 30            [ 1]  795 	jrmi 9$
      0018BC A0 30            [ 1]  796 	sub a,#'0
      0018BE A1 0A            [ 1]  797 	cp a,#10
      0018C0 2B 06            [ 1]  798 	jrmi 5$
      0018C2 A0 07            [ 1]  799 	sub a,#7
      0018C4 11 02            [ 1]  800 	cp a,(BASE,sp)
      0018C6 2A 24            [ 1]  801 	jrpl 9$
      0018C8 6B 03            [ 1]  802 5$:	ld (TEMP,sp),a
      0018CA 7B 02            [ 1]  803 	ld a,(BASE,sp)
      0018CC CD 02 27         [ 4]  804 	call mulu24_8
      0018CF                        805 	_xpush 
      0018CF 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018D3 90 F7            [ 1]    2     ld (y),a 
      0018D5 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018D8 5F               [ 1]  806 	clrw x 
      0018D9 7B 03            [ 1]  807 	ld a,(TEMP,sp)
      0018DB 02               [ 1]  808 	rlwa x 
      0018DC                        809 	_xpush 
      0018DC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018E0 90 F7            [ 1]    2     ld (y),a 
      0018E2 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018E5 CD 01 6B         [ 4]  810 	call add24 
      0018E8 1E 04            [ 2]  811 	ldw x,(XTEMP,sp)
      0018EA 20 C2            [ 2]  812 	jra 2$
      0018EC 0D 01            [ 1]  813 9$:	tnz (SIGN,sp)
      0018EE 27 03            [ 1]  814     jreq atoi_exit
      0018F0 CD 01 F0         [ 4]  815     call neg24
      0018F3                        816 atoi_exit:
      0018F3                        817 	_xpop 
      0018F3 90 F6            [ 1]    1     ld a,(y)
      0018F5 93               [ 1]    2     ldw x,y 
      0018F6 EE 01            [ 2]    3     ldw x,(1,x)
      0018F8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018FC C7 00 0C         [ 1]  818 	ld acc24,a 
      0018FF CF 00 0D         [ 2]  819 	ldw acc16,x  
      001902                        820 	_drop VSIZE
      001902 5B 05            [ 2]    1     addw sp,#VSIZE 
      001904 81               [ 4]  821 	ret
                                    822 
                                    823 
                                    824 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    825 ;;   TINY BASIC  operators,
                                    826 ;;   commands and functions 
                                    827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    828 
                                    829 ;---------------------------------
                                    830 ; dictionary search 
                                    831 ; input:
                                    832 ;	X 		dictionary entry point, name field  
                                    833 ;   y		.asciz name to search 
                                    834 ; output:
                                    835 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    836 ;  X		routine address|TK_OP 
                                    837 ;---------------------------------
                           000001   838 	NLEN=1 ; cmd length 
                           000002   839 	XSAVE=2
                           000004   840 	YSAVE=4
                           000005   841 	VSIZE=5 
      001905                        842 search_dict::
      001905                        843 	_vars VSIZE 
      001905 52 05            [ 2]    1     sub sp,#VSIZE 
      001907 17 04            [ 2]  844 	ldw (YSAVE,sp),y 
      001909                        845 search_next:
      001909 1F 02            [ 2]  846 	ldw (XSAVE,sp),x 
                                    847 ; get name length in dictionary	
      00190B F6               [ 1]  848 	ld a,(x)
      00190C A4 0F            [ 1]  849 	and a,#0xf 
      00190E 6B 01            [ 1]  850 	ld (NLEN,sp),a  
      001910 16 04            [ 2]  851 	ldw y,(YSAVE,sp) ; name pointer 
      001912 5C               [ 1]  852 	incw x 
      001913                        853 cp_loop:
      001913 90 F6            [ 1]  854 	ld a,(y)
      001915 27 1B            [ 1]  855 	jreq str_match 
      001917 0D 01            [ 1]  856 	tnz (NLEN,sp)
      001919 27 0A            [ 1]  857 	jreq no_match  
      00191B F1               [ 1]  858 	cp a,(x)
      00191C 26 07            [ 1]  859 	jrne no_match 
      00191E 90 5C            [ 1]  860 	incw y 
      001920 5C               [ 1]  861 	incw x
      001921 0A 01            [ 1]  862 	dec (NLEN,sp)
      001923 20 EE            [ 2]  863 	jra cp_loop 
      001925                        864 no_match:
      001925 1E 02            [ 2]  865 	ldw x,(XSAVE,sp) 
      001927 1D 00 02         [ 2]  866 	subw x,#2 ; move X to link field
      00192A 4B 00            [ 1]  867 	push #TK_NONE 
      00192C FE               [ 2]  868 	ldw x,(x) ; next word link 
      00192D 84               [ 1]  869 	pop a ; TK_NONE 
      00192E 27 1D            [ 1]  870 	jreq search_exit  ; not found  
                                    871 ;try next 
      001930 20 D7            [ 2]  872 	jra search_next
      001932                        873 str_match:
      001932 1E 02            [ 2]  874 	ldw x,(XSAVE,sp)
      001934 F6               [ 1]  875 	ld a,(X)
      001935 6B 01            [ 1]  876 	ld (NLEN,sp),a ; needed to test keyword type  
      001937 A4 0F            [ 1]  877 	and a,#NLEN_MASK 
                                    878 ; move x to procedure address field 	
      001939 4C               [ 1]  879 	inc a 
      00193A C7 00 0E         [ 1]  880 	ld acc8,a 
      00193D 72 5F 00 0D      [ 1]  881 	clr acc16 
      001941 72 BB 00 0D      [ 2]  882 	addw x,acc16 
      001945 FE               [ 2]  883 	ldw x,(x) ; routine address  
                                    884 ;determine keyword type bits 7:4 
      001946 7B 01            [ 1]  885 	ld a,(NLEN,sp)
      001948 A4 F0            [ 1]  886 	and a,#KW_TYPE_MASK 
      00194A 4E               [ 1]  887 	swap a 
      00194B AB 80            [ 1]  888 	add a,#128
      00194D                        889 search_exit: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      00194D                        890 	_drop VSIZE 
      00194D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00194F 81               [ 4]  891 	ret 
                                    892 
                                    893 ;---------------------
                                    894 ; check if next token
                                    895 ;  is of expected type 
                                    896 ; input:
                                    897 ;   A 		 expected token attribute
                                    898 ;  ouput:
                                    899 ;   none     if fail call syntax_error 
                                    900 ;--------------------
      001950                        901 expect:
      001950 88               [ 1]  902 	push a 
      001951 CD 17 9A         [ 4]  903 	call next_token 
      001954 11 01            [ 1]  904 	cp a,(1,sp)
      001956 27 03            [ 1]  905 	jreq 1$
      001958 CC 16 30         [ 2]  906 	jp syntax_error
      00195B 84               [ 1]  907 1$: pop a 
      00195C 81               [ 4]  908 	ret 
                                    909 
                                    910 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    911 ; parse arguments list 
                                    912 ; between ()
                                    913 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195D                        914 func_args:
      00195D A6 06            [ 1]  915 	ld a,#TK_LPAREN 
      00195F CD 19 50         [ 4]  916 	call expect 
                                    917 ; expected to continue in arg_list 
                                    918 ; caller must check for TK_RPAREN 
                                    919 
                                    920 ;-------------------------------
                                    921 ; parse embedded BASIC routines 
                                    922 ; arguments list.
                                    923 ; arg_list::=  expr[','expr]*
                                    924 ; all arguments are of int24_t type
                                    925 ; and pushed on stack 
                                    926 ; input:
                                    927 ;   none
                                    928 ; output:
                                    929 ;   xstack{n}   arguments pushed on xstack
                                    930 ;   A 	number of arguments pushed on xstack  
                                    931 ;--------------------------------
      001962                        932 arg_list:
      001962 4B 00            [ 1]  933 	push #0
      001964 CD 1B BF         [ 4]  934 1$:	call condition 
      001967 4D               [ 1]  935 	tnz a 
      001968 27 12            [ 1]  936 	jreq 7$  
      00196A 0C 01            [ 1]  937 	inc (1,sp)
      00196C CD 17 9A         [ 4]  938 	call next_token 
      00196F A1 08            [ 1]  939 	cp a,#TK_COMMA 
      001971 27 F1            [ 1]  940 	jreq 1$ 
      001973 A1 07            [ 1]  941 	cp a,#TK_RPAREN
      001975 27 05            [ 1]  942 	jreq 7$
      001977                        943 	_unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      001977 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00197C 84               [ 1]  944 7$:	pop a  
      00197D 81               [ 4]  945 	ret 
                                    946 
                                    947 ;--------------------------------
                                    948 ;   BASIC commnands 
                                    949 ;--------------------------------
                                    950 
                                    951 ;--------------------------------
                                    952 ;  arithmetic and relational 
                                    953 ;  routines
                                    954 ;  operators precedence
                                    955 ;  highest to lowest
                                    956 ;  operators on same row have 
                                    957 ;  same precedence and are executed
                                    958 ;  from left to right.
                                    959 ;	'*','/','%'
                                    960 ;   '-','+'
                                    961 ;   '=','>','<','>=','<=','<>','><'
                                    962 ;   '<>' and '><' are equivalent for not equal.
                                    963 ;--------------------------------
                                    964 
                                    965 ;---------------------
                                    966 ; return array element
                                    967 ; address from @(expr)
                                    968 ; input:
                                    969 ;   A 		TK_ARRAY
                                    970 ; output:
                                    971 ;	X 		element address 
                                    972 ;----------------------
      00197E                        973 get_array_element:
      00197E CD 19 5D         [ 4]  974 	call func_args 
      001981 A1 01            [ 1]  975 	cp a,#1
      001983 27 03            [ 1]  976 	jreq 1$
      001985 CC 16 30         [ 2]  977 	jp syntax_error
      001988                        978 1$: _xpop 
      001988 90 F6            [ 1]    1     ld a,(y)
      00198A 93               [ 1]    2     ldw x,y 
      00198B EE 01            [ 2]    3     ldw x,(1,x)
      00198D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    979     ; ignore A, index < 65536 in any case 
                                    980 	; check for bounds 
      001991 C3 00 20         [ 2]  981 	cpw x,array_size 
      001994 23 05            [ 2]  982 	jrule 3$
                                    983 ; bounds {1..array_size}	
      001996 A6 0A            [ 1]  984 2$: ld a,#ERR_BAD_VALUE 
      001998 CC 16 32         [ 2]  985 	jp tb_error 
      00199B 5D               [ 2]  986 3$: tnzw  x
      00199C 27 F8            [ 1]  987 	jreq 2$ 
      00199E 89               [ 2]  988 	pushw x 
      00199F 58               [ 2]  989 	sllw x 
      0019A0 72 FB 01         [ 2]  990 	addw x,(1,sp) ; index*size_of(int24)
      0019A3 1F 01            [ 2]  991 	ldw (1,sp),x  
      0019A5 AE 16 90         [ 2]  992 	ldw x,#tib ; array is below tib 
      0019A8 72 F0 01         [ 2]  993 	subw x,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0019AB                        994 	_drop 2   
      0019AB 5B 02            [ 2]    1     addw sp,#2 
      0019AD 81               [ 4]  995 	ret 
                                    996 
                                    997 
                                    998 ;***********************************
                                    999 ;   expression parse,execute 
                                   1000 ;***********************************
                                   1001 ;-----------------------------------
                                   1002 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1003 ;			 integer | function |
                                   1004 ;			 '('relation')' 
                                   1005 ; output:
                                   1006 ;   A       token attribute 
                                   1007 ;   xstack  value  
                                   1008 ; ---------------------------------
                           000001  1009 	NEG=1
                           000001  1010 	VSIZE=1
      0019AE                       1011 factor:
      0019AE                       1012 	_vars VSIZE 
      0019AE 52 01            [ 2]    1     sub sp,#VSIZE 
      0019B0 0F 01            [ 1] 1013 	clr (NEG,sp)
      0019B2 CD 17 9A         [ 4] 1014 	call next_token
      0019B5 4D               [ 1] 1015 	tnz a 
      0019B6 26 03            [ 1] 1016 	jrne 1$ 
      0019B8 CC 1A 60         [ 2] 1017 	jp 22$ 
      0019BB A1 10            [ 1] 1018 1$:	cp a,#TK_PLUS 
      0019BD 27 06            [ 1] 1019 	jreq 2$
      0019BF A1 11            [ 1] 1020 	cp a,#TK_MINUS 
      0019C1 26 05            [ 1] 1021 	jrne 4$ 
      0019C3 03 01            [ 1] 1022 	cpl (NEG,sp)
      0019C5                       1023 2$:	
      0019C5 CD 17 9A         [ 4] 1024 	call next_token
      0019C8                       1025 4$:
      0019C8 4D               [ 1] 1026 	tnz a 
      0019C9 26 03            [ 1] 1027 	jrne 41$ 
      0019CB CC 16 30         [ 2] 1028 	jp syntax_error  
      0019CE                       1029 41$:	
      0019CE A1 81            [ 1] 1030 	cp a,#TK_IFUNC 
      0019D0 26 0C            [ 1] 1031 	jrne 5$ 
      0019D2                       1032 	_get_code_addr 
      0019D2 FE               [ 2]    1         ldw x,(x)
      0019D3 72 5C 00 01      [ 1]    2         inc in 
      0019D7 72 5C 00 01      [ 1]    3         inc in 
      0019DB FD               [ 4] 1033 	call (x); result in A:X  
      0019DC 20 70            [ 2] 1034 	jra 18$ 
      0019DE                       1035 5$:
      0019DE A1 84            [ 1] 1036 	cp a,#TK_INTGR
      0019E0 26 05            [ 1] 1037 	jrne 6$
      0019E2 CD 17 CC         [ 4] 1038 	call get_int24 ; A:X
      0019E5 20 67            [ 2] 1039 	jra 18$
      0019E7                       1040 6$:
      0019E7 A1 05            [ 1] 1041 	cp a,#TK_ARRAY
      0019E9 26 05            [ 1] 1042 	jrne 7$
      0019EB CD 19 7E         [ 4] 1043 	call get_array_element
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0019EE 20 07            [ 2] 1044     jra 71$
      0019F0                       1045 7$:
      0019F0 A1 85            [ 1] 1046 	cp a,#TK_VAR 
      0019F2 26 08            [ 1] 1047 	jrne 8$
      0019F4 CD 17 C2         [ 4] 1048 	call get_addr 
      0019F7                       1049 71$: ; put value in A:X
      0019F7 F6               [ 1] 1050 	ld a,(x)
      0019F8 EE 01            [ 2] 1051 	ldw x,(1,x)
      0019FA 20 52            [ 2] 1052 	jra 18$
      0019FC                       1053 8$:
      0019FC A1 03            [ 1] 1054 	cp a,#TK_LABEL 
      0019FE 26 1D            [ 1] 1055 	jrne 9$
      001A00 90 89            [ 2] 1056 	pushw y  
      001A02 89               [ 2] 1057 	pushw x 
      001A03 CD 17 B3         [ 4] 1058 	call skip_string
      001A06 85               [ 2] 1059 	popw x  
      001A07 CD 13 50         [ 4] 1060 	call strlen 
      001A0A AB 05            [ 1] 1061 	add a,#REC_XTRA_BYTES
      001A0C CD 1D 67         [ 4] 1062 	call search_name
      001A0F 5D               [ 2] 1063 	tnzw x 
      001A10 26 04            [ 1] 1064 	jrne 82$ 
      001A12 90 85            [ 2] 1065 	popw y 
      001A14 20 30            [ 2] 1066 	jra 16$
      001A16                       1067 82$:
      001A16 90 85            [ 2] 1068 	popw y   
      001A18 CD 1C C1         [ 4] 1069 	call get_value ; in A:X 
      001A1B 20 31            [ 2] 1070 	jra 18$
      001A1D                       1071 9$: 
      001A1D A1 82            [ 1] 1072 	cp a,#TK_CFUNC 
      001A1F 26 0E            [ 1] 1073 	jrne 12$
      001A21                       1074 	_get_code_addr 
      001A21 FE               [ 2]    1         ldw x,(x)
      001A22 72 5C 00 01      [ 1]    2         inc in 
      001A26 72 5C 00 01      [ 1]    3         inc in 
      001A2A FD               [ 4] 1075 	call(x)
      001A2B 5F               [ 1] 1076 	clrw x 
      001A2C 02               [ 1] 1077 	rlwa x  ; char>int24 in A:X 
      001A2D 20 1F            [ 2] 1078 	jra 18$ 	 
      001A2F                       1079 12$:			
      001A2F A1 06            [ 1] 1080 	cp a,#TK_LPAREN
      001A31 26 13            [ 1] 1081 	jrne 16$
      001A33 CD 1A A6         [ 4] 1082 	call expression
      001A36 A6 07            [ 1] 1083 	ld a,#TK_RPAREN 
      001A38 CD 19 50         [ 4] 1084 	call expect
      001A3B                       1085 	_xpop 
      001A3B 90 F6            [ 1]    1     ld a,(y)
      001A3D 93               [ 1]    2     ldw x,y 
      001A3E EE 01            [ 2]    3     ldw x,(1,x)
      001A40 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A44 20 08            [ 2] 1086 	jra 18$	
      001A46                       1087 16$:
      001A46                       1088 	_unget_token 
      001A46 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A4B 4F               [ 1] 1089 	clr a 
      001A4C 20 12            [ 2] 1090 	jra 22$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A4E                       1091 18$: 
      001A4E 0D 01            [ 1] 1092 	tnz (NEG,sp)
      001A50 27 03            [ 1] 1093 	jreq 20$
      001A52 CD 02 02         [ 4] 1094 	call neg_ax   
      001A55                       1095 20$:
      001A55                       1096 	_xpush 
      001A55 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A59 90 F7            [ 1]    2     ld (y),a 
      001A5B 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A5E A6 84            [ 1] 1097 	ld a,#TK_INTGR
      001A60                       1098 22$:
      001A60                       1099 	_drop VSIZE
      001A60 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A62 81               [ 4] 1100 	ret
                                   1101 
                                   1102 
                                   1103 ;-----------------------------------
                                   1104 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1105 ; output:
                                   1106 ;   A    	token attribute 
                                   1107 ;	xstack		value 
                                   1108 ;-----------------------------------
                           000001  1109 	MULOP=1
                           000001  1110 	VSIZE=1
      001A63                       1111 term:
      001A63                       1112 	_vars VSIZE
      001A63 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1113 ; first factor 	
      001A65 CD 19 AE         [ 4] 1114 	call factor
      001A68 4D               [ 1] 1115 	tnz a 
      001A69 27 38            [ 1] 1116 	jreq term_exit  
      001A6B                       1117 term01:	 ; check for  operator '*'|'/'|'%' 
      001A6B CD 17 9A         [ 4] 1118 	call next_token
      001A6E 6B 01            [ 1] 1119 	ld (MULOP,sp),a
      001A70 A4 30            [ 1] 1120 	and a,#TK_GRP_MASK
      001A72 A1 20            [ 1] 1121 	cp a,#TK_GRP_MULT
      001A74 27 09            [ 1] 1122 	jreq 1$
      001A76 A6 84            [ 1] 1123 	ld a,#TK_INTGR
      001A78                       1124 	_unget_token 
      001A78 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A7D 20 24            [ 2] 1125 	jra term_exit 
      001A7F                       1126 1$:	; got *|/|%
                                   1127 ;second factor
      001A7F CD 19 AE         [ 4] 1128 	call factor
      001A82 4D               [ 1] 1129 	tnz a 
      001A83 26 03            [ 1] 1130 	jrne 2$ 
      001A85 CC 16 30         [ 2] 1131 	jp syntax_error 
      001A88                       1132 2$: ; select operation 	
      001A88 7B 01            [ 1] 1133 	ld a,(MULOP,sp) 
      001A8A A1 20            [ 1] 1134 	cp a,#TK_MULT 
      001A8C 26 05            [ 1] 1135 	jrne 3$
                                   1136 ; '*' operator
      001A8E CD 02 66         [ 4] 1137 	call mul24 
      001A91 20 D8            [ 2] 1138 	jra term01
      001A93 A1 21            [ 1] 1139 3$: cp a,#TK_DIV 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001A95 26 05            [ 1] 1140 	jrne 4$ 
                                   1141 ; '/' operator	
      001A97 CD 02 F4         [ 4] 1142 	call div24 
      001A9A 20 CF            [ 2] 1143 	jra term01 
      001A9C                       1144 4$: ; '%' operator
      001A9C CD 03 8E         [ 4] 1145 	call mod24
      001A9F 20 CA            [ 2] 1146 	jra term01 
      001AA1                       1147 9$: 
      001AA1 A6 84            [ 1] 1148 	ld a,#TK_INTGR
      001AA3                       1149 term_exit:
      001AA3                       1150 	_drop VSIZE 
      001AA3 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AA5 81               [ 4] 1151 	ret 
                                   1152 
                                   1153 ;-------------------------------
                                   1154 ;  expr ::= term [['+'|'-'] term]*
                                   1155 ;  result range {-32768..32767}
                                   1156 ;  output:
                                   1157 ;   A    token attribute 
                                   1158 ;   xstack	 result    
                                   1159 ;-------------------------------
                           000001  1160 	OP=1 
                           000001  1161 	VSIZE=1 
      001AA6                       1162 expression:
      001AA6                       1163 	_vars VSIZE 
      001AA6 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1164 ; first term 	
      001AA8 CD 1A 63         [ 4] 1165 	call term
      001AAB 4D               [ 1] 1166 	tnz a 
      001AAC 27 2D            [ 1] 1167 	jreq 9$
      001AAE                       1168 1$:	; operator '+'|'-'
      001AAE CD 17 9A         [ 4] 1169 	call next_token
      001AB1 6B 01            [ 1] 1170 	ld (OP,sp),a 
      001AB3 A4 30            [ 1] 1171 	and a,#TK_GRP_MASK
      001AB5 A1 10            [ 1] 1172 	cp a,#TK_GRP_ADD 
      001AB7 27 09            [ 1] 1173 	jreq 2$ 
      001AB9                       1174 	_unget_token 
      001AB9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ABE A6 84            [ 1] 1175 	ld a,#TK_INTGR
      001AC0 20 19            [ 2] 1176 	jra 9$ 
      001AC2                       1177 2$: ; second term 
      001AC2 CD 1A 63         [ 4] 1178 	call term
      001AC5 4D               [ 1] 1179 	tnz a 
      001AC6 26 03            [ 1] 1180 	jrne 3$
      001AC8 CC 16 30         [ 2] 1181 	jp syntax_error
      001ACB                       1182 3$:
      001ACB 7B 01            [ 1] 1183 	ld a,(OP,sp)
      001ACD A1 10            [ 1] 1184 	cp a,#TK_PLUS 
      001ACF 26 05            [ 1] 1185 	jrne 4$
                                   1186 ; '+' operator	
      001AD1 CD 01 6B         [ 4] 1187 	call add24
      001AD4 20 D8            [ 2] 1188 	jra 1$ 
      001AD6                       1189 4$:	; '-' operator 
      001AD6 CD 01 88         [ 4] 1190 	call sub24
      001AD9 20 D3            [ 2] 1191 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001ADB                       1192 9$:
      001ADB                       1193 	_drop VSIZE 
      001ADB 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ADD 81               [ 4] 1194 	ret 
                                   1195 
                                   1196 ;---------------------------------------------
                                   1197 ; rel ::= expr rel_op expr
                                   1198 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1199 ;  relation return  integer , zero is false 
                                   1200 ;  output:
                                   1201 ;	 xstack		value  
                                   1202 ;---------------------------------------------
                           000001  1203 	RELOP=1
                           000001  1204 	VSIZE=1 
      001ADE                       1205 relation: 
      001ADE                       1206 	_vars VSIZE
      001ADE 52 01            [ 2]    1     sub sp,#VSIZE 
      001AE0 CD 1A A6         [ 4] 1207 	call expression
      001AE3 4D               [ 1] 1208 	tnz a 
      001AE4 27 54            [ 1] 1209 	jreq 9$ 
                                   1210 ; expect rel_op or leave 
      001AE6 CD 17 9A         [ 4] 1211 	call next_token 
      001AE9 6B 01            [ 1] 1212 	ld (RELOP,sp),a 
      001AEB A4 30            [ 1] 1213 	and a,#TK_GRP_MASK
      001AED A1 30            [ 1] 1214 	cp a,#TK_GRP_RELOP 
      001AEF 27 09            [ 1] 1215 	jreq 2$
      001AF1 A6 84            [ 1] 1216 	ld a,#TK_INTGR 
      001AF3                       1217 	_unget_token 
      001AF3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AF8 20 40            [ 2] 1218 	jra 9$ 
      001AFA                       1219 2$:	; expect another expression
      001AFA CD 1A A6         [ 4] 1220 	call expression
      001AFD 4D               [ 1] 1221 	tnz a 
      001AFE 26 03            [ 1] 1222 	jrne 3$
      001B00 CC 16 30         [ 2] 1223 	jp syntax_error 
      001B03                       1224 3$: 
      001B03 CD 01 A5         [ 4] 1225 	call cp24 
      001B06                       1226 	_xpop  
      001B06 90 F6            [ 1]    1     ld a,(y)
      001B08 93               [ 1]    2     ldw x,y 
      001B09 EE 01            [ 2]    3     ldw x,(1,x)
      001B0B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B0F 4D               [ 1] 1227 	tnz a 
      001B10 2B 08            [ 1] 1228 	jrmi 4$
      001B12 26 0C            [ 1] 1229 	jrne 5$
      001B14 35 02 00 0E      [ 1] 1230 	mov acc8,#2 ; i1==i2
      001B18 20 0A            [ 2] 1231 	jra 6$ 
      001B1A                       1232 4$: ; i1<i2
      001B1A 35 04 00 0E      [ 1] 1233 	mov acc8,#4 
      001B1E 20 04            [ 2] 1234 	jra 6$
      001B20                       1235 5$: ; i1>i2
      001B20 35 01 00 0E      [ 1] 1236 	mov acc8,#1  
      001B24                       1237 6$: ; 0=false, -1=true 
      001B24 5F               [ 1] 1238 	clrw x 
      001B25 C6 00 0E         [ 1] 1239 	ld a, acc8  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B28 14 01            [ 1] 1240 	and a,(RELOP,sp)
      001B2A 27 03            [ 1] 1241 	jreq 7$
      001B2C 53               [ 2] 1242 	cplw x 
      001B2D A6 FF            [ 1] 1243 	ld a,#255 
      001B2F                       1244 7$:	_xpush 
      001B2F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B33 90 F7            [ 1]    2     ld (y),a 
      001B35 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B38 A6 84            [ 1] 1245 	ld a,#TK_INTGR
      001B3A                       1246 9$: 
      001B3A                       1247 	_drop VSIZE
      001B3A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B3C 81               [ 4] 1248 	ret 
                                   1249 
                                   1250 ;-------------------------------------------
                                   1251 ;  AND factor:  [NOT] relation | (condition)
                                   1252 ;  output:
                                   1253 ;     A      TK_INTGR|0
                                   1254 ;-------------------------------------------
                           000001  1255 	NOT_OP=1
      001B3D                       1256 and_factor:
      001B3D 4B 00            [ 1] 1257 	push #0 
      001B3F CD 17 9A         [ 4] 1258 0$:	call next_token  
      001B42 4D               [ 1] 1259 	tnz a 
      001B43 27 25            [ 1] 1260 	jreq 8$ 
      001B45 A1 87            [ 1] 1261 	cp a,#TK_NOT 
      001B47 26 04            [ 1] 1262 	jrne 1$ 
      001B49 03 01            [ 1] 1263 	cpl (NOT_OP,sp)
      001B4B 20 F2            [ 2] 1264 	jra 0$ 
      001B4D                       1265 1$:	
      001B4D A1 06            [ 1] 1266 	cp a,#TK_LPAREN 
      001B4F 26 0A            [ 1] 1267 	jrne 2$
      001B51 CD 1B BF         [ 4] 1268 	call condition
      001B54 A6 07            [ 1] 1269 	ld a,#TK_RPAREN 
      001B56 CD 19 50         [ 4] 1270 	call expect
      001B59 20 08            [ 2] 1271 	jra 3$
      001B5B                       1272 2$: _unget_token 
      001B5B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B60 CD 1A DE         [ 4] 1273 	call relation
      001B63                       1274 3$:
      001B63 0D 01            [ 1] 1275 	tnz (NOT_OP,sp)
      001B65 27 03            [ 1] 1276 	jreq 8$ 
      001B67 CD 01 E7         [ 4] 1277 	call cpl24
      001B6A                       1278 8$:
      001B6A                       1279 	_drop 1  
      001B6A 5B 01            [ 2]    1     addw sp,#1 
      001B6C 81               [ 4] 1280     ret 
                                   1281 
                                   1282 
                                   1283 ;--------------------------------------------
                                   1284 ;  AND operator as priority over OR||XOR 
                                   1285 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1286 ;          
                                   1287 ;  output:
                                   1288 ;     A     TK_INTGR|0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                   1289 ;    xtack   value 
                                   1290 ;--------------------------------------------
      001B6D                       1291 and_cond:
      001B6D CD 1B 3D         [ 4] 1292 	call and_factor
      001B70 4D               [ 1] 1293 	tnz a 
      001B71 27 4B            [ 1] 1294 	jreq 9$  
      001B73 CD 17 9A         [ 4] 1295 1$: call next_token 
      001B76 4D               [ 1] 1296 	tnz a 
      001B77 27 43            [ 1] 1297 	jreq 6$ 
      001B79 A1 88            [ 1] 1298 	cp a,#TK_AND 
      001B7B 27 07            [ 1] 1299 	jreq 3$
      001B7D                       1300 	_unget_token 
      001B7D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B82 20 38            [ 2] 1301 	jra 6$ 
      001B84 CD 1B 3D         [ 4] 1302 3$:	call and_factor  
      001B87 4D               [ 1] 1303 	tnz a 
      001B88 26 03            [ 1] 1304 	jrne 4$
      001B8A CC 16 30         [ 2] 1305 	jp syntax_error 
      001B8D                       1306 4$:	
      001B8D                       1307 	_xpop 
      001B8D 90 F6            [ 1]    1     ld a,(y)
      001B8F 93               [ 1]    2     ldw x,y 
      001B90 EE 01            [ 2]    3     ldw x,(1,x)
      001B92 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B96 C7 00 0C         [ 1] 1308 	ld acc24,a 
      001B99 CF 00 0D         [ 2] 1309 	ldw acc16,x
      001B9C                       1310 	_xpop 
      001B9C 90 F6            [ 1]    1     ld a,(y)
      001B9E 93               [ 1]    2     ldw x,y 
      001B9F EE 01            [ 2]    3     ldw x,(1,x)
      001BA1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BA5 C4 00 0C         [ 1] 1311 	and a,acc24 
      001BA8 02               [ 1] 1312 	rlwa x 
      001BA9 C4 00 0D         [ 1] 1313 	and a,acc16 
      001BAC 02               [ 1] 1314 	rlwa x 
      001BAD C4 00 0E         [ 1] 1315 	and a,acc8 
      001BB0 02               [ 1] 1316 	rlwa x
      001BB1                       1317 	_xpush
      001BB1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BB5 90 F7            [ 1]    2     ld (y),a 
      001BB7 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BBA 20 B7            [ 2] 1318 	jra 1$  
      001BBC A6 84            [ 1] 1319 6$: ld a,#TK_INTGR 
      001BBE 81               [ 4] 1320 9$:	ret 	 
                                   1321 
                                   1322 
                                   1323 ;--------------------------------------------
                                   1324 ; condition for IF and UNTIL 
                                   1325 ; operators: OR,XOR 
                                   1326 ; format:  and_cond [ OP and_cond ]* 
                                   1327 ; output:
                                   1328 ;    A        INTGR|0 
                                   1329 ;    xstack   value 
                                   1330 ;--------------------------------------------
                           000001  1331 	ATMP=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                           000002  1332 	OP=2
                           000002  1333 	VSIZE=2 
      001BBF                       1334 condition:
      001BBF                       1335 	_vars VSIZE 
      001BBF 52 02            [ 2]    1     sub sp,#VSIZE 
      001BC1 CD 1B 6D         [ 4] 1336 	call and_cond
      001BC4 4D               [ 1] 1337 	tnz a 
      001BC5 27 69            [ 1] 1338 	jreq 9$ 
      001BC7 CD 17 9A         [ 4] 1339 1$:	call next_token 
      001BCA A1 89            [ 1] 1340 	cp a,#TK_OR 
      001BCC 27 0B            [ 1] 1341 	jreq 2$
      001BCE A1 8A            [ 1] 1342 	cp a,#TK_XOR
      001BD0 27 07            [ 1] 1343 	jreq 2$ 
      001BD2                       1344 	_unget_token 
      001BD2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BD7 20 55            [ 2] 1345 	jra 8$ 
      001BD9 6B 02            [ 1] 1346 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BDB CD 1B 6D         [ 4] 1347 	call and_cond
      001BDE A1 84            [ 1] 1348 	cp a,#TK_INTGR 
      001BE0 27 03            [ 1] 1349 	jreq 3$
      001BE2 CC 16 30         [ 2] 1350 	jp syntax_error 
      001BE5                       1351 3$:	 
      001BE5                       1352 	_xpop  ; rigth arg 
      001BE5 90 F6            [ 1]    1     ld a,(y)
      001BE7 93               [ 1]    2     ldw x,y 
      001BE8 EE 01            [ 2]    3     ldw x,(1,x)
      001BEA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BEE C7 00 0C         [ 1] 1353 	ld acc24,a 
      001BF1 CF 00 0D         [ 2] 1354 	ldw acc16,x 
      001BF4                       1355 	_xpop  ; left arg  
      001BF4 90 F6            [ 1]    1     ld a,(y)
      001BF6 93               [ 1]    2     ldw x,y 
      001BF7 EE 01            [ 2]    3     ldw x,(1,x)
      001BF9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BFD 6B 01            [ 1] 1356 	ld (ATMP,sp),a 
      001BFF 7B 02            [ 1] 1357 	ld a,(OP,sp)
      001C01 A1 8A            [ 1] 1358 	cp a,#TK_XOR 
      001C03 27 10            [ 1] 1359 	jreq 5$ 
      001C05                       1360 4$: ; A:X OR acc24   
      001C05 7B 01            [ 1] 1361 	ld a,(ATMP,sp)
      001C07 CA 00 0C         [ 1] 1362 	or a,acc24 
      001C0A 02               [ 1] 1363 	rlwa x 
      001C0B CA 00 0D         [ 1] 1364 	or a,acc16 
      001C0E 02               [ 1] 1365 	rlwa x 
      001C0F CA 00 0E         [ 1] 1366 	or a,acc8 
      001C12 02               [ 1] 1367 	rlwa x 
      001C13 20 0E            [ 2] 1368 	jra 6$  
      001C15                       1369 5$: ; A:X XOR acc24 
      001C15 7B 01            [ 1] 1370 	ld a,(ATMP,sp)
      001C17 C8 00 0C         [ 1] 1371 	xor a,acc24 
      001C1A 02               [ 1] 1372 	rlwa x 
      001C1B C8 00 0D         [ 1] 1373 	xor a,acc16 
      001C1E 02               [ 1] 1374 	rlwa x 
      001C1F C8 00 0E         [ 1] 1375 	xor a,acc8 
      001C22 02               [ 1] 1376 	rlwa x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001C23                       1377 6$: _xpush
      001C23 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C27 90 F7            [ 1]    2     ld (y),a 
      001C29 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C2C 20 99            [ 2] 1378 	jra 1$ 
      001C2E A6 84            [ 1] 1379 8$:	ld a,#TK_INTGR 
      001C30                       1380 9$:	_drop VSIZE 
      001C30 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C32 81               [ 4] 1381 	ret 
                                   1382 
                                   1383 
                                   1384 ;--------------------------------------------
                                   1385 ; BASIC: HEX 
                                   1386 ; select hexadecimal base for integer print
                                   1387 ;---------------------------------------------
      001C33                       1388 hex_base:
      001C33 35 10 00 0A      [ 1] 1389 	mov base,#16 
      001C37 81               [ 4] 1390 	ret 
                                   1391 
                                   1392 ;--------------------------------------------
                                   1393 ; BASIC: DEC 
                                   1394 ; select decimal base for integer print
                                   1395 ;---------------------------------------------
      001C38                       1396 dec_base:
      001C38 35 0A 00 0A      [ 1] 1397 	mov base,#10
      001C3C 81               [ 4] 1398 	ret 
                                   1399 
                                   1400 ;------------------------
                                   1401 ; BASIC: FREE 
                                   1402 ; return free size in RAM 
                                   1403 ; output:
                                   1404 ;   A:x		size 
                                   1405 ;--------------------------
      001C3D                       1406 free:
      001C3D 4F               [ 1] 1407 	clr a 
      001C3E AE 16 90         [ 2] 1408 	ldw x,#tib 
      001C41 72 B0 00 32      [ 2] 1409 	subw x,dvar_end 
      001C45 81               [ 4] 1410 	ret 
                                   1411 
                                   1412 ;------------------------------
                                   1413 ; BASIC: SIZE 
                                   1414 ; command that print 
                                   1415 ; program start addres and size 
                                   1416 ;------------------------------
      001C46                       1417 cmd_size:
      001C46 3B 00 0A         [ 1] 1418 	push base 
      001C49 AE 1E 9F         [ 2] 1419 	ldw x,#PROG_ADDR 
      001C4C CD 09 32         [ 4] 1420 	call puts 
      001C4F CE 00 1B         [ 2] 1421 	ldw x,txtbgn     
      001C52 35 10 00 0A      [ 1] 1422 	mov base,#16 
      001C56 CD 17 E2         [ 4] 1423 	call prt_i16
      001C59 32 00 0A         [ 1] 1424 	pop base 
      001C5C AE 1E B1         [ 2] 1425 	ldw x,#PROG_SIZE 
      001C5F CD 09 32         [ 4] 1426 	call puts 
      001C62 CE 00 1D         [ 2] 1427 	ldw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C65 72 B0 00 1B      [ 2] 1428 	subw x,txtbgn 
      001C69 CD 17 E2         [ 4] 1429 	call prt_i16
      001C6C AE 1E C2         [ 2] 1430 	ldw x,#STR_BYTES 
      001C6F CD 09 32         [ 4] 1431 	call puts  
      001C72 81               [ 4] 1432 	ret 
                                   1433 
                                   1434 
                                   1435 ;------------------------
                                   1436 ; BASIC: UBOUND  
                                   1437 ; return array variable size 
                                   1438 ; and set 'array_size' variable 
                                   1439 ; output:
                                   1440 ;   A:X 	array_size
                                   1441 ;--------------------------
      001C73                       1442 ubound:
      001C73 CD 1C 3D         [ 4] 1443 	call free 
      001C76 A6 03            [ 1] 1444 	ld a,#CELL_SIZE 
      001C78 62               [ 2] 1445 	div x,a 
      001C79 CF 00 20         [ 2] 1446 	ldw array_size,x
      001C7C 4F               [ 1] 1447 	clr a 
      001C7D 81               [ 4] 1448 	ret 
                                   1449 
                                   1450 ;-----------------------------
                                   1451 ; BASIC: LET var=expr 
                                   1452 ; variable assignement 
                                   1453 ; output:
                                   1454 ;   A 		TK_NONE 
                                   1455 ;-----------------------------
      001C7E                       1456 let::
      001C7E CD 17 9A         [ 4] 1457 	call next_token 
      001C81 A1 85            [ 1] 1458 	cp a,#TK_VAR 
      001C83 27 0C            [ 1] 1459 	jreq let_var
      001C85 A1 05            [ 1] 1460 	cp a,#TK_ARRAY 
      001C87 27 03            [ 1] 1461 	jreq  let_array
      001C89 CC 16 30         [ 2] 1462 	jp syntax_error
      001C8C                       1463 let_array:
      001C8C CD 19 7E         [ 4] 1464 	call get_array_element
      001C8F 20 03            [ 2] 1465 	jra let_eval 
      001C91                       1466 let_var:
      001C91 CD 17 C2         [ 4] 1467 	call get_addr
      001C94                       1468 let_eval:
      001C94 CF 00 19         [ 2] 1469 	ldw ptr16,x  ; variable address 
      001C97 CD 17 9A         [ 4] 1470 	call next_token 
      001C9A A1 32            [ 1] 1471 	cp a,#TK_EQUAL
      001C9C 27 03            [ 1] 1472 	jreq 1$
      001C9E CC 16 30         [ 2] 1473 	jp syntax_error
      001CA1                       1474 1$:	
      001CA1 CD 1B BF         [ 4] 1475 	call condition   
      001CA4 A1 84            [ 1] 1476 	cp a,#TK_INTGR 
      001CA6 27 03            [ 1] 1477 	jreq 2$
      001CA8 CC 16 30         [ 2] 1478 	jp syntax_error
      001CAB                       1479 2$:	
      001CAB                       1480 	_xpop ; value 
      001CAB 90 F6            [ 1]    1     ld a,(y)
      001CAD 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001CAE EE 01            [ 2]    3     ldw x,(1,x)
      001CB0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CB4                       1481 3$:
      001CB4 72 C7 00 19      [ 4] 1482 	ld [ptr16],a
      001CB8 72 5C 00 1A      [ 1] 1483 	inc ptr8  
      001CBC 72 CF 00 19      [ 5] 1484 	ldw [ptr16],x 
      001CC0 81               [ 4] 1485 	ret 
                                   1486 
                                   1487 
                                   1488 ;--------------------------
                                   1489 ; return constant/dvar value 
                                   1490 ; from it's record address
                                   1491 ; input:
                                   1492 ;	X	*const record 
                                   1493 ; output:
                                   1494 ;   A:X   const  value
                                   1495 ;--------------------------
      001CC1                       1496 get_value: ; -- i 
      001CC1 F6               [ 1] 1497 	ld a,(x) ; record size 
      001CC2 A4 0F            [ 1] 1498 	and a,#NAME_MAX_LEN
      001CC4 A0 03            [ 1] 1499 	sub a,#CELL_SIZE ; * value 
      001CC6 88               [ 1] 1500 	push a 
      001CC7 4B 00            [ 1] 1501 	push #0 
      001CC9 72 FB 01         [ 2] 1502 	addw x,(1,sp)
      001CCC F6               [ 1] 1503 	ld a,(x)
      001CCD EE 01            [ 2] 1504 	ldw x,(1,x)
      001CCF                       1505 	_drop 2
      001CCF 5B 02            [ 2]    1     addw sp,#2 
      001CD1 81               [ 4] 1506 	ret 
                                   1507 
                                   1508 
                                   1509 ;--------------------------
                                   1510 ; list constants in EEPROM 
                                   1511 ; call when using LIST \C 
                                   1512 ;-------------------------
                           000001  1513 	COUNT=1
                           000003  1514 	YTEMP=3
                           000004  1515 	VSIZE=4 
      001CD2                       1516 list_const:
      001CD2 90 89            [ 2] 1517 	pushw y 
      001CD4                       1518 	_vars 4 
      001CD4 52 04            [ 2]    1     sub sp,#4 
      001CD6 5F               [ 1] 1519 	clrw x 
      001CD7 1F 01            [ 2] 1520 	ldw (COUNT,sp),x  
      001CD9 90 AE 40 00      [ 2] 1521 	ldw Y,#EEPROM_BASE 
      001CDD 90 C3 00 24      [ 2] 1522 1$:	cpw y,free_eeprom 
      001CE1 24 35            [ 1] 1523 	jruge 9$
      001CE3 17 03            [ 2] 1524     ldw (YTEMP,sp),y 
      001CE5 93               [ 1] 1525 	ldw x,y
      001CE6 5C               [ 1] 1526 	incw x 
      001CE7 CD 09 32         [ 4] 1527 	call puts  
      001CEA A6 3D            [ 1] 1528 	ld a,#'= 
      001CEC CD 08 D5         [ 4] 1529 	call putc 
      001CEF 1E 03            [ 2] 1530 	ldw x,(YTEMP,sp)
      001CF1 CD 1C C1         [ 4] 1531 	call get_value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001CF4 C7 00 0C         [ 1] 1532 	ld acc24,a 
      001CF7 CF 00 0D         [ 2] 1533 	ldw acc16,x 
      001CFA CD 17 F9         [ 4] 1534 	call prt_acc24
      001CFD A6 0D            [ 1] 1535 	ld a,#CR 
      001CFF CD 08 D5         [ 4] 1536 	call putc 
      001D02 1E 01            [ 2] 1537 	ldw x,(COUNT,sp)
      001D04 5C               [ 1] 1538 	incw x 
      001D05 1F 01            [ 2] 1539 	ldw (COUNT,sp),x 
      001D07 72 5F 00 0D      [ 1] 1540 	clr acc16 
      001D0B 16 03            [ 2] 1541 	ldw y,(YTEMP,sp)
      001D0D 90 F6            [ 1] 1542 	ld a,(y)
      001D0F C7 00 0E         [ 1] 1543 	ld acc8,a
      001D12 72 B9 00 0D      [ 2] 1544 	addw y,acc16 
      001D16 20 C5            [ 2] 1545 	jra 1$ 
      001D18                       1546 9$:	
      001D18 1E 01            [ 2] 1547 	ldw x,(COUNT,sp)
      001D1A CD 17 E2         [ 4] 1548 	call prt_i16 
      001D1D AE 1D 28         [ 2] 1549 	ldw x,#CONST_COUNT 
      001D20 CD 09 32         [ 4] 1550 	call puts 
      001D23                       1551 	_drop VSIZE 
      001D23 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D25 90 85            [ 2] 1552 	popw y 
      001D27 81               [ 4] 1553 	ret 
                                   1554 
      001D28 20 63 6F 6E 73 74 61  1555 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1556 
                                   1557 
                                   1558 ;--------------------------
                                   1559 ; BASIC: EEFREE 
                                   1560 ; eeprom_free 
                                   1561 ; search end of data  
                                   1562 ; in EEPROM 
                                   1563 ; input:
                                   1564 ;    none 
                                   1565 ; output:
                                   1566 ;    A:X     address free
                                   1567 ;-------------------------
      001D3E                       1568 func_eefree:
      001D3E AE 40 00         [ 2] 1569 	ldw x,#EEPROM_BASE 
      001D41 35 08 00 0E      [ 1] 1570 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D45 A3 47 F8         [ 2] 1571     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D48 24 17            [ 1] 1572 	jruge 8$ ; no free space 
      001D4A F6               [ 1] 1573 2$: ld a,(x)
      001D4B 26 0C            [ 1] 1574 	jrne 3$
      001D4D 5C               [ 1] 1575 	incw x 
      001D4E 72 5A 00 0E      [ 1] 1576 	dec acc8 
      001D52 26 F6            [ 1] 1577 	jrne 2$
      001D54 1D 00 08         [ 2] 1578 	subw x,#8 
      001D57 20 09            [ 2] 1579 	jra 9$  
      001D59 F6               [ 1] 1580 3$: ld a,(x)
      001D5A 5C               [ 1] 1581 	incw x
      001D5B 4D               [ 1] 1582 	tnz a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D5C 26 FB            [ 1] 1583 	jrne 3$
      001D5E 5A               [ 2] 1584 	decw x   
      001D5F 20 E0            [ 2] 1585 	jra 1$ 
      001D61 5F               [ 1] 1586 8$: clrw x ; no free space 
      001D62 4F               [ 1] 1587 9$: clr a 
      001D63 CF 00 24         [ 2] 1588 	ldw free_eeprom,x ; save in system variable 
      001D66 81               [ 4] 1589 	ret 
                                   1590 
                           000005  1591 REC_XTRA_BYTES=5 
                                   1592 ;--------------------------
                                   1593 ; search constant/dim_var name 
                                   1594 ; format of record  
                                   1595 ;   .byte record length 
                                   1596 ;         = strlen(name)+5 
                                   1597 ;   .asciz name (variable length)
                                   1598 ;   .int24 value (3 bytes )
                                   1599 ; a constant record use 7+ bytes
                                   1600 ; constants are saved in EEPROM  
                                   1601 ; input:
                                   1602 ;    A     record_len 
                                   1603 ;    X     *name
                                   1604 ; output:
                                   1605 ;    X     address|0
                                   1606 ; use:
                                   1607 ;   A,Y, acc16 
                                   1608 ;-------------------------
                           000001  1609 	NAMEPTR=1 ; target name pointer 
                           000003  1610 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1611 	RECLEN=5  ; record length of target
                           000007  1612 	LIMIT=7   ; search area limit 
                           000008  1613 	VSIZE=8  
      001D67                       1614 search_name:
      001D67 90 89            [ 2] 1615 	pushw y 
      001D69                       1616 	_vars VSIZE
      001D69 52 08            [ 2]    1     sub sp,#VSIZE 
      001D6B 72 5F 00 0D      [ 1] 1617 	clr acc16 
      001D6F 6B 05            [ 1] 1618 	ld (RECLEN,sp),a    
      001D71 1F 01            [ 2] 1619 	ldw (NAMEPTR,sp),x
      001D73 CE 00 32         [ 2] 1620 	ldw x,dvar_end 
      001D76 1F 07            [ 2] 1621 	ldw (LIMIT,sp),x 
      001D78 90 CE 00 30      [ 2] 1622 	ldw y,dvar_bgn
      001D7C 17 03            [ 2] 1623 1$:	ldw (WLKPTR,sp),y
      001D7E 93               [ 1] 1624 	ldw x,y 
      001D7F 13 07            [ 2] 1625 	cpw x, (LIMIT,sp) 
      001D81 24 20            [ 1] 1626 	jruge 7$ ; no match found 
      001D83 90 F6            [ 1] 1627 	ld a,(y)
      001D85 A4 0F            [ 1] 1628 	and a,#NAME_MAX_LEN
      001D87 11 05            [ 1] 1629 	cp a,(RECLEN,sp)
      001D89 26 09            [ 1] 1630 	jrne 2$ 
      001D8B 90 5C            [ 1] 1631 	incw y 
      001D8D 1E 01            [ 2] 1632 	ldw x,(NAMEPTR,sp)
      001D8F CD 13 5B         [ 4] 1633 	call strcmp
      001D92 26 13            [ 1] 1634 	jrne 8$ ; match found 
      001D94                       1635 2$: ; skip this one 	
      001D94 16 03            [ 2] 1636 	ldW Y,(WLKPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001D96 90 F6            [ 1] 1637 	ld a,(y)
      001D98 A4 0F            [ 1] 1638 	and a,#NAME_MAX_LEN 
      001D9A C7 00 0E         [ 1] 1639 	ld acc8,a 
      001D9D 72 B9 00 0D      [ 2] 1640 	addw y,acc16 
      001DA1 20 D9            [ 2] 1641 	jra 1$  
      001DA3                       1642 7$: ; no match found 
      001DA3 0F 03            [ 1] 1643 	clr (WLKPTR,sp)
      001DA5 0F 04            [ 1] 1644 	clr (WLKPTR+1,sp)
      001DA7                       1645 8$: ; match found 
      001DA7 1E 03            [ 2] 1646 	ldw x,(WLKPTR,sp) ; record address 
      001DA9                       1647 9$:	_DROP VSIZE
      001DA9 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DAB 90 85            [ 2] 1648 	popw y 
      001DAD 81               [ 4] 1649 	 ret 
                                   1650 
                                   1651 ;--------------------------------------------
                                   1652 ; BASIC: CONST name=value [, name=value]*
                                   1653 ; define constant(s) saved in EEPROM
                                   1654 ; share most of his code with cmd_dim 
                                   1655 ;--------------------------------------------
                           000001  1656 	VAR_NAME=1 
                           000003  1657 	REC_LEN=3
                           000005  1658 	RONLY=5
                           000005  1659 	VSIZE=5
      001DAE                       1660 cmd_const:
      001DAE 72 00 00 22 05   [ 2] 1661 	btjt flags,#FRUN,0$
      001DB3 A6 06            [ 1] 1662 	ld a,#ERR_RUN_ONLY
      001DB5 CC 16 32         [ 2] 1663 	jp tb_error 
      001DB8                       1664 0$: 
      001DB8                       1665 	_vars VSIZE 
      001DB8 52 05            [ 2]    1     sub sp,#VSIZE 
      001DBA A6 80            [ 1] 1666 	ld a,#128 
      001DBC 6B 05            [ 1] 1667 	ld (RONLY,sp),a 
      001DBE 0F 03            [ 1] 1668 	clr (REC_LEN,sp)
      001DC0 20 10            [ 2] 1669 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1670 
                                   1671 ;---------------------------------
                                   1672 ; BASIC: DIM var_name [var_name]* 
                                   1673 ; create named variables at end 
                                   1674 ; of BASIC program. 
                                   1675 ; These variables are initialized 
                                   1676 ; to 0. 
                                   1677 ; record format same ast CONST 
                                   1678 ; but r/w because stored in RAM 
                                   1679 ;---------------------------------
      001DC2                       1680 cmd_dim:
      001DC2 72 00 00 22 05   [ 2] 1681 	btjt flags,#FRUN,cmd_dim1
      001DC7 A6 06            [ 1] 1682 	ld a,#ERR_RUN_ONLY
      001DC9 CC 16 32         [ 2] 1683 	jp tb_error 
      001DCC                       1684 cmd_dim1:	
      001DCC                       1685 	_vars VSIZE
      001DCC 52 05            [ 2]    1     sub sp,#VSIZE 
      001DCE 0F 03            [ 1] 1686 	clr (REC_LEN,sp )
      001DD0 0F 05            [ 1] 1687 	clr (RONLY,sp)
      001DD2                       1688 cmd_dim2: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001DD2 CD 17 9A         [ 4] 1689 0$:	call next_token 
      001DD5 A1 03            [ 1] 1690 	cp a,#TK_LABEL  
      001DD7 27 03            [ 1] 1691 	jreq 1$ 
      001DD9 CC 16 30         [ 2] 1692 	jp syntax_error 
      001DDC 1F 01            [ 2] 1693 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001DDE CD 13 50         [ 4] 1694 	call strlen
      001DE1 AB 05            [ 1] 1695 	add a,#REC_XTRA_BYTES
      001DE3 6B 04            [ 1] 1696 	ld (REC_LEN+1,sp),a
      001DE5 CD 17 B3         [ 4] 1697 	call skip_string 
      001DE8 7B 04            [ 1] 1698 	ld a,(REC_LEN+1,sp)
      001DEA 1E 01            [ 2] 1699 	ldw x,(VAR_NAME,sp) 
      001DEC CD 1D 67         [ 4] 1700 	call search_name  
      001DEF 5D               [ 2] 1701 	tnzw x 
      001DF0 27 05            [ 1] 1702 	jreq 2$
      001DF2 A6 08            [ 1] 1703 	ld a,#ERR_DUPLICATE
      001DF4 CC 16 32         [ 2] 1704 	jp tb_error  
      001DF7 CE 00 32         [ 2] 1705 2$:	ldw x,dvar_end 
      001DFA 7B 04            [ 1] 1706 	ld a,(REC_LEN+1,sp)
      001DFC 1A 05            [ 1] 1707 	or a,(RONLY,sp)
      001DFE F7               [ 1] 1708 	ld (x),a 
      001DFF 5C               [ 1] 1709 	incw x 
      001E00 90 89            [ 2] 1710 	pushw y 
      001E02 16 03            [ 2] 1711 	ldw y,(VAR_NAME+2,sp)
      001E04 CD 13 6C         [ 4] 1712 	call strcpy
      001E07 90 85            [ 2] 1713 	popw y 
      001E09 5A               [ 2] 1714 	decw x
      001E0A 72 FB 03         [ 2] 1715 	addw x,(REC_LEN,sp)
      001E0D CF 00 32         [ 2] 1716 	ldw dvar_end,x 
      001E10 1D 00 03         [ 2] 1717 	subw x,#CELL_SIZE  
      001E13 7F               [ 1] 1718 	clr (x)
      001E14 6F 01            [ 1] 1719 	clr (1,x)  
      001E16 6F 02            [ 1] 1720 	clr (2,x)
      001E18 CD 17 9A         [ 4] 1721 4$: call next_token 
      001E1B A1 08            [ 1] 1722 	cp a,#TK_COMMA 
      001E1D 27 B3            [ 1] 1723 	jreq 0$ 
      001E1F A1 32            [ 1] 1724 	cp a,#TK_EQUAL 
      001E21 26 2A            [ 1] 1725 	jrne 8$
                                   1726 ; initialize variable 
      001E23 CD 1B BF         [ 4] 1727 	call condition 
      001E26 A1 84            [ 1] 1728 	cp a,#TK_INTGR
      001E28 27 03            [ 1] 1729 	jreq 5$
      001E2A CC 16 30         [ 2] 1730 	jp syntax_error
      001E2D CE 00 32         [ 2] 1731 5$: ldw x,dvar_end 
      001E30 1D 00 03         [ 2] 1732 	subw x,#CELL_SIZE 
      001E33 CF 00 19         [ 2] 1733 	ldw ptr16,x 
      001E36                       1734 	_xpop 
      001E36 90 F6            [ 1]    1     ld a,(y)
      001E38 93               [ 1]    2     ldw x,y 
      001E39 EE 01            [ 2]    3     ldw x,(1,x)
      001E3B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E3F 72 C7 00 19      [ 4] 1735 	ld [ptr16],a 
      001E43 72 5C 00 1A      [ 1] 1736 	inc ptr8 
      001E47 72 CF 00 19      [ 5] 1737 	ldw [ptr16],x 
      001E4B 20 CB            [ 2] 1738 	jra 4$ 
      001E4D                       1739 8$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E4D                       1740 	_unget_token 	
      001E4D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E52                       1741 	_drop VSIZE 
      001E52 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E54 CD 1C 73         [ 4] 1742 	call ubound 
      001E57 81               [ 4] 1743 	ret 
                                   1744 
                                   1745 
                                   1746 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1747 ; return program size 
                                   1748 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E58                       1749 prog_size:
      001E58 CE 00 1D         [ 2] 1750 	ldw x,txtend 
      001E5B 72 B0 00 1B      [ 2] 1751 	subw x,txtbgn 
      001E5F 81               [ 4] 1752 	ret 
                                   1753 
                                   1754 ;----------------------------
                                   1755 ; print program information 
                                   1756 ;---------------------------
      001E60                       1757 program_info: 
      001E60 AE 1E 9F         [ 2] 1758 	ldw x,#PROG_ADDR 
      001E63 CD 09 32         [ 4] 1759 	call puts 
      001E66 CE 00 1B         [ 2] 1760 	ldw x,txtbgn 
      001E69 35 10 00 0A      [ 1] 1761 	mov base,#16 
      001E6D CD 17 E2         [ 4] 1762 	call prt_i16
      001E70 35 0A 00 0A      [ 1] 1763 	mov base,#10  
      001E74 AE 1E B1         [ 2] 1764 	ldw x,#PROG_SIZE
      001E77 CD 09 32         [ 4] 1765 	call puts 
      001E7A CD 1E 58         [ 4] 1766 	call prog_size 
      001E7D CD 17 E2         [ 4] 1767 	call prt_i16 
      001E80 AE 1E C2         [ 2] 1768 	ldw x,#STR_BYTES 
      001E83 CD 09 32         [ 4] 1769 	call puts
      001E86 CE 00 1B         [ 2] 1770 	ldw x,txtbgn
      001E89 A3 36 04         [ 2] 1771 	cpw x,#app 
      001E8C 25 05            [ 1] 1772 	jrult 2$
      001E8E AE 1E C9         [ 2] 1773 	ldw x,#FLASH_MEM 
      001E91 20 03            [ 2] 1774 	jra 3$
      001E93 AE 1E DA         [ 2] 1775 2$: ldw x,#RAM_MEM 	 
      001E96 CD 09 32         [ 4] 1776 3$:	call puts 
      001E99 A6 0D            [ 1] 1777 	ld a,#CR 
      001E9B CD 08 D5         [ 4] 1778 	call putc
      001E9E 81               [ 4] 1779 	ret 
                                   1780 
      001E9F 70 72 6F 67 72 61 6D  1781 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EB1 2C 20 70 72 6F 67 72  1782 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EC2 20 62 79 74 65 73 00  1783 STR_BYTES: .asciz " bytes" 
      001EC9 20 69 6E 20 46 4C 41  1784 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001EDA 20 69 6E 20 52 41 4D  1785 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



             00
                                   1786 
                                   1787 
                                   1788 ;----------------------------
                                   1789 ; BASIC: LIST [[start][,end]]
                                   1790 ; list program lines 
                                   1791 ; form start to end 
                                   1792 ; if empty argument list then 
                                   1793 ; list all.
                                   1794 ;----------------------------
                           000001  1795 	FIRST=1
                           000003  1796 	LAST=3 
                           000005  1797 	LN_PTR=5
                           000006  1798 	VSIZE=6 
      001EE9                       1799 list:
      001EE9 72 01 00 22 05   [ 2] 1800 	btjf flags,#FRUN,0$
      001EEE A6 07            [ 1] 1801 	ld a,#ERR_CMD_ONLY
      001EF0 CC 16 32         [ 2] 1802 	jp tb_error
      001EF3                       1803 0$:	 
      001EF3 CD 17 9A         [ 4] 1804 	call next_token 
      001EF6 A1 04            [ 1] 1805 	cp a,#TK_CHAR 
      001EF8 26 10            [ 1] 1806 	jrne 2$
      001EFA CD 17 DC         [ 4] 1807 	call get_char 
      001EFD A4 DF            [ 1] 1808 	and a,#0xDF 
      001EFF A1 43            [ 1] 1809 	cp a,#'C 
      001F01 26 04            [ 1] 1810 	jrne 1$
      001F03 CD 1C D2         [ 4] 1811 	call list_const
      001F06 81               [ 4] 1812 	ret 
      001F07 CC 16 30         [ 2] 1813 1$: jp syntax_error 
      001F0A                       1814 2$:	_unget_token 
      001F0A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F0F CD 1E 58         [ 4] 1815 	call prog_size 
      001F12 22 01            [ 1] 1816 	jrugt 3$
      001F14 81               [ 4] 1817 	ret 
      001F15                       1818 3$: _vars VSIZE
      001F15 52 06            [ 2]    1     sub sp,#VSIZE 
      001F17 CE 00 1B         [ 2] 1819 	ldw x,txtbgn 
      001F1A 1F 05            [ 2] 1820 	ldw (LN_PTR,sp),x 
      001F1C FE               [ 2] 1821 	ldw x,(x) 
      001F1D 1F 01            [ 2] 1822 	ldw (FIRST,sp),x ; list from first line 
      001F1F AE 7F FF         [ 2] 1823 	ldw x,#MAX_LINENO ; biggest line number 
      001F22 1F 03            [ 2] 1824 	ldw (LAST,sp),x 
      001F24 CD 19 62         [ 4] 1825 	call arg_list
      001F27 4D               [ 1] 1826 	tnz a
      001F28 27 31            [ 1] 1827 	jreq list_loop 
      001F2A A1 02            [ 1] 1828 	cp a,#2 
      001F2C 27 07            [ 1] 1829 	jreq 4$
      001F2E A1 01            [ 1] 1830 	cp a,#1 
      001F30 27 06            [ 1] 1831 	jreq first_line 
      001F32 CC 16 30         [ 2] 1832 	jp syntax_error 
      001F35 85               [ 2] 1833 4$:	popw x 
      001F36 1F 05            [ 2] 1834 	ldw (LAST+2,sp),x 
      001F38                       1835 first_line:
      001F38 85               [ 2] 1836 	popw x
      001F39 1F 01            [ 2] 1837 	ldw (FIRST,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F3B                       1838 lines_skip:
      001F3B CE 00 1B         [ 2] 1839 	ldw x,txtbgn
      001F3E 1F 05            [ 2] 1840 2$:	ldw (LN_PTR,sp),x 
      001F40 C3 00 1D         [ 2] 1841 	cpw x,txtend 
      001F43 2A 38            [ 1] 1842 	jrpl list_exit 
      001F45 FE               [ 2] 1843 	ldw x,(x) ;line# 
      001F46 13 01            [ 2] 1844 	cpw x,(FIRST,sp)
      001F48 2A 11            [ 1] 1845 	jrpl list_loop 
      001F4A 1E 05            [ 2] 1846 	ldw x,(LN_PTR,sp) 
      001F4C E6 02            [ 1] 1847 	ld a,(2,x)
      001F4E C7 00 0E         [ 1] 1848 	ld acc8,a 
      001F51 72 5F 00 0D      [ 1] 1849 	clr acc16 
      001F55 72 BB 00 0D      [ 2] 1850 	addw x,acc16
      001F59 20 E3            [ 2] 1851 	jra 2$ 
                                   1852 ; print loop
      001F5B                       1853 list_loop:
      001F5B 1E 05            [ 2] 1854 	ldw x,(LN_PTR,sp)
      001F5D E6 02            [ 1] 1855 	ld a,(2,x) 
      001F5F CD 1F D2         [ 4] 1856 	call prt_basic_line
      001F62 1E 05            [ 2] 1857 	ldw x,(LN_PTR,sp)
      001F64 E6 02            [ 1] 1858 	ld a,(2,x)
      001F66 C7 00 0E         [ 1] 1859 	ld acc8,a 
      001F69 72 5F 00 0D      [ 1] 1860 	clr acc16 
      001F6D 72 BB 00 0D      [ 2] 1861 	addw x,acc16
      001F71 C3 00 1D         [ 2] 1862 	cpw x,txtend 
      001F74 2A 07            [ 1] 1863 	jrpl list_exit
      001F76 1F 05            [ 2] 1864 	ldw (LN_PTR,sp),x
      001F78 FE               [ 2] 1865 	ldw x,(x)
      001F79 13 03            [ 2] 1866 	cpw x,(LAST,sp)  
      001F7B 2F DE            [ 1] 1867 	jrslt list_loop
      001F7D                       1868 list_exit:
      001F7D 55 00 03 00 01   [ 1] 1869 	mov in,count 
      001F82 AE 16 E0         [ 2] 1870 	ldw x,#pad 
      001F85 CF 00 04         [ 2] 1871 	ldw basicptr,x 
      001F88                       1872 	_drop VSIZE 
      001F88 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F8A CD 1E 60         [ 4] 1873 	call program_info 
      001F8D 81               [ 4] 1874 	ret
                                   1875 
                                   1876 
                                   1877 ;--------------------------
                                   1878 ; BASIC: EDIT 
                                   1879 ;  copy program in FLASH 
                                   1880 ;  to RAM for edition 
                                   1881 ;-------------------------
      001F8E                       1882 edit:
      001F8E CD 27 DE         [ 4] 1883 	call qsign 
      001F91 27 07            [ 1] 1884 	jreq 1$ 
      001F93 AE 1F BB         [ 2] 1885 	ldw x,#NOT_SAVED 
      001F96 CD 09 32         [ 4] 1886 	call puts 
      001F99 81               [ 4] 1887 	ret 
      001F9A                       1888 1$: 
      001F9A 90 AE 36 00      [ 2] 1889 	ldw y,#app_sign ; source address 
      001F9E CE 36 02         [ 2] 1890     ldw x,app_size  
      001FA1 1C 00 04         [ 2] 1891 	addw x,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001FA4 CF 00 0D         [ 2] 1892 	ldw acc16,x  ; bytes to copy 
      001FA7 AE 00 8C         [ 2] 1893 	ldw x,#rsign ; destination address 
      001FAA CD 13 7C         [ 4] 1894 	call move  
      001FAD AE 00 90         [ 2] 1895 	ldw x,#free_ram 
      001FB0 CF 00 1B         [ 2] 1896 	ldw txtbgn,x 
      001FB3 72 BB 00 8E      [ 2] 1897 	addw x,rsize  
      001FB7 CF 00 1D         [ 2] 1898 	ldw txtend,x 
      001FBA 81               [ 4] 1899 	ret 
                                   1900 
      001FBB 4E 6F 20 61 70 70 6C  1901 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1902 
                                   1903 
                                   1904 ;--------------------------
                                   1905 ; decompile line from token list
                                   1906 ; and print it. 
                                   1907 ; input:
                                   1908 ;   A       stop at this position 
                                   1909 ;   X 		pointer at line
                                   1910 ; output:
                                   1911 ;   none 
                                   1912 ;--------------------------	
      001FD2                       1913 prt_basic_line:
      001FD2 90 89            [ 2] 1914 	pushw y 
      001FD4 C7 00 03         [ 1] 1915 	ld count,a 
      001FD7 E6 02            [ 1] 1916 	ld a,(2,x)
      001FD9 C1 00 03         [ 1] 1917 	cp a,count 
      001FDC 2A 03            [ 1] 1918 	jrpl 1$ 
      001FDE C7 00 03         [ 1] 1919 	ld count,a 
      001FE1 CF 00 04         [ 2] 1920 1$:	ldw basicptr,x 
      001FE4 90 AE 16 90      [ 2] 1921 	ldw y,#tib  
      001FE8 CD 11 6C         [ 4] 1922 	call decompile 
      001FEB CD 09 32         [ 4] 1923 	call puts 
      001FEE A6 0D            [ 1] 1924 	ld a,#CR 
      001FF0 CD 08 D5         [ 4] 1925 	call putc 
      001FF3 90 85            [ 2] 1926 	popw y 
      001FF5 81               [ 4] 1927 	ret 
                                   1928 
                                   1929 
                                   1930 ;---------------------------------
                                   1931 ; BASIC: PRINT|? arg_list 
                                   1932 ; print values from argument list
                                   1933 ;----------------------------------
                           000001  1934 	CCOMMA=1
                           000001  1935 	VSIZE=1
      001FF6                       1936 print:
      001FF6                       1937 	_vars VSIZE 
      001FF6 52 01            [ 2]    1     sub sp,#VSIZE 
      001FF8                       1938 reset_comma:
      001FF8 0F 01            [ 1] 1939 	clr (CCOMMA,sp)
      001FFA                       1940 prt_loop:
      001FFA CD 17 9A         [ 4] 1941 	call next_token
      001FFD A1 02            [ 1] 1942 	cp a,#CMD_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001FFF 25 08            [ 1] 1943 	jrult 0$
      002001 A1 0A            [ 1] 1944 	cp a,#TK_COLON 
      002003 27 04            [ 1] 1945 	jreq 0$
      002005 A1 80            [ 1] 1946 	cp a,#TK_CMD
      002007 26 07            [ 1] 1947 	jrne 10$
      002009                       1948 0$:
      002009                       1949 	_unget_token 
      002009 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00200E 20 63            [ 2] 1950 	jra 8$ 
      002010                       1951 10$:	
      002010 A1 02            [ 1] 1952 	cp a,#TK_QSTR
      002012 27 12            [ 1] 1953 	jreq 1$
      002014 A1 04            [ 1] 1954 	cp a,#TK_CHAR 
      002016 27 1B            [ 1] 1955 	jreq 2$ 
      002018 A1 82            [ 1] 1956 	cp a,#TK_CFUNC 
      00201A 27 1F            [ 1] 1957 	jreq 3$
      00201C A1 08            [ 1] 1958 	cp a,#TK_COMMA 
      00201E 27 2A            [ 1] 1959 	jreq 4$
      002020 A1 09            [ 1] 1960 	cp a,#TK_SHARP 
      002022 27 2A            [ 1] 1961 	jreq 5$
      002024 20 3D            [ 2] 1962 	jra 7$ 
      002026                       1963 1$:	; print string 
      002026 CD 09 32         [ 4] 1964 	call puts
      002029 5C               [ 1] 1965 	incw x
      00202A 72 B0 00 04      [ 2] 1966 	subw x,basicptr 
      00202E CF 00 00         [ 2] 1967 	ldw in.w,x  
      002031 20 C5            [ 2] 1968 	jra reset_comma
      002033                       1969 2$:	; print character 
      002033 CD 17 DC         [ 4] 1970 	call get_char 
      002036 CD 08 D5         [ 4] 1971 	call putc 
      002039 20 BD            [ 2] 1972 	jra reset_comma 
      00203B                       1973 3$: ; print character function value  	
      00203B                       1974 	_get_code_addr 
      00203B FE               [ 2]    1         ldw x,(x)
      00203C 72 5C 00 01      [ 1]    2         inc in 
      002040 72 5C 00 01      [ 1]    3         inc in 
      002044 FD               [ 4] 1975 	call (x)
      002045 CD 08 D5         [ 4] 1976 	call putc
      002048 20 AE            [ 2] 1977 	jra reset_comma 
      00204A                       1978 4$: ; set comma state 
      00204A 03 01            [ 1] 1979 	cpl (CCOMMA,sp)
      00204C 20 AC            [ 2] 1980 	jra prt_loop   
      00204E                       1981 5$: ; # character must be followed by an integer   
      00204E CD 17 9A         [ 4] 1982 	call next_token
      002051 A1 84            [ 1] 1983 	cp a,#TK_INTGR 
      002053 27 03            [ 1] 1984 	jreq 6$
      002055 CC 16 30         [ 2] 1985 	jp syntax_error 
      002058                       1986 6$: ; set tab width
      002058 CD 17 CC         [ 4] 1987 	call get_int24 
      00205B 9F               [ 1] 1988 	ld a,xl 
      00205C A4 0F            [ 1] 1989 	and a,#15 
      00205E C7 00 23         [ 1] 1990 	ld tab_width,a 
      002061 20 95            [ 2] 1991 	jra reset_comma 
      002063                       1992 7$:	
      002063                       1993 	_unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002063 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002068 CD 1B BF         [ 4] 1994 	call condition
      00206B 4D               [ 1] 1995 	tnz a 
      00206C 27 05            [ 1] 1996 	jreq 8$    
      00206E CD 18 07         [ 4] 1997     call print_top
      002071 20 85            [ 2] 1998 	jra reset_comma 
      002073                       1999 8$:
      002073 0D 01            [ 1] 2000 	tnz (CCOMMA,sp)
      002075 26 05            [ 1] 2001 	jrne 9$
      002077 A6 0D            [ 1] 2002 	ld a,#CR 
      002079 CD 08 D5         [ 4] 2003     call putc 
      00207C                       2004 9$:	_drop VSIZE 
      00207C 5B 01            [ 2]    1     addw sp,#VSIZE 
      00207E 81               [ 4] 2005 	ret 
                                   2006 
                                   2007 ;----------------------
                                   2008 ; 'save_context' and
                                   2009 ; 'rest_context' must be 
                                   2010 ; called at the same 
                                   2011 ; call stack depth 
                                   2012 ; i.e. SP must have the 
                                   2013 ; save value at  
                                   2014 ; entry point of both 
                                   2015 ; routine. 
                                   2016 ;---------------------
                           000004  2017 	CTXT_SIZE=4 ; size of saved data 
                                   2018 ;--------------------
                                   2019 ; save current BASIC
                                   2020 ; interpreter context 
                                   2021 ; on stack 
                                   2022 ;--------------------
      00207F                       2023 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00207F                       2024 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00207F                       2025 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      00207F                       2026 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      00207F                       2027 save_context:
      00207F CE 00 04         [ 2] 2028 	ldw x,basicptr 
      002082 1F 03            [ 2] 2029 	ldw (BPTR,sp),x
      002084 C6 00 01         [ 1] 2030 	ld a,in 
      002087 6B 05            [ 1] 2031 	ld (IN,sp),a
      002089 C6 00 03         [ 1] 2032 	ld a,count 
      00208C 6B 06            [ 1] 2033 	ld (CNT,sp),a  
      00208E 81               [ 4] 2034 	ret
                                   2035 
                                   2036 ;-----------------------
                                   2037 ; restore previously saved 
                                   2038 ; BASIC interpreter context 
                                   2039 ; from stack 
                                   2040 ;-------------------------
      00208F                       2041 rest_context:
      00208F 1E 03            [ 2] 2042 	ldw x,(BPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002091 CF 00 04         [ 2] 2043 	ldw basicptr,x 
      002094 7B 05            [ 1] 2044 	ld a,(IN,sp)
      002096 C7 00 01         [ 1] 2045 	ld in,a
      002099 7B 06            [ 1] 2046 	ld a,(CNT,sp)
      00209B C7 00 03         [ 1] 2047 	ld count,a  
      00209E 81               [ 4] 2048 	ret
                                   2049 
                                   2050 
                                   2051 
                                   2052 ;------------------------------------------
                                   2053 ; BASIC: INPUT [string]var[,[string]var]
                                   2054 ; input value in variables 
                                   2055 ; [string] optionally can be used as prompt 
                                   2056 ;-----------------------------------------
                           000001  2057 	CX_BPTR=1
                           000003  2058 	CX_IN=3
                           000004  2059 	CX_CNT=4
                           000005  2060 	SKIP=5
                           000005  2061 	VSIZE=5
      00209F                       2062 input_var:
      00209F 90 89            [ 2] 2063 	pushw y 
      0020A1                       2064 	_vars VSIZE 
      0020A1 52 05            [ 2]    1     sub sp,#VSIZE 
      0020A3                       2065 input_loop:
      0020A3 0F 05            [ 1] 2066 	clr (SKIP,sp)
      0020A5 CD 17 9A         [ 4] 2067 	call next_token 
      0020A8 A1 02            [ 1] 2068 	cp a,#TK_QSTR 
      0020AA 26 10            [ 1] 2069 	jrne 1$ 
      0020AC CD 09 32         [ 4] 2070 	call puts 
      0020AF 5C               [ 1] 2071 	incw x 
      0020B0 72 B0 00 04      [ 2] 2072 	subw x,basicptr 
      0020B4 CF 00 00         [ 2] 2073 	ldw in.w,x 
      0020B7 03 05            [ 1] 2074 	cpl (SKIP,sp)
      0020B9 CD 17 9A         [ 4] 2075 	call next_token 
      0020BC A1 85            [ 1] 2076 1$: cp a,#TK_VAR  
      0020BE 27 03            [ 1] 2077 	jreq 2$ 
      0020C0 CC 16 30         [ 2] 2078 	jp syntax_error
      0020C3 CD 17 C2         [ 4] 2079 2$:	call get_addr
      0020C6 CF 00 19         [ 2] 2080 	ldw ptr16,x 
      0020C9 0D 05            [ 1] 2081 	tnz (SKIP,sp)
      0020CB 26 06            [ 1] 2082 	jrne 21$ 
      0020CD CD 11 62         [ 4] 2083 	call var_name 
      0020D0 CD 08 D5         [ 4] 2084 	call putc   
      0020D3                       2085 21$:
      0020D3 A6 3A            [ 1] 2086 	ld a,#':
      0020D5 CD 08 D5         [ 4] 2087 	call putc 
      0020D8 CD 20 7F         [ 4] 2088 	call save_context 
      0020DB 72 5F 00 03      [ 1] 2089 	clr count  
      0020DF CD 0A 37         [ 4] 2090 	call readln 
      0020E2 AE 16 90         [ 2] 2091 	ldw x,#tib 
      0020E5 3B 00 03         [ 1] 2092 	push count
      0020E8 4B 00            [ 1] 2093 	push #0 
      0020EA 72 FB 01         [ 2] 2094 	addw x,(1,sp)
      0020ED 5C               [ 1] 2095 	incw x 
      0020EE                       2096 	_drop 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020EE 5B 02            [ 2]    1     addw sp,#2 
      0020F0 72 5F 00 01      [ 1] 2097 	clr in 
      0020F4 CD 0E AC         [ 4] 2098 	call get_token
      0020F7 A1 84            [ 1] 2099 	cp a,#TK_INTGR
      0020F9 27 14            [ 1] 2100 	jreq 3$ 
      0020FB A1 11            [ 1] 2101 	cp a,#TK_MINUS
      0020FD 26 07            [ 1] 2102 	jrne 22$
      0020FF CD 0E AC         [ 4] 2103 	call get_token 
      002102 A1 84            [ 1] 2104 	cp a,#TK_INTGR 
      002104 27 06            [ 1] 2105 	jreq 23$
      002106                       2106 22$:
      002106 CD 20 8F         [ 4] 2107 	call rest_context 
      002109 CC 16 30         [ 2] 2108 	jp syntax_error
      00210C                       2109 23$:
      00210C CD 02 0A         [ 4] 2110 	call neg_acc24	
      00210F                       2111 3$: 
      00210F C6 00 0C         [ 1] 2112 	ld a,acc24 
      002112 CE 00 0D         [ 2] 2113 	ldw x,acc16 
      002115 72 C7 00 19      [ 4] 2114 	ld [ptr16],a
      002119 72 5C 00 1A      [ 1] 2115 	inc ptr8  
      00211D 72 CF 00 19      [ 5] 2116 	ldw [ptr16],x 
      002121 CD 20 8F         [ 4] 2117 	call rest_context
      002124 CD 17 9A         [ 4] 2118 	call next_token 
      002127 A1 08            [ 1] 2119 	cp a,#TK_COMMA
      002129 26 03            [ 1] 2120 	jrne 4$ 
      00212B CC 20 A3         [ 2] 2121 	jp input_loop
      00212E                       2122 4$:
      00212E A1 00            [ 1] 2123 	cp a,#TK_NONE 
      002130 27 07            [ 1] 2124 	jreq input_exit  
      002132 A1 0A            [ 1] 2125 	cp a,#TK_COLON 
      002134 27 03            [ 1] 2126     jreq input_exit 
      002136 CC 16 30         [ 2] 2127 	jp syntax_error 
      002139                       2128 input_exit:
      002139                       2129 	_drop VSIZE 
      002139 5B 05            [ 2]    1     addw sp,#VSIZE 
      00213B 90 85            [ 2] 2130 	popw y 
      00213D 81               [ 4] 2131 	ret 
                                   2132 
                                   2133 
                                   2134 ;---------------------
                                   2135 ; BASIC: REM | ' 
                                   2136 ; skip comment to end of line 
                                   2137 ;---------------------- 
      00213E                       2138 remark::
      00213E 55 00 03 00 01   [ 1] 2139 	mov in,count 
      002143 81               [ 4] 2140  	ret 
                                   2141 
                                   2142 
                                   2143 ;---------------------
                                   2144 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2145 ; read in loop 'addr'  
                                   2146 ; apply & 'mask' to value 
                                   2147 ; loop while result==0.  
                                   2148 ; 'xor_mask' is used to 
                                   2149 ; invert the wait logic.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   2150 ; i.e. loop while not 0.
                                   2151 ;---------------------
                           000001  2152 	XMASK=1 
                           000002  2153 	MASK=2
                           000003  2154 	ADDR=3
                           000004  2155 	VSIZE=4
      002144                       2156 wait: 
      002144                       2157 	_vars VSIZE
      002144 52 04            [ 2]    1     sub sp,#VSIZE 
      002146 0F 01            [ 1] 2158 	clr (XMASK,sp) 
      002148 CD 19 62         [ 4] 2159 	call arg_list 
      00214B A1 02            [ 1] 2160 	cp a,#2
      00214D 24 03            [ 1] 2161 	jruge 0$
      00214F CC 16 30         [ 2] 2162 	jp syntax_error 
      002152 A1 03            [ 1] 2163 0$:	cp a,#3
      002154 25 0C            [ 1] 2164 	jrult 1$
      002156                       2165 	_xpop  ; xor mask 
      002156 90 F6            [ 1]    1     ld a,(y)
      002158 93               [ 1]    2     ldw x,y 
      002159 EE 01            [ 2]    3     ldw x,(1,x)
      00215B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00215F 9F               [ 1] 2166 	ld a,xl 
      002160 6B 01            [ 1] 2167 	ld (XMASK,sp),a 
      002162                       2168 1$: _xpop ; mask
      002162 90 F6            [ 1]    1     ld a,(y)
      002164 93               [ 1]    2     ldw x,y 
      002165 EE 01            [ 2]    3     ldw x,(1,x)
      002167 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00216B 9F               [ 1] 2169     ld a,xl  
      00216C 6B 02            [ 1] 2170 	ld (MASK,sp),a 
      00216E                       2171 	_xpop ; address 
      00216E 90 F6            [ 1]    1     ld a,(y)
      002170 93               [ 1]    2     ldw x,y 
      002171 EE 01            [ 2]    3     ldw x,(1,x)
      002173 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002177 F6               [ 1] 2172 2$:	ld a,(x)
      002178 14 02            [ 1] 2173 	and a,(MASK,sp)
      00217A 18 01            [ 1] 2174 	xor a,(XMASK,sp)
      00217C 27 F9            [ 1] 2175 	jreq 2$ 
      00217E                       2176 	_drop VSIZE 
      00217E 5B 04            [ 2]    1     addw sp,#VSIZE 
      002180 81               [ 4] 2177 	ret 
                                   2178 
                                   2179 ;---------------------
                                   2180 ; BASIC: BSET addr,mask
                                   2181 ; set bits at 'addr' corresponding 
                                   2182 ; to those of 'mask' that are at 1.
                                   2183 ; arguments:
                                   2184 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2185 ;   mask        mask|addr
                                   2186 ; output:
                                   2187 ;	none 
                                   2188 ;--------------------------
      002181                       2189 bit_set:
      002181 CD 19 62         [ 4] 2190 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002184 A1 02            [ 1] 2191 	cp a,#2	 
      002186 27 03            [ 1] 2192 	jreq 1$ 
      002188 CC 16 30         [ 2] 2193 	jp syntax_error
      00218B                       2194 1$: 
      00218B                       2195 	_xpop ; mask 
      00218B 90 F6            [ 1]    1     ld a,(y)
      00218D 93               [ 1]    2     ldw x,y 
      00218E EE 01            [ 2]    3     ldw x,(1,x)
      002190 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002194 9F               [ 1] 2196 	ld a,xl
      002195 88               [ 1] 2197 	push a  
      002196                       2198 	_xpop ; addr  
      002196 90 F6            [ 1]    1     ld a,(y)
      002198 93               [ 1]    2     ldw x,y 
      002199 EE 01            [ 2]    3     ldw x,(1,x)
      00219B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00219F 84               [ 1] 2199 	pop a 
      0021A0 FA               [ 1] 2200 	or a,(x)
      0021A1 F7               [ 1] 2201 	ld (x),a
      0021A2 81               [ 4] 2202 	ret 
                                   2203 
                                   2204 ;---------------------
                                   2205 ; BASIC: BRES addr,mask
                                   2206 ; reset bits at 'addr' corresponding 
                                   2207 ; to those of 'mask' that are at 1.
                                   2208 ; arguments:
                                   2209 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2210 ;   mask	    ~mask&*addr  
                                   2211 ; output:
                                   2212 ;	none 
                                   2213 ;--------------------------
      0021A3                       2214 bit_reset:
      0021A3 CD 19 62         [ 4] 2215 	call arg_list 
      0021A6 A1 02            [ 1] 2216 	cp a,#2  
      0021A8 27 03            [ 1] 2217 	jreq 1$ 
      0021AA CC 16 30         [ 2] 2218 	jp syntax_error
      0021AD                       2219 1$: 
      0021AD                       2220 	_xpop ; mask 
      0021AD 90 F6            [ 1]    1     ld a,(y)
      0021AF 93               [ 1]    2     ldw x,y 
      0021B0 EE 01            [ 2]    3     ldw x,(1,x)
      0021B2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B6 9F               [ 1] 2221 	ld a,xl 
      0021B7 43               [ 1] 2222 	cpl a
      0021B8 88               [ 1] 2223 	push a  
      0021B9                       2224 	_xpop ; addr  
      0021B9 90 F6            [ 1]    1     ld a,(y)
      0021BB 93               [ 1]    2     ldw x,y 
      0021BC EE 01            [ 2]    3     ldw x,(1,x)
      0021BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C2 84               [ 1] 2225 	pop a 
      0021C3 F4               [ 1] 2226 	and a,(x)
      0021C4 F7               [ 1] 2227 	ld (x),a 
      0021C5 81               [ 4] 2228 	ret 
                                   2229 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2230 ;---------------------
                                   2231 ; BASIC: BTOGL addr,mask
                                   2232 ; toggle bits at 'addr' corresponding 
                                   2233 ; to those of 'mask' that are at 1.
                                   2234 ; arguments:
                                   2235 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2236 ;   mask	    mask^*addr  
                                   2237 ; output:
                                   2238 ;	none 
                                   2239 ;--------------------------
      0021C6                       2240 bit_toggle:
      0021C6 CD 19 62         [ 4] 2241 	call arg_list 
      0021C9 A1 02            [ 1] 2242 	cp a,#2 
      0021CB 27 03            [ 1] 2243 	jreq 1$ 
      0021CD CC 16 30         [ 2] 2244 	jp syntax_error
      0021D0                       2245 1$: _xpop ; mask 
      0021D0 90 F6            [ 1]    1     ld a,(y)
      0021D2 93               [ 1]    2     ldw x,y 
      0021D3 EE 01            [ 2]    3     ldw x,(1,x)
      0021D5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D9 9F               [ 1] 2246 	ld a,xl
      0021DA 88               [ 1] 2247 	push a 
      0021DB                       2248 	_xpop  ; addr  
      0021DB 90 F6            [ 1]    1     ld a,(y)
      0021DD 93               [ 1]    2     ldw x,y 
      0021DE EE 01            [ 2]    3     ldw x,(1,x)
      0021E0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E4 84               [ 1] 2249 	pop a 
      0021E5 F8               [ 1] 2250 	xor a,(x)
      0021E6 F7               [ 1] 2251 	ld (x),a 
      0021E7 81               [ 4] 2252 	ret 
                                   2253 
                                   2254 
                                   2255 ;---------------------
                                   2256 ; BASIC: BTEST(addr,bit)
                                   2257 ; return bit value at 'addr' 
                                   2258 ; bit is in range {0..7}.
                                   2259 ; arguments:
                                   2260 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2261 ;   bit 	    bit position {0..7}  
                                   2262 ; output:
                                   2263 ;	A:X       bit value  
                                   2264 ;--------------------------
      0021E8                       2265 bit_test:
      0021E8 CD 19 5D         [ 4] 2266 	call func_args 
      0021EB A1 02            [ 1] 2267 	cp a,#2
      0021ED 27 03            [ 1] 2268 	jreq 0$
      0021EF CC 16 30         [ 2] 2269 	jp syntax_error
      0021F2                       2270 0$:	
      0021F2                       2271 	_xpop 
      0021F2 90 F6            [ 1]    1     ld a,(y)
      0021F4 93               [ 1]    2     ldw x,y 
      0021F5 EE 01            [ 2]    3     ldw x,(1,x)
      0021F7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021FB 9F               [ 1] 2272 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0021FC A4 07            [ 1] 2273 	and a,#7
      0021FE 88               [ 1] 2274 	push a   
      0021FF A6 01            [ 1] 2275 	ld a,#1 
      002201 0D 01            [ 1] 2276 1$: tnz (1,sp)
      002203 27 05            [ 1] 2277 	jreq 2$
      002205 48               [ 1] 2278 	sll a 
      002206 0A 01            [ 1] 2279 	dec (1,sp)
      002208 20 F7            [ 2] 2280 	jra 1$
      00220A 6B 01            [ 1] 2281 2$: ld (1,sp),a  
      00220C                       2282 	_xpop ; address  
      00220C 90 F6            [ 1]    1     ld a,(y)
      00220E 93               [ 1]    2     ldw x,y 
      00220F EE 01            [ 2]    3     ldw x,(1,x)
      002211 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002215 84               [ 1] 2283 	pop a 
      002216 F4               [ 1] 2284 	and a,(x)
      002217 27 02            [ 1] 2285 	jreq 3$
      002219 A6 01            [ 1] 2286 	ld a,#1 
      00221B 5F               [ 1] 2287 3$:	clrw x 
      00221C 97               [ 1] 2288 	ld xl,a
      00221D 4F               [ 1] 2289 	clr a  
      00221E 81               [ 4] 2290 	ret
                                   2291 
                                   2292 ;--------------------
                                   2293 ; BASIC: POKE addr,byte
                                   2294 ; put a byte at addr 
                                   2295 ;--------------------
      00221F                       2296 poke:
      00221F CD 19 62         [ 4] 2297 	call arg_list 
      002222 A1 02            [ 1] 2298 	cp a,#2
      002224 27 03            [ 1] 2299 	jreq 1$
      002226 CC 16 30         [ 2] 2300 	jp syntax_error
      002229                       2301 1$:	
      002229                       2302 	_xpop ; byte   
      002229 90 F6            [ 1]    1     ld a,(y)
      00222B 93               [ 1]    2     ldw x,y 
      00222C EE 01            [ 2]    3     ldw x,(1,x)
      00222E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002232 9F               [ 1] 2303     ld a,xl 
      002233 88               [ 1] 2304 	push a 
      002234                       2305 	_xpop ; address 
      002234 90 F6            [ 1]    1     ld a,(y)
      002236 93               [ 1]    2     ldw x,y 
      002237 EE 01            [ 2]    3     ldw x,(1,x)
      002239 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00223D 84               [ 1] 2306 	pop a 
      00223E F7               [ 1] 2307 	ld (x),a 
      00223F 81               [ 4] 2308 	ret 
                                   2309 
                                   2310 ;-----------------------
                                   2311 ; BASIC: PEEK(addr)
                                   2312 ; get the byte at addr 
                                   2313 ; input:
                                   2314 ;	none 
                                   2315 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2316 ;	X 		value 
                                   2317 ;-----------------------
      002240                       2318 peek:
      002240 CD 19 5D         [ 4] 2319 	call func_args
      002243 A1 01            [ 1] 2320 	cp a,#1 
      002245 27 03            [ 1] 2321 	jreq 1$
      002247 CC 16 30         [ 2] 2322 	jp syntax_error
      00224A                       2323 1$: _xpop ; address  
      00224A 90 F6            [ 1]    1     ld a,(y)
      00224C 93               [ 1]    2     ldw x,y 
      00224D EE 01            [ 2]    3     ldw x,(1,x)
      00224F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002253 C7 00 18         [ 1] 2324 	ld farptr,a 
      002256 CF 00 19         [ 2] 2325 	ldw ptr16,x 
      002259 92 BC 00 18      [ 5] 2326 	ldf a,[farptr]
      00225D 5F               [ 1] 2327 	clrw x 
      00225E 97               [ 1] 2328 	ld xl,a 
      00225F 4F               [ 1] 2329 	clr a 
      002260 81               [ 4] 2330 	ret 
                                   2331 
                                   2332 ;---------------------------
                                   2333 ; BASIC IF expr : instructions
                                   2334 ; evaluate expr and if true 
                                   2335 ; execute instructions on same line. 
                                   2336 ;----------------------------
      002261                       2337 if: 
      002261 CD 1B BF         [ 4] 2338 	call condition  
      002264                       2339 	_xpop 
      002264 90 F6            [ 1]    1     ld a,(y)
      002266 93               [ 1]    2     ldw x,y 
      002267 EE 01            [ 2]    3     ldw x,(1,x)
      002269 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00226D 4D               [ 1] 2340 	tnz  a  
      00226E 26 0D            [ 1] 2341 	jrne 9$
      002270 5D               [ 2] 2342 	tnzw x 
      002271 26 0A            [ 1] 2343 	jrne 9$  
                                   2344 ;skip to next line
      002273 55 00 03 00 01   [ 1] 2345 	mov in,count
      002278                       2346 	_drop 2 
      002278 5B 02            [ 2]    1     addw sp,#2 
      00227A CC 16 E3         [ 2] 2347 	jp next_line
      00227D 81               [ 4] 2348 9$:	ret 
                                   2349 
                                   2350 ;------------------------
                                   2351 ; BASIC: FOR var=expr 
                                   2352 ; set variable to expression 
                                   2353 ; leave variable address 
                                   2354 ; on stack and set
                                   2355 ; FLOOP bit in 'flags'
                                   2356 ;-----------------
                           000001  2357 	RETL1=1 ; return address  
                           000003  2358 	FSTEP=3  ; variable increment int24
                           000006  2359 	LIMIT=6 ; loop limit, int24  
                           000009  2360 	CVAR=9   ; control variable 
                           00000B  2361 	INW=11   ;  in.w saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                           00000D  2362 	BPTR=13 ; baseptr saved
                           00000D  2363 	VSIZE=13  
      00227E                       2364 for: ; { -- var_addr }
      00227E 85               [ 2] 2365 	popw x ; call return address 
      00227F                       2366 	_vars VSIZE 
      00227F 52 0D            [ 2]    1     sub sp,#VSIZE 
      002281 89               [ 2] 2367 	pushw x  ; RETL1 
      002282 A6 85            [ 1] 2368 	ld a,#TK_VAR 
      002284 CD 19 50         [ 4] 2369 	call expect
      002287 CD 17 C2         [ 4] 2370 	call get_addr
      00228A 1F 09            [ 2] 2371 	ldw (CVAR,sp),x  ; control variable 
      00228C CD 1C 94         [ 4] 2372 	call let_eval 
      00228F 72 14 00 22      [ 1] 2373 	bset flags,#FLOOP 
      002293 CD 17 9A         [ 4] 2374 	call next_token 
      002296 A1 80            [ 1] 2375 	cp a,#TK_CMD 
      002298 27 03            [ 1] 2376 	jreq 1$
      00229A CC 16 30         [ 2] 2377 	jp syntax_error
      00229D                       2378 1$:  
      00229D                       2379 	_get_code_addr
      00229D FE               [ 2]    1         ldw x,(x)
      00229E 72 5C 00 01      [ 1]    2         inc in 
      0022A2 72 5C 00 01      [ 1]    3         inc in 
      0022A6 A3 22 AE         [ 2] 2380 	cpw x,#to   
      0022A9 27 03            [ 1] 2381 	jreq to
      0022AB CC 16 30         [ 2] 2382 	jp syntax_error 
                                   2383 
                                   2384 ;-----------------------------------
                                   2385 ; BASIC: TO expr 
                                   2386 ; second part of FOR loop initilization
                                   2387 ; leave limit on stack and set 
                                   2388 ; FTO bit in 'flags'
                                   2389 ;-----------------------------------
      0022AE                       2390 to: ; { var_addr -- var_addr limit step }
      0022AE 72 04 00 22 03   [ 2] 2391 	btjt flags,#FLOOP,1$
      0022B3 CC 16 30         [ 2] 2392 	jp syntax_error
      0022B6 CD 1A A6         [ 4] 2393 1$: call expression   
      0022B9 A1 84            [ 1] 2394 	cp a,#TK_INTGR 
      0022BB 27 03            [ 1] 2395 	jreq 2$ 
      0022BD CC 16 30         [ 2] 2396 	jp syntax_error
      0022C0                       2397 2$: _xpop
      0022C0 90 F6            [ 1]    1     ld a,(y)
      0022C2 93               [ 1]    2     ldw x,y 
      0022C3 EE 01            [ 2]    3     ldw x,(1,x)
      0022C5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022C9 6B 06            [ 1] 2398 	ld (LIMIT,sp),a 
      0022CB 1F 07            [ 2] 2399 	ldw (LIMIT+1,sp),x
      0022CD CD 17 9A         [ 4] 2400 	call next_token
      0022D0 A1 00            [ 1] 2401 	cp a,#TK_NONE  
      0022D2 27 17            [ 1] 2402 	jreq 4$ 
      0022D4 A1 80            [ 1] 2403 	cp a,#TK_CMD
      0022D6 26 0E            [ 1] 2404 	jrne 3$
      0022D8                       2405 	_get_code_addr
      0022D8 FE               [ 2]    1         ldw x,(x)
      0022D9 72 5C 00 01      [ 1]    2         inc in 
      0022DD 72 5C 00 01      [ 1]    3         inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0022E1 A3 22 F4         [ 2] 2406 	cpw x,#step 
      0022E4 27 0E            [ 1] 2407 	jreq step
      0022E6                       2408 3$:	
      0022E6                       2409 	_unget_token   	 
      0022E6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022EB                       2410 4$:	
      0022EB 0F 03            [ 1] 2411 	clr (FSTEP,sp) 
      0022ED AE 00 01         [ 2] 2412 	ldw x,#1   ; default step  
      0022F0 1F 04            [ 2] 2413 	ldw (FSTEP+1,sp),x 
      0022F2 20 2F            [ 2] 2414 	jra store_loop_addr 
                                   2415 
                                   2416 
                                   2417 ;----------------------------------
                                   2418 ; BASIC: STEP expr 
                                   2419 ; optional third par of FOR loop
                                   2420 ; initialization. 	
                                   2421 ;------------------------------------
      0022F4                       2422 step: ; {var limit -- var limit step}
      0022F4 72 04 00 22 03   [ 2] 2423 	btjt flags,#FLOOP,1$
      0022F9 CC 16 30         [ 2] 2424 	jp syntax_error
      0022FC CD 1A A6         [ 4] 2425 1$: call expression 
      0022FF A1 84            [ 1] 2426 	cp a,#TK_INTGR
      002301 27 03            [ 1] 2427 	jreq 2$
      002303 CC 16 30         [ 2] 2428 	jp syntax_error
      002306                       2429 2$:	
      002306                       2430 	_xpop 
      002306 90 F6            [ 1]    1     ld a,(y)
      002308 93               [ 1]    2     ldw x,y 
      002309 EE 01            [ 2]    3     ldw x,(1,x)
      00230B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00230F 6B 03            [ 1] 2431 	ld (FSTEP,sp),a 
      002311 1F 04            [ 2] 2432 	ldw (FSTEP+1,sp),x ; step
                                   2433 ; if step < 0 decrement LIMIT 
      002313 4D               [ 1] 2434 	tnz a
      002314 2A 0D            [ 1] 2435 	jrpl store_loop_addr 
      002316 7B 06            [ 1] 2436 	ld a,(LIMIT,sp)
      002318 1E 07            [ 2] 2437 	ldw x,(LIMIT+1,sp)
      00231A 1D 00 01         [ 2] 2438 	subw x,#1 
      00231D A2 00            [ 1] 2439 	sbc a,#0 
      00231F 6B 06            [ 1] 2440 	ld (LIMIT,sp),a 
      002321 1F 07            [ 2] 2441 	ldw (LIMIT+1,sp),x 
                                   2442 ; leave loop back entry point on cstack 
                                   2443 ; cstack is 1 call deep from interpreter
      002323                       2444 store_loop_addr:
      002323 CE 00 04         [ 2] 2445 	ldw x,basicptr
      002326 1F 0D            [ 2] 2446 	ldw (BPTR,sp),x 
      002328 CE 00 00         [ 2] 2447 	ldw x,in.w 
      00232B 1F 0B            [ 2] 2448 	ldw (INW,sp),x   
      00232D 72 15 00 22      [ 1] 2449 	bres flags,#FLOOP 
      002331 72 5C 00 1F      [ 1] 2450 	inc loop_depth  
      002335 81               [ 4] 2451 	ret 
                                   2452 
                                   2453 ;--------------------------------
                                   2454 ; BASIC: NEXT var 
                                   2455 ; FOR loop control 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   2456 ; increment variable with step 
                                   2457 ; and compare with limit 
                                   2458 ; loop if threshold not crossed.
                                   2459 ; else stack. 
                                   2460 ; and decrement 'loop_depth' 
                                   2461 ;--------------------------------
      002336                       2462 next: ; {var limit step retl1 -- [var limit step ] }
      002336 72 5D 00 1F      [ 1] 2463 	tnz loop_depth 
      00233A 26 03            [ 1] 2464 	jrne 1$ 
      00233C CC 16 30         [ 2] 2465 	jp syntax_error 
      00233F                       2466 1$: 
      00233F A6 85            [ 1] 2467 	ld a,#TK_VAR 
      002341 CD 19 50         [ 4] 2468 	call expect
      002344 CD 17 C2         [ 4] 2469 	call get_addr 
                                   2470 ; check for good variable after NEXT 	 
      002347 13 09            [ 2] 2471 	cpw x,(CVAR,sp)
      002349 27 03            [ 1] 2472 	jreq 2$  
      00234B CC 16 30         [ 2] 2473 	jp syntax_error ; not the good one 
      00234E                       2474 2$: 
      00234E CF 00 19         [ 2] 2475 	ldw ptr16,x 
                                   2476 	; increment variable 
      002351 F6               [ 1] 2477 	ld a,(x)
      002352 EE 01            [ 2] 2478 	ldw x,(1,x)  ; get var value 
      002354 72 FB 04         [ 2] 2479 	addw x,(FSTEP+1,sp) ; var+step 
      002357 19 03            [ 1] 2480 	adc a,(FSTEP,sp)
      002359 72 C7 00 19      [ 4] 2481 	ld [ptr16],a
      00235D 72 5C 00 1A      [ 1] 2482 	inc ptr8  
      002361 72 CF 00 19      [ 5] 2483 	ldw [ptr16],x 
      002365 C7 00 0C         [ 1] 2484 	ld acc24,a 
      002368 CF 00 0D         [ 2] 2485 	ldw acc16,x 
      00236B 7B 06            [ 1] 2486 	ld a,(LIMIT,sp)
      00236D 1E 07            [ 2] 2487 	ldw x,(LIMIT+1,sp)
      00236F 72 B0 00 0D      [ 2] 2488 	subw x,acc16 
      002373 C2 00 0C         [ 1] 2489 	sbc a,acc24
      002376 18 03            [ 1] 2490 	xor a,(FSTEP,sp)
      002378 A8 80            [ 1] 2491 	xor a,#0x80
      00237A 2B 12            [ 1] 2492 	jrmi loop_back  
      00237C 20 25            [ 2] 2493 	jra loop_done   
                                   2494 ; check sign of STEP  
      00237E 7B 03            [ 1] 2495 	ld a,(FSTEP,sp)
      002380 2A 07            [ 1] 2496 	jrpl 4$
                                   2497 ;negative step
      002382 C6 00 0E         [ 1] 2498     ld a,acc8 
      002385 2F 07            [ 1] 2499 	jrslt loop_back   
      002387 20 1A            [ 2] 2500 	jra loop_done  
      002389                       2501 4$: ; positive step
      002389 72 0E 00 0E 15   [ 2] 2502 	btjt acc8,#7,loop_done 
      00238E                       2503 loop_back:
      00238E 1E 0D            [ 2] 2504 	ldw x,(BPTR,sp)
      002390 CF 00 04         [ 2] 2505 	ldw basicptr,x 
      002393 72 01 00 22 05   [ 2] 2506 	btjf flags,#FRUN,1$ 
      002398 E6 02            [ 1] 2507 	ld a,(2,x)
      00239A C7 00 03         [ 1] 2508 	ld count,a
      00239D 1E 0B            [ 2] 2509 1$:	ldw x,(INW,sp)
      00239F CF 00 00         [ 2] 2510 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      0023A2 81               [ 4] 2511 	ret 
      0023A3                       2512 loop_done:
                                   2513 	; remove loop data from stack  
      0023A3 85               [ 2] 2514 	popw x
      0023A4                       2515 	_drop VSIZE 
      0023A4 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0023A6 72 5A 00 1F      [ 1] 2516 	dec loop_depth 
      0023AA FC               [ 2] 2517 	jp (x)
                                   2518 
                                   2519 ;----------------------------
                                   2520 ; called by goto/gosub
                                   2521 ; to get target line number 
                                   2522 ; output:
                                   2523 ;    x    line address 
                                   2524 ;---------------------------
      0023AB                       2525 get_target_line:
      0023AB CD 17 9A         [ 4] 2526 	call next_token  
      0023AE A1 84            [ 1] 2527 	cp a,#TK_INTGR
      0023B0 27 07            [ 1] 2528 	jreq get_target_line_addr 
      0023B2 A1 03            [ 1] 2529 	cp a,#TK_LABEL 
      0023B4 27 26            [ 1] 2530 	jreq look_target_symbol 
      0023B6 CC 16 30         [ 2] 2531 	jp syntax_error
                                   2532 ; the target is a line number 
                                   2533 ; search it. 
      0023B9                       2534 get_target_line_addr:
      0023B9 90 89            [ 2] 2535 	pushw y 
      0023BB CD 17 CC         [ 4] 2536 	call get_int24 ; line # 
      0023BE 4F               [ 1] 2537 	clr a
      0023BF 90 CE 00 04      [ 2] 2538 	ldw y,basicptr 
      0023C3 90 FE            [ 2] 2539 	ldw y,(y)
      0023C5 90 89            [ 2] 2540 	pushw y 
      0023C7 13 01            [ 2] 2541 	cpw x,(1,sp)
      0023C9                       2542 	_drop 2  
      0023C9 5B 02            [ 2]    1     addw sp,#2 
      0023CB 25 01            [ 1] 2543 	jrult 11$
      0023CD 4C               [ 1] 2544 	inc a 
      0023CE                       2545 11$: ; scan program for this line# 	
      0023CE CD 0C 0F         [ 4] 2546 	call search_lineno  
      0023D1 5D               [ 2] 2547 	tnzw x ; 0| line# address 
      0023D2 26 05            [ 1] 2548 	jrne 2$ 
      0023D4 A6 05            [ 1] 2549 	ld a,#ERR_NO_LINE 
      0023D6 CC 16 32         [ 2] 2550 	jp tb_error 
      0023D9 90 85            [ 2] 2551 2$:	popw y  
      0023DB 81               [ 4] 2552 	ret 
                                   2553 
                                   2554 ; the GOTO|GOSUB target is a symbol.
                                   2555 ; output:
                                   2556 ;    X    line address|0 
      0023DC                       2557 look_target_symbol:
      0023DC 90 89            [ 2] 2558 	pushw y 
      0023DE 89               [ 2] 2559 	pushw x 
      0023DF CD 17 B3         [ 4] 2560 	call skip_string 
      0023E2 72 5F 00 0D      [ 1] 2561 	clr acc16 
      0023E6 90 CE 00 1B      [ 2] 2562 	ldw y,txtbgn 
      0023EA 90 E6 03         [ 1] 2563 1$:	ld a,(3,y) ; first TK_ID on line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0023ED A1 03            [ 1] 2564 	cp a,#TK_LABEL 
      0023EF 27 15            [ 1] 2565 	jreq 3$ 
      0023F1 90 E6 02         [ 1] 2566 2$:	ld a,(2,y); line length 
      0023F4 C7 00 0E         [ 1] 2567 	ld acc8,a 
      0023F7 72 B9 00 0D      [ 2] 2568 	addw y,acc16 ;point to next line 
      0023FB 90 C3 00 1D      [ 2] 2569 	cpw y,txtend 
      0023FF 25 E9            [ 1] 2570 	jrult 1$
      002401 A6 0A            [ 1] 2571 	ld a,#ERR_BAD_VALUE
      002403 CC 16 32         [ 2] 2572 	jp tb_error 
      002406                       2573 3$: ; found a TK_LABEL 
                                   2574 	; compare with GOTO|GOSUB target 
      002406 90 89            [ 2] 2575 	pushw y ; line address 
      002408 72 A9 00 04      [ 2] 2576 	addw y,#4 ; label string 
      00240C 1E 03            [ 2] 2577 	ldw x,(3,sp) ; target string 
      00240E CD 13 5B         [ 4] 2578 	call strcmp
      002411 26 04            [ 1] 2579 	jrne 4$
      002413 90 85            [ 2] 2580 	popw y 
      002415 20 DA            [ 2] 2581 	jra 2$ 
      002417                       2582 4$: ; target found 
      002417 85               [ 2] 2583 	popw x ;  address line target  
      002418                       2584 	_drop 2 ; target string 
      002418 5B 02            [ 2]    1     addw sp,#2 
      00241A 90 85            [ 2] 2585 	popw y 
      00241C 81               [ 4] 2586 	ret
                                   2587 
                                   2588 
                                   2589 ;--------------------------------
                                   2590 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2591 ; selective goto or gosub 
                                   2592 ;--------------------------------
      00241D                       2593 cmd_on:
      00241D 72 00 00 22 05   [ 2] 2594 	btjt flags,#FRUN,0$ 
      002422 A6 06            [ 1] 2595 	ld a,#ERR_RUN_ONLY
      002424 CC 16 32         [ 2] 2596 	jp tb_error 
      002427 CD 1A A6         [ 4] 2597 0$:	call expression 
      00242A A1 84            [ 1] 2598 	cp a,#TK_INTGR
      00242C 27 03            [ 1] 2599 	jreq 1$
      00242E CC 16 30         [ 2] 2600 	jp syntax_error
      002431                       2601 1$: _xpop
      002431 90 F6            [ 1]    1     ld a,(y)
      002433 93               [ 1]    2     ldw x,y 
      002434 EE 01            [ 2]    3     ldw x,(1,x)
      002436 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2602 ; the selector is the element indice 
                                   2603 ; in the list of arguments. {1..#elements} 
      00243A 9F               [ 1] 2604 	ld a,xl ; keep only bits 7..0
      00243B 27 68            [ 1] 2605 	jreq 9$ ; element # begin at 1. 
      00243D 88               [ 1] 2606 	push a  ; selector  
      00243E CD 17 9A         [ 4] 2607 	call next_token
      002441 A1 80            [ 1] 2608 	cp a,#TK_CMD 
      002443 27 03            [ 1] 2609 	jreq 2$ 
      002445 CC 16 30         [ 2] 2610 	jp syntax_error 
      002448                       2611 2$: _get_code_addr
      002448 FE               [ 2]    1         ldw x,(x)
      002449 72 5C 00 01      [ 1]    2         inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00244D 72 5C 00 01      [ 1]    3         inc in 
                                   2612 ;; must be a GOTO or GOSUB 
      002451 A3 24 AF         [ 2] 2613 	cpw x,#goto 
      002454 27 08            [ 1] 2614 	jreq 4$
      002456 A3 24 C9         [ 2] 2615 	cpw x,#gosub 
      002459 27 03            [ 1] 2616 	jreq 4$ 
      00245B CC 16 30         [ 2] 2617 	jp syntax_error 
      00245E                       2618 4$: 
      00245E 84               [ 1] 2619 	pop a 
      00245F 89               [ 2] 2620 	pushw x ; save routine address 	
      002460 88               [ 1] 2621 	push a  ; selector  
      002461                       2622 5$: ; skip elements in list until selector==0 
      002461 0A 01            [ 1] 2623 	dec (1,sp)
      002463 27 26            [ 1] 2624 	jreq 6$ 
                                   2625 ; can be a line# or a label 
      002465 CD 17 9A         [ 4] 2626 	call next_token 
      002468 A1 84            [ 1] 2627 	cp a,#TK_INTGR 
      00246A 27 07            [ 1] 2628 	jreq 52$
      00246C A1 03            [ 1] 2629 	cp a,#TK_LABEL 
      00246E 27 0D            [ 1] 2630 	jreq 54$
      002470 CC 16 30         [ 2] 2631 	jp syntax_error 
      002473                       2632 52$: ; got a line number 
      002473 C6 00 01         [ 1] 2633 	ld a,in ; skip over int24 value 
      002476 AB 03            [ 1] 2634 	add a,#CELL_SIZE ; integer size  
      002478 C7 00 01         [ 1] 2635 	ld in,a 
      00247B 20 03            [ 2] 2636 	jra 56$
      00247D CD 17 B3         [ 4] 2637 54$: call skip_string ; skip over label 	
      002480                       2638 56$: ; if another element comma present 
      002480 CD 17 9A         [ 4] 2639 	call next_token
      002483 A1 08            [ 1] 2640 	cp a,#TK_COMMA 
      002485 27 DA            [ 1] 2641 	jreq 5$ 
                                   2642 ; arg list exhausted, selector to big 
                                   2643 ; continue execution on next line 
      002487                       2644 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002487 5B 03            [ 2]    1     addw sp,#3 
      002489 20 1A            [ 2] 2645 	jra 9$
      00248B                       2646 6$: ;at selected position  
      00248B                       2647 	_drop 1 ; discard selector
      00248B 5B 01            [ 2]    1     addw sp,#1 
                                   2648 ; here only the routine address 
                                   2649 ; of GOTO|GOSUB is on stack 
      00248D CD 23 AB         [ 4] 2650     call get_target_line
      002490 CF 00 19         [ 2] 2651 	ldw ptr16,x 	
      002493 55 00 03 00 01   [ 1] 2652 	mov in,count ; move to end of line  
      002498 85               [ 2] 2653 	popw x ; cmd address, GOTO||GOSUB 
      002499 A3 24 AF         [ 2] 2654 	cpw x,#goto 
      00249C 26 05            [ 1] 2655 	jrne 7$ 
      00249E CE 00 19         [ 2] 2656 	ldw x,ptr16 
      0024A1 20 19            [ 2] 2657 	jra jp_to_target
      0024A3                       2658 7$: 
      0024A3 20 35            [ 2] 2659 	jra gosub_2 ; target in ptr16 
      0024A5                       2660 9$: ; expr out of range skip to end of line
                                   2661     ; this will force a fall to next line  
      0024A5 55 00 03 00 01   [ 1] 2662 	mov in,count
      0024AA                       2663 	_drop 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0024AA 5B 02            [ 2]    1     addw sp,#2 
      0024AC CC 16 E3         [ 2] 2664 	jp next_line  
                                   2665 
                                   2666 
                                   2667 ;------------------------
                                   2668 ; BASIC: GOTO line# 
                                   2669 ; jump to line# 
                                   2670 ; here cstack is 2 call deep from interpreter 
                                   2671 ;------------------------
      0024AF                       2672 goto:
      0024AF 72 00 00 22 05   [ 2] 2673 	btjt flags,#FRUN,goto_1  
      0024B4 A6 06            [ 1] 2674 	ld a,#ERR_RUN_ONLY
      0024B6 CC 16 32         [ 2] 2675 	jp tb_error 
      0024B9                       2676 goto_1:
      0024B9 CD 23 AB         [ 4] 2677 	call get_target_line
      0024BC                       2678 jp_to_target:
      0024BC CF 00 04         [ 2] 2679 	ldw basicptr,x 
      0024BF E6 02            [ 1] 2680 	ld a,(2,x)
      0024C1 C7 00 03         [ 1] 2681 	ld count,a 
      0024C4 35 03 00 01      [ 1] 2682 	mov in,#3 
      0024C8 81               [ 4] 2683 	ret 
                                   2684 
                                   2685 
                                   2686 ;--------------------
                                   2687 ; BASIC: GOSUB line#
                                   2688 ; basic subroutine call
                                   2689 ; actual line# and basicptr 
                                   2690 ; are saved on cstack
                                   2691 ; here cstack is 2 call deep from interpreter 
                                   2692 ;--------------------
                           000001  2693 	RET_ADDR=1 ; subroutine return address 
                           000003  2694 	RET_BPTR=3 ; basicptr return point 
                           000005  2695 	RET_INW=5  ; in.w return point 
                           000004  2696 	VSIZE=4 
      0024C9                       2697 gosub:
      0024C9 72 00 00 22 06   [ 2] 2698 	btjt flags,#FRUN,gosub_1 
      0024CE A6 06            [ 1] 2699 	ld a,#ERR_RUN_ONLY
      0024D0 CC 16 32         [ 2] 2700 	jp tb_error 
      0024D3 81               [ 4] 2701 	ret 
      0024D4                       2702 gosub_1:
      0024D4 CD 23 AB         [ 4] 2703 	call get_target_line 
      0024D7 CF 00 19         [ 2] 2704 	ldw ptr16,x
      0024DA                       2705 gosub_2: 
      0024DA 85               [ 2] 2706 	popw x 
      0024DB                       2707 	_vars VSIZE  
      0024DB 52 04            [ 2]    1     sub sp,#VSIZE 
      0024DD 89               [ 2] 2708 	pushw x ; RET_ADDR 
                                   2709 ; save BASIC subroutine return point.   
      0024DE CE 00 04         [ 2] 2710 	ldw x,basicptr
      0024E1 1F 03            [ 2] 2711 	ldw (RET_BPTR,sp),x 
      0024E3 CE 00 00         [ 2] 2712 	ldw x,in.w 
      0024E6 1F 05            [ 2] 2713 	ldw (RET_INW,sp),x
      0024E8 CE 00 19         [ 2] 2714 	ldw x,ptr16  
      0024EB 20 CF            [ 2] 2715 	jra jp_to_target
                                   2716 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2717 ;------------------------
                                   2718 ; BASIC: RETURN 
                                   2719 ; exit from BASIC subroutine 
                                   2720 ;------------------------
      0024ED                       2721 return:
      0024ED 72 00 00 22 05   [ 2] 2722 	btjt flags,#FRUN,0$ 
      0024F2 A6 06            [ 1] 2723 	ld a,#ERR_RUN_ONLY
      0024F4 CC 16 32         [ 2] 2724 	jp tb_error 
      0024F7                       2725 0$:	
      0024F7 1E 03            [ 2] 2726 	ldw x,(RET_BPTR,sp) 
      0024F9 CF 00 04         [ 2] 2727 	ldw basicptr,x
      0024FC E6 02            [ 1] 2728 	ld a,(2,x)
      0024FE C7 00 03         [ 1] 2729 	ld count,a  
      002501 1E 05            [ 2] 2730 	ldw x,(RET_INW,sp)
      002503 CF 00 00         [ 2] 2731 	ldw in.w,x 
      002506 85               [ 2] 2732 	popw x 
      002507                       2733 	_drop VSIZE 
      002507 5B 04            [ 2]    1     addw sp,#VSIZE 
      002509 FC               [ 2] 2734 	jp (x)
                                   2735 
                                   2736 
                                   2737 ;----------------------------------
                                   2738 ; BASIC: RUN
                                   2739 ; run BASIC program in RAM
                                   2740 ;----------------------------------- 
      00250A                       2741 run: 
      00250A 72 01 00 22 02   [ 2] 2742 	btjf flags,#FRUN,0$  
      00250F 4F               [ 1] 2743 	clr a 
      002510 81               [ 4] 2744 	ret
      002511                       2745 0$: 
      002511 72 09 00 22 12   [ 2] 2746 	btjf flags,#FBREAK,1$
      002516                       2747 	_drop 2 
      002516 5B 02            [ 2]    1     addw sp,#2 
      002518 CD 20 8F         [ 4] 2748 	call rest_context
      00251B                       2749 	_drop CTXT_SIZE 
      00251B 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00251D 72 19 00 22      [ 1] 2750 	bres flags,#FBREAK 
      002521 72 10 00 22      [ 1] 2751 	bset flags,#FRUN 
      002525 CC 16 DB         [ 2] 2752 	jp interpreter 
      002528 CE 00 1B         [ 2] 2753 1$:	ldw x,txtbgn
      00252B C3 00 1D         [ 2] 2754 	cpw x,txtend 
      00252E 2B 0C            [ 1] 2755 	jrmi run_it 
      002530 AE 15 A3         [ 2] 2756 	ldw x,#err_no_prog
      002533 CD 09 32         [ 4] 2757 	call puts 
      002536 55 00 03 00 01   [ 1] 2758 	mov in,count
      00253B 81               [ 4] 2759 	ret 
      00253C                       2760 run_it:	 
      00253C                       2761 	_drop 2 ; drop return address 
      00253C 5B 02            [ 2]    1     addw sp,#2 
      00253E                       2762 run_it_02: 
      00253E CD 1C 73         [ 4] 2763     call ubound 
      002541 CD 13 C0         [ 4] 2764 	call clear_vars
                                   2765 ; initialize DIM variables pointers 
      002544 CE 00 1D         [ 2] 2766 	ldw x,txtend 
      002547 CF 00 30         [ 2] 2767 	ldw dvar_bgn,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      00254A CF 00 32         [ 2] 2768 	ldw dvar_end,x 	 
                                   2769 ; clear data pointer 
      00254D 5F               [ 1] 2770 	clrw x 
      00254E CF 00 06         [ 2] 2771 	ldw data_ptr,x 
      002551 72 5F 00 08      [ 1] 2772 	clr data_ofs 
      002555 72 5F 00 09      [ 1] 2773 	clr data_len 
                                   2774 ; initialize BASIC pointer 
      002559 CE 00 1B         [ 2] 2775 	ldw x,txtbgn 
      00255C CF 00 04         [ 2] 2776 	ldw basicptr,x 
      00255F E6 02            [ 1] 2777 	ld a,(2,x)
      002561 C7 00 03         [ 1] 2778 	ld count,a
      002564 35 03 00 01      [ 1] 2779 	mov in,#3	
      002568 72 10 00 22      [ 1] 2780 	bset flags,#FRUN 
      00256C CC 16 DB         [ 2] 2781 	jp interpreter 
                                   2782 
                                   2783 
                                   2784 ;----------------------
                                   2785 ; BASIC: END
                                   2786 ; end running program
                                   2787 ;---------------------- 
      00256F                       2788 cmd_end: 
                                   2789 ; clean stack 
      00256F AE 17 FF         [ 2] 2790 	ldw x,#STACK_EMPTY
      002572 94               [ 1] 2791 	ldw sp,x 
      002573 CC 16 BC         [ 2] 2792 	jp warm_start
                                   2793 
                                   2794 ;---------------------------
                                   2795 ; BASIC: GET var 
                                   2796 ; receive a key in variable 
                                   2797 ; don't wait 
                                   2798 ;---------------------------
      002576                       2799 cmd_get:
      002576 CD 17 9A         [ 4] 2800 	call next_token 
      002579 A1 85            [ 1] 2801 	cp a,#TK_VAR 
      00257B 27 03            [ 1] 2802 	jreq 0$
      00257D CC 16 30         [ 2] 2803 	jp syntax_error 
      002580 CD 17 C2         [ 4] 2804 0$: call get_addr 
      002583 CF 00 19         [ 2] 2805 	ldw ptr16,x 
      002586 CD 08 DE         [ 4] 2806 	call qgetc 
      002589 27 03            [ 1] 2807 	jreq 2$
      00258B CD 08 E5         [ 4] 2808 	call getc  
      00258E 72 3F 00 19      [ 4] 2809 2$: clr [ptr16]
      002592 72 5C 00 1A      [ 1] 2810 	inc ptr8 
      002596 72 3F 00 19      [ 4] 2811 	clr [ptr16]
      00259A 72 5C 00 1A      [ 1] 2812 	inc ptr8 
      00259E 72 C7 00 19      [ 4] 2813 	ld [ptr16],a 
      0025A2 81               [ 4] 2814 	ret 
                                   2815 
                                   2816 
                                   2817 ;-----------------
                                   2818 ; 1 Khz beep 
                                   2819 ;-----------------
      0025A3                       2820 beep_1khz:: 
      0025A3 90 89            [ 2] 2821 	pushw y 
      0025A5 AE 00 64         [ 2] 2822 	ldw x,#100
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0025A8 90 AE 03 E8      [ 2] 2823 	ldw y,#1000
      0025AC 20 22            [ 2] 2824 	jra beep
                                   2825 
                                   2826 ;-----------------------
                                   2827 ; BASIC: TONE expr1,expr2
                                   2828 ; used TIMER2 channel 1
                                   2829 ; to produce a tone 
                                   2830 ; arguments:
                                   2831 ;    expr1   frequency 
                                   2832 ;    expr2   duration msec.
                                   2833 ;---------------------------
      0025AE                       2834 tone:
      0025AE 90 89            [ 2] 2835 	pushw y 
      0025B0 CD 19 62         [ 4] 2836 	call arg_list 
      0025B3 A1 02            [ 1] 2837 	cp a,#2 
      0025B5 27 03            [ 1] 2838 	jreq 1$
      0025B7 CC 16 30         [ 2] 2839 	jp syntax_error 
      0025BA                       2840 1$: 
      0025BA                       2841 	_xpop 
      0025BA 90 F6            [ 1]    1     ld a,(y)
      0025BC 93               [ 1]    2     ldw x,y 
      0025BD EE 01            [ 2]    3     ldw x,(1,x)
      0025BF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025C3 89               [ 2] 2842 	pushw x ; duration 
      0025C4                       2843 	_xpop ; frequency
      0025C4 90 F6            [ 1]    1     ld a,(y)
      0025C6 93               [ 1]    2     ldw x,y 
      0025C7 EE 01            [ 2]    3     ldw x,(1,x)
      0025C9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025CD 90 93            [ 1] 2844 	ldw y,x ; frequency 
      0025CF 85               [ 2] 2845 	popw x  ; duration 
      0025D0                       2846 beep:  
      0025D0 89               [ 2] 2847 	pushw x 
      0025D1 AE F4 24         [ 2] 2848 	ldw x,#TIM2_CLK_FREQ
      0025D4 65               [ 2] 2849 	divw x,y ; cntr=Fclk/freq 
                                   2850 ; round to nearest integer 
      0025D5 90 A3 7A 12      [ 2] 2851 	cpw y,#TIM2_CLK_FREQ/2
      0025D9 2B 01            [ 1] 2852 	jrmi 2$
      0025DB 5C               [ 1] 2853 	incw x 
      0025DC                       2854 2$:	 
      0025DC 9E               [ 1] 2855 	ld a,xh 
      0025DD C7 53 0D         [ 1] 2856 	ld TIM2_ARRH,a 
      0025E0 9F               [ 1] 2857 	ld a,xl 
      0025E1 C7 53 0E         [ 1] 2858 	ld TIM2_ARRL,a 
                                   2859 ; 50% duty cycle 
      0025E4 8C               [ 1] 2860 	ccf 
      0025E5 56               [ 2] 2861 	rrcw x 
      0025E6 9E               [ 1] 2862 	ld a,xh 
      0025E7 C7 53 0F         [ 1] 2863 	ld TIM2_CCR1H,a 
      0025EA 9F               [ 1] 2864 	ld a,xl
      0025EB C7 53 10         [ 1] 2865 	ld TIM2_CCR1L,a
      0025EE 72 10 53 08      [ 1] 2866 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025F2 72 10 53 00      [ 1] 2867 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025F6 72 10 53 04      [ 1] 2868 	bset TIM2_EGR,#TIM2_EGR_UG
      0025FA 85               [ 2] 2869 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0025FB CD 2A 3C         [ 4] 2870 	call pause02
      0025FE 72 11 53 08      [ 1] 2871 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002602 72 11 53 00      [ 1] 2872 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002606 90 85            [ 2] 2873 	popw y 
      002608 81               [ 4] 2874 	ret 
                                   2875 
                                   2876 ;-------------------------------
                                   2877 ; BASIC: ADCON 0|1 [,divisor]  
                                   2878 ; disable/enanble ADC 
                                   2879 ;-------------------------------
                           000003  2880 	ONOFF=3 
                           000001  2881 	DIVSOR=1
                           000004  2882 	VSIZE=4 
      002609                       2883 power_adc:
      002609 CD 19 62         [ 4] 2884 	call arg_list 
      00260C A1 02            [ 1] 2885 	cp a,#2	
      00260E 27 12            [ 1] 2886 	jreq 1$
      002610 A1 01            [ 1] 2887 	cp a,#1 
      002612 27 03            [ 1] 2888 	jreq 0$ 
      002614 CC 16 30         [ 2] 2889 	jp syntax_error 
      002617 4F               [ 1] 2890 0$:	clr a 
      002618 5F               [ 1] 2891 	clrw x
      002619                       2892 	_xpush   ; divisor  
      002619 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00261D 90 F7            [ 1]    2     ld (y),a 
      00261F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002622                       2893 1$: _at_next 
      002622 90 E6 03         [ 1]    1     ld a,(3,y)
      002625 93               [ 1]    2     ldw x,y 
      002626 EE 04            [ 2]    3     ldw x,(4,x)
      002628 5D               [ 2] 2894 	tnzw x 
      002629 27 25            [ 1] 2895 	jreq 2$ 
      00262B                       2896 	_xpop
      00262B 90 F6            [ 1]    1     ld a,(y)
      00262D 93               [ 1]    2     ldw x,y 
      00262E EE 01            [ 2]    3     ldw x,(1,x)
      002630 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002634                       2897 	_xdrop  
      002634 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      002638 9F               [ 1] 2898 	ld a,xl
      002639 A4 07            [ 1] 2899 	and a,#7
      00263B 4E               [ 1] 2900 	swap a 
      00263C C7 54 01         [ 1] 2901 	ld ADC_CR1,a
      00263F 72 16 50 CA      [ 1] 2902 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002643 72 10 54 01      [ 1] 2903 	bset ADC_CR1,#ADC_CR1_ADON 
      002647                       2904 	_usec_dly 7 
      002647 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00264A 5A               [ 2]    2     decw x
      00264B 9D               [ 1]    3     nop 
      00264C 26 FA            [ 1]    4     jrne .-4
      00264E 20 08            [ 2] 2905 	jra 3$
      002650 72 11 54 01      [ 1] 2906 2$: bres ADC_CR1,#ADC_CR1_ADON
      002654 72 17 50 CA      [ 1] 2907 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002658                       2908 3$:	
      002658 81               [ 4] 2909 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



                                   2910 
                                   2911 ;-----------------------------
                                   2912 ; BASIC: ADCREAD (channel)
                                   2913 ; read adc channel {0..5}
                                   2914 ; output:
                                   2915 ;   A 		TK_INTGR 
                                   2916 ;   X 		value 
                                   2917 ;-----------------------------
      002659                       2918 analog_read:
      002659 CD 19 5D         [ 4] 2919 	call func_args 
      00265C A1 01            [ 1] 2920 	cp a,#1 
      00265E 27 03            [ 1] 2921 	jreq 1$
      002660 CC 16 30         [ 2] 2922 	jp syntax_error
      002663                       2923 1$: _xpop 
      002663 90 F6            [ 1]    1     ld a,(y)
      002665 93               [ 1]    2     ldw x,y 
      002666 EE 01            [ 2]    3     ldw x,(1,x)
      002668 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00266C A3 00 05         [ 2] 2924 	cpw x,#5 
      00266F 23 05            [ 2] 2925 	jrule 2$
      002671 A6 0A            [ 1] 2926 	ld a,#ERR_BAD_VALUE
      002673 CC 16 32         [ 2] 2927 	jp tb_error 
      002676 9F               [ 1] 2928 2$: ld a,xl
      002677 C7 00 0E         [ 1] 2929 	ld acc8,a 
      00267A A6 05            [ 1] 2930 	ld a,#5
      00267C C0 00 0E         [ 1] 2931 	sub a,acc8 
      00267F C7 54 00         [ 1] 2932 	ld ADC_CSR,a
      002682 72 16 54 02      [ 1] 2933 	bset ADC_CR2,#ADC_CR2_ALIGN
      002686 72 10 54 01      [ 1] 2934 	bset ADC_CR1,#ADC_CR1_ADON
      00268A 72 0F 54 00 FB   [ 2] 2935 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00268F CE 54 04         [ 2] 2936 	ldw x,ADC_DRH
      002692 A6 84            [ 1] 2937 	ld a,#TK_INTGR
      002694 81               [ 4] 2938 	ret 
                                   2939 
                                   2940 ;-----------------------
                                   2941 ; BASIC: DREAD(pin)
                                   2942 ; Arduino pins 
                                   2943 ; read state of a digital pin 
                                   2944 ; pin# {0..15}
                                   2945 ; output:
                                   2946 ;    A 		TK_INTGR
                                   2947 ;    X      0|1 
                                   2948 ;-------------------------
                           000001  2949 	PINNO=1
                           000001  2950 	VSIZE=1
      002695                       2951 digital_read:
      002695                       2952 	_vars VSIZE 
      002695 52 01            [ 2]    1     sub sp,#VSIZE 
      002697 CD 19 5D         [ 4] 2953 	call func_args
      00269A A1 01            [ 1] 2954 	cp a,#1
      00269C 27 03            [ 1] 2955 	jreq 1$
      00269E CC 16 30         [ 2] 2956 	jp syntax_error
      0026A1                       2957 1$: _xpop 
      0026A1 90 F6            [ 1]    1     ld a,(y)
      0026A3 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0026A4 EE 01            [ 2]    3     ldw x,(1,x)
      0026A6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026AA A3 00 0F         [ 2] 2958 	cpw x,#15 
      0026AD 23 05            [ 2] 2959 	jrule 2$
      0026AF A6 0A            [ 1] 2960 	ld a,#ERR_BAD_VALUE
      0026B1 CC 16 32         [ 2] 2961 	jp tb_error 
      0026B4 CD 2B 7F         [ 4] 2962 2$:	call select_pin 
      0026B7 6B 01            [ 1] 2963 	ld (PINNO,sp),a
      0026B9 E6 01            [ 1] 2964 	ld a,(GPIO_IDR,x)
      0026BB 0D 01            [ 1] 2965 	tnz (PINNO,sp)
      0026BD 27 05            [ 1] 2966 	jreq 8$
      0026BF 44               [ 1] 2967 3$: srl a 
      0026C0 0A 01            [ 1] 2968 	dec (PINNO,sp)
      0026C2 26 FB            [ 1] 2969 	jrne 3$ 
      0026C4 A4 01            [ 1] 2970 8$: and a,#1 
      0026C6 5F               [ 1] 2971 	clrw x 
      0026C7 97               [ 1] 2972 	ld xl,a 
      0026C8 4F               [ 1] 2973 	clr a 
      0026C9                       2974 	_drop VSIZE
      0026C9 5B 01            [ 2]    1     addw sp,#VSIZE 
      0026CB 81               [ 4] 2975 	ret
                                   2976 
                                   2977 
                                   2978 ;-----------------------
                                   2979 ; BASIC: DWRITE pin,0|1
                                   2980 ; Arduino pins 
                                   2981 ; write to a digital pin 
                                   2982 ; pin# {0..15}
                                   2983 ; output:
                                   2984 ;    A 		TK_INTGR
                                   2985 ;    X      0|1 
                                   2986 ;-------------------------
                           000001  2987 	PINNO=1
                           000002  2988 	PINVAL=2
                           000002  2989 	VSIZE=2
      0026CC                       2990 digital_write:
      0026CC                       2991 	_vars VSIZE 
      0026CC 52 02            [ 2]    1     sub sp,#VSIZE 
      0026CE CD 19 62         [ 4] 2992 	call arg_list  
      0026D1 A1 02            [ 1] 2993 	cp a,#2 
      0026D3 27 03            [ 1] 2994 	jreq 1$
      0026D5 CC 16 30         [ 2] 2995 	jp syntax_error
      0026D8                       2996 1$: _xpop 
      0026D8 90 F6            [ 1]    1     ld a,(y)
      0026DA 93               [ 1]    2     ldw x,y 
      0026DB EE 01            [ 2]    3     ldw x,(1,x)
      0026DD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026E1 9F               [ 1] 2997 	ld a,xl 
      0026E2 6B 02            [ 1] 2998 	ld (PINVAL,sp),a
      0026E4                       2999 	_xpop 
      0026E4 90 F6            [ 1]    1     ld a,(y)
      0026E6 93               [ 1]    2     ldw x,y 
      0026E7 EE 01            [ 2]    3     ldw x,(1,x)
      0026E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026ED A3 00 0F         [ 2] 3000 	cpw x,#15 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0026F0 23 05            [ 2] 3001 	jrule 2$
      0026F2 A6 0A            [ 1] 3002 	ld a,#ERR_BAD_VALUE
      0026F4 CC 16 32         [ 2] 3003 	jp tb_error 
      0026F7 CD 2B 7F         [ 4] 3004 2$:	call select_pin 
      0026FA 6B 01            [ 1] 3005 	ld (PINNO,sp),a 
      0026FC A6 01            [ 1] 3006 	ld a,#1
      0026FE 0D 01            [ 1] 3007 	tnz (PINNO,sp)
      002700 27 05            [ 1] 3008 	jreq 4$
      002702 48               [ 1] 3009 3$: sll a
      002703 0A 01            [ 1] 3010 	dec (PINNO,sp)
      002705 26 FB            [ 1] 3011 	jrne 3$
      002707 0D 02            [ 1] 3012 4$: tnz (PINVAL,sp)
      002709 26 05            [ 1] 3013 	jrne 5$
      00270B 43               [ 1] 3014 	cpl a 
      00270C E4 00            [ 1] 3015 	and a,(GPIO_ODR,x)
      00270E 20 02            [ 2] 3016 	jra 8$
      002710 EA 00            [ 1] 3017 5$: or a,(GPIO_ODR,x)
      002712 E7 00            [ 1] 3018 8$: ld (GPIO_ODR,x),a 
      002714                       3019 	_drop VSIZE 
      002714 5B 02            [ 2]    1     addw sp,#VSIZE 
      002716 81               [ 4] 3020 	ret
                                   3021 
                                   3022 
                                   3023 ;-----------------------
                                   3024 ; BASIC: STOP
                                   3025 ; stop progam execution  
                                   3026 ; without resetting pointers 
                                   3027 ; the program is resumed
                                   3028 ; with RUN 
                                   3029 ;-------------------------
      002717                       3030 stop:
      002717 72 00 00 22 02   [ 2] 3031 	btjt flags,#FRUN,2$
      00271C 4F               [ 1] 3032 	clr a
      00271D 81               [ 4] 3033 	ret 
      00271E                       3034 2$:	 
                                   3035 ; create space on cstack to save context 
      00271E AE 27 45         [ 2] 3036 	ldw x,#break_point 
      002721 CD 09 32         [ 4] 3037 	call puts 
      002724                       3038 	_drop 2 ;drop return address 
      002724 5B 02            [ 2]    1     addw sp,#2 
      002726                       3039 	_vars CTXT_SIZE ; context size 
      002726 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002728 CD 20 7F         [ 4] 3040 	call save_context 
      00272B AE 16 90         [ 2] 3041 	ldw x,#tib 
      00272E CF 00 04         [ 2] 3042 	ldw basicptr,x
      002731 7F               [ 1] 3043 	clr (x)
      002732 72 5F 00 03      [ 1] 3044 	clr count  
      002736 5F               [ 1] 3045 	clrw x 
      002737 CF 00 00         [ 2] 3046 	ldw in.w,x
      00273A 72 11 00 22      [ 1] 3047 	bres flags,#FRUN 
      00273E 72 18 00 22      [ 1] 3048 	bset flags,#FBREAK
      002742 CC 16 DB         [ 2] 3049 	jp interpreter 
      002745 0A 62 72 65 61 6B 20  3050 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



             72 65 73 75 6D 65 2E
             0A 00
                                   3051 
                                   3052 ;-----------------------
                                   3053 ; BASIC: NEW
                                   3054 ; from command line only 
                                   3055 ; free program memory
                                   3056 ; and clear variables 
                                   3057 ;------------------------
      002763                       3058 new: 
      002763 72 01 00 22 01   [ 2] 3059 	btjf flags,#FRUN,0$ 
      002768 81               [ 4] 3060 	ret 
      002769                       3061 0$:	
      002769 CD 14 68         [ 4] 3062 	call clear_basic 
      00276C 81               [ 4] 3063 	ret 
                                   3064 
                                   3065 ;-----------------------------------
                                   3066 ; BASIC: ERASE \E | \F 
                                   3067 ; erase all block in range from 
                                   3068 ;  'app_space' to FLASH end (0x20000)
                                   3069 ;  or all EEPROM 
                                   3070 ; that contains a non zero byte.  
                                   3071 ;-----------------------------------
                           000001  3072 	LIMIT=1 
                           000003  3073 	VSIZE = 3 
      00276D                       3074 erase:
      00276D 72 5F 00 18      [ 1] 3075 	clr farptr 
      002771                       3076 	_vars VSIZE 
      002771 52 03            [ 2]    1     sub sp,#VSIZE 
      002773 CD 17 9A         [ 4] 3077 	call next_token 
      002776 A1 04            [ 1] 3078 	cp a,#TK_CHAR 
      002778 27 03            [ 1] 3079 	jreq 0$ 
      00277A CC 16 30         [ 2] 3080 	jp syntax_error
      00277D CD 17 DC         [ 4] 3081 0$: call get_char 
      002780 A4 DF            [ 1] 3082 	and a,#0XDF 
      002782 A1 45            [ 1] 3083 	cp a,#'E
      002784 26 0C            [ 1] 3084 	jrne 1$
      002786 AE 40 00         [ 2] 3085 	ldw x,#EEPROM_BASE 
      002789 CF 00 19         [ 2] 3086 	ldw farptr+1,x 
      00278C AE 47 FF         [ 2] 3087 	ldw x,#EEPROM_END
      00278F 4F               [ 1] 3088 	clr a 
      002790 20 15            [ 2] 3089 	jra 3$ 
      002792 A1 46            [ 1] 3090 1$: cp a,#'F 
      002794 27 06            [ 1] 3091 	jreq 2$
      002796 AE 15 54         [ 2] 3092 	ldw x,#err_bad_value
      002799 CC 16 32         [ 2] 3093 	jp tb_error
      00279C                       3094 2$:
      00279C AE 36 00         [ 2] 3095 	ldw x,#app_space  
      00279F CF 00 19         [ 2] 3096 	ldw farptr+1,x 
      0027A2 A6 02            [ 1] 3097 	ld a,#(FLASH_END>>16)&0XFF 
      0027A4 AE 7F FF         [ 2] 3098 	ldw x,#FLASH_END&0xffff
      0027A7                       3099 3$:
      0027A7 6B 01            [ 1] 3100 	ld (LIMIT,sp),a 
      0027A9 1F 02            [ 2] 3101 	ldw (LIMIT+1,sp),x 
                                   3102  ; operation done from RAM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   3103  ; copy code to RAM in tib   
      0027AB CD 06 D3         [ 4] 3104 	call move_erase_to_ram
      0027AE                       3105 4$:	 
      0027AE CD 08 55         [ 4] 3106     call scan_block 
      0027B1 27 08            [ 1] 3107 	jreq 5$  ; block already erased 
      0027B3 A6 45            [ 1] 3108     ld a,#'E 
      0027B5 CD 08 D5         [ 4] 3109     call putc 
      0027B8 CD 07 51         [ 4] 3110 	call block_erase   
                                   3111 ; this block is clean, next  
      0027BB AE 00 80         [ 2] 3112 5$:	ldw x,#BLOCK_SIZE
      0027BE CD 08 47         [ 4] 3113 	call incr_farptr
                                   3114 ; check limit, 24 bit substraction  	
      0027C1 7B 01            [ 1] 3115 	ld a,(LIMIT,sp)
      0027C3 1E 02            [ 2] 3116 	ldw x,(LIMIT+1,sp)
      0027C5 72 B0 00 19      [ 2] 3117 	subw x,farptr+1
      0027C9 C2 00 18         [ 1] 3118 	sbc a,farptr 
      0027CC 22 E0            [ 1] 3119 	jrugt 4$ 
      0027CE CD 14 68         [ 4] 3120 9$: call clear_basic
      0027D1 1E 02            [ 2] 3121 	ldw x,(LIMIT+1,sp)
      0027D3 A3 47 FF         [ 2] 3122 	cpw x,#EEPROM_END
      0027D6 26 03            [ 1] 3123 	jrne 10$
      0027D8 CD 1D 3E         [ 4] 3124 	call func_eefree 
      0027DB                       3125 10$:
      0027DB                       3126 	_drop VSIZE 
      0027DB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0027DD 81               [ 4] 3127 	ret 
                                   3128 	
                                   3129 
                                   3130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3131 ;  check for application signature 
                                   3132 ; output:
                                   3133 ;   Carry    0 app present 
                                   3134 ;            1 no app installed  
                                   3135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027DE                       3136 qsign: 
      0027DE CE 36 00         [ 2] 3137 	ldw x,app_sign 
      0027E1 C3 28 9E         [ 2] 3138 	cpw x,SIGNATURE ; "TB" 
      0027E4 81               [ 4] 3139 	ret 
                                   3140 
                                   3141 ;--------------------------------------
                                   3142 ;  fill write buffer 
                                   3143 ;  input:
                                   3144 ;    y  point to output buffer 
                                   3145 ;    x  point to source 
                                   3146 ;    a  bytes to write in buffer 
                                   3147 ;  output:
                                   3148 ;    y   += A 
                                   3149 ;    X   += A 
                                   3150 ;    A   0 
                                   3151 ;---------------------------------------
      0027E5                       3152 fill_write_buffer:
      0027E5 88               [ 1] 3153 	push a 
      0027E6 4D               [ 1] 3154 	tnz a 
      0027E7 27 0A            [ 1] 3155 	jreq 9$ 
      0027E9 F6               [ 1] 3156 1$: ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0027EA 5C               [ 1] 3157 	incw x 
      0027EB 90 F7            [ 1] 3158 	ld (y),a 
      0027ED 90 5C            [ 1] 3159 	incw y 
      0027EF 0A 01            [ 1] 3160 	dec (1,sp) 
      0027F1 26 F6            [ 1] 3161 	jrne 1$ 
      0027F3 84               [ 1] 3162 9$:	pop a 
      0027F4 81               [ 4] 3163     ret 	
                                   3164 
                                   3165 ;--------------------------------------
                                   3166 ;  fill pad buffer with zero 
                                   3167 ;  input:
                                   3168 ;	none 
                                   3169 ;  output:
                                   3170 ;    y     buffer address  
                                   3171 ;--------------------------------------
      0027F5                       3172 clear_block_buffer:
      0027F5 88               [ 1] 3173 	push a 
      0027F6 90 AE 16 E0      [ 2] 3174 	ldw y,#block_buffer 
      0027FA 90 89            [ 2] 3175 	pushw y
      0027FC A6 80            [ 1] 3176 	ld a,#BLOCK_SIZE   
      0027FE 90 7F            [ 1] 3177 1$:	clr (y)
      002800 90 5C            [ 1] 3178 	incw y
      002802 4A               [ 1] 3179 	dec a  
      002803 26 F9            [ 1] 3180 	jrne 1$ 	
      002805 90 85            [ 2] 3181 9$: popw y 
      002807 84               [ 1] 3182 	pop a 			
      002808 81               [ 4] 3183 	ret 
                                   3184 
                                   3185 
                                   3186 ;---------------------------------------
                                   3187 ; BASIC: SAVE
                                   3188 ; write application from RAM to FLASH
                                   3189 ; at UFLASH address
                                   3190 ;--------------------------------------
                           000001  3191 	XTEMP=1
                           000003  3192 	COUNT=3  ; last count bytes written 
                           000004  3193 	CNT_LO=4 ; count low byte 
                           000005  3194 	TOWRITE=5 ; how bytes left to write  
                           000006  3195 	VSIZE=6 
      002809                       3196 save_app:
      002809 89               [ 2] 3197 	pushw x 
      00280A 90 89            [ 2] 3198 	pushw y 
      00280C                       3199 	_vars VSIZE
      00280C 52 06            [ 2]    1     sub sp,#VSIZE 
      00280E CD 27 DE         [ 4] 3200 	call qsign 
      002811 26 09            [ 1] 3201 	jrne 1$
      002813 AE 28 A0         [ 2] 3202 	ldw x,#CANT_DO 
      002816 CD 09 32         [ 4] 3203 	call puts 
      002819 CC 28 98         [ 2] 3204 	jp 9$
      00281C                       3205 1$: 
      00281C CE 00 1B         [ 2] 3206 	ldw x,txtbgn
      00281F C3 00 1D         [ 2] 3207 	cpw x,txtend 
      002822 25 09            [ 1] 3208 	jrult 2$ 
      002824 AE 28 E2         [ 2] 3209 	ldw x,#NO_APP
      002827 CD 09 32         [ 4] 3210 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00282A CC 28 98         [ 2] 3211 	jp 9$
      00282D                       3212 2$: 
                                   3213 ; block programming flash
                                   3214 ; must be done from RAM
                                   3215 ; moved in tib  
      00282D CD 07 13         [ 4] 3216 	call move_prg_to_ram
                                   3217 ; initialize farptr 
                                   3218 ; to app_sign address 
      002830 72 5F 00 18      [ 1] 3219 	clr farptr 
      002834 AE 36 00         [ 2] 3220 	ldw x,#app_sign 
      002837 CF 00 19         [ 2] 3221 	ldw farptr+1,x
                                   3222 ; initialize local variables 
      00283A CD 1E 58         [ 4] 3223 	call prog_size
      00283D 1F 05            [ 2] 3224 	ldw (TOWRITE,sp),x
      00283F 0F 03            [ 1] 3225 	clr (COUNT,sp)
                                   3226 ; first bock 
                                   3227 ; containt signature 2 bytes 
                                   3228 ; and size 	2 bytes 
                                   3229 ; use Y as pointer to block_buffer
      002841 CD 27 F5         [ 4] 3230 	call clear_block_buffer ; -- y=*block_buffer	
                                   3231 ; write signature
      002844 CE 28 9E         [ 2] 3232 	ldw x,SIGNATURE ; "BC" 
      002847 90 FF            [ 2] 3233 	ldw (y),x 
      002849 72 A9 00 02      [ 2] 3234 	addw y,#2
      00284D 1E 05            [ 2] 3235 	ldw x,(TOWRITE,sp)
      00284F 90 FF            [ 2] 3236 	ldw (y),x
      002851 72 A9 00 02      [ 2] 3237 	addw y,#2   
      002855 A6 7C            [ 1] 3238 	ld a,#(BLOCK_SIZE-4)
      002857 6B 04            [ 1] 3239 	ld (CNT_LO,sp),a 
      002859 A3 00 7C         [ 2] 3240 	cpw x,#(BLOCK_SIZE-4) 
      00285C 22 01            [ 1] 3241 	jrugt 3$
      00285E 9F               [ 1] 3242 	ld a,xl 
      00285F 6B 04            [ 1] 3243 3$:	ld (CNT_LO,sp),a   
      002861 CE 00 1B         [ 2] 3244 	ldw x,txtbgn 
      002864 1F 01            [ 2] 3245 	ldw (XTEMP,sp),x 
      002866                       3246 32$: 
      002866 1E 01            [ 2] 3247 	ldw x,(XTEMP,sp)
      002868 7B 04            [ 1] 3248 	ld a,(CNT_LO,sp)
      00286A CD 27 E5         [ 4] 3249 	call fill_write_buffer 
      00286D 1F 01            [ 2] 3250 	ldw (XTEMP,sp),x 
      00286F AE 16 E0         [ 2] 3251 	ldw x,#block_buffer
      002872 CD 07 2D         [ 4] 3252 	call write_buffer
      002875 AE 00 80         [ 2] 3253 	ldw x,#BLOCK_SIZE 
      002878 CD 08 47         [ 4] 3254 	call incr_farptr  
                                   3255 ; following blocks 
      00287B 1E 01            [ 2] 3256 	ldw x,(XTEMP,sp)
      00287D C3 00 1D         [ 2] 3257 	cpw x,txtend 
      002880 24 16            [ 1] 3258 	jruge 9$ 
      002882 1E 05            [ 2] 3259 	ldw x,(TOWRITE,sp)
      002884 72 F0 03         [ 2] 3260 	subw x,(COUNT,sp)
      002887 1F 05            [ 2] 3261 	ldw (TOWRITE,sp),x 
      002889 A6 80            [ 1] 3262 	ld a,#BLOCK_SIZE 
      00288B A3 00 80         [ 2] 3263 	cpw x,#BLOCK_SIZE 
      00288E 24 01            [ 1] 3264 	jruge 4$ 
      002890 9F               [ 1] 3265 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002891 6B 04            [ 1] 3266 4$:	ld (CNT_LO,sp),a 
      002893 CD 27 F5         [ 4] 3267 	call clear_block_buffer 
      002896 20 CE            [ 2] 3268 	jra 32$ 
      002898                       3269 9$:	_drop VSIZE 
      002898 5B 06            [ 2]    1     addw sp,#VSIZE 
      00289A 90 85            [ 2] 3270     popw y 
      00289C 85               [ 2] 3271 	popw x 
      00289D 81               [ 4] 3272 	ret 
                                   3273 
                                   3274 
      00289E 54 42                 3275 SIGNATURE: .ascii "TB"
      0028A0 43 61 6E 27 74 20 66  3276 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0028E2 4E 6F 20 61 70 70 6C  3277 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3278 
                                   3279 ;---------------------
                                   3280 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3281 ; write 1 or more byte to FLASH or EEPROM
                                   3282 ; starting at address  
                                   3283 ; input:
                                   3284 ;   expr1  	is address 
                                   3285 ;   expr2,...,exprn   are bytes to write
                                   3286 ; output:
                                   3287 ;   none 
                                   3288 ;---------------------
      0028F8                       3289 write:
      0028F8 CD 1A A6         [ 4] 3290 	call expression
      0028FB A1 84            [ 1] 3291 	cp a,#TK_INTGR 
      0028FD 27 03            [ 1] 3292 	jreq 0$
      0028FF CC 16 30         [ 2] 3293 	jp syntax_error
      002902                       3294 0$: _xpop 
      002902 90 F6            [ 1]    1     ld a,(y)
      002904 93               [ 1]    2     ldw x,y 
      002905 EE 01            [ 2]    3     ldw x,(1,x)
      002907 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00290B C7 00 18         [ 1] 3295 	ld farptr,a 
      00290E CF 00 19         [ 2] 3296 	ldw ptr16,x 
      002911                       3297 1$:	
      002911 CD 17 9A         [ 4] 3298 	call next_token 
      002914 A1 08            [ 1] 3299 	cp a,#TK_COMMA 
      002916 27 02            [ 1] 3300 	jreq 2$ 
      002918 20 20            [ 2] 3301 	jra 9$ ; no more data 
      00291A CD 1A A6         [ 4] 3302 2$:	call expression
      00291D A1 84            [ 1] 3303 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00291F 27 03            [ 1] 3304 	jreq 3$
      002921 CC 16 30         [ 2] 3305 	jp syntax_error
      002924                       3306 3$:	_xpop 
      002924 90 F6            [ 1]    1     ld a,(y)
      002926 93               [ 1]    2     ldw x,y 
      002927 EE 01            [ 2]    3     ldw x,(1,x)
      002929 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00292D 9F               [ 1] 3307 	ld a,xl 
      00292E 5F               [ 1] 3308 	clrw x 
      00292F CD 07 77         [ 4] 3309 	call write_byte
      002932 AE 00 01         [ 2] 3310 	ldw x,#1 
      002935 CD 08 47         [ 4] 3311 	call incr_farptr 
      002938 20 D7            [ 2] 3312 	jra 1$ 
      00293A                       3313 9$:
      00293A 81               [ 4] 3314 	ret 
                                   3315 
                                   3316 
                                   3317 ;---------------------
                                   3318 ;BASIC: CHAR(expr)
                                   3319 ; évaluate expression 
                                   3320 ; and take the 7 least 
                                   3321 ; bits as ASCII character
                                   3322 ; output: 
                                   3323 ; 	A char 
                                   3324 ;---------------------
      00293B                       3325 func_char:
      00293B CD 19 5D         [ 4] 3326 	call func_args 
      00293E A1 01            [ 1] 3327 	cp a,#1
      002940 27 03            [ 1] 3328 	jreq 1$
      002942 CC 16 30         [ 2] 3329 	jp syntax_error
      002945                       3330 1$:	_xpop
      002945 90 F6            [ 1]    1     ld a,(y)
      002947 93               [ 1]    2     ldw x,y 
      002948 EE 01            [ 2]    3     ldw x,(1,x)
      00294A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00294E 9F               [ 1] 3331 	ld a,xl
      00294F A4 7F            [ 1] 3332 	and a,#0x7f 
      002951 81               [ 4] 3333 	ret
                                   3334 
                                   3335 ;---------------------
                                   3336 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3337 ; extract first character 
                                   3338 ; of string argument 
                                   3339 ; output:
                                   3340 ;    A:X    int24 
                                   3341 ;---------------------
      002952                       3342 ascii:
      002952 A6 06            [ 1] 3343 	ld a,#TK_LPAREN
      002954 CD 19 50         [ 4] 3344 	call expect 
      002957 CD 17 9A         [ 4] 3345 	call next_token 
      00295A A1 02            [ 1] 3346 	cp a,#TK_QSTR 
      00295C 27 0E            [ 1] 3347 	jreq 1$
      00295E A1 04            [ 1] 3348 	cp a,#TK_CHAR 
      002960 27 12            [ 1] 3349 	jreq 2$ 
      002962 A1 82            [ 1] 3350 	cp a,#TK_CFUNC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      002964 27 03            [ 1] 3351 	jreq 0$
      002966 CC 16 30         [ 2] 3352 	jp syntax_error
      002969                       3353 0$: ; cfunc 
      002969 FD               [ 4] 3354 	call (x)
      00296A 20 0B            [ 2] 3355 	jra 3$
      00296C                       3356 1$: ; quoted string 
      00296C F6               [ 1] 3357 	ld a,(x)
      00296D 88               [ 1] 3358 	push a  
      00296E CD 17 B3         [ 4] 3359 	call skip_string
      002971 84               [ 1] 3360 	pop a  	
      002972 20 03            [ 2] 3361 	jra 3$ 
      002974                       3362 2$: ; character 
      002974 CD 17 DC         [ 4] 3363 	call get_char 
      002977 5F               [ 1] 3364 3$:	clrw x 
      002978 02               [ 1] 3365 	rlwa x   
      002979                       3366 4$:	_xpush  
      002979 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00297D 90 F7            [ 1]    2     ld (y),a 
      00297F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002982 A6 07            [ 1] 3367 	ld a,#TK_RPAREN 
      002984 CD 19 50         [ 4] 3368 	call expect
      002987                       3369 9$:	
      002987                       3370 	_xpop  
      002987 90 F6            [ 1]    1     ld a,(y)
      002989 93               [ 1]    2     ldw x,y 
      00298A EE 01            [ 2]    3     ldw x,(1,x)
      00298C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002990 81               [ 4] 3371 	ret 
                                   3372 
                                   3373 ;---------------------
                                   3374 ;BASIC: KEY
                                   3375 ; wait for a character 
                                   3376 ; received from STDIN 
                                   3377 ; input:
                                   3378 ;	none 
                                   3379 ; output:
                                   3380 ;	a	 character 
                                   3381 ;---------------------
      002991                       3382 key:
      002991 CD 08 E5         [ 4] 3383 	call getc 
      002994 81               [ 4] 3384 	ret
                                   3385 
                                   3386 ;----------------------
                                   3387 ; BASIC: QKEY
                                   3388 ; Return true if there 
                                   3389 ; is a character in 
                                   3390 ; waiting in STDIN 
                                   3391 ; input:
                                   3392 ;  none 
                                   3393 ; output:
                                   3394 ;   A     0|-1
                                   3395 ;-----------------------
      002995                       3396 qkey:: 
      002995 5F               [ 1] 3397 	clrw x 
      002996 C6 00 2E         [ 1] 3398 	ld a,rx1_head
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002999 C0 00 2F         [ 1] 3399 	sub a,rx1_tail 
      00299C 27 03            [ 1] 3400 	jreq 9$ 
      00299E 53               [ 2] 3401 	cplw x
      00299F A6 FF            [ 1] 3402 	ld a,#255    
      0029A1                       3403 9$: 
      0029A1 81               [ 4] 3404 	ret 
                                   3405 
                                   3406 ;---------------------
                                   3407 ; BASIC: GPIO(port,reg)
                                   3408 ; return gpio register address 
                                   3409 ; expr {PORTA..PORTI}
                                   3410 ; input:
                                   3411 ;   none 
                                   3412 ; output:
                                   3413 ;   A:X 	gpio register address
                                   3414 ;----------------------------
                                   3415 ;	N=PORT
                                   3416 ;	T=REG 
      0029A2                       3417 gpio:
      0029A2 CD 19 5D         [ 4] 3418 	call func_args 
      0029A5 A1 02            [ 1] 3419 	cp a,#2
      0029A7 27 03            [ 1] 3420 	jreq 1$
      0029A9 CC 16 30         [ 2] 3421 	jp syntax_error  
      0029AC                       3422 1$:	_at_next 
      0029AC 90 E6 03         [ 1]    1     ld a,(3,y)
      0029AF 93               [ 1]    2     ldw x,y 
      0029B0 EE 04            [ 2]    3     ldw x,(4,x)
      0029B2 A3 50 00         [ 2] 3423 	cpw x,#PA_BASE 
      0029B5 2B 16            [ 1] 3424 	jrmi bad_port
      0029B7 A3 50 29         [ 2] 3425 	cpw x,#PI_BASE+1 
      0029BA 2A 11            [ 1] 3426 	jrpl bad_port
      0029BC 89               [ 2] 3427 	pushw x 
      0029BD                       3428 	_xpop
      0029BD 90 F6            [ 1]    1     ld a,(y)
      0029BF 93               [ 1]    2     ldw x,y 
      0029C0 EE 01            [ 2]    3     ldw x,(1,x)
      0029C2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C6 72 FB 01         [ 2] 3429 	addw x,(1,sp)
      0029C9                       3430 	_drop 2 
      0029C9 5B 02            [ 2]    1     addw sp,#2 
      0029CB 4F               [ 1] 3431 	clr a 
      0029CC 81               [ 4] 3432 	ret
      0029CD                       3433 bad_port:
      0029CD A6 0A            [ 1] 3434 	ld a,#ERR_BAD_VALUE
      0029CF CC 16 32         [ 2] 3435 	jp tb_error
                                   3436 
                                   3437 
                                   3438 ;-------------------------
                                   3439 ; BASIC: UFLASH 
                                   3440 ; return free flash address
                                   3441 ; align to BLOCK address 
                                   3442 ; input:
                                   3443 ;  none 
                                   3444 ; output:
                                   3445 ;	A		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3446 ;   xstack	free address 
                                   3447 ;---------------------------
      0029D2                       3448 uflash:
      0029D2 CD 27 DE         [ 4] 3449 	call qsign 
      0029D5 26 13            [ 1] 3450 	jrne 1$
      0029D7 AE 36 00         [ 2] 3451 	ldw x,#app_space 
      0029DA 72 BB 36 02      [ 2] 3452 	addw x,app_size 
      0029DE 1C 00 04         [ 2] 3453 	addw x,#4
                                   3454 ; align on 128 bytes block 
      0029E1 1C 00 80         [ 2] 3455 	addw x,#BLOCK_SIZE 
      0029E4 9F               [ 1] 3456 	ld a,xl 
      0029E5 A4 80            [ 1] 3457 	and a,#0x80 
      0029E7 97               [ 1] 3458 	ld xl,a 
      0029E8 20 03            [ 2] 3459 	jra 2$
      0029EA AE 36 00         [ 2] 3460 1$:	ldw x,#app_space 
      0029ED                       3461 2$:
      0029ED 4F               [ 1] 3462 	clr a 
      0029EE 81               [ 4] 3463 	ret 
                                   3464 
                                   3465 
                                   3466 ;---------------------
                                   3467 ; BASIC: USR(addr,arg)
                                   3468 ; execute a function written 
                                   3469 ; in binary code.
                                   3470 ; input:
                                   3471 ;   addr	routine address 
                                   3472 ;   arg 	is an argument
                                   3473 ;           it can be ignore 
                                   3474 ;           by cally. 
                                   3475 ; output:
                                   3476 ;   xstack 	value returned by cally  
                                   3477 ;---------------------
      0029EF                       3478 usr:
      0029EF CD 19 5D         [ 4] 3479 	call func_args 
      0029F2 A1 02            [ 1] 3480 	cp a,#2
      0029F4 27 03            [ 1] 3481 	jreq 1$  
      0029F6 CC 16 30         [ 2] 3482 	jp syntax_error 
      0029F9                       3483 1$: 
      0029F9                       3484 	_at_next ; A:X addr 
      0029F9 90 E6 03         [ 1]    1     ld a,(3,y)
      0029FC 93               [ 1]    2     ldw x,y 
      0029FD EE 04            [ 2]    3     ldw x,(4,x)
      0029FF CF 00 19         [ 2] 3485 	ldw ptr16,X 
      002A02                       3486 	_xpop  ; arg 
      002A02 90 F6            [ 1]    1     ld a,(y)
      002A04 93               [ 1]    2     ldw x,y 
      002A05 EE 01            [ 2]    3     ldw x,(1,x)
      002A07 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A0B                       3487 	_store_top ; overwrite addr 
      002A0B 90 F7            [ 1]    1     ld (y),a 
      002A0D 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A10 72 CD 00 19      [ 6] 3488     call [ptr16]
      002A14 81               [ 4] 3489 	ret 
                                   3490 
                                   3491 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3492 ;------------------------------
                                   3493 ; BASIC: BYE 
                                   3494 ; halt mcu in its lowest power mode 
                                   3495 ; wait for reset or external interrupt
                                   3496 ; do a cold start on wakeup.
                                   3497 ;------------------------------
      002A15                       3498 bye:
      002A15 72 0D 52 30 FB   [ 2] 3499 	btjf UART1_SR,#UART_SR_TC,.
      002A1A 8E               [10] 3500 	halt
      002A1B CC 00 B5         [ 2] 3501 	jp cold_start  
                                   3502 
                                   3503 ;----------------------------------
                                   3504 ; BASIC: SLEEP 
                                   3505 ; halt mcu until reset or external
                                   3506 ; interrupt.
                                   3507 ; Resume progam after SLEEP command
                                   3508 ;----------------------------------
      002A1E                       3509 sleep:
      002A1E 72 0D 52 30 FB   [ 2] 3510 	btjf UART1_SR,#UART_SR_TC,.
      002A23 72 16 00 22      [ 1] 3511 	bset flags,#FSLEEP
      002A27 8E               [10] 3512 	halt 
      002A28 81               [ 4] 3513 	ret 
                                   3514 
                                   3515 ;-------------------------------
                                   3516 ; BASIC: PAUSE expr 
                                   3517 ; suspend execution for n msec.
                                   3518 ; input:
                                   3519 ;	none
                                   3520 ; output:
                                   3521 ;	none 
                                   3522 ;------------------------------
      002A29                       3523 pause:
      002A29 CD 1A A6         [ 4] 3524 	call expression
      002A2C A1 84            [ 1] 3525 	cp a,#TK_INTGR
      002A2E 27 03            [ 1] 3526 	jreq 1$ 
      002A30 CC 16 30         [ 2] 3527 	jp syntax_error
      002A33                       3528 1$: _xpop 
      002A33 90 F6            [ 1]    1     ld a,(y)
      002A35 93               [ 1]    2     ldw x,y 
      002A36 EE 01            [ 2]    3     ldw x,(1,x)
      002A38 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A3C                       3529 pause02:
      002A3C CF 00 12         [ 2] 3530 	ldw timer,x 
      002A3F CE 00 12         [ 2] 3531 1$: ldw x,timer 
      002A42 5D               [ 2] 3532 	tnzw x 
      002A43 27 03            [ 1] 3533 	jreq 2$
      002A45 8F               [10] 3534 	wfi 
      002A46 26 F7            [ 1] 3535 	jrne 1$
      002A48                       3536 2$:	
      002A48 81               [ 4] 3537 	ret 
                                   3538 
                                   3539 ;------------------------------
                                   3540 ; BASIC: AWU expr
                                   3541 ; halt mcu for 'expr' milliseconds
                                   3542 ; use Auto wakeup peripheral
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3543 ; all oscillators stopped except LSI
                                   3544 ; range: 1ms - 511ms
                                   3545 ; input:
                                   3546 ;  none
                                   3547 ; output:
                                   3548 ;  none:
                                   3549 ;------------------------------
      002A49                       3550 awu:
      002A49 CD 1A A6         [ 4] 3551   call expression
      002A4C A1 84            [ 1] 3552   cp a,#TK_INTGR
      002A4E 27 03            [ 1] 3553   jreq 1$
      002A50 CC 16 30         [ 2] 3554   jp syntax_error
      002A53                       3555 1$: _xpop 
      002A53 90 F6            [ 1]    1     ld a,(y)
      002A55 93               [ 1]    2     ldw x,y 
      002A56 EE 01            [ 2]    3     ldw x,(1,x)
      002A58 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A5C                       3556 awu02:
      002A5C A3 14 00         [ 2] 3557   cpw x,#5120
      002A5F 2B 0C            [ 1] 3558   jrmi 1$ 
      002A61 35 0F 50 F2      [ 1] 3559   mov AWU_TBR,#15 
      002A65 A6 1E            [ 1] 3560   ld a,#30
      002A67 62               [ 2] 3561   div x,a
      002A68 A6 10            [ 1] 3562   ld a,#16
      002A6A 62               [ 2] 3563   div x,a 
      002A6B 20 1E            [ 2] 3564   jra 4$
      002A6D                       3565 1$: 
      002A6D A3 08 00         [ 2] 3566   cpw x,#2048
      002A70 2B 09            [ 1] 3567   jrmi 2$ 
      002A72 35 0E 50 F2      [ 1] 3568   mov AWU_TBR,#14
      002A76 A6 50            [ 1] 3569   ld a,#80
      002A78 62               [ 2] 3570   div x,a 
      002A79 20 10            [ 2] 3571   jra 4$   
      002A7B                       3572 2$:
      002A7B 35 07 50 F2      [ 1] 3573   mov AWU_TBR,#7
      002A7F                       3574 3$:  
                                   3575 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A7F A3 00 40         [ 2] 3576   cpw x,#64 
      002A82 23 07            [ 2] 3577   jrule 4$ 
      002A84 72 5C 50 F2      [ 1] 3578   inc AWU_TBR 
      002A88 54               [ 2] 3579   srlw x 
      002A89 20 F4            [ 2] 3580   jra 3$ 
      002A8B                       3581 4$:
      002A8B 9F               [ 1] 3582   ld a, xl
      002A8C 4A               [ 1] 3583   dec a 
      002A8D 27 01            [ 1] 3584   jreq 5$
      002A8F 4A               [ 1] 3585   dec a 	
      002A90                       3586 5$: 
      002A90 A4 3E            [ 1] 3587   and a,#0x3e 
      002A92 C7 50 F1         [ 1] 3588   ld AWU_APR,a 
      002A95 72 18 50 F0      [ 1] 3589   bset AWU_CSR,#AWU_CSR_AWUEN
      002A99 8E               [10] 3590   halt 
                                   3591 
      002A9A 81               [ 4] 3592   ret 
                                   3593 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3594 ;------------------------------
                                   3595 ; BASIC: TICKS
                                   3596 ; return msec ticks counter value 
                                   3597 ; input:
                                   3598 ; 	none 
                                   3599 ; output:
                                   3600 ;	X 		TK_INTGR
                                   3601 ;-------------------------------
      002A9B                       3602 get_ticks:
      002A9B C6 00 0F         [ 1] 3603 	ld a,ticks 
      002A9E CE 00 10         [ 2] 3604 	ldw x,ticks+1 
      002AA1 81               [ 4] 3605 	ret 
                                   3606 
                                   3607 ;------------------------------
                                   3608 ; BASIC: ABS(expr)
                                   3609 ; return absolute value of expr.
                                   3610 ; input:
                                   3611 ;   none
                                   3612 ; output:
                                   3613 ;   xstack    positive int24 
                                   3614 ;-------------------------------
      002AA2                       3615 abs:
      002AA2 CD 19 5D         [ 4] 3616 	call func_args 
      002AA5 A1 01            [ 1] 3617 	cp a,#1 
      002AA7 27 03            [ 1] 3618 	jreq 0$ 
      002AA9 CC 16 30         [ 2] 3619 	jp syntax_error
      002AAC                       3620 0$:  
      002AAC CD 01 E0         [ 4] 3621 	call abs24 
      002AAF                       3622 	_xpop 
      002AAF 90 F6            [ 1]    1     ld a,(y)
      002AB1 93               [ 1]    2     ldw x,y 
      002AB2 EE 01            [ 2]    3     ldw x,(1,x)
      002AB4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AB8 81               [ 4] 3623 	ret 
                                   3624 
                                   3625 ;------------------------------
                                   3626 ; BASIC: LSHIFT(expr1,expr2)
                                   3627 ; logical shift left expr1 by 
                                   3628 ; expr2 bits 
                                   3629 ; output:
                                   3630 ; 	A:x 	result 
                                   3631 ;------------------------------
      002AB9                       3632 lshift:
      002AB9 CD 19 5D         [ 4] 3633 	call func_args
      002ABC A1 02            [ 1] 3634 	cp a,#2 
      002ABE 27 03            [ 1] 3635 	jreq 1$
      002AC0 CC 16 30         [ 2] 3636 	jp syntax_error
      002AC3                       3637 1$: _xpop 
      002AC3 90 F6            [ 1]    1     ld a,(y)
      002AC5 93               [ 1]    2     ldw x,y 
      002AC6 EE 01            [ 2]    3     ldw x,(1,x)
      002AC8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ACC 9F               [ 1] 3638 	ld a,xl 
      002ACD 88               [ 1] 3639 	push a      
      002ACE                       3640 	_xpop  ; T>A:X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002ACE 90 F6            [ 1]    1     ld a,(y)
      002AD0 93               [ 1]    2     ldw x,y 
      002AD1 EE 01            [ 2]    3     ldw x,(1,x)
      002AD3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AD7 0D 01            [ 1] 3641 	tnz (1,sp) 
      002AD9 27 07            [ 1] 3642 	jreq 4$
      002ADB 98               [ 1] 3643 2$:	rcf 
      002ADC 59               [ 2] 3644 	rlcw x 
      002ADD 49               [ 1] 3645 	rlc a 
      002ADE 0A 01            [ 1] 3646 	dec (1,sp) 
      002AE0 26 F9            [ 1] 3647 	jrne 2$
      002AE2                       3648 4$: _drop 1 
      002AE2 5B 01            [ 2]    1     addw sp,#1 
      002AE4 81               [ 4] 3649 	ret
                                   3650 
                                   3651 ;------------------------------
                                   3652 ; BASIC: RSHIFT(expr1,expr2)
                                   3653 ; logical shift right expr1 by 
                                   3654 ; expr2 bits.
                                   3655 ; output:
                                   3656 ; 	A 		TK_INTGR
                                   3657 ;   X 		result 
                                   3658 ;------------------------------
      002AE5                       3659 rshift:
      002AE5 CD 19 5D         [ 4] 3660 	call func_args
      002AE8 A1 02            [ 1] 3661 	cp a,#2 
      002AEA 27 03            [ 1] 3662 	jreq 1$
      002AEC CC 16 30         [ 2] 3663 	jp syntax_error
      002AEF                       3664 1$: _xpop ; T>A:X
      002AEF 90 F6            [ 1]    1     ld a,(y)
      002AF1 93               [ 1]    2     ldw x,y 
      002AF2 EE 01            [ 2]    3     ldw x,(1,x)
      002AF4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AF8 9F               [ 1] 3665     ld a,xl 
      002AF9 88               [ 1] 3666 	push a    
      002AFA                       3667 	_xpop  
      002AFA 90 F6            [ 1]    1     ld a,(y)
      002AFC 93               [ 1]    2     ldw x,y 
      002AFD EE 01            [ 2]    3     ldw x,(1,x)
      002AFF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B03 0D 01            [ 1] 3668 	tnz (1,sp)
      002B05 27 07            [ 1] 3669 	jreq 4$
      002B07 98               [ 1] 3670 2$:	rcf 
      002B08 46               [ 1] 3671 	rrc a 
      002B09 56               [ 2] 3672 	rrcw x 
      002B0A 0A 01            [ 1] 3673 	dec (1,sp) 
      002B0C 26 F9            [ 1] 3674 	jrne 2$
      002B0E                       3675 4$: _drop 1 
      002B0E 5B 01            [ 2]    1     addw sp,#1 
      002B10 81               [ 4] 3676 	ret
                                   3677 
                                   3678 ;--------------------------
                                   3679 ; BASIC: FCPU integer
                                   3680 ; set CPU frequency 
                                   3681 ;-------------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3682 
      002B11                       3683 fcpu:
      002B11 A6 84            [ 1] 3684 	ld a,#TK_INTGR
      002B13 CD 19 50         [ 4] 3685 	call expect 
      002B16 CD 17 CC         [ 4] 3686 	call get_int24 
      002B19 9F               [ 1] 3687 	ld a,xl 
      002B1A A4 07            [ 1] 3688 	and a,#7 
      002B1C C7 50 C6         [ 1] 3689 	ld CLK_CKDIVR,a 
      002B1F 81               [ 4] 3690 	ret 
                                   3691 
                                   3692 ;------------------------------
                                   3693 ; BASIC: PMODE pin#, mode 
                                   3694 ; Arduino pin. 
                                   3695 ; define pin as input or output
                                   3696 ; pin#: {0..15}
                                   3697 ; mode: INPUT|OUTPUT  
                                   3698 ;------------------------------
                           000001  3699 	PINNO=1
                           000001  3700 	VSIZE=1
      002B20                       3701 pin_mode:
      002B20                       3702 	_vars VSIZE 
      002B20 52 01            [ 2]    1     sub sp,#VSIZE 
      002B22 CD 19 62         [ 4] 3703 	call arg_list 
      002B25 A1 02            [ 1] 3704 	cp a,#2 
      002B27 27 03            [ 1] 3705 	jreq 1$
      002B29 CC 16 30         [ 2] 3706 	jp syntax_error 
      002B2C                       3707 1$: _xpop 
      002B2C 90 F6            [ 1]    1     ld a,(y)
      002B2E 93               [ 1]    2     ldw x,y 
      002B2F EE 01            [ 2]    3     ldw x,(1,x)
      002B31 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B35 CF 00 19         [ 2] 3708 	ldw ptr16,x ; mode 
      002B38                       3709 	_xpop ; Dx pin 
      002B38 90 F6            [ 1]    1     ld a,(y)
      002B3A 93               [ 1]    2     ldw x,y 
      002B3B EE 01            [ 2]    3     ldw x,(1,x)
      002B3D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B41 CD 2B 7F         [ 4] 3710 	call select_pin 
      002B44 6B 01            [ 1] 3711 	ld (PINNO,sp),a  
      002B46 A6 01            [ 1] 3712 	ld a,#1 
      002B48 0D 01            [ 1] 3713 	tnz (PINNO,sp)
      002B4A 27 0D            [ 1] 3714 	jreq 4$
      002B4C 48               [ 1] 3715 2$:	sll a 
      002B4D 0A 01            [ 1] 3716 	dec (PINNO,sp)
      002B4F 26 FB            [ 1] 3717 	jrne 2$ 
      002B51 6B 01            [ 1] 3718 	ld (PINNO,sp),a
      002B53 7B 01            [ 1] 3719 	ld a,(PINNO,sp)
      002B55 EA 03            [ 1] 3720 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B57 E7 03            [ 1] 3721 	ld (GPIO_CR1,x),a 
      002B59 A6 01            [ 1] 3722 4$:	ld a,#OUTP
      002B5B C1 00 0E         [ 1] 3723 	cp a,acc8 
      002B5E 27 10            [ 1] 3724 	jreq 6$
                                   3725 ; input mode
                                   3726 ; disable external interrupt 
      002B60 7B 01            [ 1] 3727 	ld a,(PINNO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002B62 43               [ 1] 3728 	cpl a 
      002B63 E4 04            [ 1] 3729 	and a,(GPIO_CR2,x)
      002B65 E7 04            [ 1] 3730 	ld (GPIO_CR2,x),a 
                                   3731 ;clear bit in DDR for input mode 
      002B67 7B 01            [ 1] 3732 	ld a,(PINNO,sp)
      002B69 43               [ 1] 3733 	cpl a 
      002B6A E4 02            [ 1] 3734 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B6C E7 02            [ 1] 3735 	ld (GPIO_DDR,x),a 
      002B6E 20 0C            [ 2] 3736 	jra 9$
      002B70                       3737 6$: ;output mode  
      002B70 7B 01            [ 1] 3738 	ld a,(PINNO,sp)
      002B72 EA 02            [ 1] 3739 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B74 E7 02            [ 1] 3740 	ld (GPIO_DDR,x),a 
      002B76 7B 01            [ 1] 3741 	ld a,(PINNO,sp)
      002B78 EA 04            [ 1] 3742 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B7A E7 04            [ 1] 3743 	ld (GPIO_CR2,x),a 
      002B7C                       3744 9$:	
      002B7C                       3745 	_drop VSIZE 
      002B7C 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B7E 81               [ 4] 3746 	ret
                                   3747 
                                   3748 ;------------------------
                                   3749 ; select Arduino pin 
                                   3750 ; input:
                                   3751 ;   X 	 {0..15} Arduino Dx 
                                   3752 ; output:
                                   3753 ;   A     stm8s208 pin 
                                   3754 ;   X     base address s208 GPIO port 
                                   3755 ;---------------------------
      002B7F                       3756 select_pin:
      002B7F 58               [ 2] 3757 	sllw x 
      002B80 1C 2B 8F         [ 2] 3758 	addw x,#arduino_to_8s208 
      002B83 FE               [ 2] 3759 	ldw x,(x)
      002B84 9F               [ 1] 3760 	ld a,xl 
      002B85 88               [ 1] 3761 	push a 
      002B86 5E               [ 1] 3762 	swapw x 
      002B87 A6 05            [ 1] 3763 	ld a,#5 
      002B89 42               [ 4] 3764 	mul x,a 
      002B8A 1C 50 00         [ 2] 3765 	addw x,#GPIO_BASE 
      002B8D 84               [ 1] 3766 	pop a 
      002B8E 81               [ 4] 3767 	ret 
                                   3768 ; translation from Arduino D0..D15 to stm8s208rb 
      002B8F                       3769 arduino_to_8s208:
      002B8F 03 06                 3770 .byte 3,6 ; D0 
      002B91 03 05                 3771 .byte 3,5 ; D1 
      002B93 04 00                 3772 .byte 4,0 ; D2 
      002B95 02 01                 3773 .byte 2,1 ; D3
      002B97 06 00                 3774 .byte 6,0 ; D4
      002B99 02 02                 3775 .byte 2,2 ; D5
      002B9B 02 03                 3776 .byte 2,3 ; D6
      002B9D 03 01                 3777 .byte 3,1 ; D7
      002B9F 03 03                 3778 .byte 3,3 ; D8
      002BA1 02 04                 3779 .byte 2,4 ; D9
      002BA3 04 05                 3780 .byte 4,5 ; D10
      002BA5 02 06                 3781 .byte 2,6 ; D11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002BA7 02 07                 3782 .byte 2,7 ; D12
      002BA9 02 05                 3783 .byte 2,5 ; D13
      002BAB 04 02                 3784 .byte 4,2 ; D14
      002BAD 04 01                 3785 .byte 4,1 ; D15
                                   3786 
                                   3787 
                                   3788 ;------------------------------
                                   3789 ; BASIC: RND(expr)
                                   3790 ; return random number 
                                   3791 ; between 1 and expr inclusive
                                   3792 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3793 ; input:
                                   3794 ; 	none 
                                   3795 ; output:
                                   3796 ;	xstack 	random positive integer 
                                   3797 ;------------------------------
      002BAF                       3798 random:
      002BAF CD 19 5D         [ 4] 3799 	call func_args 
      002BB2 A1 01            [ 1] 3800 	cp a,#1
      002BB4 27 03            [ 1] 3801 	jreq 1$
      002BB6 CC 16 30         [ 2] 3802 	jp syntax_error
      002BB9                       3803 1$:  
      002BB9                       3804 	_xpop   
      002BB9 90 F6            [ 1]    1     ld a,(y)
      002BBB 93               [ 1]    2     ldw x,y 
      002BBC EE 01            [ 2]    3     ldw x,(1,x)
      002BBE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BC2 89               [ 2] 3805 	pushw x 
      002BC3 88               [ 1] 3806 	push a  
      002BC4 A6 80            [ 1] 3807 	ld a,#0x80 
      002BC6 15 01            [ 1] 3808 	bcp a,(1,sp)
      002BC8 27 05            [ 1] 3809 	jreq 2$
      002BCA A6 0A            [ 1] 3810 	ld a,#ERR_BAD_VALUE
      002BCC CC 16 32         [ 2] 3811 	jp tb_error
      002BCF                       3812 2$: 
                                   3813 ; acc16=(x<<5)^x 
      002BCF CE 00 14         [ 2] 3814 	ldw x,seedx 
      002BD2 58               [ 2] 3815 	sllw x 
      002BD3 58               [ 2] 3816 	sllw x 
      002BD4 58               [ 2] 3817 	sllw x 
      002BD5 58               [ 2] 3818 	sllw x 
      002BD6 58               [ 2] 3819 	sllw x 
      002BD7 9E               [ 1] 3820 	ld a,xh 
      002BD8 C8 00 14         [ 1] 3821 	xor a,seedx 
      002BDB C7 00 0D         [ 1] 3822 	ld acc16,a 
      002BDE 9F               [ 1] 3823 	ld a,xl 
      002BDF C8 00 15         [ 1] 3824 	xor a,seedx+1 
      002BE2 C7 00 0E         [ 1] 3825 	ld acc8,a 
                                   3826 ; seedx=seedy 
      002BE5 CE 00 16         [ 2] 3827 	ldw x,seedy 
      002BE8 CF 00 14         [ 2] 3828 	ldw seedx,x  
                                   3829 ; seedy=seedy^(seedy>>1)
      002BEB CE 00 16         [ 2] 3830 	ldw x,seedy 
      002BEE 54               [ 2] 3831 	srlw x 
      002BEF 9E               [ 1] 3832 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002BF0 C8 00 16         [ 1] 3833 	xor a,seedy 
      002BF3 C7 00 16         [ 1] 3834 	ld seedy,a  
      002BF6 9F               [ 1] 3835 	ld a,xl 
      002BF7 C8 00 17         [ 1] 3836 	xor a,seedy+1 
      002BFA C7 00 17         [ 1] 3837 	ld seedy+1,a 
                                   3838 ; acc16>>3 
      002BFD CE 00 0D         [ 2] 3839 	ldw x,acc16 
      002C00 54               [ 2] 3840 	srlw x 
      002C01 54               [ 2] 3841 	srlw x 
      002C02 54               [ 2] 3842 	srlw x 
                                   3843 ; x=acc16^x 
      002C03 9E               [ 1] 3844 	ld a,xh 
      002C04 C8 00 0D         [ 1] 3845 	xor a,acc16 
      002C07 C7 00 0D         [ 1] 3846 	ld acc16,a 
      002C0A 9F               [ 1] 3847 	ld a,xl 
      002C0B C8 00 0E         [ 1] 3848 	xor a,acc8 
      002C0E C7 00 0E         [ 1] 3849 	ld acc8,a 
                                   3850 ; seedy=acc16^seedy 
      002C11 C8 00 17         [ 1] 3851 	xor a,seedy+1
      002C14 97               [ 1] 3852 	ld xl,a 
      002C15 C6 00 0D         [ 1] 3853 	ld a,acc16 
      002C18 C8 00 16         [ 1] 3854 	xor a,seedy
      002C1B 95               [ 1] 3855 	ld xh,a 
      002C1C CF 00 16         [ 2] 3856 	ldw seedy,x 
                                   3857 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002C1F C6 00 15         [ 1] 3858 	ld a,seedx+1
      002C22 A4 7F            [ 1] 3859 	and a,#127
      002C24                       3860 	_xpush 
      002C24 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C28 90 F7            [ 1]    2     ld (y),a 
      002C2A 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C2D 84               [ 1] 3861 	pop a 
      002C2E 85               [ 2] 3862 	popw x 
      002C2F                       3863 	_xpush 
      002C2F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C33 90 F7            [ 1]    2     ld (y),a 
      002C35 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C38 CD 03 8E         [ 4] 3864 	call mod24 
      002C3B                       3865 	_xpop
      002C3B 90 F6            [ 1]    1     ld a,(y)
      002C3D 93               [ 1]    2     ldw x,y 
      002C3E EE 01            [ 2]    3     ldw x,(1,x)
      002C40 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C44 1C 00 01         [ 2] 3866 	addw x,#1 
      002C47 A9 00            [ 1] 3867 	adc a,#0  
      002C49 81               [ 4] 3868 	ret 
                                   3869 
                                   3870 ;---------------------------------
                                   3871 ; BASIC: WORDS 
                                   3872 ; affiche la listes des mots du
                                   3873 ; dictionnaire ainsi que le nombre
                                   3874 ; de mots.
                                   3875 ;---------------------------------
                           000001  3876 	WLEN=1 ; word length
                           000002  3877 	LLEN=2 ; character sent to console
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                           000003  3878 	WCNT=3 ; count words printed 
                           000003  3879 	VSIZE=3 
      002C4A                       3880 words:
      002C4A 90 89            [ 2] 3881 	pushw y
      002C4C                       3882 	_vars VSIZE
      002C4C 52 03            [ 2]    1     sub sp,#VSIZE 
      002C4E 0F 02            [ 1] 3883 	clr (LLEN,sp)
      002C50 0F 03            [ 1] 3884 	clr (WCNT,sp)
      002C52 90 AE 34 1F      [ 2] 3885 	ldw y,#kword_dict+2
      002C56 93               [ 1] 3886 0$:	ldw x,y
      002C57 F6               [ 1] 3887 	ld a,(x)
      002C58 A4 0F            [ 1] 3888 	and a,#15 
      002C5A 6B 01            [ 1] 3889 	ld (WLEN,sp),a 
      002C5C 0C 03            [ 1] 3890 	inc (WCNT,sp)
      002C5E 5C               [ 1] 3891 1$:	incw x 
      002C5F F6               [ 1] 3892 	ld a,(x)
      002C60 CD 08 D5         [ 4] 3893 	call putc 
      002C63 0C 02            [ 1] 3894 	inc (LLEN,sp)
      002C65 0A 01            [ 1] 3895 	dec (WLEN,sp)
      002C67 26 F5            [ 1] 3896 	jrne 1$
      002C69 A6 46            [ 1] 3897 	ld a,#70
      002C6B 11 02            [ 1] 3898 	cp a,(LLEN,sp)
      002C6D 2B 09            [ 1] 3899 	jrmi 2$   
      002C6F A6 20            [ 1] 3900 	ld a,#SPACE 
      002C71 CD 08 D5         [ 4] 3901 	call putc 
      002C74 0C 02            [ 1] 3902 	inc (LLEN,sp) 
      002C76 20 07            [ 2] 3903 	jra 3$
      002C78 A6 0D            [ 1] 3904 2$: ld a,#CR 
      002C7A CD 08 D5         [ 4] 3905 	call putc 
      002C7D 0F 02            [ 1] 3906 	clr (LLEN,sp)
      002C7F 72 A2 00 02      [ 2] 3907 3$:	subw y,#2 
      002C83 90 FE            [ 2] 3908 	ldw y,(y)
      002C85 26 CF            [ 1] 3909 	jrne 0$ 
      002C87 A6 0D            [ 1] 3910 	ld a,#CR 
      002C89 CD 08 D5         [ 4] 3911 	call putc  
      002C8C 5F               [ 1] 3912 	clrw x 
      002C8D 7B 03            [ 1] 3913 	ld a,(WCNT,sp)
      002C8F 97               [ 1] 3914 	ld xl,a 
      002C90 CD 17 E2         [ 4] 3915 	call prt_i16 
      002C93 AE 2C 9E         [ 2] 3916 	ldw x,#words_count_msg
      002C96 CD 09 32         [ 4] 3917 	call puts 
      002C99                       3918 	_drop VSIZE 
      002C99 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C9B 90 85            [ 2] 3919 	popw y 
      002C9D 81               [ 4] 3920 	ret 
      002C9E 20 77 6F 72 64 73 20  3921 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3922 
                                   3923 
                                   3924 ;-----------------------------
                                   3925 ; BASIC: TIMER expr 
                                   3926 ; initialize count down timer 
                                   3927 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002CB4                       3928 set_timer:
      002CB4 CD 19 62         [ 4] 3929 	call arg_list
      002CB7 A1 01            [ 1] 3930 	cp a,#1 
      002CB9 27 03            [ 1] 3931 	jreq 1$
      002CBB CC 16 30         [ 2] 3932 	jp syntax_error
      002CBE                       3933 1$: 
      002CBE                       3934 	_xpop  
      002CBE 90 F6            [ 1]    1     ld a,(y)
      002CC0 93               [ 1]    2     ldw x,y 
      002CC1 EE 01            [ 2]    3     ldw x,(1,x)
      002CC3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CC7 CF 00 12         [ 2] 3935 	ldw timer,x 
      002CCA 81               [ 4] 3936 	ret 
                                   3937 
                                   3938 ;------------------------------
                                   3939 ; BASIC: TIMEOUT 
                                   3940 ; return state of timer 
                                   3941 ; output:
                                   3942 ;   A:X     0 not timeout 
                                   3943 ;   A:X     -1 timeout 
                                   3944 ;------------------------------
      002CCB                       3945 timeout:
      002CCB 4F               [ 1] 3946 	clr a 
      002CCC CE 00 12         [ 2] 3947 	ldw x,timer 
      002CCF 27 02            [ 1] 3948 	jreq 1$
      002CD1 5F               [ 1] 3949 	clrw x
      002CD2 81               [ 4] 3950 	ret  
      002CD3 43               [ 1] 3951 1$:	cpl a
      002CD4 53               [ 2] 3952 	cplw x 
      002CD5 81               [ 4] 3953 	ret 
                                   3954  	
                                   3955 
                                   3956 
                                   3957 
                                   3958 ;-----------------------------------
                                   3959 ; BASIC: IWDGEN expr1 
                                   3960 ; enable independant watchdog timer
                                   3961 ; expr1 is delay in multiple of 62.5µsec
                                   3962 ; expr1 -> {1..16383}
                                   3963 ;-----------------------------------
      002CD6                       3964 enable_iwdg:
      002CD6 CD 19 62         [ 4] 3965 	call arg_list
      002CD9 A1 01            [ 1] 3966 	cp a,#1 
      002CDB 27 03            [ 1] 3967 	jreq 1$
      002CDD CC 16 30         [ 2] 3968 	jp syntax_error 
      002CE0                       3969 1$: _xpop  
      002CE0 90 F6            [ 1]    1     ld a,(y)
      002CE2 93               [ 1]    2     ldw x,y 
      002CE3 EE 01            [ 2]    3     ldw x,(1,x)
      002CE5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CE9 4B 00            [ 1] 3970 	push #0
      002CEB 35 CC 50 E0      [ 1] 3971 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CEF 9E               [ 1] 3972 	ld a,xh 
      002CF0 A4 3F            [ 1] 3973 	and a,#0x3f
      002CF2 95               [ 1] 3974 	ld xh,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002CF3 A3 00 FF         [ 2] 3975 2$:	cpw x,#255
      002CF6 23 06            [ 2] 3976 	jrule 3$
      002CF8 0C 01            [ 1] 3977 	inc (1,sp)
      002CFA 98               [ 1] 3978 	rcf 
      002CFB 56               [ 2] 3979 	rrcw x 
      002CFC 20 F5            [ 2] 3980 	jra 2$
      002CFE 35 55 50 E0      [ 1] 3981 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D02 84               [ 1] 3982 	pop a  
      002D03 C7 50 E1         [ 1] 3983 	ld IWDG_PR,a 
      002D06 9F               [ 1] 3984 	ld a,xl
      002D07 4A               [ 1] 3985 	dec a 
      002D08 35 55 50 E0      [ 1] 3986 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D0C C7 50 E2         [ 1] 3987 	ld IWDG_RLR,a 
      002D0F 35 AA 50 E0      [ 1] 3988 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D13 81               [ 4] 3989 	ret 
                                   3990 
                                   3991 
                                   3992 ;-----------------------------------
                                   3993 ; BASIC: IWDGREF  
                                   3994 ; refresh independant watchdog count down 
                                   3995 ; timer before it reset MCU. 
                                   3996 ;-----------------------------------
      002D14                       3997 refresh_iwdg:
      002D14 35 AA 50 E0      [ 1] 3998 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D18 81               [ 4] 3999 	ret 
                                   4000 
                                   4001 
                                   4002 ;-------------------------------------
                                   4003 ; BASIC: LOG2(expr)
                                   4004 ; return logarithm base 2 of expr 
                                   4005 ; this is the position of most significant
                                   4006 ; bit set. 
                                   4007 ; input: 
                                   4008 ; output:
                                   4009 ;   A     TK_INTGR 
                                   4010 ;   xstack log2 
                                   4011 ;*********************************
      002D19                       4012 log2:
      002D19 CD 19 5D         [ 4] 4013 	call func_args 
      002D1C A1 01            [ 1] 4014 	cp a,#1 
      002D1E 27 03            [ 1] 4015 	jreq 1$
      002D20 CC 16 30         [ 2] 4016 	jp syntax_error 
      002D23                       4017 1$: 
      002D23                       4018 	_xpop    
      002D23 90 F6            [ 1]    1     ld a,(y)
      002D25 93               [ 1]    2     ldw x,y 
      002D26 EE 01            [ 2]    3     ldw x,(1,x)
      002D28 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D2C 4D               [ 1] 4019 	tnz a
      002D2D 26 08            [ 1] 4020 	jrne 2$ 
      002D2F 5D               [ 2] 4021 	tnzw x 
      002D30 26 05            [ 1] 4022 	jrne 2$
      002D32 A6 0A            [ 1] 4023 	ld a,#ERR_BAD_VALUE
      002D34 CC 16 32         [ 2] 4024 	jp tb_error 
      002D37 4B 18            [ 1] 4025 2$: push #24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002D39 59               [ 2] 4026 3$: rlcw x 
      002D3A 49               [ 1] 4027     rlc a 
      002D3B 25 04            [ 1] 4028 	jrc 4$
      002D3D 0A 01            [ 1] 4029 	dec (1,sp) 
      002D3F 26 F8            [ 1] 4030 	jrne 3$
      002D41 5F               [ 1] 4031 4$: clrw x 
      002D42 84               [ 1] 4032     pop a 
      002D43 4A               [ 1] 4033 	dec a
      002D44 02               [ 1] 4034 	rlwa x  
      002D45                       4035 9$:	
      002D45 81               [ 4] 4036 	ret 
                                   4037 
                                   4038 ;-----------------------------------
                                   4039 ; BASIC: BIT(expr) 
                                   4040 ; expr ->{0..23}
                                   4041 ; return 2^expr 
                                   4042 ; output:
                                   4043 ;    A:X    2^expr 
                                   4044 ;-----------------------------------
      002D46                       4045 bitmask:
      002D46 CD 19 5D         [ 4] 4046     call func_args 
      002D49 A1 01            [ 1] 4047 	cp a,#1
      002D4B 27 03            [ 1] 4048 	jreq 1$
      002D4D CC 16 30         [ 2] 4049 	jp syntax_error 
      002D50                       4050 1$: _xpop 
      002D50 90 F6            [ 1]    1     ld a,(y)
      002D52 93               [ 1]    2     ldw x,y 
      002D53 EE 01            [ 2]    3     ldw x,(1,x)
      002D55 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D59 9F               [ 1] 4051 	ld a,xl 
      002D5A AE 00 01         [ 2] 4052 	ldw x,#1 
      002D5D A4 17            [ 1] 4053 	and a,#23
      002D5F 27 0A            [ 1] 4054 	jreq 9$
      002D61 88               [ 1] 4055 	push a 
      002D62 4F               [ 1] 4056 	clr a 
      002D63                       4057 2$: 
      002D63 58               [ 2] 4058 	slaw x 
      002D64 49               [ 1] 4059 	rlc a 	
      002D65 0A 01            [ 1] 4060 	dec (1,sp)
      002D67 26 FA            [ 1] 4061 	jrne 2$ 
      002D69                       4062 4$:
      002D69                       4063     _drop 1 
      002D69 5B 01            [ 2]    1     addw sp,#1 
      002D6B 81               [ 4] 4064 9$:	ret 
                                   4065 
                                   4066 ;------------------------------
                                   4067 ; BASIC: DO 
                                   4068 ; initiate a DO ... UNTIL loop 
                                   4069 ;------------------------------
                           000003  4070 	DOLP_ADR=3 
                           000005  4071 	DOLP_INW=5
                           000004  4072 	VSIZE=4 
      002D6C                       4073 do_loop:
      002D6C 85               [ 2] 4074 	popw x 
      002D6D                       4075 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002D6D 52 04            [ 2]    1     sub sp,#VSIZE 
      002D6F 89               [ 2] 4076 	pushw x 
      002D70 CE 00 04         [ 2] 4077 	ldw x,basicptr 
      002D73 1F 03            [ 2] 4078 	ldw (DOLP_ADR,sp),x
      002D75 CE 00 00         [ 2] 4079 	ldw x,in.w 
      002D78 1F 05            [ 2] 4080 	ldw (DOLP_INW,sp),x
      002D7A 72 5C 00 1F      [ 1] 4081 	inc loop_depth 
      002D7E 81               [ 4] 4082 	ret 
                                   4083 
                                   4084 ;--------------------------------
                                   4085 ; BASIC: UNTIL expr 
                                   4086 ; loop if exprssion is false 
                                   4087 ; else terminate loop
                                   4088 ;--------------------------------
      002D7F                       4089 until: 
      002D7F 72 5D 00 1F      [ 1] 4090 	tnz loop_depth 
      002D83 26 03            [ 1] 4091 	jrne 1$ 
      002D85 CC 16 30         [ 2] 4092 	jp syntax_error 
      002D88                       4093 1$: 
      002D88 CD 1B BF         [ 4] 4094 	call condition  
      002D8B                       4095 	_xpop 
      002D8B 90 F6            [ 1]    1     ld a,(y)
      002D8D 93               [ 1]    2     ldw x,y 
      002D8E EE 01            [ 2]    3     ldw x,(1,x)
      002D90 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D94 4D               [ 1] 4096 	tnz a 
      002D95 26 13            [ 1] 4097 	jrne 9$ 
      002D97 5D               [ 2] 4098 	tnzw x 
      002D98 26 10            [ 1] 4099 	jrne 9$ 
      002D9A 1E 03            [ 2] 4100 	ldw x,(DOLP_ADR,sp)
      002D9C CF 00 04         [ 2] 4101 	ldw basicptr,x 
      002D9F E6 02            [ 1] 4102 	ld a,(2,x)
      002DA1 C7 00 03         [ 1] 4103 	ld count,a 
      002DA4 1E 05            [ 2] 4104 	ldw x,(DOLP_INW,sp)
      002DA6 CF 00 00         [ 2] 4105 	ldw in.w,x 
      002DA9 81               [ 4] 4106 	ret 
      002DAA                       4107 9$:	; remove loop data from stack  
      002DAA 85               [ 2] 4108 	popw x
      002DAB                       4109 	_drop VSIZE
      002DAB 5B 04            [ 2]    1     addw sp,#VSIZE 
      002DAD 72 5A 00 1F      [ 1] 4110 	dec loop_depth 
      002DB1 FC               [ 2] 4111 	jp (x)
                                   4112 
                                   4113 ;--------------------------
                                   4114 ; BASIC: PORTA...PORTI  
                                   4115 ;  return constant value 
                                   4116 ;  PORT  base address 
                                   4117 ;---------------------------
      002DB2                       4118 const_porta:
      002DB2 AE 50 00         [ 2] 4119 	ldw x,#PA_BASE 
      002DB5 4F               [ 1] 4120 	clr a 
      002DB6 81               [ 4] 4121 	ret 
      002DB7                       4122 const_portb:
      002DB7 AE 50 05         [ 2] 4123 	ldw x,#PB_BASE 
      002DBA 4F               [ 1] 4124 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002DBB 81               [ 4] 4125 	ret 
      002DBC                       4126 const_portc:
      002DBC AE 50 0A         [ 2] 4127 	ldw x,#PC_BASE 
      002DBF 4F               [ 1] 4128 	clr a 
      002DC0 81               [ 4] 4129 	ret 
      002DC1                       4130 const_portd:
      002DC1 AE 50 0F         [ 2] 4131 	ldw x,#PD_BASE 
      002DC4 4F               [ 1] 4132 	clr a 
      002DC5 81               [ 4] 4133 	ret 
      002DC6                       4134 const_porte:
      002DC6 AE 50 14         [ 2] 4135 	ldw x,#PE_BASE 
      002DC9 4F               [ 1] 4136 	clr a 
      002DCA 81               [ 4] 4137 	ret 
      002DCB                       4138 const_portf:
      002DCB AE 50 19         [ 2] 4139 	ldw x,#PF_BASE 
      002DCE 4F               [ 1] 4140 	clr a 
      002DCF 81               [ 4] 4141 	ret 
      002DD0                       4142 const_portg:
      002DD0 AE 50 1E         [ 2] 4143 	ldw x,#PG_BASE 
      002DD3 4F               [ 1] 4144 	clr a 
      002DD4 81               [ 4] 4145 	ret 
      002DD5                       4146 const_porti:
      002DD5 AE 50 28         [ 2] 4147 	ldw x,#PI_BASE 
      002DD8 4F               [ 1] 4148 	clr a 
      002DD9 81               [ 4] 4149 	ret 
                                   4150 
                                   4151 ;-------------------------------
                                   4152 ; following return constant 
                                   4153 ; related to GPIO register offset 
                                   4154 ;---------------------------------
      002DDA                       4155 const_odr:
      002DDA 4F               [ 1] 4156 	clr a 
      002DDB AE 00 00         [ 2] 4157 	ldw x,#GPIO_ODR
      002DDE 81               [ 4] 4158 	ret 
      002DDF                       4159 const_idr:
      002DDF 4F               [ 1] 4160 	clr a 
      002DE0 AE 00 01         [ 2] 4161 	ldw x,#GPIO_IDR
      002DE3 81               [ 4] 4162 	ret 
      002DE4                       4163 const_ddr:
      002DE4 4F               [ 1] 4164 	clr a
      002DE5 AE 00 02         [ 2] 4165 	ldw x,#GPIO_DDR
      002DE8 81               [ 4] 4166 	ret 
      002DE9                       4167 const_cr1:
      002DE9 4F               [ 1] 4168 	clr a 
      002DEA AE 00 03         [ 2] 4169 	ldw x,#GPIO_CR1
      002DED 81               [ 4] 4170 	ret 
      002DEE                       4171 const_cr2:
      002DEE 4F               [ 1] 4172 	clr a
      002DEF AE 00 04         [ 2] 4173 	ldw x,#GPIO_CR2
      002DF2 81               [ 4] 4174 	ret 
                                   4175 ;-------------------------
                                   4176 ; BASIC: POUT 
                                   4177 ;  constant for port mode
                                   4178 ;  used by PMODE 
                                   4179 ;  to set pin as output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   4180 ;------------------------
      002DF3                       4181 const_output:
      002DF3 4F               [ 1] 4182 	clr a 
      002DF4 AE 00 01         [ 2] 4183 	ldw x,#OUTP
      002DF7 81               [ 4] 4184 	ret 
                                   4185 
                                   4186 ;-------------------------
                                   4187 ; BASIC: PINP 
                                   4188 ;  constant for port mode
                                   4189 ;  used by PMODE 
                                   4190 ;  to set pin as input
                                   4191 ;------------------------
      002DF8                       4192 const_input:
      002DF8 4F               [ 1] 4193 	clr a  
      002DF9 AE 00 00         [ 2] 4194 	ldw x,#INP 
      002DFC 81               [ 4] 4195 	ret 
                                   4196 	
                                   4197 ;-----------------------
                                   4198 ; memory area constants
                                   4199 ;-----------------------
      002DFD                       4200 const_eeprom_base:
      002DFD 4F               [ 1] 4201 	clr a  
      002DFE AE 40 00         [ 2] 4202 	ldw x,#EEPROM_BASE 
      002E01 81               [ 4] 4203 	ret 
                                   4204 
                                   4205 ;---------------------------
                                   4206 ; BASIC: DATA 
                                   4207 ; when the interpreter find 
                                   4208 ; a DATA line it skip it.
                                   4209 ;---------------------------
      002E02                       4210 data:
      002E02 55 00 03 00 01   [ 1] 4211 	mov in,count 
      002E07 81               [ 4] 4212 	ret 
                                   4213 
                                   4214 ;------------------------------
                                   4215 ; check if it is a DATA line 
                                   4216 ; input: 
                                   4217 ;    X    line address 
                                   4218 ; output:
                                   4219 ;    Z    set if DATA line 
                                   4220 ;----------------------------
      002E08                       4221 is_data_line:
      002E08 89               [ 2] 4222 	pushw x 
      002E09 E6 03            [ 1] 4223 	ld a,(3,x)
      002E0B A1 80            [ 1] 4224 	cp a,#TK_CMD 
      002E0D 26 05            [ 1] 4225 	jrne 9$
      002E0F EE 04            [ 2] 4226 	ldw x,(4,x)
      002E11 A3 2E 02         [ 2] 4227 	cpw x,#data  
      002E14 85               [ 2] 4228 9$: popw x 
      002E15 81               [ 4] 4229 	ret 
                                   4230 
                                   4231 ;---------------------------------
                                   4232 ; BASIC: RESTORE [line#]
                                   4233 ; set data_ptr to first data line
                                   4234 ; if no DATA found pointer set to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4235 ; zero.
                                   4236 ; if a line# is given as argument 
                                   4237 ; a data line with that number 
                                   4238 ; is searched and the data pointer 
                                   4239 ; is set to it. If there is no 
                                   4240 ; data line with that number 
                                   4241 ; the program is interrupted. 
                                   4242 ;---------------------------------
      002E16                       4243 restore:
      002E16 5F               [ 1] 4244 	clrw x 
      002E17 CF 00 06         [ 2] 4245 	ldw data_ptr,x 
      002E1A CF 00 08         [ 2] 4246 	ldw data_ofs,x 
      002E1D CE 00 1B         [ 2] 4247 	ldw x,txtbgn 
      002E20 CD 17 9A         [ 4] 4248 	call next_token 
      002E23 A1 84            [ 1] 4249 	cp a,#TK_INTGR
      002E25 26 10            [ 1] 4250 	jrne 0$
      002E27 CD 17 CC         [ 4] 4251 	call get_int24
      002E2A 90 89            [ 2] 4252 	pushw y 
      002E2C 4F               [ 1] 4253 	clr a 
      002E2D CD 0C 0F         [ 4] 4254 	call search_lineno  
      002E30 90 85            [ 2] 4255 	popw y 
      002E32 5D               [ 2] 4256 	tnzw x 
      002E33 26 17            [ 1] 4257 	jrne set_data_pointer 
      002E35 20 44            [ 2] 4258 	jra data_error 
      002E37                       4259 0$:
      002E37                       4260 	_unget_token  
      002E37 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4261 ; search first DATA line 	
      002E3C C3 00 1D         [ 2] 4262 1$:	cpw x,txtend
      002E3F 24 3A            [ 1] 4263 	jruge data_error 
      002E41                       4264 2$:	
      002E41 CD 2E 08         [ 4] 4265 	call is_data_line 
      002E44 26 00            [ 1] 4266 	jrne 4$
      002E46 CD 2E 59         [ 4] 4267 4$:	call try_next_line 
      002E49 26 FB            [ 1] 4268 	jrne 4$ 
      002E4B 81               [ 4] 4269 	ret 
                                   4270 
                                   4271 ;---------------------
                                   4272 ; set data pointer 
                                   4273 ; variables at new line 
                                   4274 ; input:
                                   4275 ;    X    line address 
                                   4276 ;----------------------
      002E4C                       4277 set_data_pointer:
      002E4C CF 00 06         [ 2] 4278 	ldw data_ptr,x
      002E4F E6 02            [ 1] 4279 	ld a,(2,x)
      002E51 C7 00 09         [ 1] 4280 	ld data_len,a 
      002E54 35 06 00 08      [ 1] 4281 	mov data_ofs,#FIRST_DATA_ITEM
      002E58 81               [ 4] 4282 	ret 
                                   4283 
                                   4284 
                                   4285 ;--------------------
                                   4286 ; at end of data line 
                                   4287 ; check if next line 
                                   4288 ; is a data line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4289 ; input:
                                   4290 ;    X   actual line address 
                                   4291 ;  
                                   4292 ;-------------------
      002E59                       4293 try_next_line: 
      002E59 E6 02            [ 1] 4294 	ld a,(2,x)
      002E5B C7 00 0E         [ 1] 4295 	ld acc8,a 
      002E5E 72 5F 00 0D      [ 1] 4296 	clr acc16 
      002E62 72 BB 00 0D      [ 2] 4297 	addw x,acc16 
      002E66 C3 00 1D         [ 2] 4298 	cpw x,txtend 
      002E69 25 02            [ 1] 4299 	jrult 1$
      002E6B 20 0E            [ 2] 4300 	jra data_error 
      002E6D                       4301 1$:	
      002E6D CD 2E 08         [ 4] 4302 	call is_data_line 
      002E70 27 04            [ 1] 4303 	jreq 2$
      002E72 A6 01            [ 1] 4304 	ld a,#1  
      002E74 20 04            [ 2] 4305 	jra 9$
      002E76 CD 2E 4C         [ 4] 4306 2$:	call set_data_pointer
      002E79 4F               [ 1] 4307 	clr a  
      002E7A 81               [ 4] 4308 9$:	ret 
      002E7B                       4309 data_error:	
      002E7B A6 0C            [ 1] 4310     ld a,#ERR_NO_DATA 
      002E7D CC 16 32         [ 2] 4311 	jp tb_error 
                                   4312 
                                   4313 
                                   4314 ;---------------------------------
                                   4315 ; BASIC: READ 
                                   4316 ; return next data item | 0 
                                   4317 ;---------------------------------
                           000001  4318 	CTX_BPTR=1 
                           000003  4319 	CTX_IN=3 
                           000004  4320 	CTX_COUNT=4 
                           000005  4321 	INT24=5
                           000007  4322 	VSIZE=7 
      002E80                       4323 read:
      002E80                       4324 	_vars  VSIZE 
      002E80 52 07            [ 2]    1     sub sp,#VSIZE 
      002E82 CD 20 7F         [ 4] 4325 	call save_context
      002E85                       4326 read01:	
      002E85 C6 00 08         [ 1] 4327 	ld a,data_ofs
      002E88 C1 00 09         [ 1] 4328 	cp a,data_len 
      002E8B 27 37            [ 1] 4329 	jreq 2$ ; end of line  
      002E8D                       4330 0$:
      002E8D CE 00 06         [ 2] 4331 	ldw x,data_ptr 
      002E90 CF 00 04         [ 2] 4332 	ldw basicptr,x 
      002E93 55 00 08 00 01   [ 1] 4333 	mov in,data_ofs 
      002E98 55 00 09 00 03   [ 1] 4334 	mov count,data_len  
      002E9D CD 1A A6         [ 4] 4335 	call expression 
      002EA0 A1 84            [ 1] 4336 	cp a,#TK_INTGR 
      002EA2 27 03            [ 1] 4337 	jreq 1$ 
      002EA4 CC 16 30         [ 2] 4338 	jp syntax_error 
      002EA7                       4339 1$:
      002EA7 CD 17 9A         [ 4] 4340 	call next_token ; skip comma
      002EAA CE 00 04         [ 2] 4341 	ldw x,basicptr 
      002EAD CF 00 06         [ 2] 4342 	ldw data_ptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002EB0 55 00 01 00 08   [ 1] 4343 	mov data_ofs,in 
      002EB5 CD 20 8F         [ 4] 4344 	call rest_context
      002EB8                       4345 	_xpop 
      002EB8 90 F6            [ 1]    1     ld a,(y)
      002EBA 93               [ 1]    2     ldw x,y 
      002EBB EE 01            [ 2]    3     ldw x,(1,x)
      002EBD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EC1                       4346 	_drop VSIZE 
      002EC1 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EC3 81               [ 4] 4347 	ret 
      002EC4                       4348 2$: ; end of line reached 
                                   4349 	; try next line 
      002EC4 CE 00 06         [ 2] 4350 	ldw x,data_ptr  
      002EC7 CD 2E 59         [ 4] 4351 	call try_next_line
      002ECA 27 C1            [ 1] 4352 	jreq 0$ 
      002ECC 20 AD            [ 2] 4353 	jra data_error 
                                   4354 
                                   4355 ;---------------------------------
                                   4356 ; BASIC: SPIEN clkdiv, 0|1  
                                   4357 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4358 ; if clkdiv==-1 disable SPI
                                   4359 ; 0|1 -> disable|enable  
                                   4360 ;--------------------------------- 
                           000005  4361 SPI_CS_BIT=5
      002ECE                       4362 spi_enable:
      002ECE CD 19 62         [ 4] 4363 	call arg_list 
      002ED1 A1 02            [ 1] 4364 	cp a,#2
      002ED3 27 03            [ 1] 4365 	jreq 1$
      002ED5 CC 16 30         [ 2] 4366 	jp syntax_error 
      002ED8                       4367 1$: 
      002ED8 72 12 50 C7      [ 1] 4368 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EDC 85               [ 2] 4369 	popw x  
      002EDD 5D               [ 2] 4370 	tnzw x 
      002EDE 27 21            [ 1] 4371 	jreq spi_disable 
      002EE0 85               [ 2] 4372 	popw x 
      002EE1 A6 08            [ 1] 4373 	ld a,#(1<<SPI_CR1_BR)
      002EE3 42               [ 4] 4374 	mul x,a 
      002EE4 9F               [ 1] 4375 	ld a,xl 
      002EE5 C7 52 00         [ 1] 4376 	ld SPI_CR1,a 
                                   4377 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EE8 72 1A 50 14      [ 1] 4378 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EEC 72 1A 50 16      [ 1] 4379 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4380 ; configure SPI as master mode 0.	
      002EF0 72 14 52 00      [ 1] 4381 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4382 ; ~CS line controlled by sofware 	
      002EF4 72 12 52 01      [ 1] 4383 	bset SPI_CR2,#SPI_CR2_SSM 
      002EF8 72 10 52 01      [ 1] 4384     bset SPI_CR2,#SPI_CR2_SSI 
                                   4385 ; enable SPI
      002EFC 72 1C 52 00      [ 1] 4386 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F00 81               [ 4] 4387 	ret 
      002F01                       4388 spi_disable:
      002F01                       4389 	_drop #2; throw first argument.
      002F01 5B 02            [ 2]    1     addw sp,##2 
                                   4390 ; wait spi idle 
      002F03 A6 82            [ 1] 4391 1$:	ld a,#0x82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002F05 C4 52 03         [ 1] 4392 	and a,SPI_SR
      002F08 A1 02            [ 1] 4393 	cp a,#2 
      002F0A 26 F7            [ 1] 4394 	jrne 1$
      002F0C 72 1D 52 00      [ 1] 4395 	bres SPI_CR1,#SPI_CR1_SPE
      002F10 72 13 50 C7      [ 1] 4396 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F14 72 1B 50 16      [ 1] 4397 	bres PE_DDR,#SPI_CS_BIT 
      002F18 81               [ 4] 4398 	ret 
                                   4399 
      002F19                       4400 spi_clear_error:
      002F19 A6 78            [ 1] 4401 	ld a,#0x78 
      002F1B C5 52 03         [ 1] 4402 	bcp a,SPI_SR 
      002F1E 27 04            [ 1] 4403 	jreq 1$
      002F20 72 5F 52 03      [ 1] 4404 	clr SPI_SR 
      002F24 81               [ 4] 4405 1$: ret 
                                   4406 
      002F25                       4407 spi_send_byte:
      002F25 88               [ 1] 4408 	push a 
      002F26 CD 2F 19         [ 4] 4409 	call spi_clear_error
      002F29 84               [ 1] 4410 	pop a 
      002F2A 72 03 52 03 FB   [ 2] 4411 	btjf SPI_SR,#SPI_SR_TXE,.
      002F2F C7 52 04         [ 1] 4412 	ld SPI_DR,a
      002F32 72 01 52 03 FB   [ 2] 4413 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F37 C6 52 04         [ 1] 4414 	ld a,SPI_DR 
      002F3A 81               [ 4] 4415 	ret 
                                   4416 
      002F3B                       4417 spi_rcv_byte:
      002F3B A6 FF            [ 1] 4418 	ld a,#255
      002F3D 72 01 52 03 E3   [ 2] 4419 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F42 C6 52 04         [ 1] 4420 	ld a,SPI_DR 
      002F45 81               [ 4] 4421 	ret
                                   4422 
                                   4423 ;------------------------------
                                   4424 ; BASIC: SPIWR byte [,byte]
                                   4425 ; write 1 or more byte
                                   4426 ;------------------------------
      002F46                       4427 spi_write:
      002F46 CD 1A A6         [ 4] 4428 	call expression
      002F49 A1 84            [ 1] 4429 	cp a,#TK_INTGR 
      002F4B 27 03            [ 1] 4430 	jreq 1$
      002F4D CC 16 30         [ 2] 4431 	jp syntax_error 
      002F50                       4432 1$:	
      002F50 9F               [ 1] 4433 	ld a,xl 
      002F51 CD 2F 25         [ 4] 4434 	call spi_send_byte 
      002F54 CD 17 9A         [ 4] 4435 	call next_token 
      002F57 A1 08            [ 1] 4436 	cp a,#TK_COMMA 
      002F59 26 02            [ 1] 4437 	jrne 2$ 
      002F5B 20 E9            [ 2] 4438 	jra spi_write 
      002F5D 4D               [ 1] 4439 2$:	tnz a 
      002F5E 27 05            [ 1] 4440 	jreq 3$
      002F60                       4441 	_unget_token  
      002F60 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F65 81               [ 4] 4442 3$:	ret 
                                   4443 
                                   4444 
                                   4445 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4446 ; BASIC: SPIRD 	
                                   4447 ; read one byte from SPI 
                                   4448 ;-------------------------------
      002F66                       4449 spi_read:
      002F66 CD 2F 3B         [ 4] 4450 	call spi_rcv_byte 
      002F69 5F               [ 1] 4451 	clrw x 
      002F6A 97               [ 1] 4452 	ld xl,a 
      002F6B 4F               [ 1] 4453 	clr a  
      002F6C 81               [ 4] 4454 	ret 
                                   4455 
                                   4456 ;------------------------------
                                   4457 ; BASIC: SPISEL 0|1 
                                   4458 ; set state of ~CS line
                                   4459 ; 0|1 deselect|select  
                                   4460 ;------------------------------
      002F6D                       4461 spi_select:
      002F6D CD 17 9A         [ 4] 4462 	call next_token 
      002F70 A1 84            [ 1] 4463 	cp a,#TK_INTGR 
      002F72 27 03            [ 1] 4464 	jreq 1$
      002F74 CC 16 30         [ 2] 4465 	jp syntax_error 
      002F77 5D               [ 2] 4466 1$: tnzw x  
      002F78 27 05            [ 1] 4467 	jreq cs_high 
      002F7A 72 1B 50 14      [ 1] 4468 	bres PE_ODR,#SPI_CS_BIT
      002F7E 81               [ 4] 4469 	ret 
      002F7F                       4470 cs_high: 
      002F7F 72 1A 50 14      [ 1] 4471 	bset PE_ODR,#SPI_CS_BIT
      002F83 81               [ 4] 4472 	ret 
                                   4473 
                                   4474 ;-------------------------------
                                   4475 ; BASIC: PAD 
                                   4476 ; Return pad buffer address.
                                   4477 ;------------------------------
      002F84                       4478 pad_ref:
      002F84 AE 16 E0         [ 2] 4479 	ldw x,#pad 
      002F87 4F               [ 1] 4480 	clr a
      002F88 81               [ 4] 4481 	ret 
                                   4482 
                                   4483 ;****************************
                                   4484 ; expression stack 
                                   4485 ; manipulation routines
                                   4486 ;****************************
                                   4487 
                                   4488 ;-----------------------------
                                   4489 ; BASIC: PUSH expr|rel|cond 
                                   4490 ; push the result on xtack
                                   4491 ;-----------------------------
      002F89                       4492 xpush:
      002F89 CD 1B BF         [ 4] 4493 	call condition 
      002F8C 81               [ 4] 4494 	ret 
                                   4495 
                                   4496 ;------------------------------
                                   4497 ; BASIC: POP 
                                   4498 ; pop top of xstack 
                                   4499 ;------------------------------
      002F8D                       4500 xpop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002F8D                       4501 	_xpop 
      002F8D 90 F6            [ 1]    1     ld a,(y)
      002F8F 93               [ 1]    2     ldw x,y 
      002F90 EE 01            [ 2]    3     ldw x,(1,x)
      002F92 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F96 81               [ 4] 4502 	ret 
                                   4503 
                                   4504 
                                   4505 ;------------------------------
                                   4506 ; BASIC: ALLOC expr 
                                   4507 ; allocate expr element on xtack 
                                   4508 ;-------------------------------
      002F97                       4509 xalloc: 
      002F97 CD 1A A6         [ 4] 4510 	call expression 
      002F9A A1 84            [ 1] 4511 	cp a,#TK_INTGR
      002F9C 27 03            [ 1] 4512 	jreq 1$ 
      002F9E CC 16 30         [ 2] 4513 	jp syntax_error
      002FA1                       4514 1$: _xpop 
      002FA1 90 F6            [ 1]    1     ld a,(y)
      002FA3 93               [ 1]    2     ldw x,y 
      002FA4 EE 01            [ 2]    3     ldw x,(1,x)
      002FA6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FAA 4D               [ 1] 4515 	tnz a 
      002FAB 27 05            [ 1] 4516 	jreq 3$ 
      002FAD A6 0A            [ 1] 4517 2$:	ld a,#ERR_BAD_VALUE
      002FAF CC 16 32         [ 2] 4518 	jp tb_error 
      002FB2 A3 00 14         [ 2] 4519 3$: cpw x,#XSTACK_SIZE 
      002FB5 22 F6            [ 1] 4520 	jrugt 2$
      002FB7 A6 03            [ 1] 4521 	ld a,#CELL_SIZE 
      002FB9 42               [ 4] 4522 	mul x,a 
      002FBA CF 00 0D         [ 2] 4523 	ldw acc16,x 
      002FBD 72 B2 00 0D      [ 2] 4524 	subw y,acc16 
      002FC1 90 A3 17 60      [ 2] 4525 	cpw y,#xstack_full
      002FC5 22 05            [ 1] 4526 	jrugt 9$
      002FC7 A6 01            [ 1] 4527 	ld a,#ERR_MEM_FULL
      002FC9 CC 16 32         [ 2] 4528 	jp tb_error 
      002FCC                       4529 9$:	 
      002FCC 81               [ 4] 4530 	ret 
                                   4531 
                                   4532 
                                   4533 ;------------------------------
                                   4534 ;  BASIC DROP expr 
                                   4535 ;  expr in range {0..XSTACK_SIZE}
                                   4536 ;  discard n elements from xtack
                                   4537 ;------------------------------
      002FCD                       4538 xdrop:
      002FCD CD 1A A6         [ 4] 4539 	call expression 
      002FD0 A1 84            [ 1] 4540 	cp a,#TK_INTGR
      002FD2 27 03            [ 1] 4541 	jreq 1$ 
      002FD4 CC 16 30         [ 2] 4542 	jp syntax_error 
      002FD7                       4543 1$:	_xpop 
      002FD7 90 F6            [ 1]    1     ld a,(y)
      002FD9 93               [ 1]    2     ldw x,y 
      002FDA EE 01            [ 2]    3     ldw x,(1,x)
      002FDC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002FE0 9F               [ 1] 4544 	ld a,xl 
      002FE1 A4 1F            [ 1] 4545 	and a,#0x1f 
      002FE3 5F               [ 1] 4546 	clrw x 
      002FE4 97               [ 1] 4547 	ld xl,a 
      002FE5 A6 03            [ 1] 4548 	ld a,#CELL_SIZE 
      002FE7 42               [ 4] 4549 	mul x,a 
      002FE8 CF 00 0D         [ 2] 4550 	ldw acc16,x  
      002FEB 72 B9 00 0D      [ 2] 4551 	addw y,acc16 
      002FEF 90 A3 17 73      [ 2] 4552 	cpw y,#XSTACK_EMPTY 
      002FF3 23 04            [ 2] 4553 	jrule 9$
      002FF5 90 AE 17 73      [ 2] 4554 	ldw y,#XSTACK_EMPTY 
      002FF9 81               [ 4] 4555 9$:	ret 
                                   4556 
                                   4557 ;-----------------------
                                   4558 ; check if value in A:X 
                                   4559 ; is inside xstack bound
                                   4560 ; output:
                                   4561 ;    X     slot address  
                                   4562 ;-----------------------
      002FFA                       4563 xstack_bound:
      002FFA 4D               [ 1] 4564 	tnz a 
      002FFB 26 16            [ 1] 4565 	jrne 8$ 
      002FFD A3 00 14         [ 2] 4566 1$: cpw x,#XSTACK_SIZE 
      003000 22 11            [ 1] 4567 	jrugt 8$
      003002 A6 03            [ 1] 4568 	ld a,#CELL_SIZE 
      003004 42               [ 4] 4569 	mul x,a
      003005 CF 00 0D         [ 2] 4570 	ldw acc16,x 
      003008 93               [ 1] 4571 	ldw x,y 
      003009 72 BB 00 0D      [ 2] 4572 	addw x,acc16 
      00300D A3 17 73         [ 2] 4573 	cpw x,#XSTACK_EMPTY 
      003010 24 01            [ 1] 4574 	jruge 8$  
      003012 81               [ 4] 4575 	ret 
      003013 A6 0A            [ 1] 4576 8$: ld a,#ERR_BAD_VALUE
      003015 CC 16 32         [ 2] 4577 	jp tb_error 
                                   4578 
                                   4579 ;-------------------------
                                   4580 ; BASIC: PUT expr, cond 
                                   4581 ; expr -> slot 
                                   4582 ; cond -> valut to put 
                                   4583 ; on xstack 
                                   4584 ;-------------------------
      003018                       4585 xput:
      003018 CD 19 62         [ 4] 4586 	call arg_list 
      00301B A1 02            [ 1] 4587 	cp a,#2 
      00301D 27 03            [ 1] 4588 	jreq 1$ 
      00301F CC 16 30         [ 2] 4589 0$:	jp syntax_error
      003022                       4590 1$: _xpop   ; value to put 
      003022 90 F6            [ 1]    1     ld a,(y)
      003024 93               [ 1]    2     ldw x,y 
      003025 EE 01            [ 2]    3     ldw x,(1,x)
      003027 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00302B 89               [ 2] 4591 	pushw x 
      00302C 88               [ 1] 4592 	push a 
      00302D                       4593 	_xpop    ; slot 
      00302D 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      00302F 93               [ 1]    2     ldw x,y 
      003030 EE 01            [ 2]    3     ldw x,(1,x)
      003032 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003036 CD 2F FA         [ 4] 4594 	call xstack_bound
      003039 CF 00 19         [ 2] 4595     ldw ptr16,x 
      00303C 84               [ 1] 4596 	pop a 
      00303D 85               [ 2] 4597 	popw x 
      00303E 72 C7 00 19      [ 4] 4598 	ld [ptr16],a 
      003042 72 5C 00 1A      [ 1] 4599 	inc ptr8 
      003046 72 CF 00 19      [ 5] 4600 	ldw [ptr16],x 
      00304A 81               [ 4] 4601 	ret 
                                   4602 
                                   4603 ;------------------------
                                   4604 ; BASIC: PICK expr 
                                   4605 ; get nième element on 
                                   4606 ; xtack. 
                                   4607 ;-----------------------
      00304B                       4608 xpick:
      00304B CD 19 5D         [ 4] 4609 	call func_args 
      00304E A1 01            [ 1] 4610 	cp a,#1 
      003050 27 03            [ 1] 4611 	jreq 1$
      003052 CC 16 30         [ 2] 4612 	jp syntax_error 
      003055                       4613 1$: _xpop 
      003055 90 F6            [ 1]    1     ld a,(y)
      003057 93               [ 1]    2     ldw x,y 
      003058 EE 01            [ 2]    3     ldw x,(1,x)
      00305A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00305E CD 2F FA         [ 4] 4614 	call xstack_bound
      003061 F6               [ 1] 4615     ld a,(x)
      003062 EE 01            [ 2] 4616 	ldw x,(1,x)				
      003064 81               [ 4] 4617 	ret 
                                   4618 
                                   4619 
                                   4620 
                                   4621 ;------------------------------
                                   4622 ;      dictionary 
                                   4623 ; format:
                                   4624 ;   link:   2 bytes 
                                   4625 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4626 ;   cmd_name: 16 byte max 
                                   4627 ;   code_addr: 2 bytes 
                                   4628 ;------------------------------
                                   4629 	.macro _dict_entry len,name,code_addr 
                                   4630 	.word LINK 
                                   4631 	LINK=.
                                   4632 name:
                                   4633 	.byte len   	
                                   4634 	.ascii "name"
                                   4635 	.word code_addr  
                                   4636 	.endm 
                                   4637 
                           000000  4638 	LINK=0
                                   4639 ; respect alphabetic order for BASIC names from Z-A
                                   4640 ; this sort order is for a cleaner WORDS cmd output. 	
      003065                       4641 kword_end:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      003065                       4642 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      003065 00 00                    1 	.word LINK 
                           003067     2 	LINK=.
      003067                          3 XOR:
      003067 A3                       4 	.byte 3+F_XOR   	
      003068 58 4F 52                 5 	.ascii "XOR"
      00306B 00 8A                    6 	.word TK_XOR  
      00306D                       4643 	_dict_entry,5,WRITE,write  
      00306D 30 67                    1 	.word LINK 
                           00306F     2 	LINK=.
      00306F                          3 WRITE:
      00306F 05                       4 	.byte 5   	
      003070 57 52 49 54 45           5 	.ascii "WRITE"
      003075 28 F8                    6 	.word write  
      003077                       4644 	_dict_entry,5,WORDS,words 
      003077 30 6F                    1 	.word LINK 
                           003079     2 	LINK=.
      003079                          3 WORDS:
      003079 05                       4 	.byte 5   	
      00307A 57 4F 52 44 53           5 	.ascii "WORDS"
      00307F 2C 4A                    6 	.word words  
      003081                       4645 	_dict_entry 4,WAIT,wait 
      003081 30 79                    1 	.word LINK 
                           003083     2 	LINK=.
      003083                          3 WAIT:
      003083 04                       4 	.byte 4   	
      003084 57 41 49 54              5 	.ascii "WAIT"
      003088 21 44                    6 	.word wait  
      00308A                       4646 	_dict_entry,3+F_IFUNC,USR,usr
      00308A 30 83                    1 	.word LINK 
                           00308C     2 	LINK=.
      00308C                          3 USR:
      00308C 13                       4 	.byte 3+F_IFUNC   	
      00308D 55 53 52                 5 	.ascii "USR"
      003090 29 EF                    6 	.word usr  
      003092                       4647 	_dict_entry,5,UNTIL,until 
      003092 30 8C                    1 	.word LINK 
                           003094     2 	LINK=.
      003094                          3 UNTIL:
      003094 05                       4 	.byte 5   	
      003095 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00309A 2D 7F                    6 	.word until  
      00309C                       4648 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00309C 30 94                    1 	.word LINK 
                           00309E     2 	LINK=.
      00309E                          3 UFLASH:
      00309E 16                       4 	.byte 6+F_IFUNC   	
      00309F 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0030A5 29 D2                    6 	.word uflash  
      0030A7                       4649 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      0030A7 30 9E                    1 	.word LINK 
                           0030A9     2 	LINK=.
      0030A9                          3 UBOUND:
      0030A9 16                       4 	.byte 6+F_IFUNC   	
      0030AA 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      0030B0 1C 73                    6 	.word ubound  
      0030B2                       4650 	_dict_entry,4,TONE,tone  
      0030B2 30 A9                    1 	.word LINK 
                           0030B4     2 	LINK=.
      0030B4                          3 TONE:
      0030B4 04                       4 	.byte 4   	
      0030B5 54 4F 4E 45              5 	.ascii "TONE"
      0030B9 25 AE                    6 	.word tone  
      0030BB                       4651 	_dict_entry,2,TO,to
      0030BB 30 B4                    1 	.word LINK 
                           0030BD     2 	LINK=.
      0030BD                          3 TO:
      0030BD 02                       4 	.byte 2   	
      0030BE 54 4F                    5 	.ascii "TO"
      0030C0 22 AE                    6 	.word to  
      0030C2                       4652 	_dict_entry,5,TIMER,set_timer
      0030C2 30 BD                    1 	.word LINK 
                           0030C4     2 	LINK=.
      0030C4                          3 TIMER:
      0030C4 05                       4 	.byte 5   	
      0030C5 54 49 4D 45 52           5 	.ascii "TIMER"
      0030CA 2C B4                    6 	.word set_timer  
      0030CC                       4653 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      0030CC 30 C4                    1 	.word LINK 
                           0030CE     2 	LINK=.
      0030CE                          3 TIMEOUT:
      0030CE 17                       4 	.byte 7+F_IFUNC   	
      0030CF 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      0030D6 2C CB                    6 	.word timeout  
      0030D8                       4654 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      0030D8 30 CE                    1 	.word LINK 
                           0030DA     2 	LINK=.
      0030DA                          3 TICKS:
      0030DA 15                       4 	.byte 5+F_IFUNC   	
      0030DB 54 49 43 4B 53           5 	.ascii "TICKS"
      0030E0 2A 9B                    6 	.word get_ticks  
      0030E2                       4655 	_dict_entry,4,STOP,stop 
      0030E2 30 DA                    1 	.word LINK 
                           0030E4     2 	LINK=.
      0030E4                          3 STOP:
      0030E4 04                       4 	.byte 4   	
      0030E5 53 54 4F 50              5 	.ascii "STOP"
      0030E9 27 17                    6 	.word stop  
      0030EB                       4656 	_dict_entry,4,STEP,step 
      0030EB 30 E4                    1 	.word LINK 
                           0030ED     2 	LINK=.
      0030ED                          3 STEP:
      0030ED 04                       4 	.byte 4   	
      0030EE 53 54 45 50              5 	.ascii "STEP"
      0030F2 22 F4                    6 	.word step  
      0030F4                       4657 	_dict_entry,5,SPIWR,spi_write
      0030F4 30 ED                    1 	.word LINK 
                           0030F6     2 	LINK=.
      0030F6                          3 SPIWR:
      0030F6 05                       4 	.byte 5   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      0030F7 53 50 49 57 52           5 	.ascii "SPIWR"
      0030FC 2F 46                    6 	.word spi_write  
      0030FE                       4658 	_dict_entry,6,SPISEL,spi_select
      0030FE 30 F6                    1 	.word LINK 
                           003100     2 	LINK=.
      003100                          3 SPISEL:
      003100 06                       4 	.byte 6   	
      003101 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003107 2F 6D                    6 	.word spi_select  
      003109                       4659 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003109 31 00                    1 	.word LINK 
                           00310B     2 	LINK=.
      00310B                          3 SPIRD:
      00310B 15                       4 	.byte 5+F_IFUNC   	
      00310C 53 50 49 52 44           5 	.ascii "SPIRD"
      003111 2F 66                    6 	.word spi_read  
      003113                       4660 	_dict_entry,5,SPIEN,spi_enable 
      003113 31 0B                    1 	.word LINK 
                           003115     2 	LINK=.
      003115                          3 SPIEN:
      003115 05                       4 	.byte 5   	
      003116 53 50 49 45 4E           5 	.ascii "SPIEN"
      00311B 2E CE                    6 	.word spi_enable  
      00311D                       4661 	_dict_entry,5,SLEEP,sleep 
      00311D 31 15                    1 	.word LINK 
                           00311F     2 	LINK=.
      00311F                          3 SLEEP:
      00311F 05                       4 	.byte 5   	
      003120 53 4C 45 45 50           5 	.ascii "SLEEP"
      003125 2A 1E                    6 	.word sleep  
      003127                       4662     _dict_entry,4,SIZE,cmd_size 
      003127 31 1F                    1 	.word LINK 
                           003129     2 	LINK=.
      003129                          3 SIZE:
      003129 04                       4 	.byte 4   	
      00312A 53 49 5A 45              5 	.ascii "SIZE"
      00312E 1C 46                    6 	.word cmd_size  
      003130                       4663 	_dict_entry,4,SAVE,save_app 
      003130 31 29                    1 	.word LINK 
                           003132     2 	LINK=.
      003132                          3 SAVE:
      003132 04                       4 	.byte 4   	
      003133 53 41 56 45              5 	.ascii "SAVE"
      003137 28 09                    6 	.word save_app  
      003139                       4664 	_dict_entry 3,RUN,run
      003139 31 32                    1 	.word LINK 
                           00313B     2 	LINK=.
      00313B                          3 RUN:
      00313B 03                       4 	.byte 3   	
      00313C 52 55 4E                 5 	.ascii "RUN"
      00313F 25 0A                    6 	.word run  
      003141                       4665 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003141 31 3B                    1 	.word LINK 
                           003143     2 	LINK=.
      003143                          3 RSHIFT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003143 16                       4 	.byte 6+F_IFUNC   	
      003144 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00314A 2A E5                    6 	.word rshift  
      00314C                       4666 	_dict_entry,3+F_IFUNC,RND,random 
      00314C 31 43                    1 	.word LINK 
                           00314E     2 	LINK=.
      00314E                          3 RND:
      00314E 13                       4 	.byte 3+F_IFUNC   	
      00314F 52 4E 44                 5 	.ascii "RND"
      003152 2B AF                    6 	.word random  
      003154                       4667 	_dict_entry,6,RETURN,return 
      003154 31 4E                    1 	.word LINK 
                           003156     2 	LINK=.
      003156                          3 RETURN:
      003156 06                       4 	.byte 6   	
      003157 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00315D 24 ED                    6 	.word return  
      00315F                       4668 	_dict_entry,7,RESTORE,restore 
      00315F 31 56                    1 	.word LINK 
                           003161     2 	LINK=.
      003161                          3 RESTORE:
      003161 07                       4 	.byte 7   	
      003162 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003169 2E 16                    6 	.word restore  
      00316B                       4669 	_dict_entry 3,REM,remark 
      00316B 31 61                    1 	.word LINK 
                           00316D     2 	LINK=.
      00316D                          3 REM:
      00316D 03                       4 	.byte 3   	
      00316E 52 45 4D                 5 	.ascii "REM"
      003171 21 3E                    6 	.word remark  
      003173                       4670 	_dict_entry,6,REBOOT,cold_start
      003173 31 6D                    1 	.word LINK 
                           003175     2 	LINK=.
      003175                          3 REBOOT:
      003175 06                       4 	.byte 6   	
      003176 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00317C 00 B5                    6 	.word cold_start  
      00317E                       4671 	_dict_entry,4+F_IFUNC,READ,read  
      00317E 31 75                    1 	.word LINK 
                           003180     2 	LINK=.
      003180                          3 READ:
      003180 14                       4 	.byte 4+F_IFUNC   	
      003181 52 45 41 44              5 	.ascii "READ"
      003185 2E 80                    6 	.word read  
      003187                       4672 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003187 31 80                    1 	.word LINK 
                           003189     2 	LINK=.
      003189                          3 QKEY:
      003189 14                       4 	.byte 4+F_IFUNC   	
      00318A 51 4B 45 59              5 	.ascii "QKEY"
      00318E 29 95                    6 	.word qkey  
      003190                       4673 	_dict_entry,3,PUT,xput 
      003190 31 89                    1 	.word LINK 
                           003192     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003192                          3 PUT:
      003192 03                       4 	.byte 3   	
      003193 50 55 54                 5 	.ascii "PUT"
      003196 30 18                    6 	.word xput  
      003198                       4674 	_dict_entry,4,PUSH,xpush   
      003198 31 92                    1 	.word LINK 
                           00319A     2 	LINK=.
      00319A                          3 PUSH:
      00319A 04                       4 	.byte 4   	
      00319B 50 55 53 48              5 	.ascii "PUSH"
      00319F 2F 89                    6 	.word xpush  
      0031A1                       4675 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      0031A1 31 9A                    1 	.word LINK 
                           0031A3     2 	LINK=.
      0031A3                          3 PORTI:
      0031A3 15                       4 	.byte 5+F_IFUNC   	
      0031A4 50 4F 52 54 49           5 	.ascii "PORTI"
      0031A9 2D D5                    6 	.word const_porti  
      0031AB                       4676 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      0031AB 31 A3                    1 	.word LINK 
                           0031AD     2 	LINK=.
      0031AD                          3 PORTG:
      0031AD 15                       4 	.byte 5+F_IFUNC   	
      0031AE 50 4F 52 54 47           5 	.ascii "PORTG"
      0031B3 2D D0                    6 	.word const_portg  
      0031B5                       4677 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      0031B5 31 AD                    1 	.word LINK 
                           0031B7     2 	LINK=.
      0031B7                          3 PORTF:
      0031B7 15                       4 	.byte 5+F_IFUNC   	
      0031B8 50 4F 52 54 46           5 	.ascii "PORTF"
      0031BD 2D CB                    6 	.word const_portf  
      0031BF                       4678 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      0031BF 31 B7                    1 	.word LINK 
                           0031C1     2 	LINK=.
      0031C1                          3 PORTE:
      0031C1 15                       4 	.byte 5+F_IFUNC   	
      0031C2 50 4F 52 54 45           5 	.ascii "PORTE"
      0031C7 2D C6                    6 	.word const_porte  
      0031C9                       4679 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      0031C9 31 C1                    1 	.word LINK 
                           0031CB     2 	LINK=.
      0031CB                          3 PORTD:
      0031CB 15                       4 	.byte 5+F_IFUNC   	
      0031CC 50 4F 52 54 44           5 	.ascii "PORTD"
      0031D1 2D C1                    6 	.word const_portd  
      0031D3                       4680 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      0031D3 31 CB                    1 	.word LINK 
                           0031D5     2 	LINK=.
      0031D5                          3 PORTC:
      0031D5 15                       4 	.byte 5+F_IFUNC   	
      0031D6 50 4F 52 54 43           5 	.ascii "PORTC"
      0031DB 2D BC                    6 	.word const_portc  
      0031DD                       4681 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      0031DD 31 D5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



                           0031DF     2 	LINK=.
      0031DF                          3 PORTB:
      0031DF 15                       4 	.byte 5+F_IFUNC   	
      0031E0 50 4F 52 54 42           5 	.ascii "PORTB"
      0031E5 2D B7                    6 	.word const_portb  
      0031E7                       4682 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      0031E7 31 DF                    1 	.word LINK 
                           0031E9     2 	LINK=.
      0031E9                          3 PORTA:
      0031E9 15                       4 	.byte 5+F_IFUNC   	
      0031EA 50 4F 52 54 41           5 	.ascii "PORTA"
      0031EF 2D B2                    6 	.word const_porta  
      0031F1                       4683 	_dict_entry 5,PRINT,print 
      0031F1 31 E9                    1 	.word LINK 
                           0031F3     2 	LINK=.
      0031F3                          3 PRINT:
      0031F3 05                       4 	.byte 5   	
      0031F4 50 52 49 4E 54           5 	.ascii "PRINT"
      0031F9 1F F6                    6 	.word print  
      0031FB                       4684 	_dict_entry,4+F_IFUNC,POUT,const_output
      0031FB 31 F3                    1 	.word LINK 
                           0031FD     2 	LINK=.
      0031FD                          3 POUT:
      0031FD 14                       4 	.byte 4+F_IFUNC   	
      0031FE 50 4F 55 54              5 	.ascii "POUT"
      003202 2D F3                    6 	.word const_output  
      003204                       4685 	_dict_entry,3+F_IFUNC,POP,xpop 
      003204 31 FD                    1 	.word LINK 
                           003206     2 	LINK=.
      003206                          3 POP:
      003206 13                       4 	.byte 3+F_IFUNC   	
      003207 50 4F 50                 5 	.ascii "POP"
      00320A 2F 8D                    6 	.word xpop  
      00320C                       4686 	_dict_entry,4,POKE,poke 
      00320C 32 06                    1 	.word LINK 
                           00320E     2 	LINK=.
      00320E                          3 POKE:
      00320E 04                       4 	.byte 4   	
      00320F 50 4F 4B 45              5 	.ascii "POKE"
      003213 22 1F                    6 	.word poke  
      003215                       4687 	_dict_entry,5,PMODE,pin_mode 
      003215 32 0E                    1 	.word LINK 
                           003217     2 	LINK=.
      003217                          3 PMODE:
      003217 05                       4 	.byte 5   	
      003218 50 4D 4F 44 45           5 	.ascii "PMODE"
      00321D 2B 20                    6 	.word pin_mode  
      00321F                       4688 	_dict_entry,4+F_IFUNC,PINP,const_input
      00321F 32 17                    1 	.word LINK 
                           003221     2 	LINK=.
      003221                          3 PINP:
      003221 14                       4 	.byte 4+F_IFUNC   	
      003222 50 49 4E 50              5 	.ascii "PINP"
      003226 2D F8                    6 	.word const_input  
      003228                       4689 	_dict_entry,4+F_IFUNC,PICK,xpick 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      003228 32 21                    1 	.word LINK 
                           00322A     2 	LINK=.
      00322A                          3 PICK:
      00322A 14                       4 	.byte 4+F_IFUNC   	
      00322B 50 49 43 4B              5 	.ascii "PICK"
      00322F 30 4B                    6 	.word xpick  
      003231                       4690 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003231 32 2A                    1 	.word LINK 
                           003233     2 	LINK=.
      003233                          3 PEEK:
      003233 14                       4 	.byte 4+F_IFUNC   	
      003234 50 45 45 4B              5 	.ascii "PEEK"
      003238 22 40                    6 	.word peek  
      00323A                       4691 	_dict_entry,5,PAUSE,pause 
      00323A 32 33                    1 	.word LINK 
                           00323C     2 	LINK=.
      00323C                          3 PAUSE:
      00323C 05                       4 	.byte 5   	
      00323D 50 41 55 53 45           5 	.ascii "PAUSE"
      003242 2A 29                    6 	.word pause  
      003244                       4692 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      003244 32 3C                    1 	.word LINK 
                           003246     2 	LINK=.
      003246                          3 PAD:
      003246 13                       4 	.byte 3+F_IFUNC   	
      003247 50 41 44                 5 	.ascii "PAD"
      00324A 2F 84                    6 	.word pad_ref  
      00324C                       4693 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      00324C 32 46                    1 	.word LINK 
                           00324E     2 	LINK=.
      00324E                          3 OR:
      00324E 92                       4 	.byte 2+F_OR   	
      00324F 4F 52                    5 	.ascii "OR"
      003251 00 89                    6 	.word TK_OR  
      003253                       4694 	_dict_entry,2,ON,cmd_on 
      003253 32 4E                    1 	.word LINK 
                           003255     2 	LINK=.
      003255                          3 ON:
      003255 02                       4 	.byte 2   	
      003256 4F 4E                    5 	.ascii "ON"
      003258 24 1D                    6 	.word cmd_on  
      00325A                       4695 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00325A 32 55                    1 	.word LINK 
                           00325C     2 	LINK=.
      00325C                          3 ODR:
      00325C 13                       4 	.byte 3+F_IFUNC   	
      00325D 4F 44 52                 5 	.ascii "ODR"
      003260 2D DA                    6 	.word const_odr  
      003262                       4696 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      003262 32 5C                    1 	.word LINK 
                           003264     2 	LINK=.
      003264                          3 NOT:
      003264 73                       4 	.byte 3+F_NOT   	
      003265 4E 4F 54                 5 	.ascii "NOT"
      003268 00 87                    6 	.word TK_NOT  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      00326A                       4697 	_dict_entry,4,NEXT,next 
      00326A 32 64                    1 	.word LINK 
                           00326C     2 	LINK=.
      00326C                          3 NEXT:
      00326C 04                       4 	.byte 4   	
      00326D 4E 45 58 54              5 	.ascii "NEXT"
      003271 23 36                    6 	.word next  
      003273                       4698 	_dict_entry,3,NEW,new
      003273 32 6C                    1 	.word LINK 
                           003275     2 	LINK=.
      003275                          3 NEW:
      003275 03                       4 	.byte 3   	
      003276 4E 45 57                 5 	.ascii "NEW"
      003279 27 63                    6 	.word new  
      00327B                       4699 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00327B 32 75                    1 	.word LINK 
                           00327D     2 	LINK=.
      00327D                          3 LSHIFT:
      00327D 16                       4 	.byte 6+F_IFUNC   	
      00327E 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003284 2A B9                    6 	.word lshift  
      003286                       4700 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003286 32 7D                    1 	.word LINK 
                           003288     2 	LINK=.
      003288                          3 LOG2:
      003288 14                       4 	.byte 4+F_IFUNC   	
      003289 4C 4F 47 32              5 	.ascii "LOG2"
      00328D 2D 19                    6 	.word log2  
      00328F                       4701 	_dict_entry 4,LIST,list
      00328F 32 88                    1 	.word LINK 
                           003291     2 	LINK=.
      003291                          3 LIST:
      003291 04                       4 	.byte 4   	
      003292 4C 49 53 54              5 	.ascii "LIST"
      003296 1E E9                    6 	.word list  
      003298                       4702 	_dict_entry 3,LET,let 
      003298 32 91                    1 	.word LINK 
                           00329A     2 	LINK=.
      00329A                          3 LET:
      00329A 03                       4 	.byte 3   	
      00329B 4C 45 54                 5 	.ascii "LET"
      00329E 1C 7E                    6 	.word let  
      0032A0                       4703 	_dict_entry,3+F_CFUNC,KEY,key 
      0032A0 32 9A                    1 	.word LINK 
                           0032A2     2 	LINK=.
      0032A2                          3 KEY:
      0032A2 23                       4 	.byte 3+F_CFUNC   	
      0032A3 4B 45 59                 5 	.ascii "KEY"
      0032A6 29 91                    6 	.word key  
      0032A8                       4704 	_dict_entry,7,IWDGREF,refresh_iwdg
      0032A8 32 A2                    1 	.word LINK 
                           0032AA     2 	LINK=.
      0032AA                          3 IWDGREF:
      0032AA 07                       4 	.byte 7   	
      0032AB 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0032B2 2D 14                    6 	.word refresh_iwdg  
      0032B4                       4705 	_dict_entry,6,IWDGEN,enable_iwdg
      0032B4 32 AA                    1 	.word LINK 
                           0032B6     2 	LINK=.
      0032B6                          3 IWDGEN:
      0032B6 06                       4 	.byte 6   	
      0032B7 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0032BD 2C D6                    6 	.word enable_iwdg  
      0032BF                       4706 	_dict_entry,5,INPUT,input_var  
      0032BF 32 B6                    1 	.word LINK 
                           0032C1     2 	LINK=.
      0032C1                          3 INPUT:
      0032C1 05                       4 	.byte 5   	
      0032C2 49 4E 50 55 54           5 	.ascii "INPUT"
      0032C7 20 9F                    6 	.word input_var  
      0032C9                       4707 	_dict_entry,2,IF,if 
      0032C9 32 C1                    1 	.word LINK 
                           0032CB     2 	LINK=.
      0032CB                          3 IF:
      0032CB 02                       4 	.byte 2   	
      0032CC 49 46                    5 	.ascii "IF"
      0032CE 22 61                    6 	.word if  
      0032D0                       4708 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      0032D0 32 CB                    1 	.word LINK 
                           0032D2     2 	LINK=.
      0032D2                          3 IDR:
      0032D2 13                       4 	.byte 3+F_IFUNC   	
      0032D3 49 44 52                 5 	.ascii "IDR"
      0032D6 2D DF                    6 	.word const_idr  
      0032D8                       4709 	_dict_entry,3,HEX,hex_base
      0032D8 32 D2                    1 	.word LINK 
                           0032DA     2 	LINK=.
      0032DA                          3 HEX:
      0032DA 03                       4 	.byte 3   	
      0032DB 48 45 58                 5 	.ascii "HEX"
      0032DE 1C 33                    6 	.word hex_base  
      0032E0                       4710 	_dict_entry,4,GOTO,goto 
      0032E0 32 DA                    1 	.word LINK 
                           0032E2     2 	LINK=.
      0032E2                          3 GOTO:
      0032E2 04                       4 	.byte 4   	
      0032E3 47 4F 54 4F              5 	.ascii "GOTO"
      0032E7 24 AF                    6 	.word goto  
      0032E9                       4711 	_dict_entry,5,GOSUB,gosub 
      0032E9 32 E2                    1 	.word LINK 
                           0032EB     2 	LINK=.
      0032EB                          3 GOSUB:
      0032EB 05                       4 	.byte 5   	
      0032EC 47 4F 53 55 42           5 	.ascii "GOSUB"
      0032F1 24 C9                    6 	.word gosub  
      0032F3                       4712 	_dict_entry,3,GET,cmd_get 
      0032F3 32 EB                    1 	.word LINK 
                           0032F5     2 	LINK=.
      0032F5                          3 GET:
      0032F5 03                       4 	.byte 3   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0032F6 47 45 54                 5 	.ascii "GET"
      0032F9 25 76                    6 	.word cmd_get  
      0032FB                       4713 	_dict_entry,4+F_IFUNC,FREE,free
      0032FB 32 F5                    1 	.word LINK 
                           0032FD     2 	LINK=.
      0032FD                          3 FREE:
      0032FD 14                       4 	.byte 4+F_IFUNC   	
      0032FE 46 52 45 45              5 	.ascii "FREE"
      003302 1C 3D                    6 	.word free  
      003304                       4714 	_dict_entry,3,FOR,for 
      003304 32 FD                    1 	.word LINK 
                           003306     2 	LINK=.
      003306                          3 FOR:
      003306 03                       4 	.byte 3   	
      003307 46 4F 52                 5 	.ascii "FOR"
      00330A 22 7E                    6 	.word for  
      00330C                       4715 	_dict_entry,4,FCPU,fcpu 
      00330C 33 06                    1 	.word LINK 
                           00330E     2 	LINK=.
      00330E                          3 FCPU:
      00330E 04                       4 	.byte 4   	
      00330F 46 43 50 55              5 	.ascii "FCPU"
      003313 2B 11                    6 	.word fcpu  
      003315                       4716 	_dict_entry,5,ERASE,erase 
      003315 33 0E                    1 	.word LINK 
                           003317     2 	LINK=.
      003317                          3 ERASE:
      003317 05                       4 	.byte 5   	
      003318 45 52 41 53 45           5 	.ascii "ERASE"
      00331D 27 6D                    6 	.word erase  
      00331F                       4717 	_dict_entry,3,END,cmd_end  
      00331F 33 17                    1 	.word LINK 
                           003321     2 	LINK=.
      003321                          3 END:
      003321 03                       4 	.byte 3   	
      003322 45 4E 44                 5 	.ascii "END"
      003325 25 6F                    6 	.word cmd_end  
      003327                       4718 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      003327 33 21                    1 	.word LINK 
                           003329     2 	LINK=.
      003329                          3 EEPROM:
      003329 16                       4 	.byte 6+F_IFUNC   	
      00332A 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003330 2D FD                    6 	.word const_eeprom_base  
      003332                       4719 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003332 33 29                    1 	.word LINK 
                           003334     2 	LINK=.
      003334                          3 EEFREE:
      003334 16                       4 	.byte 6+F_IFUNC   	
      003335 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00333B 1D 3E                    6 	.word func_eefree  
      00333D                       4720 	_dict_entry,4,EDIT,edit 
      00333D 33 34                    1 	.word LINK 
                           00333F     2 	LINK=.
      00333F                          3 EDIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      00333F 04                       4 	.byte 4   	
      003340 45 44 49 54              5 	.ascii "EDIT"
      003344 1F 8E                    6 	.word edit  
      003346                       4721 	_dict_entry,6+F_CMD,DWRITE,digital_write
      003346 33 3F                    1 	.word LINK 
                           003348     2 	LINK=.
      003348                          3 DWRITE:
      003348 06                       4 	.byte 6+F_CMD   	
      003349 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00334F 26 CC                    6 	.word digital_write  
      003351                       4722 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      003351 33 48                    1 	.word LINK 
                           003353     2 	LINK=.
      003353                          3 DROP:
      003353 04                       4 	.byte 4   	
      003354 44 52 4F 50              5 	.ascii "DROP"
      003358 2F CD                    6 	.word xdrop  
      00335A                       4723 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00335A 33 53                    1 	.word LINK 
                           00335C     2 	LINK=.
      00335C                          3 DREAD:
      00335C 15                       4 	.byte 5+F_IFUNC   	
      00335D 44 52 45 41 44           5 	.ascii "DREAD"
      003362 26 95                    6 	.word digital_read  
      003364                       4724 	_dict_entry,2,DO,do_loop
      003364 33 5C                    1 	.word LINK 
                           003366     2 	LINK=.
      003366                          3 DO:
      003366 02                       4 	.byte 2   	
      003367 44 4F                    5 	.ascii "DO"
      003369 2D 6C                    6 	.word do_loop  
      00336B                       4725 	_dict_entry,3,DIM,cmd_dim 
      00336B 33 66                    1 	.word LINK 
                           00336D     2 	LINK=.
      00336D                          3 DIM:
      00336D 03                       4 	.byte 3   	
      00336E 44 49 4D                 5 	.ascii "DIM"
      003371 1D C2                    6 	.word cmd_dim  
      003373                       4726 	_dict_entry,3,DEC,dec_base
      003373 33 6D                    1 	.word LINK 
                           003375     2 	LINK=.
      003375                          3 DEC:
      003375 03                       4 	.byte 3   	
      003376 44 45 43                 5 	.ascii "DEC"
      003379 1C 38                    6 	.word dec_base  
      00337B                       4727 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      00337B 33 75                    1 	.word LINK 
                           00337D     2 	LINK=.
      00337D                          3 DDR:
      00337D 13                       4 	.byte 3+F_IFUNC   	
      00337E 44 44 52                 5 	.ascii "DDR"
      003381 2D E4                    6 	.word const_ddr  
      003383                       4728 	_dict_entry,4,DATA,data  
      003383 33 7D                    1 	.word LINK 
                           003385     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003385                          3 DATA:
      003385 04                       4 	.byte 4   	
      003386 44 41 54 41              5 	.ascii "DATA"
      00338A 2E 02                    6 	.word data  
      00338C                       4729 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      00338C 33 85                    1 	.word LINK 
                           00338E     2 	LINK=.
      00338E                          3 CR2:
      00338E 13                       4 	.byte 3+F_IFUNC   	
      00338F 43 52 32                 5 	.ascii "CR2"
      003392 2D EE                    6 	.word const_cr2  
      003394                       4730 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      003394 33 8E                    1 	.word LINK 
                           003396     2 	LINK=.
      003396                          3 CR1:
      003396 13                       4 	.byte 3+F_IFUNC   	
      003397 43 52 31                 5 	.ascii "CR1"
      00339A 2D E9                    6 	.word const_cr1  
      00339C                       4731 	_dict_entry,5,CONST,cmd_const 
      00339C 33 96                    1 	.word LINK 
                           00339E     2 	LINK=.
      00339E                          3 CONST:
      00339E 05                       4 	.byte 5   	
      00339F 43 4F 4E 53 54           5 	.ascii "CONST"
      0033A4 1D AE                    6 	.word cmd_const  
      0033A6                       4732 	_dict_entry,4+F_CFUNC,CHAR,func_char
      0033A6 33 9E                    1 	.word LINK 
                           0033A8     2 	LINK=.
      0033A8                          3 CHAR:
      0033A8 24                       4 	.byte 4+F_CFUNC   	
      0033A9 43 48 41 52              5 	.ascii "CHAR"
      0033AD 29 3B                    6 	.word func_char  
      0033AF                       4733 	_dict_entry,3,BYE,bye 
      0033AF 33 A8                    1 	.word LINK 
                           0033B1     2 	LINK=.
      0033B1                          3 BYE:
      0033B1 03                       4 	.byte 3   	
      0033B2 42 59 45                 5 	.ascii "BYE"
      0033B5 2A 15                    6 	.word bye  
      0033B7                       4734 	_dict_entry,5,BTOGL,bit_toggle
      0033B7 33 B1                    1 	.word LINK 
                           0033B9     2 	LINK=.
      0033B9                          3 BTOGL:
      0033B9 05                       4 	.byte 5   	
      0033BA 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0033BF 21 C6                    6 	.word bit_toggle  
      0033C1                       4735 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0033C1 33 B9                    1 	.word LINK 
                           0033C3     2 	LINK=.
      0033C3                          3 BTEST:
      0033C3 15                       4 	.byte 5+F_IFUNC   	
      0033C4 42 54 45 53 54           5 	.ascii "BTEST"
      0033C9 21 E8                    6 	.word bit_test  
      0033CB                       4736 	_dict_entry,4,BSET,bit_set 
      0033CB 33 C3                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



                           0033CD     2 	LINK=.
      0033CD                          3 BSET:
      0033CD 04                       4 	.byte 4   	
      0033CE 42 53 45 54              5 	.ascii "BSET"
      0033D2 21 81                    6 	.word bit_set  
      0033D4                       4737 	_dict_entry,4,BRES,bit_reset
      0033D4 33 CD                    1 	.word LINK 
                           0033D6     2 	LINK=.
      0033D6                          3 BRES:
      0033D6 04                       4 	.byte 4   	
      0033D7 42 52 45 53              5 	.ascii "BRES"
      0033DB 21 A3                    6 	.word bit_reset  
      0033DD                       4738 	_dict_entry,3+F_IFUNC,BIT,bitmask
      0033DD 33 D6                    1 	.word LINK 
                           0033DF     2 	LINK=.
      0033DF                          3 BIT:
      0033DF 13                       4 	.byte 3+F_IFUNC   	
      0033E0 42 49 54                 5 	.ascii "BIT"
      0033E3 2D 46                    6 	.word bitmask  
      0033E5                       4739 	_dict_entry,3,AWU,awu 
      0033E5 33 DF                    1 	.word LINK 
                           0033E7     2 	LINK=.
      0033E7                          3 AWU:
      0033E7 03                       4 	.byte 3   	
      0033E8 41 57 55                 5 	.ascii "AWU"
      0033EB 2A 49                    6 	.word awu  
      0033ED                       4740 	_dict_entry,3+F_IFUNC,ASC,ascii
      0033ED 33 E7                    1 	.word LINK 
                           0033EF     2 	LINK=.
      0033EF                          3 ASC:
      0033EF 13                       4 	.byte 3+F_IFUNC   	
      0033F0 41 53 43                 5 	.ascii "ASC"
      0033F3 29 52                    6 	.word ascii  
      0033F5                       4741 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0033F5 33 EF                    1 	.word LINK 
                           0033F7     2 	LINK=.
      0033F7                          3 AND:
      0033F7 83                       4 	.byte 3+F_AND   	
      0033F8 41 4E 44                 5 	.ascii "AND"
      0033FB 00 88                    6 	.word TK_AND  
      0033FD                       4742 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      0033FD 33 F7                    1 	.word LINK 
                           0033FF     2 	LINK=.
      0033FF                          3 ALLOC:
      0033FF 05                       4 	.byte 5   	
      003400 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      003405 2F 97                    6 	.word xalloc  
      003407                       4743 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      003407 33 FF                    1 	.word LINK 
                           003409     2 	LINK=.
      003409                          3 ADCREAD:
      003409 17                       4 	.byte 7+F_IFUNC   	
      00340A 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003411 26 59                    6 	.word analog_read  
      003413                       4744 	_dict_entry,5,ADCON,power_adc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      003413 34 09                    1 	.word LINK 
                           003415     2 	LINK=.
      003415                          3 ADCON:
      003415 05                       4 	.byte 5   	
      003416 41 44 43 4F 4E           5 	.ascii "ADCON"
      00341B 26 09                    6 	.word power_adc  
      00341D                       4745 kword_dict::
      00341D                       4746 	_dict_entry,3+F_IFUNC,ABS,abs
      00341D 34 15                    1 	.word LINK 
                           00341F     2 	LINK=.
      00341F                          3 ABS:
      00341F 13                       4 	.byte 3+F_IFUNC   	
      003420 41 42 53                 5 	.ascii "ABS"
      003423 2A A2                    6 	.word abs  
                                   4747 
                           000000  4748 INDIRECT=0 
                           000000  4749 .if INDIRECT 
                                   4750 ;comands and fonctions address table 	
                                   4751 code_addr::
                                   4752 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4753 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4754 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4755 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4756 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4757 	.word let,list,log2,lshift,next,new ; 40..47
                                   4758 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4759 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4760 	.word const_portf,const_portg,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4761 	.word restore,return, random,rshift,run,free ; 72..79
                                   4762 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4763 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4764 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4765 	.word func_eefree,0 
                                   4766 .endif 
                                   4767 
                                   4768 
                                   4769 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      003425                         30 test:
      003425                         31     _vars VSIZE 
      003425 52 08            [ 2]    1     sub sp,#VSIZE 
      003427 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      00342A 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      00342C CE 00 0F         [ 2]   34     ldw x,ticks 
      00342F 1F 01            [ 2]   35     ldw (T,sp),x
      003431                         36 1$: ; test add24 
      003431 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      003433 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      003436 C7 00 0C         [ 1]   39     ld acc24,a 
      003439 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      00343C A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      00343E AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003441 CD 01 6B         [ 4]   43     call add24 
      003444 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003446 1D 00 01         [ 2]   45     subw x,#1
      003449 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      00344B 26 E4            [ 1]   47     jrne 1$
      00344D CD 17 F9         [ 4]   48     call prt_acc24
      003450 A6 20            [ 1]   49     ld a,#SPACE 
      003452 CD 08 D5         [ 4]   50     call putc 
      003455 CE 00 0F         [ 2]   51     ldw x,ticks 
      003458 72 F0 01         [ 2]   52     subw x,(T,sp)
      00345B CD 17 E2         [ 4]   53     call prt_i16  
      00345E A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003460 CD 08 D5         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003463 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003466 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003468 CE 00 0F         [ 2]   60     ldw x,ticks 
      00346B 1F 01            [ 2]   61     ldw (T,sp),x 
      00346D                         62 2$: 
      00346D A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00346F AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003472 C7 00 0C         [ 1]   65     ld acc24,a 
      003475 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003478 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      00347A AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00347D CD 02 66         [ 4]   69     call mul24 
      003480 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003482 1D 00 01         [ 2]   71     subw x,#1
      003485 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003487 26 E4            [ 1]   73     jrne 2$ 
      003489 CD 17 F9         [ 4]   74    call prt_acc24 
      00348C A6 20            [ 1]   75    ld a,#SPACE 
      00348E CD 08 D5         [ 4]   76    call putc 
      003491 CE 00 0F         [ 2]   77     ldw x,ticks 
      003494 72 F0 01         [ 2]   78     subw x,(T,sp)
      003497 CD 17 E2         [ 4]   79     call prt_i16 
      00349A A6 0D            [ 1]   80     ld a,#CR 
      00349C CD 08 D5         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00349F CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      0034A2 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      0034A4 CE 00 0F         [ 2]   85     ldw x,ticks 
      0034A7 1F 01            [ 2]   86     ldw (T,sp),x 
      0034A9                         87 3$: 
      0034A9 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      0034AB AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      0034AE C7 00 0C         [ 1]   90     ld acc24,a 
      0034B1 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      0034B4 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      0034B6 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034B9 CD 02 66         [ 4]   94     call mul24 
      0034BC 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034BE 1D 00 01         [ 2]   96     subw x,#1
      0034C1 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034C3 26 E4            [ 1]   98     jrne 3$ 
      0034C5 CD 17 F9         [ 4]   99     call prt_acc24    
      0034C8 A6 20            [ 1]  100     ld a,#SPACE 
      0034CA CD 08 D5         [ 4]  101     call putc 
      0034CD CE 00 0F         [ 2]  102     ldw x,ticks 
      0034D0 72 F0 01         [ 2]  103     subw x,(T,sp)
      0034D3 CD 17 E2         [ 4]  104     call prt_i16 
      0034D6 A6 0D            [ 1]  105     ld a,#CR 
      0034D8 CD 08 D5         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      0034DB CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      0034DE 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034E0 CE 00 0F         [ 2]  110     ldw x,ticks 
      0034E3 1F 01            [ 2]  111     ldw (T,sp),x 
      0034E5                        112 4$:
      0034E5 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034E7 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0034EA C7 00 0C         [ 1]  115     ld acc24,a 
      0034ED CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0034F0 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0034F2 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0034F5 CD 02 66         [ 4]  119     call mul24 
      0034F8 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0034FA 1D 00 01         [ 2]  121     subw x,#1
      0034FD 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0034FF 26 E4            [ 1]  123     jrne 4$ 
      003501 CD 17 F9         [ 4]  124     call prt_acc24 
      003504 A6 20            [ 1]  125     ld a,#SPACE 
      003506 CD 08 D5         [ 4]  126     call putc 
      003509 CE 00 0F         [ 2]  127     ldw x,ticks 
      00350C 72 F0 01         [ 2]  128     subw x,(T,sp)
      00350F CD 17 E2         [ 4]  129     call prt_i16 
      003512 A6 0D            [ 1]  130     ld a,#CR 
      003514 CD 08 D5         [ 4]  131     call putc 
                                    132 ; test abs24 
      003517 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      00351A 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      00351C CE 00 0F         [ 2]  135     ldw x,ticks 
      00351F 1F 01            [ 2]  136     ldw (T,sp),x 
      003521                        137 5$: 
      003521 A6 FF            [ 1]  138     ld a,#0xff
      003523 AE FF FF         [ 2]  139     ldw x,#0xffff
      003526 CD 01 E0         [ 4]  140     call abs24 
      003529 C7 00 0C         [ 1]  141     ld acc24,a 
      00352C CF 00 0D         [ 2]  142     ldw acc24+1,x
      00352F 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003531 1D 00 01         [ 2]  144     subw x,#1
      003534 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      003536 26 E9            [ 1]  146     jrne 5$ 
      003538 CD 17 F9         [ 4]  147     call prt_acc24 
      00353B A6 20            [ 1]  148     ld a,#SPACE 
      00353D CD 08 D5         [ 4]  149     call putc 
      003540 CE 00 0F         [ 2]  150     ldw x,ticks 
      003543 72 F0 01         [ 2]  151     subw x,(T,sp)
      003546 CD 17 E2         [ 4]  152     call prt_i16 
      003549                        153 6$:
      003549 A6 0D            [ 1]  154     ld a,#CR 
      00354B CD 08 D5         [ 4]  155     call putc 
      00354E CD 35 94         [ 4]  156     call read_integer 
      003551 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003556 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      00355B 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003560 CD 35 94         [ 4]  160     call read_integer 
      003563 C6 00 0C         [ 1]  161     ld a,acc24 
      003566 CE 00 0D         [ 2]  162     ldw x,acc16 
      003569 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      00356E 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003573 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003578 CD 02 F4         [ 4]  166     call div24 
      00357B 88               [ 1]  167     push a 
      00357C 89               [ 2]  168     pushw x 
      00357D CD 17 F9         [ 4]  169     call prt_acc24 
      003580 A6 20            [ 1]  170     ld a,#SPACE 
      003582 CD 08 D5         [ 4]  171     call putc 
      003585 85               [ 2]  172     popw x
      003586 CF 00 0D         [ 2]  173     ldw acc16,x  
      003589 32 00 0C         [ 1]  174     pop acc24 
      00358C CD 17 F9         [ 4]  175     call prt_acc24
      00358F 20 B8            [ 2]  176     jra 6$
      003591                        177     _drop VSIZE 
      003591 5B 08            [ 2]    1     addw sp,#VSIZE 
      003593 81               [ 4]  178     ret 
                                    179 
                                    180 
      003594                        181 read_integer:
      003594 A6 3F            [ 1]  182     ld a,#'? 
      003596 CD 08 D5         [ 4]  183     call putc  
      003599 72 5F 00 03      [ 1]  184 	clr count  
      00359D CD 0A 37         [ 4]  185 	call readln 
      0035A0 AE 16 90         [ 2]  186 	ldw x,#tib 
      0035A3 3B 00 03         [ 1]  187 	push count
      0035A6 4B 00            [ 1]  188 	push #0 
      0035A8 72 FB 01         [ 2]  189 	addw x,(1,sp)
      0035AB 5C               [ 1]  190 	incw x 
      0035AC                        191 	_drop 2 
      0035AC 5B 02            [ 2]    1     addw sp,#2 
      0035AE 72 5F 00 01      [ 1]  192 	clr in 
      0035B2 CD 0E AC         [ 4]  193 	call get_token
      0035B5 A1 84            [ 1]  194 	cp a,#TK_INTGR
      0035B7 27 0F            [ 1]  195 	jreq 3$ 
      0035B9 A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035BB CD 0E AC         [ 4]  197 	call get_token 
      0035BE A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035C0 27 03            [ 1]  199 	jreq 2$
      0035C2 CC 16 30         [ 2]  200 	jp syntax_error
      0035C5                        201 2$:
      0035C5 CD 02 0A         [ 4]  202 	call neg_acc24  	
      0035C8                        203 3$: 
      0035C8 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        00341F R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003415 R
    ADCON_ID=  000002     |   4 ADCREAD    003409 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      0033FF R   |   4 AND        0033F7 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        0033EF R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   000149 R   |   4 AWU        0033E7 R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        0033DF R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       0033D6 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       0033CD R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      0033C3 R
    BTEST_ID=  000010     |   4 BTOGL      0033B9 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        0033B1 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    0028A0 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       0033A8 R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000003     |     CNT_LO  =  000004 
    CODE_ADD=  000001     |     COMMA   =  00002C     |   4 CONST      00339E R
  4 CONST_CO   001D28 R   |     CONST_ID=  0000B6     |     COUNT   =  000003 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   4 CR1        003396 R   |     CR1_IDX =  00001A 
  4 CR2        00338E R   |     CR2_IDX =  000018     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000004     |     CTX_BPTR=  000001 
    CTX_COUN=  000004     |     CTX_IN  =  000003     |     CURR    =  000002 
    CVAR    =  000009     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   4 DATA       003385 R   |     DATA_IDX=  00001C 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        00337D R   |     DDR_IDX =  00001E 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        003375 R   |     DEC_IDX =  000020     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   4 DIM        00336D R
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         003366 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      00335C R   |     DREAD_ID=  000024     |   4 DROP       003353 R
  4 DWRITE     003348 R   |     DWRITE_I=  000026     |   4 EDIT       00333F R
    EDIT_IDX=  000028     |   4 EEFREE     003334 R   |     EEFREE_I=  0000B8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

  4 EEPROM     003329 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        003321 R   |     END_IDX =  00002C     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      003317 R
    ERASE_ID=  00002E     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_OVER=  000010     |     ERR_RD_O=  000011     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       00330E R
    FCPU_IDX=  000030     |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |   4 FLASH_ME   001EC9 R
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        003306 R   |     FOR_IDX =  000034     |   4 FREE       0032FD R
    FREE_IDX=  000088     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_AND   =  000080     |     F_CFUNC =  000020     |     F_CMD   =  000000 
    F_CONST =  000030     |     F_IFUNC =  000010     |     F_NOT   =  000070 
    F_OR    =  000090     |     F_XOR   =  0000A0     |   4 GET        0032F5 R
    GET_IDX =  0000B4     |   4 GOSUB      0032EB R   |     GOSUB_ID=  000036 
  4 GOTO       0032E2 R   |     GOTO_IDX=  000038     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        0032DA R   |     HEX_IDX =  00003A 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        0032D2 R
    IDR_IDX =  00003C     |   4 IF         0032CB R   |     IF_IDX  =  00003E 
    IN      =  000005     |     INCR    =  000001     |     INDIRECT=  000000 
    INP     =  000000     |   4 INPUT      0032C1 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000040 
    INPUT_PU=  000001     |     INT24   =  000005     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     0032B6 R   |     IWDGEN_I=  000042 
  4 IWDGREF    0032AA R   |     IWDGREF_=  000044     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        0032A2 R   |     KEY_END =  000083     |     KEY_IDX =  000046 
    KW_TYPE_=  0000F0     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        00329A R   |     LET_IDX =  000048 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  00341F R   |   4 LIST       003291 R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       003288 R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     00327D R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000005 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000001 
    NAME_MAX=  00000F     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        003275 R   |     NEW_IDX =  000052     |   4 NEXT       00326C R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        003264 R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |   4 NOT_SAVE   001FBB R   |   4 NO_APP     0028E2 R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        00325C R   |     ODR_IDX =  000054 
  4 ON         003255 R   |     ONOFF   =  000003     |     ON_IDX  =  0000B2 
    OP      =  000002     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OR         00324E R
    OR_IDX  =  0000FC     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        003246 R
    PAD_IDX =  000056     |     PAD_SIZE=  000080     |   4 PAUSE      00323C R
    PAUSE_ID=  000058     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       003233 R
    PEEK_IDX=  00005C     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   4 PICK       00322A R
    PINNO   =  000001     |   4 PINP       003221 R   |     PINP_IDX=  00005E 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      003217 R   |     PMODE_ID=  00005A 
  4 POKE       00320E R   |     POKE_IDX=  000060     |   4 POP        003206 R
  4 PORTA      0031E9 R   |   4 PORTB      0031DF R   |   4 PORTC      0031D5 R
  4 PORTD      0031CB R   |   4 PORTE      0031C1 R   |   4 PORTF      0031B7 R
  4 PORTG      0031AD R   |   4 PORTI      0031A3 R   |   4 POUT       0031FD R
    POUT_IDX=  000062     |     PREV    =  000001     |   4 PRINT      0031F3 R
    PROD    =  000001     |     PROD_SIG=  000004     |   4 PROG_ADD   001E9F R
  4 PROG_SIZ   001EB1 R   |     PRTA_IDX=  000066     |     PRTB_IDX=  000068 
    PRTC_IDX=  00006A     |     PRTD_IDX=  00006C     |     PRTE_IDX=  00006E 
    PRTF_IDX=  000070     |     PRTG_IDX=  000072     |     PRTI_IDX=  000074 
    PRT_IDX =  000064     |     PSIZE   =  00000B     |     PSTR    =  000003 
  4 PUSH       00319A R   |   4 PUT        003192 R   |   4 QKEY       003189 R
    QKEY_IDX=  000076     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001EDA R   |     RAM_SIZE=  001800 
    RBT_IDX =  00007A     |   4 READ       003180 R   |     READ_IDX=  000078 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

  4 REBOOT     003175 R   |     RECLEN  =  000005     |     REC_LEN =  000003 
    REC_XTRA=  000005     |   4 REG_A      0004C6 R   |   4 REG_CC     0004CA R
  4 REG_PC     0004BA R   |   4 REG_SP     0004CF R   |   4 REG_X      0004C2 R
  4 REG_Y      0004BE R   |     RELOP   =  000001     |   4 REM        00316D R
    REM_IDX =  00007C     |   4 RESTORE    003161 R   |     REST_IDX=  00007E 
    RETL1   =  000001     |   4 RETURN     003156 R   |     RET_ADDR=  000001 
    RET_BPTR=  000003     |     RET_IDX =  000080     |     RET_INW =  000005 
  4 RND        00314E R   |     RND_IDX =  000082     |     RONLY   =  000005 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     003143 R
    RSHIFT_I=  000084     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        00313B R   |     RUN_IDX =  000086     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000001     |     R_CC    =  000009 
    R_PC    =  00000A     |     R_X     =  000002     |     R_Y     =  000004 
  4 SAVE       003132 R   |     SAVE_IDX=  000032     |     SAV_ACC1=  000006 
    SAV_ACC2=  000008     |     SAV_COUN=  00000A     |     SAV_IN  =  000009 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   00289E R   |   4 SIZE       003129 R   |     SIZE_IDX=  0000B0 
    SKIP    =  000005     |   4 SLEEP      00311F R   |     SLEEP_ID=  00008A 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      003115 R   |     SPIEN_ID=  00008E     |   4 SPIRD      00310B R
    SPIRD_ID=  00008C     |   4 SPISEL     003100 R   |     SPISEL_I=  000090 
  4 SPIWR      0030F6 R   |     SPIWR_ID=  000092     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  00008C     |   4 STATES     00047E R   |   4 STEP       0030ED R
    STEP_IDX=  000094     |   4 STOP       0030E4 R   |     STOP_IDX=  000096 
    STR     =  000003     |   4 STR_BYTE   001EC2 R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |   4 SysCall    000012 R   |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      0030DA R   |     TICKS_ID=  000098 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    0030CE R   |   4 TIMER      0030C4 R
    TIMER_ID=  00009A     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_AND  =  000088     |     TK_ARRAY=  000005     |     TK_CFUNC=  000082 
    TK_CHAR =  000004     |     TK_CMD  =  000080     |     TK_COLON=  00000A 
    TK_COMMA=  000008     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FLOAT=  000086     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000006     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_NOT  =  000087 
    TK_OR   =  000089     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  00008A     |     TMROUT_I=  00009C     |   4 TO         0030BD R
  4 TONE       0030B4 R   |     TONE_IDX=  0000A0     |     TOWRITE =  000005 
    TO_IDX  =  00009E     |   4 Timer4Up   000013 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     0030A9 R   |     UBOUND_I=  0000A2     |   4 UBTN_Han   00005A R
  4 UFLASH     00309E R   |     UFLASH_I=  0000A4     |   4 UNTIL      003094 R
    UNTIL_ID=  0000A6     |     US      =  00001F     |   4 USER_ABO   000062 R
  4 USR        00308C R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000A8     |   4 Uart1RxH   000863 R
  4 UserButt   000036 R   |     VAL1    =  02FFFF     |     VAL2    =  00002A 
    VAL3    =  000003     |     VAL4    =  0005FF     |     VAL5    =  FFFFFFFD 
    VAR_NAME=  000001     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       003083 R   |     WAIT_IDX=  0000AA     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |     WLKPTR  =  000003     |   4 WORDS      003079 R
    WORDS_ID=  0000AC     |   4 WRITE      00306F R   |     WRITE_ID=  0000AE 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        003067 R   |     XOR_IDX =  0000FE     |     XSAVE   =  000002 
    XSTACK_E=  001773     |     XSTACK_S=  000014     |     XTEMP   =  000001 
    YSAVE   =  000004     |     YTEMP   =  000003     |   4 abs        002AA2 R
  4 abs24      0001E0 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   000B91 R
  4 add24      00016B R   |   4 add_char   0012FC R   |   4 add_spac   0010F4 R
  4 analog_r   002659 R   |   4 and_cond   001B6D R   |   4 and_fact   001B3D R
  4 app        003604 R   |   4 app_sign   003600 R   |   4 app_size   003602 R
  4 app_spac   003600 GR  |   4 arduino_   002B8F R   |   4 arg_list   001962 R
  5 array_si   000020 R   |   4 ascii      002952 R   |   4 at_tst     000F66 R
  4 atoi24     001884 GR  |   4 atoi_exi   0018F3 R   |   4 awu        002A49 R
  4 awu02      002A5C R   |   4 bad_port   0029CD R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       0025D0 R   |   4 beep_1kh   0025A3 GR
  4 bin_exit   000DCD R   |   4 bit_rese   0021A3 R   |   4 bit_set    002181 R
  4 bit_test   0021E8 R   |   4 bit_togg   0021C6 R   |   4 bitmask    002D46 R
  4 bkslsh_t   000F13 R   |   4 bksp       00093C R   |   2 block_bu   0016E0 GR
  4 block_er   000751 R   |   4 break_po   002745 R   |   4 bye        002A15 R
  4 clear_ba   001468 R   |   4 clear_bl   0027F5 R   |   4 clear_va   0013C0 R
  4 clock_in   00007D R   |   4 cmd_cons   001DAE R   |   4 cmd_dim    001DC2 R
  4 cmd_dim1   001DCC R   |   4 cmd_dim2   001DD2 R   |   4 cmd_end    00256F R
  4 cmd_get    002576 R   |   4 cmd_itf    0004EA R   |   4 cmd_line   0016BF R
  4 cmd_name   00131C R   |   4 cmd_on     00241D R   |   4 cmd_size   001C46 R
  4 cold_sta   0000B5 R   |   4 colon_ts   000F3A R   |   4 comma_ts   000F45 R
  4 comp_msg   00160F R   |   4 compile    001060 GR  |   4 conditio   001BBF R
  4 const_cr   002DE9 R   |   4 const_cr   002DEE R   |   4 const_dd   002DE4 R
  4 const_ee   002DFD R   |   4 const_id   002DDF R   |   4 const_in   002DF8 R
  4 const_od   002DDA R   |   4 const_ou   002DF3 R   |   4 const_po   002DB2 R
  4 const_po   002DB7 R   |   4 const_po   002DBC R   |   4 const_po   002DC1 R
  4 const_po   002DC6 R   |   4 const_po   002DCB R   |   4 const_po   002DD0 R
  4 const_po   002DD5 R   |   4 convert_   000D3D R   |   4 convert_   000900 R
  4 copy_com   000F9B R   |   5 count      000003 GR  |   4 cp24       0001A5 R
  4 cp24_ax    0001D7 R   |   4 cp_loop    001913 R   |   4 cpl24      0001E7 R
  4 cpy_cmd_   0010DC R   |   4 cpy_quot   00111C R   |   4 create_g   000C67 R
  4 cs_high    002F7F R   |   4 dash_tst   000F5B R   |   4 data       002E02 R
  4 data_err   002E7B R   |   5 data_len   000009 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 dec_base   001C38 R   |   4 decomp_l   0011B4 R
  4 decompil   00116C GR  |   4 del_line   000C3A R   |   4 delete_l   000A29 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 delete_n   00094C R   |   4 delete_u   0009EE R   |   4 digital_   002695 R
  4 digital_   0026CC R   |   4 div24      0002F4 R   |   4 divu24_8   0002D6 R
  4 do_loop    002D6C R   |   4 do_progr   000744 R   |   4 dup24      00015C R
  5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR  |   4 edit       001F8E R
  4 enable_i   002CD6 R   |   4 eql_tst    000FE6 R   |   4 equal      00130F R
  4 erase      00276D R   |   4 erase_ex   000775 R   |   4 erase_fl   00076B R
  4 err_bad_   001554 R   |   4 err_buf_   0015CA R   |   4 err_cmd_   001518 R
  4 err_div0   0014DD R   |   4 err_dupl   001532 R   |   4 err_math   0014C4 R
  4 err_mem_   0014A9 R   |   4 err_msg    001485 R   |   4 err_no_a   001560 R
  4 err_no_d   001593 R   |   4 err_no_f   0015B7 R   |   4 err_no_l   0014EC R
  4 err_no_p   0015A3 R   |   4 err_not_   001543 R   |   4 err_over   0015D7 R
  4 err_read   0015E1 R   |   4 err_run_   001502 R   |   4 err_synt   0014B6 R
  4 escaped    000D52 GR  |   4 expect     001950 R   |   4 expressi   001AA6 R
  4 factor     0019AE R   |   5 farptr     000018 R   |   4 fcpu       002B11 R
  4 fetchc     0005F1 R   |   4 fill_wri   0027E5 R   |   4 final_te   000B8A R
  4 first_li   001F38 R   |   5 flags      000022 GR  |   4 for        00227E R
  4 free       001C3D R   |   5 free_eep   000024 R   |   7 free_ram   000090 R
  4 func_arg   00195D R   |   4 func_cha   00293B R   |   4 func_eef   001D3E R
  4 ge         001311 R   |   4 get_addr   0017C2 R   |   4 get_arra   00197E R
  4 get_char   0017DC R   |   4 get_esca   00090C R   |   4 get_int2   0017CC R
  4 get_targ   0023AB R   |   4 get_targ   0023B9 R   |   4 get_tick   002A9B R
  4 get_toke   000EAC GR  |   4 get_valu   001CC1 R   |   4 getc       0008E5 GR
  4 gosub      0024C9 R   |   4 gosub_1    0024D4 R   |   4 gosub_2    0024DA R
  4 goto       0024AF R   |   4 goto_1     0024B9 R   |   4 gpio       0029A2 R
  4 gt         00130D R   |   4 gt_tst     000FF1 R   |   4 hex_base   001C33 R
  4 hex_dump   000631 R   |   4 if         002261 R   |   5 in         000001 GR
  5 in.saved   000002 GR  |   5 in.w       000000 GR  |   4 incr_far   000847 R
  4 input_ex   002139 R   |   4 input_lo   0020A3 R   |   4 input_va   00209F R
  4 insert_c   0009AB R   |   4 insert_l   000C93 R   |   4 insert_l   000D02 R
  4 interp_l   001700 R   |   4 interpre   0016DB R   |   4 invalid    000559 R
  4 invalid_   0005C7 R   |   4 is_alnum   000E00 GR  |   4 is_alpha   000DE6 GR
  4 is_data_   002E08 R   |   4 is_digit   000DF7 GR  |   4 is_symbo   000E09 R
  4 itoa       00181F GR  |   4 itoa_loo   001841 R   |   4 jp_to_ta   0024BC R
  4 key        002991 R   |   4 kword_di   00341D GR  |   4 kword_en   003065 R
  4 le         001316 R   |   4 ledoff     0003BA R   |   4 ledon      0003B5 R
  4 ledtoggl   0003BF R   |   4 left_par   0003C8 R   |   4 let        001C7E GR
  4 let_arra   001C8C R   |   4 let_dvar   00173F R   |   4 let_eval   001C94 R
  4 let_var    001C91 R   |   4 lines_sk   001F3B R   |   4 list       001EE9 R
  4 list_con   001CD2 R   |   4 list_exi   001F7D R   |   4 list_loo   001F5B R
  4 log2       002D19 R   |   4 look_tar   0023DC R   |   4 loop_bac   00238E R
  5 loop_dep   00001F R   |   4 loop_don   0023A3 R   |   4 lshift     002AB9 R
  4 lt         001314 R   |   4 lt_tst     00101A R   |   4 mem_peek   000575 R
  4 mod24      00038E R   |   4 move       00137C GR  |   4 move_dow   00139B R
  4 move_era   0006D3 R   |   4 move_exi   0013BC R   |   4 move_lef   000983 R
  4 move_loo   0013A0 R   |   4 move_prg   000713 R   |   4 move_rig   000991 R
  4 move_up    00138D R   |   4 mul24      000266 R   |   4 mul_char   0012FE R
  4 mulu24_8   000227 R   |   4 nbr_tst    000EDF R   |   4 ne         001319 R
  4 neg24      0001F0 R   |   4 neg_acc2   00020A R   |   4 neg_ax     000202 R
  4 new        002763 R   |   4 next       002336 R   |   4 next_lin   0016E3 R
  4 next_tok   00179A GR  |   4 no_match   001925 R   |   4 number     0005F7 R
  4 other      001043 R   |   4 overwrit   000BB6 R   |   2 pad        0016E0 GR
  4 pad_ref    002F84 R   |   4 parse_ad   0004D4 R   |   4 parse_bi   000DAB R
  4 parse_in   000D5A R   |   4 parse_ke   000E2C R   |   4 parse_qu   000D05 R
  4 parse_sy   000E14 R   |   4 pause      002A29 R   |   4 pause02    002A3C R
  4 peek       002240 R   |   4 peek_byt   000591 R   |   4 pin_mode   002B20 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 plus_tst   000FBA R   |   4 poke       00221F R   |   4 power_ad   002609 R
  4 prcnt_ts   000FDB R   |   4 print      001FF6 R   |   4 print_fa   0005D6 R
  4 print_he   000BED GR  |   4 print_re   000414 R   |   4 print_st   000569 R
  4 print_to   001807 R   |   4 prog_siz   001E58 R   |   4 program_   001E60 R
  4 program_   0006ED R   |   4 program_   000713 R   |   4 prt_acc2   0017F9 R
  4 prt_basi   001FD2 R   |   4 prt_i16    0017E2 R   |   4 prt_loop   001FFA R
  4 prt_peek   000397 GR  |   4 prt_reg1   0003F5 R   |   4 prt_reg8   0003D3 R
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       0008D5 GR
  4 puts       000932 GR  |   4 qgetc      0008DE GR  |   4 qkey       002995 GR
  4 qmark_ts   000F71 R   |   4 qsign      0027DE R   |   4 random     002BAF R
  4 read       002E80 R   |   4 read01     002E85 R   |   4 read_int   003594 R
  4 readln     000A37 GR  |   4 readln_l   000A46 R   |   4 readln_q   000BD3 R
  4 refresh_   002D14 R   |   4 relation   001ADE R   |   4 relop_st   001301 R
  4 remark     00213E GR  |   4 repl       000513 R   |   4 repl_exi   00053B R
  4 reset_co   001FF8 R   |   4 rest_con   00208F R   |   4 restore    002E16 R
  4 return     0024ED R   |   4 right_al   00110A GR  |   4 row_alig   00082C R
  4 row_eras   0006A6 R   |   4 row_eras   0006D3 R   |   4 row_loop   000614 R
  4 rparnt_t   000F2F R   |   4 rshift     002AE5 R   |   7 rsign      00008C R
  7 rsize      00008E R   |   4 rt_msg     0015FD R   |   4 run        00250A R
  4 run_app    000127 R   |   4 run_it     00253C R   |   4 run_it_0   00253E R
  5 rx1_head   00002E R   |   5 rx1_queu   000026 R   |   5 rx1_tail   00002F R
  4 save_app   002809 R   |   4 save_con   00207F R   |   4 scan_blo   000855 R
  4 search_d   001905 GR  |   4 search_e   00194D R   |   4 search_l   000C0F GR
  4 search_l   000C1E R   |   4 search_n   001D67 R   |   4 search_n   001909 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002B7F R
  4 send_esc   00095A R   |   4 send_par   000965 R   |   4 set_data   002E4C R
  4 set_time   002CB4 R   |   4 sharp_ts   000F50 R   |   4 show_row   000602 R
  4 single_c   0012F7 R   |   4 skip       000E99 R   |   4 skip_str   0017B3 R
  4 slash_ts   000FD0 R   |   4 sleep      002A1E R   |   4 software   0013CF R
  4 spaces     00099F GR  |   4 spi_clea   002F19 R   |   4 spi_disa   002F01 R
  4 spi_enab   002ECE R   |   4 spi_rcv_   002F3B R   |   4 spi_read   002F66 R
  4 spi_sele   002F6D R   |   4 spi_send   002F25 R   |   4 spi_writ   002F46 R
  2 stack_fu   00179C GR  |   2 stack_un   001828 R   |   4 star_tst   000FC5 R
  4 step       0022F4 R   |   4 stop       002717 R   |   4 store_lo   002323 R
  4 str_matc   001932 R   |   4 str_tst    000ECF R   |   4 strcmp     00135B R
  4 strcpy     00136C GR  |   4 strlen     001350 GR  |   4 sub24      000188 R
  4 symb_loo   000E15 R   |   4 syntax_e   001630 GR  |   4 system_i   001415 R
  5 tab_widt   000023 GR  |   4 tb_error   001632 GR  |   4 term       001A63 R
  4 term01     001A6B R   |   4 term_exi   001AA3 R   |   4 test       003425 R
  4 test_p     000561 R   |   2 tib        001690 GR  |   4 tick_tst   000F89 R
  5 ticks      00000F R   |   4 timeout    002CCB R   |   5 timer      000012 GR
  4 timer2_i   000093 R   |   4 timer4_i   0000A0 R   |   4 tk_id      001620 R
  4 to         0022AE R   |   4 to_eepro   00073C R   |   4 to_flash   000741 R
  4 to_hex_c   000C04 GR  |   4 to_upper   001878 GR  |   4 token_ch   001059 R
  4 token_ex   00105D R   |   4 tone       0025AE R   |   4 try_next   002E59 R
  5 txtbgn     00001B GR  |   5 txtend     00001D GR  |   4 uart1_ge   0008E5 GR
  4 uart1_in   000890 R   |   4 uart1_pu   0008D5 GR  |   4 uart1_qg   0008DE GR
  4 uart1_se   0008A0 R   |   4 ubound     001C73 R   |   4 uflash     0029D2 R
  4 unlock_e   000670 R   |   4 unlock_f   00068B R   |   4 until      002D7F R
  4 user_int   000049 R   |   4 usr        0029EF R   |   4 var_name   001162 GR
  5 vars       000034 GR  |   4 wait       002144 R   |   4 warm_ini   001446 R
  4 warm_sta   0016BC R   |   4 words      002C4A R   |   4 words_co   002C9E R
  4 write      0028F8 R   |   4 write_bl   0007F1 GR  |   4 write_bu   00072D R
  4 write_by   000777 R   |   4 write_ee   0007B3 R   |   4 write_ex   0007EC R
  4 write_fl   00079D R   |   4 write_nb   000816 R   |   4 xalloc     002F97 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

  4 xdrop      002FCD R   |   4 xpick      00304B R   |   4 xpop       002F8D R
  4 xpush      002F89 R   |   4 xput       003018 R   |   4 xstack_b   002FFA R
  2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

