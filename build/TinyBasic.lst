ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000080    43     PAD_SIZE=128
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 par_level: .blkb 1 ; level of parenthesis in imbricated function callS
      00000F                         73 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000011                         74 timer: .blkw 1 ;  milliseconds count down timer 
      000013                         75 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000015                         76 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000017                         77 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000018                         78 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000019                         79 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      00001A                         80 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001D                         81 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001F                         82 txtend: .blkw 1 ; tokenized BASIC text end address 
      000021                         83 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000022                         84 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000024                         85 flags: .blkb 1 ; various boolean flags
      000025                         86 tab_width: .blkb 1 ; print colon width (default 4)
      000026                         87 rx_char: .blkb 1 ; last received character from UART1 
      000027                         88 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     89 ; keep 'free_ram' as last variable 
      00005B                         90 free_ram: ; from here RAM free for BASIC text 
                                     91 
                                     92 ;;-----------------------------------
                                     93     .area SSEG (ABS)
                                     94 ;; working buffers and stack at end of RAM. 	
                                     95 ;;-----------------------------------
      001690                         96     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         97 tib: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         98 pad: .ds PAD_SIZE             ; working buffer
      001760                         99 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        100 stack_unf: ; stack underflow ; control_stack bottom 
                                    101 
                                    102 ;;--------------------------------------
                                    103     .area HOME 
                                    104 ;; interrupt vector table at 0x8000
                                    105 ;;--------------------------------------
      000000 82 00 04 EF            106     int cold_start			; RESET vector 
                           000000   107 .if DEBUG
                                    108 	int TrapHandler 		;TRAP  software interrupt
                           000001   109 .else
      000004 82 00 00 00            110 	int NonHandledInterrupt ;TRAP  software interrupt
                                    111 .endif
      000008 82 00 00 00            112 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            113 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            114 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            115 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            116 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            117 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            118 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            119 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            120 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            121 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            122 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            123 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            124 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            125 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            126 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            127 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            128 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            129 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            130 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            131 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            132 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            133 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            134 	int NonHandledInterrupt ;int22 ADC2 end of conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000064 82 00 00 37            135 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            136 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            137 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            138 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            139 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            140 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            141 	int NonHandledInterrupt ;int29  not used
                                    142 
                                    143 ;---------------------------------------
                                    144     .area CODE
                                    145 ;---------------------------------------
                           000000   146 .if DEBUG
                                    147 .asciz "STM8_TBI" ; I like to put module name here.
                                    148 .endif 
                                    149 
                                    150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    151 ; non handled interrupt 
                                    152 ; reset MCU
                                    153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        154 NonHandledInterrupt:
      000000 71                     155     .byte 0x71  ; invalid opcode reinitialize MCU
                                    156 
                                    157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    158 ; auto wakeup from halt
                                    159 ; at iret, program continue 
                                    160 ; after hatl instruction
                                    161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        162 AWUHandler:
      000001 72 19 50 F0      [ 1]  163 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  164 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  165 	clr AWU_TBR 
      00000E 80               [11]  166 	iret
                                    167 
                                    168 ;--------------------------
                                    169 ; UART1 receive character
                                    170 ; CTRL-C (ASCII 3)
                                    171 ; cancel program execution
                                    172 ; and fall back to command line
                                    173 ;--------------------------
      00000F                        174 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  175 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  176 	ld a,UART1_DR 
      000017 A1 03            [ 1]  177 	cp a,#CTRL_C 
      000019 26 07            [ 1]  178 	jrne 1$
      00001B 72 5F 00 26      [ 1]  179 	clr rx_char 
      00001F CC 00 60         [ 2]  180 	jp user_interrupted
      000022                        181 1$:
      000022 A1 18            [ 1]  182 	cp a,#CAN ; CTRL_X 
      000024 26 03            [ 1]  183 	jrne 2$
      000026 CC 04 EF         [ 2]  184 	jp cold_start 	
      000029                        185 2$: 
      000029 A1 1A            [ 1]  186 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  187 	jrne 3$
      00002D CD 05 B4         [ 4]  188 	call cancel_autorun 
      000030 CC 04 EF         [ 2]  189 	jp cold_start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000033 C7 00 26         [ 1]  190 3$:	ld rx_char,a 	
      000036 80               [11]  191 	iret 
                                    192 
                                    193 ;------------------------------------
                                    194 ; software interrupt handler  
                                    195 ;------------------------------------
                           000000   196 .if DEBUG 
                                    197 TrapHandler:
                                    198 	bset flags,#FTRAP 
                                    199 	call print_registers
                                    200 	call cmd_itf
                                    201 	bres flags,#FTRAP 	
                                    202 	iret
                                    203 .endif 
                                    204 
                                    205 ;------------------------------
                                    206 ; TIMER 4 is used to maintain 
                                    207 ; a milliseconds 'ticks' counter
                                    208 ; and decrement 'timer' varaiable
                                    209 ;--------------------------------
      000037                        210 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  211 	clr TIM4_SR 
      00003B CE 00 0F         [ 2]  212 	ldw x,ticks
      00003E 5C               [ 2]  213 	incw x
      00003F CF 00 0F         [ 2]  214 	ldw ticks,x 
      000042 CE 00 11         [ 2]  215 	ldw x,timer
      000045 5D               [ 2]  216 	tnzw x 
      000046 27 04            [ 1]  217 	jreq 1$
      000048 5A               [ 2]  218 	decw x 
      000049 CF 00 11         [ 2]  219 	ldw timer,x 
      00004C                        220 1$:	
      00004C 80               [11]  221 	iret 
                                    222 
                                    223 
                                    224 ;------------------------------------
                                    225 ; Triggered by pressing USER UserButton 
                                    226 ; on NUCLEO card.
                                    227 ; This is used to abort a progam lock 
                                    228 ; in infinite loop. 
                                    229 ;------------------------------------
      00004D                        230 UserButtonHandler:
                                    231 ; wait button release
      00004D 5F               [ 1]  232 	clrw x
      00004E 5A               [ 2]  233 1$: decw x 
      00004F 26 FD            [ 1]  234 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  235 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    236 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 24 05   [ 2]  237     btjf flags,#FSLEEP,2$
      00005B 72 17 00 24      [ 1]  238 	bres flags,#FSLEEP 
      00005F 80               [11]  239 	iret
      000060                        240 2$:	
      000060                        241 user_interrupted:
      000060 72 00 00 24 02   [ 2]  242     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  243 	jra UBTN_Handler_exit 
      000067                        244 4$:	; program interrupted by user 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000067 72 11 00 24      [ 1]  245 	bres flags,#FRUN 
      00006B AE 00 82         [ 2]  246 	ldw x,#USER_ABORT
      00006E CD 01 D7         [ 4]  247 	call puts 
      000071 CE 00 04         [ 2]  248 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  249 	ld a,in 
      000077 CD 12 9A         [ 4]  250 	call prt_basic_line
      00007A                        251 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  252     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  253     ldw sp,x
      00007E 9A               [ 1]  254 	rim 
      00007F CC 08 1C         [ 2]  255 	jp warm_start
                                    256 
      000082 0A 50 72 6F 67 72 61   257 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    258 
                                    259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    260 ;    peripherals initialization
                                    261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    262 
                                    263 ;----------------------------------------
                                    264 ; inialize MCU clock 
                                    265 ; input:
                                    266 ;   A 		source  HSI | 1 HSE 
                                    267 ;   XL      CLK_CKDIVR , clock divisor 
                                    268 ; output:
                                    269 ;   none 
                                    270 ;----------------------------------------
      00009D                        271 clock_init:	
      00009D C1 50 C3         [ 1]  272 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  273 	jreq 2$ ; no switching required 
                                    274 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  275 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  276 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  277 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  278 	jrne 1$
      0000AE                        279 2$: 	
                                    280 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  281 	ld a,xl 
      0000AF C7 50 C6         [ 1]  282 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  283 	ret
                                    284 
                                    285 ;----------------------------------
                                    286 ; TIMER2 used as audio tone output 
                                    287 ; on port D:5.
                                    288 ; channel 1 configured as PWM mode 1 
                                    289 ;-----------------------------------  
                           00F424   290 TIM2_CLK_FREQ=62500
      0000B3                        291 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  292 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  293  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  294 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  295 	ret 
                                    296 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    297 ;---------------------------------
                                    298 ; TIM4 is configured to generate an 
                                    299 ; interrupt every millisecond 
                                    300 ;----------------------------------
      0000C0                        301 timer4_init:
      0000C0 72 18 50 C7      [ 1]  302 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  303 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  304 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  305 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  306 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  307 	ret
                                    308 
                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;  routines to write to FLASH, EEPROM 
                                    311 ;  and OPTION 
                                    312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    313 
                                    314 ;----------------------------------
                                    315 ; unlock EEPROM/OPT for writing/erasing
                                    316 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    317 ; input:
                                    318 ;  none
                                    319 ; output:
                                    320 ;  none 
                                    321 ;----------------------------------
      0000D5                        322 unlock_eeprom:
      0000D5 35 AE 50 64      [ 1]  323 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000D9 35 56 50 64      [ 1]  324     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000DD 72 07 50 5F FB   [ 2]  325 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E2 81               [ 4]  326 	ret
                                    327 
                                    328 ;----------------------------------
                                    329 ; unlock FLASH for writing/erasing
                                    330 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    331 ; input:
                                    332 ;  none
                                    333 ; output:
                                    334 ;  none
                                    335 ;----------------------------------
      0000E3                        336 unlock_flash:
      0000E3 35 56 50 62      [ 1]  337 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000E7 35 AE 50 62      [ 1]  338 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000EB 72 03 50 5F FB   [ 2]  339 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F0 81               [ 4]  340 	ret
                                    341 
                           000000   342 USE_BLOCK_ERASE=0 
                           000000   343 .if USE_BLOCK_ERASE 
                                    344 ; this code is copied to RAM 
                                    345 
                                    346 ;----------------------------
                                    347 ; erase block code must be 
                                    348 ; executed from RAM
                                    349 ;-----------------------------
                                    350 erase_start:
                                    351 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    352     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    353     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    354 	ldf [farptr],a
                                    355     inc farptr+2 
                                    356     ldf [farptr],a
                                    357     inc farptr+2 
                                    358     ldf [farptr],a
                                    359     inc farptr+2 
                                    360     ldf [farptr],a
                                    361 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    362 	ret
                                    363 erase_end:
                                    364 
                                    365 ; copy erase_start in RAM 
                                    366 move_code_in_ram:
                                    367 	ldw x,#erase_end 
                                    368 	subw x,#erase_start
                                    369 	ldw acc16,x 
                                    370 	ldw x,#pad 
                                    371 	ldw y,#erase_start 
                                    372 	call move 
                                    373 	ret 
                                    374 
                                    375 ;-----------------------------------
                                    376 ; erase flash or EEPROM block 
                                    377 ; a block is 128 bytes 
                                    378 ; input:
                                    379 ;   farptr  address block begin
                                    380 ; output:
                                    381 ;   none
                                    382 ;--------------------------------------
                                    383 erase_block:
                                    384 	ldw x,farptr+1 
                                    385 	pushw x 
                                    386 	call move_code_in_ram 
                                    387 	popw x 
                                    388 	ldw farptr+1,x 
                                    389 	tnz farptr
                                    390 	jrne erase_flash 
                                    391 	ldw x,#FLASH_BASE 
                                    392 	cpw x,farptr+1 
                                    393 	jrpl erase_flash 
                                    394 ; erase eeprom block
                                    395 	call unlock_eeprom 
                                    396 	sim 
                                    397 	call pad   
                                    398 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    399 	rim 
                                    400 	ret 
                                    401 ; erase flash block:
                                    402 erase_flash:
                                    403 	call unlock_flash 
                                    404 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    405 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    406 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    407 	sim 
                                    408 	call pad 
                                    409     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    410 	rim 
                                    411 	ret 
                                    412 .endif ;;;; USE_BLOCK_ERASE ;;;;
                                    413 
                                    414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    415 ; write a byte to FLASH or EEPROM/OPTION  
                                    416 ; input:
                                    417 ;    a  		byte to write
                                    418 ;    farptr  	address
                                    419 ;    x          farptr[x]
                                    420 ; output:
                                    421 ;    none
                                    422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    423 	; variables locales
                           000001   424 	BTW = 1   ; byte to write offset on stack
                           000002   425 	OPT = 2   ; OPTION flag offset on stack
                           000002   426 	VSIZE = 2
      0000F1                        427 write_byte:
      0000F1 90 89            [ 2]  428 	pushw y
      0000F3                        429 	_vars VSIZE
      0000F3 52 02            [ 2]    1     sub sp,#VSIZE 
      0000F5 6B 01            [ 1]  430 	ld (BTW,sp),a ; byte to write 
      0000F7 0F 02            [ 1]  431 	clr (OPT,sp)  ; OPTION flag
                                    432 ; put addr[15:0] in Y, for bounds check.
      0000F9 90 CE 00 18      [ 2]  433 	ldw y,farptr+1   ; Y=addr15:0
                                    434 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000FD 72 5D 00 17      [ 1]  435 	tnz farptr 
      000101 26 14            [ 1]  436 	jrne write_flash
      000103 90 A3 26 00      [ 2]  437     cpw y,#user_space
      000107 24 0E            [ 1]  438     jruge write_flash
      000109 90 A3 40 00      [ 2]  439 	cpw y,#EEPROM_BASE  
      00010D 25 52            [ 1]  440     jrult write_exit
      00010F 90 A3 48 7F      [ 2]  441 	cpw y,#OPTION_END 
      000113 22 4C            [ 1]  442 	jrugt write_exit
      000115 20 16            [ 2]  443 	jra write_eeprom 
                                    444 ; write program memory
      000117                        445 write_flash:
      000117 CD 00 E3         [ 4]  446 	call unlock_flash 
      00011A 9B               [ 1]  447 1$:	sim 
      00011B 7B 01            [ 1]  448 	ld a,(BTW,sp)
      00011D 92 A7 00 17      [ 4]  449 	ldf ([farptr],x),a ; farptr[x]=A
      000121 72 05 50 5F FB   [ 2]  450 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000126 9A               [ 1]  451     rim 
      000127 72 13 50 5F      [ 1]  452     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00012B 20 34            [ 2]  453     jra write_exit
                                    454 ; write eeprom and option
      00012D                        455 write_eeprom:
      00012D CD 00 D5         [ 4]  456 	call unlock_eeprom
                                    457 	; check for data eeprom or option eeprom
      000130 90 A3 48 00      [ 2]  458 	cpw y,#OPTION_BASE
      000134 2B 08            [ 1]  459 	jrmi 1$
      000136 90 A3 48 80      [ 2]  460 	cpw y,#OPTION_END+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00013A 2A 02            [ 1]  461 	jrpl 1$
      00013C 03 02            [ 1]  462 	cpl (OPT,sp)
      00013E                        463 1$: 
      00013E 0D 02            [ 1]  464     tnz (OPT,sp)
      000140 27 08            [ 1]  465     jreq 2$
                                    466 	; pour modifier une option il faut modifier ces 2 bits
      000142 72 1E 50 5B      [ 1]  467     bset FLASH_CR2,#FLASH_CR2_OPT
      000146 72 1F 50 5C      [ 1]  468     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00014A                        469 2$: 
      00014A 7B 01            [ 1]  470     ld a,(BTW,sp)
      00014C 92 A7 00 17      [ 4]  471     ldf ([farptr],x),a
      000150 0D 02            [ 1]  472     tnz (OPT,sp)
      000152 27 08            [ 1]  473     jreq 3$
      000154 5C               [ 2]  474     incw x
      000155 7B 01            [ 1]  475     ld a,(BTW,sp)
      000157 43               [ 1]  476     cpl a
      000158 92 A7 00 17      [ 4]  477     ldf ([farptr],x),a
      00015C 72 05 50 5F FB   [ 2]  478 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000161                        479 write_exit:
      000161                        480 	_drop VSIZE 
      000161 5B 02            [ 2]    1     addw sp,#VSIZE 
      000163 90 85            [ 2]  481 	popw y
      000165 81               [ 4]  482     ret
                                    483 
                                    484 ;--------------------------------------------
                                    485 ; write a data block to eeprom or flash 
                                    486 ; input:
                                    487 ;   Y        source address   
                                    488 ;   X        array index  destination  farptr[x]
                                    489 ;   BSIZE    block size bytes 
                                    490 ;   farptr   write address , byte* 
                                    491 ; output:
                                    492 ;	X 		after last byte written 
                                    493 ;   Y 		after last byte read 
                                    494 ;  farptr   point after block
                                    495 ;---------------------------------------------
      000166                        496 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000166                        497 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    498 	; local var 
                           000001   499 	XSAVE=1 
                           000002   500 	VSIZE=2 
      000166                        501 write_block:
      000166                        502 	_vars VSIZE
      000166 52 02            [ 2]    1     sub sp,#VSIZE 
      000168 1F 01            [ 2]  503 	ldw (XSAVE,sp),x 
      00016A 1E 05            [ 2]  504 	ldw x,(BSIZE,sp) 
      00016C 27 13            [ 1]  505 	jreq 9$
      00016E 1E 01            [ 2]  506 1$:	ldw x,(XSAVE,sp)
      000170 90 F6            [ 1]  507 	ld a,(y)
      000172 CD 00 F1         [ 4]  508 	call write_byte 
      000175 5C               [ 2]  509 	incw x 
      000176 90 5C            [ 2]  510 	incw y 
      000178 1F 01            [ 2]  511 	ldw (XSAVE,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00017A 1E 05            [ 2]  512 	ldw x,(BSIZE,sp)
      00017C 5A               [ 2]  513 	decw x
      00017D 1F 05            [ 2]  514 	ldw (BSIZE,sp),x 
      00017F 26 ED            [ 1]  515 	jrne 1$
      000181                        516 9$:
      000181 1E 01            [ 2]  517 	ldw x,(XSAVE,sp)
      000183 CD 18 AC         [ 4]  518 	call incr_farptr
      000186                        519 	_drop VSIZE
      000186 5B 02            [ 2]    1     addw sp,#VSIZE 
      000188 81               [ 4]  520 	ret 
                                    521 
                                    522 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    524 ;;   UART1 subroutines
                                    525 ;;   used for user interface 
                                    526 ;;   communication channel.
                                    527 ;;   settings: 
                                    528 ;;		115200 8N1 no flow control
                                    529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    530 
                                    531 ;---------------------------------------------
                                    532 ; initialize UART1, 115200 8N1
                                    533 ; input:
                                    534 ;	none
                                    535 ; output:
                                    536 ;   none
                                    537 ;---------------------------------------------
      000189                        538 uart1_init:
      000189 72 1A 50 02      [ 1]  539     bset PA_DDR,#UART1_TX_PIN
      00018D 72 1A 50 03      [ 1]  540     bset PA_CR1,#UART1_TX_PIN 
      000191 72 1A 50 04      [ 1]  541     bset PA_CR2,#UART1_TX_PIN 
                                    542 ; enable UART1 clock
      000195 72 14 50 C7      [ 1]  543 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000199                        544 uart1_set_baud: 
                                    545 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    546 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000199 A6 E1            [ 1]  547 	ld a,#CLK_SWR_HSI
      00019B C1 50 C3         [ 1]  548 	cp a,CLK_CMSR 
      00019E 27 0A            [ 1]  549 	jreq 2$ 
      0001A0                        550 1$: ; 8 Mhz 	
      0001A0 35 05 52 33      [ 1]  551 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001A4 35 04 52 32      [ 1]  552 	mov UART1_BRR1,#0x4
      0001A8 20 08            [ 2]  553 	jra 3$
      0001AA                        554 2$: ; 16 Mhz 	
      0001AA 35 0B 52 33      [ 1]  555 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001AE 35 08 52 32      [ 1]  556 	mov UART1_BRR1,#0x08
      0001B2                        557 3$:
      0001B2 72 5F 52 31      [ 1]  558     clr UART1_DR
      0001B6 35 2C 52 35      [ 1]  559 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0001BA 72 10 52 35      [ 1]  560 	bset UART1_CR2,#UART_CR2_SBK
      0001BE 72 0D 52 30 FB   [ 2]  561     btjf UART1_SR,#UART_SR_TC,.
      0001C3 81               [ 4]  562     ret
                                    563 
                                    564 ;---------------------------------
                                    565 ; send character to UART1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    566 ; input:
                                    567 ;   A 
                                    568 ; output:
                                    569 ;   none 
                                    570 ;--------------------------------	
      0001C4                        571 putc:
      0001C4 72 0F 52 30 FB   [ 2]  572 	btjf UART1_SR,#UART_SR_TXE,.
      0001C9 C7 52 31         [ 1]  573 	ld UART1_DR,a 
      0001CC 81               [ 4]  574 	ret 
                                    575 
                                    576 ;---------------------------------
                                    577 ; wait character from UART1 
                                    578 ; input:
                                    579 ;   none
                                    580 ; output:
                                    581 ;   A 			char  
                                    582 ;--------------------------------	
      0001CD                        583 getc:
      0001CD C6 00 26         [ 1]  584 	ld a,rx_char 
      0001D0 27 FB            [ 1]  585 	jreq getc 
      0001D2 72 5F 00 26      [ 1]  586 	clr rx_char 
      0001D6 81               [ 4]  587 	ret 
                                    588 
                                    589 ;-----------------------------
                                    590 ; send an ASCIZ string to UART1 
                                    591 ; input: 
                                    592 ;   x 		char * 
                                    593 ; output:
                                    594 ;   none 
                                    595 ;-------------------------------
      0001D7                        596 puts:
      0001D7 F6               [ 1]  597     ld a,(x)
      0001D8 27 06            [ 1]  598 	jreq 1$
      0001DA CD 01 C4         [ 4]  599 	call putc 
      0001DD 5C               [ 2]  600 	incw x 
      0001DE 20 F7            [ 2]  601 	jra puts 
      0001E0 81               [ 4]  602 1$:	ret 
                                    603 
                                    604 
                                    605 ;---------------------------
                                    606 ; delete character at left 
                                    607 ; of cursor on terminal 
                                    608 ; input:
                                    609 ;   none 
                                    610 ; output:
                                    611 ;	none 
                                    612 ;---------------------------
      0001E1                        613 bksp:
      0001E1 A6 08            [ 1]  614 	ld a,#BS 
      0001E3 CD 01 C4         [ 4]  615 	call putc 
      0001E6 A6 20            [ 1]  616 	ld a,#SPACE 
      0001E8 CD 01 C4         [ 4]  617 	call putc 
      0001EB A6 08            [ 1]  618 	ld a,#BS 
      0001ED CD 01 C4         [ 4]  619 	call putc 
      0001F0 81               [ 4]  620 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    621 ;---------------------------
                                    622 ; delete n character left of cursor 
                                    623 ; at terminal.
                                    624 ; input: 
                                    625 ;   A   number of characters to delete.
                                    626 ; output:
                                    627 ;    none 
                                    628 ;--------------------------	
      0001F1                        629 delete:
      0001F1 88               [ 1]  630 	push a 
      0001F2 0D 01            [ 1]  631 0$:	tnz (1,sp)
      0001F4 27 07            [ 1]  632 	jreq 1$
      0001F6 CD 01 E1         [ 4]  633 	call bksp 
      0001F9 0A 01            [ 1]  634 	dec (1,sp)
      0001FB 20 F5            [ 2]  635 	jra 0$
      0001FD 84               [ 1]  636 1$:	pop a 
      0001FE 81               [ 4]  637 	ret
                                    638 
                                    639 ;--------------------------
                                    640 ; print n spaces on terminal
                                    641 ; input:
                                    642 ;  X 		number of spaces 
                                    643 ; output:
                                    644 ;	none 
                                    645 ;---------------------------
      0001FF                        646 spaces:
      0001FF A6 20            [ 1]  647 	ld a,#SPACE 
      000201 5D               [ 2]  648 1$:	tnzw x
      000202 27 06            [ 1]  649 	jreq 9$
      000204 CD 01 C4         [ 4]  650 	call putc 
      000207 5A               [ 2]  651 	decw x
      000208 20 F7            [ 2]  652 	jra 1$
      00020A                        653 9$: 
      00020A 81               [ 4]  654 	ret 
                                    655 
                                    656 ;;;;;;;;;;;;;
                           000000   657 .if DEBUG 
                                    658 ;---------------------------------
                                    659 ;; print actual registers states 
                                    660 ;; as pushed on stack 
                                    661 ;; {Y,X,CC,A}
                                    662 ;---------------------------------
                                    663 	_argofs 0  
                                    664 	_arg R_Y 1 
                                    665 	_arg R_X 3
                                    666 	_arg R_A 5
                                    667 	_arg R_CC 6
                                    668 prt_regs:
                                    669 	ldw x,#regs_state 
                                    670 	call puts
                                    671 ; register PC
                                    672 	ldw y,(1,sp)
                                    673 	ldw x,#REG_EPC 
                                    674 	call prt_reg16 
                                    675 ; register CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    676 	ld a,(R_CC,sp)
                                    677 	ldw x,#REG_CC 
                                    678 	call prt_reg8 
                                    679 ; register A 
                                    680 	ld a,(R_A,sp)
                                    681 	ldw x,#REG_A 
                                    682 	call prt_reg8 
                                    683 ; register X 
                                    684 	ldw y,(R_X,sp)
                                    685 	ldw x,#REG_X 
                                    686 	call prt_reg16 
                                    687 ; register Y 
                                    688 	ldw y,(R_Y,sp)
                                    689 	ldw x,#REG_Y 
                                    690 	call prt_reg16 
                                    691 ; register SP 
                                    692 	ldw y,sp
                                    693 	addw y,#6+ARG_OFS  
                                    694 	ldw x,#REG_SP
                                    695 	call prt_reg16
                                    696 	ld a,#CR 
                                    697 	call putc
                                    698 	call putc   
                                    699 	ret 
                                    700 
                                    701 
                                    702 regs_state: .asciz "\nregisters state\n--------------------\n"
                                    703 
                                    704 
                                    705 ;--------------------
                                    706 ; print content at address in hex.
                                    707 ; input:
                                    708 ;   X 	address to peek 
                                    709 ; output:
                                    710 ;	none 
                                    711 ;--------------------	
                                    712 prt_peek:
                                    713 	pushw x 
                                    714 	ldw acc16,x 
                                    715 	clr acc24 
                                    716 	clrw x 
                                    717 	ld a,#16 
                                    718 	call prti24 
                                    719 	ld a,#': 
                                    720 	call putc 
                                    721 	ld a,#SPACE 
                                    722 	call putc 
                                    723 	popw x 
                                    724 	ld a,(x)
                                    725 	ld acc8,a 
                                    726 	clrw x 
                                    727 	ld a,#16 
                                    728 	call prti24
                                    729 	ret 
                                    730 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    731 ;;;;;;;;;;;;;;;;;;;;	
                                    732 
                                    733 ;----------------------
                                    734 ; print token id && value
                                    735 ; input:
                                    736 ;   A     token id 
                                    737 ;   X     token value 
                                    738 ;---------------------
                           000001   739 	BSAVE=1
                           000002   740 	AREG=2
                           000003   741 	XREG=3
                           000004   742 	VSIZE=4
      00020B                        743 prt_tok:
      00020B                        744 	_vars VSIZE 
      00020B 52 04            [ 2]    1     sub sp,#VSIZE 
      00020D 6B 02            [ 1]  745 	ld (AREG,sp),a 
      00020F 1F 03            [ 2]  746 	ldw (XREG,sp),x 
      000211 C6 00 0A         [ 1]  747 	ld a, base
      000214 6B 01            [ 1]  748 	ld (BSAVE,sp),a 
      000216 35 10 00 0A      [ 1]  749 	mov base,#16  
      00021A AE 02 42         [ 2]  750 	ldw x,#token_msg
      00021D CD 01 D7         [ 4]  751 	call puts 
      000220 5F               [ 1]  752 	clrw x 
      000221 7B 02            [ 1]  753 	ld a,(AREG,sp)
      000223 97               [ 1]  754 	ld xl,a 
      000224 CD 09 2D         [ 4]  755 	call print_int 
      000227 A6 20            [ 1]  756 	ld a,#SPACE
      000229 CD 01 C4         [ 4]  757 	call putc 
      00022C 1E 03            [ 2]  758 	ldw x,(XREG,sp)
      00022E CD 09 2D         [ 4]  759 	call print_int 
      000231 A6 0D            [ 1]  760 	ld a,#CR 
      000233 CD 01 C4         [ 4]  761 	call putc 
      000236 7B 01            [ 1]  762 	ld a,(BSAVE,sp)
      000238 C7 00 0A         [ 1]  763 	ld base,a 
      00023B 7B 02            [ 1]  764 	ld a,(AREG,sp)
      00023D 1E 03            [ 2]  765 	ldw x,(XREG,sp)
      00023F                        766 	_drop VSIZE 
      00023F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000241 81               [ 4]  767 	ret 
      000242 74 6F 6B 65 6E 3A 20   768 token_msg: .asciz "token: "
             00
                                    769 
                                    770 
                                    771 ;---------------------
                                    772 ; display n bytes row 
                                    773 ; from memory.
                                    774 ; input:
                                    775 ;   A   bytes to print 
                                    776 ;	X   start address 
                                    777 ; output:
                                    778 ;   X   address after last shown  
                                    779 ;---------------------
                           000001   780 	CNT=1 
                           000002   781 	ADR=2 
                           000003   782 	VSIZE=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00024A                        783 show_row:
      00024A 4D               [ 1]  784 	tnz a 
      00024B 26 01            [ 1]  785 	jrne 1$
      00024D 81               [ 4]  786 	ret 
      00024E                        787 1$:	
      00024E 89               [ 2]  788 	pushw x  
      00024F 88               [ 1]  789 	push a 
      000250 35 04 00 25      [ 1]  790 	mov tab_width,#4 
      000254 CD 09 2D         [ 4]  791 	call print_int 
      000257 A6 20            [ 1]  792 	ld a,#SPACE  
      000259 CD 01 C4         [ 4]  793 	call putc
      00025C                        794 row_loop:
      00025C 1E 02            [ 2]  795 	ldw x,(ADR,sp)
      00025E F6               [ 1]  796 	ld a,(x)
      00025F 5F               [ 1]  797 	clrw x 
      000260 97               [ 1]  798 	ld xl,a 
      000261 CD 09 2D         [ 4]  799 	call print_int 
      000264 1E 02            [ 2]  800 	ldw x,(ADR,sp)
      000266 5C               [ 2]  801 	incw x 
      000267 1F 02            [ 2]  802 	ldw (ADR,sp),x 
      000269 0A 01            [ 1]  803 	dec (CNT,sp)
      00026B 26 EF            [ 1]  804 	jrne row_loop
      00026D                        805 	_drop VSIZE  		
      00026D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00026F 35 04 00 25      [ 1]  806 	mov tab_width,#4
      000273 A6 0D            [ 1]  807 	ld a,#CR 
      000275 CD 01 C4         [ 4]  808 	call putc 
      000278 81               [ 4]  809 	ret 
                                    810 
                                    811 ;--------------------------
                                    812 ; print memory content 
                                    813 ; in hexadecimal format
                                    814 ;  input:
                                    815 ;    X    start address 
                                    816 ;    Y    count 
                                    817 ;--------------------------
                           000001   818 	BCNT=1
                           000003   819 	BASE=3
                           000004   820 	TABW=4
                           000004   821 	VSIZE=4   
      000279                        822 hex_dump:
      000279                        823 	_vars VSIZE
      000279 52 04            [ 2]    1     sub sp,#VSIZE 
      00027B C6 00 0A         [ 1]  824 	ld a,base
      00027E 6B 03            [ 1]  825 	ld (BASE,sp),a 
      000280 35 10 00 0A      [ 1]  826 	mov base,#16
      000284 C6 00 25         [ 1]  827 	ld a,tab_width 
      000287 6B 04            [ 1]  828 	ld (TABW,sp),a
      000289 A6 0D            [ 1]  829 	ld a,#CR 
      00028B CD 01 C4         [ 4]  830 	call putc 
      00028E 17 01            [ 2]  831 1$: ldw (BCNT,sp),y
      000290 A6 10            [ 1]  832 	ld a,#16
      000292 90 A3 00 10      [ 2]  833 	cpw y,#16
      000296 2A 02            [ 1]  834 	jrpl 2$
      000298 90 9F            [ 1]  835 	ld a,yl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00029A                        836 2$: 	
      00029A CD 02 4A         [ 4]  837 	call show_row 
      00029D 16 01            [ 2]  838 	ldw y,(BCNT,sp) 
      00029F 72 A2 00 10      [ 2]  839 	subw y,#16 
      0002A3 90 A3 00 01      [ 2]  840 	cpw y,#1
      0002A7 2A E5            [ 1]  841 	jrpl 1$
      0002A9 7B 03            [ 1]  842 	ld a,(BASE,sp)
      0002AB C7 00 0A         [ 1]  843 	ld base,a
      0002AE 7B 04            [ 1]  844 	ld a,(TABW,sp)
      0002B0 C7 00 25         [ 1]  845 	ld tab_width,a 
      0002B3                        846 	_drop VSIZE
      0002B3 5B 04            [ 2]    1     addw sp,#VSIZE 
      0002B5 81               [ 4]  847 	ret 
                                    848 
                                    849 ;-------------------------------------
                                    850 ; retrun string length
                                    851 ; input:
                                    852 ;   X         .asciz  pointer 
                                    853 ; output:
                                    854 ;   X         length 
                                    855 ;-------------------------------------
      0002B6                        856 strlen:
      0002B6 90 93            [ 1]  857 	ldw y,x 
      0002B8 5F               [ 1]  858 	clrw x 
      0002B9 90 7D            [ 1]  859 1$:	tnz (y) 
      0002BB 27 05            [ 1]  860 	jreq 9$ 
      0002BD 5C               [ 2]  861 	incw x
      0002BE 90 5C            [ 2]  862 	incw y 
      0002C0 20 F7            [ 2]  863 	jra 1$ 
      0002C2 81               [ 4]  864 9$: ret 
                                    865 
                                    866 ;------------------------------------
                                    867 ; compare 2 strings
                                    868 ; input:
                                    869 ;   X 		char* first string 
                                    870 ;   Y       char* second string 
                                    871 ; output:
                                    872 ;   A 		0|1 
                                    873 ;-------------------------------------
      0002C3                        874 strcmp:
      0002C3 F6               [ 1]  875 	ld a,(x)
      0002C4 27 0B            [ 1]  876 	jreq 5$ 
      0002C6 90 F1            [ 1]  877 	cp a,(y) 
      0002C8 26 05            [ 1]  878 	jrne 4$ 
      0002CA 5C               [ 2]  879 	incw x 
      0002CB 90 5C            [ 2]  880 	incw y 
      0002CD 20 F4            [ 2]  881 	jra strcmp 
      0002CF                        882 4$: ; not same  
      0002CF 4F               [ 1]  883 	clr a 
      0002D0 81               [ 4]  884 	ret 
      0002D1                        885 5$: ; same 
      0002D1 A6 01            [ 1]  886 	ld a,#1 
      0002D3 81               [ 4]  887 	ret 
                                    888 
                                    889 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    890 ;---------------------------------------
                                    891 ;  copy src to dest 
                                    892 ; input:
                                    893 ;   X 		dest 
                                    894 ;   Y 		src 
                                    895 ; output: 
                                    896 ;   X 		dest 
                                    897 ;----------------------------------
      0002D4                        898 strcpy:
      0002D4 89               [ 2]  899 	pushw x 
      0002D5 90 F6            [ 1]  900 1$: ld a,(y)
      0002D7 27 06            [ 1]  901 	jreq 9$ 
      0002D9 F7               [ 1]  902 	ld (x),a 
      0002DA 5C               [ 2]  903 	incw x 
      0002DB 90 5C            [ 2]  904 	incw y 
      0002DD 20 F6            [ 2]  905 	jra 1$ 
      0002DF 7F               [ 1]  906 9$:	clr (x)
      0002E0 85               [ 2]  907 	popw x 
      0002E1 81               [ 4]  908 	ret 
                                    909 
                                    910 ;---------------------------------------
                                    911 ; move memory block 
                                    912 ; input:
                                    913 ;   X 		destination 
                                    914 ;   Y 	    source 
                                    915 ;   acc16	bytes count 
                                    916 ; output:
                                    917 ;   none 
                                    918 ;--------------------------------------
                           000001   919 	INCR=1 ; increament high byte 
                           000002   920 	LB=2 ; increament low byte 
                           000002   921 	VSIZE=2
      0002E2                        922 move:
      0002E2                        923 	_vars VSIZE 
      0002E2 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E4 0F 01            [ 1]  924 	clr (INCR,sp)
      0002E6 0F 02            [ 1]  925 	clr (LB,sp)
      0002E8 90 89            [ 2]  926 	pushw y 
      0002EA 13 01            [ 2]  927 	cpw x,(1,sp) ; compare DEST to SRC 
      0002EC 90 85            [ 2]  928 	popw y 
      0002EE 27 31            [ 1]  929 	jreq move_exit ; x==y 
      0002F0 2B 0E            [ 1]  930 	jrmi move_down
      0002F2                        931 move_up: ; start from top address with incr=-1
      0002F2 72 BB 00 0C      [ 2]  932 	addw x,acc16
      0002F6 72 B9 00 0C      [ 2]  933 	addw y,acc16
      0002FA 03 01            [ 1]  934 	cpl (INCR,sp)
      0002FC 03 02            [ 1]  935 	cpl (LB,sp)   ; increment = -1 
      0002FE 20 05            [ 2]  936 	jra move_loop  
      000300                        937 move_down: ; start from bottom address with incr=1 
      000300 5A               [ 2]  938     decw x 
      000301 90 5A            [ 2]  939 	decw y
      000303 0C 02            [ 1]  940 	inc (LB,sp) ; incr=1 
      000305                        941 move_loop:	
      000305 C6 00 0C         [ 1]  942     ld a, acc16 
      000308 CA 00 0D         [ 1]  943 	or a, acc8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00030B 27 14            [ 1]  944 	jreq move_exit 
      00030D 72 FB 01         [ 2]  945 	addw x,(INCR,sp)
      000310 72 F9 01         [ 2]  946 	addw y,(INCR,sp) 
      000313 90 F6            [ 1]  947 	ld a,(y)
      000315 F7               [ 1]  948 	ld (x),a 
      000316 89               [ 2]  949 	pushw x 
      000317 CE 00 0C         [ 2]  950 	ldw x,acc16 
      00031A 5A               [ 2]  951 	decw x 
      00031B CF 00 0C         [ 2]  952 	ldw acc16,x 
      00031E 85               [ 2]  953 	popw x 
      00031F 20 E4            [ 2]  954 	jra move_loop
      000321                        955 move_exit:
      000321                        956 	_drop VSIZE
      000321 5B 02            [ 2]    1     addw sp,#VSIZE 
      000323 81               [ 4]  957 	ret 	
                                    958 
                                    959 ;-------------------------------------
                                    960 ; search text area for a line#
                                    961 ; input:
                                    962 ;	X 			line# 
                                    963 ; output:
                                    964 ;   X 			addr of line | 0 
                                    965 ;   Y           line#|insert address if not found  
                                    966 ;-------------------------------------
                           000001   967 	LL=1 ; line length 
                           000002   968 	LB=2 ; line length low byte 
                           000002   969 	VSIZE=2 
      000324                        970 search_lineno:
      000324                        971 	_vars VSIZE
      000324 52 02            [ 2]    1     sub sp,#VSIZE 
      000326 0F 01            [ 1]  972 	clr (LL,sp)
      000328 90 CE 00 1D      [ 2]  973 	ldw y,txtbgn
      00032C                        974 search_ln_loop:
      00032C 90 C3 00 1F      [ 2]  975 	cpw y,txtend 
      000330 2A 10            [ 1]  976 	jrpl 8$
      000332 90 F3            [ 1]  977 	cpw x,(y)
      000334 27 0E            [ 1]  978 	jreq 9$
      000336 2B 0A            [ 1]  979 	jrmi 8$ 
      000338 90 E6 02         [ 1]  980 	ld a,(2,y)
      00033B 6B 02            [ 1]  981 	ld (LB,sp),a 
      00033D 72 F9 01         [ 2]  982 	addw y,(LL,sp)
      000340 20 EA            [ 2]  983 	jra search_ln_loop 
      000342                        984 8$: 
      000342 5F               [ 1]  985 	clrw x 	
      000343 51               [ 1]  986 	exgw x,y 
      000344                        987 9$: _drop VSIZE
      000344 5B 02            [ 2]    1     addw sp,#VSIZE 
      000346 51               [ 1]  988 	exgw x,y   
      000347 81               [ 4]  989 	ret 
                                    990 
                                    991 ;-------------------------------------
                                    992 ; delete line at addr
                                    993 ; input:
                                    994 ;   X 		addr of line i.e DEST for move 
                                    995 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000001   996 	LLEN=1
                           000003   997 	SRC=3
                           000004   998 	VSIZE=4
      000348                        999 del_line: 
      000348                       1000 	_vars VSIZE 
      000348 52 04            [ 2]    1     sub sp,#VSIZE 
      00034A E6 02            [ 1] 1001 	ld a,(2,x) ; line length
      00034C 6B 02            [ 1] 1002 	ld (LLEN+1,sp),a 
      00034E 0F 01            [ 1] 1003 	clr (LLEN,sp)
      000350 90 93            [ 1] 1004 	ldw y,x  
      000352 72 F9 01         [ 2] 1005 	addw y,(LLEN,sp) ;SRC  
      000355 17 03            [ 2] 1006 	ldw (SRC,sp),y  ;save source 
      000357 90 CE 00 1F      [ 2] 1007 	ldw y,txtend 
      00035B 72 F2 03         [ 2] 1008 	subw y,(SRC,sp) ; y=count 
      00035E 90 CF 00 0C      [ 2] 1009 	ldw acc16,y 
      000362 16 03            [ 2] 1010 	ldw y,(SRC,sp)    ; source
      000364 CD 02 E2         [ 4] 1011 	call move
      000367 90 CE 00 1F      [ 2] 1012 	ldw y,txtend 
      00036B 72 F2 01         [ 2] 1013 	subw y,(LLEN,sp)
      00036E 90 CF 00 1F      [ 2] 1014 	ldw txtend,y  
      000372                       1015 	_drop VSIZE     
      000372 5B 04            [ 2]    1     addw sp,#VSIZE 
      000374 81               [ 4] 1016 	ret 
                                   1017 
                                   1018 ;---------------------------------------------
                                   1019 ; create a gap in text area to 
                                   1020 ; move new line in this gap
                                   1021 ; input:
                                   1022 ;    X 			addr gap start 
                                   1023 ;    Y 			gap length 
                                   1024 ; output:
                                   1025 ;    X 			addr gap start 
                                   1026 ;--------------------------------------------
                           000001  1027 	DEST=1
                           000003  1028 	SRC=3
                           000005  1029 	LEN=5
                           000006  1030 	VSIZE=6 
      000375                       1031 create_gap:
      000375                       1032 	_vars VSIZE
      000375 52 06            [ 2]    1     sub sp,#VSIZE 
      000377 1F 03            [ 2] 1033 	ldw (SRC,sp),x 
      000379 17 05            [ 2] 1034 	ldw (LEN,sp),y 
      00037B 90 CF 00 0C      [ 2] 1035 	ldw acc16,y 
      00037F 90 93            [ 1] 1036 	ldw y,x ; SRC
      000381 72 BB 00 0C      [ 2] 1037 	addw x,acc16  
      000385 1F 01            [ 2] 1038 	ldw (DEST,sp),x 
                                   1039 ;compute size to move 	
      000387 CE 00 1F         [ 2] 1040 	ldw x,txtend 
      00038A 72 F0 03         [ 2] 1041 	subw x,(SRC,sp)
      00038D CF 00 0C         [ 2] 1042 	ldw acc16,x ; size to move
      000390 1E 01            [ 2] 1043 	ldw x,(DEST,sp) 
      000392 CD 02 E2         [ 4] 1044 	call move
      000395 CE 00 1F         [ 2] 1045 	ldw x,txtend
      000398 72 FB 05         [ 2] 1046 	addw x,(LEN,sp)
      00039B CF 00 1F         [ 2] 1047 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00039E                       1048 9$:	_drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4] 1049 	ret 
                                   1050 
                                   1051 ;--------------------------------------------
                                   1052 ; insert line in pad into text area 
                                   1053 ; first search for already existing 
                                   1054 ; replace existing 
                                   1055 ; if new line empty delete existing one. 
                                   1056 ; input:
                                   1057 ;   ptr16		pointer to tokenized line  
                                   1058 ; output:
                                   1059 ;   none
                                   1060 ;---------------------------------------------
                           000001  1061 	DEST=1  ; text area insertion address 
                           000003  1062 	SRC=3   ; str to insert address 
                           000005  1063 	LINENO=5 ; line number 
                           000007  1064 	LLEN=7 ; line length 
                           000008  1065 	VSIZE=8  
      0003A1                       1066 insert_line:
      0003A1                       1067 	_vars VSIZE 
      0003A1 52 08            [ 2]    1     sub sp,#VSIZE 
      0003A3 CE 00 1F         [ 2] 1068 	ldw x,txtend  
      0003A6 C3 00 1D         [ 2] 1069 	cpw x,txtbgn 
      0003A9 26 15            [ 1] 1070 	jrne 0$
                                   1071 ;first text line 
      0003AB AE 00 02         [ 2] 1072 	ldw x,#2 
      0003AE 72 D6 00 18      [ 4] 1073 	ld a,([ptr16],x)
      0003B2 5F               [ 1] 1074 	clrw x 
      0003B3 97               [ 1] 1075 	ld xl,a
      0003B4 1F 07            [ 2] 1076 	ldw (LLEN,sp),x 
      0003B6 CE 00 1D         [ 2] 1077 	ldw x,txtbgn
      0003B9 1F 01            [ 2] 1078 	ldw (DEST,sp),x 
      0003BB CE 00 1F         [ 2] 1079 	ldw x,txtend 
      0003BE 20 37            [ 2] 1080 	jra 4$
      0003C0 72 CE 00 18      [ 5] 1081 0$:	ldw x,[ptr16]
                                   1082 ; line number
      0003C4 1F 05            [ 2] 1083 	ldw (LINENO,sp),x 
      0003C6 AE 00 02         [ 2] 1084 	ldw x,#2 
      0003C9 72 D6 00 18      [ 4] 1085 	ld a,([ptr16],x)
      0003CD 97               [ 1] 1086 	ld xl,a
                                   1087 ; line length
      0003CE 1F 07            [ 2] 1088 	ldw (LLEN,sp),x
                                   1089 ; check if that line number already exit 	
      0003D0 1E 05            [ 2] 1090 	ldw x,(LINENO,sp)
      0003D2 CD 03 24         [ 4] 1091 	call search_lineno 
      0003D5 5D               [ 2] 1092 	tnzw x 
      0003D6 26 04            [ 1] 1093 	jrne 2$
                                   1094 ; line doesn't exit
                                   1095 ; it will be inserted at this point.  	
      0003D8 17 01            [ 2] 1096 	ldw (DEST,sp),y 
      0003DA 20 05            [ 2] 1097 	jra 3$
                                   1098 ; line exit delete it.
                                   1099 ; it will be replaced by new one 	
      0003DC 1F 01            [ 2] 1100 2$: ldw (DEST,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0003DE CD 03 48         [ 4] 1101 	call del_line
      0003E1                       1102 3$: 
                                   1103 ; insert new line or leave if LLEN==3
                                   1104 ; LLEN==3 means empty line 
      0003E1 A6 03            [ 1] 1105 	ld a,#3
      0003E3 11 08            [ 1] 1106 	cp a,(LLEN+1,sp)
      0003E5 27 24            [ 1] 1107 	jreq insert_ln_exit ; empty line exit.
                                   1108 ; if insertion point at txtend 
                                   1109 ; move no need to create a gap 
      0003E7 1E 01            [ 2] 1110 	ldw x,(DEST,sp)
      0003E9 C3 00 1F         [ 2] 1111 	cpw x,txtend 
      0003EC 27 09            [ 1] 1112 	jreq 4$ 
                                   1113 ; must create a gap
                                   1114 ; at insertion point  
      0003EE 1E 01            [ 2] 1115 	ldw x,(DEST,sp)
      0003F0 16 07            [ 2] 1116 	ldw y,(LLEN,sp)
      0003F2 CD 03 75         [ 4] 1117 	call create_gap
      0003F5 20 06            [ 2] 1118 	jra 5$
      0003F7                       1119 4$: 
      0003F7 72 FB 07         [ 2] 1120 	addw x,(LLEN,sp)
      0003FA CF 00 1F         [ 2] 1121 	ldw txtend,x 	 
                                   1122 ; move new line in gap 
      0003FD 1E 07            [ 2] 1123 5$:	ldw x,(LLEN,sp)
      0003FF CF 00 0C         [ 2] 1124 	ldw acc16,x 
      000402 90 AE 16 E0      [ 2] 1125 	ldw y,#pad ;SRC 
      000406 1E 01            [ 2] 1126 	ldw x,(DEST,sp) ; dest address 
      000408 CD 02 E2         [ 4] 1127 	call move 
      00040B                       1128 insert_ln_exit:	
      00040B                       1129 	_drop VSIZE
      00040B 5B 08            [ 2]    1     addw sp,#VSIZE 
      00040D 81               [ 4] 1130 	ret
                                   1131 
                                   1132 ;-----------------------------------
                                   1133 ; create token list fromm text line 
                                   1134 ; save this list in pad buffer 
                                   1135 ;  compiled line format: 
                                   1136 ;    line_no  2 bytes {0...32767}
                                   1137 ;    count    1 byte  
                                   1138 ;    tokens   variable length 
                                   1139 ;   
                                   1140 ; input:
                                   1141 ;   none
                                   1142 ; modified variables:
                                   1143 ;   basicptr     token list buffer address 
                                   1144 ;   in.w  		 3|count, i.e. index in buffer
                                   1145 ;   count        length of line | 0  
                                   1146 ;-----------------------------------
                           000001  1147 	XSAVE=1
                           000002  1148 	VSIZE=2
      00040E                       1149 compile:
      00040E                       1150 	_vars VSIZE 
      00040E 52 02            [ 2]    1     sub sp,#VSIZE 
      000410 72 1A 00 24      [ 1] 1151 	bset flags,#FCOMP 
      000414 A6 00            [ 1] 1152 	ld a,#0
      000416 AE 00 00         [ 2] 1153 	ldw x,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000419 CF 16 E0         [ 2] 1154 	ldw pad,x ; destination buffer 
      00041C C7 16 E2         [ 1] 1155 	ld pad+2,a ; count 
      00041F AE 16 E3         [ 2] 1156 	ldw x,#pad+3
      000422 72 5F 00 01      [ 1] 1157 	clr in 
      000426 CD 0C 13         [ 4] 1158 	call get_token
      000429 A1 04            [ 1] 1159 	cp a,#TK_INTGR
      00042B 26 11            [ 1] 1160 	jrne 2$
      00042D A3 00 01         [ 2] 1161 	cpw x,#1 
      000430 2A 05            [ 1] 1162 	jrpl 1$
      000432 A6 0A            [ 1] 1163 	ld a,#ERR_BAD_VALUE
      000434 CC 07 97         [ 2] 1164 	jp tb_error
      000437 CF 16 E0         [ 2] 1165 1$:	ldw pad,x 
      00043A 90 AE 16 E3      [ 2] 1166 	ldw y,#pad+3 
      00043E 90 A3 17 60      [ 2] 1167 2$:	cpw y,#stack_full 
      000442 25 05            [ 1] 1168 	jrult 3$
      000444 A6 0F            [ 1] 1169 	ld a,#ERR_BUF_FULL 
      000446 CC 07 97         [ 2] 1170 	jp tb_error 
      000449                       1171 3$:	
      000449 93               [ 1] 1172 	ldw x,y 
      00044A CD 0C 13         [ 4] 1173 	call get_token 
      00044D A1 00            [ 1] 1174 	cp a,#TK_NONE 
      00044F 26 ED            [ 1] 1175 	jrne 2$ 
                                   1176 ; compilation completed  
      000451 72 A2 16 E0      [ 2] 1177 	subw y,#pad
      000455 90 9F            [ 1] 1178     ld a,yl
      000457 AE 16 E0         [ 2] 1179 	ldw x,#pad 
      00045A CF 00 18         [ 2] 1180 	ldw ptr16,x 
      00045D E7 02            [ 1] 1181 	ld (2,x),a 
      00045F FE               [ 2] 1182 	ldw x,(x)
      000460 27 09            [ 1] 1183 	jreq 10$
      000462 CD 03 A1         [ 4] 1184 	call insert_line
      000465 72 5F 00 03      [ 1] 1185 	clr  count 
      000469 20 0F            [ 2] 1186 	jra  11$ 
      00046B                       1187 10$: ; line# is zero 
      00046B CE 00 18         [ 2] 1188 	ldw x,ptr16  
      00046E CF 00 04         [ 2] 1189 	ldw basicptr,x 
      000471 E6 02            [ 1] 1190 	ld a,(2,x)
      000473 C7 00 03         [ 1] 1191 	ld count,a 
      000476 35 03 00 01      [ 1] 1192 	mov in,#3 
      00047A                       1193 11$:
      00047A                       1194 	_drop VSIZE 
      00047A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00047C 72 1B 00 24      [ 1] 1195 	bres flags,#FCOMP 
      000480 81               [ 4] 1196 	ret 
                                   1197 
                                   1198 ;------------------------------------
                                   1199 ;  set all variables to zero 
                                   1200 ; input:
                                   1201 ;   none 
                                   1202 ; output:
                                   1203 ;	none
                                   1204 ;------------------------------------
      000481                       1205 clear_vars:
      000481 AE 00 27         [ 2] 1206 	ldw x,#vars 
      000484 90 AE 00 34      [ 2] 1207 	ldw y,#2*26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000488 7F               [ 1] 1208 1$:	clr (x)
      000489 5C               [ 2] 1209 	incw x 
      00048A 90 5A            [ 2] 1210 	decw y 
      00048C 26 FA            [ 1] 1211 	jrne 1$
      00048E 81               [ 4] 1212 	ret 
                                   1213 
                                   1214 ;-------------------------------------
                                   1215 ; check if A is a letter 
                                   1216 ; input:
                                   1217 ;   A 			character to test 
                                   1218 ; output:
                                   1219 ;   C flag      1 true, 0 false 
                                   1220 ;-------------------------------------
      00048F                       1221 is_alpha:
      00048F A1 41            [ 1] 1222 	cp a,#'A 
      000491 8C               [ 1] 1223 	ccf
      000492 24 0B            [ 1] 1224 	jrnc 9$ 
      000494 A1 5B            [ 1] 1225 	cp a,#'Z+1 
      000496 25 07            [ 1] 1226 	jrc 9$ 
      000498 A1 61            [ 1] 1227 	cp a,#'a 
      00049A 8C               [ 1] 1228 	ccf 
      00049B 24 02            [ 1] 1229 	jrnc 9$
      00049D A1 7B            [ 1] 1230 	cp a,#'z+1   
      00049F 81               [ 4] 1231 9$: ret 	
                                   1232 
                                   1233 ;------------------------------------
                                   1234 ; check if character in {'0'..'9'}
                                   1235 ; input:
                                   1236 ;    A  character to test
                                   1237 ; output:
                                   1238 ;    Carry  0 not digit | 1 digit
                                   1239 ;------------------------------------
      0004A0                       1240 is_digit:
      0004A0 A1 30            [ 1] 1241 	cp a,#'0
      0004A2 25 03            [ 1] 1242 	jrc 1$
      0004A4 A1 3A            [ 1] 1243     cp a,#'9+1
      0004A6 8C               [ 1] 1244 	ccf 
      0004A7 8C               [ 1] 1245 1$:	ccf 
      0004A8 81               [ 4] 1246     ret
                                   1247 
                                   1248 ;-------------------------------------
                                   1249 ;  program initialization entry point 
                                   1250 ;-------------------------------------
                           000001  1251 	MAJOR=1
                           000000  1252 	MINOR=0
      0004A9 0A 0A 54 69 6E 79 20  1253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0004EF                       1254 cold_start:
                                   1255 ;set stack 
      0004EF AE 17 FF         [ 2] 1256 	ldw x,#STACK_EMPTY
      0004F2 94               [ 1] 1257 	ldw sp,x   
                                   1258 ; clear all ram 
      0004F3 7F               [ 1] 1259 0$: clr (x)
      0004F4 5A               [ 2] 1260 	decw x 
      0004F5 26 FC            [ 1] 1261 	jrne 0$
                                   1262 ; activate pull up on all inputs 
      0004F7 A6 FF            [ 1] 1263 	ld a,#255 
      0004F9 C7 50 03         [ 1] 1264 	ld PA_CR1,a 
      0004FC C7 50 08         [ 1] 1265 	ld PB_CR1,a 
      0004FF C7 50 0D         [ 1] 1266 	ld PC_CR1,a 
      000502 C7 50 12         [ 1] 1267 	ld PD_CR1,a 
      000505 C7 50 17         [ 1] 1268 	ld PE_CR1,a 
      000508 C7 50 1C         [ 1] 1269 	ld PF_CR1,a 
      00050B C7 50 21         [ 1] 1270 	ld PG_CR1,a 
      00050E C7 50 2B         [ 1] 1271 	ld PI_CR1,a
                                   1272 ; set LD2 pin as output and turn it on
      000511 72 1A 50 0D      [ 1] 1273     bset PC_CR1,#LED2_BIT
      000515 72 1A 50 0E      [ 1] 1274     bset PC_CR2,#LED2_BIT
      000519 72 1A 50 0C      [ 1] 1275     bset PC_DDR,#LED2_BIT
      00051D 72 1A 50 0A      [ 1] 1276 	bset PC_ODR,#LED2_BIT 
                                   1277 ; disable schmitt triggers on Arduino CN4 analog inputs
      000521 55 00 3F 54 07   [ 1] 1278 	mov ADC_TDRL,0x3f
                                   1279 ; disable peripherals clocks
                                   1280 ;	clr CLK_PCKENR1 
                                   1281 ;	clr CLK_PCKENR2
      000526 72 5F 50 F2      [ 1] 1282 	clr AWU_TBR 
      00052A 72 14 50 CA      [ 1] 1283 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1284 ; select internal clock no divisor: 16 Mhz 	
      00052E A6 E1            [ 1] 1285 	ld a,#CLK_SWR_HSI 
      000530 5F               [ 1] 1286 	clrw x  
      000531 CD 00 9D         [ 4] 1287     call clock_init 
      000534 CD 00 C0         [ 4] 1288 	call timer4_init
      000537 CD 00 B3         [ 4] 1289 	call timer2_init
                                   1290 ; UART1 at 115200 BAUD
      00053A CD 01 89         [ 4] 1291 	call uart1_init
                                   1292 ; activate PE_4 (user button interrupt)
      00053D 72 18 50 18      [ 1] 1293     bset PE_CR2,#USR_BTN_BIT 
                                   1294 ; display system information
      000541 AE 04 A9         [ 2] 1295 	ldw x,#software 
      000544 CD 01 D7         [ 4] 1296 	call puts 
      000547 A6 01            [ 1] 1297 	ld a,#MAJOR 
      000549 C7 00 0D         [ 1] 1298 	ld acc8,a 
      00054C 5F               [ 1] 1299 	clrw x 
      00054D CF 00 0B         [ 2] 1300 	ldw acc24,x 
      000550 A6 0A            [ 1] 1301 	ld a,#10 
      000552 CD 08 E5         [ 4] 1302 	call prti24 
      000555 A6 2E            [ 1] 1303 	ld a,#'.
      000557 CD 01 C4         [ 4] 1304 	call putc 
      00055A A6 00            [ 1] 1305 	ld a,#MINOR 
      00055C C7 00 0D         [ 1] 1306 	ld acc8,a 
      00055F 5F               [ 1] 1307 	clrw x 
      000560 CF 00 0B         [ 2] 1308 	ldw acc24,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000563 A6 0A            [ 1] 1309 	ld a,#10 
      000565 CD 08 E5         [ 4] 1310 	call prti24 
      000568 A6 0D            [ 1] 1311 	ld a,#CR 
      00056A CD 01 C4         [ 4] 1312 	call putc 
      00056D CD 18 BA         [ 4] 1313 	call seek_fdrive 
      000570 9A               [ 1] 1314 	rim 
      000571 72 5C 00 16      [ 1] 1315 	inc seedy+1 
      000575 72 5C 00 14      [ 1] 1316 	inc seedx+1 
      000579 CD 06 01         [ 4] 1317 	call clear_basic
      00057C CD 11 80         [ 4] 1318 	call ubound 
                                   1319 ;	jra 2$	
                                   1320 ; 150 msec beep 
      00057F AE 00 96         [ 2] 1321 	ldw x,#150 
      000582 90 AE 03 E6      [ 2] 1322 	ldw y,#998 
      000586 CD 17 3F         [ 4] 1323 	call beep  
      000589 72 1B 50 0A      [ 1] 1324 2$:	bres PC_ODR,#LED2_BIT	
      00058D CD 05 96         [ 4] 1325 	call warm_init
      000590 CD 05 C3         [ 4] 1326 	call load_autorun
      000593 CC 08 1F         [ 2] 1327     jp cmd_line  
                                   1328 
      000596                       1329 warm_init:
      000596 72 5F 00 24      [ 1] 1330 	clr flags 
      00059A 72 5F 00 21      [ 1] 1331 	clr loop_depth 
      00059E 35 04 00 25      [ 1] 1332 	mov tab_width,#TAB_WIDTH 
      0005A2 35 0A 00 0A      [ 1] 1333 	mov base,#10 
      0005A6 AE 00 00         [ 2] 1334 	ldw x,#0 
      0005A9 CF 00 04         [ 2] 1335 	ldw basicptr,x 
      0005AC CF 00 00         [ 2] 1336 	ldw in.w,x 
      0005AF 72 5F 00 03      [ 1] 1337 	clr count 
      0005B3 81               [ 4] 1338 	ret 
                                   1339 
                                   1340 ;--------------------------
                                   1341 ; called by tb_error when
                                   1342 ; flag FAUTORUN is set.
                                   1343 ; There is a bug in autorun 
                                   1344 ; program so cancel it.
                                   1345 ;---------------------------
      0005B4                       1346 cancel_autorun:
      0005B4 AE 40 00         [ 2] 1347 	ldw x,#AUTORUN_NAME 
      0005B7 CF 00 18         [ 2] 1348 	ldw farptr+1,x 
      0005BA 4F               [ 1] 1349 	clr a
      0005BB 5F               [ 1] 1350 	clrw x  
      0005BC C7 00 17         [ 1] 1351 	ld farptr,a 
      0005BF CD 00 F1         [ 4] 1352 	call write_byte 
      0005C2 81               [ 4] 1353 	ret 
                                   1354 
                                   1355 
                                   1356 ;--------------------------
                                   1357 ; if autorun file defined 
                                   1358 ; in eeprom address AUTORUN_NAME 
                                   1359 ; load and run it.
                                   1360 ;-------------------------
      0005C3                       1361 load_autorun:
      0005C3 90 AE 40 00      [ 2] 1362 	ldw y,#AUTORUN_NAME
      0005C7 90 F6            [ 1] 1363 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005C9 27 20            [ 1] 1364 	jreq 9$
      0005CB CD 19 18         [ 4] 1365 	call search_file
      0005CE 25 05            [ 1] 1366 	jrc 2$ 
                                   1367 ; if file doesn't exit
      0005D0 CD 05 B4         [ 4] 1368 	call cancel_autorun
      0005D3 20 16            [ 2] 1369 	jra 9$ 
      0005D5 CD 1A 22         [ 4] 1370 2$:	call load_file
      0005D8 AE 40 00         [ 2] 1371 	ldw x,#AUTORUN_NAME 
      0005DB CD 01 D7         [ 4] 1372 	call puts
      0005DE AE 05 EC         [ 2] 1373 	ldw x,#autorun_msg 
      0005E1 CD 01 D7         [ 4] 1374 	call puts 
      0005E4 72 1C 00 24      [ 1] 1375 	bset flags,#FAUTORUN 
      0005E8 CC 17 04         [ 2] 1376 	jp run_it    
      0005EB 81               [ 4] 1377 9$: ret 	
                                   1378 
      0005EC 20 6C 6F 61 64 65 64  1379 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1380 ;---------------------------
                                   1381 ; reset BASIC text variables 
                                   1382 ; and clear variables 
                                   1383 ;---------------------------
      000601                       1384 clear_basic:
      000601 72 5F 00 03      [ 1] 1385 	clr count
      000605 72 5F 00 01      [ 1] 1386 	clr in  
      000609 AE 00 5B         [ 2] 1387 	ldw x,#free_ram 
      00060C CF 00 1D         [ 2] 1388 	ldw txtbgn,x 
      00060F CF 00 1F         [ 2] 1389 	ldw txtend,x 
      000612 CD 04 81         [ 4] 1390 	call clear_vars 
      000615 81               [ 4] 1391 	ret 
                                   1392 
                                   1393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1394 ;;   Tiny BASIC error messages     ;;
                                   1395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000616                       1396 err_msg:
      000616 00 00 06 36 06 43 06  1397 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             51 06 6A 06 79
      000622 06 8F 06 A5 06 BF 06  1398 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             D0 06 E1
      00062C 06 ED 07 20 07 30 07  1399 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             44 07 57
                                   1400 
      000636 4D 65 6D 6F 72 79 20  1401 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000643 73 79 6E 74 61 78 20  1402 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000651 6D 61 74 68 20 6F 70  1403 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00066A 64 69 76 69 73 69 6F  1404 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000679 69 6E 76 61 6C 69 64  1405 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             75 6D 62 65 72 2E 0A
             00
      00068F 72 75 6E 20 74 69 6D  1406 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0006A5 63 6F 6D 6D 61 6E 64  1407 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0006BF 64 75 70 6C 69 63 61  1408 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0006D0 46 69 6C 65 20 6E 6F  1409 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0006E1 62 61 64 20 76 61 6C  1410 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0006ED 46 69 6C 65 20 69 6E  1411 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000720 4E 6F 20 64 61 74 61  1412 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000730 4E 6F 20 70 72 6F 67  1413 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000744 46 69 6C 65 20 73 79  1414 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      000757 42 75 66 66 65 72 20  1415 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1416 
      000764 72 75 6E 20 74 69 6D  1417 rt_msg: .asciz "run time error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000775 63 6F 6D 70 69 6C 65  1418 comp_msg: .asciz "compile error, "
             20 65 72 72 6F 72 2C
             20 00
      000785 6C 61 73 74 20 74 6F  1419 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1420 
      000795                       1421 syntax_error:
      000795 A6 02            [ 1] 1422 	ld a,#ERR_SYNTAX 
                                   1423 
      000797                       1424 tb_error:
      000797 72 0A 00 24 47   [ 2] 1425 	btjt flags,#FCOMP,1$
      00079C 88               [ 1] 1426 	push a 
      00079D AE 07 64         [ 2] 1427 	ldw x, #rt_msg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0007A0 CD 01 D7         [ 4] 1428 	call puts 
      0007A3 84               [ 1] 1429 	pop a 
      0007A4 AE 06 16         [ 2] 1430 	ldw x, #err_msg 
      0007A7 72 5F 00 0C      [ 1] 1431 	clr acc16 
      0007AB 48               [ 1] 1432 	sll a
      0007AC 72 59 00 0C      [ 1] 1433 	rlc acc16  
      0007B0 C7 00 0D         [ 1] 1434 	ld acc8, a 
      0007B3 72 BB 00 0C      [ 2] 1435 	addw x,acc16 
      0007B7 FE               [ 2] 1436 	ldw x,(x)
      0007B8 CD 01 D7         [ 4] 1437 	call puts
      0007BB CE 00 04         [ 2] 1438 	ldw x,basicptr
      0007BE C6 00 01         [ 1] 1439 	ld a,in 
      0007C1 CD 12 9A         [ 4] 1440 	call prt_basic_line
      0007C4 AE 07 85         [ 2] 1441 	ldw x,#tk_id 
      0007C7 CD 01 D7         [ 4] 1442 	call puts 
      0007CA C6 00 02         [ 1] 1443 	ld a,in.saved 
      0007CD 5F               [ 1] 1444 	clrw x 
      0007CE 97               [ 1] 1445 	ld xl,a 
      0007CF 72 BB 00 04      [ 2] 1446 	addw x,basicptr 
      0007D3 F6               [ 1] 1447 	ld a,(x)
      0007D4 5F               [ 1] 1448 	clrw x 
      0007D5 97               [ 1] 1449 	ld xl,a 
      0007D6 CD 09 2D         [ 4] 1450 	call print_int
      0007D9 72 0D 00 24 3A   [ 2] 1451 	btjf flags,#FAUTORUN ,6$
      0007DE CD 05 B4         [ 4] 1452 	call cancel_autorun  
      0007E1 20 35            [ 2] 1453 	jra 6$
      0007E3                       1454 1$:	
      0007E3 88               [ 1] 1455 	push a 
      0007E4 AE 07 75         [ 2] 1456 	ldw x,#comp_msg
      0007E7 CD 01 D7         [ 4] 1457 	call puts 
      0007EA 84               [ 1] 1458 	pop a 
      0007EB AE 06 16         [ 2] 1459 	ldw x, #err_msg 
      0007EE 72 5F 00 0C      [ 1] 1460 	clr acc16 
      0007F2 48               [ 1] 1461 	sll a
      0007F3 72 59 00 0C      [ 1] 1462 	rlc acc16  
      0007F7 C7 00 0D         [ 1] 1463 	ld acc8, a 
      0007FA 72 BB 00 0C      [ 2] 1464 	addw x,acc16 
      0007FE FE               [ 2] 1465 	ldw x,(x)
      0007FF CD 01 D7         [ 4] 1466 	call puts
      000802 AE 16 90         [ 2] 1467 	ldw x,#tib
      000805 CD 01 D7         [ 4] 1468 	call puts 
      000808 A6 0D            [ 1] 1469 	ld a,#CR 
      00080A CD 01 C4         [ 4] 1470 	call putc
      00080D CE 00 00         [ 2] 1471 	ldw x,in.w
      000810 CD 01 FF         [ 4] 1472 	call spaces
      000813 A6 5E            [ 1] 1473 	ld a,#'^
      000815 CD 01 C4         [ 4] 1474 	call putc 
      000818 AE 17 FF         [ 2] 1475 6$: ldw x,#STACK_EMPTY 
      00081B 94               [ 1] 1476     ldw sp,x
      00081C                       1477 warm_start:
      00081C CD 05 96         [ 4] 1478 	call warm_init
                                   1479 ;----------------------------
                                   1480 ;   BASIC interpreter
                                   1481 ;----------------------------
      00081F                       1482 cmd_line: ; user interface 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00081F A6 0D            [ 1] 1483 	ld a,#CR 
      000821 CD 01 C4         [ 4] 1484 	call putc 
      000824 A6 3E            [ 1] 1485 	ld a,#'> 
      000826 CD 01 C4         [ 4] 1486 	call putc
      000829 CD 0A 5E         [ 4] 1487 	call readln
      00082C 72 5D 00 03      [ 1] 1488 	tnz count 
      000830 27 ED            [ 1] 1489 	jreq cmd_line
      000832 CD 04 0E         [ 4] 1490 	call compile
                                   1491 ; if text begin with a line number
                                   1492 ; the compiler set count to zero    
                                   1493 ; so code is not interpreted
      000835 72 5D 00 03      [ 1] 1494 	tnz count 
                                   1495 ;;--------------------
                                   1496 ;  test code 
                                   1497 ;;--------------------
                           000000  1498 TEST=0
                           000000  1499 .if TEST 
                                   1500 	ldw x, #pad 
                                   1501 	clrw y 
                                   1502 	ld a,(2,x) 
                                   1503 	ld yl,a 
                                   1504 	call hex_dump
                                   1505 .endif 
                                   1506 ;;; end test ----------
      000839 27 E4            [ 1] 1507 	jreq cmd_line
                                   1508 
                                   1509 ; if direct command 
                                   1510 ; it's ready to interpret 
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1512 ;; This is the interpreter loop
                                   1513 ;; for each BASIC code line. 
                                   1514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00083B                       1515 interpreter: 
      00083B C6 00 01         [ 1] 1516 	ld a,in 
      00083E C1 00 03         [ 1] 1517 	cp a,count 
      000841 2B 1D            [ 1] 1518 	jrmi interp_loop
      000843                       1519 next_line:
      000843 72 01 00 24 D7   [ 2] 1520 	btjf flags, #FRUN, cmd_line
      000848 CE 00 04         [ 2] 1521 	ldw x,basicptr
      00084B 72 BB 00 00      [ 2] 1522 	addw x,in.w 
      00084F C3 00 1F         [ 2] 1523 	cpw x,txtend 
      000852 2A C8            [ 1] 1524 	jrpl warm_start
      000854 CF 00 04         [ 2] 1525 	ldw basicptr,x ; start of next line  
      000857 E6 02            [ 1] 1526 	ld a,(2,x)
      000859 C7 00 03         [ 1] 1527 	ld count,a 
      00085C 35 03 00 01      [ 1] 1528 	mov in,#3 ; skip first 3 bytes of line 
      000860                       1529 interp_loop: 
      000860 CD 08 87         [ 4] 1530 	call next_token
      000863 A1 00            [ 1] 1531 	cp a,#TK_NONE 
      000865 27 DC            [ 1] 1532 	jreq next_line 
      000867 A1 80            [ 1] 1533 	cp a,#TK_CMD
      000869 26 03            [ 1] 1534 	jrne 1$
      00086B FD               [ 4] 1535 	call (x) 
      00086C 20 F2            [ 2] 1536 	jra interp_loop 
      00086E                       1537 1$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00086E A1 05            [ 1] 1538 	cp a,#TK_VAR
      000870 26 05            [ 1] 1539 	jrne 2$
      000872 CD 11 B3         [ 4] 1540 	call let_var  
      000875 20 E9            [ 2] 1541 	jra interp_loop 
      000877                       1542 2$:	
      000877 A1 06            [ 1] 1543 	cp a,#TK_ARRAY 
      000879 26 05            [ 1] 1544 	jrne 3$
      00087B CD 11 B0         [ 4] 1545 	call let_array 
      00087E 20 E0            [ 2] 1546 	jra interp_loop
      000880                       1547 3$:	
      000880 A1 01            [ 1] 1548 	cp a,#TK_COLON 
      000882 27 DC            [ 1] 1549 	jreq interp_loop 
                           000000  1550 .if TEST
                                   1551 	clrw x 
                                   1552 	ld xl,a 
                                   1553 	call print_int 
                                   1554 	ld a,#'?
                                   1555 	call putc
                                   1556 	ld a,#CR 
                                   1557 	call putc  
                                   1558 .endif 
      000884 CC 07 95         [ 2] 1559 	jp syntax_error 
                                   1560 
                                   1561 		
                                   1562 ;--------------------------
                                   1563 ; extract next token from
                                   1564 ; token list 
                                   1565 ; basicptr -> base address 
                                   1566 ; in  -> offset in list array 
                                   1567 ; output:
                                   1568 ;   A 		token attribute
                                   1569 ;   X 		token value if there is one
                                   1570 ;----------------------------------------
      000887                       1571 next_token:
      000887 5F               [ 1] 1572 	clrw x 
      000888 C6 00 01         [ 1] 1573 	ld a,in 
      00088B C0 00 03         [ 1] 1574 	sub a,count ; don't replace sub by cp!  
      00088E 2B 01            [ 1] 1575 	jrmi 0$
      000890 81               [ 4] 1576 	ret  ; end of BASIC line 
      000891                       1577 0$: 
      000891 55 00 01 00 02   [ 1] 1578 	mov in.saved,in 
      000896 90 CE 00 04      [ 2] 1579 	ldw y,basicptr 
      00089A 72 B9 00 00      [ 2] 1580 	addw y,in.w 
      00089E 90 F6            [ 1] 1581 	ld a,(y)
      0008A0 27 3A            [ 1] 1582 	jreq 9$ 
      0008A2 90 5C            [ 2] 1583 	incw y 
      0008A4 4D               [ 1] 1584 	tnz a 
      0008A5 2B 2F            [ 1] 1585 	jrmi 6$
      0008A7 A1 06            [ 1] 1586 	cp a,#TK_ARRAY
      0008A9 2A 31            [ 1] 1587 	jrpl 9$  ; no attribute for these
      0008AB A1 01            [ 1] 1588 	cp a,#TK_COLON
      0008AD 27 2D            [ 1] 1589 	jreq 9$ 
      0008AF A1 04            [ 1] 1590 	cp a,#TK_INTGR
      0008B1 2B 08            [ 1] 1591 	jrmi 1$
                                   1592 ; attribute type WORD 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0008B3 93               [ 1] 1593 	ldw x,y 
      0008B4 FE               [ 2] 1594 	ldw x,(x)
      0008B5 72 A9 00 02      [ 2] 1595 	addw y,#2  
      0008B9 20 21            [ 2] 1596 	jra 9$
      0008BB                       1597 1$: ; 
      0008BB A1 03            [ 1] 1598 	cp a,#TK_CHAR
      0008BD 26 0A            [ 1] 1599 	jrne 2$
      0008BF 90 F6            [ 1] 1600 	ld a,(y)
      0008C1 90 5C            [ 2] 1601 	incw y
      0008C3 5F               [ 1] 1602 	clrw x 
      0008C4 97               [ 1] 1603 	ld xl,a 
      0008C5 A6 03            [ 1] 1604 	ld a,#TK_CHAR
      0008C7 20 13            [ 2] 1605 	jra 9$ 
      0008C9 A1 02            [ 1] 1606 2$:	cp a,#TK_QSTR 
      0008CB 26 0F            [ 1] 1607 	jrne 9$
      0008CD 93               [ 1] 1608 	ldw x,y 
                                   1609 ; move pointer after string 
      0008CE 90 7D            [ 1] 1610 3$:	tnz (y)
      0008D0 27 08            [ 1] 1611 	jreq 8$
      0008D2 90 5C            [ 2] 1612 	incw y
      0008D4 20 F8            [ 2] 1613 	jra 3$
      0008D6                       1614 6$: 
      0008D6 93               [ 1] 1615 	ldw x,y 
      0008D7 FE               [ 2] 1616 	ldw x,(x)
      0008D8 90 5C            [ 2] 1617 	incw y 	 
      0008DA 90 5C            [ 2] 1618 8$:	incw y 
      0008DC 72 B2 00 04      [ 2] 1619 9$: subw y,basicptr 
      0008E0 90 CF 00 00      [ 2] 1620     ldw in.w,y 
      0008E4 81               [ 4] 1621 	ret	
                                   1622 
                                   1623 
                                   1624 ;----------------------------------------
                                   1625 ;   DEBUG support functions
                                   1626 ;----------------------------------------
                           000000  1627 .if DEBUG 
                                   1628 
                                   1629 ; turn LED on 
                                   1630 ledon:
                                   1631     bset PC_ODR,#LED2_BIT
                                   1632     ret 
                                   1633 
                                   1634 ; turn LED off 
                                   1635 ledoff:
                                   1636     bres PC_ODR,#LED2_BIT 
                                   1637     ret 
                                   1638 
                                   1639 ; invert LED status 
                                   1640 ledtoggle:
                                   1641     ld a,#LED2_MASK
                                   1642     xor a,PC_ODR
                                   1643     ld PC_ODR,a
                                   1644     ret 
                                   1645 
                                   1646 left_paren:
                                   1647 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1648 	call putc
                                   1649 	ld a,#'( 
                                   1650 	call putc 	
                                   1651 	ret 
                                   1652 
                                   1653 ;------------------------------
                                   1654 ; print 8 bit register 
                                   1655 ; input:
                                   1656 ;   X  point to register name 
                                   1657 ;   A  register value to print 
                                   1658 ; output:
                                   1659 ;   none
                                   1660 ;------------------------------- 
                                   1661 prt_reg8:
                                   1662 	push a 
                                   1663 	call puts 
                                   1664 	ld a,(1,sp) 
                                   1665 	ld acc8,a 
                                   1666 	clrw x 
                                   1667 	ld xl,a 
                                   1668 	mov base,#16
                                   1669 	call print_int 
                                   1670 	call left_paren 
                                   1671 	pop a 
                                   1672 	clrw x 
                                   1673 	ld xl,a 
                                   1674 	mov base,#10 
                                   1675 	call print_int  
                                   1676 	ld a,#') 
                                   1677 	call putc
                                   1678 	ret
                                   1679 
                                   1680 ;--------------------------------
                                   1681 ; print 16 bits register 
                                   1682 ; input:
                                   1683 ;   X   point register name 
                                   1684 ;   Y   register value to print 
                                   1685 ; output:
                                   1686 ;  none
                                   1687 ;--------------------------------
                                   1688 prt_reg16: 
                                   1689 	pushw y 
                                   1690 	call puts 
                                   1691 	ldw x,(1,sp) 
                                   1692 	mov base,#16 
                                   1693 	call print_int  
                                   1694 	call left_paren 
                                   1695 	popw x 
                                   1696 	mov base,#10 
                                   1697 	call print_int  
                                   1698 	ld a,#') 
                                   1699 	call putc
                                   1700 	ret 
                                   1701 
                                   1702 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1703 ; print registers contents saved on
                                   1704 ; stack by trap interrupt.
                                   1705 ;------------------------------------
                                   1706 print_registers:
                                   1707 	ldw x,#STATES
                                   1708 	call puts
                                   1709 ; print EPC 
                                   1710 	ldw x, #REG_EPC
                                   1711 	call puts 
                                   1712 	ld a, (11,sp)
                                   1713 	ld acc8,a 
                                   1714 	ld a, (10,sp) 
                                   1715 	ld acc16,a 
                                   1716 	ld a,(9,sp) 
                                   1717 	ld acc24,a
                                   1718 	clrw x  
                                   1719 	ld a,#16
                                   1720 	call prti24  
                                   1721 ; print X
                                   1722 	ldw x,#REG_X
                                   1723 	ldw y,(5,sp)
                                   1724 	call prt_reg16  
                                   1725 ; print Y 
                                   1726 	ldw x,#REG_Y
                                   1727 	ldw y, (7,sp)
                                   1728 	call prt_reg16  
                                   1729 ; print A 
                                   1730 	ldw x,#REG_A
                                   1731 	ld a, (4,sp) 
                                   1732 	call prt_reg8
                                   1733 ; print CC 
                                   1734 	ldw x,#REG_CC 
                                   1735 	ld a, (3,sp) 
                                   1736 	call prt_reg8 
                                   1737 ; print SP 
                                   1738 	ldw x,#REG_SP
                                   1739 	ldw y,sp 
                                   1740 	addw y,#12
                                   1741 	call prt_reg16  
                                   1742 	ld a,#'\n' 
                                   1743 	call putc
                                   1744 	ret
                                   1745 
                                   1746 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
                                   1747 REG_EPC: .asciz "EPC:"
                                   1748 REG_Y:   .asciz "\nY:" 
                                   1749 REG_X:   .asciz "\nX:"
                                   1750 REG_A:   .asciz "\nA:" 
                                   1751 REG_CC:  .asciz "\nCC:"
                                   1752 REG_SP:  .asciz "\nSP:"
                                   1753 
                                   1754 .endif ; DEBUG 
                                   1755 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1756 
                                   1757 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1758 ;------------------------------------
                                   1759 ; print integer in acc24 
                                   1760 ; input:
                                   1761 ;	acc24 		integer to print 
                                   1762 ;	A 			numerical base for conversion 
                                   1763 ;               if bit 7 is set add a space at print end.
                                   1764 ;   XL 			field width, 0 -> no fill.
                                   1765 ;  output:
                                   1766 ;    none 
                                   1767 ;------------------------------------
                           000001  1768 	WIDTH = 1
                           000002  1769 	BASE = 2
                           000003  1770 	ADD_SPACE=3 ; add a space after number 
                           000003  1771 	VSIZE = 3
      0008E5                       1772 prti24:
      0008E5                       1773 	_vars VSIZE 
      0008E5 52 03            [ 2]    1     sub sp,#VSIZE 
      0008E7 0F 03            [ 1] 1774 	clr (ADD_SPACE,sp)
      0008E9 A5 80            [ 1] 1775 	bcp a,#0x80 
      0008EB 27 02            [ 1] 1776 	jreq 0$ 
      0008ED 03 03            [ 1] 1777 	cpl (ADD_SPACE,sp)
      0008EF A4 1F            [ 1] 1778 0$:	and a,#31 
      0008F1 6B 02            [ 1] 1779 	ld (BASE,sp),a
      0008F3 9F               [ 1] 1780 	ld a,xl
      0008F4 6B 01            [ 1] 1781 	ld (WIDTH,sp),a 
      0008F6 7B 02            [ 1] 1782 	ld a, (BASE,sp)  
      0008F8 CD 09 92         [ 4] 1783     call itoa  ; conversion entier en  .asciz
      0008FB 7B 01            [ 1] 1784 1$: ld a,(WIDTH,sp)
      0008FD 27 1F            [ 1] 1785 	jreq 4$
      0008FF C7 00 0D         [ 1] 1786 	ld acc8,a 
      000902 89               [ 2] 1787 	pushw x 
      000903 CD 02 B6         [ 4] 1788 	call strlen 
      000906 9F               [ 1] 1789 	ld a,xl 
      000907 85               [ 2] 1790 	popw x 
      000908 31 00 0D         [ 3] 1791 	exg a,acc8 
      00090B C0 00 0D         [ 1] 1792 	sub a,acc8 
      00090E 2B 0E            [ 1] 1793 	jrmi 4$
      000910 6B 01            [ 1] 1794 	ld (WIDTH,sp),a 
      000912 A6 20            [ 1] 1795 	ld  a,#SPACE
      000914 0D 01            [ 1] 1796 3$: tnz (WIDTH,sp)
      000916 27 06            [ 1] 1797 	jreq 4$
      000918 5A               [ 2] 1798 	decw x 
      000919 F7               [ 1] 1799 	ld (x),a 
      00091A 0A 01            [ 1] 1800 	dec (WIDTH,sp) 
      00091C 20 F6            [ 2] 1801 	jra 3$
      00091E                       1802 4$: 
      00091E CD 01 D7         [ 4] 1803 	call puts 
      000921 0D 03            [ 1] 1804 	tnz (ADD_SPACE,sp)
      000923 27 05            [ 1] 1805 	jreq 5$
      000925 A6 20            [ 1] 1806     ld a,#SPACE 
      000927 CD 01 C4         [ 4] 1807 	call putc 
      00092A                       1808 5$: _drop VSIZE 
      00092A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00092C 81               [ 4] 1809     ret	
                                   1810 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1811 ;-----------------------------------
                                   1812 ; print a 16 bit integer 
                                   1813 ; using variable 'base' as conversion
                                   1814 ; format.
                                   1815 ; input:
                                   1816 ;   X       integer to print 
                                   1817 ;   base    conversion base 
                                   1818 ; output:
                                   1819 ;   none 
                                   1820 ;-----------------------------------
                           000001  1821 	SIGN=1
                           000002  1822 	STRING=2
                                   1823 ;; 9 char on stack for string buffer	
                           00000A  1824 	STREND=2+8 
                           00000A  1825 	VSIZE=10
      00092D                       1826 print_int: 
      00092D                       1827 	_vars VSIZE 
      00092D 52 0A            [ 2]    1     sub sp,#VSIZE 
      00092F 0F 01            [ 1] 1828 	clr (SIGN,sp)
      000931 90 96            [ 1] 1829 	ldw y,sp 
      000933 72 A9 00 0A      [ 2] 1830 	addw y,#STREND  
      000937 90 7F            [ 1] 1831 	clr (y)
      000939 C6 00 0A         [ 1] 1832 	ld a,base  
      00093C A1 0A            [ 1] 1833 	cp a,#10 
      00093E 26 06            [ 1] 1834 	jrne 1$ 
      000940 5D               [ 2] 1835 	tnzw x 
      000941 2A 03            [ 1] 1836 	jrpl 1$ 
      000943 03 01            [ 1] 1837 	cpl (SIGN,sp)
      000945 50               [ 2] 1838 	negw x 	 
      000946                       1839 1$:	
      000946 C6 00 0A         [ 1] 1840 	ld a,base 
      000949 62               [ 2] 1841 	div x,a 
      00094A AB 30            [ 1] 1842 	add a,#'0 
      00094C A1 3A            [ 1] 1843 	cp a,#'9+1 
      00094E 2B 02            [ 1] 1844 	jrmi 2$ 
      000950 AB 07            [ 1] 1845 	add a,#7 
      000952 90 5A            [ 2] 1846 2$: decw y 
      000954 90 F7            [ 1] 1847 	ld (y),a 
      000956 5D               [ 2] 1848 	tnzw x 
      000957 26 ED            [ 1] 1849 	jrne 1$ 
      000959 A6 10            [ 1] 1850 	ld a,#16 
      00095B C1 00 0A         [ 1] 1851 	cp a,base 
      00095E 26 08            [ 1] 1852 	jrne 3$
      000960 A6 24            [ 1] 1853 	ld a,#'$
      000962 90 5A            [ 2] 1854 	decw y  
      000964 90 F7            [ 1] 1855 	ld (y),a
      000966 20 0A            [ 2] 1856 	jra 9$ 
      000968 0D 01            [ 1] 1857 3$: tnz (SIGN,sp)
      00096A 27 06            [ 1] 1858 	jreq 9$ 
      00096C A6 2D            [ 1] 1859 	ld a,#'-
      00096E 90 5A            [ 2] 1860 	decw y  
      000970 90 F7            [ 1] 1861 	ld (y),a
      000972                       1862 9$:	
      000972 96               [ 1] 1863 	ldw x,sp 
      000973 1C 00 0A         [ 2] 1864 	addw x,#STREND  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000976 90 89            [ 2] 1865 	pushw y
      000978 72 F0 01         [ 2] 1866 	subw x,(1,sp)
      00097B                       1867 	_drop 2 
      00097B 5B 02            [ 2]    1     addw sp,#2 
      00097D                       1868 10$:
      00097D 9F               [ 1] 1869 	ld a,xl 
      00097E C1 00 25         [ 1] 1870 	cp a,tab_width
      000981 24 08            [ 1] 1871 	jruge 12$
      000983 A6 20            [ 1] 1872 	ld a,#SPACE 
      000985 CD 01 C4         [ 4] 1873 	call putc 
      000988 5C               [ 2] 1874 	incw x 
      000989 20 F2            [ 2] 1875 	jra 10$ 
      00098B                       1876 12$:
      00098B 93               [ 1] 1877     ldw x,y 
      00098C CD 01 D7         [ 4] 1878 	call puts  
      00098F                       1879 	_drop VSIZE 
      00098F 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000991 81               [ 4] 1880 	ret 
                                   1881 
                                   1882 ;------------------------------------
                                   1883 ; convert integer in acc24 to string
                                   1884 ; input:
                                   1885 ;   A	  	base
                                   1886 ;	acc24	integer to convert
                                   1887 ; output:
                                   1888 ;   X  		pointer to string
                                   1889 ;------------------------------------
                           000001  1890 	SIGN=1  ; integer sign 
                           000002  1891 	BASE=2  ; numeric base 
                           000002  1892 	VSIZE=2  ;locals size
      000992                       1893 itoa:
      000992 52 02            [ 2] 1894 	sub sp,#VSIZE
      000994 6B 02            [ 1] 1895 	ld (BASE,sp), a  ; base
      000996 0F 01            [ 1] 1896 	clr (SIGN,sp)    ; sign
      000998 A1 0A            [ 1] 1897 	cp a,#10
      00099A 26 0A            [ 1] 1898 	jrne 1$
                                   1899 	; base 10 string display with negative sign if bit 23==1
      00099C 72 0F 00 0B 05   [ 2] 1900 	btjf acc24,#7,1$
      0009A1 03 01            [ 1] 1901 	cpl (SIGN,sp)
      0009A3 CD 0A 3B         [ 4] 1902 	call neg_acc24
      0009A6                       1903 1$:
                                   1904 ; initialize string pointer 
      0009A6 AE 17 5F         [ 2] 1905 	ldw x,#pad+PAD_SIZE-1
      0009A9 7F               [ 1] 1906 	clr (x)
      0009AA                       1907 itoa_loop:
      0009AA 7B 02            [ 1] 1908     ld a,(BASE,sp)
      0009AC CD 09 D9         [ 4] 1909     call divu24_8 ; acc24/A 
      0009AF AB 30            [ 1] 1910     add a,#'0  ; remainder of division
      0009B1 A1 3A            [ 1] 1911     cp a,#'9+1
      0009B3 2B 02            [ 1] 1912     jrmi 2$
      0009B5 AB 07            [ 1] 1913     add a,#7 
      0009B7 5A               [ 2] 1914 2$: decw x
      0009B8 F7               [ 1] 1915     ld (x),a
                                   1916 	; if acc24==0 conversion done
      0009B9 C6 00 0B         [ 1] 1917 	ld a,acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009BC CA 00 0C         [ 1] 1918 	or a,acc16
      0009BF CA 00 0D         [ 1] 1919 	or a,acc8
      0009C2 26 E6            [ 1] 1920     jrne itoa_loop
                                   1921 	;conversion done, next add '$' or '-' as required
      0009C4 7B 02            [ 1] 1922 	ld a,(BASE,sp)
      0009C6 A1 10            [ 1] 1923 	cp a,#16
      0009C8 27 08            [ 1] 1924 	jreq 8$
      0009CA 7B 01            [ 1] 1925 	ld a,(SIGN,sp)
      0009CC 27 08            [ 1] 1926     jreq 10$
      0009CE A6 2D            [ 1] 1927     ld a,#'-
      0009D0 20 02            [ 2] 1928 	jra 9$ 
      0009D2 A6 24            [ 1] 1929 8$: ld a,#'$ 
      0009D4 5A               [ 2] 1930 9$: decw x
      0009D5 F7               [ 1] 1931     ld (x),a
      0009D6                       1932 10$:
      0009D6 5B 02            [ 2] 1933 	addw sp,#VSIZE
      0009D8 81               [ 4] 1934 	ret
                                   1935 
                                   1936 ;-------------------------------------
                                   1937 ; divide uint24_t by uint8_t
                                   1938 ; used to convert uint24_t to string
                                   1939 ; input:
                                   1940 ;	acc24	dividend
                                   1941 ;   A 		divisor
                                   1942 ; output:
                                   1943 ;   acc24	quotient
                                   1944 ;   A		remainder
                                   1945 ;------------------------------------- 
                                   1946 ; offset  on sp of arguments and locals
                           000001  1947 	U8   = 1   ; divisor on stack
                           000001  1948 	VSIZE =1
      0009D9                       1949 divu24_8:
      0009D9 89               [ 2] 1950 	pushw x ; save x
      0009DA 88               [ 1] 1951 	push a 
                                   1952 	; ld dividend UU:MM bytes in X
      0009DB C6 00 0B         [ 1] 1953 	ld a, acc24
      0009DE 95               [ 1] 1954 	ld xh,a
      0009DF C6 00 0C         [ 1] 1955 	ld a,acc24+1
      0009E2 97               [ 1] 1956 	ld xl,a
      0009E3 7B 01            [ 1] 1957 	ld a,(U8,SP) ; divisor
      0009E5 62               [ 2] 1958 	div x,a ; UU:MM/U8
      0009E6 88               [ 1] 1959 	push a  ;save remainder
      0009E7 9E               [ 1] 1960 	ld a,xh
      0009E8 C7 00 0B         [ 1] 1961 	ld acc24,a
      0009EB 9F               [ 1] 1962 	ld a,xl
      0009EC C7 00 0C         [ 1] 1963 	ld acc24+1,a
      0009EF 84               [ 1] 1964 	pop a
      0009F0 95               [ 1] 1965 	ld xh,a
      0009F1 C6 00 0D         [ 1] 1966 	ld a,acc24+2
      0009F4 97               [ 1] 1967 	ld xl,a
      0009F5 7B 01            [ 1] 1968 	ld a,(U8,sp) ; divisor
      0009F7 62               [ 2] 1969 	div x,a  ; R:LL/U8
      0009F8 6B 01            [ 1] 1970 	ld (U8,sp),a ; save remainder
      0009FA 9F               [ 1] 1971 	ld a,xl
      0009FB C7 00 0D         [ 1] 1972 	ld acc24+2,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009FE 84               [ 1] 1973 	pop a
      0009FF 85               [ 2] 1974 	popw x
      000A00 81               [ 4] 1975 	ret
                                   1976 
                                   1977 ;--------------------------------------
                                   1978 ; unsigned multiply uint24_t by uint8_t
                                   1979 ; use to convert numerical string to uint24_t
                                   1980 ; input:
                                   1981 ;	acc24	uint24_t 
                                   1982 ;   A		uint8_t
                                   1983 ; output:
                                   1984 ;   acc24   A*acc24
                                   1985 ;-------------------------------------
                                   1986 ; local variables offset  on sp
                           000003  1987 	U8   = 3   ; A pushed on stack
                           000002  1988 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1989 	OVFH = 1  ; multiplication overflow high byte
                           000003  1990 	VSIZE = 3
      000A01                       1991 mulu24_8:
      000A01 89               [ 2] 1992 	pushw x    ; save X
                                   1993 	; local variables
      000A02 88               [ 1] 1994 	push a     ; U8
      000A03 5F               [ 1] 1995 	clrw x     ; initialize overflow to 0
      000A04 89               [ 2] 1996 	pushw x    ; multiplication overflow
                                   1997 ; multiply low byte.
      000A05 C6 00 0D         [ 1] 1998 	ld a,acc24+2
      000A08 97               [ 1] 1999 	ld xl,a
      000A09 7B 03            [ 1] 2000 	ld a,(U8,sp)
      000A0B 42               [ 4] 2001 	mul x,a
      000A0C 9F               [ 1] 2002 	ld a,xl
      000A0D C7 00 0D         [ 1] 2003 	ld acc24+2,a
      000A10 9E               [ 1] 2004 	ld a, xh
      000A11 6B 02            [ 1] 2005 	ld (OVFL,sp),a
                                   2006 ; multipy middle byte
      000A13 C6 00 0C         [ 1] 2007 	ld a,acc24+1
      000A16 97               [ 1] 2008 	ld xl,a
      000A17 7B 03            [ 1] 2009 	ld a, (U8,sp)
      000A19 42               [ 4] 2010 	mul x,a
                                   2011 ; add overflow to this partial product
      000A1A 72 FB 01         [ 2] 2012 	addw x,(OVFH,sp)
      000A1D 9F               [ 1] 2013 	ld a,xl
      000A1E C7 00 0C         [ 1] 2014 	ld acc24+1,a
      000A21 4F               [ 1] 2015 	clr a
      000A22 A9 00            [ 1] 2016 	adc a,#0
      000A24 6B 01            [ 1] 2017 	ld (OVFH,sp),a
      000A26 9E               [ 1] 2018 	ld a,xh
      000A27 6B 02            [ 1] 2019 	ld (OVFL,sp),a
                                   2020 ; multiply most signficant byte	
      000A29 C6 00 0B         [ 1] 2021 	ld a, acc24
      000A2C 97               [ 1] 2022 	ld xl, a
      000A2D 7B 03            [ 1] 2023 	ld a, (U8,sp)
      000A2F 42               [ 4] 2024 	mul x,a
      000A30 72 FB 01         [ 2] 2025 	addw x, (OVFH,sp)
      000A33 9F               [ 1] 2026 	ld a, xl
      000A34 C7 00 0B         [ 1] 2027 	ld acc24,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A37 5B 03            [ 2] 2028     addw sp,#VSIZE
      000A39 85               [ 2] 2029 	popw x
      000A3A 81               [ 4] 2030 	ret
                                   2031 
                                   2032 ;------------------------------------
                                   2033 ;  two's complement acc24
                                   2034 ;  input:
                                   2035 ;		acc24 variable
                                   2036 ;  output:
                                   2037 ;		acc24 variable
                                   2038 ;-------------------------------------
      000A3B                       2039 neg_acc24:
      000A3B 72 53 00 0D      [ 1] 2040 	cpl acc24+2
      000A3F 72 53 00 0C      [ 1] 2041 	cpl acc24+1
      000A43 72 53 00 0B      [ 1] 2042 	cpl acc24
      000A47 A6 01            [ 1] 2043 	ld a,#1
      000A49 CB 00 0D         [ 1] 2044 	add a,acc24+2
      000A4C C7 00 0D         [ 1] 2045 	ld acc24+2,a
      000A4F 4F               [ 1] 2046 	clr a
      000A50 C9 00 0C         [ 1] 2047 	adc a,acc24+1
      000A53 C7 00 0C         [ 1] 2048 	ld acc24+1,a 
      000A56 4F               [ 1] 2049 	clr a 
      000A57 C9 00 0B         [ 1] 2050 	adc a,acc24 
      000A5A C7 00 0B         [ 1] 2051 	ld acc24,a 
      000A5D 81               [ 4] 2052 	ret
                                   2053 
                                   2054 
                                   2055 ;------------------------------------
                                   2056 ; read a line of text from terminal
                                   2057 ; input:
                                   2058 ;	none
                                   2059 ; local variable on stack:
                                   2060 ;	LL  line length
                                   2061 ;   RXCHAR last received character 
                                   2062 ; output:
                                   2063 ;   text in tib  buffer
                                   2064 ;   count  line length 
                                   2065 ;------------------------------------
                                   2066 	; local variables
                           000001  2067 	LL_HB=1
                           000001  2068 	RXCHAR = 1 ; last char received
                           000002  2069 	LL = 2  ; accepted line length
                           000002  2070 	VSIZE=2 
      000A5E                       2071 readln:
      000A5E 4B 00            [ 1] 2072 	push #0
      000A60 4B 00            [ 1] 2073 	push #0  
      000A62 90 AE 16 90      [ 2] 2074  	ldw y,#tib ; input buffer
      000A66                       2075 readln_loop:
      000A66 CD 01 CD         [ 4] 2076 	call getc
      000A69 6B 01            [ 1] 2077 	ld (RXCHAR,sp),a
      000A6B A1 0D            [ 1] 2078 	cp a,#CR
      000A6D 26 03            [ 1] 2079 	jrne 1$
      000A6F CC 0A DB         [ 2] 2080 	jp readln_quit
      000A72 A1 0A            [ 1] 2081 1$:	cp a,#LF 
      000A74 27 65            [ 1] 2082 	jreq readln_quit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A76 A1 08            [ 1] 2083 	cp a,#BS
      000A78 27 3D            [ 1] 2084 	jreq del_back
      000A7A A1 04            [ 1] 2085 	cp a,#CTRL_D
      000A7C 27 2A            [ 1] 2086 	jreq del_ln
      000A7E A1 12            [ 1] 2087 	cp a,#CTRL_R 
      000A80 27 06            [ 1] 2088 	jreq reprint 
                                   2089 ;	cp a,#'[
                                   2090 ;	jreq ansi_seq
      000A82                       2091 final_test:
      000A82 A1 20            [ 1] 2092 	cp a,#SPACE
      000A84 2A 40            [ 1] 2093 	jrpl accept_char
      000A86 20 DE            [ 2] 2094 	jra readln_loop
      000A88                       2095 ansi_seq:
                                   2096 ;	call getc
                                   2097 ;	cp a,#'C 
                                   2098 ;	jreq rigth_arrow
                                   2099 ;	cp a,#'D 
                                   2100 ;	jreq left_arrow 
                                   2101 ;	jra final_test
      000A88                       2102 right_arrow:
                                   2103 ;	ld a,#BSP 
                                   2104 ;	call putc 
                                   2105 ;	jra realn_loop 
      000A88                       2106 left_arrow:
                                   2107 ;	jra readln_loop
      000A88                       2108 reprint: 
      000A88 0D 02            [ 1] 2109 	tnz (LL,sp)
      000A8A 26 DA            [ 1] 2110 	jrne readln_loop
      000A8C AE 16 90         [ 2] 2111 	ldw x,#tib 
      000A8F CD 02 B6         [ 4] 2112 	call strlen 
      000A92 90 AE 16 90      [ 2] 2113 	ldw y,#tib 
      000A96 9F               [ 1] 2114 	ld a,xl
      000A97 27 CD            [ 1] 2115 	jreq readln_loop
      000A99 6B 02            [ 1] 2116 	ld (LL,sp),a 
      000A9B AE 16 90         [ 2] 2117 	ldw x,#tib 
      000A9E CD 01 D7         [ 4] 2118 	call puts
      000AA1 0F 01            [ 1] 2119 	clr (LL_HB,sp)
      000AA3 72 F9 01         [ 2] 2120 	addw y,(LL_HB,sp)
      000AA6 20 BE            [ 2] 2121 	jra readln_loop 
      000AA8                       2122 del_ln:
      000AA8 7B 02            [ 1] 2123 	ld a,(LL,sp)
      000AAA CD 01 F1         [ 4] 2124 	call delete
      000AAD 90 AE 16 90      [ 2] 2125 	ldw y,#tib
      000AB1 90 7F            [ 1] 2126 	clr (y)
      000AB3 0F 02            [ 1] 2127 	clr (LL,sp)
      000AB5 20 AF            [ 2] 2128 	jra readln_loop
      000AB7                       2129 del_back:
      000AB7 0D 02            [ 1] 2130     tnz (LL,sp)
      000AB9 27 AB            [ 1] 2131     jreq readln_loop
      000ABB 0A 02            [ 1] 2132     dec (LL,sp)
      000ABD 90 5A            [ 2] 2133     decw y
      000ABF 90 7F            [ 1] 2134     clr  (y)
      000AC1 CD 01 E1         [ 4] 2135     call bksp 
      000AC4 20 A0            [ 2] 2136     jra readln_loop	
      000AC6                       2137 accept_char:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AC6 A6 4F            [ 1] 2138 	ld a,#TIB_SIZE-1
      000AC8 11 02            [ 1] 2139 	cp a, (LL,sp)
      000ACA 27 9A            [ 1] 2140 	jreq readln_loop
      000ACC 7B 01            [ 1] 2141 	ld a,(RXCHAR,sp)
      000ACE 90 F7            [ 1] 2142 	ld (y),a
      000AD0 0C 02            [ 1] 2143 	inc (LL,sp)
      000AD2 90 5C            [ 2] 2144 	incw y
      000AD4 90 7F            [ 1] 2145 	clr (y)
      000AD6 CD 01 C4         [ 4] 2146 	call putc 
      000AD9 20 8B            [ 2] 2147 	jra readln_loop
      000ADB                       2148 readln_quit:
      000ADB 90 7F            [ 1] 2149 	clr (y)
      000ADD 7B 02            [ 1] 2150 	ld a,(LL,sp)
      000ADF C7 00 03         [ 1] 2151 	ld count,a 
      000AE2 A6 0D            [ 1] 2152 	ld a,#CR
      000AE4 CD 01 C4         [ 4] 2153 	call putc
      000AE7                       2154 	_drop VSIZE 
      000AE7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AE9 81               [ 4] 2155 	ret
                                   2156 
                                   2157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000000  2158 .if DEBUG 	
                                   2159 ;----------------------------
                                   2160 ; command interface
                                   2161 ; only 3 commands:
                                   2162 ;  'q' to resume application
                                   2163 ;  'p [addr]' to print memory values 
                                   2164 ;  's addr' to print string 
                                   2165 ;----------------------------
                                   2166 ;local variable 
                                   2167 	PSIZE=1
                                   2168 	VSIZE=1 
                                   2169 cmd_itf:
                                   2170 	sub sp,#VSIZE 
                                   2171 	clr farptr 
                                   2172 	clr farptr+1 
                                   2173 	clr farptr+2  
                                   2174 repl:
                                   2175 	ld a,#CR 
                                   2176 	call putc 
                                   2177 	ld a,#'? 
                                   2178 	call putc
                                   2179 	clr in.w 
                                   2180 	clr in 
                                   2181 	call readln
                                   2182 	ldw y,#tib  
                                   2183 	ld a,(y)
                                   2184 	jreq repl  
                                   2185 	inc in 
                                   2186 	call to_upper 
                                   2187 	cp a,#'Q 
                                   2188 	jrne test_p
                                   2189 repl_exit:
                                   2190 	clr tib 
                                   2191 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2192 	clr in 
                                   2193 	_drop #VSIZE 	
                                   2194 	ret  
                                   2195 invalid:
                                   2196 	ldw x,#invalid_cmd 
                                   2197 	call puts 
                                   2198 	jra repl 
                                   2199 test_p:	
                                   2200     cp a,#'P 
                                   2201 	jreq mem_peek
                                   2202     cp a,#'S 
                                   2203 	jrne invalid 
                                   2204 print_string:	
                                   2205 	call get_token
                                   2206 	cp a,#TK_INTGR 
                                   2207 	jrne invalid 
                                   2208 	call puts
                                   2209 	jp repl 	
                                   2210 mem_peek:
                                   2211 	ld a,#SPACE 
                                   2212 	call skip  	 
                                   2213 	addw y,in.w 
                                   2214 	ldw x,#pad 
                                   2215 	call strcpy
                                   2216 	ldw x,#pad
                                   2217 	call atoi24 	
                                   2218 	ld a, acc24 
                                   2219 	or a,acc16 
                                   2220 	or a,acc8 
                                   2221 	jrne 1$ 
                                   2222 	jra peek_byte  
                                   2223 1$:	ldw x,acc24 
                                   2224 	ldw farptr,x 
                                   2225 	ld a,acc8 
                                   2226 	ld farptr+2,a 
                                   2227 peek_byte:
                                   2228 	call print_farptr 
                                   2229 	ld a,#8 
                                   2230 	ld (PSIZE,sp),a 
                                   2231 	clrw x 
                                   2232 1$:	call fetchc  
                                   2233 	pushw x 
                                   2234 	ld acc8,a 
                                   2235 	clrw x 
                                   2236 	ldw acc24,x 
                                   2237 	ld a,#16+128
                                   2238 	call prti24
                                   2239 	popw x 
                                   2240 	dec (PSIZE,sp)
                                   2241 	jrne 1$ 
                                   2242 	ld a,#8 
                                   2243 	add a,farptr+2 
                                   2244 	ld farptr+2,a
                                   2245 	clr a 
                                   2246 	adc a,farptr+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2247 	ld farptr+1,a 
                                   2248 	clr a 
                                   2249 	adc a,farptr 
                                   2250 	ld farptr,a 
                                   2251 	jp repl  
                                   2252 
                                   2253 invalid_cmd: .asciz "not a command\n" 
                                   2254 
                                   2255 ;----------------------------
                                   2256 ; display farptr address
                                   2257 ;----------------------------
                                   2258 print_farptr:
                                   2259 	ld a ,farptr+2 
                                   2260 	ld acc8,a 
                                   2261 	ldw x,farptr 
                                   2262 	ldw acc24,x 
                                   2263 	clrw x 
                                   2264 	ld a,#16 
                                   2265 	call prti24
                                   2266 	ld a,#SPACE 
                                   2267 	call putc 
                                   2268 	call putc 
                                   2269 	ret
                                   2270 
                                   2271 ;------------------------------------
                                   2272 ; get byte at address farptr[X]
                                   2273 ; input:
                                   2274 ;	 farptr   address to peek
                                   2275 ;    X		  farptr index 	
                                   2276 ; output:
                                   2277 ;	 A 		  byte from memory  
                                   2278 ;    x		  incremented by 1
                                   2279 ;------------------------------------
                                   2280 fetchc: ; @C
                                   2281 	ldf a,([farptr],x)
                                   2282 	incw x
                                   2283 	ret
                                   2284 
                                   2285 
                                   2286 ;------------------------------------
                                   2287 ; expect a number from command line 
                                   2288 ; next argument
                                   2289 ;  input:
                                   2290 ;	  none
                                   2291 ;  output:
                                   2292 ;    acc24   int24_t 
                                   2293 ;------------------------------------
                                   2294 number:
                                   2295 	call get_token
                                   2296 	cp a,#TK_INTGR
                                   2297 	jreq 1$
                                   2298 	jp syntax_error
                                   2299 1$:	ret
                                   2300 
                                   2301 .endif ; DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2303 
                                   2304 
                                   2305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2306 ;; compiler routines        ;;
                                   2307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2308 ;------------------------------------
                                   2309 ; parse quoted string 
                                   2310 ; input:
                                   2311 ;   Y 	pointer to tib 
                                   2312 ;   X   pointer to output buffer 
                                   2313 ; output:
                                   2314 ;	buffer   parsed string
                                   2315 ;------------------------------------
                           000001  2316 	PREV = 1
                           000002  2317 	CURR =2
                           000002  2318 	VSIZE=2
      000AEA                       2319 parse_quote: 
      000AEA                       2320 	_vars VSIZE 
      000AEA 52 02            [ 2]    1     sub sp,#VSIZE 
      000AEC 4F               [ 1] 2321 	clr a
      000AED 6B 01            [ 1] 2322 1$:	ld (PREV,sp),a 
      000AEF                       2323 2$:	
      000AEF 91 D6 00         [ 4] 2324 	ld a,([in.w],y)
      000AF2 27 24            [ 1] 2325 	jreq 6$
      000AF4 72 5C 00 01      [ 1] 2326 	inc in 
      000AF8 6B 02            [ 1] 2327 	ld (CURR,sp),a 
      000AFA A6 5C            [ 1] 2328 	ld a,#'\
      000AFC 11 01            [ 1] 2329 	cp a, (PREV,sp)
      000AFE 26 0A            [ 1] 2330 	jrne 3$
      000B00 0F 01            [ 1] 2331 	clr (PREV,sp)
      000B02 7B 02            [ 1] 2332 	ld a,(CURR,sp)
      000B04 AD 1C            [ 4] 2333 	callr convert_escape
      000B06 F7               [ 1] 2334 	ld (x),a 
      000B07 5C               [ 2] 2335 	incw x 
      000B08 20 E5            [ 2] 2336 	jra 2$
      000B0A                       2337 3$:
      000B0A 7B 02            [ 1] 2338 	ld a,(CURR,sp)
      000B0C A1 5C            [ 1] 2339 	cp a,#'\'
      000B0E 27 DD            [ 1] 2340 	jreq 1$
      000B10 A1 22            [ 1] 2341 	cp a,#'"
      000B12 27 04            [ 1] 2342 	jreq 6$ 
      000B14 F7               [ 1] 2343 	ld (x),a 
      000B15 5C               [ 2] 2344 	incw x 
      000B16 20 D7            [ 2] 2345 	jra 2$
      000B18                       2346 6$:
      000B18 7F               [ 1] 2347 	clr (x)
      000B19 5C               [ 2] 2348 	incw x 
      000B1A 90 93            [ 1] 2349 	ldw y,x 
      000B1C 5F               [ 1] 2350 	clrw x 
      000B1D A6 02            [ 1] 2351 	ld a,#TK_QSTR  
      000B1F                       2352 	_drop VSIZE
      000B1F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B21 81               [ 4] 2353 	ret 
                                   2354 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2355 ;---------------------------------------
                                   2356 ; called by parse_quote
                                   2357 ; subtitute escaped character 
                                   2358 ; by their ASCII value .
                                   2359 ; input:
                                   2360 ;   A  character following '\'
                                   2361 ; output:
                                   2362 ;   A  substitued char or same if not valid.
                                   2363 ;---------------------------------------
      000B22                       2364 convert_escape:
      000B22 89               [ 2] 2365 	pushw x 
      000B23 AE 0B 37         [ 2] 2366 	ldw x,#escaped 
      000B26 F1               [ 1] 2367 1$:	cp a,(x)
      000B27 27 06            [ 1] 2368 	jreq 2$
      000B29 7D               [ 1] 2369 	tnz (x)
      000B2A 27 09            [ 1] 2370 	jreq 3$
      000B2C 5C               [ 2] 2371 	incw x 
      000B2D 20 F7            [ 2] 2372 	jra 1$
      000B2F 1D 0B 37         [ 2] 2373 2$: subw x,#escaped 
      000B32 9F               [ 1] 2374 	ld a,xl 
      000B33 AB 07            [ 1] 2375 	add a,#7
      000B35 85               [ 2] 2376 3$:	popw x 
      000B36 81               [ 4] 2377 	ret 
                                   2378 
      000B37 61 62 74 6E 76 66 72  2379 escaped: .asciz "abtnvfr"
             00
                                   2380 
                                   2381 ;-------------------------
                                   2382 ; integer parser 
                                   2383 ; input:
                                   2384 ;   X 		point to output buffer  
                                   2385 ;   Y 		point to tib 
                                   2386 ;   A 	    first digit|'$' 
                                   2387 ; output:  
                                   2388 ;   pad     number string 
                                   2389 ;   X 		integer 
                                   2390 ;   A 		TK_INTGR
                                   2391 ;-------------------------
                           000001  2392 	BASE=1
                           000002  2393 	TCHAR=2 
                           000003  2394 	XSAVE=3
                           000004  2395 	VSIZE=4 
      000B3F                       2396 parse_integer: ; { -- n }
      000B3F 89               [ 2] 2397 	pushw x 	
      000B40 4B 00            [ 1] 2398 	push #0 ; TCHAR
      000B42 4B 0A            [ 1] 2399 	push #10 ; BASE=10
      000B44 A1 24            [ 1] 2400 	cp a,#'$
      000B46 26 04            [ 1] 2401 	jrne 2$ 
      000B48                       2402     _drop #1
      000B48 5B 01            [ 2]    1     addw sp,##1 
      000B4A 4B 10            [ 1] 2403 	push #16  ; BASE=16
      000B4C F7               [ 1] 2404 2$:	ld (x),a 
      000B4D 5C               [ 2] 2405 	incw x 
      000B4E 91 D6 00         [ 4] 2406 	ld a,([in.w],y)
      000B51 72 5C 00 01      [ 1] 2407 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000B55 CD 0D D2         [ 4] 2408 	call to_upper 
      000B58 6B 02            [ 1] 2409 	ld (TCHAR,sp),a 
      000B5A CD 04 A0         [ 4] 2410 	call is_digit 
      000B5D 25 ED            [ 1] 2411 	jrc 2$
      000B5F A6 10            [ 1] 2412 	ld a,#16 
      000B61 11 01            [ 1] 2413 	cp a,(BASE,sp)
      000B63 26 0A            [ 1] 2414 	jrne 3$ 
      000B65 7B 02            [ 1] 2415 	ld a,(TCHAR,sp)
      000B67 A1 41            [ 1] 2416 	cp a,#'A 
      000B69 2B 04            [ 1] 2417 	jrmi 3$ 
      000B6B A1 47            [ 1] 2418 	cp a,#'G 
      000B6D 2B DD            [ 1] 2419 	jrmi 2$ 
      000B6F 72 5A 00 01      [ 1] 2420 3$: dec in 	
      000B73 7F               [ 1] 2421     clr (x)
      000B74 1E 03            [ 2] 2422 	ldw x,(XSAVE,sp)
      000B76 CD 0D DE         [ 4] 2423 	call atoi24
      000B79 90 93            [ 1] 2424 	ldw y,x 
      000B7B CE 00 0C         [ 2] 2425 	ldw x,acc16 
      000B7E A6 04            [ 1] 2426 	ld a,#TK_INTGR
      000B80 90 FF            [ 2] 2427 	ldw (y),x 
      000B82 72 A9 00 02      [ 2] 2428 	addw y,#2
      000B86                       2429 	_drop VSIZE  
      000B86 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B88 81               [ 4] 2430 	ret 	
                                   2431 
                                   2432 ;-------------------------
                                   2433 ; binary integer parser
                                   2434 ; build integer in acc24  
                                   2435 ; input:
                                   2436 ;   X 		point to output buffer  
                                   2437 ;   Y 		point to tib 
                                   2438 ;   A 	    '&' 
                                   2439 ; output:  
                                   2440 ;   buffer  TK_INTGR integer  
                                   2441 ;   X 		int16 
                                   2442 ;   A 		TK_INTGR
                                   2443 ;   acc24    int24 
                                   2444 ;-------------------------
                           000001  2445 	BINARY=1 ; 24 bits integer 
                           000003  2446 	VSIZE=3
      000B89                       2447 parse_binary: ; { -- n }
      000B89 4B 00            [ 1] 2448 	push #0
      000B8B 4B 00            [ 1] 2449 	push #0
      000B8D 4B 00            [ 1] 2450 	push #0
      000B8F                       2451 2$:	
      000B8F 91 D6 00         [ 4] 2452 	ld a,([in.w],y)
      000B92 72 5C 00 01      [ 1] 2453 	inc in 
      000B96 A1 30            [ 1] 2454 	cp a,#'0 
      000B98 27 06            [ 1] 2455 	jreq 3$
      000B9A A1 31            [ 1] 2456 	cp a,#'1 
      000B9C 27 02            [ 1] 2457 	jreq 3$ 
      000B9E 20 0B            [ 2] 2458 	jra bin_exit 
      000BA0 A0 30            [ 1] 2459 3$: sub a,#'0 
      000BA2 46               [ 1] 2460 	rrc a
      000BA3 09 03            [ 1] 2461 	rlc (BINARY+2,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000BA5 09 02            [ 1] 2462 	rlc (BINARY+1,sp)
      000BA7 09 01            [ 1] 2463 	rlc (BINARY,sp) 
      000BA9 20 E4            [ 2] 2464 	jra 2$  
      000BAB                       2465 bin_exit:
      000BAB 72 5A 00 01      [ 1] 2466 	dec in 
      000BAF 90 93            [ 1] 2467 	ldw y,x
      000BB1 7B 01            [ 1] 2468 	ld a,(BINARY,sp)
      000BB3 C7 00 0B         [ 1] 2469 	ld acc24,a 
      000BB6 1E 02            [ 2] 2470 	ldw x,(BINARY+1,sp)
      000BB8 CF 00 0C         [ 2] 2471 	ldw acc16,x
      000BBB 90 FF            [ 2] 2472 	ldw (y),x 
      000BBD 72 A9 00 02      [ 2] 2473 	addw y,#2  
      000BC1 A6 04            [ 1] 2474 	ld a,#TK_INTGR 	
      000BC3                       2475 	_drop VSIZE 
      000BC3 5B 03            [ 2]    1     addw sp,#VSIZE 
      000BC5 81               [ 4] 2476 	ret
                                   2477 
                                   2478 ;---------------------------
                                   2479 ;  token begin with a letter,
                                   2480 ;  is keyword or variable. 	
                                   2481 ; input:
                                   2482 ;   X 		point to pad 
                                   2483 ;   Y 		point to text
                                   2484 ;   A 	    first letter  
                                   2485 ; output:
                                   2486 ;   X		exec_addr|var_addr 
                                   2487 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   2488 ;   pad 	keyword|var_name  
                                   2489 ;--------------------------  
                           000001  2490 	XFIRST=1
                           000002  2491 	VSIZE=2
      000BC6                       2492 parse_keyword: 
      000BC6 89               [ 2] 2493 	pushw x 
      000BC7                       2494 kw_loop:	
      000BC7 CD 0D D2         [ 4] 2495 	call to_upper 
      000BCA F7               [ 1] 2496 	ld (x),a 
      000BCB 5C               [ 2] 2497 	incw x 
      000BCC 91 D6 00         [ 4] 2498 	ld a,([in.w],y)
      000BCF 72 5C 00 01      [ 1] 2499 	inc in 
      000BD3 CD 04 8F         [ 4] 2500 	call is_alpha 
      000BD6 25 EF            [ 1] 2501 	jrc kw_loop
      000BD8 72 5A 00 01      [ 1] 2502 	dec in   
      000BDC 7F               [ 1] 2503 1$: clr (x)
      000BDD 1E 01            [ 2] 2504 	ldw x,(XFIRST,sp) 
      000BDF E6 01            [ 1] 2505 	ld a,(1,x)
      000BE1 26 13            [ 1] 2506 	jrne 2$
                                   2507 ; one letter variable name 
      000BE3 F6               [ 1] 2508 	ld a,(x) 
      000BE4 A0 41            [ 1] 2509 	sub a,#'A 
      000BE6 48               [ 1] 2510 	sll a 
      000BE7 88               [ 1] 2511 	push a 
      000BE8 4B 00            [ 1] 2512 	push #0
      000BEA AE 00 27         [ 2] 2513 	ldw x,#vars 
      000BED 72 FB 01         [ 2] 2514 	addw x,(1,sp) ; X=var address 
      000BF0                       2515 	_drop 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000BF0 5B 02            [ 2]    1     addw sp,#2 
      000BF2 A6 05            [ 1] 2516 	ld a,#TK_VAR 
      000BF4 20 0E            [ 2] 2517 	jra 4$ 
      000BF6                       2518 2$: ; check for keyword, otherwise syntax error.
      000BF6                       2519 	_ldx_dict kword_dict ; dictionary entry point
      000BF6 AE 25 8A         [ 2]    1     ldw x,#kword_dict+2
      000BF9 16 01            [ 2] 2520 	ldw y,(XFIRST,sp) ; name to search for
      000BFB CD 0F 38         [ 4] 2521 	call search_dict
      000BFE 4D               [ 1] 2522 	tnz a
      000BFF 26 03            [ 1] 2523 	jrne 4$ 
      000C01 CC 07 95         [ 2] 2524 	jp syntax_error
      000C04                       2525 4$:	
      000C04 16 01            [ 2] 2526 	ldw y,(XFIRST,sp)
      000C06 90 F7            [ 1] 2527 	ld (y),a 
      000C08 90 5C            [ 2] 2528 	incw y 
      000C0A 90 FF            [ 2] 2529 	ldw (y),x
      000C0C 72 A9 00 02      [ 2] 2530 	addw y,#2  
      000C10                       2531 	_drop VSIZE 
      000C10 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C12 81               [ 4] 2532 	ret  	
                                   2533 
                                   2534 
                                   2535 ;------------------------------------
                                   2536 ; scan text for next token
                                   2537 ; input: 
                                   2538 ;	X 		pointer to buffer where 
                                   2539 ;	        token id and value are copied 
                                   2540 ; use:
                                   2541 ;	Y   pointer to text in tib 
                                   2542 ; output:
                                   2543 ;   A       token attribute 
                                   2544 ;   X 		token value
                                   2545 ;   Y       updated position in output buffer   
                                   2546 ;------------------------------------
                                   2547 	; use to check special character 
                                   2548 	.macro _case c t  
                                   2549 	ld a,#c 
                                   2550 	cp a,(TCHAR,sp) 
                                   2551 	jrne t
                                   2552 	.endm 
                                   2553 
                           000001  2554 	TCHAR=1
                           000002  2555 	ATTRIB=2
                           000002  2556 	VSIZE=2
      000C13                       2557 get_token: 
      000C13                       2558 	_vars VSIZE
      000C13 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2559 ;	ld a,in 
                                   2560 ;	sub a,count
                                   2561 ;   jrmi 0$
                                   2562 ;	clr a 
                                   2563 ;	ret 
      000C15                       2564 0$: 
      000C15 90 AE 16 90      [ 2] 2565 	ldw y,#tib    	
      000C19 A6 20            [ 1] 2566 	ld a,#SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000C1B CD 0E 48         [ 4] 2567 	call skip
      000C1E 55 00 01 00 02   [ 1] 2568 	mov in.saved,in 
      000C23 91 D6 00         [ 4] 2569 	ld a,([in.w],y)
      000C26 26 05            [ 1] 2570 	jrne 1$
      000C28 90 93            [ 1] 2571 	ldw y,x 
      000C2A CC 0D CF         [ 2] 2572 	jp token_exit ; end of line 
      000C2D 72 5C 00 01      [ 1] 2573 1$:	inc in 
      000C31 CD 0D D2         [ 4] 2574 	call to_upper 
      000C34 6B 01            [ 1] 2575 	ld (TCHAR,sp),a 
                                   2576 ; check for quoted string
      000C36                       2577 str_tst:  	
      000C36                       2578 	_case '"' nbr_tst
      000C36 A6 22            [ 1]    1 	ld a,#'"' 
      000C38 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C3A 26 0A            [ 1]    3 	jrne nbr_tst
      000C3C A6 02            [ 1] 2579 	ld a,#TK_QSTR
      000C3E F7               [ 1] 2580 	ld (x),a 
      000C3F 5C               [ 2] 2581 	incw x 
      000C40 CD 0A EA         [ 4] 2582 	call parse_quote
      000C43 CC 0D CF         [ 2] 2583 	jp token_exit
      000C46                       2584 nbr_tst:
                                   2585 ; check for hexadecimal number 
      000C46 A6 24            [ 1] 2586 	ld a,#'$'
      000C48 11 01            [ 1] 2587 	cp a,(TCHAR,sp) 
      000C4A 27 17            [ 1] 2588 	jreq 1$
                                   2589 ;check for binary number 
      000C4C A6 26            [ 1] 2590 	ld a,#'&
      000C4E 11 01            [ 1] 2591 	cp a,(TCHAR,sp)
      000C50 26 0A            [ 1] 2592 	jrne 0$
      000C52 A6 04            [ 1] 2593 	ld a,#TK_INTGR
      000C54 F7               [ 1] 2594 	ld (x),a 
      000C55 5C               [ 2] 2595 	incw x 
      000C56 CD 0B 89         [ 4] 2596 	call parse_binary ; expect binary integer 
      000C59 CC 0D CF         [ 2] 2597 	jp token_exit 
                                   2598 ; check for decimal number 	
      000C5C 7B 01            [ 1] 2599 0$:	ld a,(TCHAR,sp)
      000C5E CD 04 A0         [ 4] 2600 	call is_digit
      000C61 24 0C            [ 1] 2601 	jrnc 3$
      000C63 A6 04            [ 1] 2602 1$:	ld a,#TK_INTGR 
      000C65 F7               [ 1] 2603 	ld (x),a 
      000C66 5C               [ 2] 2604 	incw x 
      000C67 7B 01            [ 1] 2605 	ld a,(TCHAR,sp)
      000C69 CD 0B 3F         [ 4] 2606 	call parse_integer 
      000C6C CC 0D CF         [ 2] 2607 	jp token_exit 
      000C6F                       2608 3$: 
      000C6F                       2609 	_case '(' bkslsh_tst 
      000C6F A6 28            [ 1]    1 	ld a,#'(' 
      000C71 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C73 26 05            [ 1]    3 	jrne bkslsh_tst
      000C75 A6 07            [ 1] 2610 	ld a,#TK_LPAREN
      000C77 CC 0D CB         [ 2] 2611 	jp token_char   	
      000C7A                       2612 bkslsh_tst: ; character token 
      000C7A                       2613 	_case '\',rparnt_tst
      000C7A A6 5C            [ 1]    1 	ld a,#'\' 
      000C7C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000C7E 26 16            [ 1]    3 	jrne rparnt_tst
      000C80 A6 03            [ 1] 2614 	ld a,#TK_CHAR 
      000C82 F7               [ 1] 2615 	ld (x),a 
      000C83 5C               [ 2] 2616 	incw x 
      000C84 91 D6 00         [ 4] 2617 	ld a,([in.w],y)
      000C87 F7               [ 1] 2618 	ld (x),a 
      000C88 5C               [ 2] 2619 	incw x
      000C89 90 93            [ 1] 2620 	ldw y,x 	 
      000C8B 72 5C 00 01      [ 1] 2621 	inc in  
      000C8F 5F               [ 1] 2622 	clrw x 
      000C90 97               [ 1] 2623 	ld xl,a 
      000C91 A6 03            [ 1] 2624 	ld a,#TK_CHAR 
      000C93 CC 0D CF         [ 2] 2625 	jp token_exit 
      000C96                       2626 rparnt_tst:		
      000C96                       2627 	_case ')' colon_tst 
      000C96 A6 29            [ 1]    1 	ld a,#')' 
      000C98 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C9A 26 05            [ 1]    3 	jrne colon_tst
      000C9C A6 08            [ 1] 2628 	ld a,#TK_RPAREN 
      000C9E CC 0D CB         [ 2] 2629 	jp token_char
      000CA1                       2630 colon_tst:
      000CA1                       2631 	_case ':' comma_tst 
      000CA1 A6 3A            [ 1]    1 	ld a,#':' 
      000CA3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA5 26 05            [ 1]    3 	jrne comma_tst
      000CA7 A6 01            [ 1] 2632 	ld a,#TK_COLON 
      000CA9 CC 0D CB         [ 2] 2633 	jp token_char  
      000CAC                       2634 comma_tst:
      000CAC                       2635 	_case COMMA sharp_tst 
      000CAC A6 2C            [ 1]    1 	ld a,#COMMA 
      000CAE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB0 26 05            [ 1]    3 	jrne sharp_tst
      000CB2 A6 09            [ 1] 2636 	ld a,#TK_COMMA
      000CB4 CC 0D CB         [ 2] 2637 	jp token_char
      000CB7                       2638 sharp_tst:
      000CB7                       2639 	_case SHARP dash_tst 
      000CB7 A6 23            [ 1]    1 	ld a,#SHARP 
      000CB9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CBB 26 05            [ 1]    3 	jrne dash_tst
      000CBD A6 0A            [ 1] 2640 	ld a,#TK_SHARP
      000CBF CC 0D CB         [ 2] 2641 	jp token_char  	 	 
      000CC2                       2642 dash_tst: 	
      000CC2                       2643 	_case '-' at_tst 
      000CC2 A6 2D            [ 1]    1 	ld a,#'-' 
      000CC4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC6 26 05            [ 1]    3 	jrne at_tst
      000CC8 A6 11            [ 1] 2644 	ld a,#TK_MINUS  
      000CCA CC 0D CB         [ 2] 2645 	jp token_char 
      000CCD                       2646 at_tst:
      000CCD                       2647 	_case '@' qmark_tst 
      000CCD A6 40            [ 1]    1 	ld a,#'@' 
      000CCF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CD1 26 05            [ 1]    3 	jrne qmark_tst
      000CD3 A6 06            [ 1] 2648 	ld a,#TK_ARRAY 
      000CD5 CC 0D CB         [ 2] 2649 	jp token_char
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000CD8                       2650 qmark_tst:
      000CD8                       2651 	_case '?' tick_tst 
      000CD8 A6 3F            [ 1]    1 	ld a,#'?' 
      000CDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CDC 26 12            [ 1]    3 	jrne tick_tst
      000CDE A6 80            [ 1] 2652 	ld a,#TK_CMD  
      000CE0 F7               [ 1] 2653 	ld (x),a 
      000CE1 5C               [ 2] 2654 	incw x 
      000CE2 90 93            [ 1] 2655 	ldw y,x 
      000CE4 AE 13 D0         [ 2] 2656 	ldw x,#print 
      000CE7 90 FF            [ 2] 2657 	ldw (y),x 
      000CE9 72 A9 00 02      [ 2] 2658 	addw y,#2
      000CED CC 0D CF         [ 2] 2659 	jp token_exit
      000CF0                       2660 tick_tst: ; comment 
      000CF0                       2661 	_case TICK plus_tst 
      000CF0 A6 27            [ 1]    1 	ld a,#TICK 
      000CF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CF4 26 35            [ 1]    3 	jrne plus_tst
      000CF6 A6 80            [ 1] 2662 	ld a,#TK_CMD
      000CF8 F7               [ 1] 2663 	ld (x),a 
      000CF9 5C               [ 2] 2664 	incw x
      000CFA 90 AE 14 CD      [ 2] 2665 	ldw y,#remark
      000CFE FF               [ 2] 2666 	ldw (x),y 
      000CFF 1C 00 02         [ 2] 2667 	addw x,#2  
      000D02                       2668 copy_comment:
      000D02 90 AE 16 90      [ 2] 2669 	ldw y,#tib 
      000D06 72 B9 00 00      [ 2] 2670 	addw y,in.w
      000D0A 90 89            [ 2] 2671 	pushw y
      000D0C CD 02 D4         [ 4] 2672 	call strcpy
      000D0F 72 F2 01         [ 2] 2673     subw y,(1,sp)
      000D12 90 9F            [ 1] 2674 	ld a,yl 
      000D14 CB 00 01         [ 1] 2675 	add a,in
      000D17 C7 00 01         [ 1] 2676 	ld in,a 
      000D1A 1F 01            [ 2] 2677 	ldw (1,sp),x
      000D1C 72 F9 01         [ 2] 2678 	addw y,(1,sp)
      000D1F 90 5C            [ 2] 2679 	incw y 
      000D21                       2680 	_drop 2 
      000D21 5B 02            [ 2]    1     addw sp,#2 
      000D23 AE 14 CD         [ 2] 2681 	ldw x,#remark 
      000D26 A6 80            [ 1] 2682 	ld a,#TK_CMD 
      000D28 CC 0D CF         [ 2] 2683 	jp token_exit 
      000D2B                       2684 plus_tst:
      000D2B                       2685 	_case '+' star_tst 
      000D2B A6 2B            [ 1]    1 	ld a,#'+' 
      000D2D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D2F 26 05            [ 1]    3 	jrne star_tst
      000D31 A6 10            [ 1] 2686 	ld a,#TK_PLUS  
      000D33 CC 0D CB         [ 2] 2687 	jp token_char 
      000D36                       2688 star_tst:
      000D36                       2689 	_case '*' slash_tst 
      000D36 A6 2A            [ 1]    1 	ld a,#'*' 
      000D38 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3A 26 05            [ 1]    3 	jrne slash_tst
      000D3C A6 20            [ 1] 2690 	ld a,#TK_MULT 
      000D3E CC 0D CB         [ 2] 2691 	jp token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000D41                       2692 slash_tst: 
      000D41                       2693 	_case '/' prcnt_tst 
      000D41 A6 2F            [ 1]    1 	ld a,#'/' 
      000D43 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D45 26 05            [ 1]    3 	jrne prcnt_tst
      000D47 A6 21            [ 1] 2694 	ld a,#TK_DIV 
      000D49 CC 0D CB         [ 2] 2695 	jp token_char 
      000D4C                       2696 prcnt_tst:
      000D4C                       2697 	_case '%' eql_tst 
      000D4C A6 25            [ 1]    1 	ld a,#'%' 
      000D4E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D50 26 05            [ 1]    3 	jrne eql_tst
      000D52 A6 22            [ 1] 2698 	ld a,#TK_MOD
      000D54 CC 0D CB         [ 2] 2699 	jp token_char  
                                   2700 ; 1 or 2 character tokens 	
      000D57                       2701 eql_tst:
      000D57                       2702 	_case '=' gt_tst 		
      000D57 A6 3D            [ 1]    1 	ld a,#'=' 
      000D59 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5B 26 05            [ 1]    3 	jrne gt_tst
      000D5D A6 32            [ 1] 2703 	ld a,#TK_EQUAL
      000D5F CC 0D CB         [ 2] 2704 	jp token_char 
      000D62                       2705 gt_tst:
      000D62                       2706 	_case '>' lt_tst 
      000D62 A6 3E            [ 1]    1 	ld a,#'>' 
      000D64 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D66 26 23            [ 1]    3 	jrne lt_tst
      000D68 A6 31            [ 1] 2707 	ld a,#TK_GT 
      000D6A 6B 02            [ 1] 2708 	ld (ATTRIB,sp),a 
      000D6C 72 5C 00 01      [ 1] 2709 	inc in 
      000D70 91 D6 00         [ 4] 2710 	ld a,([in.w],y)
      000D73 A1 3D            [ 1] 2711 	cp a,#'=
      000D75 26 04            [ 1] 2712 	jrne 1$
      000D77 A6 33            [ 1] 2713 	ld a,#TK_GE 
      000D79 20 50            [ 2] 2714 	jra token_char  
      000D7B A1 3C            [ 1] 2715 1$: cp a,#'<
      000D7D 26 04            [ 1] 2716 	jrne 2$
      000D7F A6 35            [ 1] 2717 	ld a,#TK_NE 
      000D81 20 48            [ 2] 2718 	jra token_char 
      000D83 72 5A 00 01      [ 1] 2719 2$: dec in
      000D87 7B 02            [ 1] 2720 	ld a,(ATTRIB,sp)
      000D89 20 40            [ 2] 2721 	jra token_char 	 
      000D8B                       2722 lt_tst:
      000D8B                       2723 	_case '<' other
      000D8B A6 3C            [ 1]    1 	ld a,#'<' 
      000D8D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D8F 26 23            [ 1]    3 	jrne other
      000D91 A6 34            [ 1] 2724 	ld a,#TK_LT 
      000D93 6B 02            [ 1] 2725 	ld (ATTRIB,sp),a 
      000D95 72 5C 00 01      [ 1] 2726 	inc in 
      000D99 91 D6 00         [ 4] 2727 	ld a,([in.w],y)
      000D9C A1 3D            [ 1] 2728 	cp a,#'=
      000D9E 26 04            [ 1] 2729 	jrne 1$
      000DA0 A6 36            [ 1] 2730 	ld a,#TK_LE 
      000DA2 20 27            [ 2] 2731 	jra token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000DA4 A1 3E            [ 1] 2732 1$: cp a,#'>
      000DA6 26 04            [ 1] 2733 	jrne 2$
      000DA8 A6 35            [ 1] 2734 	ld a,#TK_NE 
      000DAA 20 1F            [ 2] 2735 	jra token_char 
      000DAC 72 5A 00 01      [ 1] 2736 2$: dec in 
      000DB0 7B 02            [ 1] 2737 	ld a,(ATTRIB,sp)
      000DB2 20 17            [ 2] 2738 	jra token_char 	
      000DB4                       2739 other: ; not a special character 	 
      000DB4 7B 01            [ 1] 2740 	ld a,(TCHAR,sp)
      000DB6 CD 04 8F         [ 4] 2741 	call is_alpha 
      000DB9 25 03            [ 1] 2742 	jrc 30$ 
      000DBB CC 07 95         [ 2] 2743 	jp syntax_error 
      000DBE                       2744 30$: 
      000DBE CD 0B C6         [ 4] 2745 	call parse_keyword
      000DC1 A3 14 CD         [ 2] 2746 	cpw x,#remark 
      000DC4 26 09            [ 1] 2747 	jrne token_exit 
      000DC6 90 93            [ 1] 2748 	ldw y,x 
      000DC8 CC 0D 02         [ 2] 2749 	jp copy_comment 
      000DCB                       2750 token_char:
      000DCB F7               [ 1] 2751 	ld (x),a 
      000DCC 5C               [ 2] 2752 	incw x
      000DCD 90 93            [ 1] 2753 	ldw y,x 
      000DCF                       2754 token_exit:
      000DCF                       2755 	_drop VSIZE 
      000DCF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DD1 81               [ 4] 2756 	ret
                                   2757 
                                   2758 
                                   2759 ;------------------------------------
                                   2760 ; convert alpha to uppercase
                                   2761 ; input:
                                   2762 ;    a  character to convert
                                   2763 ; output:
                                   2764 ;    a  uppercase character
                                   2765 ;------------------------------------
      000DD2                       2766 to_upper::
      000DD2 A1 61            [ 1] 2767 	cp a,#'a
      000DD4 2A 01            [ 1] 2768 	jrpl 1$
      000DD6 81               [ 4] 2769 0$:	ret
      000DD7 A1 7A            [ 1] 2770 1$: cp a,#'z	
      000DD9 22 FB            [ 1] 2771 	jrugt 0$
      000DDB A0 20            [ 1] 2772 	sub a,#32
      000DDD 81               [ 4] 2773 	ret
                                   2774 	
                                   2775 ;------------------------------------
                                   2776 ; convert pad content in integer
                                   2777 ; input:
                                   2778 ;    x		.asciz to convert
                                   2779 ; output:
                                   2780 ;    acc24      int24_t
                                   2781 ;------------------------------------
                                   2782 	; local variables
                           000001  2783 	SIGN=1 ; 1 byte, 
                           000002  2784 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2785 	TEMP=3 ; 1 byte, temporary storage
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                           000003  2786 	VSIZE=3 ; 3 bytes reserved for local storage
      000DDE                       2787 atoi24:
      000DDE 89               [ 2] 2788 	pushw x 
      000DDF                       2789 	_vars VSIZE
      000DDF 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2790 	; acc24=0 
      000DE1 72 5F 00 0B      [ 1] 2791 	clr acc24    
      000DE5 72 5F 00 0C      [ 1] 2792 	clr acc16
      000DE9 72 5F 00 0D      [ 1] 2793 	clr acc8 
      000DED 0F 01            [ 1] 2794 	clr (SIGN,sp)
      000DEF A6 0A            [ 1] 2795 	ld a,#10
      000DF1 6B 02            [ 1] 2796 	ld (BASE,sp),a ; default base decimal
      000DF3 F6               [ 1] 2797 	ld a,(x)
      000DF4 27 47            [ 1] 2798 	jreq 9$  ; completed if 0
      000DF6 A1 2D            [ 1] 2799 	cp a,#'-
      000DF8 26 04            [ 1] 2800 	jrne 1$
      000DFA 03 01            [ 1] 2801 	cpl (SIGN,sp)
      000DFC 20 08            [ 2] 2802 	jra 2$
      000DFE A1 24            [ 1] 2803 1$: cp a,#'$
      000E00 26 06            [ 1] 2804 	jrne 3$
      000E02 A6 10            [ 1] 2805 	ld a,#16
      000E04 6B 02            [ 1] 2806 	ld (BASE,sp),a
      000E06 5C               [ 2] 2807 2$:	incw x
      000E07 F6               [ 1] 2808 	ld a,(x)
      000E08                       2809 3$:	
      000E08 A1 61            [ 1] 2810 	cp a,#'a
      000E0A 2B 02            [ 1] 2811 	jrmi 4$
      000E0C A0 20            [ 1] 2812 	sub a,#32
      000E0E A1 30            [ 1] 2813 4$:	cp a,#'0
      000E10 2B 2B            [ 1] 2814 	jrmi 9$
      000E12 A0 30            [ 1] 2815 	sub a,#'0
      000E14 A1 0A            [ 1] 2816 	cp a,#10
      000E16 2B 06            [ 1] 2817 	jrmi 5$
      000E18 A0 07            [ 1] 2818 	sub a,#7
      000E1A 11 02            [ 1] 2819 	cp a,(BASE,sp)
      000E1C 2A 1F            [ 1] 2820 	jrpl 9$
      000E1E 6B 03            [ 1] 2821 5$:	ld (TEMP,sp),a
      000E20 7B 02            [ 1] 2822 	ld a,(BASE,sp)
      000E22 CD 0A 01         [ 4] 2823 	call mulu24_8
      000E25 7B 03            [ 1] 2824 	ld a,(TEMP,sp)
      000E27 CB 00 0D         [ 1] 2825 	add a,acc24+2
      000E2A C7 00 0D         [ 1] 2826 	ld acc24+2,a
      000E2D 4F               [ 1] 2827 	clr a
      000E2E C9 00 0C         [ 1] 2828 	adc a,acc24+1
      000E31 C7 00 0C         [ 1] 2829 	ld acc24+1,a
      000E34 4F               [ 1] 2830 	clr a
      000E35 C9 00 0B         [ 1] 2831 	adc a,acc24
      000E38 C7 00 0B         [ 1] 2832 	ld acc24,a
      000E3B 20 C9            [ 2] 2833 	jra 2$
      000E3D 0D 01            [ 1] 2834 9$:	tnz (SIGN,sp)
      000E3F 27 03            [ 1] 2835     jreq atoi_exit
      000E41 CD 0A 3B         [ 4] 2836     call neg_acc24
      000E44                       2837 atoi_exit: 
      000E44                       2838 	_drop VSIZE
      000E44 5B 03            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000E46 85               [ 2] 2839 	popw x ; restore x
      000E47 81               [ 4] 2840 	ret
                                   2841 
                                   2842 
                                   2843 ;------------------------------------
                                   2844 ; skip character c in text starting from 'in'
                                   2845 ; input:
                                   2846 ;	 y 		point to text buffer
                                   2847 ;    a 		character to skip
                                   2848 ; output:  
                                   2849 ;	'in' ajusted to new position
                                   2850 ;------------------------------------
                           000001  2851 	C = 1 ; local var
      000E48                       2852 skip:
      000E48 88               [ 1] 2853 	push a
      000E49 91 D6 00         [ 4] 2854 1$:	ld a,([in.w],y)
      000E4C 27 0A            [ 1] 2855 	jreq 2$
      000E4E 11 01            [ 1] 2856 	cp a,(C,sp)
      000E50 26 06            [ 1] 2857 	jrne 2$
      000E52 72 5C 00 01      [ 1] 2858 	inc in
      000E56 20 F1            [ 2] 2859 	jra 1$
      000E58                       2860 2$: _drop 1 
      000E58 5B 01            [ 2]    1     addw sp,#1 
      000E5A 81               [ 4] 2861 	ret
                                   2862 	
                                   2863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2864 ;;   TINY BASIC  operators,
                                   2865 ;;   commands and functions 
                                   2866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2867 
                                   2868 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2869 ;;  Arithmetic operators
                                   2870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2871 
                                   2872 ;--------------------------------
                                   2873 ;  add 2 integers
                                   2874 ;  input:
                                   2875 ;    N1     on cstack 
                                   2876 ;    N2     on cstack 
                                   2877 ;  output:
                                   2878 ;    X 		n2+n1 
                                   2879 ;--------------------------------
                                   2880 	;arugments on cstack 
      000E5B                       2881 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000E5B                       2882 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000E5B                       2883 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000E5B                       2884 add:
      000E5B 1E 05            [ 2] 2885 	ldw x ,(N2,sp)
      000E5D 72 FB 03         [ 2] 2886 	addw x,(N1,sp)
      000E60 1F 03            [ 2] 2887 	ldw (N1,sp),x 
      000E62 81               [ 4] 2888 	ret 
                                   2889 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2890 ;--------------------------------
                                   2891 ;  substract 2 ntegers
                                   2892 ;  input:
                                   2893 ;    N1     on cstack 
                                   2894 ;    N2     on cstack 
                                   2895 ;  output:
                                   2896 ;    X 		n2+n1 
                                   2897 ;--------------------------------
      000E63                       2898 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000E63                       2899 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000E63                       2900 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000E63                       2901 substract:
      000E63 1E 05            [ 2] 2902 	ldw x,(N2,sp)
      000E65 72 F0 03         [ 2] 2903 	subw x,(N1,sp)
      000E68 81               [ 4] 2904 	ret 
                                   2905 
                                   2906 ;-------------------------------------
                                   2907 ; multiply 2 integers
                                   2908 ; product overflow is ignored unless
                                   2909 ; MATH_OVF assembler flag is set to 1
                                   2910 ; input:
                                   2911 ;  	N1      on cstack
                                   2912 ;   N2 		on cstack 
                                   2913 ; output:
                                   2914 ;	X        N1*N2 
                                   2915 ;-------------------------------------
                                   2916 	;arguments 
      000E69                       2917 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      000E69                       2918 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      000E69                       2919 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      000E69                       2920 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      000E69                       2921 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2922    ; local variables 
                           000001  2923 	SIGN=1
                           000002  2924 	PROD=2
                           000003  2925 	VSIZE=3
      000E69                       2926 multiply:
      000E69                       2927 	_vars VSIZE 
      000E69 52 03            [ 2]    1     sub sp,#VSIZE 
      000E6B 0F 01            [ 1] 2928 	clr (SIGN,sp)
      000E6D 1E 06            [ 2] 2929 	ldw x,(N1_HB,sp)
      000E6F 9E               [ 1] 2930 	ld a,xh  
      000E70 A5 80            [ 1] 2931 	bcp a,#0x80 
      000E72 27 05            [ 1] 2932 	jreq 2$
      000E74 03 01            [ 1] 2933 	cpl (SIGN,sp)
      000E76 50               [ 2] 2934 	negw x 
      000E77 1F 06            [ 2] 2935 	ldw (N1_HB,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000E79 1E 08            [ 2] 2936 2$: ldw x,(N2_HB,sp)
      000E7B 9E               [ 1] 2937 	ld a,xh  
      000E7C A5 80            [ 1] 2938 	bcp a,#0x80 
      000E7E 27 05            [ 1] 2939 	jreq 3$
      000E80 03 01            [ 1] 2940 	cpl (SIGN,sp)
      000E82 50               [ 2] 2941 	negw x 
      000E83 1F 08            [ 2] 2942 	ldw (N2_HB,sp),x 
                                   2943 ; N1_LB * N2_LB 	
      000E85 7B 07            [ 1] 2944 3$:	ld a,(N1_LB,sp)
      000E87 97               [ 1] 2945 	ld xl,a 
      000E88 7B 09            [ 1] 2946 	ld a,(N2_LB,sp) 
      000E8A 42               [ 4] 2947 	mul x,a 
                           000000  2948 .if MATH_OVF 	
                                   2949 	ld a,xh 
                                   2950 	bcp a,#0x80 
                                   2951 	jreq 4$ 
                                   2952 	ld a,#ERR_MATH_OVF 
                                   2953 	jp tb_error
                                   2954 .endif 	 
      000E8B 1F 02            [ 2] 2955 4$:	ldw (PROD,sp),x
                                   2956 ; N1_LB * N2_HB	 
      000E8D 7B 07            [ 1] 2957 	ld a,(N1_LB,sp) 
      000E8F 97               [ 1] 2958 	ld xl,a 
      000E90 7B 08            [ 1] 2959 	ld a,(N2_HB,sp)
      000E92 42               [ 4] 2960 	mul x,a
      000E93 9F               [ 1] 2961 	ld a,xl 
      000E94 1B 02            [ 1] 2962 	add a,(PROD,sp)
                           000000  2963 .if MATH_OVF 	
                                   2964 	bcp a,#0x80 
                                   2965 	jreq 5$ 
                                   2966 	ld a,#ERR_MATH_OVF 
                                   2967 	jp tb_error
                                   2968 .endif 	 
      000E96 6B 02            [ 1] 2969 5$:	ld (PROD,sp),a 
                                   2970 ; N1_HB * N2_LB 
      000E98 7B 06            [ 1] 2971 	ld a,(N1_HB,sp)
      000E9A 97               [ 1] 2972 	ld xl,a 
      000E9B 7B 09            [ 1] 2973 	ld a,(N2_LB,sp)
      000E9D 42               [ 4] 2974 	mul x,a 
      000E9E 9F               [ 1] 2975 	ld a,xl 
      000E9F 1B 02            [ 1] 2976 	add a,(PROD,sp)
                           000000  2977 .if MATH_OVF 	
                                   2978 	bcp a,#0x80 
                                   2979 	jreq 6$ 
                                   2980 	ld a,#ERR_MATH_OVF 
                                   2981 	jp tb_error
                                   2982 .endif 	 
      000EA1 6B 02            [ 1] 2983 6$:	ld (PROD,sp),a 
                                   2984 ; N1_HB * N2_HB 	
                                   2985 ; it is pointless to multiply N1_HB*N2_HB 
                                   2986 ; as this product is over 65535 or 0 
                                   2987 ;
                                   2988 ; sign adjust product
      000EA3 0D 01            [ 1] 2989 	tnz (SIGN,sp)
      000EA5 27 05            [ 1] 2990 	jreq 7$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000EA7 1E 02            [ 2] 2991 	ldw x, (PROD,sp)
      000EA9 50               [ 2] 2992 	negw x
      000EAA 1F 02            [ 2] 2993 	ldw (PROD,sp),x  
      000EAC                       2994 7$: 
      000EAC 1E 02            [ 2] 2995 	ldw x,(PROD,sp) 
      000EAE                       2996 	_drop VSIZE 
      000EAE 5B 03            [ 2]    1     addw sp,#VSIZE 
      000EB0 81               [ 4] 2997 	ret
                                   2998 
                                   2999 ;----------------------------------
                                   3000 ;  euclidian divide n2/n1 
                                   3001 ; input:
                                   3002 ;    N2 	on cstack
                                   3003 ;    N1 	on cstack
                                   3004 ; output:
                                   3005 ;    X      n2/n1 
                                   3006 ;    Y      remainder 
                                   3007 ;----------------------------------
      000EB1                       3008 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      000EB1                       3009 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      000EB1                       3010 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   3011 	; local variables
                           000001  3012 	SQUOT=1 ; sign quotient
                           000002  3013 	SDIVD=2 ; sign dividend  
                           000002  3014 	VSIZE=2
      000EB1                       3015 divide:
      000EB1                       3016 	_vars VSIZE 
      000EB1 52 02            [ 2]    1     sub sp,#VSIZE 
      000EB3 0F 01            [ 1] 3017 	clr (SQUOT,sp)
      000EB5 0F 02            [ 1] 3018 	clr (SDIVD,sp)
                                   3019 ; check for 0 divisor
      000EB7 1E 05            [ 2] 3020 	ldw x,(DIVISR,sp)
      000EB9 5D               [ 2] 3021 	tnzw x 
      000EBA 26 05            [ 1] 3022     jrne 0$
      000EBC A6 04            [ 1] 3023 	ld a,#ERR_DIV0 
      000EBE CC 07 97         [ 2] 3024 	jp tb_error 
                                   3025 ; check divisor sign 	
      000EC1 9E               [ 1] 3026 0$:	ld a,xh 
      000EC2 A5 80            [ 1] 3027 	bcp a,#0x80 
      000EC4 27 03            [ 1] 3028 	jreq 1$
      000EC6 03 01            [ 1] 3029 	cpl (SQUOT,sp)
      000EC8 50               [ 2] 3030 	negw x 
      000EC9 1F 05            [ 2] 3031 1$:	ldw (DIVISR,sp),x
                                   3032 ; check dividend sign 	 
      000ECB 1E 07            [ 2] 3033     ldw x,(DIVIDND,sp)
      000ECD 9E               [ 1] 3034 	ld a,xh 
      000ECE A5 80            [ 1] 3035 	bcp a,#0x80 
      000ED0 27 05            [ 1] 3036 	jreq 2$ 
      000ED2 03 01            [ 1] 3037 	cpl (SQUOT,sp)
      000ED4 03 02            [ 1] 3038 	cpl (SDIVD,sp)
      000ED6 50               [ 2] 3039 	negw x 
      000ED7 16 05            [ 2] 3040 2$:	ldw y,(DIVISR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000ED9 65               [ 2] 3041 	divw x,y
      000EDA 90 CF 00 0C      [ 2] 3042 	ldw acc16,y 
                                   3043 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      000EDE 0D 02            [ 1] 3044 	tnz (SDIVD,sp)
      000EE0 27 0B            [ 1] 3045 	jreq 7$
      000EE2 90 5D            [ 2] 3046 	tnzw y 
      000EE4 27 07            [ 1] 3047 	jreq 7$
      000EE6 5C               [ 2] 3048 	incw x
      000EE7 16 05            [ 2] 3049 	ldw y,(DIVISR,sp)
      000EE9 72 B2 00 0C      [ 2] 3050 	subw y,acc16
      000EED 0D 01            [ 1] 3051 7$: tnz (SQUOT,sp)
      000EEF 27 01            [ 1] 3052 	jreq 9$ 	 
      000EF1 50               [ 2] 3053 8$:	negw x 
      000EF2                       3054 9$: 
      000EF2                       3055 	_drop VSIZE 
      000EF2 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EF4 81               [ 4] 3056 	ret 
                                   3057 
                                   3058 
                                   3059 ;----------------------------------
                                   3060 ;  remainder resulting from euclidian 
                                   3061 ;  division of n2/n1 
                                   3062 ; input:
                                   3063 ;   N1 		cstack 
                                   3064 ;   N2      cstack
                                   3065 ; output:
                                   3066 ;   X       N2%N1 
                                   3067 ;----------------------------------
                           000003  3068 	N1=3
                           000005  3069 	N2=5
                           000004  3070 	VSIZE=4
      000EF5                       3071 modulo:
      000EF5 1E 03            [ 2] 3072 	Ldw x,(N1,sp)
      000EF7 16 05            [ 2] 3073 	ldw y,(N2,sp)
      000EF9                       3074 	_vars VSIZE 
      000EF9 52 04            [ 2]    1     sub sp,#VSIZE 
      000EFB 1F 01            [ 2] 3075 	ldw (1,sp),x 
      000EFD 17 03            [ 2] 3076 	ldw (3,sp),y 
      000EFF CD 0E B1         [ 4] 3077 	call divide 
      000F02 93               [ 1] 3078 	ldw x,y
      000F03                       3079 	_drop VSIZE 
      000F03 5B 04            [ 2]    1     addw sp,#VSIZE 
      000F05 81               [ 4] 3080 	ret 
                                   3081 
                                   3082 
                                   3083 ;----------------------------------
                                   3084 ; search in kword_dict name
                                   3085 ; from its execution address 
                                   3086 ; input:
                                   3087 ;   X       	execution address 
                                   3088 ; output:
                                   3089 ;   X 			cstr*  | 0 
                                   3090 ;--------------------------------
                           000001  3091 	XADR=1 
                           000003  3092 	LINK=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                           000004  3093 	VSIZE=4
      000F06                       3094 cmd_name:
      000F06                       3095 	_vars VSIZE 
      000F06 52 04            [ 2]    1     sub sp,#VSIZE 
      000F08 72 5F 00 0C      [ 1] 3096 	clr acc16 
      000F0C 1F 01            [ 2] 3097 	ldw (XADR,sp),x  
      000F0E AE 25 88         [ 2] 3098 	ldw x,#kword_dict	
      000F11 1F 03            [ 2] 3099 1$:	ldw (LINK,sp),x
      000F13 E6 02            [ 1] 3100 	ld a,(2,x)
      000F15 A4 0F            [ 1] 3101 	and a,#15 
      000F17 C7 00 0D         [ 1] 3102 	ld acc8,a 
      000F1A 1C 00 03         [ 2] 3103 	addw x,#3
      000F1D 72 BB 00 0C      [ 2] 3104 	addw x,acc16
      000F21 FE               [ 2] 3105 	ldw x,(x) ; execution address 
      000F22 13 01            [ 2] 3106 	cpw x,(XADR,sp)
      000F24 27 0A            [ 1] 3107 	jreq 2$
      000F26 1E 03            [ 2] 3108 	ldw x,(LINK,sp)
      000F28 FE               [ 2] 3109 	ldw x,(x) 
      000F29 1D 00 02         [ 2] 3110 	subw x,#2  
      000F2C 26 E3            [ 1] 3111 	jrne 1$
      000F2E 20 05            [ 2] 3112 	jra 9$
      000F30 1E 03            [ 2] 3113 2$: ldw x,(LINK,sp)
      000F32 1C 00 02         [ 2] 3114 	addw x,#2 	
      000F35                       3115 9$:	_drop VSIZE
      000F35 5B 04            [ 2]    1     addw sp,#VSIZE 
      000F37 81               [ 4] 3116 	ret
                                   3117 
                                   3118 
                                   3119 ;---------------------------------
                                   3120 ; dictionary search 
                                   3121 ; input:
                                   3122 ;	X 		dictionary entry point, name field  
                                   3123 ;   y		.asciz name to search 
                                   3124 ; output:
                                   3125 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3126 ;  X		execution address | 0 
                                   3127 ;---------------------------------
                           000001  3128 	NLEN=1 ; cmd length 
                           000002  3129 	XSAVE=2
                           000004  3130 	YSAVE=4
                           000005  3131 	VSIZE=5 
      000F38                       3132 search_dict:
      000F38                       3133 	_vars VSIZE 
      000F38 52 05            [ 2]    1     sub sp,#VSIZE 
                                   3134 
      000F3A 17 04            [ 2] 3135 	ldw (YSAVE,sp),y 
      000F3C                       3136 search_next:
      000F3C 1F 02            [ 2] 3137 	ldw (XSAVE,sp),x 
                                   3138 ; get name length in dictionary	
      000F3E F6               [ 1] 3139 	ld a,(x)
      000F3F A4 0F            [ 1] 3140 	and a,#0xf 
      000F41 6B 01            [ 1] 3141 	ld (NLEN,sp),a  
      000F43 16 04            [ 2] 3142 	ldw y,(YSAVE,sp) ; name pointer 
      000F45 5C               [ 2] 3143 	incw x 
      000F46                       3144 cp_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000F46 90 F6            [ 1] 3145 	ld a,(y)
      000F48 27 1B            [ 1] 3146 	jreq str_match 
      000F4A 0D 01            [ 1] 3147 	tnz (NLEN,sp)
      000F4C 27 0A            [ 1] 3148 	jreq no_match  
      000F4E F1               [ 1] 3149 	cp a,(x)
      000F4F 26 07            [ 1] 3150 	jrne no_match 
      000F51 90 5C            [ 2] 3151 	incw y 
      000F53 5C               [ 2] 3152 	incw x
      000F54 0A 01            [ 1] 3153 	dec (NLEN,sp)
      000F56 20 EE            [ 2] 3154 	jra cp_loop 
      000F58                       3155 no_match:
      000F58 1E 02            [ 2] 3156 	ldw x,(XSAVE,sp) 
      000F5A 1D 00 02         [ 2] 3157 	subw x,#2 ; move X to link field
      000F5D 4B 00            [ 1] 3158 	push #TK_NONE 
      000F5F FE               [ 2] 3159 	ldw x,(x) ; next word link 
      000F60 84               [ 1] 3160 	pop a ; TK_NONE 
      000F61 27 1F            [ 1] 3161 	jreq search_exit  ; not found  
                                   3162 ;try next 
      000F63 20 D7            [ 2] 3163 	jra search_next
      000F65                       3164 str_match:
      000F65 1E 02            [ 2] 3165 	ldw x,(XSAVE,sp)
      000F67 F6               [ 1] 3166 	ld a,(X)
      000F68 6B 01            [ 1] 3167 	ld (NLEN,sp),a ; needed to test keyword type  
      000F6A A4 0F            [ 1] 3168 	and a,#0xf 
                                   3169 ; move x to procedure address field 	
      000F6C 4C               [ 1] 3170 	inc a 
      000F6D C7 00 0D         [ 1] 3171 	ld acc8,a 
      000F70 72 5F 00 0C      [ 1] 3172 	clr acc16 
      000F74 72 BB 00 0C      [ 2] 3173 	addw x,acc16 
      000F78 FE               [ 2] 3174 	ldw x,(x) ; routine entry point 
                                   3175 ;determine keyword type bits 7:6 
      000F79 7B 01            [ 1] 3176 	ld a,(NLEN,sp)
      000F7B 4E               [ 1] 3177 	swap a 
      000F7C A4 0C            [ 1] 3178 	and a,#0xc
      000F7E 44               [ 1] 3179 	srl a
      000F7F 44               [ 1] 3180 	srl a 
      000F80 AB 80            [ 1] 3181 	add a,#128
      000F82                       3182 search_exit: 
      000F82                       3183 	_drop VSIZE 	 
      000F82 5B 05            [ 2]    1     addw sp,#VSIZE 
      000F84 81               [ 4] 3184 	ret 
                                   3185 
                                   3186 ;---------------------
                                   3187 ; check if next token
                                   3188 ;  is of expected type 
                                   3189 ; input:
                                   3190 ;   A 		 expected token attribute
                                   3191 ;  ouput:
                                   3192 ;   none     if fail call syntax_error 
                                   3193 ;--------------------
      000F85                       3194 expect:
      000F85 88               [ 1] 3195 	push a 
      000F86 CD 08 87         [ 4] 3196 	call next_token 
      000F89 11 01            [ 1] 3197 	cp a,(1,sp)
      000F8B 27 03            [ 1] 3198 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000F8D CC 07 95         [ 2] 3199 	jp syntax_error
      000F90 84               [ 1] 3200 1$: pop a 
      000F91 81               [ 4] 3201 	ret 
                                   3202 
                                   3203 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3204 ; parse arguments list 
                                   3205 ; between ()
                                   3206 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F92                       3207 func_args:
      000F92 A6 07            [ 1] 3208 	ld a,#TK_LPAREN 
      000F94 CD 0F 85         [ 4] 3209 	call expect 
                                   3210 ; expected to continue in arg_list 
                                   3211 ; caller must check for TK_RPAREN 
                                   3212 
                                   3213 ;-------------------------------
                                   3214 ; parse embedded BASIC routines 
                                   3215 ; arguments list.
                                   3216 ; arg_list::=  rel[','rel]*
                                   3217 ; all arguments are of integer type
                                   3218 ; and pushed on stack 
                                   3219 ; input:
                                   3220 ;   none
                                   3221 ; output:
                                   3222 ;   stack{n}   arguments pushed on stack
                                   3223 ;   A 	number of arguments pushed on stack  
                                   3224 ;--------------------------------
      000F97                       3225 arg_list:
      000F97 4B 00            [ 1] 3226 	push #0  
      000F99 CD 10 D4         [ 4] 3227 1$: call relation
      000F9C A1 00            [ 1] 3228 	cp a,#TK_NONE 
      000F9E 27 20            [ 1] 3229 	jreq 5$
      000FA0 A1 04            [ 1] 3230 	cp a,#TK_INTGR
      000FA2 26 13            [ 1] 3231 	jrne 4$
      000FA4                       3232 3$: 
                                   3233 ; swap return address with argument
      000FA4 84               [ 1] 3234 	pop a ; arg_count
      000FA5 90 85            [ 2] 3235 	popw y ; return address 
      000FA7 89               [ 2] 3236 	pushw x ; new argument 
      000FA8 90 89            [ 2] 3237 	pushw y 
      000FAA 4C               [ 1] 3238     inc a
      000FAB 88               [ 1] 3239 	push a 
      000FAC CD 08 87         [ 4] 3240 	call next_token 
      000FAF A1 09            [ 1] 3241 	cp a,#TK_COMMA 
      000FB1 27 E6            [ 1] 3242 	jreq 1$ 
      000FB3 A1 00            [ 1] 3243 	cp a,#TK_NONE 
      000FB5 27 09            [ 1] 3244 	jreq 5$ 
      000FB7 A1 08            [ 1] 3245 4$:	cp a,#TK_RPAREN 
      000FB9 27 05            [ 1] 3246 	jreq 5$
      000FBB                       3247 	_unget_token 
      000FBB 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000FC0 84               [ 1] 3248 5$:	pop a  
      000FC1 81               [ 4] 3249 	ret 
                                   3250 
                                   3251 ;--------------------------------
                                   3252 ;   BASIC commnands 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3253 ;--------------------------------
                                   3254 
                                   3255 ;--------------------------------
                                   3256 ;  arithmetic and relational 
                                   3257 ;  routines
                                   3258 ;  operators precedence
                                   3259 ;  highest to lowest
                                   3260 ;  operators on same row have 
                                   3261 ;  same precedence and are executed
                                   3262 ;  from left to right.
                                   3263 ;	'*','/','%'
                                   3264 ;   '-','+'
                                   3265 ;   '=','>','<','>=','<=','<>','><'
                                   3266 ;   '<>' and '><' are equivalent for not equal.
                                   3267 ;--------------------------------
                                   3268 
                                   3269 ;---------------------
                                   3270 ; return array element
                                   3271 ; address from @(expr)
                                   3272 ; input:
                                   3273 ;   A 		TK_ARRAY
                                   3274 ; output:
                                   3275 ;   A 		TK_INTGR
                                   3276 ;	X 		element address 
                                   3277 ;----------------------
      000FC2                       3278 get_array_element:
      000FC2 CD 0F 92         [ 4] 3279 	call func_args 
      000FC5 A1 01            [ 1] 3280 	cp a,#1
      000FC7 27 03            [ 1] 3281 	jreq 1$
      000FC9 CC 07 95         [ 2] 3282 	jp syntax_error
      000FCC 85               [ 2] 3283 1$: popw x 
                                   3284 	; check for bounds 
      000FCD C3 00 22         [ 2] 3285 	cpw x,array_size 
      000FD0 23 05            [ 2] 3286 	jrule 3$
                                   3287 ; bounds {1..array_size}	
      000FD2 A6 0A            [ 1] 3288 2$: ld a,#ERR_BAD_VALUE 
      000FD4 CC 07 97         [ 2] 3289 	jp tb_error 
      000FD7 5D               [ 2] 3290 3$: tnzw  x
      000FD8 27 F8            [ 1] 3291 	jreq 2$ 
      000FDA 58               [ 2] 3292 	sllw x 
      000FDB 89               [ 2] 3293 	pushw x 
      000FDC AE 16 90         [ 2] 3294 	ldw x,#tib
      000FDF 72 F0 01         [ 2] 3295 	subw x,(1,sp)
      000FE2                       3296 	_drop 2   
      000FE2 5B 02            [ 2]    1     addw sp,#2 
      000FE4 A6 04            [ 1] 3297 	ld a,#TK_INTGR
      000FE6 81               [ 4] 3298 	ret 
                                   3299 
                                   3300 ;***********************************
                                   3301 ;   expression parse,execute 
                                   3302 ;***********************************
                                   3303 ;-----------------------------------
                                   3304 ; factor ::= ['+'|'-'|e]  var | @ |
                                   3305 ;			 integer | function |
                                   3306 ;			 '('relation')' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3307 ; output:
                                   3308 ;   A    token attribute 
                                   3309 ;   X 	 integer
                                   3310 ; ---------------------------------
                           000001  3311 	NEG=1
                           000001  3312 	VSIZE=1
      000FE7                       3313 factor:
      000FE7                       3314 	_vars VSIZE 
      000FE7 52 01            [ 2]    1     sub sp,#VSIZE 
      000FE9 CD 08 87         [ 4] 3315 	call next_token
      000FEC A1 02            [ 1] 3316 	cp a,#CMD_END 
      000FEE 25 4E            [ 1] 3317 	jrult 20$
      000FF0 6B 01            [ 1] 3318 1$:	ld (NEG,sp),a 
      000FF2 A4 30            [ 1] 3319 	and a,#TK_GRP_MASK
      000FF4 A1 10            [ 1] 3320 	cp a,#TK_GRP_ADD 
      000FF6 27 04            [ 1] 3321 	jreq 2$
      000FF8 7B 01            [ 1] 3322 	ld a,(NEG,sp)
      000FFA 20 03            [ 2] 3323 	jra 4$  
      000FFC                       3324 2$:	
      000FFC CD 08 87         [ 4] 3325 	call next_token 
      000FFF                       3326 4$:	
      000FFF A1 81            [ 1] 3327 	cp a,#TK_IFUNC 
      001001 26 03            [ 1] 3328 	jrne 5$ 
      001003 FD               [ 4] 3329 	call (x) 
      001004 20 2F            [ 2] 3330 	jra 18$ 
      001006                       3331 5$:
      001006 A1 04            [ 1] 3332 	cp a,#TK_INTGR
      001008 26 02            [ 1] 3333 	jrne 6$
      00100A 20 29            [ 2] 3334 	jra 18$
      00100C                       3335 6$:
      00100C A1 06            [ 1] 3336 	cp a,#TK_ARRAY
      00100E 26 06            [ 1] 3337 	jrne 10$
      001010 CD 0F C2         [ 4] 3338 	call get_array_element
      001013 FE               [ 2] 3339 	ldw x,(x)
      001014 20 1F            [ 2] 3340 	jra 18$ 
      001016                       3341 10$:
      001016 A1 05            [ 1] 3342 	cp a,#TK_VAR 
      001018 26 03            [ 1] 3343 	jrne 12$
      00101A FE               [ 2] 3344 	ldw x,(x)
      00101B 20 18            [ 2] 3345 	jra 18$
      00101D                       3346 12$:			
      00101D A1 07            [ 1] 3347 	cp a,#TK_LPAREN
      00101F 26 0C            [ 1] 3348 	jrne 16$
      001021 CD 10 D4         [ 4] 3349 	call relation
      001024 89               [ 2] 3350 	pushw x 
      001025 A6 08            [ 1] 3351 	ld a,#TK_RPAREN 
      001027 CD 0F 85         [ 4] 3352 	call expect
      00102A 85               [ 2] 3353 	popw x 
      00102B 20 08            [ 2] 3354 	jra 18$	
      00102D                       3355 16$:
      00102D                       3356 	_unget_token
      00102D 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001032 4F               [ 1] 3357 	clr a 
      001033 20 09            [ 2] 3358 	jra 20$ 
      001035                       3359 18$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001035 A6 11            [ 1] 3360 	ld a,#TK_MINUS 
      001037 11 01            [ 1] 3361 	cp a,(NEG,sp)
      001039 26 01            [ 1] 3362 	jrne 19$
      00103B 50               [ 2] 3363 	negw x
      00103C                       3364 19$:
      00103C A6 04            [ 1] 3365 	ld a,#TK_INTGR
      00103E                       3366 20$:
      00103E                       3367 	_drop VSIZE
      00103E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001040 81               [ 4] 3368 	ret
                                   3369 
                                   3370 ;-----------------------------------
                                   3371 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3372 ; output:
                                   3373 ;   A    	token attribute 
                                   3374 ;	X		integer
                                   3375 ;-----------------------------------
                           000001  3376 	N1=1
                           000003  3377 	N2=3
                           000005  3378 	MULOP=5
                           000005  3379 	VSIZE=5
      001041                       3380 term:
      001041                       3381 	_vars VSIZE
      001041 52 05            [ 2]    1     sub sp,#VSIZE 
      001043 CD 0F E7         [ 4] 3382 	call factor
      001046 A1 02            [ 1] 3383 	cp a,#CMD_END
      001048 25 43            [ 1] 3384 	jrult term_exit
      00104A                       3385 term01:	 ; check for  operator 
      00104A 1F 03            [ 2] 3386 	ldw (N2,sp),x  ; save first factor 
      00104C CD 08 87         [ 4] 3387 	call next_token
      00104F A1 02            [ 1] 3388 	cp a,#CMD_END
      001051 25 36            [ 1] 3389 	jrult 9$
      001053 6B 05            [ 1] 3390 0$:	ld (MULOP,sp),a
      001055 A4 30            [ 1] 3391 	and a,#TK_GRP_MASK
      001057 A1 20            [ 1] 3392 	cp a,#TK_GRP_MULT
      001059 27 09            [ 1] 3393 	jreq 1$
      00105B 7B 05            [ 1] 3394 	ld a,(MULOP,sp) 
      00105D                       3395 	_unget_token 
      00105D 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001062 20 25            [ 2] 3396 	jra 9$
      001064                       3397 1$:	; got *|/|%
      001064 CD 0F E7         [ 4] 3398 	call factor
      001067 A1 04            [ 1] 3399 	cp a,#TK_INTGR
      001069 27 03            [ 1] 3400 	jreq 2$ 
      00106B CC 07 95         [ 2] 3401 	jp syntax_error
      00106E 1F 01            [ 2] 3402 2$:	ldw (N1,sp),x  
      001070 7B 05            [ 1] 3403 	ld a,(MULOP,sp) 
      001072 A1 20            [ 1] 3404 	cp a,#TK_MULT 
      001074 26 05            [ 1] 3405 	jrne 3$
      001076 CD 0E 69         [ 4] 3406 	call multiply 
      001079 20 CF            [ 2] 3407 	jra term01
      00107B A1 21            [ 1] 3408 3$: cp a,#TK_DIV 
      00107D 26 05            [ 1] 3409 	jrne 4$ 
      00107F CD 0E B1         [ 4] 3410 	call divide 
      001082 20 C6            [ 2] 3411 	jra term01 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001084 CD 0E F5         [ 4] 3412 4$: call modulo
      001087 20 C1            [ 2] 3413 	jra term01 
      001089 1E 03            [ 2] 3414 9$: ldw x,(N2,sp)  
      00108B A6 04            [ 1] 3415 	ld a,#TK_INTGR 	
      00108D                       3416 term_exit:
      00108D                       3417 	_drop VSIZE 
      00108D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00108F 81               [ 4] 3418 	ret 
                                   3419 
                                   3420 ;-------------------------------
                                   3421 ;  expr ::= term [['+'|'-'] term]*
                                   3422 ;  result range {-32768..32767}
                                   3423 ;  output:
                                   3424 ;   A    token attribute 
                                   3425 ;   X	 integer   
                                   3426 ;-------------------------------
                           000001  3427 	N1=1 
                           000003  3428 	N2=3
                           000005  3429 	OP=5 
                           000005  3430 	VSIZE=5 
      001090                       3431 expression:
      001090                       3432 	_vars VSIZE 
      001090 52 05            [ 2]    1     sub sp,#VSIZE 
      001092 CD 10 41         [ 4] 3433 	call term
      001095 A1 02            [ 1] 3434 	cp a,#CMD_END 
      001097 25 38            [ 1] 3435 	jrult expr_exit 
      001099 1F 03            [ 2] 3436 0$:	ldw (N2,sp),x 
      00109B CD 08 87         [ 4] 3437 	call next_token
      00109E A1 02            [ 1] 3438 	cp a,#CMD_END 
      0010A0 25 2B            [ 1] 3439 	jrult 9$ 
      0010A2 6B 05            [ 1] 3440 1$:	ld (OP,sp),a  
      0010A4 A4 30            [ 1] 3441 	and a,#TK_GRP_MASK
      0010A6 A1 10            [ 1] 3442 	cp a,#TK_GRP_ADD 
      0010A8 27 07            [ 1] 3443 	jreq 2$ 
      0010AA                       3444 	_unget_token
      0010AA 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010AF 20 1C            [ 2] 3445 	jra 9$
      0010B1                       3446 2$: 
      0010B1 CD 10 41         [ 4] 3447 	call term
      0010B4 A1 04            [ 1] 3448 	cp a,#TK_INTGR 
      0010B6 27 03            [ 1] 3449 	jreq 3$
      0010B8 CC 07 95         [ 2] 3450 	jp syntax_error
      0010BB 1F 01            [ 2] 3451 3$:	ldw (N1,sp),x 
      0010BD 7B 05            [ 1] 3452 	ld a,(OP,sp)
      0010BF A1 10            [ 1] 3453 	cp a,#TK_PLUS 
      0010C1 26 05            [ 1] 3454 	jrne 4$
      0010C3 CD 0E 5B         [ 4] 3455 	call add 
      0010C6 20 D1            [ 2] 3456 	jra 0$ 
      0010C8 CD 0E 63         [ 4] 3457 4$:	call substract
      0010CB 20 CC            [ 2] 3458 	jra 0$
      0010CD 1E 03            [ 2] 3459 9$: ldw x,(N2,sp)
      0010CF A6 04            [ 1] 3460 	ld a,#TK_INTGR	
      0010D1                       3461 expr_exit:
      0010D1                       3462 	_drop VSIZE 
      0010D1 5B 05            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0010D3 81               [ 4] 3463 	ret 
                                   3464 
                                   3465 ;---------------------------------------------
                                   3466 ; rel ::= expr rel_op expr
                                   3467 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3468 ;  relation return 1 | 0  for true | false 
                                   3469 ;  output:
                                   3470 ;    A 		token attribute  
                                   3471 ;	 X		1|0
                                   3472 ;---------------------------------------------
                           000001  3473 	N1=1
                           000003  3474 	N2=3
                           000005  3475 	RELOP=5
                           000005  3476 	VSIZE=5 
      0010D4                       3477 relation: 
      0010D4                       3478 	_vars VSIZE
      0010D4 52 05            [ 2]    1     sub sp,#VSIZE 
      0010D6 CD 10 90         [ 4] 3479 	call expression
      0010D9 A1 02            [ 1] 3480 	cp a,#CMD_END  
      0010DB 25 4B            [ 1] 3481 	jrult rel_exit 
                                   3482 	; expect rel_op or leave 
      0010DD 1F 03            [ 2] 3483 	ldw (N2,sp),x 
      0010DF CD 08 87         [ 4] 3484 	call next_token 
      0010E2 A1 02            [ 1] 3485 	cp a,#CMD_END 
      0010E4 25 3E            [ 1] 3486 	jrult 9$
      0010E6                       3487 1$:	
      0010E6 6B 05            [ 1] 3488 	ld (RELOP,sp),a 
      0010E8 A4 30            [ 1] 3489 	and a,#TK_GRP_MASK
      0010EA A1 30            [ 1] 3490 	cp a,#TK_GRP_RELOP 
      0010EC 27 07            [ 1] 3491 	jreq 2$
      0010EE                       3492 	_unget_token  
      0010EE 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010F3 20 2F            [ 2] 3493 	jra 9$
      0010F5                       3494 2$:	; expect another expression or error 
      0010F5 CD 10 90         [ 4] 3495 	call expression
      0010F8 A1 04            [ 1] 3496 	cp a,#TK_INTGR 
      0010FA 27 03            [ 1] 3497 	jreq 3$
      0010FC CC 07 95         [ 2] 3498 	jp syntax_error 
      0010FF 1F 01            [ 2] 3499 3$:	ldw (N1,sp),x 
      001101 CD 0E 63         [ 4] 3500 	call substract
      001104 26 06            [ 1] 3501 	jrne 4$
      001106 35 02 00 0D      [ 1] 3502 	mov acc8,#2 ; n1==n2
      00110A 20 0C            [ 2] 3503 	jra 6$ 
      00110C                       3504 4$: 
      00110C 2C 06            [ 1] 3505 	jrsgt 5$  
      00110E 35 04 00 0D      [ 1] 3506 	mov acc8,#4 ; n1<2 
      001112 20 04            [ 2] 3507 	jra 6$
      001114                       3508 5$:
      001114 35 01 00 0D      [ 1] 3509 	mov acc8,#1 ; n1>n2 
      001118                       3510 6$:
      001118 5F               [ 1] 3511 	clrw x 
      001119 C6 00 0D         [ 1] 3512 	ld a, acc8  
      00111C 14 05            [ 1] 3513 	and a,(RELOP,sp)
      00111E 4D               [ 1] 3514 	tnz a 
      00111F 27 05            [ 1] 3515 	jreq 10$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001121 5C               [ 2] 3516 	incw x 
      001122                       3517 7$:	 
      001122 20 02            [ 2] 3518 	jra 10$  	
      001124 1E 03            [ 2] 3519 9$: ldw x,(N2,sp)
      001126                       3520 10$:
      001126 A6 04            [ 1] 3521 	ld a,#TK_INTGR
      001128                       3522 rel_exit: 	 
      001128                       3523 	_drop VSIZE
      001128 5B 05            [ 2]    1     addw sp,#VSIZE 
      00112A 81               [ 4] 3524 	ret 
                                   3525 
                                   3526 ;--------------------------------
                                   3527 ; BASIC: SHOW 
                                   3528 ; print stack content in hexadecimal bytes 
                                   3529 ; 16 bytes per row 
                                   3530 ;--------------------------------
      00112B                       3531 show:
      00112B AE 11 45         [ 2] 3532 	ldw x,#cstk_prompt
      00112E CD 01 D7         [ 4] 3533 	call puts 
      001131 96               [ 1] 3534 	ldw x,sp 
      001132 1C 00 03         [ 2] 3535 	addw x,#3 ; ignore return address
      001135 90 AE 18 00      [ 2] 3536 	ldw y,#RAM_SIZE  
      001139 CF 00 0C         [ 2] 3537 	ldw acc16,x 
      00113C 72 B2 00 0C      [ 2] 3538 	subw y,acc16
      001140 CD 02 79         [ 4] 3539 	call hex_dump
      001143 4F               [ 1] 3540 	clr a 
      001144 81               [ 4] 3541 	ret
                                   3542 
      001145 0A 63 6F 6E 74 65 6E  3543 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3544 
                                   3545 
                                   3546 ;--------------------------------------------
                                   3547 ; BASIC: HEX 
                                   3548 ; select hexadecimal base for integer print
                                   3549 ;---------------------------------------------
      00116C                       3550 hex_base:
      00116C 35 10 00 0A      [ 1] 3551 	mov base,#16 
      001170 81               [ 4] 3552 	ret 
                                   3553 
                                   3554 ;--------------------------------------------
                                   3555 ; BASIC: DEC 
                                   3556 ; select decimal base for integer print
                                   3557 ;---------------------------------------------
      001171                       3558 dec_base:
      001171 35 0A 00 0A      [ 1] 3559 	mov base,#10
      001175 81               [ 4] 3560 	ret 
                                   3561 
                                   3562 ;------------------------
                                   3563 ; BASIC: SIZE 
                                   3564 ; return free size in text area
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3565 ; output:
                                   3566 ;   A 		TK_INTGR
                                   3567 ;   X 	    size integer
                                   3568 ;--------------------------
      001176                       3569 size:
      001176 AE 16 90         [ 2] 3570 	ldw x,#tib 
      001179 72 B0 00 1F      [ 2] 3571 	subw x,txtend 
      00117D A6 04            [ 1] 3572 	ld a,#TK_INTGR
      00117F 81               [ 4] 3573 	ret 
                                   3574 
                                   3575 
                                   3576 ;------------------------
                                   3577 ; BASIC: UBOUND  
                                   3578 ; return array variable size 
                                   3579 ; output:
                                   3580 ;   A 		TK_INTGR
                                   3581 ;   X 	    array size 
                                   3582 ;--------------------------
      001180                       3583 ubound:
      001180 AE 16 90         [ 2] 3584 	ldw x,#tib
      001183 72 B0 00 1F      [ 2] 3585 	subw x,txtend 
      001187 90 CE 00 04      [ 2] 3586 	ldw y,basicptr 
      00118B 90 C3 00 1F      [ 2] 3587 	cpw y,txtend 
      00118F 25 0A            [ 1] 3588 	jrult 1$
      001191 3B 00 03         [ 1] 3589 	push count 
      001194 4B 00            [ 1] 3590 	push #0 
      001196 72 F0 01         [ 2] 3591 	subw x,(1,sp)
      001199                       3592 	_drop 2 
      001199 5B 02            [ 2]    1     addw sp,#2 
      00119B 54               [ 2] 3593 1$:	srlw x 
      00119C CF 00 22         [ 2] 3594 	ldw array_size,x
      00119F A6 04            [ 1] 3595 	ld a,#TK_INTGR
      0011A1 81               [ 4] 3596 	ret 
                                   3597 
                                   3598 ;-----------------------------
                                   3599 ; BASIC: LET var=expr 
                                   3600 ; variable assignement 
                                   3601 ; output:
                                   3602 ;   A 		TK_NONE 
                                   3603 ;-----------------------------
      0011A2                       3604 let:
      0011A2 CD 08 87         [ 4] 3605 	call next_token 
      0011A5 A1 05            [ 1] 3606 	cp a,#TK_VAR 
      0011A7 27 0A            [ 1] 3607 	jreq let_var
      0011A9 A1 06            [ 1] 3608 	cp a,#TK_ARRAY 
      0011AB 27 03            [ 1] 3609 	jreq  let_array
      0011AD CC 07 95         [ 2] 3610 	jp syntax_error
      0011B0                       3611 let_array:
      0011B0 CD 0F C2         [ 4] 3612 	call get_array_element
      0011B3                       3613 let_var:
      0011B3 89               [ 2] 3614 	pushw x  
      0011B4 CD 08 87         [ 4] 3615 	call next_token 
      0011B7 A1 32            [ 1] 3616 	cp a,#TK_EQUAL
      0011B9 27 03            [ 1] 3617 	jreq 1$
      0011BB CC 07 95         [ 2] 3618 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0011BE                       3619 1$:	
      0011BE CD 10 D4         [ 4] 3620 	call relation   
      0011C1 A1 04            [ 1] 3621 	cp a,#TK_INTGR 
      0011C3 27 03            [ 1] 3622 	jreq 2$
      0011C5 CC 07 95         [ 2] 3623 	jp syntax_error
      0011C8                       3624 2$:	
      0011C8 90 93            [ 1] 3625 	ldw y,x 
      0011CA 85               [ 2] 3626 	popw x   
      0011CB FF               [ 2] 3627 	ldw (x),y   
      0011CC 81               [ 4] 3628 	ret 
                                   3629 
                                   3630 ;----------------------------
                                   3631 ; BASIC: LIST [[start][,end]]
                                   3632 ; list program lines 
                                   3633 ; form start to end 
                                   3634 ; if empty argument list then 
                                   3635 ; list all.
                                   3636 ;----------------------------
                           000001  3637 	FIRST=1
                           000003  3638 	LAST=3 
                           000005  3639 	LN_PTR=5
                           000006  3640 	VSIZE=6 
      0011CD                       3641 list:
      0011CD CE 00 1D         [ 2] 3642 	ldw x,txtbgn 
      0011D0 C3 00 1F         [ 2] 3643 	cpw x,txtend 
      0011D3 2B 01            [ 1] 3644 	jrmi 1$
      0011D5 81               [ 4] 3645 	ret 
      0011D6                       3646 1$:	
      0011D6                       3647 	_vars VSIZE
      0011D6 52 06            [ 2]    1     sub sp,#VSIZE 
      0011D8 1F 05            [ 2] 3648 	ldw (LN_PTR,sp),x 
      0011DA FE               [ 2] 3649 	ldw x,(x) 
      0011DB 1F 01            [ 2] 3650 	ldw (FIRST,sp),x ; list from first line 
      0011DD AE 7F FF         [ 2] 3651 	ldw x,#MAX_LINENO ; biggest line number 
      0011E0 1F 03            [ 2] 3652 	ldw (LAST,sp),x 
      0011E2 CD 0F 97         [ 4] 3653 	call arg_list
      0011E5 4D               [ 1] 3654 	tnz a
      0011E6 27 31            [ 1] 3655 	jreq list_start 
      0011E8 A1 02            [ 1] 3656 	cp a,#2 
      0011EA 27 07            [ 1] 3657 	jreq 4$
      0011EC A1 01            [ 1] 3658 	cp a,#1 
      0011EE 27 06            [ 1] 3659 	jreq first_line 
      0011F0 CC 07 95         [ 2] 3660 	jp syntax_error 
      0011F3 85               [ 2] 3661 4$:	popw x 
      0011F4 1F 05            [ 2] 3662 	ldw (LAST+2,sp),x 
      0011F6                       3663 first_line:
      0011F6 85               [ 2] 3664 	popw x
      0011F7 1F 01            [ 2] 3665 	ldw (FIRST,sp),x 
      0011F9                       3666 lines_skip:
      0011F9 CE 00 1D         [ 2] 3667 	ldw x,txtbgn
      0011FC 1F 05            [ 2] 3668 2$:	ldw (LN_PTR,sp),x 
      0011FE C3 00 1F         [ 2] 3669 	cpw x,txtend 
      001201 2A 3C            [ 1] 3670 	jrpl list_exit 
      001203 FE               [ 2] 3671 	ldw x,(x) ;line# 
      001204 13 01            [ 2] 3672 	cpw x,(FIRST,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001206 2A 11            [ 1] 3673 	jrpl list_start 
      001208 1E 05            [ 2] 3674 	ldw x,(LN_PTR,sp) 
      00120A E6 02            [ 1] 3675 	ld a,(2,x)
      00120C C7 00 0D         [ 1] 3676 	ld acc8,a 
      00120F 72 5F 00 0C      [ 1] 3677 	clr acc16 
      001213 72 BB 00 0C      [ 2] 3678 	addw x,acc16
      001217 20 E3            [ 2] 3679 	jra 2$ 
                                   3680 ; print loop
      001219                       3681 list_start:
      001219 1E 05            [ 2] 3682 	ldw x,(LN_PTR,sp)
      00121B E6 02            [ 1] 3683 3$:	ld a,(2,x) 
      00121D CD 12 9A         [ 4] 3684 	call prt_basic_line
      001220 1E 05            [ 2] 3685 	ldw x,(LN_PTR,sp)
      001222 E6 02            [ 1] 3686 	ld a,(2,x)
      001224 C7 00 0D         [ 1] 3687 	ld acc8,a 
      001227 72 5F 00 0C      [ 1] 3688 	clr acc16 
      00122B 72 BB 00 0C      [ 2] 3689 	addw x,acc16
      00122F C3 00 1F         [ 2] 3690 	cpw x,txtend 
      001232 2A 0B            [ 1] 3691 	jrpl list_exit
      001234 1F 05            [ 2] 3692 	ldw (LN_PTR,sp),x
      001236 FE               [ 2] 3693 	ldw x,(x)
      001237 13 03            [ 2] 3694 	cpw x,(LAST,sp)  
      001239 2C 04            [ 1] 3695 	jrsgt list_exit 
      00123B 1E 05            [ 2] 3696 	ldw x,(LN_PTR,sp)
      00123D 20 DC            [ 2] 3697 	jra 3$
      00123F                       3698 list_exit:
      00123F                       3699 	_drop VSIZE 
      00123F 5B 06            [ 2]    1     addw sp,#VSIZE 
      001241 81               [ 4] 3700 	ret
                                   3701 
                                   3702 ;-------------------------
                                   3703 ; print counted string 
                                   3704 ; input:
                                   3705 ;   X 	address of string
                                   3706 ;--------------------------
      001242                       3707 prt_cmd_name:
      001242 F6               [ 1] 3708 	ld a,(x)
      001243 5C               [ 2] 3709 	incw x
      001244 A4 0F            [ 1] 3710 	and a,#15  
      001246 88               [ 1] 3711 	push a 
      001247 0D 01            [ 1] 3712 1$: tnz (1,sp) 
      001249 27 09            [ 1] 3713 	jreq 9$
      00124B F6               [ 1] 3714 	ld a,(x)
      00124C CD 01 C4         [ 4] 3715 	call putc 
      00124F 5C               [ 2] 3716 	incw x
      001250 0A 01            [ 1] 3717 	dec (1,sp)	 
      001252 20 F3            [ 2] 3718 	jra 1$
      001254 84               [ 1] 3719 9$: pop a 
      001255 81               [ 4] 3720 	ret	
                                   3721 
                                   3722 ;--------------------------
                                   3723 ; print TK_QSTR
                                   3724 ; converting control character
                                   3725 ; to backslash sequence
                                   3726 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3727 ;   X        char *
                                   3728 ;-----------------------------
      001256                       3729 prt_quote:
      001256 A6 22            [ 1] 3730 	ld a,#'"
      001258 CD 01 C4         [ 4] 3731 	call putc 
      00125B F6               [ 1] 3732 1$:	ld a,(x)
      00125C 27 2D            [ 1] 3733 	jreq 9$
      00125E 5C               [ 2] 3734 	incw x 
      00125F A1 20            [ 1] 3735 	cp a,#SPACE 
      001261 25 0C            [ 1] 3736 	jrult 3$
      001263 CD 01 C4         [ 4] 3737 	call putc
      001266 A1 5C            [ 1] 3738 	cp a,#'\ 
      001268 26 F1            [ 1] 3739 	jrne 1$ 
      00126A                       3740 2$:
      00126A CD 01 C4         [ 4] 3741 	call putc 
      00126D 20 EC            [ 2] 3742 	jra 1$
      00126F 88               [ 1] 3743 3$: push a 
      001270 A6 5C            [ 1] 3744 	ld a,#'\
      001272 CD 01 C4         [ 4] 3745 	call putc 
      001275 84               [ 1] 3746 	pop a 
      001276 A0 07            [ 1] 3747 	sub a,#7
      001278 C7 00 0D         [ 1] 3748 	ld acc8,a 
      00127B 72 5F 00 0C      [ 1] 3749 	clr acc16
      00127F 90 AE 0B 37      [ 2] 3750 	ldw y,#escaped 
      001283 72 B9 00 0C      [ 2] 3751 	addw y,acc16 
      001287 90 F6            [ 1] 3752 	ld a,(y)
      001289 20 DF            [ 2] 3753 	jra 2$
      00128B A6 22            [ 1] 3754 9$: ld a,#'"
      00128D CD 01 C4         [ 4] 3755 	call putc 
      001290 5C               [ 2] 3756 	incw x 
      001291 81               [ 4] 3757 	ret
                                   3758 
                                   3759 ;--------------------------
                                   3760 ; return variable name 
                                   3761 ; from its address.
                                   3762 ; input:
                                   3763 ;   X    variable address
                                   3764 ; output:
                                   3765 ;   A     variable letter
                                   3766 ;--------------------------
      001292                       3767 var_name:
      001292 1D 00 27         [ 2] 3768 		subw x,#vars 
      001295 9F               [ 1] 3769 		ld a,xl 
      001296 44               [ 1] 3770 		srl a 
      001297 AB 41            [ 1] 3771 		add a,#'A 
      001299 81               [ 4] 3772 		ret 
                                   3773 
                                   3774 
                                   3775 ;--------------------------
                                   3776 ; decompile line from token list 
                                   3777 ; input:
                                   3778 ;   A       stop at this position 
                                   3779 ;   X 		pointer at line
                                   3780 ; output:
                                   3781 ;   none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3782 ;--------------------------	
                           000001  3783 	BASE_SAV=1
                           000002  3784 	WIDTH_SAV=2
                           000003  3785 	XSAVE=3
                           000005  3786 	LLEN=5
                           000005  3787 	VSIZE=5 
      00129A                       3788 prt_basic_line:
      00129A                       3789 	_vars VSIZE
      00129A 52 05            [ 2]    1     sub sp,#VSIZE 
      00129C 6B 05            [ 1] 3790 	ld (LLEN,sp),a  
      00129E C6 00 0A         [ 1] 3791 	ld a,base
      0012A1 6B 01            [ 1] 3792 	ld (BASE_SAV,sp),a  
      0012A3 C6 00 25         [ 1] 3793 	ld a,tab_width 
      0012A6 6B 02            [ 1] 3794 	ld (WIDTH_SAV,sp),a 
      0012A8 CF 00 18         [ 2] 3795 	ldw ptr16,x
      0012AB FE               [ 2] 3796 	ldw x,(x)
      0012AC 35 0A 00 0A      [ 1] 3797 	mov base,#10
      0012B0 35 05 00 25      [ 1] 3798 	mov tab_width,#5
      0012B4 CD 09 2D         [ 4] 3799 	call print_int ; print line number 
      0012B7 A6 20            [ 1] 3800 	ld a,#SPACE 
      0012B9 CD 01 C4         [ 4] 3801 	call putc 
      0012BC 72 5F 00 25      [ 1] 3802 	clr tab_width
      0012C0 AE 00 03         [ 2] 3803 	ldw x,#3
      0012C3 9F               [ 1] 3804 1$:	ld a,xl 
      0012C4 11 05            [ 1] 3805 	cp a,(LLEN,sp)
      0012C6 2B 03            [ 1] 3806 	jrmi 2$
      0012C8 CC 13 99         [ 2] 3807 	jp 20$
      0012CB                       3808 2$:	 
      0012CB 72 D6 00 18      [ 4] 3809 	ld a,([ptr16],x)
      0012CF 5C               [ 2] 3810 	incw x 
      0012D0 1F 03            [ 2] 3811 	ldw (XSAVE,sp),x 
      0012D2 72 DE 00 18      [ 5] 3812 	ldw x,([ptr16],x)
      0012D6 4D               [ 1] 3813 	tnz a 
      0012D7 2B 12            [ 1] 3814 	jrmi 3$
      0012D9 A1 05            [ 1] 3815 	cp a,#TK_VAR 
      0012DB 27 3E            [ 1] 3816 	jreq 4$
      0012DD A1 04            [ 1] 3817 	cp a,#TK_INTGR
      0012DF 27 42            [ 1] 3818 	jreq 5$
      0012E1 A1 02            [ 1] 3819 	cp a,#TK_QSTR 
      0012E3 27 43            [ 1] 3820 	jreq 6$
      0012E5 A1 03            [ 1] 3821 	cp a,#TK_CHAR 
      0012E7 27 4F            [ 1] 3822 	jreq 7$
      0012E9 20 5C            [ 2] 3823 	jra 8$
                                   3824 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST
      0012EB                       3825 3$:	
      0012EB A3 14 CD         [ 2] 3826 	cpw x,#remark 
      0012EE 26 14            [ 1] 3827 	jrne 30$
      0012F0 A6 27            [ 1] 3828 	ld a,#''
      0012F2 CD 01 C4         [ 4] 3829 	call putc 
      0012F5 1E 03            [ 2] 3830 	ldw x,(XSAVE,sp)
      0012F7 1C 00 02         [ 2] 3831 	addw x,#2
      0012FA 72 BB 00 18      [ 2] 3832 	addw x,ptr16  
      0012FE CD 01 D7         [ 4] 3833 	call puts 
      001301 CC 13 99         [ 2] 3834 	jp 20$ 
      001304                       3835 30$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001304 A6 20            [ 1] 3836 	ld a,#SPACE 
      001306 CD 01 C4         [ 4] 3837 	call putc 
      001309 CD 0F 06         [ 4] 3838 	call cmd_name
      00130C CD 12 42         [ 4] 3839 	call prt_cmd_name
      00130F A6 20            [ 1] 3840 	ld a,#SPACE 
      001311 CD 01 C4         [ 4] 3841 	call putc 
      001314                       3842 31$:
      001314 1E 03            [ 2] 3843 	ldw x,(XSAVE,sp)
      001316 1C 00 02         [ 2] 3844 	addw x,#2
      001319 20 A8            [ 2] 3845 	jra 1$
                                   3846 ;; TK_VAR 
      00131B                       3847 4$:
                                   3848 ;	ld a,#SPACE 
                                   3849 ;	call putc 
      00131B CD 12 92         [ 4] 3850 	call var_name
      00131E CD 01 C4         [ 4] 3851 	call putc 
      001321 20 F1            [ 2] 3852 	jra 31$
                                   3853 ;; TK_INTGR
      001323                       3854 5$:
                                   3855 ;	ld a,#SPACE 
                                   3856 ;	call putc
      001323 CD 09 2D         [ 4] 3857 	call print_int 
      001326 20 EC            [ 2] 3858 	jra 31$
                                   3859 ;; TK_QSTR
      001328                       3860 6$:
      001328 1E 03            [ 2] 3861 	ldw x,(XSAVE,sp)
      00132A 72 BB 00 18      [ 2] 3862 	addw x,ptr16 
      00132E CD 12 56         [ 4] 3863 	call prt_quote  
      001331 72 B0 00 18      [ 2] 3864 	subw x,ptr16  
      001335 CC 12 C3         [ 2] 3865 	jp 1$
                                   3866 ;; TK_CHAR 
      001338                       3867 7$:
      001338 A6 5C            [ 1] 3868 	ld a,#'\ 
      00133A CD 01 C4         [ 4] 3869 	call putc 
      00133D 9E               [ 1] 3870 	ld a,xh 
      00133E CD 01 C4         [ 4] 3871 	call putc 
      001341 1E 03            [ 2] 3872 	ldw x,(XSAVE,sp)
      001343 5C               [ 2] 3873 	incw x 
      001344 CC 12 C3         [ 2] 3874 	jp 1$ 
      001347 A1 01            [ 1] 3875 8$: cp a,#TK_COLON 
      001349 26 0A            [ 1] 3876 	jrne 9$
      00134B A6 3A            [ 1] 3877 	ld a,#':
      00134D                       3878 81$:
      00134D CD 01 C4         [ 4] 3879 	call putc
      001350                       3880 82$:
      001350 1E 03            [ 2] 3881 	ldw x,(XSAVE,sp)
      001352 CC 12 C3         [ 2] 3882 	jp 1$ 
      001355                       3883 9$: 
      001355 A1 0A            [ 1] 3884 	cp a,#TK_SHARP
      001357 22 0E            [ 1] 3885 	jrugt 10$ 
      001359 A0 06            [ 1] 3886 	sub a,#TK_ARRAY 
      00135B 90 5F            [ 1] 3887 	clrw y 
      00135D 90 97            [ 1] 3888 	ld yl,a
      00135F 72 A9 13 AB      [ 2] 3889 	addw y,#single_char 
      001363 90 F6            [ 1] 3890 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001365 20 E6            [ 2] 3891 	jra 81$ 
      001367                       3892 10$: 
      001367 A1 11            [ 1] 3893 	cp a,#TK_MINUS 
      001369 22 0E            [ 1] 3894 	jrugt 11$
      00136B A0 10            [ 1] 3895 	sub a,#TK_PLUS 
      00136D 90 5F            [ 1] 3896 	clrw y 
      00136F 90 97            [ 1] 3897 	ld yl,a 
      001371 72 A9 13 B0      [ 2] 3898 	addw y,#add_char 
      001375 90 F6            [ 1] 3899 	ld a,(y)
      001377 20 D4            [ 2] 3900 	jra 81$
      001379                       3901 11$:
      001379 A1 22            [ 1] 3902     cp a,#TK_MOD 
      00137B 22 0E            [ 1] 3903 	jrugt 12$
      00137D A0 20            [ 1] 3904 	sub a,#TK_MULT
      00137F 90 5F            [ 1] 3905 	clrw y 
      001381 90 97            [ 1] 3906 	ld yl,a 
      001383 72 A9 13 B2      [ 2] 3907 	addw y,#mul_char
      001387 90 F6            [ 1] 3908 	ld a,(y)
      001389 20 C2            [ 2] 3909 	jra 81$
      00138B                       3910 12$:
      00138B A0 31            [ 1] 3911 	sub a,#TK_GT  
      00138D 48               [ 1] 3912 	sll a 
      00138E 5F               [ 1] 3913 	clrw x 
      00138F 97               [ 1] 3914 	ld xl,a 
      001390 1C 13 B5         [ 2] 3915 	addw x,#relop_str 
      001393 FE               [ 2] 3916 	ldw x,(x)
      001394 CD 01 D7         [ 4] 3917 	call puts 
      001397 20 B7            [ 2] 3918 	jra 82$
      001399                       3919 20$: 
      001399 A6 0D            [ 1] 3920 	ld a,#CR 
      00139B CD 01 C4         [ 4] 3921 	call putc
      00139E 7B 02            [ 1] 3922 	ld a,(WIDTH_SAV,sp) 
      0013A0 C7 00 25         [ 1] 3923 	ld tab_width,a 
      0013A3 7B 01            [ 1] 3924 	ld a,(BASE_SAV,sp) 
      0013A5 C7 00 0A         [ 1] 3925 	ld base,a
      0013A8                       3926 	_drop VSIZE 
      0013A8 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013AA 81               [ 4] 3927 	ret 
                                   3928 
      0013AB 40 28 29 2C 23        3929 single_char: .byte '@','(',')',',','#'
      0013B0 2B 2D                 3930 add_char: .byte '+','-'
      0013B2 2A 2F 25              3931 mul_char: .byte '*','/','%'
      0013B5 13 C1 13 C3 13 C5 13  3932 relop_str: .word gt,equal,ge,lt,le,ne 
             C8 13 CA 13 CD
      0013C1 3E 00                 3933 gt: .asciz ">"
      0013C3 3D 00                 3934 equal: .asciz "="
      0013C5 3E 3D 00              3935 ge: .asciz ">="
      0013C8 3C 00                 3936 lt: .asciz "<"
      0013CA 3C 3D 00              3937 le: .asciz "<="
      0013CD 3C 3E 00              3938 ne:  .asciz "<>"
                                   3939 
                                   3940 
                                   3941 ;---------------------------------
                                   3942 ; BASIC: PRINT|? arg_list 
                                   3943 ; print values from argument list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3944 ;----------------------------------
                           000001  3945 	COMMA=1
                           000001  3946 	VSIZE=1
      0013D0                       3947 print:
      0013D0 4B 00            [ 1] 3948 push #0 ; local variable COMMA 
      0013D2                       3949 reset_comma:
      0013D2 0F 01            [ 1] 3950 	clr (COMMA,sp)
      0013D4                       3951 prt_loop:
      0013D4 CD 08 87         [ 4] 3952 	call next_token
      0013D7 A1 02            [ 1] 3953 	cp a,#CMD_END 
      0013D9 25 5A            [ 1] 3954 	jrult print_exit ; colon or end of line 
      0013DB A1 02            [ 1] 3955 	cp a,#TK_QSTR
      0013DD 27 12            [ 1] 3956 	jreq 1$
      0013DF A1 03            [ 1] 3957 	cp a,#TK_CHAR 
      0013E1 27 13            [ 1] 3958 	jreq 2$ 
      0013E3 A1 82            [ 1] 3959 	cp a,#TK_CFUNC 
      0013E5 27 15            [ 1] 3960 	jreq 3$
      0013E7 A1 09            [ 1] 3961 	cp a,#TK_COMMA 
      0013E9 27 18            [ 1] 3962 	jreq 4$
      0013EB A1 0A            [ 1] 3963 	cp a,#TK_SHARP 
      0013ED 27 1B            [ 1] 3964 	jreq 5$
      0013EF 20 2B            [ 2] 3965 	jra 7$ 
      0013F1                       3966 1$:	; print string 
      0013F1 CD 01 D7         [ 4] 3967 	call puts
      0013F4 20 DC            [ 2] 3968 	jra reset_comma
      0013F6                       3969 2$:	; print character 
      0013F6 9F               [ 1] 3970 	ld a,xl 
      0013F7 CD 01 C4         [ 4] 3971 	call putc 
      0013FA 20 D6            [ 2] 3972 	jra reset_comma 
      0013FC                       3973 3$: ; print character function value  	
      0013FC FD               [ 4] 3974 	call (x)
      0013FD 9F               [ 1] 3975 	ld a,xl 
      0013FE CD 01 C4         [ 4] 3976 	call putc
      001401 20 CF            [ 2] 3977 	jra reset_comma 
      001403                       3978 4$: ; set comma state 
      001403 A6 FF            [ 1] 3979 	ld a,#255 
      001405 6B 01            [ 1] 3980 	ld (COMMA,sp),a  
      001407 CC 13 D4         [ 2] 3981 	jp prt_loop   
      00140A                       3982 5$: ; # character must be followed by an integer   
      00140A CD 08 87         [ 4] 3983 	call next_token
      00140D A1 04            [ 1] 3984 	cp a,#TK_INTGR 
      00140F 27 03            [ 1] 3985 	jreq 6$
      001411 CC 07 95         [ 2] 3986 	jp syntax_error 
      001414                       3987 6$: ; set tab width
      001414 9F               [ 1] 3988 	ld a,xl 
      001415 A4 0F            [ 1] 3989 	and a,#15 
      001417 C7 00 25         [ 1] 3990 	ld tab_width,a 
      00141A 20 B6            [ 2] 3991 	jra reset_comma 
      00141C                       3992 7$:	
      00141C                       3993 	_unget_token
      00141C 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001421 CD 10 D4         [ 4] 3994 	call relation 
      001424 A1 04            [ 1] 3995 	cp a,#TK_INTGR
      001426 27 08            [ 1] 3996 	jreq 8$
      001428                       3997 	_unget_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001428 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00142D CC 14 35         [ 2] 3998 	jp print_exit 
      001430 CD 09 2D         [ 4] 3999 8$: call print_int 
      001433 20 9D            [ 2] 4000 	jra reset_comma 
      001435                       4001 print_exit:
      001435 0D 01            [ 1] 4002 	tnz (COMMA,sp)
      001437 26 05            [ 1] 4003 	jrne 9$
      001439 A6 0D            [ 1] 4004 	ld a,#CR 
      00143B CD 01 C4         [ 4] 4005     call putc 
      00143E                       4006 9$:	_drop VSIZE 
      00143E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001440 81               [ 4] 4007 	ret 
                                   4008 
      001441                       4009 print_type: 
                                   4010 
                                   4011 ;----------------------
                                   4012 ; 'save_context' and
                                   4013 ; 'rest_context' must be 
                                   4014 ; called at the same 
                                   4015 ; call stack depth 
                                   4016 ; i.e. SP must have the 
                                   4017 ; save value at  
                                   4018 ; entry point of both 
                                   4019 ; routine. 
                                   4020 ;---------------------
                           000004  4021 	CTXT_SIZE=4 ; size of saved data 
                                   4022 ;--------------------
                                   4023 ; save current BASIC
                                   4024 ; interpreter context 
                                   4025 ; on stack 
                                   4026 ;--------------------
      001441                       4027 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001441                       4028 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001441                       4029 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001441                       4030 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001441                       4031 save_context:
      001441 CE 00 04         [ 2] 4032 	ldw x,basicptr 
      001444 1F 03            [ 2] 4033 	ldw (BPTR,sp),x
      001446 C6 00 01         [ 1] 4034 	ld a,in 
      001449 6B 05            [ 1] 4035 	ld (IN,sp),a
      00144B C6 00 03         [ 1] 4036 	ld a,count 
      00144E 6B 06            [ 1] 4037 	ld (CNT,sp),a  
      001450 81               [ 4] 4038 	ret
                                   4039 
                                   4040 ;-----------------------
                                   4041 ; restore previously saved 
                                   4042 ; BASIC interpreter context 
                                   4043 ; from stack 
                                   4044 ;-------------------------
      001451                       4045 rest_context:
      001451 1E 03            [ 2] 4046 	ldw x,(BPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001453 CF 00 04         [ 2] 4047 	ldw basicptr,x 
      001456 7B 05            [ 1] 4048 	ld a,(IN,sp)
      001458 C7 00 01         [ 1] 4049 	ld in,a
      00145B 7B 06            [ 1] 4050 	ld a,(CNT,sp)
      00145D C7 00 03         [ 1] 4051 	ld count,a  
      001460 81               [ 4] 4052 	ret
                                   4053 
                                   4054 
                                   4055 
                                   4056 ;------------------------------------------
                                   4057 ; BASIC: INPUT [string]var[,[string]var]
                                   4058 ; input value in variables 
                                   4059 ; [string] optionally can be used as prompt 
                                   4060 ;-----------------------------------------
                           000001  4061 	CX_BPTR=1
                           000003  4062 	CX_IN=3
                           000004  4063 	CX_CNT=4
                           000005  4064 	SKIP=5
                           000006  4065 	VAR_ADDR=6
                           000007  4066 	VSIZE=7
      001461                       4067 input_var:
      001461                       4068 	_vars VSIZE 
      001461 52 07            [ 2]    1     sub sp,#VSIZE 
      001463                       4069 input_loop:
      001463 0F 05            [ 1] 4070 	clr (SKIP,sp)
      001465 CD 08 87         [ 4] 4071 	call next_token 
      001468 A1 02            [ 1] 4072 	cp a,#TK_QSTR 
      00146A 26 08            [ 1] 4073 	jrne 1$ 
      00146C CD 01 D7         [ 4] 4074 	call puts 
      00146F 03 05            [ 1] 4075 	cpl (SKIP,sp)
      001471 CD 08 87         [ 4] 4076 	call next_token 
      001474 A1 05            [ 1] 4077 1$: cp a,#TK_VAR  
      001476 27 03            [ 1] 4078 	jreq 2$ 
      001478 CC 07 95         [ 2] 4079 	jp syntax_error
      00147B 1F 06            [ 2] 4080 2$:	ldw (VAR_ADDR,sp),x 
      00147D 0D 05            [ 1] 4081 	tnz (SKIP,sp)
      00147F 26 06            [ 1] 4082 	jrne 21$ 
      001481 CD 12 92         [ 4] 4083 	call var_name 
      001484 CD 01 C4         [ 4] 4084 	call putc   
      001487                       4085 21$:
      001487 A6 3A            [ 1] 4086 	ld a,#':
      001489 CD 01 C4         [ 4] 4087 	call putc 
      00148C CD 14 41         [ 4] 4088 	call save_context 
      00148F 72 5F 00 03      [ 1] 4089 	clr count  
      001493 CD 0A 5E         [ 4] 4090 	call readln 
      001496 AE 16 90         [ 2] 4091 	ldw x,#tib 
      001499 3B 00 03         [ 1] 4092 	push count
      00149C 4B 00            [ 1] 4093 	push #0 
      00149E 72 FB 01         [ 2] 4094 	addw x,(1,sp)
      0014A1 5C               [ 2] 4095 	incw x 
      0014A2                       4096 	_drop 2 
      0014A2 5B 02            [ 2]    1     addw sp,#2 
      0014A4 72 5F 00 01      [ 1] 4097 	clr in 
      0014A8 CD 0C 13         [ 4] 4098 	call get_token
      0014AB A1 04            [ 1] 4099 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0014AD 27 06            [ 1] 4100 	jreq 3$ 
      0014AF CD 14 51         [ 4] 4101 	call rest_context 
      0014B2 CC 07 95         [ 2] 4102 	jp syntax_error
      0014B5 16 06            [ 2] 4103 3$: ldw y,(VAR_ADDR,sp) 
      0014B7 90 FF            [ 2] 4104 	ldw (y),x 
      0014B9 CD 14 51         [ 4] 4105 	call rest_context
      0014BC CD 08 87         [ 4] 4106 	call next_token 
      0014BF A1 09            [ 1] 4107 	cp a,#TK_COMMA 
      0014C1 27 A0            [ 1] 4108 	jreq input_loop 
      0014C3 A1 01            [ 1] 4109 	cp a,#TK_COLON 
      0014C5 23 03            [ 2] 4110     jrule input_exit 
      0014C7 CC 07 95         [ 2] 4111 	jp syntax_error 
      0014CA                       4112 input_exit:
      0014CA                       4113 	_drop VSIZE 
      0014CA 5B 07            [ 2]    1     addw sp,#VSIZE 
      0014CC 81               [ 4] 4114 	ret 
                                   4115 
                                   4116 
                                   4117 ;---------------------
                                   4118 ; BASIC: REMARK | ' 
                                   4119 ; skip comment to end of line 
                                   4120 ;---------------------- 
      0014CD                       4121 remark:
      0014CD 55 00 03 00 01   [ 1] 4122 	mov in,count 
      0014D2 81               [ 4] 4123  	ret 
                                   4124 
                                   4125 
                                   4126 ;---------------------
                                   4127 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4128 ; read in loop 'addr'  
                                   4129 ; apply & 'mask' to value 
                                   4130 ; loop while result==0.  
                                   4131 ; 'xor_mask' is used to 
                                   4132 ; invert the wait logic.
                                   4133 ; i.e. loop while not 0.
                                   4134 ;---------------------
                           000001  4135 	XMASK=1 
                           000002  4136 	MASK=2
                           000003  4137 	ADDR=3
                           000004  4138 	VSIZE=4
      0014D3                       4139 wait: 
      0014D3                       4140 	_vars VSIZE
      0014D3 52 04            [ 2]    1     sub sp,#VSIZE 
      0014D5 0F 01            [ 1] 4141 	clr (XMASK,sp) 
      0014D7 CD 0F 97         [ 4] 4142 	call arg_list 
      0014DA A1 02            [ 1] 4143 	cp a,#2
      0014DC 24 03            [ 1] 4144 	jruge 0$
      0014DE CC 07 95         [ 2] 4145 	jp syntax_error 
      0014E1 A1 03            [ 1] 4146 0$:	cp a,#3
      0014E3 25 04            [ 1] 4147 	jrult 1$
      0014E5 85               [ 2] 4148 	popw x 
      0014E6 9F               [ 1] 4149 	ld a,xl
      0014E7 6B 01            [ 1] 4150 	ld (XMASK,sp),a 
      0014E9 85               [ 2] 4151 1$: popw x ; mask 
      0014EA 9F               [ 1] 4152 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0014EB 6B 02            [ 1] 4153 	ld (MASK,sp),a 
      0014ED 85               [ 2] 4154 	popw x ; address 
      0014EE F6               [ 1] 4155 2$:	ld a,(x)
      0014EF 14 02            [ 1] 4156 	and a,(MASK,sp)
      0014F1 18 01            [ 1] 4157 	xor a,(XMASK,sp)
      0014F3 27 F9            [ 1] 4158 	jreq 2$ 
      0014F5                       4159 	_drop VSIZE 
      0014F5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014F7 81               [ 4] 4160 	ret 
                                   4161 
                                   4162 ;---------------------
                                   4163 ; BASIC: BSET addr,mask
                                   4164 ; set bits at 'addr' corresponding 
                                   4165 ; to those of 'mask' that are at 1.
                                   4166 ; arguments:
                                   4167 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4168 ;   mask        mask|addr
                                   4169 ; output:
                                   4170 ;	none 
                                   4171 ;--------------------------
      0014F8                       4172 bit_set:
      0014F8 CD 0F 97         [ 4] 4173 	call arg_list 
      0014FB A1 02            [ 1] 4174 	cp a,#2	 
      0014FD 27 03            [ 1] 4175 	jreq 1$ 
      0014FF CC 07 95         [ 2] 4176 	jp syntax_error
      001502                       4177 1$: 
      001502 85               [ 2] 4178 	popw x ; mask 
      001503 9F               [ 1] 4179 	ld a,xl 
      001504 85               [ 2] 4180 	popw x ; addr  
      001505 FA               [ 1] 4181 	or a,(x)
      001506 F7               [ 1] 4182 	ld (x),a
      001507 81               [ 4] 4183 	ret 
                                   4184 
                                   4185 ;---------------------
                                   4186 ; BASIC: BRES addr,mask
                                   4187 ; reset bits at 'addr' corresponding 
                                   4188 ; to those of 'mask' that are at 1.
                                   4189 ; arguments:
                                   4190 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4191 ;   mask	    ~mask&*addr  
                                   4192 ; output:
                                   4193 ;	none 
                                   4194 ;--------------------------
      001508                       4195 bit_reset:
      001508 CD 0F 97         [ 4] 4196 	call arg_list 
      00150B A1 02            [ 1] 4197 	cp a,#2  
      00150D 27 03            [ 1] 4198 	jreq 1$ 
      00150F CC 07 95         [ 2] 4199 	jp syntax_error
      001512                       4200 1$: 
      001512 85               [ 2] 4201 	popw x ; mask 
      001513 9F               [ 1] 4202 	ld a,xl 
      001514 43               [ 1] 4203 	cpl a 
      001515 85               [ 2] 4204 	popw x ; addr  
      001516 F4               [ 1] 4205 	and a,(x)
      001517 F7               [ 1] 4206 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001518 81               [ 4] 4207 	ret 
                                   4208 
                                   4209 ;---------------------
                                   4210 ; BASIC: BTOGL addr,mask
                                   4211 ; toggle bits at 'addr' corresponding 
                                   4212 ; to those of 'mask' that are at 1.
                                   4213 ; arguments:
                                   4214 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4215 ;   mask	    mask^*addr  
                                   4216 ; output:
                                   4217 ;	none 
                                   4218 ;--------------------------
      001519                       4219 bit_toggle:
      001519 CD 0F 97         [ 4] 4220 	call arg_list 
      00151C A1 02            [ 1] 4221 	cp a,#2 
      00151E 27 03            [ 1] 4222 	jreq 1$ 
      001520 CC 07 95         [ 2] 4223 	jp syntax_error
      001523 85               [ 2] 4224 1$: popw x ; mask 
      001524 9F               [ 1] 4225 	ld a,xl 
      001525 85               [ 2] 4226 	popw x ; addr  
      001526 F8               [ 1] 4227 	xor a,(x)
      001527 F7               [ 1] 4228 	ld (x),a 
      001528 81               [ 4] 4229 	ret 
                                   4230 
                                   4231 
                                   4232 ;---------------------
                                   4233 ; BASIC: BTEST(addr,bit)
                                   4234 ; return bit value at 'addr' 
                                   4235 ; bit is in range {0..7}.
                                   4236 ; arguments:
                                   4237 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4238 ;   bit 	    bit position {0..7}  
                                   4239 ; output:
                                   4240 ;	none 
                                   4241 ;--------------------------
      001529                       4242 bit_test:
      001529 CD 0F 92         [ 4] 4243 	call func_args 
      00152C A1 02            [ 1] 4244 	cp a,#2
      00152E 27 03            [ 1] 4245 	jreq 0$
      001530 CC 07 95         [ 2] 4246 	jp syntax_error
      001533                       4247 0$:	
      001533 85               [ 2] 4248 	popw x 
      001534 9F               [ 1] 4249 	ld a,xl 
      001535 A4 07            [ 1] 4250 	and a,#7
      001537 88               [ 1] 4251 	push a   
      001538 A6 01            [ 1] 4252 	ld a,#1 
      00153A 0D 01            [ 1] 4253 1$: tnz (1,sp)
      00153C 27 05            [ 1] 4254 	jreq 2$
      00153E 48               [ 1] 4255 	sll a 
      00153F 0A 01            [ 1] 4256 	dec (1,sp)
      001541 20 F7            [ 2] 4257 	jra 1$
      001543                       4258 2$: _drop 1 
      001543 5B 01            [ 2]    1     addw sp,#1 
      001545 85               [ 2] 4259 	popw x 
      001546 F4               [ 1] 4260 	and a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001547 27 02            [ 1] 4261 	jreq 3$
      001549 A6 01            [ 1] 4262 	ld a,#1 
      00154B 5F               [ 1] 4263 3$:	clrw x 
      00154C 97               [ 1] 4264 	ld xl,a 
      00154D A6 04            [ 1] 4265 	ld a,#TK_INTGR
      00154F 81               [ 4] 4266 	ret
                                   4267 
                                   4268 
                                   4269 ;--------------------
                                   4270 ; BASIC: POKE addr,byte
                                   4271 ; put a byte at addr 
                                   4272 ;--------------------
      001550                       4273 poke:
      001550 CD 0F 97         [ 4] 4274 	call arg_list 
      001553 A1 02            [ 1] 4275 	cp a,#2
      001555 27 03            [ 1] 4276 	jreq 1$
      001557 CC 07 95         [ 2] 4277 	jp syntax_error
      00155A                       4278 1$:	
      00155A 85               [ 2] 4279 	popw x  
      00155B 9F               [ 1] 4280     ld a,xl 
      00155C 85               [ 2] 4281 	popw x 
      00155D F7               [ 1] 4282 	ld (x),a 
      00155E 81               [ 4] 4283 	ret 
                                   4284 
                                   4285 ;-----------------------
                                   4286 ; BASIC: PEEK(addr)
                                   4287 ; get the byte at addr 
                                   4288 ; input:
                                   4289 ;	none 
                                   4290 ; output:
                                   4291 ;	X 		value 
                                   4292 ;-----------------------
      00155F                       4293 peek:
      00155F CD 0F 92         [ 4] 4294 	call func_args
      001562 A1 01            [ 1] 4295 	cp a,#1
      001564 27 03            [ 1] 4296 	jreq 1$
      001566 CC 07 95         [ 2] 4297 	jp syntax_error
      001569 85               [ 2] 4298 1$:	popw x 
      00156A F6               [ 1] 4299 	ld a,(x)
      00156B 5F               [ 1] 4300 	clrw x 
      00156C 97               [ 1] 4301 	ld xl,a 
      00156D A6 04            [ 1] 4302 	ld a,#TK_INTGR
      00156F 81               [ 4] 4303 	ret 
                                   4304 
                                   4305 ;----------------------------
                                   4306 ; BASIC: XPEEK(page,addr)
                                   4307 ; read extended memory byte
                                   4308 ; page in range {0,1,2}
                                   4309 ;----------------------------
      001570                       4310 xpeek:
      001570 CD 0F 92         [ 4] 4311 	call func_args 
      001573 A1 02            [ 1] 4312 	cp a,#2 
      001575 27 03            [ 1] 4313 	jreq 1$
      001577 CC 07 95         [ 2] 4314 	jp syntax_error
      00157A                       4315 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00157A 85               [ 2] 4316 	popw x  
      00157B CF 00 18         [ 2] 4317 	ldw farptr+1,x 
      00157E 85               [ 2] 4318 	popw x 
      00157F 9F               [ 1] 4319 	ld a,xl 
      001580 C7 00 17         [ 1] 4320 	ld farptr,a 
      001583 5F               [ 1] 4321 	clrw x
      001584 92 BC 00 17      [ 5] 4322 	ldf a,[farptr]
      001588 97               [ 1] 4323 	ld xl,a 
      001589 A6 04            [ 1] 4324 	ld a,#TK_INTGR 
      00158B 81               [ 4] 4325 	ret 
                                   4326 
                                   4327 ;---------------------------
                                   4328 ; BASIC IF expr : instructions
                                   4329 ; evaluate expr and if true 
                                   4330 ; execute instructions on same line. 
                                   4331 ;----------------------------
      00158C                       4332 if: 
      00158C CD 10 D4         [ 4] 4333 	call relation 
      00158F A1 04            [ 1] 4334 	cp a,#TK_INTGR
      001591 27 03            [ 1] 4335 	jreq 1$ 
      001593 CC 07 95         [ 2] 4336 	jp syntax_error
      001596 4F               [ 1] 4337 1$:	clr a 
      001597 5D               [ 2] 4338 	tnzw x 
      001598 26 05            [ 1] 4339 	jrne 9$  
                                   4340 ;skip to next line
      00159A 55 00 03 00 01   [ 1] 4341 	mov in,count
      00159F 81               [ 4] 4342 9$:	ret 
                                   4343 
                                   4344 ;------------------------
                                   4345 ; BASIC: FOR var=expr 
                                   4346 ; set variable to expression 
                                   4347 ; leave variable address 
                                   4348 ; on stack and set
                                   4349 ; FLOOP bit in 'flags'
                                   4350 ;-----------------
                           000001  4351 	RETL1=1 ; return address  
                           000003  4352 	FSTEP=3  ; variable increment
                           000005  4353 	LIMIT=5 ; loop limit 
                           000007  4354 	CVAR=7   ; control variable 
                           000009  4355 	INW=9   ;  in.w saved
                           00000B  4356 	BPTR=11 ; baseptr saved
                           00000A  4357 	VSIZE=10  
      0015A0                       4358 for: ; { -- var_addr }
      0015A0 85               [ 2] 4359 	popw x ; call return address 
      0015A1                       4360 	_vars VSIZE 
      0015A1 52 0A            [ 2]    1     sub sp,#VSIZE 
      0015A3 89               [ 2] 4361 	pushw x  ; RETL1 
      0015A4 A6 05            [ 1] 4362 	ld a,#TK_VAR 
      0015A6 CD 0F 85         [ 4] 4363 	call expect
      0015A9 1F 07            [ 2] 4364 	ldw (CVAR,sp),x  ; control variable 
      0015AB CD 11 B3         [ 4] 4365 	call let_var 
      0015AE 72 14 00 24      [ 1] 4366 	bset flags,#FLOOP 
                                   4367 ; open space on stack for loop data 
      0015B2 5F               [ 1] 4368 	clrw x 
      0015B3 1F 0B            [ 2] 4369 	ldw (BPTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0015B5 1F 09            [ 2] 4370 	ldw (INW,sp),x 
      0015B7 CD 08 87         [ 4] 4371 	call next_token 
      0015BA A1 80            [ 1] 4372 	cp a,#TK_CMD 
      0015BC 27 03            [ 1] 4373 	jreq 1$
      0015BE CC 07 95         [ 2] 4374 	jp syntax_error
      0015C1                       4375 1$:  
      0015C1 A3 15 C9         [ 2] 4376 	cpw x,#to 
      0015C4 27 03            [ 1] 4377 	jreq to
      0015C6 CC 07 95         [ 2] 4378 	jp syntax_error 
                                   4379 
                                   4380 ;-----------------------------------
                                   4381 ; BASIC: TO expr 
                                   4382 ; second part of FOR loop initilization
                                   4383 ; leave limit on stack and set 
                                   4384 ; FTO bit in 'flags'
                                   4385 ;-----------------------------------
      0015C9                       4386 to: ; { var_addr -- var_addr limit step }
      0015C9 72 04 00 24 03   [ 2] 4387 	btjt flags,#FLOOP,1$
      0015CE CC 07 95         [ 2] 4388 	jp syntax_error
      0015D1 CD 10 D4         [ 4] 4389 1$: call relation  
      0015D4 A1 04            [ 1] 4390 	cp a,#TK_INTGR 
      0015D6 27 03            [ 1] 4391 	jreq 2$ 
      0015D8 CC 07 95         [ 2] 4392 	jp syntax_error
      0015DB 1F 05            [ 2] 4393 2$: ldw (LIMIT,sp),x
                                   4394 ;	ldw x,in.w 
      0015DD CD 08 87         [ 4] 4395 	call next_token
      0015E0 A1 00            [ 1] 4396 	cp a,#TK_NONE  
      0015E2 27 0E            [ 1] 4397 	jreq 4$ 
      0015E4 A1 80            [ 1] 4398 	cp a,#TK_CMD
      0015E6 26 05            [ 1] 4399 	jrne 3$
      0015E8 A3 15 F9         [ 2] 4400 	cpw x,#step 
      0015EB 27 0C            [ 1] 4401 	jreq step
      0015ED                       4402 3$:	
      0015ED                       4403 	_unget_token   	 
      0015ED 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0015F2                       4404 4$:	
      0015F2 AE 00 01         [ 2] 4405 	ldw x,#1   ; default step  
      0015F5 1F 03            [ 2] 4406 	ldw (FSTEP,sp),x 
      0015F7 20 14            [ 2] 4407 	jra store_loop_addr 
                                   4408 
                                   4409 
                                   4410 ;----------------------------------
                                   4411 ; BASIC: STEP expr 
                                   4412 ; optional third par of FOR loop
                                   4413 ; initialization. 	
                                   4414 ;------------------------------------
      0015F9                       4415 step: ; {var limit -- var limit step}
      0015F9 72 04 00 24 03   [ 2] 4416 	btjt flags,#FLOOP,1$
      0015FE CC 07 95         [ 2] 4417 	jp syntax_error
      001601 CD 10 D4         [ 4] 4418 1$: call relation
      001604 A1 04            [ 1] 4419 	cp a,#TK_INTGR
      001606 27 03            [ 1] 4420 	jreq 2$
      001608 CC 07 95         [ 2] 4421 	jp syntax_error
      00160B 1F 03            [ 2] 4422 2$:	ldw (FSTEP,sp),x ; step
                                   4423 ; leave loop back entry point on cstack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4424 ; cstack is 1 call deep from interpreter
      00160D                       4425 store_loop_addr:
      00160D CE 00 04         [ 2] 4426 	ldw x,basicptr  
      001610 1F 0B            [ 2] 4427 	ldw (BPTR,sp),x 
      001612 CE 00 00         [ 2] 4428 	ldw x,in.w 
      001615 1F 09            [ 2] 4429 	ldw (INW,sp),x   
      001617 72 15 00 24      [ 1] 4430 	bres flags,#FLOOP 
      00161B 72 5C 00 21      [ 1] 4431 	inc loop_depth  
      00161F 81               [ 4] 4432 	ret 
                                   4433 
                                   4434 ;--------------------------------
                                   4435 ; BASIC: NEXT var 
                                   4436 ; FOR loop control 
                                   4437 ; increment variable with step 
                                   4438 ; and compare with limit 
                                   4439 ; loop if threshold not crossed.
                                   4440 ; else stack. 
                                   4441 ; and decrement 'loop_depth' 
                                   4442 ;--------------------------------
      001620                       4443 next: ; {var limit step retl1 -- [var limit step ] }
      001620 72 5D 00 21      [ 1] 4444 	tnz loop_depth 
      001624 26 03            [ 1] 4445 	jrne 1$ 
      001626 CC 07 95         [ 2] 4446 	jp syntax_error 
      001629                       4447 1$: 
      001629 A6 05            [ 1] 4448 	ld a,#TK_VAR 
      00162B CD 0F 85         [ 4] 4449 	call expect
                                   4450 ; check for good variable after NEXT 	 
      00162E 13 07            [ 2] 4451 	cpw x,(CVAR,sp)
      001630 27 03            [ 1] 4452 	jreq 2$  
      001632 CC 07 95         [ 2] 4453 	jp syntax_error ; not the good one 
      001635                       4454 2$: ; increment variable 
      001635 FE               [ 2] 4455 	ldw x,(x)  ; get var value 
      001636 72 FB 03         [ 2] 4456 	addw x,(FSTEP,sp) ; var+step 
      001639 16 07            [ 2] 4457 	ldw y,(CVAR,sp)
      00163B 90 FF            [ 2] 4458 	ldw (y),x ; save var new value 
                                   4459 ; check sign of STEP  
      00163D A6 80            [ 1] 4460 	ld a,#0x80
      00163F 15 03            [ 1] 4461 	bcp a,(FSTEP,sp)
      001641 2A 06            [ 1] 4462 	jrpl 4$
                                   4463 ;negative step 
      001643 13 05            [ 2] 4464 	cpw x,(LIMIT,sp)
      001645 2F 1B            [ 1] 4465 	jrslt loop_done
      001647 20 04            [ 2] 4466 	jra loop_back 
      001649                       4467 4$: ; positive step
      001649 13 05            [ 2] 4468 	cpw x,(LIMIT,sp)
      00164B 2C 15            [ 1] 4469 	jrsgt loop_done
      00164D                       4470 loop_back:
      00164D 1E 0B            [ 2] 4471 	ldw x,(BPTR,sp)
      00164F CF 00 04         [ 2] 4472 	ldw basicptr,x 
      001652 72 01 00 24 05   [ 2] 4473 	btjf flags,#FRUN,1$ 
      001657 E6 02            [ 1] 4474 	ld a,(2,x)
      001659 C7 00 03         [ 1] 4475 	ld count,a
      00165C 1E 09            [ 2] 4476 1$:	ldw x,(INW,sp)
      00165E CF 00 00         [ 2] 4477 	ldw in.w,x 
      001661 81               [ 4] 4478 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001662                       4479 loop_done:
                                   4480 	; remove loop data from stack  
      001662 85               [ 2] 4481 	popw x
      001663                       4482 	_drop VSIZE 
      001663 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001665 72 5A 00 21      [ 1] 4483 	dec loop_depth 
                                   4484 ;	pushw x 
                                   4485 ;	ret 
      001669 FC               [ 2] 4486 	jp (x)
                                   4487 
                                   4488 ;----------------------------
                                   4489 ; called by goto/gosub
                                   4490 ; to get target line number 
                                   4491 ;---------------------------
      00166A                       4492 get_target_line:
      00166A CD 10 D4         [ 4] 4493 	call relation 
      00166D A1 04            [ 1] 4494 	cp a,#TK_INTGR
      00166F 27 03            [ 1] 4495 	jreq 1$
      001671 CC 07 95         [ 2] 4496 	jp syntax_error
      001674 CD 03 24         [ 4] 4497 1$:	call search_lineno  
      001677 5D               [ 2] 4498 	tnzw x 
      001678 26 05            [ 1] 4499 	jrne 2$ 
      00167A A6 05            [ 1] 4500 	ld a,#ERR_NO_LINE 
      00167C CC 07 97         [ 2] 4501 	jp tb_error 
      00167F 81               [ 4] 4502 2$:	ret 
                                   4503 
                                   4504 ;------------------------
                                   4505 ; BASIC: GOTO line# 
                                   4506 ; jump to line# 
                                   4507 ; here cstack is 2 call deep from interpreter 
                                   4508 ;------------------------
      001680                       4509 goto:
      001680 72 00 00 24 06   [ 2] 4510 	btjt flags,#FRUN,0$ 
      001685 A6 06            [ 1] 4511 	ld a,#ERR_RUN_ONLY
      001687 CC 07 97         [ 2] 4512 	jp tb_error 
      00168A 81               [ 4] 4513 	ret 
      00168B CD 16 6A         [ 4] 4514 0$:	call get_target_line
      00168E                       4515 jp_to_target:
      00168E CF 00 04         [ 2] 4516 	ldw basicptr,x 
      001691 E6 02            [ 1] 4517 	ld a,(2,x)
      001693 C7 00 03         [ 1] 4518 	ld count,a 
      001696 35 03 00 01      [ 1] 4519 	mov in,#3 
      00169A 81               [ 4] 4520 	ret 
                                   4521 
                                   4522 
                                   4523 ;--------------------
                                   4524 ; BASIC: GOSUB line#
                                   4525 ; basic subroutine call
                                   4526 ; actual line# and basicptr 
                                   4527 ; are saved on cstack
                                   4528 ; here cstack is 2 call deep from interpreter 
                                   4529 ;--------------------
                           000003  4530 	RET_ADDR=3
                           000005  4531 	RET_INW=5
                           000004  4532 	VSIZE=4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      00169B                       4533 gosub:
      00169B 72 00 00 24 06   [ 2] 4534 	btjt flags,#FRUN,0$ 
      0016A0 A6 06            [ 1] 4535 	ld a,#ERR_RUN_ONLY
      0016A2 CC 07 97         [ 2] 4536 	jp tb_error 
      0016A5 81               [ 4] 4537 	ret 
      0016A6 85               [ 2] 4538 0$:	popw x 
      0016A7                       4539 	_vars VSIZE  
      0016A7 52 04            [ 2]    1     sub sp,#VSIZE 
      0016A9 89               [ 2] 4540 	pushw x 
      0016AA CE 00 04         [ 2] 4541 	ldw x,basicptr
      0016AD 1F 03            [ 2] 4542 	ldw (RET_ADDR,sp),x 
      0016AF CD 16 6A         [ 4] 4543 	call get_target_line  
      0016B2 89               [ 2] 4544 	pushw x 
      0016B3 CE 00 00         [ 2] 4545 	ldw x,in.w 
      0016B6 1F 07            [ 2] 4546 	ldw (RET_INW+2,sp),x
      0016B8 85               [ 2] 4547 	popw x 
      0016B9 20 D3            [ 2] 4548 	jra jp_to_target
                                   4549 
                                   4550 ;------------------------
                                   4551 ; BASIC: RETURN 
                                   4552 ; exit from a subroutine 
                                   4553 ; 
                                   4554 ;------------------------
      0016BB                       4555 return:
      0016BB 72 00 00 24 05   [ 2] 4556 	btjt flags,#FRUN,0$ 
      0016C0 A6 06            [ 1] 4557 	ld a,#ERR_RUN_ONLY
      0016C2 CC 07 97         [ 2] 4558 	jp tb_error 
      0016C5                       4559 0$:	
      0016C5 1E 03            [ 2] 4560 	ldw x,(RET_ADDR,sp) 
      0016C7 CF 00 04         [ 2] 4561 	ldw basicptr,x
      0016CA E6 02            [ 1] 4562 	ld a,(2,x)
      0016CC C7 00 03         [ 1] 4563 	ld count,a  
      0016CF 1E 05            [ 2] 4564 	ldw x,(RET_INW,sp)
      0016D1 CF 00 00         [ 2] 4565 	ldw in.w,x 
      0016D4 85               [ 2] 4566 	popw x 
      0016D5                       4567 	_drop VSIZE 
      0016D5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016D7 89               [ 2] 4568 	pushw x
      0016D8 81               [ 4] 4569 	ret  
                                   4570 
                                   4571 
                                   4572 ;----------------------------------
                                   4573 ; BASIC: RUN
                                   4574 ; run BASIC program in RAM
                                   4575 ;----------------------------------- 
      0016D9                       4576 run: 
      0016D9 72 01 00 24 02   [ 2] 4577 	btjf flags,#FRUN,0$  
      0016DE 4F               [ 1] 4578 	clr a 
      0016DF 81               [ 4] 4579 	ret
      0016E0                       4580 0$: 
      0016E0 72 09 00 24 12   [ 2] 4581 	btjf flags,#FBREAK,1$
      0016E5                       4582 	_drop 2 
      0016E5 5B 02            [ 2]    1     addw sp,#2 
      0016E7 CD 14 51         [ 4] 4583 	call rest_context
      0016EA                       4584 	_drop CTXT_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0016EA 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0016EC 72 19 00 24      [ 1] 4585 	bres flags,#FBREAK 
      0016F0 72 10 00 24      [ 1] 4586 	bset flags,#FRUN 
      0016F4 CC 08 3B         [ 2] 4587 	jp interpreter 
      0016F7 CE 00 1D         [ 2] 4588 1$:	ldw x,txtbgn
      0016FA C3 00 1F         [ 2] 4589 	cpw x,txtend 
      0016FD 2B 05            [ 1] 4590 	jrmi run_it 
      0016FF A6 0D            [ 1] 4591 	ld a,#ERR_NO_PROG
      001701 CC 07 97         [ 2] 4592 	jp tb_error
                                   4593 
      001704                       4594 run_it:	 
      001704 CD 11 80         [ 4] 4595     call ubound 
      001707                       4596 	_drop 2 ; drop return address 
      001707 5B 02            [ 2]    1     addw sp,#2 
                                   4597 ; clear data pointer 
      001709 5F               [ 1] 4598 	clrw x 
      00170A CF 00 06         [ 2] 4599 	ldw data_ptr,x 
      00170D 72 5F 00 08      [ 1] 4600 	clr data_ofs 
      001711 72 5F 00 09      [ 1] 4601 	clr data_len 
                                   4602 ; initialize BASIC pointer 
      001715 CE 00 1D         [ 2] 4603 	ldw x,txtbgn 
      001718 CF 00 04         [ 2] 4604 	ldw basicptr,x 
      00171B E6 02            [ 1] 4605 	ld a,(2,x)
      00171D C7 00 03         [ 1] 4606 	ld count,a
      001720 35 03 00 01      [ 1] 4607 	mov in,#3	
      001724 72 10 00 24      [ 1] 4608 	bset flags,#FRUN 
      001728 CC 08 3B         [ 2] 4609 	jp interpreter 
                                   4610 
                                   4611 
                                   4612 ;----------------------
                                   4613 ; BASIC: END
                                   4614 ; end running program
                                   4615 ;---------------------- 
      00172B                       4616 cmd_end: 
                                   4617 ; clean stack 
      00172B AE 17 FF         [ 2] 4618 	ldw x,#STACK_EMPTY
      00172E 94               [ 1] 4619 	ldw sp,x 
      00172F CC 08 1C         [ 2] 4620 	jp warm_start
                                   4621 
                                   4622 
                                   4623 ;-----------------------
                                   4624 ; BASIC: TONE expr1,expr2
                                   4625 ; used TIMER2 channel 1
                                   4626 ; to produce a tone 
                                   4627 ; arguments:
                                   4628 ;    expr1   frequency 
                                   4629 ;    expr2   duration msec.
                                   4630 ;---------------------------
      001732                       4631 tone:
      001732 CD 0F 97         [ 4] 4632 	call arg_list 
      001735 A1 02            [ 1] 4633 	cp a,#2 
      001737 27 03            [ 1] 4634 	jreq 1$
      001739 CC 07 95         [ 2] 4635 	jp syntax_error 
      00173C                       4636 1$: 
      00173C 85               [ 2] 4637 	popw x ; duration
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      00173D 90 85            [ 2] 4638 	popw y ; frequency 
      00173F                       4639 beep:  
      00173F 89               [ 2] 4640 	pushw x 
      001740 AE F4 24         [ 2] 4641 	ldw x,#TIM2_CLK_FREQ
      001743 65               [ 2] 4642 	divw x,y 
                                   4643 ; round to nearest integer 
      001744 90 A3 7A 12      [ 2] 4644 	cpw y,#TIM2_CLK_FREQ/2
      001748 2B 01            [ 1] 4645 	jrmi 2$
      00174A 5C               [ 2] 4646 	incw x 
      00174B                       4647 2$:	 
      00174B 9E               [ 1] 4648 	ld a,xh 
      00174C C7 53 0D         [ 1] 4649 	ld TIM2_ARRH,a 
      00174F 9F               [ 1] 4650 	ld a,xl 
      001750 C7 53 0E         [ 1] 4651 	ld TIM2_ARRL,a 
                                   4652 ; 50% duty cycle 
      001753 8C               [ 1] 4653 	ccf 
      001754 56               [ 2] 4654 	rrcw x 
      001755 9E               [ 1] 4655 	ld a,xh 
      001756 C7 53 0F         [ 1] 4656 	ld TIM2_CCR1H,a 
      001759 9F               [ 1] 4657 	ld a,xl
      00175A C7 53 10         [ 1] 4658 	ld TIM2_CCR1L,a
      00175D 72 10 53 08      [ 1] 4659 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001761 72 10 53 00      [ 1] 4660 	bset TIM2_CR1,#TIM2_CR1_CEN
      001765 72 10 53 04      [ 1] 4661 	bset TIM2_EGR,#TIM2_EGR_UG
      001769 85               [ 2] 4662 	popw x 
      00176A CF 00 11         [ 2] 4663 	ldw timer,x 
      00176D CE 00 11         [ 2] 4664 3$: ldw x,timer 	
      001770 26 FB            [ 1] 4665 	jrne 3$ 
      001772 72 11 53 08      [ 1] 4666 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001776 72 11 53 00      [ 1] 4667 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00177A 81               [ 4] 4668 	ret 
                                   4669 
                                   4670 ;-------------------------------
                                   4671 ; BASIC: ADCON 0|1 [,divisor]  
                                   4672 ; disable/enanble ADC 
                                   4673 ;-------------------------------
                           000003  4674 	ONOFF=3 
                           000001  4675 	DIVSOR=1
                           000004  4676 	VSIZE=4 
      00177B                       4677 power_adc:
      00177B CD 0F 97         [ 4] 4678 	call arg_list 
      00177E A1 02            [ 1] 4679 	cp a,#2	
      001780 27 0B            [ 1] 4680 	jreq 1$
      001782 A1 01            [ 1] 4681 	cp a,#1 
      001784 27 03            [ 1] 4682 	jreq 0$ 
      001786 CC 07 95         [ 2] 4683 	jp syntax_error 
      001789 AE 00 00         [ 2] 4684 0$: ldw x,#0
      00178C 89               [ 2] 4685 	pushw x  ; divisor 
      00178D 1E 03            [ 2] 4686 1$: ldw x,(ONOFF,sp)
      00178F 5D               [ 2] 4687 	tnzw x 
      001790 27 1A            [ 1] 4688 	jreq 2$ 
      001792 1E 01            [ 2] 4689 	ldw x,(DIVSOR,sp) ; divisor 
      001794 9F               [ 1] 4690 	ld a,xl
      001795 A4 07            [ 1] 4691 	and a,#7
      001797 4E               [ 1] 4692 	swap a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001798 C7 54 01         [ 1] 4693 	ld ADC_CR1,a
      00179B 72 16 50 CA      [ 1] 4694 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      00179F 72 10 54 01      [ 1] 4695 	bset ADC_CR1,#ADC_CR1_ADON 
      0017A3                       4696 	_usec_dly 7 
      0017A3 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0017A6 5A               [ 2]    2     decw x
      0017A7 9D               [ 1]    3     nop 
      0017A8 26 FA            [ 1]    4     jrne .-4
      0017AA 20 08            [ 2] 4697 	jra 3$
      0017AC 72 11 54 01      [ 1] 4698 2$: bres ADC_CR1,#ADC_CR1_ADON
      0017B0 72 17 50 CA      [ 1] 4699 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0017B4                       4700 3$:	_drop VSIZE 
      0017B4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017B6 81               [ 4] 4701 	ret
                                   4702 
                                   4703 ;-----------------------------
                                   4704 ; BASIC: ADCREAD (channel)
                                   4705 ; read adc channel {0..5}
                                   4706 ; output:
                                   4707 ;   A 		TK_INTGR 
                                   4708 ;   X 		value 
                                   4709 ;-----------------------------
      0017B7                       4710 analog_read:
      0017B7 CD 0F 92         [ 4] 4711 	call func_args 
      0017BA A1 01            [ 1] 4712 	cp a,#1 
      0017BC 27 03            [ 1] 4713 	jreq 1$
      0017BE CC 07 95         [ 2] 4714 	jp syntax_error
      0017C1 85               [ 2] 4715 1$: popw x 
      0017C2 A3 00 05         [ 2] 4716 	cpw x,#5 
      0017C5 23 05            [ 2] 4717 	jrule 2$
      0017C7 A6 0A            [ 1] 4718 	ld a,#ERR_BAD_VALUE
      0017C9 CC 07 97         [ 2] 4719 	jp tb_error 
      0017CC 9F               [ 1] 4720 2$: ld a,xl
      0017CD C7 00 0D         [ 1] 4721 	ld acc8,a 
      0017D0 A6 05            [ 1] 4722 	ld a,#5
      0017D2 C0 00 0D         [ 1] 4723 	sub a,acc8 
      0017D5 C7 54 00         [ 1] 4724 	ld ADC_CSR,a
      0017D8 72 16 54 02      [ 1] 4725 	bset ADC_CR2,#ADC_CR2_ALIGN
      0017DC 72 10 54 01      [ 1] 4726 	bset ADC_CR1,#ADC_CR1_ADON
      0017E0 72 0F 54 00 FB   [ 2] 4727 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0017E5 CE 54 04         [ 2] 4728 	ldw x,ADC_DRH
      0017E8 A6 04            [ 1] 4729 	ld a,#TK_INTGR
      0017EA 81               [ 4] 4730 	ret 
                                   4731 
                                   4732 ;-----------------------
                                   4733 ; BASIC: DREAD(pin)
                                   4734 ; Arduino pins 
                                   4735 ; read state of a digital pin 
                                   4736 ; pin# {0..15}
                                   4737 ; output:
                                   4738 ;    A 		TK_INTGR
                                   4739 ;    X      0|1 
                                   4740 ;-------------------------
                           000001  4741 	PINNO=1
                           000001  4742 	VSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0017EB                       4743 digital_read:
      0017EB                       4744 	_vars VSIZE 
      0017EB 52 01            [ 2]    1     sub sp,#VSIZE 
      0017ED CD 0F 92         [ 4] 4745 	call func_args
      0017F0 A1 01            [ 1] 4746 	cp a,#1
      0017F2 27 03            [ 1] 4747 	jreq 1$
      0017F4 CC 07 95         [ 2] 4748 	jp syntax_error
      0017F7 85               [ 2] 4749 1$: popw x 
      0017F8 A3 00 0F         [ 2] 4750 	cpw x,#15 
      0017FB 23 05            [ 2] 4751 	jrule 2$
      0017FD A6 0A            [ 1] 4752 	ld a,#ERR_BAD_VALUE
      0017FF CC 07 97         [ 2] 4753 	jp tb_error 
      001802 CD 1D CF         [ 4] 4754 2$:	call select_pin 
      001805 6B 01            [ 1] 4755 	ld (PINNO,sp),a
      001807 E6 01            [ 1] 4756 	ld a,(GPIO_IDR,x)
      001809 0D 01            [ 1] 4757 	tnz (PINNO,sp)
      00180B 27 05            [ 1] 4758 	jreq 8$
      00180D 44               [ 1] 4759 3$: srl a 
      00180E 0A 01            [ 1] 4760 	dec (PINNO,sp)
      001810 26 FB            [ 1] 4761 	jrne 3$ 
      001812 A4 01            [ 1] 4762 8$: and a,#1 
      001814 5F               [ 1] 4763 	clrw x 
      001815 97               [ 1] 4764 	ld xl,a 
      001816 A6 04            [ 1] 4765 	ld a,#TK_INTGR
      001818                       4766 	_drop VSIZE
      001818 5B 01            [ 2]    1     addw sp,#VSIZE 
      00181A 81               [ 4] 4767 	ret
                                   4768 
                                   4769 ;-----------------------
                                   4770 ; BASIC: DWRITE pin,0|1
                                   4771 ; Arduino pins 
                                   4772 ; write to a digital pin 
                                   4773 ; pin# {0..15}
                                   4774 ; output:
                                   4775 ;    A 		TK_INTGR
                                   4776 ;    X      0|1 
                                   4777 ;-------------------------
                           000001  4778 	PINNO=1
                           000002  4779 	PINVAL=2
                           000002  4780 	VSIZE=2
      00181B                       4781 digital_write:
      00181B                       4782 	_vars VSIZE 
      00181B 52 02            [ 2]    1     sub sp,#VSIZE 
      00181D CD 0F 97         [ 4] 4783 	call arg_list  
      001820 A1 02            [ 1] 4784 	cp a,#2 
      001822 27 03            [ 1] 4785 	jreq 1$
      001824 CC 07 95         [ 2] 4786 	jp syntax_error
      001827 85               [ 2] 4787 1$: popw x 
      001828 9F               [ 1] 4788 	ld a,xl 
      001829 6B 02            [ 1] 4789 	ld (PINVAL,sp),a
      00182B 85               [ 2] 4790 	popw x 
      00182C A3 00 0F         [ 2] 4791 	cpw x,#15 
      00182F 23 05            [ 2] 4792 	jrule 2$
      001831 A6 0A            [ 1] 4793 	ld a,#ERR_BAD_VALUE
      001833 CC 07 97         [ 2] 4794 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001836 CD 1D CF         [ 4] 4795 2$:	call select_pin 
      001839 6B 01            [ 1] 4796 	ld (PINNO,sp),a 
      00183B A6 01            [ 1] 4797 	ld a,#1
      00183D 0D 01            [ 1] 4798 	tnz (PINNO,sp)
      00183F 27 05            [ 1] 4799 	jreq 4$
      001841 48               [ 1] 4800 3$: sll a
      001842 0A 01            [ 1] 4801 	dec (PINNO,sp)
      001844 26 FB            [ 1] 4802 	jrne 3$
      001846 0D 02            [ 1] 4803 4$: tnz (PINVAL,sp)
      001848 26 05            [ 1] 4804 	jrne 5$
      00184A 43               [ 1] 4805 	cpl a 
      00184B E4 00            [ 1] 4806 	and a,(GPIO_ODR,x)
      00184D 20 02            [ 2] 4807 	jra 8$
      00184F EA 00            [ 1] 4808 5$: or a,(GPIO_ODR,x)
      001851 E7 00            [ 1] 4809 8$: ld (GPIO_ODR,x),a 
      001853                       4810 	_drop VSIZE 
      001853 5B 02            [ 2]    1     addw sp,#VSIZE 
      001855 81               [ 4] 4811 	ret
                                   4812 
                                   4813 
                                   4814 ;-----------------------
                                   4815 ; BASIC: STOP
                                   4816 ; stop progam execution  
                                   4817 ; without resetting pointers 
                                   4818 ; the program is resumed
                                   4819 ; with RUN 
                                   4820 ;-------------------------
      001856                       4821 stop:
      001856 72 00 00 24 02   [ 2] 4822 	btjt flags,#FRUN,2$
      00185B 4F               [ 1] 4823 	clr a
      00185C 81               [ 4] 4824 	ret 
      00185D                       4825 2$:	 
                                   4826 ; create space on cstack to save context 
      00185D AE 18 84         [ 2] 4827 	ldw x,#break_point 
      001860 CD 01 D7         [ 4] 4828 	call puts 
      001863                       4829 	_drop 2 ;drop return address 
      001863 5B 02            [ 2]    1     addw sp,#2 
      001865                       4830 	_vars CTXT_SIZE ; context size 
      001865 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001867 CD 14 41         [ 4] 4831 	call save_context 
      00186A AE 16 90         [ 2] 4832 	ldw x,#tib 
      00186D CF 00 04         [ 2] 4833 	ldw basicptr,x
      001870 7F               [ 1] 4834 	clr (x)
      001871 72 5F 00 03      [ 1] 4835 	clr count  
      001875 5F               [ 1] 4836 	clrw x 
      001876 CF 00 00         [ 2] 4837 	ldw in.w,x
      001879 72 11 00 24      [ 1] 4838 	bres flags,#FRUN 
      00187D 72 18 00 24      [ 1] 4839 	bset flags,#FBREAK
      001881 CC 08 3B         [ 2] 4840 	jp interpreter 
      001884 0A 62 72 65 61 6B 20  4841 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4842 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4843 ;-----------------------
                                   4844 ; BASIC: NEW
                                   4845 ; from command line only 
                                   4846 ; free program memory
                                   4847 ; and clear variables 
                                   4848 ;------------------------
      0018A2                       4849 new: 
      0018A2 72 01 00 24 01   [ 2] 4850 	btjf flags,#FRUN,0$ 
      0018A7 81               [ 4] 4851 	ret 
      0018A8                       4852 0$:	
      0018A8 CD 06 01         [ 4] 4853 	call clear_basic 
      0018AB 81               [ 4] 4854 	ret 
                                   4855 	 
                                   4856 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4857 ;  file system routines
                                   4858 ;  MCU flash memory from
                                   4859 ;  0x10000-0x27fff is 
                                   4860 ;  used to store BASIC 
                                   4861 ;  program files. 
                                   4862 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4863 
                                   4864 ;--------------------
                                   4865 ; input:
                                   4866 ;   X     increment 
                                   4867 ; output:
                                   4868 ;   farptr  incremented 
                                   4869 ;---------------------
      0018AC                       4870 incr_farptr:
      0018AC 72 BB 00 18      [ 2] 4871 	addw x,farptr+1 
      0018B0 24 04            [ 1] 4872 	jrnc 1$
      0018B2 72 5C 00 17      [ 1] 4873 	inc farptr 
      0018B6 CF 00 18         [ 2] 4874 1$:	ldw farptr+1,x  
      0018B9 81               [ 4] 4875 	ret 
                                   4876 
                                   4877 ;------------------------------
                                   4878 ; extended flash memory used as FLASH_DRIVE 
                                   4879 ; seek end of used flash drive   
                                   4880 ; starting at 0x10000 address.
                                   4881 ; 4 consecutives 0 bytes signal free space. 
                                   4882 ; input:
                                   4883 ;	none
                                   4884 ; output:
                                   4885 ;   ffree     free_addr| 0 if memory full.
                                   4886 ;------------------------------
      0018BA                       4887 seek_fdrive:
                                   4888 ; start scan at 0x10000 address 
      0018BA A6 01            [ 1] 4889 	ld a,#1
      0018BC C7 00 17         [ 1] 4890 	ld farptr,a 
      0018BF 5F               [ 1] 4891 	clrw x 
      0018C0 CF 00 18         [ 2] 4892 	ldw farptr+1,x 
      0018C3                       4893 1$:
      0018C3 AE 00 03         [ 2] 4894 	ldw x,#3  
      0018C6 92 AF 00 17      [ 5] 4895 2$:	ldf a,([farptr],x) 
      0018CA 26 05            [ 1] 4896 	jrne 3$
      0018CC 5A               [ 2] 4897 	decw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      0018CD 2A F7            [ 1] 4898 	jrpl 2$
      0018CF 20 19            [ 2] 4899 	jra 4$ 
      0018D1 5C               [ 2] 4900 3$:	incw x 
      0018D2 CD 18 AC         [ 4] 4901 	call incr_farptr
      0018D5 AE 02 7F         [ 2] 4902 	ldw x,#0x27f 
      0018D8 C3 00 17         [ 2] 4903 	cpw x,farptr
      0018DB 2A E6            [ 1] 4904 	jrpl 1$
                                   4905 ; drive full 
      0018DD 72 5F 00 1A      [ 1] 4906 	clr ffree 
      0018E1 72 5F 00 1B      [ 1] 4907 	clr ffree+1 
      0018E5 72 5F 00 1C      [ 1] 4908 	clr ffree+2 
      0018E9 81               [ 4] 4909 	ret
      0018EA                       4910 4$: ; copy farptr to ffree	 
      0018EA CE 00 17         [ 2] 4911 	ldw x,farptr 
      0018ED C6 00 19         [ 1] 4912 	ld a,farptr+2 
      0018F0 CF 00 1A         [ 2] 4913 	ldw ffree,x 
      0018F3 C7 00 1C         [ 1] 4914 	ld ffree+2,a  
      0018F6 81               [ 4] 4915 	ret 
                                   4916 
                                   4917 ;-----------------------
                                   4918 ; compare file name 
                                   4919 ; with name pointed by Y  
                                   4920 ; input:
                                   4921 ;   farptr   file name 
                                   4922 ;   Y        target name 
                                   4923 ; output:
                                   4924 ;   farptr 	 at file_name
                                   4925 ;   X 		 farptr[x] point at size field  
                                   4926 ;   Carry    0|1 no match|match  
                                   4927 ;----------------------
      0018F7                       4928 cmp_name:
      0018F7 5F               [ 1] 4929 	clrw x
      0018F8 92 AF 00 17      [ 5] 4930 1$:	ldf a,([farptr],x)
      0018FC 90 F1            [ 1] 4931 	cp a,(y)
      0018FE 26 08            [ 1] 4932 	jrne 4$
      001900 4D               [ 1] 4933 	tnz a 
      001901 27 12            [ 1] 4934 	jreq 9$ 
      001903 5C               [ 2] 4935     incw x 
      001904 90 5C            [ 2] 4936 	incw y 
      001906 20 F0            [ 2] 4937 	jra 1$
      001908                       4938 4$: ;no match 
      001908 4D               [ 1] 4939 	tnz a 
      001909 27 07            [ 1] 4940 	jreq 5$
      00190B 5C               [ 2] 4941 	incw x 
      00190C 92 AF 00 17      [ 5] 4942 	ldf a,([farptr],x)
      001910 20 F6            [ 2] 4943 	jra 4$  
      001912 5C               [ 2] 4944 5$:	incw x ; farptr[x] point at 'size' field 
      001913 98               [ 1] 4945 	rcf 
      001914 81               [ 4] 4946 	ret
      001915                       4947 9$: ; match  
      001915 5C               [ 2] 4948 	incw x  ; farptr[x] at 'size' field 
      001916 99               [ 1] 4949 	scf 
      001917 81               [ 4] 4950 	ret 
                                   4951 
                                   4952 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4953 ; search file in 
                                   4954 ; flash memory 
                                   4955 ; input:
                                   4956 ;   Y       file name  
                                   4957 ; output:
                                   4958 ;   farptr  addr at name|0
                                   4959 ;-----------------------
                           000001  4960 	FSIZE=1
                           000003  4961 	YSAVE=3
                           000004  4962 	VSIZE=4 
      001918                       4963 search_file: 
      001918                       4964 	_vars VSIZE
      001918 52 04            [ 2]    1     sub sp,#VSIZE 
      00191A 17 03            [ 2] 4965 	ldw (YSAVE,sp),y  
      00191C 5F               [ 1] 4966 	clrw x 
      00191D CF 00 18         [ 2] 4967 	ldw farptr+1,x 
      001920 35 01 00 17      [ 1] 4968 	mov farptr,#1
      001924                       4969 1$:	
                                   4970 ; check if farptr is after any file 
                                   4971 ; if  0 then so.
      001924 92 BC 00 17      [ 5] 4972 	ldf a,[farptr]
      001928 27 25            [ 1] 4973 	jreq 6$
      00192A 5F               [ 1] 4974 2$: clrw x 	
      00192B 16 03            [ 2] 4975 	ldw y,(YSAVE,sp) 
      00192D CD 18 F7         [ 4] 4976 	call cmp_name
      001930 25 2D            [ 1] 4977 	jrc 9$
      001932 92 AF 00 17      [ 5] 4978 	ldf a,([farptr],x)
      001936 6B 01            [ 1] 4979 	ld (FSIZE,sp),a 
      001938 5C               [ 2] 4980 	incw x 
      001939 92 AF 00 17      [ 5] 4981 	ldf a,([farptr],x)
      00193D 6B 02            [ 1] 4982 	ld (FSIZE+1,sp),a 
      00193F 5C               [ 2] 4983 	incw x 
      001940 72 FB 01         [ 2] 4984 	addw x,(FSIZE,sp) ; count to skip 
      001943 5C               [ 2] 4985 	incw x ; skip over EOF marker 
      001944 CD 18 AC         [ 4] 4986 	call incr_farptr ; now at next file 'name_field'
      001947 AE 02 80         [ 2] 4987 	ldw x,#0x280
      00194A C3 00 17         [ 2] 4988 	cpw x,farptr 
      00194D 2A D5            [ 1] 4989 	jrpl 1$
      00194F                       4990 6$: ; file not found 
      00194F 72 5F 00 17      [ 1] 4991 	clr farptr
      001953 72 5F 00 18      [ 1] 4992 	clr farptr+1 
      001957 72 5F 00 19      [ 1] 4993 	clr farptr+2 
      00195B                       4994 	_drop VSIZE 
      00195B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00195D 98               [ 1] 4995 	rcf
      00195E 81               [ 4] 4996 	ret
      00195F                       4997 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      00195F                       4998 	_drop VSIZE 
      00195F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001961 99               [ 1] 4999 	scf 	
      001962 81               [ 4] 5000 	ret
                                   5001 
                                   5002 
                                   5003 ;--------------------------------
                                   5004 ; BASIC: SAVE "name" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   5005 ; save text program in 
                                   5006 ; flash memory used as 
                                   5007 ;--------------------------------
                           000001  5008 	BSIZE=1
                           000003  5009 	NAMEPTR=3
                           000004  5010 	VSIZE=4
      001963                       5011 save:
      001963 72 01 00 24 05   [ 2] 5012 	btjf flags,#FRUN,0$ 
      001968 A6 07            [ 1] 5013 	ld a,#ERR_CMD_ONLY 
      00196A CC 07 97         [ 2] 5014 	jp tb_error
      00196D                       5015 0$:	 
      00196D CE 00 1F         [ 2] 5016 	ldw x,txtend 
      001970 72 B0 00 1D      [ 2] 5017 	subw x,txtbgn
      001974 26 05            [ 1] 5018 	jrne 1$
                                   5019 ; nothing to save 
      001976 A6 0D            [ 1] 5020 	ld a,#ERR_NO_PROG
      001978 CC 07 97         [ 2] 5021 	jp tb_error 	
      00197B                       5022 1$:	
      00197B                       5023 	_vars VSIZE 
      00197B 52 04            [ 2]    1     sub sp,#VSIZE 
      00197D 1F 01            [ 2] 5024 	ldw (BSIZE,sp),x 
      00197F CD 08 87         [ 4] 5025 	call next_token	
      001982 A1 02            [ 1] 5026 	cp a,#TK_QSTR
      001984 27 03            [ 1] 5027 	jreq 2$
      001986 CC 07 95         [ 2] 5028 	jp syntax_error
      001989                       5029 2$: 
      001989 1F 03            [ 2] 5030 	ldw (NAMEPTR,sp),x  
      00198B 55 00 03 00 01   [ 1] 5031 	mov in,count 
                                   5032 ; check if enough free space 
      001990 CD 02 B6         [ 4] 5033 	call strlen 
      001993 1C 00 03         [ 2] 5034 	addw x,#3 
      001996 72 FB 01         [ 2] 5035 	addw x,(BSIZE,sp)
      001999 72 5D 00 1A      [ 1] 5036 	tnz ffree 
      00199D 26 0B            [ 1] 5037 	jrne 21$
      00199F 72 B0 00 1B      [ 2] 5038 	subw x,ffree+1 
      0019A3 23 05            [ 2] 5039 	jrule 21$
      0019A5 A6 0E            [ 1] 5040 	ld a,#ERR_NO_FSPACE  
      0019A7 CC 07 97         [ 2] 5041 	jp tb_error
      0019AA                       5042 21$: 
                                   5043 ; check for existing file of that name 
      0019AA 16 03            [ 2] 5044 	ldw y,(NAMEPTR,sp)	
      0019AC CD 19 18         [ 4] 5045 	call search_file 
      0019AF 24 05            [ 1] 5046 	jrnc 3$ 
      0019B1 A6 08            [ 1] 5047 	ld a,#ERR_DUPLICATE 
      0019B3 CC 07 97         [ 2] 5048 	jp tb_error 
      0019B6                       5049 3$:	;** write file name to flash **
      0019B6 CE 00 1A         [ 2] 5050 	ldw x,ffree 
      0019B9 C6 00 1C         [ 1] 5051 	ld a,ffree+2 
      0019BC CF 00 17         [ 2] 5052 	ldw farptr,x 
      0019BF C7 00 19         [ 1] 5053 	ld farptr+2,a 
      0019C2 1E 03            [ 2] 5054 	ldw x,(NAMEPTR,sp)  
      0019C4 CD 02 B6         [ 4] 5055 	call strlen 
      0019C7 5C               [ 2] 5056 	incw  x
      0019C8 1F 01            [ 2] 5057 	ldw (BSIZE,sp),x  
      0019CA 5F               [ 1] 5058 	clrw x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019CB 16 03            [ 2] 5059 	ldw y,(NAMEPTR,sp)
      0019CD CD 01 66         [ 4] 5060 	call write_block  
                                   5061 ;** write file length after name **
      0019D0 CE 00 1F         [ 2] 5062 	ldw x,txtend 
      0019D3 72 B0 00 1D      [ 2] 5063 	subw x,txtbgn
      0019D7 1F 01            [ 2] 5064 	ldw (BSIZE,sp),x 
      0019D9 5F               [ 1] 5065 	clrw x 
      0019DA 7B 01            [ 1] 5066 	ld a,(BSIZE,sp)
      0019DC CD 00 F1         [ 4] 5067 	call write_byte 
      0019DF 5C               [ 2] 5068 	incw x 
      0019E0 7B 02            [ 1] 5069 	ld a,(BSIZE+1,sp)
      0019E2 CD 00 F1         [ 4] 5070 	call write_byte
      0019E5 5C               [ 2] 5071 	incw x  
      0019E6 CD 18 AC         [ 4] 5072 	call incr_farptr ; move farptr after SIZE field 
                                   5073 ;** write BASIC text **
                                   5074 ; copy BSIZE, stack:{... bsize -- ... bsize bsize }	
      0019E9 1E 01            [ 2] 5075 	ldw x,(BSIZE,sp)
      0019EB 89               [ 2] 5076 	pushw x ; write_block argument 
      0019EC 5F               [ 1] 5077 	clrw x 
      0019ED 90 CE 00 1D      [ 2] 5078 	ldw y,txtbgn  ; BASIC text to save 
      0019F1 CD 01 66         [ 4] 5079 	call write_block 
      0019F4                       5080 	_drop 2 ;  drop write_block argument  
      0019F4 5B 02            [ 2]    1     addw sp,#2 
                                   5081 ; write end of file marker 
      0019F6 AE 00 01         [ 2] 5082 	ldw x,#1
      0019F9 A6 FF            [ 1] 5083 	ld a,#EOF  
      0019FB CD 00 F1         [ 4] 5084 	call write_byte 
      0019FE CD 18 AC         [ 4] 5085 	call incr_farptr
                                   5086 ; save farptr in ffree
      001A01 CE 00 17         [ 2] 5087 	ldw x,farptr 
      001A04 C6 00 19         [ 1] 5088 	ld a,farptr+2 
      001A07 CF 00 1A         [ 2] 5089 	ldw ffree,x 
      001A0A C7 00 1C         [ 1] 5090 	ld ffree+2,a
                                   5091 ;write 4 zero bytes as an end of all files marker 
      001A0D 5F               [ 1] 5092     clrw x 
      001A0E 4B 04            [ 1] 5093 	push #4 
      001A10                       5094 4$:
      001A10 4F               [ 1] 5095 	clr a 
      001A11 CD 00 F1         [ 4] 5096 	call write_byte 
      001A14 5C               [ 2] 5097 	incw x 
      001A15 0A 01            [ 1] 5098 	dec (1,sp)
      001A17 26 F7            [ 1] 5099 	jrne 4$
      001A19 84               [ 1] 5100 5$: pop a 
                                   5101 ; display saved size  
      001A1A 1E 01            [ 2] 5102 	ldw x,(BSIZE,sp) 
      001A1C CD 09 2D         [ 4] 5103 	call print_int 
      001A1F                       5104 	_drop VSIZE 
      001A1F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A21 81               [ 4] 5105 	ret 
                                   5106 
                                   5107 ;----------------------
                                   5108 ; load file in RAM memory
                                   5109 ; input:
                                   5110 ;    farptr point at file size 
                                   5111 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5112 ;   y point after BASIC program in RAM.
                                   5113 ;------------------------
      001A22                       5114 load_file:
      001A22 CD 18 AC         [ 4] 5115 	call incr_farptr  
      001A25 CD 06 01         [ 4] 5116 	call clear_basic  
      001A28 5F               [ 1] 5117 	clrw x
      001A29 92 AF 00 17      [ 5] 5118 	ldf a,([farptr],x)
      001A2D 90 95            [ 1] 5119 	ld yh,a 
      001A2F 5C               [ 2] 5120 	incw x  
      001A30 92 AF 00 17      [ 5] 5121 	ldf a,([farptr],x)
      001A34 5C               [ 2] 5122 	incw x 
      001A35 90 97            [ 1] 5123 	ld yl,a 
      001A37 72 B9 00 1D      [ 2] 5124 	addw y,txtbgn
      001A3B 90 CF 00 1F      [ 2] 5125 	ldw txtend,y
      001A3F 90 CE 00 1D      [ 2] 5126 	ldw y,txtbgn
      001A43                       5127 3$:	; load BASIC text 	
      001A43 92 AF 00 17      [ 5] 5128 	ldf a,([farptr],x)
      001A47 90 F7            [ 1] 5129 	ld (y),a 
      001A49 5C               [ 2] 5130 	incw x 
      001A4A 90 5C            [ 2] 5131 	incw y 
      001A4C 90 C3 00 1F      [ 2] 5132 	cpw y,txtend 
      001A50 2B F1            [ 1] 5133 	jrmi 3$
      001A52 81               [ 4] 5134 	ret 
                                   5135 
                                   5136 ;------------------------
                                   5137 ; BASIC: LOAD "file" 
                                   5138 ; load file to RAM 
                                   5139 ; for execution 
                                   5140 ;------------------------
      001A53                       5141 load:
      001A53 72 01 00 24 07   [ 2] 5142 	btjf flags,#FRUN,0$ 
      001A58 27 05            [ 1] 5143 	jreq 0$ 
      001A5A A6 07            [ 1] 5144 	ld a,#ERR_CMD_ONLY 
      001A5C CC 07 97         [ 2] 5145 	jp tb_error 
      001A5F                       5146 0$:	
      001A5F CD 08 87         [ 4] 5147 	call next_token 
      001A62 A1 02            [ 1] 5148 	cp a,#TK_QSTR
      001A64 27 03            [ 1] 5149 	jreq 1$
      001A66 CC 07 95         [ 2] 5150 	jp syntax_error 
      001A69 90 93            [ 1] 5151 1$:	ldw y,x 
      001A6B CD 19 18         [ 4] 5152 	call search_file 
      001A6E 25 05            [ 1] 5153 	jrc 2$ 
      001A70 A6 09            [ 1] 5154 	ld a,#ERR_NOT_FILE
      001A72 CC 07 97         [ 2] 5155 	jp tb_error  
      001A75                       5156 2$:
      001A75 CD 1A 22         [ 4] 5157 	call load_file
                                   5158 ; print loaded size 	 
      001A78 CE 00 1F         [ 2] 5159 	ldw x,txtend 
      001A7B 72 B0 00 1D      [ 2] 5160 	subw x,txtbgn
      001A7F CD 09 2D         [ 4] 5161 	call print_int 
      001A82 81               [ 4] 5162 	ret 
                                   5163 
                                   5164 ;-----------------------------------
                                   5165 ; BASIC: FORGET ["file_name"] 
                                   5166 ; erase file_name and all others 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5167 ; after it. 
                                   5168 ; without argument erase all files 
                                   5169 ;-----------------------------------
      001A83                       5170 forget:
      001A83 CD 08 87         [ 4] 5171 	call next_token 
      001A86 A1 00            [ 1] 5172 	cp a,#TK_NONE 
      001A88 27 20            [ 1] 5173 	jreq 3$ 
      001A8A A1 02            [ 1] 5174 	cp a,#TK_QSTR
      001A8C 27 03            [ 1] 5175 	jreq 1$
      001A8E CC 07 95         [ 2] 5176 	jp syntax_error
      001A91 90 93            [ 1] 5177 1$: ldw y,x 
      001A93 55 00 03 00 01   [ 1] 5178 	mov in,count 
      001A98 CD 19 18         [ 4] 5179 	call search_file
      001A9B 25 05            [ 1] 5180 	jrc 2$
      001A9D A6 09            [ 1] 5181 	ld a,#ERR_NOT_FILE 
      001A9F CC 07 97         [ 2] 5182 	jp tb_error 
      001AA2                       5183 2$: 
      001AA2 CE 00 17         [ 2] 5184 	ldw x,farptr
      001AA5 C6 00 19         [ 1] 5185 	ld a,farptr+2
      001AA8 20 0A            [ 2] 5186 	jra 4$ 
      001AAA                       5187 3$: ; forget all files 
      001AAA AE 01 00         [ 2] 5188 	ldw x,#0x100
      001AAD 4F               [ 1] 5189 	clr a 
      001AAE CF 00 17         [ 2] 5190 	ldw farptr,x 
      001AB1 C7 00 19         [ 1] 5191 	ld farptr+2,a 
      001AB4                       5192 4$:
      001AB4 CF 00 1A         [ 2] 5193 	ldw ffree,x 
      001AB7 C7 00 1C         [ 1] 5194 	ld ffree+2,a 
      001ABA 4B 04            [ 1] 5195 	push #4
      001ABC 5F               [ 1] 5196 	clrw x 
      001ABD                       5197 5$: 
      001ABD 4F               [ 1] 5198 	clr a  
      001ABE CD 00 F1         [ 4] 5199 	call write_byte 
      001AC1 5C               [ 2] 5200 	incw x 
      001AC2 0A 01            [ 1] 5201 	dec (1,sp)
      001AC4 26 F7            [ 1] 5202 	jrne 5$	
      001AC6 84               [ 1] 5203 6$: pop a 
      001AC7 81               [ 4] 5204 	ret 
                                   5205 
                                   5206 ;----------------------
                                   5207 ; BASIC: DIR 
                                   5208 ; list saved files 
                                   5209 ;----------------------
                           000001  5210 	COUNT=1 ; files counter 
                           000002  5211 	VSIZE=2 
      001AC8                       5212 directory:
      001AC8                       5213 	_vars VSIZE 
      001AC8 52 02            [ 2]    1     sub sp,#VSIZE 
      001ACA 5F               [ 1] 5214 	clrw x 
      001ACB 1F 01            [ 2] 5215 	ldw (COUNT,sp),x 
      001ACD CF 00 18         [ 2] 5216 	ldw farptr+1,x 
      001AD0 35 01 00 17      [ 1] 5217 	mov farptr,#1 
      001AD4                       5218 dir_loop:
      001AD4 5F               [ 1] 5219 	clrw x 
      001AD5 92 AF 00 17      [ 5] 5220 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001AD9 27 39            [ 1] 5221 	jreq 8$ 
      001ADB                       5222 1$: ;name loop 	
      001ADB 92 AF 00 17      [ 5] 5223 	ldf a,([farptr],x)
      001ADF 27 06            [ 1] 5224 	jreq 2$ 
      001AE1 CD 01 C4         [ 4] 5225 	call putc 
      001AE4 5C               [ 2] 5226 	incw x 
      001AE5 20 F4            [ 2] 5227 	jra 1$
      001AE7 5C               [ 2] 5228 2$: incw x ; skip ending 0. 
      001AE8 A6 20            [ 1] 5229 	ld a,#SPACE 
      001AEA CD 01 C4         [ 4] 5230 	call putc 
                                   5231 ; get file size 	
      001AED 92 AF 00 17      [ 5] 5232 	ldf a,([farptr],x)
      001AF1 90 95            [ 1] 5233 	ld yh,a 
      001AF3 5C               [ 2] 5234 	incw x 
      001AF4 92 AF 00 17      [ 5] 5235 	ldf a,([farptr],x)
      001AF8 5C               [ 2] 5236 	incw x 
      001AF9 90 97            [ 1] 5237 	ld yl,a 
      001AFB 90 89            [ 2] 5238 	pushw y 
      001AFD 72 FB 01         [ 2] 5239 	addw x,(1,sp)
      001B00 5C               [ 2] 5240 	incw x ; skip EOF marker 
                                   5241 ; skip to next file 
      001B01 CD 18 AC         [ 4] 5242 	call incr_farptr 
                                   5243 ; print file size 
      001B04 85               [ 2] 5244 	popw x ; file size 
      001B05 CD 09 2D         [ 4] 5245 	call print_int 
      001B08 A6 0D            [ 1] 5246 	ld a,#CR 
      001B0A CD 01 C4         [ 4] 5247 	call putc
      001B0D 1E 01            [ 2] 5248 	ldw x,(COUNT,sp)
      001B0F 5C               [ 2] 5249 	incw x
      001B10 1F 01            [ 2] 5250 	ldw (COUNT,sp),x  
      001B12 20 C0            [ 2] 5251 	jra dir_loop 
      001B14                       5252 8$: ; print number of files 
      001B14 1E 01            [ 2] 5253 	ldw x,(COUNT,sp)
      001B16 CD 09 2D         [ 4] 5254 	call print_int 
      001B19 AE 1B 49         [ 2] 5255 	ldw x,#file_count 
      001B1C CD 01 D7         [ 4] 5256 	call puts  
                                   5257 ; print drive free space 	
      001B1F A6 FF            [ 1] 5258 	ld a,#0xff 
      001B21 C0 00 1C         [ 1] 5259 	sub a,ffree+2 
      001B24 C7 00 0D         [ 1] 5260 	ld acc8,a 
      001B27 A6 7F            [ 1] 5261 	ld a,#0x7f 
      001B29 C2 00 1B         [ 1] 5262 	sbc a,ffree+1 
      001B2C C7 00 0C         [ 1] 5263 	ld acc16,a 
      001B2F A6 02            [ 1] 5264 	ld a,#2 
      001B31 C2 00 1A         [ 1] 5265 	sbc a,ffree 
      001B34 C7 00 0B         [ 1] 5266 	ld acc24,a 
      001B37 5F               [ 1] 5267 	clrw x  
      001B38 A6 06            [ 1] 5268 	ld a,#6 
      001B3A 97               [ 1] 5269 	ld xl,a 
      001B3B A6 0A            [ 1] 5270 	ld a,#10 
      001B3D CD 08 E5         [ 4] 5271 	call prti24 
      001B40 AE 1B 51         [ 2] 5272 	ldw x,#drive_free
      001B43 CD 01 D7         [ 4] 5273 	call puts 
      001B46                       5274 	_drop VSIZE 
      001B46 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001B48 81               [ 4] 5275 	ret
      001B49 20 66 69 6C 65 73 0A  5276 file_count: .asciz " files\n"
             00
      001B51 20 62 79 74 65 73 20  5277 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5278 
                                   5279 ;---------------------
                                   5280 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5281 ; write 1 or more byte to FLASH or EEPROM
                                   5282 ; starting at address  
                                   5283 ; input:
                                   5284 ;   expr1  	is address 
                                   5285 ;   expr2,...,exprn   are bytes to write
                                   5286 ; output:
                                   5287 ;   none 
                                   5288 ;---------------------
                           000001  5289 	ADDR=1
                           000002  5290 	VSIZ=2 
      001B5E                       5291 write:
      001B5E                       5292 	_vars VSIZE 
      001B5E 52 02            [ 2]    1     sub sp,#VSIZE 
      001B60 72 5F 00 17      [ 1] 5293 	clr farptr ; expect 16 bits address 
      001B64 CD 10 90         [ 4] 5294 	call expression
      001B67 A1 04            [ 1] 5295 	cp a,#TK_INTGR 
      001B69 27 03            [ 1] 5296 	jreq 0$
      001B6B CC 07 95         [ 2] 5297 	jp syntax_error
      001B6E 1F 01            [ 2] 5298 0$: ldw (ADDR,sp),x 
      001B70 CD 08 87         [ 4] 5299 	call next_token 
      001B73 A1 09            [ 1] 5300 	cp a,#TK_COMMA 
      001B75 27 02            [ 1] 5301 	jreq 1$ 
      001B77 20 19            [ 2] 5302 	jra 9$ 
      001B79 CD 10 90         [ 4] 5303 1$:	call expression
      001B7C A1 04            [ 1] 5304 	cp a,#TK_INTGR
      001B7E 27 03            [ 1] 5305 	jreq 2$
      001B80 CC 07 95         [ 2] 5306 	jp syntax_error
      001B83 9F               [ 1] 5307 2$:	ld a,xl 
      001B84 1E 01            [ 2] 5308 	ldw x,(ADDR,sp) 
      001B86 CF 00 18         [ 2] 5309 	ldw farptr+1,x 
      001B89 5F               [ 1] 5310 	clrw x 
      001B8A CD 00 F1         [ 4] 5311 	call write_byte
      001B8D 1E 01            [ 2] 5312 	ldw x,(ADDR,sp)
      001B8F 5C               [ 2] 5313 	incw x 
      001B90 20 DC            [ 2] 5314 	jra 0$ 
      001B92                       5315 9$:
      001B92                       5316 	_drop VSIZE
      001B92 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B94 81               [ 4] 5317 	ret 
                                   5318 
                                   5319 
                                   5320 ;---------------------
                                   5321 ;BASIC: CHAR(expr)
                                   5322 ; évaluate expression 
                                   5323 ; and take the 7 least 
                                   5324 ; bits as ASCII character
                                   5325 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001B95                       5326 char:
      001B95 CD 0F 92         [ 4] 5327 	call func_args 
      001B98 A1 01            [ 1] 5328 	cp a,#1
      001B9A 27 03            [ 1] 5329 	jreq 1$
      001B9C CC 07 95         [ 2] 5330 	jp syntax_error
      001B9F 85               [ 2] 5331 1$:	popw x 
      001BA0 9F               [ 1] 5332 	ld a,xl 
      001BA1 A4 7F            [ 1] 5333 	and a,#0x7f 
      001BA3 97               [ 1] 5334 	ld xl,a
      001BA4 A6 03            [ 1] 5335 	ld a,#TK_CHAR
      001BA6 81               [ 4] 5336 	ret
                                   5337 
                                   5338 ;---------------------
                                   5339 ; BASIC: ASC(string|char)
                                   5340 ; extract first character 
                                   5341 ; of string argument 
                                   5342 ; return it as TK_INTGR 
                                   5343 ;---------------------
      001BA7                       5344 ascii:
      001BA7 A6 07            [ 1] 5345 	ld a,#TK_LPAREN
      001BA9 CD 0F 85         [ 4] 5346 	call expect 
      001BAC CD 08 87         [ 4] 5347 	call next_token 
      001BAF A1 02            [ 1] 5348 	cp a,#TK_QSTR 
      001BB1 27 07            [ 1] 5349 	jreq 1$
      001BB3 A1 03            [ 1] 5350 	cp a,#TK_CHAR 
      001BB5 27 06            [ 1] 5351 	jreq 2$ 
      001BB7 CC 07 95         [ 2] 5352 	jp syntax_error
      001BBA                       5353 1$: 
      001BBA F6               [ 1] 5354 	ld a,(x) 
      001BBB 5F               [ 1] 5355 	clrw x
      001BBC 97               [ 1] 5356 	ld xl,a 
      001BBD                       5357 2$: 
      001BBD 89               [ 2] 5358 	pushw x 
      001BBE A6 08            [ 1] 5359 	ld a,#TK_RPAREN 
      001BC0 CD 0F 85         [ 4] 5360 	call expect
      001BC3 85               [ 2] 5361 	popw x 
      001BC4 A6 04            [ 1] 5362 	ld a,#TK_INTGR 
      001BC6 81               [ 4] 5363 	ret 
                                   5364 
                                   5365 ;---------------------
                                   5366 ;BASIC: KEY
                                   5367 ; wait for a character 
                                   5368 ; received from STDIN 
                                   5369 ; input:
                                   5370 ;	none 
                                   5371 ; output:
                                   5372 ;	X 		ASCII character 
                                   5373 ;---------------------
      001BC7                       5374 key:
      001BC7 CD 01 CD         [ 4] 5375 	call getc 
      001BCA 5F               [ 1] 5376 	clrw x 
      001BCB 97               [ 1] 5377 	ld xl,a 
      001BCC A6 04            [ 1] 5378 	ld a,#TK_INTGR
      001BCE 81               [ 4] 5379 	ret
                                   5380 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5381 ;----------------------
                                   5382 ; BASIC: QKEY
                                   5383 ; Return true if there 
                                   5384 ; is a character in 
                                   5385 ; waiting in STDIN 
                                   5386 ; input:
                                   5387 ;  none 
                                   5388 ; output:
                                   5389 ;   X 		0|-1 
                                   5390 ;-----------------------
      001BCF                       5391 qkey:: 
      001BCF 5F               [ 1] 5392 	clrw x 
      001BD0 72 5D 00 26      [ 1] 5393 	tnz rx_char
      001BD4 27 01            [ 1] 5394 	jreq 9$ 
      001BD6 53               [ 2] 5395 	cplw x 
      001BD7 A6 04            [ 1] 5396 9$: ld a,#TK_INTGR
      001BD9 81               [ 4] 5397 	ret 
                                   5398 
                                   5399 ;---------------------
                                   5400 ; BASIC: GPIO(expr,reg)
                                   5401 ; return gpio address 
                                   5402 ; expr {0..8}
                                   5403 ; input:
                                   5404 ;   none 
                                   5405 ; output:
                                   5406 ;   X 		gpio register address
                                   5407 ;----------------------------
                           000003  5408 	PORT=3
                           000001  5409 	REG=1 
                           000004  5410 	VSIZE=4 
      001BDA                       5411 gpio:
      001BDA CD 0F 92         [ 4] 5412 	call func_args 
      001BDD A1 02            [ 1] 5413 	cp a,#2
      001BDF 27 03            [ 1] 5414 	jreq 1$
      001BE1 CC 07 95         [ 2] 5415 	jp syntax_error  
      001BE4                       5416 1$:	
      001BE4 1E 03            [ 2] 5417 	ldw x,(PORT,sp)
      001BE6 2B 17            [ 1] 5418 	jrmi bad_port
      001BE8 A3 00 09         [ 2] 5419 	cpw x,#9
      001BEB 2A 12            [ 1] 5420 	jrpl bad_port
      001BED A6 05            [ 1] 5421 	ld a,#5
      001BEF 42               [ 4] 5422 	mul x,a
      001BF0 1C 50 00         [ 2] 5423 	addw x,#GPIO_BASE 
      001BF3 1F 03            [ 2] 5424 	ldw (PORT,sp),x  
      001BF5 1E 01            [ 2] 5425 	ldw x,(REG,sp) 
      001BF7 72 FB 03         [ 2] 5426 	addw x,(PORT,sp)
      001BFA A6 04            [ 1] 5427 	ld a,#TK_INTGR
      001BFC                       5428 	_drop VSIZE 
      001BFC 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BFE 81               [ 4] 5429 	ret
      001BFF                       5430 bad_port:
      001BFF A6 0A            [ 1] 5431 	ld a,#ERR_BAD_VALUE
      001C01 CC 07 97         [ 2] 5432 	jp tb_error
                                   5433 
                                   5434 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5435 ;-------------------------
                                   5436 ; BASIC: UFLASH 
                                   5437 ; return user flash address
                                   5438 ; input:
                                   5439 ;  none 
                                   5440 ; output:
                                   5441 ;	A		TK_INTGR
                                   5442 ;   X 		user address 
                                   5443 ;---------------------------
      001C04                       5444 uflash:
      001C04 AE 26 00         [ 2] 5445 	ldw x,#user_space 
      001C07 A6 04            [ 1] 5446 	ld a,#TK_INTGR 
      001C09 81               [ 4] 5447 	ret 
                                   5448 
                                   5449 
                                   5450 ;---------------------
                                   5451 ; BASIC: USR(addr[,arg])
                                   5452 ; execute a function written 
                                   5453 ; in binary code.
                                   5454 ; binary fonction should 
                                   5455 ; return token attribute in A 
                                   5456 ; and value in X. 
                                   5457 ; input:
                                   5458 ;   addr	routine address 
                                   5459 ;   arg 	is an optional argument 
                                   5460 ; output:
                                   5461 ;   A 		token attribute 
                                   5462 ;   X       returned value 
                                   5463 ;---------------------
      001C0A                       5464 usr:
      001C0A 90 89            [ 2] 5465 	pushw y 	
      001C0C CD 0F 92         [ 4] 5466 	call func_args 
      001C0F A1 01            [ 1] 5467 	cp a,#1 
      001C11 27 07            [ 1] 5468 	jreq 2$
      001C13 A1 02            [ 1] 5469 	cp a,#2
      001C15 27 03            [ 1] 5470 	jreq 2$  
      001C17 CC 07 95         [ 2] 5471 	jp syntax_error 
      001C1A 90 85            [ 2] 5472 2$: popw y  ; arg|addr 
      001C1C A1 01            [ 1] 5473 	cp a,#1
      001C1E 27 02            [ 1] 5474 	jreq 3$
      001C20 85               [ 2] 5475 	popw x ; addr
      001C21 51               [ 1] 5476 	exgw x,y 
      001C22 90 FD            [ 4] 5477 3$: call (y)
      001C24 90 85            [ 2] 5478 	popw y 
      001C26 81               [ 4] 5479 	ret 
                                   5480 
                                   5481 ;------------------------------
                                   5482 ; BASIC: BYE 
                                   5483 ; halt mcu in its lowest power mode 
                                   5484 ; wait for reset or external interrupt
                                   5485 ; do a cold start on wakeup.
                                   5486 ;------------------------------
      001C27                       5487 bye:
      001C27 72 0D 52 30 FB   [ 2] 5488 	btjf UART1_SR,#UART_SR_TC,.
      001C2C 8E               [10] 5489 	halt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001C2D CC 04 EF         [ 2] 5490 	jp cold_start  
                                   5491 
                                   5492 ;----------------------------------
                                   5493 ; BASIC: AUTORUN ["file_name"] 
                                   5494 ; record in eeprom at adrress AUTORUN_NAME
                                   5495 ; the name of file to load and execute
                                   5496 ; at startup. 
                                   5497 ; empty string delete autorun name 
                                   5498 ; no argument display autorun name  
                                   5499 ; input:
                                   5500 ;   file_name   file to execute 
                                   5501 ; output:
                                   5502 ;   none
                                   5503 ;-----------------------------------
      001C30                       5504 autorun: 
      001C30 72 01 00 24 07   [ 2] 5505 	btjf flags,#FRUN,0$ 
      001C35 27 05            [ 1] 5506 	jreq 0$ 
      001C37 A6 07            [ 1] 5507 	ld a,#ERR_CMD_ONLY 
      001C39 CC 07 97         [ 2] 5508 	jp tb_error 
      001C3C                       5509 0$:	
      001C3C CD 08 87         [ 4] 5510 	call next_token
      001C3F 26 08            [ 1] 5511 	jrne 1$
      001C41 AE 40 00         [ 2] 5512 	ldw x,#AUTORUN_NAME
      001C44 CD 01 D7         [ 4] 5513 	call puts 
      001C47 4F               [ 1] 5514 	clr a 
      001C48 81               [ 4] 5515 	ret 
      001C49                       5516 1$:
      001C49 A1 02            [ 1] 5517 	cp a,#TK_QSTR
      001C4B 27 03            [ 1] 5518 	jreq 2$
      001C4D CC 07 95         [ 2] 5519 	jp syntax_error 
      001C50                       5520 2$:	
      001C50 7D               [ 1] 5521 	tnz (x) 
      001C51 26 08            [ 1] 5522 	jrne 3$
                                   5523 ; empty string, delete autorun 	
      001C53 CD 05 B4         [ 4] 5524 	call cancel_autorun
      001C56 72 5F 00 03      [ 1] 5525 	clr count 
      001C5A 81               [ 4] 5526 	ret 
      001C5B 89               [ 2] 5527 3$:	pushw x 
      001C5C 90 93            [ 1] 5528 	ldw y,x  
      001C5E CD 19 18         [ 4] 5529 	call search_file 
      001C61 25 05            [ 1] 5530 	jrc 4$ 
      001C63 A6 09            [ 1] 5531 	ld a,#ERR_NOT_FILE
      001C65 CC 07 97         [ 2] 5532 	jp tb_error  
      001C68                       5533 4$: 
      001C68 55 00 03 00 01   [ 1] 5534 	mov in,count 
      001C6D 72 5F 00 17      [ 1] 5535 	clr farptr 
      001C71 AE 40 00         [ 2] 5536 	ldw x,#AUTORUN_NAME
      001C74 CF 00 18         [ 2] 5537 	ldw farptr+1,x 
      001C77 1E 01            [ 2] 5538 	ldw x,(1,sp)  
      001C79 CD 02 B6         [ 4] 5539 	call strlen  ; return length in X 
      001C7C 5C               [ 2] 5540 	incw x 
      001C7D 90 85            [ 2] 5541 	popw y 
      001C7F 89               [ 2] 5542 	pushw x 
      001C80 5F               [ 1] 5543 	clrw x 
      001C81 CD 01 66         [ 4] 5544 	call write_block 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001C84                       5545 	_drop 2 
      001C84 5B 02            [ 2]    1     addw sp,#2 
      001C86 81               [ 4] 5546 	ret 
                                   5547 
                                   5548 ;----------------------------------
                                   5549 ; BASIC: SLEEP 
                                   5550 ; halt mcu until reset or external
                                   5551 ; interrupt.
                                   5552 ; Resume progam after SLEEP command
                                   5553 ;----------------------------------
      001C87                       5554 sleep:
      001C87 72 0D 52 30 FB   [ 2] 5555 	btjf UART1_SR,#UART_SR_TC,.
      001C8C 72 16 00 24      [ 1] 5556 	bset flags,#FSLEEP
      001C90 8E               [10] 5557 	halt 
      001C91 81               [ 4] 5558 	ret 
                                   5559 
                                   5560 ;-------------------------------
                                   5561 ; BASIC: PAUSE expr 
                                   5562 ; suspend execution for n msec.
                                   5563 ; input:
                                   5564 ;	none
                                   5565 ; output:
                                   5566 ;	none 
                                   5567 ;------------------------------
      001C92                       5568 pause:
      001C92 CD 10 90         [ 4] 5569 	call expression
      001C95 A1 04            [ 1] 5570 	cp a,#TK_INTGR
      001C97 27 03            [ 1] 5571 	jreq pause02 
      001C99 CC 07 95         [ 2] 5572 	jp syntax_error
      001C9C                       5573 pause02: 
      001C9C 5D               [ 2] 5574 1$: tnzw x 
      001C9D 27 04            [ 1] 5575 	jreq 2$
      001C9F 8F               [10] 5576 	wfi 
      001CA0 5A               [ 2] 5577 	decw x 
      001CA1 26 F9            [ 1] 5578 	jrne 1$
      001CA3 4F               [ 1] 5579 2$:	clr a 
      001CA4 81               [ 4] 5580 	ret 
                                   5581 
                                   5582 ;------------------------------
                                   5583 ; BASIC: AWU expr
                                   5584 ; halt mcu for 'expr' milliseconds
                                   5585 ; use Auto wakeup peripheral
                                   5586 ; all oscillators stopped except LSI
                                   5587 ; range: 1ms - 511ms
                                   5588 ; input:
                                   5589 ;  none
                                   5590 ; output:
                                   5591 ;  none:
                                   5592 ;------------------------------
      001CA5                       5593 awu:
      001CA5 CD 10 90         [ 4] 5594   call expression
      001CA8 A1 04            [ 1] 5595   cp a,#TK_INTGR
      001CAA 27 03            [ 1] 5596   jreq awu02
      001CAC CC 07 95         [ 2] 5597   jp syntax_error
      001CAF                       5598 awu02:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001CAF A3 14 00         [ 2] 5599   cpw x,#5120
      001CB2 2B 0C            [ 1] 5600   jrmi 1$ 
      001CB4 35 0F 50 F2      [ 1] 5601   mov AWU_TBR,#15 
      001CB8 A6 1E            [ 1] 5602   ld a,#30
      001CBA 62               [ 2] 5603   div x,a
      001CBB A6 10            [ 1] 5604   ld a,#16
      001CBD 62               [ 2] 5605   div x,a 
      001CBE 20 1E            [ 2] 5606   jra 4$
      001CC0                       5607 1$: 
      001CC0 A3 08 00         [ 2] 5608   cpw x,#2048
      001CC3 2B 09            [ 1] 5609   jrmi 2$ 
      001CC5 35 0E 50 F2      [ 1] 5610   mov AWU_TBR,#14
      001CC9 A6 50            [ 1] 5611   ld a,#80
      001CCB 62               [ 2] 5612   div x,a 
      001CCC 20 10            [ 2] 5613   jra 4$   
      001CCE                       5614 2$:
      001CCE 35 07 50 F2      [ 1] 5615   mov AWU_TBR,#7
      001CD2                       5616 3$:  
                                   5617 ; while X > 64  divide by 2 and increment AWU_TBR 
      001CD2 A3 00 40         [ 2] 5618   cpw x,#64 
      001CD5 23 07            [ 2] 5619   jrule 4$ 
      001CD7 72 5C 50 F2      [ 1] 5620   inc AWU_TBR 
      001CDB 54               [ 2] 5621   srlw x 
      001CDC 20 F4            [ 2] 5622   jra 3$ 
      001CDE                       5623 4$:
      001CDE 9F               [ 1] 5624   ld a, xl
      001CDF 4A               [ 1] 5625   dec a 
      001CE0 27 01            [ 1] 5626   jreq 5$
      001CE2 4A               [ 1] 5627   dec a 	
      001CE3                       5628 5$: 
      001CE3 A4 3E            [ 1] 5629   and a,#0x3e 
      001CE5 C7 50 F1         [ 1] 5630   ld AWU_APR,a 
      001CE8 72 18 50 F0      [ 1] 5631   bset AWU_CSR,#AWU_CSR_AWUEN
      001CEC 8E               [10] 5632   halt 
                                   5633 
      001CED 81               [ 4] 5634   ret 
                                   5635 
                                   5636 ;------------------------------
                                   5637 ; BASIC: TICKS
                                   5638 ; return msec ticks counter value 
                                   5639 ; input:
                                   5640 ; 	none 
                                   5641 ; output:
                                   5642 ;	X 		TK_INTGR
                                   5643 ;-------------------------------
      001CEE                       5644 get_ticks:
      001CEE CE 00 0F         [ 2] 5645 	ldw x,ticks 
      001CF1 A6 04            [ 1] 5646 	ld a,#TK_INTGR
      001CF3 81               [ 4] 5647 	ret 
                                   5648 
                                   5649 
                                   5650 
                                   5651 ;------------------------------
                                   5652 ; BASIC: ABS(expr)
                                   5653 ; return absolute value of expr.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   5654 ; input:
                                   5655 ;   none
                                   5656 ; output:
                                   5657 ;   X     	positive integer
                                   5658 ;-------------------------------
      001CF4                       5659 abs:
      001CF4 CD 0F 92         [ 4] 5660 	call func_args 
      001CF7 A1 01            [ 1] 5661 	cp a,#1 
      001CF9 27 03            [ 1] 5662 	jreq 0$ 
      001CFB CC 07 95         [ 2] 5663 	jp syntax_error
      001CFE                       5664 0$:  
      001CFE 85               [ 2] 5665     popw x   
      001CFF 9E               [ 1] 5666 	ld a,xh 
      001D00 A5 80            [ 1] 5667 	bcp a,#0x80 
      001D02 27 01            [ 1] 5668 	jreq 2$ 
      001D04 50               [ 2] 5669 	negw x 
      001D05 A6 04            [ 1] 5670 2$: ld a,#TK_INTGR 
      001D07 81               [ 4] 5671 	ret 
                                   5672 
                                   5673 ;------------------------------
                                   5674 ; BASIC: AND(expr1,expr2)
                                   5675 ; Apply bit AND relation between
                                   5676 ; the 2 arguments, i.e expr1 & expr2 
                                   5677 ; output:
                                   5678 ; 	A 		TK_INTGR
                                   5679 ;   X 		result 
                                   5680 ;------------------------------
      001D08                       5681 bit_and:
      001D08 CD 0F 92         [ 4] 5682 	call func_args 
      001D0B A1 02            [ 1] 5683 	cp a,#2
      001D0D 27 03            [ 1] 5684 	jreq 1$
      001D0F CC 07 95         [ 2] 5685 	jp syntax_error 
      001D12 85               [ 2] 5686 1$:	popw x 
      001D13 9E               [ 1] 5687 	ld a,xh 
      001D14 14 01            [ 1] 5688 	and a,(1,sp)
      001D16 95               [ 1] 5689 	ld xh,a 
      001D17 9F               [ 1] 5690 	ld a,xl
      001D18 14 02            [ 1] 5691 	and a,(2,sp)
      001D1A 97               [ 1] 5692 	ld xl,a 
      001D1B                       5693 	_drop 2 
      001D1B 5B 02            [ 2]    1     addw sp,#2 
      001D1D A6 04            [ 1] 5694 	ld a,#TK_INTGR
      001D1F 81               [ 4] 5695 	ret
                                   5696 
                                   5697 ;------------------------------
                                   5698 ; BASIC: OR(expr1,expr2)
                                   5699 ; Apply bit OR relation between
                                   5700 ; the 2 arguments, i.e expr1 | expr2 
                                   5701 ; output:
                                   5702 ; 	A 		TK_INTGR
                                   5703 ;   X 		result 
                                   5704 ;------------------------------
      001D20                       5705 bit_or:
      001D20 CD 0F 92         [ 4] 5706 	call func_args 
      001D23 A1 02            [ 1] 5707 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001D25 27 03            [ 1] 5708 	jreq 1$
      001D27 CC 07 95         [ 2] 5709 	jp syntax_error 
      001D2A                       5710 1$: 
      001D2A 85               [ 2] 5711 	popw x 
      001D2B 9E               [ 1] 5712 	ld a,xh 
      001D2C 1A 01            [ 1] 5713 	or a,(1,sp)
      001D2E 95               [ 1] 5714 	ld xh,a 
      001D2F 9F               [ 1] 5715 	ld a,xl 
      001D30 1A 02            [ 1] 5716 	or a,(2,sp)
      001D32 97               [ 1] 5717 	ld xl,a 
      001D33                       5718 	_drop 2 
      001D33 5B 02            [ 2]    1     addw sp,#2 
      001D35 A6 04            [ 1] 5719 	ld a,#TK_INTGR 
      001D37 81               [ 4] 5720 	ret
                                   5721 
                                   5722 ;------------------------------
                                   5723 ; BASIC: XOR(expr1,expr2)
                                   5724 ; Apply bit XOR relation between
                                   5725 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5726 ; output:
                                   5727 ; 	A 		TK_INTGR
                                   5728 ;   X 		result 
                                   5729 ;------------------------------
      001D38                       5730 bit_xor:
      001D38 CD 0F 92         [ 4] 5731 	call func_args 
      001D3B A1 02            [ 1] 5732 	cp a,#2
      001D3D 27 03            [ 1] 5733 	jreq 1$
      001D3F CC 07 95         [ 2] 5734 	jp syntax_error 
      001D42                       5735 1$: 
      001D42 85               [ 2] 5736 	popw x 
      001D43 9E               [ 1] 5737 	ld a,xh 
      001D44 18 01            [ 1] 5738 	xor a,(1,sp)
      001D46 95               [ 1] 5739 	ld xh,a 
      001D47 9F               [ 1] 5740 	ld a,xl 
      001D48 18 02            [ 1] 5741 	xor a,(2,sp)
      001D4A 97               [ 1] 5742 	ld xl,a 
      001D4B                       5743 	_drop 2 
      001D4B 5B 02            [ 2]    1     addw sp,#2 
      001D4D A6 04            [ 1] 5744 	ld a,#TK_INTGR 
      001D4F 81               [ 4] 5745 	ret 
                                   5746 
                                   5747 ;------------------------------
                                   5748 ; BASIC: LSHIFT(expr1,expr2)
                                   5749 ; logical shift left expr1 by 
                                   5750 ; expr2 bits 
                                   5751 ; output:
                                   5752 ; 	A 		TK_INTGR
                                   5753 ;   X 		result 
                                   5754 ;------------------------------
      001D50                       5755 lshift:
      001D50 CD 0F 92         [ 4] 5756 	call func_args
      001D53 A1 02            [ 1] 5757 	cp a,#2 
      001D55 27 03            [ 1] 5758 	jreq 1$
      001D57 CC 07 95         [ 2] 5759 	jp syntax_error
      001D5A 90 85            [ 2] 5760 1$: popw y   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001D5C 85               [ 2] 5761 	popw x 
      001D5D 90 5D            [ 2] 5762 	tnzw y 
      001D5F 27 05            [ 1] 5763 	jreq 4$
      001D61 58               [ 2] 5764 2$:	sllw x 
      001D62 90 5A            [ 2] 5765 	decw y 
      001D64 26 FB            [ 1] 5766 	jrne 2$
      001D66                       5767 4$:  
      001D66 A6 04            [ 1] 5768 	ld a,#TK_INTGR
      001D68 81               [ 4] 5769 	ret
                                   5770 
                                   5771 ;------------------------------
                                   5772 ; BASIC: RSHIFT(expr1,expr2)
                                   5773 ; logical shift right expr1 by 
                                   5774 ; expr2 bits.
                                   5775 ; output:
                                   5776 ; 	A 		TK_INTGR
                                   5777 ;   X 		result 
                                   5778 ;------------------------------
      001D69                       5779 rshift:
      001D69 CD 0F 92         [ 4] 5780 	call func_args
      001D6C A1 02            [ 1] 5781 	cp a,#2 
      001D6E 27 03            [ 1] 5782 	jreq 1$
      001D70 CC 07 95         [ 2] 5783 	jp syntax_error
      001D73 90 85            [ 2] 5784 1$: popw y  
      001D75 85               [ 2] 5785 	popw x
      001D76 90 5D            [ 2] 5786 	tnzw y 
      001D78 27 05            [ 1] 5787 	jreq 4$
      001D7A 54               [ 2] 5788 2$:	srlw x 
      001D7B 90 5A            [ 2] 5789 	decw y 
      001D7D 26 FB            [ 1] 5790 	jrne 2$
      001D7F                       5791 4$:  
      001D7F A6 04            [ 1] 5792 	ld a,#TK_INTGR
      001D81 81               [ 4] 5793 	ret
                                   5794 
                                   5795 ;--------------------------
                                   5796 ; BASIC: FCPU integer
                                   5797 ; set CPU frequency 
                                   5798 ;-------------------------- 
                                   5799 
      001D82                       5800 fcpu:
      001D82 A6 04            [ 1] 5801 	ld a,#TK_INTGR
      001D84 CD 0F 85         [ 4] 5802 	call expect 
      001D87 9F               [ 1] 5803 	ld a,xl 
      001D88 A4 07            [ 1] 5804 	and a,#7 
      001D8A C7 50 C6         [ 1] 5805 	ld CLK_CKDIVR,a 
      001D8D 81               [ 4] 5806 	ret 
                                   5807 
                                   5808 ;------------------------------
                                   5809 ; BASIC: PMODE pin#, mode 
                                   5810 ; Arduino pin. 
                                   5811 ; define pin as input or output
                                   5812 ; pin#: {0..15}
                                   5813 ; mode: INPUT|OUTPUT  
                                   5814 ;------------------------------
                           000001  5815 	PINNO=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           000001  5816 	VSIZE=1
      001D8E                       5817 pin_mode:
      001D8E                       5818 	_vars VSIZE 
      001D8E 52 01            [ 2]    1     sub sp,#VSIZE 
      001D90 CD 0F 97         [ 4] 5819 	call arg_list 
      001D93 A1 02            [ 1] 5820 	cp a,#2 
      001D95 27 03            [ 1] 5821 	jreq 1$
      001D97 CC 07 95         [ 2] 5822 	jp syntax_error 
      001D9A 90 85            [ 2] 5823 1$: popw y ; mode 
      001D9C 85               [ 2] 5824 	popw x ; Dx pin 
      001D9D CD 1D CF         [ 4] 5825 	call select_pin 
      001DA0 6B 01            [ 1] 5826 	ld (PINNO,sp),a  
      001DA2 A6 01            [ 1] 5827 	ld a,#1 
      001DA4 0D 01            [ 1] 5828 	tnz (PINNO,sp)
      001DA6 27 0B            [ 1] 5829 	jreq 4$
      001DA8 48               [ 1] 5830 2$:	sll a 
      001DA9 0A 01            [ 1] 5831 	dec (PINNO,sp)
      001DAB 26 FB            [ 1] 5832 	jrne 2$ 
      001DAD 6B 01            [ 1] 5833 	ld (PINNO,sp),a
      001DAF EA 03            [ 1] 5834 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001DB1 E7 03            [ 1] 5835 	ld (GPIO_CR1,x),a 
      001DB3 90 A3 00 01      [ 2] 5836 4$:	cpw y,#OUTP 
      001DB7 27 07            [ 1] 5837 	jreq 6$
                                   5838 ; input mode
      001DB9 7B 01            [ 1] 5839 	ld a,(PINNO,sp)
      001DBB 43               [ 1] 5840 	cpl a 
      001DBC E4 02            [ 1] 5841 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001DBE 20 0A            [ 2] 5842 	jra 9$
      001DC0                       5843 6$: ;output mode  
      001DC0 7B 01            [ 1] 5844 	ld a,(PINNO,sp)
      001DC2 EA 04            [ 1] 5845 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001DC4 E7 04            [ 1] 5846 	ld (GPIO_CR2,x),a 
      001DC6 7B 01            [ 1] 5847 	ld a,(PINNO,sp)
      001DC8 EA 02            [ 1] 5848 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001DCA E7 02            [ 1] 5849 9$:	ld (GPIO_DDR,x),a 
      001DCC                       5850 	_drop VSIZE 
      001DCC 5B 01            [ 2]    1     addw sp,#VSIZE 
      001DCE 81               [ 4] 5851 	ret
                                   5852 
                                   5853 ;------------------------
                                   5854 ; select Arduino pin 
                                   5855 ; input:
                                   5856 ;   X 	 {0..15} Arduino Dx 
                                   5857 ; output:
                                   5858 ;   A     stm8s208 pin 
                                   5859 ;   X     base address s208 GPIO port 
                                   5860 ;---------------------------
      001DCF                       5861 select_pin:
      001DCF 58               [ 2] 5862 	sllw x 
      001DD0 1C 1D DF         [ 2] 5863 	addw x,#arduino_to_8s208 
      001DD3 FE               [ 2] 5864 	ldw x,(x)
      001DD4 9F               [ 1] 5865 	ld a,xl 
      001DD5 88               [ 1] 5866 	push a 
      001DD6 5E               [ 1] 5867 	swapw x 
      001DD7 A6 05            [ 1] 5868 	ld a,#5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001DD9 42               [ 4] 5869 	mul x,a 
      001DDA 1C 50 00         [ 2] 5870 	addw x,#GPIO_BASE 
      001DDD 84               [ 1] 5871 	pop a 
      001DDE 81               [ 4] 5872 	ret 
                                   5873 ; translation from Arduino D0..D15 to stm8s208rb 
      001DDF                       5874 arduino_to_8s208:
      001DDF 03 06                 5875 .byte 3,6 ; D0 
      001DE1 03 05                 5876 .byte 3,5 ; D1 
      001DE3 04 00                 5877 .byte 4,0 ; D2 
      001DE5 02 01                 5878 .byte 2,1 ; D3
      001DE7 06 00                 5879 .byte 6,0 ; D4
      001DE9 02 02                 5880 .byte 2,2 ; D5
      001DEB 02 03                 5881 .byte 2,3 ; D6
      001DED 03 01                 5882 .byte 3,1 ; D7
      001DEF 03 03                 5883 .byte 3,3 ; D8
      001DF1 02 04                 5884 .byte 2,4 ; D9
      001DF3 04 05                 5885 .byte 4,5 ; D10
      001DF5 02 06                 5886 .byte 2,6 ; D11
      001DF7 02 07                 5887 .byte 2,7 ; D12
      001DF9 02 05                 5888 .byte 2,5 ; D13
      001DFB 04 02                 5889 .byte 4,2 ; D14
      001DFD 04 01                 5890 .byte 4,1 ; D15
                                   5891 
                                   5892 
                                   5893 ;------------------------------
                                   5894 ; BASIC: RND(expr)
                                   5895 ; return random number 
                                   5896 ; between 1 and expr inclusive
                                   5897 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5898 ; input:
                                   5899 ; 	none 
                                   5900 ; output:
                                   5901 ;	X 		random positive integer 
                                   5902 ;------------------------------
      001DFF                       5903 random:
      001DFF CD 0F 92         [ 4] 5904 	call func_args 
      001E02 A1 01            [ 1] 5905 	cp a,#1
      001E04 27 03            [ 1] 5906 	jreq 1$
      001E06 CC 07 95         [ 2] 5907 	jp syntax_error
      001E09                       5908 1$:  
      001E09 A6 80            [ 1] 5909 	ld a,#0x80 
      001E0B 15 01            [ 1] 5910 	bcp a,(1,sp)
      001E0D 27 05            [ 1] 5911 	jreq 2$
      001E0F A6 0A            [ 1] 5912 	ld a,#ERR_BAD_VALUE
      001E11 CC 07 97         [ 2] 5913 	jp tb_error
      001E14                       5914 2$: 
                                   5915 ; acc16=(x<<5)^x 
      001E14 CE 00 13         [ 2] 5916 	ldw x,seedx 
      001E17 58               [ 2] 5917 	sllw x 
      001E18 58               [ 2] 5918 	sllw x 
      001E19 58               [ 2] 5919 	sllw x 
      001E1A 58               [ 2] 5920 	sllw x 
      001E1B 58               [ 2] 5921 	sllw x 
      001E1C 9E               [ 1] 5922 	ld a,xh 
      001E1D C8 00 13         [ 1] 5923 	xor a,seedx 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001E20 C7 00 0C         [ 1] 5924 	ld acc16,a 
      001E23 9F               [ 1] 5925 	ld a,xl 
      001E24 C8 00 14         [ 1] 5926 	xor a,seedx+1 
      001E27 C7 00 0D         [ 1] 5927 	ld acc8,a 
                                   5928 ; seedx=seedy 
      001E2A CE 00 15         [ 2] 5929 	ldw x,seedy 
      001E2D CF 00 13         [ 2] 5930 	ldw seedx,x  
                                   5931 ; seedy=seedy^(seedy>>1)
      001E30 90 54            [ 2] 5932 	srlw y 
      001E32 90 9E            [ 1] 5933 	ld a,yh 
      001E34 C8 00 15         [ 1] 5934 	xor a,seedy 
      001E37 C7 00 15         [ 1] 5935 	ld seedy,a  
      001E3A 90 9F            [ 1] 5936 	ld a,yl 
      001E3C C8 00 16         [ 1] 5937 	xor a,seedy+1 
      001E3F C7 00 16         [ 1] 5938 	ld seedy+1,a 
                                   5939 ; acc16>>3 
      001E42 CE 00 0C         [ 2] 5940 	ldw x,acc16 
      001E45 54               [ 2] 5941 	srlw x 
      001E46 54               [ 2] 5942 	srlw x 
      001E47 54               [ 2] 5943 	srlw x 
                                   5944 ; x=acc16^x 
      001E48 9E               [ 1] 5945 	ld a,xh 
      001E49 C8 00 0C         [ 1] 5946 	xor a,acc16 
      001E4C 95               [ 1] 5947 	ld xh,a 
      001E4D 9F               [ 1] 5948 	ld a,xl 
      001E4E C8 00 0D         [ 1] 5949 	xor a,acc8 
      001E51 97               [ 1] 5950 	ld xl,a 
                                   5951 ; seedy=x^seedy 
      001E52 C8 00 16         [ 1] 5952 	xor a,seedy+1
      001E55 97               [ 1] 5953 	ld xl,a 
      001E56 9E               [ 1] 5954 	ld a,xh 
      001E57 C8 00 15         [ 1] 5955 	xor a,seedy
      001E5A 95               [ 1] 5956 	ld xh,a 
      001E5B CF 00 15         [ 2] 5957 	ldw seedy,x 
                                   5958 ; return seedy modulo expr + 1 
      001E5E 90 85            [ 2] 5959 	popw y 
      001E60 65               [ 2] 5960 	divw x,y 
      001E61 93               [ 1] 5961 	ldw x,y 
      001E62 5C               [ 2] 5962 	incw x 
      001E63                       5963 10$:
      001E63 A6 04            [ 1] 5964 	ld a,#TK_INTGR
      001E65 81               [ 4] 5965 	ret 
                                   5966 
                                   5967 ;---------------------------------
                                   5968 ; BASIC: WORDS 
                                   5969 ; affiche la listes des mots du
                                   5970 ; dictionnaire ainsi que le nombre
                                   5971 ; de mots.
                                   5972 ;---------------------------------
                           000001  5973 	WLEN=1 ; word length
                           000002  5974 	LLEN=2 ; character sent to console
                           000003  5975 	WCNT=3 ; count words printed 
                           000003  5976 	VSIZE=3 
      001E66                       5977 words:
      001E66                       5978 	_vars VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001E66 52 03            [ 2]    1     sub sp,#VSIZE 
      001E68 0F 02            [ 1] 5979 	clr (LLEN,sp)
      001E6A 0F 03            [ 1] 5980 	clr (WCNT,sp)
      001E6C 90 AE 25 8A      [ 2] 5981 	ldw y,#kword_dict+2
      001E70 93               [ 1] 5982 0$:	ldw x,y
      001E71 F6               [ 1] 5983 	ld a,(x)
      001E72 A4 0F            [ 1] 5984 	and a,#15 
      001E74 6B 01            [ 1] 5985 	ld (WLEN,sp),a 
      001E76 0C 03            [ 1] 5986 	inc (WCNT,sp)
      001E78 5C               [ 2] 5987 1$:	incw x 
      001E79 F6               [ 1] 5988 	ld a,(x)
      001E7A CD 01 C4         [ 4] 5989 	call putc 
      001E7D 0C 02            [ 1] 5990 	inc (LLEN,sp)
      001E7F 0A 01            [ 1] 5991 	dec (WLEN,sp)
      001E81 26 F5            [ 1] 5992 	jrne 1$
      001E83 A6 46            [ 1] 5993 	ld a,#70
      001E85 11 02            [ 1] 5994 	cp a,(LLEN,sp)
      001E87 2B 09            [ 1] 5995 	jrmi 2$   
      001E89 A6 20            [ 1] 5996 	ld a,#SPACE 
      001E8B CD 01 C4         [ 4] 5997 	call putc 
      001E8E 0C 02            [ 1] 5998 	inc (LLEN,sp) 
      001E90 20 07            [ 2] 5999 	jra 3$
      001E92 A6 0D            [ 1] 6000 2$: ld a,#CR 
      001E94 CD 01 C4         [ 4] 6001 	call putc 
      001E97 0F 02            [ 1] 6002 	clr (LLEN,sp)
      001E99 72 A2 00 02      [ 2] 6003 3$:	subw y,#2 
      001E9D 90 FE            [ 2] 6004 	ldw y,(y)
      001E9F 26 CF            [ 1] 6005 	jrne 0$ 
      001EA1 A6 0D            [ 1] 6006 	ld a,#CR 
      001EA3 CD 01 C4         [ 4] 6007 	call putc  
      001EA6 5F               [ 1] 6008 	clrw x 
      001EA7 7B 03            [ 1] 6009 	ld a,(WCNT,sp)
      001EA9 97               [ 1] 6010 	ld xl,a 
      001EAA CD 09 2D         [ 4] 6011 	call print_int 
      001EAD AE 1E B6         [ 2] 6012 	ldw x,#words_count_msg
      001EB0 CD 01 D7         [ 4] 6013 	call puts 
      001EB3                       6014 	_drop VSIZE 
      001EB3 5B 03            [ 2]    1     addw sp,#VSIZE 
      001EB5 81               [ 4] 6015 	ret 
      001EB6 20 77 6F 72 64 73 20  6016 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   6017 
                                   6018 
                                   6019 ;-----------------------------
                                   6020 ; BASIC: TIMER expr 
                                   6021 ; initialize count down timer 
                                   6022 ;-----------------------------
      001ECC                       6023 set_timer:
      001ECC CD 0F 97         [ 4] 6024 	call arg_list
      001ECF A1 01            [ 1] 6025 	cp a,#1 
      001ED1 27 03            [ 1] 6026 	jreq 1$
      001ED3 CC 07 95         [ 2] 6027 	jp syntax_error
      001ED6                       6028 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001ED6 85               [ 2] 6029 	popw x 
      001ED7 CF 00 11         [ 2] 6030 	ldw timer,x 
      001EDA 81               [ 4] 6031 	ret 
                                   6032 
                                   6033 ;------------------------------
                                   6034 ; BASIC: TIMEOUT 
                                   6035 ; return state of timer 
                                   6036 ;------------------------------
      001EDB                       6037 timeout:
      001EDB CE 00 11         [ 2] 6038 	ldw x,timer 
      001EDE                       6039 logical_complement:
      001EDE 53               [ 2] 6040 	cplw x 
      001EDF A3 FF FF         [ 2] 6041 	cpw x,#-1
      001EE2 27 01            [ 1] 6042 	jreq 2$
      001EE4 5F               [ 1] 6043 	clrw x 
      001EE5 A6 04            [ 1] 6044 2$:	ld a,#TK_INTGR
      001EE7 81               [ 4] 6045 	ret 
                                   6046 
                                   6047 ;--------------------------------
                                   6048 ; BASIC NOT(expr) 
                                   6049 ; return logical complement of expr
                                   6050 ;--------------------------------
      001EE8                       6051 func_not:
      001EE8 CD 0F 92         [ 4] 6052 	call func_args  
      001EEB A1 01            [ 1] 6053 	cp a,#1
      001EED 27 03            [ 1] 6054 	jreq 1$
      001EEF CC 07 95         [ 2] 6055 	jp syntax_error
      001EF2 85               [ 2] 6056 1$:	popw x 
      001EF3 20 E9            [ 2] 6057 	jra logical_complement
                                   6058 
                                   6059 
                                   6060 
                                   6061 ;-----------------------------------
                                   6062 ; BASIC: IWDGEN expr1 
                                   6063 ; enable independant watchdog timer
                                   6064 ; expr1 is delay in multiple of 62.5µsec
                                   6065 ; expr1 -> {1..16383}
                                   6066 ;-----------------------------------
      001EF5                       6067 enable_iwdg:
      001EF5 CD 0F 97         [ 4] 6068 	call arg_list
      001EF8 A1 01            [ 1] 6069 	cp a,#1 
      001EFA 27 03            [ 1] 6070 	jreq 1$
      001EFC CC 07 95         [ 2] 6071 	jp syntax_error 
      001EFF 85               [ 2] 6072 1$: popw x 
      001F00 4B 00            [ 1] 6073 	push #0
      001F02 35 CC 50 E0      [ 1] 6074 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001F06 9E               [ 1] 6075 	ld a,xh 
      001F07 A4 3F            [ 1] 6076 	and a,#0x3f
      001F09 95               [ 1] 6077 	ld xh,a  
      001F0A A3 00 FF         [ 2] 6078 2$:	cpw x,#255
      001F0D 23 06            [ 2] 6079 	jrule 3$
      001F0F 0C 01            [ 1] 6080 	inc (1,sp)
      001F11 98               [ 1] 6081 	rcf 
      001F12 56               [ 2] 6082 	rrcw x 
      001F13 20 F5            [ 2] 6083 	jra 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001F15 35 55 50 E0      [ 1] 6084 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F19 84               [ 1] 6085 	pop a  
      001F1A C7 50 E1         [ 1] 6086 	ld IWDG_PR,a 
      001F1D 9F               [ 1] 6087 	ld a,xl
      001F1E 4A               [ 1] 6088 	dec a 
      001F1F 35 55 50 E0      [ 1] 6089 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F23 C7 50 E2         [ 1] 6090 	ld IWDG_RLR,a 
      001F26 35 AA 50 E0      [ 1] 6091 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001F2A 81               [ 4] 6092 	ret 
                                   6093 
                                   6094 
                                   6095 ;-----------------------------------
                                   6096 ; BASIC: IWDGREF  
                                   6097 ; refresh independant watchdog count down 
                                   6098 ; timer before it reset MCU. 
                                   6099 ;-----------------------------------
      001F2B                       6100 refresh_iwdg:
      001F2B 35 AA 50 E0      [ 1] 6101 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001F2F 81               [ 4] 6102 	ret 
                                   6103 
                                   6104 
                                   6105 ;-------------------------------------
                                   6106 ; BASIC: LOG(expr)
                                   6107 ; return logarithm base 2 of expr 
                                   6108 ; this is the position of most significant
                                   6109 ; bit set. 
                                   6110 ; input: 
                                   6111 ; output:
                                   6112 ;   X     log2 
                                   6113 ;   A     TK_INTGR 
                                   6114 ;*********************************
      001F30                       6115 log2:
      001F30 CD 0F 92         [ 4] 6116 	call func_args 
      001F33 A1 01            [ 1] 6117 	cp a,#1 
      001F35 27 03            [ 1] 6118 	jreq 1$
      001F37 CC 07 95         [ 2] 6119 	jp syntax_error 
      001F3A 85               [ 2] 6120 1$: popw x 
      001F3B                       6121 leading_one:
      001F3B 5D               [ 2] 6122 	tnzw x 
      001F3C 27 0A            [ 1] 6123 	jreq 4$
      001F3E A6 0F            [ 1] 6124 	ld a,#15 
      001F40 59               [ 2] 6125 2$: rlcw x 
      001F41 25 03            [ 1] 6126     jrc 3$
      001F43 4A               [ 1] 6127 	dec a 
      001F44 20 FA            [ 2] 6128 	jra 2$
      001F46 5F               [ 1] 6129 3$: clrw x 
      001F47 97               [ 1] 6130     ld xl,a
      001F48 A6 04            [ 1] 6131 4$:	ld a,#TK_INTGR
      001F4A 81               [ 4] 6132 	ret 
                                   6133 
                                   6134 ;-----------------------------------
                                   6135 ; BASIC: BIT(expr) 
                                   6136 ; expr ->{0..15}
                                   6137 ; return 2^expr 
                                   6138 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   6139 ;    x    2^expr 
                                   6140 ;-----------------------------------
      001F4B                       6141 bitmask:
      001F4B CD 0F 92         [ 4] 6142     call func_args 
      001F4E A1 01            [ 1] 6143 	cp a,#1
      001F50 27 03            [ 1] 6144 	jreq 1$
      001F52 CC 07 95         [ 2] 6145 	jp syntax_error 
      001F55 85               [ 2] 6146 1$: popw x 
      001F56 9F               [ 1] 6147 	ld a,xl 
      001F57 A4 0F            [ 1] 6148 	and a,#15
      001F59 5F               [ 1] 6149 	clrw x 
      001F5A 5C               [ 2] 6150 	incw x 
      001F5B 4D               [ 1] 6151 2$: tnz a 
      001F5C 27 04            [ 1] 6152 	jreq 3$
      001F5E 58               [ 2] 6153 	slaw x 
      001F5F 4A               [ 1] 6154 	dec a 
      001F60 20 F9            [ 2] 6155 	jra 2$ 
      001F62 A6 04            [ 1] 6156 3$: ld a,#TK_INTGR
      001F64 81               [ 4] 6157 	ret 
                                   6158 
                                   6159 ;------------------------------
                                   6160 ; BASIC: INVERT(expr)
                                   6161 ; 1's complement 
                                   6162 ;--------------------------------
      001F65                       6163 invert:
      001F65 CD 0F 92         [ 4] 6164 	call func_args
      001F68 A1 01            [ 1] 6165 	cp a,#1 
      001F6A 27 03            [ 1] 6166 	jreq 1$
      001F6C CC 07 95         [ 2] 6167 	jp syntax_error
      001F6F 85               [ 2] 6168 1$: popw x  
      001F70 53               [ 2] 6169 	cplw x 
      001F71 A6 04            [ 1] 6170 	ld a,#TK_INTGR 
      001F73 81               [ 4] 6171 	ret 
                                   6172 
                                   6173 ;------------------------------
                                   6174 ; BASIC: DO 
                                   6175 ; initiate a DO ... UNTIL loop 
                                   6176 ;------------------------------
                           000003  6177 	DOLP_ADR=3 
                           000005  6178 	DOLP_INW=5
                           000004  6179 	VSIZE=4 
      001F74                       6180 do_loop:
      001F74 85               [ 2] 6181 	popw x 
      001F75                       6182 	_vars VSIZE 
      001F75 52 04            [ 2]    1     sub sp,#VSIZE 
      001F77 89               [ 2] 6183 	pushw x 
      001F78 90 CE 00 04      [ 2] 6184 	ldw y,basicptr 
      001F7C 17 03            [ 2] 6185 	ldw (DOLP_ADR,sp),y
      001F7E 90 CE 00 00      [ 2] 6186 	ldw y,in.w 
      001F82 17 05            [ 2] 6187 	ldw (DOLP_INW,sp),y
      001F84 72 5C 00 21      [ 1] 6188 	inc loop_depth 
      001F88 81               [ 4] 6189 	ret 
                                   6190 
                                   6191 ;--------------------------------
                                   6192 ; BASIC: UNTIL expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   6193 ; loop if exprssion is false 
                                   6194 ; else terminate loop
                                   6195 ;--------------------------------
      001F89                       6196 until: 
      001F89 72 5D 00 21      [ 1] 6197 	tnz loop_depth 
      001F8D 26 03            [ 1] 6198 	jrne 1$ 
      001F8F CC 07 95         [ 2] 6199 	jp syntax_error 
      001F92                       6200 1$: 
      001F92 CD 10 D4         [ 4] 6201 	call relation 
      001F95 A1 04            [ 1] 6202 	cp a,#TK_INTGR
      001F97 27 03            [ 1] 6203 	jreq 2$
      001F99 CC 07 95         [ 2] 6204 	jp syntax_error
      001F9C                       6205 2$: 
      001F9C 5D               [ 2] 6206 	tnzw x 
      001F9D 26 10            [ 1] 6207 	jrne 9$
      001F9F 1E 03            [ 2] 6208 	ldw x,(DOLP_ADR,sp)
      001FA1 CF 00 04         [ 2] 6209 	ldw basicptr,x 
      001FA4 E6 02            [ 1] 6210 	ld a,(2,x)
      001FA6 C7 00 03         [ 1] 6211 	ld count,a 
      001FA9 1E 05            [ 2] 6212 	ldw x,(DOLP_INW,sp)
      001FAB CF 00 00         [ 2] 6213 	ldw in.w,x 
      001FAE 81               [ 4] 6214 	ret 
      001FAF                       6215 9$:	; remove loop data from stack  
      001FAF 85               [ 2] 6216 	popw x
      001FB0                       6217 	_drop VSIZE
      001FB0 5B 04            [ 2]    1     addw sp,#VSIZE 
      001FB2 72 5A 00 21      [ 1] 6218 	dec loop_depth 
      001FB6 FC               [ 2] 6219 	jp (x)
                                   6220 
                                   6221 ;--------------------------
                                   6222 ; BASIC: PRTA...PRTI  
                                   6223 ;  return constant value 
                                   6224 ;  PORT  offset in GPIO
                                   6225 ;  array
                                   6226 ;---------------------------
      001FB7                       6227 const_porta:
      001FB7 AE 00 00         [ 2] 6228 	ldw x,#0
      001FBA A6 04            [ 1] 6229 	ld a,#TK_INTGR 
      001FBC 81               [ 4] 6230 	ret 
      001FBD                       6231 const_portb:
      001FBD AE 00 01         [ 2] 6232 	ldw x,#1
      001FC0 A6 04            [ 1] 6233 	ld a,#TK_INTGR 
      001FC2 81               [ 4] 6234 	ret 
      001FC3                       6235 const_portc:
      001FC3 AE 00 02         [ 2] 6236 	ldw x,#2
      001FC6 A6 04            [ 1] 6237 	ld a,#TK_INTGR 
      001FC8 81               [ 4] 6238 	ret 
      001FC9                       6239 const_portd:
      001FC9 AE 00 03         [ 2] 6240 	ldw x,#3
      001FCC A6 04            [ 1] 6241 	ld a,#TK_INTGR 
      001FCE 81               [ 4] 6242 	ret 
      001FCF                       6243 const_porte:
      001FCF AE 00 04         [ 2] 6244 	ldw x,#4
      001FD2 A6 04            [ 1] 6245 	ld a,#TK_INTGR 
      001FD4 81               [ 4] 6246 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001FD5                       6247 const_portf:
      001FD5 AE 00 05         [ 2] 6248 	ldw x,#5
      001FD8 A6 04            [ 1] 6249 	ld a,#TK_INTGR 
      001FDA 81               [ 4] 6250 	ret 
      001FDB                       6251 const_portg:
      001FDB AE 00 06         [ 2] 6252 	ldw x,#6
      001FDE A6 04            [ 1] 6253 	ld a,#TK_INTGR 
      001FE0 81               [ 4] 6254 	ret 
      001FE1                       6255 const_porth:
      001FE1 AE 00 07         [ 2] 6256 	ldw x,#7
      001FE4 A6 04            [ 1] 6257 	ld a,#TK_INTGR 
      001FE6 81               [ 4] 6258 	ret 
      001FE7                       6259 const_porti:
      001FE7 AE 00 08         [ 2] 6260 	ldw x,#8
      001FEA A6 04            [ 1] 6261 	ld a,#TK_INTGR 
      001FEC 81               [ 4] 6262 	ret 
                                   6263 
                                   6264 ;-------------------------------
                                   6265 ; following return constant 
                                   6266 ; related to GPIO register offset 
                                   6267 ;---------------------------------
      001FED                       6268 const_odr:
      001FED A6 04            [ 1] 6269 	ld a,#TK_INTGR 
      001FEF AE 00 00         [ 2] 6270 	ldw x,#GPIO_ODR
      001FF2 81               [ 4] 6271 	ret 
      001FF3                       6272 const_idr:
      001FF3 A6 04            [ 1] 6273 	ld a,#TK_INTGR 
      001FF5 AE 00 01         [ 2] 6274 	ldw x,#GPIO_IDR
      001FF8 81               [ 4] 6275 	ret 
      001FF9                       6276 const_ddr:
      001FF9 A6 04            [ 1] 6277 	ld a,#TK_INTGR 
      001FFB AE 00 02         [ 2] 6278 	ldw x,#GPIO_DDR
      001FFE 81               [ 4] 6279 	ret 
      001FFF                       6280 const_cr1:
      001FFF A6 04            [ 1] 6281 	ld a,#TK_INTGR 
      002001 AE 00 03         [ 2] 6282 	ldw x,#GPIO_CR1
      002004 81               [ 4] 6283 	ret 
      002005                       6284 const_cr2:
      002005 A6 04            [ 1] 6285 	ld a,#TK_INTGR 
      002007 AE 00 04         [ 2] 6286 	ldw x,#GPIO_CR2
      00200A 81               [ 4] 6287 	ret 
                                   6288 ;-------------------------
                                   6289 ;  constant for port mode
                                   6290 ;  used by PMODE 
                                   6291 ;  input or output
                                   6292 ;------------------------
      00200B                       6293 const_output:
      00200B A6 04            [ 1] 6294 	ld a,#TK_INTGR 
      00200D AE 00 01         [ 2] 6295 	ldw x,#OUTP
      002010 81               [ 4] 6296 	ret 
      002011                       6297 const_input:
      002011 A6 04            [ 1] 6298 	ld a,#TK_INTGR 
      002013 AE 00 00         [ 2] 6299 	ldw x,#INP 
      002016 81               [ 4] 6300 	ret 
                                   6301 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   6302 ; memory area constants
                                   6303 ;-----------------------
      002017                       6304 const_eeprom_base:
      002017 A6 04            [ 1] 6305 	ld a,#TK_INTGR 
      002019 AE 40 00         [ 2] 6306 	ldw x,#EEPROM_BASE 
      00201C 81               [ 4] 6307 	ret 
                                   6308 
                                   6309 ;---------------------------
                                   6310 ; BASIC: DATA 
                                   6311 ; when the interpreter find 
                                   6312 ; a DATA line it skip it.
                                   6313 ;---------------------------
      00201D                       6314 data:
      00201D 55 00 03 00 01   [ 1] 6315 	mov in,count 
      002022 81               [ 4] 6316 	ret 
                                   6317 
                                   6318 ;---------------------------
                                   6319 ; BASIC: DATLN  *expr*
                                   6320 ; set DATA pointer at line# 
                                   6321 ; specified by *expr* 
                                   6322 ;---------------------------
      002023                       6323 data_line:
      002023 CD 10 90         [ 4] 6324 	call expression
      002026 A1 04            [ 1] 6325 	cp a,#TK_INTGR
      002028 27 03            [ 1] 6326 	jreq 1$
      00202A CC 07 95         [ 2] 6327 	jp syntax_error 
      00202D CD 03 24         [ 4] 6328 1$: call search_lineno
      002030 5D               [ 2] 6329 	tnzw x 
      002031 26 05            [ 1] 6330 	jrne 3$
      002033 A6 05            [ 1] 6331 2$:	ld a,#ERR_NO_LINE 
      002035 CC 07 97         [ 2] 6332 	jp tb_error
      002038                       6333 3$: ; check if valid data line 
      002038 90 93            [ 1] 6334     ldw y,x 
      00203A EE 04            [ 2] 6335 	ldw x,(4,x)
      00203C A3 20 1D         [ 2] 6336 	cpw x,#data 
      00203F 26 F2            [ 1] 6337 	jrne 2$ 
      002041 90 CF 00 06      [ 2] 6338 	ldw data_ptr,y
      002045 90 E6 02         [ 1] 6339 	ld a,(2,y)
      002048 C7 00 09         [ 1] 6340 	ld data_len,a 
      00204B 35 06 00 08      [ 1] 6341 	mov data_ofs,#FIRST_DATA_ITEM 
      00204F 81               [ 4] 6342 	ret
                                   6343 
                                   6344 ;---------------------------------
                                   6345 ; BASIC: RESTORE 
                                   6346 ; set data_ptr to first data line
                                   6347 ; if not DATA found pointer set to
                                   6348 ; zero 
                                   6349 ;---------------------------------
      002050                       6350 restore:
      002050 72 5F 00 06      [ 1] 6351 	clr data_ptr 
      002054 72 5F 00 07      [ 1] 6352 	clr data_ptr+1
      002058 72 5F 00 08      [ 1] 6353 	clr data_ofs 
      00205C 72 5F 00 09      [ 1] 6354 	clr data_len
      002060 CE 00 1D         [ 2] 6355 	ldw x,txtbgn
      002063                       6356 data_search_loop: 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002063 C3 00 1F         [ 2] 6357 	cpw x,txtend
      002066 24 17            [ 1] 6358 	jruge 9$
      002068 90 93            [ 1] 6359 	ldw y,x 
      00206A EE 04            [ 2] 6360 	ldw x,(4,x)
      00206C A3 20 1D         [ 2] 6361 	cpw x,#data 
      00206F 26 1A            [ 1] 6362 	jrne try_next_line 
      002071 90 CF 00 06      [ 2] 6363 	ldw data_ptr,y 
      002075 90 E6 02         [ 1] 6364 	ld a,(2,y)
      002078 C7 00 09         [ 1] 6365 	ld data_len,a 
      00207B 35 06 00 08      [ 1] 6366 	mov data_ofs,#FIRST_DATA_ITEM
      00207F 72 5D 00 09      [ 1] 6367 9$:	tnz data_len 
      002083 26 05            [ 1] 6368     jrne 10$
      002085 A6 0C            [ 1] 6369 	ld a,#ERR_NO_DATA 
      002087 CC 07 97         [ 2] 6370 	jp tb_error 
      00208A 81               [ 4] 6371 10$:ret
      00208B                       6372 try_next_line:
      00208B 93               [ 1] 6373 	ldw x,y 
      00208C E6 02            [ 1] 6374 	ld a,(2,x)
      00208E C7 00 0D         [ 1] 6375 	ld acc8,a 
      002091 72 5F 00 0C      [ 1] 6376 	clr acc16 
      002095 72 BB 00 0C      [ 2] 6377 	addw x,acc16 
      002099 20 C8            [ 2] 6378 	jra data_search_loop
                                   6379 
                                   6380 
                                   6381 ;---------------------------------
                                   6382 ; BASIC: READ 
                                   6383 ; return next data item | 0 
                                   6384 ;---------------------------------
                           000001  6385 	CTX_BPTR=1 
                           000003  6386 	CTX_IN=3 
                           000004  6387 	CTX_COUNT=4 
                           000005  6388 	XSAVE=5
                           000006  6389 	VSIZE=6
      00209B                       6390 read:
      00209B                       6391 	_vars  VSIZE 
      00209B 52 06            [ 2]    1     sub sp,#VSIZE 
      00209D                       6392 read01:	
      00209D C6 00 08         [ 1] 6393 	ld a,data_ofs
      0020A0 C1 00 09         [ 1] 6394 	cp a,data_len 
      0020A3 27 37            [ 1] 6395 	jreq 2$ ; end of line  
      0020A5 CD 14 41         [ 4] 6396 	call save_context
      0020A8 CE 00 06         [ 2] 6397 	ldw x,data_ptr 
      0020AB CF 00 04         [ 2] 6398 	ldw basicptr,x 
      0020AE 55 00 08 00 01   [ 1] 6399 	mov in,data_ofs 
      0020B3 55 00 09 00 03   [ 1] 6400 	mov count,data_len  
      0020B8 CD 10 90         [ 4] 6401 	call expression 
      0020BB A1 04            [ 1] 6402 	cp a,#TK_INTGR 
      0020BD 27 03            [ 1] 6403 	jreq 1$ 
      0020BF CC 07 95         [ 2] 6404 	jp syntax_error 
      0020C2                       6405 1$:
      0020C2 1F 05            [ 2] 6406 	ldw (XSAVE,SP),x
      0020C4 CD 08 87         [ 4] 6407 	call next_token ; skip comma
      0020C7 CE 00 04         [ 2] 6408 	ldw x,basicptr 
      0020CA CF 00 06         [ 2] 6409 	ldw data_ptr,x 
      0020CD 55 00 01 00 08   [ 1] 6410 	mov data_ofs,in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0020D2 CD 14 51         [ 4] 6411 	call rest_context
      0020D5 1E 05            [ 2] 6412 	ldw x,(XSAVE,sp)
      0020D7 A6 04            [ 1] 6413 	ld a,#TK_INTGR
      0020D9                       6414 	_drop VSIZE 
      0020D9 5B 06            [ 2]    1     addw sp,#VSIZE 
      0020DB 81               [ 4] 6415 	ret 
      0020DC                       6416 2$: ; end of line reached 
      0020DC 90 CE 00 06      [ 2] 6417 	ldw y, data_ptr 
      0020E0 72 5F 00 06      [ 1] 6418 	clr data_ptr
      0020E4 72 5F 00 07      [ 1] 6419 	clr data_ptr+1   
      0020E8 72 5F 00 08      [ 1] 6420 	clr data_ofs 
      0020EC 72 5F 00 09      [ 1] 6421 	clr data_len 
      0020F0 CD 20 8B         [ 4] 6422 	call try_next_line 
      0020F3 20 A8            [ 2] 6423 	jra read01
                                   6424 
                                   6425 
                                   6426 ;---------------------------------
                                   6427 ; BASIC: SPIEN clkdiv, 0|1  
                                   6428 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6429 ; if clkdiv==-1 disable SPI
                                   6430 ; 0|1 -> disable|enable  
                                   6431 ;--------------------------------- 
                           000005  6432 SPI_CS_BIT=5
      0020F5                       6433 spi_enable:
      0020F5 CD 0F 97         [ 4] 6434 	call arg_list 
      0020F8 A1 02            [ 1] 6435 	cp a,#2
      0020FA 27 03            [ 1] 6436 	jreq 1$
      0020FC CC 07 95         [ 2] 6437 	jp syntax_error 
      0020FF                       6438 1$: 
      0020FF 72 12 50 C7      [ 1] 6439 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002103 85               [ 2] 6440 	popw x  
      002104 5D               [ 2] 6441 	tnzw x 
      002105 27 21            [ 1] 6442 	jreq spi_disable 
      002107 85               [ 2] 6443 	popw x 
      002108 A6 08            [ 1] 6444 	ld a,#(1<<SPI_CR1_BR)
      00210A 42               [ 4] 6445 	mul x,a 
      00210B 9F               [ 1] 6446 	ld a,xl 
      00210C C7 52 00         [ 1] 6447 	ld SPI_CR1,a 
                                   6448 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00210F 72 1A 50 14      [ 1] 6449 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002113 72 1A 50 16      [ 1] 6450 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6451 ; configure SPI as master mode 0.	
      002117 72 14 52 00      [ 1] 6452 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6453 ; ~CS line controlled by sofware 	
      00211B 72 12 52 01      [ 1] 6454 	bset SPI_CR2,#SPI_CR2_SSM 
      00211F 72 10 52 01      [ 1] 6455     bset SPI_CR2,#SPI_CR2_SSI 
                                   6456 ; enable SPI
      002123 72 1C 52 00      [ 1] 6457 	bset SPI_CR1,#SPI_CR1_SPE 	
      002127 81               [ 4] 6458 	ret 
      002128                       6459 spi_disable:
      002128                       6460 	_drop #2; throw first argument.
      002128 5B 02            [ 2]    1     addw sp,##2 
                                   6461 ; wait spi idle 
      00212A A6 82            [ 1] 6462 1$:	ld a,#0x82 
      00212C C4 52 03         [ 1] 6463 	and a,SPI_SR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00212F A1 02            [ 1] 6464 	cp a,#2 
      002131 26 F7            [ 1] 6465 	jrne 1$
      002133 72 1D 52 00      [ 1] 6466 	bres SPI_CR1,#SPI_CR1_SPE
      002137 72 13 50 C7      [ 1] 6467 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      00213B 72 1B 50 16      [ 1] 6468 	bres PE_DDR,#SPI_CS_BIT 
      00213F 81               [ 4] 6469 	ret 
                                   6470 
      002140                       6471 spi_clear_error:
      002140 A6 78            [ 1] 6472 	ld a,#0x78 
      002142 C5 52 03         [ 1] 6473 	bcp a,SPI_SR 
      002145 27 04            [ 1] 6474 	jreq 1$
      002147 72 5F 52 03      [ 1] 6475 	clr SPI_SR 
      00214B 81               [ 4] 6476 1$: ret 
                                   6477 
      00214C                       6478 spi_send_byte:
      00214C 88               [ 1] 6479 	push a 
      00214D CD 21 40         [ 4] 6480 	call spi_clear_error
      002150 84               [ 1] 6481 	pop a 
      002151 72 03 52 03 FB   [ 2] 6482 	btjf SPI_SR,#SPI_SR_TXE,.
      002156 C7 52 04         [ 1] 6483 	ld SPI_DR,a
      002159 72 01 52 03 FB   [ 2] 6484 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00215E C6 52 04         [ 1] 6485 	ld a,SPI_DR 
      002161 81               [ 4] 6486 	ret 
                                   6487 
      002162                       6488 spi_rcv_byte:
      002162 A6 FF            [ 1] 6489 	ld a,#255
      002164 72 01 52 03 E3   [ 2] 6490 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002169 C6 52 04         [ 1] 6491 	ld a,SPI_DR 
      00216C 81               [ 4] 6492 	ret
                                   6493 
                                   6494 ;------------------------------
                                   6495 ; BASIC: SPIWR byte [,byte]
                                   6496 ; write 1 or more byte
                                   6497 ;------------------------------
      00216D                       6498 spi_write:
      00216D CD 10 90         [ 4] 6499 	call expression
      002170 A1 04            [ 1] 6500 	cp a,#TK_INTGR 
      002172 27 03            [ 1] 6501 	jreq 1$
      002174 CC 07 95         [ 2] 6502 	jp syntax_error 
      002177                       6503 1$:	
      002177 9F               [ 1] 6504 	ld a,xl 
      002178 CD 21 4C         [ 4] 6505 	call spi_send_byte 
      00217B CD 08 87         [ 4] 6506 	call next_token 
      00217E A1 09            [ 1] 6507 	cp a,#TK_COMMA 
      002180 26 02            [ 1] 6508 	jrne 2$ 
      002182 20 E9            [ 2] 6509 	jra spi_write 
      002184 4D               [ 1] 6510 2$:	tnz a 
      002185 27 05            [ 1] 6511 	jreq 3$
      002187                       6512 	_unget_token  
      002187 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00218C 81               [ 4] 6513 3$:	ret 
                                   6514 
                                   6515 
                                   6516 ;-------------------------------
                                   6517 ; BASIC: SPIRD 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   6518 ; read one byte from SPI 
                                   6519 ;-------------------------------
      00218D                       6520 spi_read:
      00218D CD 21 62         [ 4] 6521 	call spi_rcv_byte 
      002190 5F               [ 1] 6522 	clrw x 
      002191 97               [ 1] 6523 	ld xl,a 
      002192 A6 04            [ 1] 6524 	ld a,#TK_INTGR 
      002194 81               [ 4] 6525 	ret 
                                   6526 
                                   6527 ;------------------------------
                                   6528 ; BASIC: SPISEL 0|1 
                                   6529 ; set state of ~CS line
                                   6530 ; 0|1 deselect|select  
                                   6531 ;------------------------------
      002195                       6532 spi_select:
      002195 CD 08 87         [ 4] 6533 	call next_token 
      002198 A1 04            [ 1] 6534 	cp a,#TK_INTGR 
      00219A 27 03            [ 1] 6535 	jreq 1$
      00219C CC 07 95         [ 2] 6536 	jp syntax_error 
      00219F 5D               [ 2] 6537 1$: tnzw x  
      0021A0 27 05            [ 1] 6538 	jreq cs_high 
      0021A2 72 1B 50 14      [ 1] 6539 	bres PE_ODR,#SPI_CS_BIT
      0021A6 81               [ 4] 6540 	ret 
      0021A7                       6541 cs_high: 
      0021A7 72 1A 50 14      [ 1] 6542 	bset PE_ODR,#SPI_CS_BIT
      0021AB 81               [ 4] 6543 	ret 
                                   6544 
                                   6545 
                                   6546 ;------------------------------
                                   6547 ; BASIC: FILERX
                                   6548 ; Use to receive a BASIC program
                                   6549 ; from the PC using XMODEM 
                                   6550 ; protocol. The file is store in
                                   6551 ; Each line received is compiled
                                   6552 ; then stored in RAM. When reception 
                                   6553 ; is completed with success  the 
                                   6554 ; program is ready to be executed 
                                   6555 ; or save as local file.
                                   6556 ;--------------------------------
      0021AC                       6557 file_receive:
      0021AC 72 01 00 24 05   [ 2] 6558 	btjf flags,#FRUN,1$
      0021B1 A6 07            [ 1] 6559 	ld a,#ERR_CMD_ONLY
      0021B3 CC 07 97         [ 2] 6560 	jp tb_error 
      0021B6                       6561 1$:	
      0021B6 CD 06 01         [ 4] 6562 	call clear_basic
      0021B9 CE 00 1D         [ 2] 6563 	ldw x, txtbgn
      0021BC CD 00 00         [ 4] 6564 	call xreceive 
      0021BF 72 BB 00 1D      [ 2] 6565 	addw x,txtbgn 
      0021C3 CF 00 1F         [ 2] 6566 	ldw txtend,x 
      0021C6 CD 09 2D         [ 4] 6567 	call print_int 
      0021C9 AE 21 D0         [ 2] 6568 	ldw x,#fsize_msg 
      0021CC CD 01 D7         [ 4] 6569 	call puts 
      0021CF 81               [ 4] 6570 	ret 
      0021D0 20 62 79 74 65 73 20  6571 fsize_msg: .asciz " bytes received\n"
             72 65 63 65 69 76 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



             64 0A 00
                                   6572 
                                   6573 ;------------------------------
                                   6574 ; BASIC: FILETX "file_name" 
                                   6575 ; Transmit the program in RAM 
                                   6576 ; To the PC using XMODEM protocol.
                                   6577 ; The file transmitted as source 
                                   6578 ; file not tokenized. 
                                   6579 ;-------------------------------
      0021E1                       6580 file_transmit:
                                   6581 
      0021E1 81               [ 4] 6582 	ret 
                                   6583 
                                   6584 
                                   6585 ;------------------------------
                                   6586 ;      dictionary 
                                   6587 ; format:
                                   6588 ;   link:   2 bytes 
                                   6589 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6590 ;   cmd_name: 16 byte max 
                                   6591 ;   code_address: 2 bytes 
                                   6592 ;------------------------------
                                   6593 	.macro _dict_entry len,name,cmd 
                                   6594 	.word LINK 
                                   6595 	LINK=.
                                   6596 name:
                                   6597 	.byte len 	
                                   6598 	.ascii "name"
                                   6599 	.word cmd 
                                   6600 	.endm 
                                   6601 
                           000000  6602 	LINK=0
                                   6603 ; respect alphabetic order for BASIC names from Z-A
                                   6604 ; this sort order is for a cleaner WORDS cmd output. 	
      0021E2                       6605 kword_end:
      0021E2                       6606 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      0021E2 00 00                    1 	.word LINK 
                           0021E4     2 	LINK=.
      0021E4                          3 XPEEK:
      0021E4 45                       4 	.byte 5+F_IFUNC 	
      0021E5 58 50 45 45 4B           5 	.ascii "XPEEK"
      0021EA 15 70                    6 	.word xpeek 
      0021EC                       6607 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0021EC 21 E4                    1 	.word LINK 
                           0021EE     2 	LINK=.
      0021EE                          3 XOR:
      0021EE 43                       4 	.byte 3+F_IFUNC 	
      0021EF 58 4F 52                 5 	.ascii "XOR"
      0021F2 1D 38                    6 	.word bit_xor 
      0021F4                       6608 	_dict_entry,5,WRITE,write  
      0021F4 21 EE                    1 	.word LINK 
                           0021F6     2 	LINK=.
      0021F6                          3 WRITE:
      0021F6 05                       4 	.byte 5 	
      0021F7 57 52 49 54 45           5 	.ascii "WRITE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0021FC 1B 5E                    6 	.word write 
      0021FE                       6609 	_dict_entry,5,WORDS,words 
      0021FE 21 F6                    1 	.word LINK 
                           002200     2 	LINK=.
      002200                          3 WORDS:
      002200 05                       4 	.byte 5 	
      002201 57 4F 52 44 53           5 	.ascii "WORDS"
      002206 1E 66                    6 	.word words 
      002208                       6610 	_dict_entry 4,WAIT,wait 
      002208 22 00                    1 	.word LINK 
                           00220A     2 	LINK=.
      00220A                          3 WAIT:
      00220A 04                       4 	.byte 4 	
      00220B 57 41 49 54              5 	.ascii "WAIT"
      00220F 14 D3                    6 	.word wait 
      002211                       6611 	_dict_entry,3+F_IFUNC,USR,usr
      002211 22 0A                    1 	.word LINK 
                           002213     2 	LINK=.
      002213                          3 USR:
      002213 43                       4 	.byte 3+F_IFUNC 	
      002214 55 53 52                 5 	.ascii "USR"
      002217 1C 0A                    6 	.word usr 
      002219                       6612 	_dict_entry,5,UNTIL,until 
      002219 22 13                    1 	.word LINK 
                           00221B     2 	LINK=.
      00221B                          3 UNTIL:
      00221B 05                       4 	.byte 5 	
      00221C 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002221 1F 89                    6 	.word until 
      002223                       6613 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002223 22 1B                    1 	.word LINK 
                           002225     2 	LINK=.
      002225                          3 UFLASH:
      002225 46                       4 	.byte 6+F_IFUNC 	
      002226 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      00222C 1C 04                    6 	.word uflash 
      00222E                       6614 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      00222E 22 25                    1 	.word LINK 
                           002230     2 	LINK=.
      002230                          3 UBOUND:
      002230 46                       4 	.byte 6+F_IFUNC 	
      002231 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002237 11 80                    6 	.word ubound 
      002239                       6615 	_dict_entry,4,TONE,tone  
      002239 22 30                    1 	.word LINK 
                           00223B     2 	LINK=.
      00223B                          3 TONE:
      00223B 04                       4 	.byte 4 	
      00223C 54 4F 4E 45              5 	.ascii "TONE"
      002240 17 32                    6 	.word tone 
      002242                       6616 	_dict_entry,2,TO,to
      002242 22 3B                    1 	.word LINK 
                           002244     2 	LINK=.
      002244                          3 TO:
      002244 02                       4 	.byte 2 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002245 54 4F                    5 	.ascii "TO"
      002247 15 C9                    6 	.word to 
      002249                       6617 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002249 22 44                    1 	.word LINK 
                           00224B     2 	LINK=.
      00224B                          3 TIMEOUT:
      00224B 47                       4 	.byte 7+F_IFUNC 	
      00224C 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002253 1E DB                    6 	.word timeout 
      002255                       6618 	_dict_entry,5,TIMER,set_timer
      002255 22 4B                    1 	.word LINK 
                           002257     2 	LINK=.
      002257                          3 TIMER:
      002257 05                       4 	.byte 5 	
      002258 54 49 4D 45 52           5 	.ascii "TIMER"
      00225D 1E CC                    6 	.word set_timer 
      00225F                       6619 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00225F 22 57                    1 	.word LINK 
                           002261     2 	LINK=.
      002261                          3 TICKS:
      002261 45                       4 	.byte 5+F_IFUNC 	
      002262 54 49 43 4B 53           5 	.ascii "TICKS"
      002267 1C EE                    6 	.word get_ticks 
      002269                       6620 	_dict_entry,4,STOP,stop 
      002269 22 61                    1 	.word LINK 
                           00226B     2 	LINK=.
      00226B                          3 STOP:
      00226B 04                       4 	.byte 4 	
      00226C 53 54 4F 50              5 	.ascii "STOP"
      002270 18 56                    6 	.word stop 
      002272                       6621 	_dict_entry,4,STEP,step 
      002272 22 6B                    1 	.word LINK 
                           002274     2 	LINK=.
      002274                          3 STEP:
      002274 04                       4 	.byte 4 	
      002275 53 54 45 50              5 	.ascii "STEP"
      002279 15 F9                    6 	.word step 
      00227B                       6622 	_dict_entry,5,SPIWR,spi_write
      00227B 22 74                    1 	.word LINK 
                           00227D     2 	LINK=.
      00227D                          3 SPIWR:
      00227D 05                       4 	.byte 5 	
      00227E 53 50 49 57 52           5 	.ascii "SPIWR"
      002283 21 6D                    6 	.word spi_write 
      002285                       6623 	_dict_entry,6,SPISEL,spi_select
      002285 22 7D                    1 	.word LINK 
                           002287     2 	LINK=.
      002287                          3 SPISEL:
      002287 06                       4 	.byte 6 	
      002288 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00228E 21 95                    6 	.word spi_select 
      002290                       6624 	_dict_entry,5,SPIEN,spi_enable 
      002290 22 87                    1 	.word LINK 
                           002292     2 	LINK=.
      002292                          3 SPIEN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002292 05                       4 	.byte 5 	
      002293 53 50 49 45 4E           5 	.ascii "SPIEN"
      002298 20 F5                    6 	.word spi_enable 
      00229A                       6625 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      00229A 22 92                    1 	.word LINK 
                           00229C     2 	LINK=.
      00229C                          3 SPIRD:
      00229C 45                       4 	.byte 5+F_IFUNC 	
      00229D 53 50 49 52 44           5 	.ascii "SPIRD"
      0022A2 21 8D                    6 	.word spi_read 
      0022A4                       6626 	_dict_entry,5,SLEEP,sleep 
      0022A4 22 9C                    1 	.word LINK 
                           0022A6     2 	LINK=.
      0022A6                          3 SLEEP:
      0022A6 05                       4 	.byte 5 	
      0022A7 53 4C 45 45 50           5 	.ascii "SLEEP"
      0022AC 1C 87                    6 	.word sleep 
      0022AE                       6627 	_dict_entry,4+F_IFUNC,SIZE,size
      0022AE 22 A6                    1 	.word LINK 
                           0022B0     2 	LINK=.
      0022B0                          3 SIZE:
      0022B0 44                       4 	.byte 4+F_IFUNC 	
      0022B1 53 49 5A 45              5 	.ascii "SIZE"
      0022B5 11 76                    6 	.word size 
      0022B7                       6628     _dict_entry,4,SHOW,show 
      0022B7 22 B0                    1 	.word LINK 
                           0022B9     2 	LINK=.
      0022B9                          3 SHOW:
      0022B9 04                       4 	.byte 4 	
      0022BA 53 48 4F 57              5 	.ascii "SHOW"
      0022BE 11 2B                    6 	.word show 
      0022C0                       6629 	_dict_entry,4,SAVE,save
      0022C0 22 B9                    1 	.word LINK 
                           0022C2     2 	LINK=.
      0022C2                          3 SAVE:
      0022C2 04                       4 	.byte 4 	
      0022C3 53 41 56 45              5 	.ascii "SAVE"
      0022C7 19 63                    6 	.word save 
      0022C9                       6630 	_dict_entry 3,RUN,run
      0022C9 22 C2                    1 	.word LINK 
                           0022CB     2 	LINK=.
      0022CB                          3 RUN:
      0022CB 03                       4 	.byte 3 	
      0022CC 52 55 4E                 5 	.ascii "RUN"
      0022CF 16 D9                    6 	.word run 
      0022D1                       6631 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0022D1 22 CB                    1 	.word LINK 
                           0022D3     2 	LINK=.
      0022D3                          3 RSHIFT:
      0022D3 46                       4 	.byte 6+F_IFUNC 	
      0022D4 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0022DA 1D 69                    6 	.word rshift 
      0022DC                       6632 	_dict_entry,3+F_IFUNC,RND,random 
      0022DC 22 D3                    1 	.word LINK 
                           0022DE     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0022DE                          3 RND:
      0022DE 43                       4 	.byte 3+F_IFUNC 	
      0022DF 52 4E 44                 5 	.ascii "RND"
      0022E2 1D FF                    6 	.word random 
      0022E4                       6633 	_dict_entry,6,RETURN,return 
      0022E4 22 DE                    1 	.word LINK 
                           0022E6     2 	LINK=.
      0022E6                          3 RETURN:
      0022E6 06                       4 	.byte 6 	
      0022E7 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0022ED 16 BB                    6 	.word return 
      0022EF                       6634 	_dict_entry,7,RESTORE,restore 
      0022EF 22 E6                    1 	.word LINK 
                           0022F1     2 	LINK=.
      0022F1                          3 RESTORE:
      0022F1 07                       4 	.byte 7 	
      0022F2 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0022F9 20 50                    6 	.word restore 
      0022FB                       6635 	_dict_entry 6,REMARK,remark 
      0022FB 22 F1                    1 	.word LINK 
                           0022FD     2 	LINK=.
      0022FD                          3 REMARK:
      0022FD 06                       4 	.byte 6 	
      0022FE 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002304 14 CD                    6 	.word remark 
      002306                       6636 	_dict_entry,6,REBOOT,cold_start
      002306 22 FD                    1 	.word LINK 
                           002308     2 	LINK=.
      002308                          3 REBOOT:
      002308 06                       4 	.byte 6 	
      002309 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00230F 04 EF                    6 	.word cold_start 
      002311                       6637 	_dict_entry,4+F_IFUNC,READ,read  
      002311 23 08                    1 	.word LINK 
                           002313     2 	LINK=.
      002313                          3 READ:
      002313 44                       4 	.byte 4+F_IFUNC 	
      002314 52 45 41 44              5 	.ascii "READ"
      002318 20 9B                    6 	.word read 
      00231A                       6638 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      00231A 23 13                    1 	.word LINK 
                           00231C     2 	LINK=.
      00231C                          3 QKEY:
      00231C 44                       4 	.byte 4+F_IFUNC 	
      00231D 51 4B 45 59              5 	.ascii "QKEY"
      002321 1B CF                    6 	.word qkey 
      002323                       6639 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      002323 23 1C                    1 	.word LINK 
                           002325     2 	LINK=.
      002325                          3 PRTI:
      002325 44                       4 	.byte 4+F_IFUNC 	
      002326 50 52 54 49              5 	.ascii "PRTI"
      00232A 1F E7                    6 	.word const_porti 
      00232C                       6640 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      00232C 23 25                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                           00232E     2 	LINK=.
      00232E                          3 PRTH:
      00232E 44                       4 	.byte 4+F_IFUNC 	
      00232F 50 52 54 48              5 	.ascii "PRTH"
      002333 1F E1                    6 	.word const_porth 
      002335                       6641 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      002335 23 2E                    1 	.word LINK 
                           002337     2 	LINK=.
      002337                          3 PRTG:
      002337 44                       4 	.byte 4+F_IFUNC 	
      002338 50 52 54 47              5 	.ascii "PRTG"
      00233C 1F DB                    6 	.word const_portg 
      00233E                       6642 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      00233E 23 37                    1 	.word LINK 
                           002340     2 	LINK=.
      002340                          3 PRTF:
      002340 44                       4 	.byte 4+F_IFUNC 	
      002341 50 52 54 46              5 	.ascii "PRTF"
      002345 1F D5                    6 	.word const_portf 
      002347                       6643 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      002347 23 40                    1 	.word LINK 
                           002349     2 	LINK=.
      002349                          3 PRTE:
      002349 44                       4 	.byte 4+F_IFUNC 	
      00234A 50 52 54 45              5 	.ascii "PRTE"
      00234E 1F CF                    6 	.word const_porte 
      002350                       6644 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      002350 23 49                    1 	.word LINK 
                           002352     2 	LINK=.
      002352                          3 PRTD:
      002352 44                       4 	.byte 4+F_IFUNC 	
      002353 50 52 54 44              5 	.ascii "PRTD"
      002357 1F C9                    6 	.word const_portd 
      002359                       6645 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      002359 23 52                    1 	.word LINK 
                           00235B     2 	LINK=.
      00235B                          3 PRTC:
      00235B 44                       4 	.byte 4+F_IFUNC 	
      00235C 50 52 54 43              5 	.ascii "PRTC"
      002360 1F C3                    6 	.word const_portc 
      002362                       6646 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      002362 23 5B                    1 	.word LINK 
                           002364     2 	LINK=.
      002364                          3 PRTB:
      002364 44                       4 	.byte 4+F_IFUNC 	
      002365 50 52 54 42              5 	.ascii "PRTB"
      002369 1F BD                    6 	.word const_portb 
      00236B                       6647 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      00236B 23 64                    1 	.word LINK 
                           00236D     2 	LINK=.
      00236D                          3 PRTA:
      00236D 44                       4 	.byte 4+F_IFUNC 	
      00236E 50 52 54 41              5 	.ascii "PRTA"
      002372 1F B7                    6 	.word const_porta 
      002374                       6648 	_dict_entry 5,PRINT,print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002374 23 6D                    1 	.word LINK 
                           002376     2 	LINK=.
      002376                          3 PRINT:
      002376 05                       4 	.byte 5 	
      002377 50 52 49 4E 54           5 	.ascii "PRINT"
      00237C 13 D0                    6 	.word print 
      00237E                       6649 	_dict_entry,4+F_IFUNC,POUT,const_output
      00237E 23 76                    1 	.word LINK 
                           002380     2 	LINK=.
      002380                          3 POUT:
      002380 44                       4 	.byte 4+F_IFUNC 	
      002381 50 4F 55 54              5 	.ascii "POUT"
      002385 20 0B                    6 	.word const_output 
      002387                       6650 	_dict_entry,4,POKE,poke 
      002387 23 80                    1 	.word LINK 
                           002389     2 	LINK=.
      002389                          3 POKE:
      002389 04                       4 	.byte 4 	
      00238A 50 4F 4B 45              5 	.ascii "POKE"
      00238E 15 50                    6 	.word poke 
      002390                       6651 	_dict_entry,4+F_IFUNC,PINP,const_input
      002390 23 89                    1 	.word LINK 
                           002392     2 	LINK=.
      002392                          3 PINP:
      002392 44                       4 	.byte 4+F_IFUNC 	
      002393 50 49 4E 50              5 	.ascii "PINP"
      002397 20 11                    6 	.word const_input 
      002399                       6652 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002399 23 92                    1 	.word LINK 
                           00239B     2 	LINK=.
      00239B                          3 PEEK:
      00239B 44                       4 	.byte 4+F_IFUNC 	
      00239C 50 45 45 4B              5 	.ascii "PEEK"
      0023A0 15 5F                    6 	.word peek 
      0023A2                       6653 	_dict_entry,5,PMODE,pin_mode 
      0023A2 23 9B                    1 	.word LINK 
                           0023A4     2 	LINK=.
      0023A4                          3 PMODE:
      0023A4 05                       4 	.byte 5 	
      0023A5 50 4D 4F 44 45           5 	.ascii "PMODE"
      0023AA 1D 8E                    6 	.word pin_mode 
      0023AC                       6654 	_dict_entry,5,PAUSE,pause 
      0023AC 23 A4                    1 	.word LINK 
                           0023AE     2 	LINK=.
      0023AE                          3 PAUSE:
      0023AE 05                       4 	.byte 5 	
      0023AF 50 41 55 53 45           5 	.ascii "PAUSE"
      0023B4 1C 92                    6 	.word pause 
      0023B6                       6655 	_dict_entry,2+F_IFUNC,OR,bit_or
      0023B6 23 AE                    1 	.word LINK 
                           0023B8     2 	LINK=.
      0023B8                          3 OR:
      0023B8 42                       4 	.byte 2+F_IFUNC 	
      0023B9 4F 52                    5 	.ascii "OR"
      0023BB 1D 20                    6 	.word bit_or 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0023BD                       6656 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0023BD 23 B8                    1 	.word LINK 
                           0023BF     2 	LINK=.
      0023BF                          3 ODR:
      0023BF 43                       4 	.byte 3+F_IFUNC 	
      0023C0 4F 44 52                 5 	.ascii "ODR"
      0023C3 1F ED                    6 	.word const_odr 
      0023C5                       6657 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0023C5 23 BF                    1 	.word LINK 
                           0023C7     2 	LINK=.
      0023C7                          3 NOT:
      0023C7 43                       4 	.byte 3+F_IFUNC 	
      0023C8 4E 4F 54                 5 	.ascii "NOT"
      0023CB 1E E8                    6 	.word func_not 
      0023CD                       6658 	_dict_entry,3,NEW,new
      0023CD 23 C7                    1 	.word LINK 
                           0023CF     2 	LINK=.
      0023CF                          3 NEW:
      0023CF 03                       4 	.byte 3 	
      0023D0 4E 45 57                 5 	.ascii "NEW"
      0023D3 18 A2                    6 	.word new 
      0023D5                       6659 	_dict_entry,4,NEXT,next 
      0023D5 23 CF                    1 	.word LINK 
                           0023D7     2 	LINK=.
      0023D7                          3 NEXT:
      0023D7 04                       4 	.byte 4 	
      0023D8 4E 45 58 54              5 	.ascii "NEXT"
      0023DC 16 20                    6 	.word next 
      0023DE                       6660 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0023DE 23 D7                    1 	.word LINK 
                           0023E0     2 	LINK=.
      0023E0                          3 LSHIFT:
      0023E0 46                       4 	.byte 6+F_IFUNC 	
      0023E1 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0023E7 1D 50                    6 	.word lshift 
      0023E9                       6661 	_dict_entry,3+F_IFUNC,LOG,log2 
      0023E9 23 E0                    1 	.word LINK 
                           0023EB     2 	LINK=.
      0023EB                          3 LOG:
      0023EB 43                       4 	.byte 3+F_IFUNC 	
      0023EC 4C 4F 47                 5 	.ascii "LOG"
      0023EF 1F 30                    6 	.word log2 
      0023F1                       6662 	_dict_entry,4,LOAD,load 
      0023F1 23 EB                    1 	.word LINK 
                           0023F3     2 	LINK=.
      0023F3                          3 LOAD:
      0023F3 04                       4 	.byte 4 	
      0023F4 4C 4F 41 44              5 	.ascii "LOAD"
      0023F8 1A 53                    6 	.word load 
      0023FA                       6663 	_dict_entry 4,LIST,list
      0023FA 23 F3                    1 	.word LINK 
                           0023FC     2 	LINK=.
      0023FC                          3 LIST:
      0023FC 04                       4 	.byte 4 	
      0023FD 4C 49 53 54              5 	.ascii "LIST"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002401 11 CD                    6 	.word list 
      002403                       6664 	_dict_entry 3,LET,let 
      002403 23 FC                    1 	.word LINK 
                           002405     2 	LINK=.
      002405                          3 LET:
      002405 03                       4 	.byte 3 	
      002406 4C 45 54                 5 	.ascii "LET"
      002409 11 A2                    6 	.word let 
      00240B                       6665 	_dict_entry,3+F_IFUNC,KEY,key 
      00240B 24 05                    1 	.word LINK 
                           00240D     2 	LINK=.
      00240D                          3 KEY:
      00240D 43                       4 	.byte 3+F_IFUNC 	
      00240E 4B 45 59                 5 	.ascii "KEY"
      002411 1B C7                    6 	.word key 
      002413                       6666 	_dict_entry,7,IWDGREF,refresh_iwdg
      002413 24 0D                    1 	.word LINK 
                           002415     2 	LINK=.
      002415                          3 IWDGREF:
      002415 07                       4 	.byte 7 	
      002416 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00241D 1F 2B                    6 	.word refresh_iwdg 
      00241F                       6667 	_dict_entry,6,IWDGEN,enable_iwdg
      00241F 24 15                    1 	.word LINK 
                           002421     2 	LINK=.
      002421                          3 IWDGEN:
      002421 06                       4 	.byte 6 	
      002422 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002428 1E F5                    6 	.word enable_iwdg 
      00242A                       6668 	_dict_entry,6+F_IFUNC,INVERT,invert 
      00242A 24 21                    1 	.word LINK 
                           00242C     2 	LINK=.
      00242C                          3 INVERT:
      00242C 46                       4 	.byte 6+F_IFUNC 	
      00242D 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002433 1F 65                    6 	.word invert 
      002435                       6669 	_dict_entry,5,INPUT,input_var  
      002435 24 2C                    1 	.word LINK 
                           002437     2 	LINK=.
      002437                          3 INPUT:
      002437 05                       4 	.byte 5 	
      002438 49 4E 50 55 54           5 	.ascii "INPUT"
      00243D 14 61                    6 	.word input_var 
      00243F                       6670 	_dict_entry,2,IF,if 
      00243F 24 37                    1 	.word LINK 
                           002441     2 	LINK=.
      002441                          3 IF:
      002441 02                       4 	.byte 2 	
      002442 49 46                    5 	.ascii "IF"
      002444 15 8C                    6 	.word if 
      002446                       6671 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      002446 24 41                    1 	.word LINK 
                           002448     2 	LINK=.
      002448                          3 IDR:
      002448 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      002449 49 44 52                 5 	.ascii "IDR"
      00244C 1F F3                    6 	.word const_idr 
      00244E                       6672 	_dict_entry,3,HEX,hex_base
      00244E 24 48                    1 	.word LINK 
                           002450     2 	LINK=.
      002450                          3 HEX:
      002450 03                       4 	.byte 3 	
      002451 48 45 58                 5 	.ascii "HEX"
      002454 11 6C                    6 	.word hex_base 
      002456                       6673 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002456 24 50                    1 	.word LINK 
                           002458     2 	LINK=.
      002458                          3 GPIO:
      002458 44                       4 	.byte 4+F_IFUNC 	
      002459 47 50 49 4F              5 	.ascii "GPIO"
      00245D 1B DA                    6 	.word gpio 
      00245F                       6674 	_dict_entry,4,GOTO,goto 
      00245F 24 58                    1 	.word LINK 
                           002461     2 	LINK=.
      002461                          3 GOTO:
      002461 04                       4 	.byte 4 	
      002462 47 4F 54 4F              5 	.ascii "GOTO"
      002466 16 80                    6 	.word goto 
      002468                       6675 	_dict_entry,5,GOSUB,gosub 
      002468 24 61                    1 	.word LINK 
                           00246A     2 	LINK=.
      00246A                          3 GOSUB:
      00246A 05                       4 	.byte 5 	
      00246B 47 4F 53 55 42           5 	.ascii "GOSUB"
      002470 16 9B                    6 	.word gosub 
      002472                       6676 	_dict_entry,6,FORGET,forget 
      002472 24 6A                    1 	.word LINK 
                           002474     2 	LINK=.
      002474                          3 FORGET:
      002474 06                       4 	.byte 6 	
      002475 46 4F 52 47 45 54        5 	.ascii "FORGET"
      00247B 1A 83                    6 	.word forget 
      00247D                       6677 	_dict_entry,3,FOR,for 
      00247D 24 74                    1 	.word LINK 
                           00247F     2 	LINK=.
      00247F                          3 FOR:
      00247F 03                       4 	.byte 3 	
      002480 46 4F 52                 5 	.ascii "FOR"
      002483 15 A0                    6 	.word for 
      002485                       6678 	_dict_entry,6,FILETX,file_transmit
      002485 24 7F                    1 	.word LINK 
                           002487     2 	LINK=.
      002487                          3 FILETX:
      002487 06                       4 	.byte 6 	
      002488 46 49 4C 45 54 58        5 	.ascii "FILETX"
      00248E 21 E1                    6 	.word file_transmit 
      002490                       6679 	_dict_entry,6,FILERX,file_receive 
      002490 24 87                    1 	.word LINK 
                           002492     2 	LINK=.
      002492                          3 FILERX:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      002492 06                       4 	.byte 6 	
      002493 46 49 4C 45 52 58        5 	.ascii "FILERX"
      002499 21 AC                    6 	.word file_receive 
      00249B                       6680 	_dict_entry,4,FCPU,fcpu 
      00249B 24 92                    1 	.word LINK 
                           00249D     2 	LINK=.
      00249D                          3 FCPU:
      00249D 04                       4 	.byte 4 	
      00249E 46 43 50 55              5 	.ascii "FCPU"
      0024A2 1D 82                    6 	.word fcpu 
      0024A4                       6681 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0024A4 24 9D                    1 	.word LINK 
                           0024A6     2 	LINK=.
      0024A6                          3 EEPROM:
      0024A6 46                       4 	.byte 6+F_IFUNC 	
      0024A7 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0024AD 20 17                    6 	.word const_eeprom_base 
      0024AF                       6682 	_dict_entry,3,END,cmd_end  
      0024AF 24 A6                    1 	.word LINK 
                           0024B1     2 	LINK=.
      0024B1                          3 END:
      0024B1 03                       4 	.byte 3 	
      0024B2 45 4E 44                 5 	.ascii "END"
      0024B5 17 2B                    6 	.word cmd_end 
      0024B7                       6683 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0024B7 24 B1                    1 	.word LINK 
                           0024B9     2 	LINK=.
      0024B9                          3 DWRITE:
      0024B9 06                       4 	.byte 6+F_CMD 	
      0024BA 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0024C0 18 1B                    6 	.word digital_write 
      0024C2                       6684 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0024C2 24 B9                    1 	.word LINK 
                           0024C4     2 	LINK=.
      0024C4                          3 DREAD:
      0024C4 45                       4 	.byte 5+F_IFUNC 	
      0024C5 44 52 45 41 44           5 	.ascii "DREAD"
      0024CA 17 EB                    6 	.word digital_read 
      0024CC                       6685 	_dict_entry,2,DO,do_loop
      0024CC 24 C4                    1 	.word LINK 
                           0024CE     2 	LINK=.
      0024CE                          3 DO:
      0024CE 02                       4 	.byte 2 	
      0024CF 44 4F                    5 	.ascii "DO"
      0024D1 1F 74                    6 	.word do_loop 
      0024D3                       6686 	_dict_entry,3,DIR,directory 
      0024D3 24 CE                    1 	.word LINK 
                           0024D5     2 	LINK=.
      0024D5                          3 DIR:
      0024D5 03                       4 	.byte 3 	
      0024D6 44 49 52                 5 	.ascii "DIR"
      0024D9 1A C8                    6 	.word directory 
      0024DB                       6687 	_dict_entry,3,DEC,dec_base
      0024DB 24 D5                    1 	.word LINK 
                           0024DD     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0024DD                          3 DEC:
      0024DD 03                       4 	.byte 3 	
      0024DE 44 45 43                 5 	.ascii "DEC"
      0024E1 11 71                    6 	.word dec_base 
      0024E3                       6688 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0024E3 24 DD                    1 	.word LINK 
                           0024E5     2 	LINK=.
      0024E5                          3 DDR:
      0024E5 43                       4 	.byte 3+F_IFUNC 	
      0024E6 44 44 52                 5 	.ascii "DDR"
      0024E9 1F F9                    6 	.word const_ddr 
      0024EB                       6689 	_dict_entry,6,DATALN,data_line  
      0024EB 24 E5                    1 	.word LINK 
                           0024ED     2 	LINK=.
      0024ED                          3 DATALN:
      0024ED 06                       4 	.byte 6 	
      0024EE 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      0024F4 20 23                    6 	.word data_line 
      0024F6                       6690 	_dict_entry,4,DATA,data  
      0024F6 24 ED                    1 	.word LINK 
                           0024F8     2 	LINK=.
      0024F8                          3 DATA:
      0024F8 04                       4 	.byte 4 	
      0024F9 44 41 54 41              5 	.ascii "DATA"
      0024FD 20 1D                    6 	.word data 
      0024FF                       6691 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      0024FF 24 F8                    1 	.word LINK 
                           002501     2 	LINK=.
      002501                          3 CRL:
      002501 43                       4 	.byte 3+F_IFUNC 	
      002502 43 52 4C                 5 	.ascii "CRL"
      002505 1F FF                    6 	.word const_cr1 
      002507                       6692 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      002507 25 01                    1 	.word LINK 
                           002509     2 	LINK=.
      002509                          3 CRH:
      002509 43                       4 	.byte 3+F_IFUNC 	
      00250A 43 52 48                 5 	.ascii "CRH"
      00250D 20 05                    6 	.word const_cr2 
      00250F                       6693 	_dict_entry,4+F_CFUNC,CHAR,char
      00250F 25 09                    1 	.word LINK 
                           002511     2 	LINK=.
      002511                          3 CHAR:
      002511 84                       4 	.byte 4+F_CFUNC 	
      002512 43 48 41 52              5 	.ascii "CHAR"
      002516 1B 95                    6 	.word char 
      002518                       6694 	_dict_entry,3,BYE,bye 
      002518 25 11                    1 	.word LINK 
                           00251A     2 	LINK=.
      00251A                          3 BYE:
      00251A 03                       4 	.byte 3 	
      00251B 42 59 45                 5 	.ascii "BYE"
      00251E 1C 27                    6 	.word bye 
      002520                       6695 	_dict_entry,5,BTOGL,bit_toggle
      002520 25 1A                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                           002522     2 	LINK=.
      002522                          3 BTOGL:
      002522 05                       4 	.byte 5 	
      002523 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002528 15 19                    6 	.word bit_toggle 
      00252A                       6696 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00252A 25 22                    1 	.word LINK 
                           00252C     2 	LINK=.
      00252C                          3 BTEST:
      00252C 45                       4 	.byte 5+F_IFUNC 	
      00252D 42 54 45 53 54           5 	.ascii "BTEST"
      002532 15 29                    6 	.word bit_test 
      002534                       6697 	_dict_entry,4,BSET,bit_set 
      002534 25 2C                    1 	.word LINK 
                           002536     2 	LINK=.
      002536                          3 BSET:
      002536 04                       4 	.byte 4 	
      002537 42 53 45 54              5 	.ascii "BSET"
      00253B 14 F8                    6 	.word bit_set 
      00253D                       6698 	_dict_entry,4,BRES,bit_reset
      00253D 25 36                    1 	.word LINK 
                           00253F     2 	LINK=.
      00253F                          3 BRES:
      00253F 04                       4 	.byte 4 	
      002540 42 52 45 53              5 	.ascii "BRES"
      002544 15 08                    6 	.word bit_reset 
      002546                       6699 	_dict_entry,3+F_IFUNC,BIT,bitmask
      002546 25 3F                    1 	.word LINK 
                           002548     2 	LINK=.
      002548                          3 BIT:
      002548 43                       4 	.byte 3+F_IFUNC 	
      002549 42 49 54                 5 	.ascii "BIT"
      00254C 1F 4B                    6 	.word bitmask 
      00254E                       6700 	_dict_entry,3,AWU,awu 
      00254E 25 48                    1 	.word LINK 
                           002550     2 	LINK=.
      002550                          3 AWU:
      002550 03                       4 	.byte 3 	
      002551 41 57 55                 5 	.ascii "AWU"
      002554 1C A5                    6 	.word awu 
      002556                       6701 	_dict_entry,7,AUTORUN,autorun
      002556 25 50                    1 	.word LINK 
                           002558     2 	LINK=.
      002558                          3 AUTORUN:
      002558 07                       4 	.byte 7 	
      002559 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002560 1C 30                    6 	.word autorun 
      002562                       6702 	_dict_entry,3+F_IFUNC,ASC,ascii
      002562 25 58                    1 	.word LINK 
                           002564     2 	LINK=.
      002564                          3 ASC:
      002564 43                       4 	.byte 3+F_IFUNC 	
      002565 41 53 43                 5 	.ascii "ASC"
      002568 1B A7                    6 	.word ascii 
      00256A                       6703 	_dict_entry,3+F_IFUNC,AND,bit_and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00256A 25 64                    1 	.word LINK 
                           00256C     2 	LINK=.
      00256C                          3 AND:
      00256C 43                       4 	.byte 3+F_IFUNC 	
      00256D 41 4E 44                 5 	.ascii "AND"
      002570 1D 08                    6 	.word bit_and 
      002572                       6704 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      002572 25 6C                    1 	.word LINK 
                           002574     2 	LINK=.
      002574                          3 ADCREAD:
      002574 47                       4 	.byte 7+F_IFUNC 	
      002575 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00257C 17 B7                    6 	.word analog_read 
      00257E                       6705 	_dict_entry,5,ADCON,power_adc 
      00257E 25 74                    1 	.word LINK 
                           002580     2 	LINK=.
      002580                          3 ADCON:
      002580 05                       4 	.byte 5 	
      002581 41 44 43 4F 4E           5 	.ascii "ADCON"
      002586 17 7B                    6 	.word power_adc 
      002588                       6706 kword_dict:
      002588                       6707 	_dict_entry,3+F_IFUNC,ABS,abs
      002588 25 80                    1 	.word LINK 
                           00258A     2 	LINK=.
      00258A                          3 ABS:
      00258A 43                       4 	.byte 3+F_IFUNC 	
      00258B 41 42 53                 5 	.ascii "ABS"
      00258E 1C F4                    6 	.word abs 
                                   6708 	
                                   6709 
      002600                       6710 	.bndry 128 ; align on FLASH block.
                                   6711 ; free space for user application  
      002600                       6712 user_space:
                                   6713 ; USR() function test
      002600 89               [ 2] 6714 	pushw x 
      002601 72 1A 50 0A      [ 1] 6715 	bset PC_ODR,#5 
      002605 85               [ 2] 6716 	popw x 
      002606 CD 1C 9C         [ 4] 6717 	call pause02 
      002609 72 1B 50 0A      [ 1] 6718 	bres PC_ODR,#5 
      00260D 81               [ 4] 6719 	ret
                                   6720 
                                   6721 	.area FLASH_DRIVE (ABS)
      010000                       6722 	.org 0x10000
      010000                       6723 fdrive:
                                   6724 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00258A R   |     ACK     =  000006 
  5 ADCON      002580 R   |   5 ADCREAD    002574 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        00256C R   |     AREG    =  000002     |     ARG_OFS =  000002 
  5 ASC        002564 R   |     ATTRIB  =  000002     |   5 AUTORUN    002558 R
    AUTORUN_=  004000     |   5 AWU        002550 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   5 BIT        002548 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   5 BRES       00253F R
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       002536 R
    BSIZE   =  000001     |   5 BTEST      00252C R   |   5 BTOGL      002522 R
    BTW     =  000001     |   5 BYE        00251A R   |     C       =  000001 
    CAN     =  000018     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       002511 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        002509 R
  5 CRL        002501 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       0024F8 R   |   5 DATALN     0024ED R   |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   5 DDR        0024E5 R   |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        0024DD R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        0024D5 R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   5 DO         0024CE R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |   5 DREAD      0024C4 R   |   5 DWRITE     0024B9 R
  5 EEPROM     0024A6 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |     EM      =  000019     |   5 END        0024B1 R
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       00249D R   |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |   5 FILERX     002492 R   |   5 FILETX     002487 R
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   5 FOR        00247F R   |   5 FORGET     002474 R
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      00246A R   |   5 GOTO       002461 R
  5 GPIO       002458 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        002450 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        002448 R
  5 IF         002441 R   |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      002437 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   5 INVERT     00242C R   |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     002421 R
  5 IWDGREF    002415 R   |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        00240D R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        002405 R
    LF      =  00000A     |     LIMIT   =  000005     |     LINENO  =  000005 
  5 LINK    =  00258A R   |   5 LIST       0023FC R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  5 LOAD       0023F3 R   |   5 LOG        0023EB R   |   5 LSHIFT     0023E0 R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000005 
    N1      =  000001     |     N1_HB   =  000006     |     N1_LB   =  000007 
    N2      =  000003     |     N2_HB   =  000008     |     N2_LB   =  000009 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        0023CF R
  5 NEXT       0023D7 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  5 NOT        0023C7 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R   |   5 ODR        0023BF R
    ONOFF   =  000003     |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         0023B8 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000080     |   5 PAUSE      0023AE R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       00239B R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       002392 R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      0023A4 R
  5 POKE       002389 R   |     PORT    =  000003     |   5 POUT       002380 R
    PREV    =  000001     |   5 PRINT      002376 R   |     PROD    =  000002 
  5 PRTA       00236D R   |   5 PRTB       002364 R   |   5 PRTC       00235B R
  5 PRTD       002352 R   |   5 PRTE       002349 R   |   5 PRTF       002340 R
  5 PRTG       002337 R   |   5 PRTH       00232E R   |   5 PRTI       002325 R
  5 QKEY       00231C R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 READ       002313 R   |   5 REBOOT     002308 R
    REG     =  000001     |     RELOP   =  000005     |   5 REMARK     0022FD R
  5 RESTORE    0022F1 R   |     RETL1   =  000001     |   5 RETURN     0022E6 R
    RET_ADDR=  000003     |     RET_INW =  000005     |   5 RND        0022DE R
    ROP     =  004800     |     RS      =  00001E     |   5 RSHIFT     0022D3 R
    RST_SR  =  0050B3     |   5 RUN        0022CB R   |     RXCHAR  =  000001 
  5 SAVE       0022C2 R   |     SDIVD   =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       0022B9 R
    SI      =  00000F     |     SIGN    =  000001     |   5 SIZE       0022B0 R
    SKIP    =  000005     |   5 SLEEP      0022A6 R   |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   5 SPIEN      002292 R
  5 SPIRD      00229C R   |   5 SPISEL     002287 R   |   5 SPIWR      00227D R
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SQUOT   =  000001 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  0000A0 
  5 STEP       002274 R   |   5 STOP       00226B R   |     STREND  =  00000A 
    STRING  =  000002     |     STX     =  000002     |     SUB     =  00001A 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TEST    =  000000     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      002261 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    00224B R   |   5 TIMER      002257 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  000001 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000004     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_VAR  =  000005     |   5 TO         002244 R
  5 TONE       00223B R   |   5 Timer4Up   000037 R   |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     002230 R
  5 UBTN_Han   00007A R   |   5 UFLASH     002225 R   |   5 UNTIL      00221B R
    US      =  00001F     |   5 USER_ABO   000082 R   |     USE_BLOC=  000000 
  5 USR        002213 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 Uart1RxH   00000F R   |   5 UserButt   00004D R
    VAR_ADDR=  000006     |     VSIZ    =  000002     |     VSIZE   =  000006 
    VT      =  00000B     |   5 WAIT       00220A R   |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      002200 R
  5 WRITE      0021F6 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        0021EE R
  5 XPEEK      0021E4 R   |     XREG    =  000003     |     XSAVE   =  000005 
    YSAVE   =  000003     |   5 abs        001CF4 R   |   1 acc16      00000C R
  1 acc24      00000B R   |   1 acc8       00000D R   |   5 accept_c   000AC6 R
  5 add        000E5B R   |   5 add_char   0013B0 R   |   5 analog_r   0017B7 R
  5 ansi_seq   000A88 R   |   5 arduino_   001DDF R   |   5 arg_list   000F97 R
  1 array_si   000022 R   |   5 ascii      001BA7 R   |   5 at_tst     000CCD R
  5 atoi24     000DDE R   |   5 atoi_exi   000E44 R   |   5 autorun    001C30 R
  5 autorun_   0005EC R   |   5 awu        001CA5 R   |   5 awu02      001CAF R
  5 bad_port   001BFF R   |   1 base       00000A R   |   1 basicptr   000004 R
  5 beep       00173F R   |   5 bin_exit   000BAB R   |   5 bit_and    001D08 R
  5 bit_or     001D20 R   |   5 bit_rese   001508 R   |   5 bit_set    0014F8 R
  5 bit_test   001529 R   |   5 bit_togg   001519 R   |   5 bit_xor    001D38 R
  5 bitmask    001F4B R   |   5 bkslsh_t   000C7A R   |   5 bksp       0001E1 R
  5 break_po   001884 R   |   5 bye        001C27 R   |   5 cancel_a   0005B4 R
  5 char       001B95 R   |   5 clear_ba   000601 R   |   5 clear_va   000481 R
  5 clock_in   00009D R   |   5 cmd_end    00172B R   |   5 cmd_line   00081F R
  5 cmd_name   000F06 R   |   5 cmp_name   0018F7 R   |   5 cold_sta   0004EF R
  5 colon_ts   000CA1 R   |   5 comma_ts   000CAC R   |   5 comp_msg   000775 R
  5 compile    00040E R   |   5 const_cr   001FFF R   |   5 const_cr   002005 R
  5 const_dd   001FF9 R   |   5 const_ee   002017 R   |   5 const_id   001FF3 R
  5 const_in   002011 R   |   5 const_od   001FED R   |   5 const_ou   00200B R
  5 const_po   001FB7 R   |   5 const_po   001FBD R   |   5 const_po   001FC3 R
  5 const_po   001FC9 R   |   5 const_po   001FCF R   |   5 const_po   001FD5 R
  5 const_po   001FDB R   |   5 const_po   001FE1 R   |   5 const_po   001FE7 R
  5 convert_   000B22 R   |   5 copy_com   000D02 R   |   1 count      000003 R
  5 cp_loop    000F46 R   |   5 create_g   000375 R   |   5 cs_high    0021A7 R
  5 cstk_pro   001145 R   |   5 dash_tst   000CC2 R   |   5 data       00201D R
  1 data_len   000009 R   |   5 data_lin   002023 R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   002063 R   |   5 dec_base   001171 R
  5 del_back   000AB7 R   |   5 del_line   000348 R   |   5 del_ln     000AA8 R
  5 delete     0001F1 R   |   5 digital_   0017EB R   |   5 digital_   00181B R
  5 dir_loop   001AD4 R   |   5 director   001AC8 R   |   5 divide     000EB1 R
  5 divu24_8   0009D9 R   |   5 do_loop    001F74 R   |   5 drive_fr   001B51 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

  5 enable_i   001EF5 R   |   5 eql_tst    000D57 R   |   5 equal      0013C3 R
  5 err_bad_   0006E1 R   |   5 err_buf_   000757 R   |   5 err_cmd_   0006A5 R
  5 err_div0   00066A R   |   5 err_dupl   0006BF R   |   5 err_math   000651 R
  5 err_mem_   000636 R   |   5 err_msg    000616 R   |   5 err_no_a   0006ED R
  5 err_no_d   000720 R   |   5 err_no_f   000744 R   |   5 err_no_l   000679 R
  5 err_no_p   000730 R   |   5 err_not_   0006D0 R   |   5 err_run_   00068F R
  5 err_synt   000643 R   |   5 escaped    000B37 R   |   5 expect     000F85 R
  5 expr_exi   0010D1 R   |   5 expressi   001090 R   |   5 factor     000FE7 R
  1 farptr     000017 R   |   5 fcpu       001D82 R   |   7 fdrive     010000 R
  1 ffree      00001A R   |   5 file_cou   001B49 R   |   5 file_rec   0021AC R
  5 file_tra   0021E1 R   |   5 final_te   000A82 R   |   5 first_li   0011F6 R
  1 flags      000024 R   |   5 for        0015A0 R   |   5 forget     001A83 R
  1 free_ram   00005B R   |   5 fsize_ms   0021D0 R   |   5 func_arg   000F92 R
  5 func_not   001EE8 R   |   5 ge         0013C5 R   |   5 get_arra   000FC2 R
  5 get_targ   00166A R   |   5 get_tick   001CEE R   |   5 get_toke   000C13 R
  5 getc       0001CD R   |   5 gosub      00169B R   |   5 goto       001680 R
  5 gpio       001BDA R   |   5 gt         0013C1 R   |   5 gt_tst     000D62 R
  5 hex_base   00116C R   |   5 hex_dump   000279 R   |   5 if         00158C R
  1 in         000001 R   |   1 in.saved   000002 R   |   1 in.w       000000 R
  5 incr_far   0018AC R   |   5 input_ex   0014CA R   |   5 input_lo   001463 R
  5 input_va   001461 R   |   5 insert_l   0003A1 R   |   5 insert_l   00040B R
  5 interp_l   000860 R   |   5 interpre   00083B R   |   5 invert     001F65 R
  5 is_alpha   00048F R   |   5 is_digit   0004A0 R   |   5 itoa       000992 R
  5 itoa_loo   0009AA R   |   5 jp_to_ta   00168E R   |   5 key        001BC7 R
  5 kw_loop    000BC7 R   |   5 kword_di   002588 R   |   5 kword_en   0021E2 R
  5 le         0013CA R   |   5 leading_   001F3B R   |   5 left_arr   000A88 R
  5 let        0011A2 R   |   5 let_arra   0011B0 R   |   5 let_var    0011B3 R
  5 lines_sk   0011F9 R   |   5 list       0011CD R   |   5 list_exi   00123F R
  5 list_sta   001219 R   |   5 load       001A53 R   |   5 load_aut   0005C3 R
  5 load_fil   001A22 R   |   5 log2       001F30 R   |   5 logical_   001EDE R
  5 loop_bac   00164D R   |   1 loop_dep   000021 R   |   5 loop_don   001662 R
  5 lshift     001D50 R   |   5 lt         0013C8 R   |   5 lt_tst     000D8B R
  5 modulo     000EF5 R   |   5 move       0002E2 R   |   5 move_dow   000300 R
  5 move_exi   000321 R   |   5 move_loo   000305 R   |   5 move_up    0002F2 R
  5 mul_char   0013B2 R   |   5 multiply   000E69 R   |   5 mulu24_8   000A01 R
  5 nbr_tst    000C46 R   |   5 ne         0013CD R   |   5 neg_acc2   000A3B R
  5 new        0018A2 R   |   5 next       001620 R   |   5 next_lin   000843 R
  5 next_tok   000887 R   |   5 no_match   000F58 R   |   5 other      000DB4 R
  3 pad        0016E0 R   |   1 par_leve   00000E R   |   5 parse_bi   000B89 R
  5 parse_in   000B3F R   |   5 parse_ke   000BC6 R   |   5 parse_qu   000AEA R
  5 pause      001C92 R   |   5 pause02    001C9C R   |   5 peek       00155F R
  5 pin_mode   001D8E R   |   5 plus_tst   000D2B R   |   5 poke       001550 R
  5 power_ad   00177B R   |   5 prcnt_ts   000D4C R   |   5 print      0013D0 R
  5 print_ex   001435 R   |   5 print_in   00092D R   |   5 print_ty   001441 R
  5 prt_basi   00129A R   |   5 prt_cmd_   001242 R   |   5 prt_loop   0013D4 R
  5 prt_quot   001256 R   |   5 prt_tok    00020B R   |   5 prti24     0008E5 R
  1 ptr16      000018 R   |   1 ptr8       000019 R   |   5 putc       0001C4 R
  5 puts       0001D7 R   |   5 qkey       001BCF GR  |   5 qmark_ts   000CD8 R
  5 random     001DFF R   |   5 read       00209B R   |   5 read01     00209D R
  5 readln     000A5E R   |   5 readln_l   000A66 R   |   5 readln_q   000ADB R
  5 refresh_   001F2B R   |   5 rel_exit   001128 R   |   5 relation   0010D4 R
  5 relop_st   0013B5 R   |   5 remark     0014CD R   |   5 reprint    000A88 R
  5 reset_co   0013D2 R   |   5 rest_con   001451 R   |   5 restore    002050 R
  5 return     0016BB R   |   5 right_ar   000A88 R   |   5 row_loop   00025C R
  5 rparnt_t   000C96 R   |   5 rshift     001D69 R   |   5 rt_msg     000764 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

  5 run        0016D9 R   |   5 run_it     001704 R   |   1 rx_char    000026 R
  5 save       001963 R   |   5 save_con   001441 R   |   5 search_d   000F38 R
  5 search_e   000F82 R   |   5 search_f   001918 R   |   5 search_l   000324 R
  5 search_l   00032C R   |   5 search_n   000F3C R   |   1 seedx      000013 R
  1 seedy      000015 R   |   5 seek_fdr   0018BA R   |   5 select_p   001DCF R
  5 set_time   001ECC R   |   5 sharp_ts   000CB7 R   |   5 show       00112B R
  5 show_row   00024A R   |   5 single_c   0013AB R   |   5 size       001176 R
  5 skip       000E48 R   |   5 slash_ts   000D41 R   |   5 sleep      001C87 R
  5 software   0004A9 R   |   5 spaces     0001FF R   |   5 spi_clea   002140 R
  5 spi_disa   002128 R   |   5 spi_enab   0020F5 R   |   5 spi_rcv_   002162 R
  5 spi_read   00218D R   |   5 spi_sele   002195 R   |   5 spi_send   00214C R
  5 spi_writ   00216D R   |   3 stack_fu   001760 R   |   3 stack_un   001800 R
  5 star_tst   000D36 R   |   5 step       0015F9 R   |   5 stop       001856 R
  5 store_lo   00160D R   |   5 str_matc   000F65 R   |   5 str_tst    000C36 R
  5 strcmp     0002C3 R   |   5 strcpy     0002D4 R   |   5 strlen     0002B6 R
  5 substrac   000E63 R   |   5 syntax_e   000795 R   |   1 tab_widt   000025 R
  5 tb_error   000797 R   |   5 term       001041 R   |   5 term01     00104A R
  5 term_exi   00108D R   |   3 tib        001690 R   |   5 tick_tst   000CF0 R
  1 ticks      00000F R   |   5 timeout    001EDB R   |   1 timer      000011 R
  5 timer2_i   0000B3 R   |   5 timer4_i   0000C0 R   |   5 tk_id      000785 R
  5 to         0015C9 R   |   5 to_upper   000DD2 GR  |   5 token_ch   000DCB R
  5 token_ex   000DCF R   |   5 token_ms   000242 R   |   5 tone       001732 R
  5 try_next   00208B R   |   1 txtbgn     00001D R   |   1 txtend     00001F R
  5 uart1_in   000189 R   |   5 uart1_se   000199 R   |   5 ubound     001180 R
  5 uflash     001C04 R   |   5 unlock_e   0000D5 R   |   5 unlock_f   0000E3 R
  5 until      001F89 R   |   5 user_int   000060 R   |   5 user_spa   002600 R
  5 usr        001C0A R   |   5 var_name   001292 R   |   1 vars       000027 R
  5 wait       0014D3 R   |   5 warm_ini   000596 R   |   5 warm_sta   00081C R
  5 words      001E66 R   |   5 words_co   001EB6 R   |   5 write      001B5E R
  5 write_bl   000166 R   |   5 write_by   0000F1 R   |   5 write_ee   00012D R
  5 write_ex   000161 R   |   5 write_fl   000117 R   |   5 xpeek      001570 R
    xreceive   ****** GX

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5B   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   260E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

