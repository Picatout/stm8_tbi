ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     31 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           0000A0    27 	STACK_SIZE=160
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000000    29 	FRUN=0 ; flags run code in variable flags
                           000001    30 	FTRAP=1 ; inside trap handler 
                           000002    31 	FLOOP=2 ; FOR loop in preparation 
                           000003    32 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    33 	FBREAK=4 ; break point flag 
                           000005    34 	FCOMP=5  ; compiling flags 
                           000006    35 	FAUTORUN=6; auto start program running 
                                     36 
                           004000    37 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     38 
                           000006    39         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     40 
                           007FFF    41 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     42 
                           000008    43 	RX_QUEUE_SIZE=8 
                                     44 
                           00F424    45         TIM2_CLK_FREQ=62500
                                     46 
                           000050    47 	TIB_SIZE=80
                           000080    48         PAD_SIZE=128
                                     49 
                                     50 ;--------------------------------------
                                     51 ;   constantes related to Arduino 
                                     52 ;   API mapping 
                                     53 ;-------------------------------------
                           000000    54         INP=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000001    55         OUTP=1 
                                     56 
                                     57 ;--------------------------------------
                                     58 ;       token attribute
                                     59 ;--------------------------------------
                                     60         ; bits 4:5 identify token group 
                                     61         ; 0x0n -> miscelinous 
                                     62         ; 0x1n -> +|- operators 
                                     63         ; 0x2n -> *|/|% operators
                                     64         ; 0x3n -> relational operators 
                           000080    65         TK_CMD=128      ; BASIC command   
                           000081    66         TK_IFUNC=129    ; BASIC integer function
                           000082    67         TK_CFUNC=130    ; BASIC character function
                           000083    68         TK_CONST=131    ; BASIC constant 
                           000084    69         TK_INTGR=132
                           000085    70         TK_VAR=133
                           000000    71         TK_NONE=0       ; not a token 
                           000001    72         TK_LABEL=1      ; used for defined, constants, variables
                           000002    73         TK_QSTR=2       ; quoted string  
                           000003    74         TK_CHAR=3       ; ASCII character 
                           000004    75         TK_TARGET=4     ; symbolic target for GOSUB|GOTO  
                           000006    76         TK_ARRAY=6     ; array variable '@' 
                           000007    77         TK_LPAREN=7     ; left parenthesis '('
                           000008    78         TK_RPAREN=8     ; right parenthesis ')'
                           000009    79         TK_COMMA=9     ; item separator ',' 
                           00000A    80         TK_SHARP=0xa     ; print colon width '#' 
                           00000B    81         TK_COLON=0xb      ; command separator ':' 
                                     82         
                           000010    83         TK_PLUS=0x10    ; addition operator '+'
                           000011    84         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    85         TK_MULT=0x20    ; multiplication operator '*'
                           000021    86         TK_DIV=0x21     ; division operator '/'
                           000022    87         TK_MOD=0x22     ; modulo operator '%'
                                     88 
                                     89         ; don't change these token values 
                                     90         ; values chosen to be used as a mask.
                                     91         ; bit 7   1 for dictionary words else 0 
                                     92         ; bits 6  always 0 
                                     93         ; bits 5:4 identify group 
                                     94         ; bits 3:0 token identifier inside group  
                           000031    95         TK_GT=0x31      ; relation operator '>'
                           000032    96         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033    97         TK_GE=0x33      ; relation operator '>='
                           000034    98         TK_LT=0x34      ; relation operator '<'
                           000036    99         TK_LE=0x36      ; relation operator '<='
                           000035   100         TK_NE=0x35      ; relation operator '<>' not equal 
                                    101         ; token groups 
                           000030   102         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   103         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   104         TK_GRP_ADD=0x10  ; additive operators
                           000020   105         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   106         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   107         CMD_END=2 
                                    108 
                                    109 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                    110 ;   error codes 
                                    111 ;--------------------------------------
                           000000   112     ERR_NONE=0
                           000001   113     ERR_MEM_FULL=1 
                           000002   114     ERR_SYNTAX=2
                           000003   115     ERR_MATH_OVF=3
                           000004   116     ERR_DIV0=4 
                           000005   117     ERR_NO_LINE=5
                           000006   118     ERR_RUN_ONLY=6
                           000007   119     ERR_CMD_ONLY=7
                           000008   120     ERR_DUPLICATE=8
                           000009   121     ERR_NOT_FILE=9
                           00000A   122     ERR_BAD_VALUE=10
                           00000B   123     ERR_NO_ACCESS=11
                           00000C   124     ERR_NO_DATA=12 
                           00000D   125     ERR_NO_PROG=13
                           00000E   126     ERR_NO_FSPACE=14
                           00000F   127     ERR_BUF_FULL=15
                                    128 
                                    129 ;--------------------------------------
                                    130 ;   assembler flags 
                                    131 ;-------------------------------------
                           000000   132     MATH_OVF=0 ; if 1 the stop on math overflow 
                                    133 
                           000002   134     CELL_SIZE=2 
                                    135 
                                    136     .macro _usec_dly n 
                                    137     ldw x,#(16*n-2)/4
                                    138     decw x
                                    139     nop 
                                    140     jrne .-4
                                    141     .endm 
                                    142     
                                    143     ; load X register with 
                                    144     ; entry point of dictionary
                                    145     ; before calling 'search_dict'
                                    146     .macro _ldx_dict dict_name
                                    147     ldw x,#dict_name+2
                                    148     .endm 
                                    149 
                                    150     ; reset BASIC pointer
                                    151     ; to beginning of last token
                                    152     ; extracted except if it was end of line 
                                    153     .macro _unget_token 
                                    154      mov in,in.saved  
                                    155     .endm
                                    156 
                                    157 ;-------------------------------
                                    158 ;  macros used to help debugging
                                    159 ;-------------------------------
                           000000   160     DEBUG=0
                                    161     .macro _dbg 
                                    162     DEBUG=1
                                    163     .endm
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                    165     .macro _nodbg
                                    166     DEBUG=0
                                    167     .endm 
                                    168 
                           000006   169     DBG_CC=6
                           000005   170     DBG_A=5 
                           000003   171     DBG_X=3 
                           000001   172     DBG_Y=1 
                                    173     .macro _dbg_save_regs 
                                    174     .if DEBUG
                                    175     push cc ; (6,sp)
                                    176     push a   ; (5,sp)
                                    177     pushw x  ; (3,sp)
                                    178     pushw y  ; (1,sp)
                                    179     .endif 
                                    180     .endm 
                                    181 
                                    182     .macro _dbg_restore_regs 
                                    183     .if DEBUG 
                                    184     popw y 
                                    185     popw x 
                                    186     pop a 
                                    187     pop cc 
                                    188     .endif 
                                    189     .endm 
                                    190 
                                    191     .macro _dbg_getc 
                                    192     .if DEBUG 
                                    193     _dbg_save_regs 
                                    194     call getc
                                    195     ld (DBG_A,sp),a 
                                    196     _dbg_restore_regs  
                                    197     .endif
                                    198     .endm 
                                    199 
                                    200     .macro _dbg_putc 
                                    201     .if DEBUG
                                    202     push cc 
                                    203     call putc 
                                    204     pop cc 
                                    205     .endif 
                                    206     .endm 
                                    207 
                                    208     .macro _dbg_puts 
                                    209     .if DEBUG 
                                    210     _dbg_save_regs
                                    211     call puts 
                                    212     _dbg_restore_regs
                                    213     .endif 
                                    214     .endm 
                                    215 
                                    216     .macro _dbg_prti24 
                                    217     .if DEBUG 
                                    218     _dbg_save_regs
                                    219     call prti24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                    220     _dbg_restore_regs
                                    221     .endif
                                    222     .endm 
                                    223 
                                    224     .macro _dbg_prt_regs
                                    225     .if DEBUG
                                    226     _dbg_save_regs
                                    227     call prt_regs 
                                    228     _dbg_restore_regs 
                                    229     .endif 
                                    230     .endm 
                                    231 
                                    232     .macro _dbg_peek addr 
                                    233     .if DEBUG
                                    234     _dbg_save_regs 
                                    235     ldw x,addr 
                                    236     call peek     
                                    237     _dbg_restore_regs
                                    238     .endif 
                                    239     .endm 
                                    240 
                                    241     .macro _dbg_parser_init 
                                    242     .if DEBUG 
                                    243     _dbg_save_regs
                                    244     call parser_init 
                                    245     _dbg_restore_regs
                                    246     .endif
                                    247     .endm
                                    248 
                                    249     .macro _dbg_readln
                                    250     .if DEBUG 
                                    251     _dbg_save_regs
                                    252     call readln
                                    253     _dbg_restore_regs
                                    254     .endif
                                    255     .endm
                                    256 
                                    257     .macro _dbg_number
                                    258     .if DEBUG 
                                    259     _dbg_save_regs
                                    260     call number 
                                    261     _dbg_restore_regs
                                    262     .endif
                                    263     .endm  
                                    264 
                                    265     .macro _dbg_nextword
                                    266     .if DEBUG 
                                    267     _dbg_save_regs
                                    268     call get_token   
                                    269     _dbg_restore_regs
                                    270     .endif
                                    271     .endm  
                                    272 
                                    273     .macro _dbg_dots 
                                    274     .if DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    275     _dbg_save_regs
                                    276     call dots 
                                    277     _dbg_restore_regs
                                    278     .endif 
                                    279     .endm 
                                    280 
                                    281     .macro _dbg_trap
                                    282     .if DEBUG 
                                    283     bset flags,#FTRAP 
                                    284     trap 
                                    285     .endif 
                                    286     .endm 
                                    287 
                                    288     .macro _dbg_mark n  
                                    289     .if DEBUG 
                                    290     push cc
                                    291     push a 
                                    292     ld a,#n 
                                    293     call putc
                                    294     btjf UART3_SR,#UART_SR_TC,. 
                                    295     pop a 
                                    296     pop cc 
                                    297     .endif 
                                    298     .endm 
                                    299     
                                    300     .macro _dbg_prt_var var 
                                    301     .if DEBUG
                                    302     _dbg_save_regs 
                                    303     ldw x,var 
                                    304     ldw acc16,x 
                                    305     clr acc24 
                                    306     clrw x 
                                    307     ld a,#16+128  
                                    308     call prti24
                                    309     ld a,#CR 
                                    310     call putc  
                                    311     _dbg_restore_regs 
                                    312     .endif 
                                    313     .endm 
                                    314 
                                    315     .macro _dbg_show 
                                    316     .if DEBUG 
                                    317     _dbg_save_regs 
                                    318     call show 
                                    319     _dbg_restore_regs
                                    320     .endif
                                    321     .endm 
                                    322 
                                    323     ; software reset 
                                    324     .macro _swreset
                                    325     mov WWDG_CR,#0X80
                                    326     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     32 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DATALN_IDX=DATA_IDX+2
                           000022    42     DDR_IDX=DATALN_IDX+2
                           000024    43     DEC_IDX=DDR_IDX+2
                           000026    44     DO_IDX=DEC_IDX+2
                           000028    45     DREAD_IDX=DO_IDX+2
                           00002A    46     DWRITE_IDX=DREAD_IDX+2
                           00002C    47     EDIT_IDX=DWRITE_IDX+2
                           00002E    48     EEPROM_IDX=EDIT_IDX+2
                           000030    49     END_IDX=EEPROM_IDX+2
                           000032    50     ERASE_IDX=END_IDX+2
                           000034    51     FCPU_IDX=ERASE_IDX+2
                           000036    52     SAVE_IDX=FCPU_IDX+2
                           000038    53     FOR_IDX=SAVE_IDX+2
                           00003A    54     GOSUB_IDX=FOR_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GOTO_IDX=GOSUB_IDX+2
                           00003E    56     GPIO_IDX=GOTO_IDX+2
                           000040    57     HEX_IDX=GPIO_IDX+2
                           000042    58     IDR_IDX=HEX_IDX+2
                           000044    59     IF_IDX=IDR_IDX+2
                           000046    60     INPUT_IDX=IF_IDX+2
                           000048    61     INVERT_IDX=INPUT_IDX+2
                           00004A    62     IWDGEN_IDX=INVERT_IDX+2
                           00004C    63     IWDGREF_IDX=IWDGEN_IDX+2
                           00004E    64     KEY_IDX=IWDGREF_IDX+2
                           000050    65     LET_IDX=KEY_IDX+2
                           000052    66     LIST_IDX=LET_IDX+2
                           000054    67     LOG_IDX=LIST_IDX+2
                           000056    68     LSHIFT_IDX=LOG_IDX+2
                           000058    69     MULDIV_IDX=LSHIFT_IDX+2
                           00005A    70     NEXT_IDX=MULDIV_IDX+2
                           00005C    71     NEW_IDX=NEXT_IDX+2
                           00005E    72     NOT_IDX=NEW_IDX+2
                           000060    73     ODR_IDX=NOT_IDX+2
                           000062    74     OR_IDX=ODR_IDX+2
                           000064    75     PAD_IDX=OR_IDX+2
                           000066    76     PAUSE_IDX=PAD_IDX+2
                           000068    77     PMODE_IDX=PAUSE_IDX+2
                           00006A    78     PEEK_IDX=PMODE_IDX+2
                           00006C    79     PINP_IDX=PEEK_IDX+2
                           00006E    80     POKE_IDX=PINP_IDX+2
                           000070    81     POUT_IDX=POKE_IDX+2
                           000072    82    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000074    83     PRTA_IDX=PRT_IDX+2
                           000076    84     PRTB_IDX=PRTA_IDX+2
                           000078    85     PRTC_IDX=PRTB_IDX+2
                           00007A    86     PRTD_IDX=PRTC_IDX+2
                           00007C    87     PRTE_IDX=PRTD_IDX+2
                           00007E    88     PRTF_IDX=PRTE_IDX+2
                           000080    89     PRTG_IDX=PRTF_IDX+2
                           000082    90     PRTH_IDX=PRTG_IDX+2
                           000084    91     PRTI_IDX=PRTH_IDX+2
                           000086    92     QKEY_IDX=PRTI_IDX+2
                           000088    93     READ_IDX=QKEY_IDX+2
                           00008A    94     RBT_IDX=READ_IDX+2  ; REBOOT
                           00008C    95 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008E    96     REST_IDX=REM_IDX+2 ; RESTORE
                           000090    97     RET_IDX=REST_IDX+2  ; RETURN 
                           000092    98     RND_IDX=RET_IDX+2 ; RANDOM 
                           000094    99     RSHIFT_IDX=RND_IDX+2
                           000096   100     RUN_IDX=RSHIFT_IDX+2
                           000098   101     SHOW_IDX=RUN_IDX+2
                           00009A   102     FREE_IDX=SHOW_IDX+2
                           00009C   103     SLEEP_IDX=FREE_IDX+2
                           00009E   104     SPIRD_IDX=SLEEP_IDX+2
                           0000A0   105     SPIEN_IDX=SPIRD_IDX+2
                           0000A2   106     SPISEL_IDX=SPIEN_IDX+2
                           0000A4   107     SPIWR_IDX=SPISEL_IDX+2
                           0000A6   108     STEP_IDX=SPIWR_IDX+2
                           0000A8   109     STOP_IDX=STEP_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000AA   110     TICKS_IDX=STOP_IDX+2
                           0000AC   111     TIMER_IDX=TICKS_IDX+2
                           0000AE   112     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000B0   113     TO_IDX=TMROUT_IDX+2
                           0000B2   114     TONE_IDX=TO_IDX+2
                           0000B4   115     UBOUND_IDX=TONE_IDX+2
                           0000B6   116     UFLASH_IDX=UBOUND_IDX+2
                           0000B8   117     UNTIL_IDX=UFLASH_IDX+2
                           0000BA   118     USR_IDX=UNTIL_IDX+2
                           0000BC   119     WAIT_IDX=USR_IDX+2
                           0000BE   120     WORDS_IDX=WAIT_IDX+2
                           0000C0   121     WRITE_IDX=WORDS_IDX+2
                           0000C2   122     XOR_IDX=WRITE_IDX+2
                           0000C4   123     SIZE_IDX=XOR_IDX+2 
                           0000C6   124     ON_IDX=SIZE_IDX+2 
                           0000C8   125     GET_IDX=ON_IDX+2 
                                    126         
                                    127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     33   
                                     34 
                                     35 ;_dbg 
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001690                         41     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         45 stack_unf: ; stack underflow ; control_stack bottom 
                                     46 
                                     47 ;;--------------------------------------
                                     48     .area HOME 
                                     49 ;; interrupt vector table at 0x8000
                                     50 ;;--------------------------------------
      000000 82 00 0E D6             51     int cold_start			; RESET vector 
                           000000    52 .if DEBUG
                                     53 	int TrapHandler 		;TRAP  software interrupt
                           000001    54 .else
      000004 82 00 00 00             55 	int NonHandledInterrupt ;TRAP  software interrupt
                                     56 .endif
      000008 82 00 00 00             57 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01             58 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             59 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             60 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             61 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             62 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             63 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 24             64 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             65 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             66 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             67 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             68 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             69 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             70 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             71 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             72 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             73 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             74 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 02 7F             75 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             76 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             77 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             78 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             79 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 0F             80 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             81 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             82 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             83 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             84 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             85 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             86 	int NonHandledInterrupt ;int29  not used
                                     87 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     88 ;---------------------------------------
                                     89     .area CODE
                                     90 ;---------------------------------------
                           000000    91 .if DEBUG
                                     92 .asciz "STM8_TBI" ; I like to put module name here.
                                     93 .endif 
                                     94 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     96 ; non handled interrupt 
                                     97 ; reset MCU
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         99 NonHandledInterrupt:
      000000 71                     100     .byte 0x71  ; invalid opcode reinitialize MCU
                                    101 
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    103 ; auto wakeup from halt
                                    104 ; at iret, program continue 
                                    105 ; after hatl instruction
                                    106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        107 AWUHandler:
      000001 72 19 50 F0      [ 1]  108 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  109 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  110 	clr AWU_TBR 
      00000E 80               [11]  111 	iret
                                    112 
                                    113 ;------------------------------------
                                    114 ; software interrupt handler  
                                    115 ;------------------------------------
                           000000   116 .if DEBUG 
                                    117 TrapHandler:
                                    118 	bset flags,#FTRAP 
                                    119 	call print_registers
                                    120 	call cmd_itf
                                    121 	bres flags,#FTRAP 	
                                    122 	iret
                                    123 .endif 
                                    124 
                                    125 ;------------------------------
                                    126 ; TIMER 4 is used to maintain 
                                    127 ; a milliseconds 'ticks' counter
                                    128 ; and decrement 'timer' varaiable
                                    129 ;--------------------------------
      00000F                        130 Timer4UpdateHandler:
      00000F 72 5F 53 42      [ 1]  131 	clr TIM4_SR 
      000013 CE 00 0F         [ 2]  132 	ldw x,ticks
      000016 5C               [ 1]  133 	incw x
      000017 CF 00 0F         [ 2]  134 	ldw ticks,x 
      00001A CE 00 11         [ 2]  135 	ldw x,timer
                                    136 ;	tnzw x 
      00001D 27 04            [ 1]  137 	jreq 1$
      00001F 5A               [ 2]  138 	decw x 
      000020 CF 00 11         [ 2]  139 	ldw timer,x 
      000023                        140 1$:	
      000023 80               [11]  141 	iret 
                                    142 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    143 ;------------------------------------
                                    144 ; Triggered by pressing USER UserButton 
                                    145 ; on NUCLEO card.
                                    146 ; This is used to abort a progam lock 
                                    147 ; in infinite loop. 
                                    148 ;------------------------------------
      000024                        149 UserButtonHandler:
                                    150 ; wait button release
      000024 5F               [ 1]  151 	clrw x
      000025 5A               [ 2]  152 1$: decw x 
      000026 26 FD            [ 1]  153 	jrne 1$
      000028 72 09 50 15 F8   [ 2]  154 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    155 ; if MCU suspended by SLEEP resume program
      00002D 72 07 00 21 05   [ 2]  156     btjf flags,#FSLEEP,2$
      000032 72 17 00 21      [ 1]  157 	bres flags,#FSLEEP 
      000036 80               [11]  158 	iret
      000037                        159 2$:	
      000037                        160 user_interrupted:
      000037 72 00 00 21 02   [ 2]  161     btjt flags,#FRUN,4$
      00003C 20 0A            [ 2]  162 	jra UBTN_Handler_exit 
      00003E                        163 4$:	; program interrupted by user 
      00003E 72 11 00 21      [ 1]  164 	bres flags,#FRUN 
      000042 AE 00 5B         [ 2]  165 	ldw x,#USER_ABORT
      000045 CD 03 4E         [ 4]  166 	call puts 
      000048                        167 UBTN_Handler_exit:
      000048 AE 17 FF         [ 2]  168     ldw x,#STACK_EMPTY 
      00004B 94               [ 1]  169     ldw sp,x
      00004C 9A               [ 1]  170 	rim 
      00004D CE 00 1A         [ 2]  171 	ldw x,txtbgn 
      000050 A3 2C 00         [ 2]  172 	cpw x,#app_space 
      000053 22 03            [ 1]  173 	jrugt 5$
      000055 CD 0F F9         [ 4]  174 	call clear_basic 
      000058 CC 12 15         [ 2]  175 5$:	jp warm_start
                                    176 
      00005B 0A 50 72 6F 67 72 61   177 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    178 
                                    179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    180 ;    peripherals initialization
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 
                                    183 ;----------------------------------------
                                    184 ; inialize MCU clock 
                                    185 ; input:
                                    186 ;   A 		source  HSI | 1 HSE 
                                    187 ;   XL      CLK_CKDIVR , clock divisor 
                                    188 ; output:
                                    189 ;   none 
                                    190 ;----------------------------------------
      000076                        191 clock_init:	
      000076 C1 50 C3         [ 1]  192 	cp a,CLK_CMSR 
      000079 27 0C            [ 1]  193 	jreq 2$ ; no switching required 
                                    194 ; select clock source 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00007B 72 12 50 C5      [ 1]  195 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00007F C7 50 C4         [ 1]  196 	ld CLK_SWR,a
      000082 C1 50 C3         [ 1]  197 1$:	cp a,CLK_CMSR
      000085 26 FB            [ 1]  198 	jrne 1$
      000087                        199 2$: 	
                                    200 ; HSI and cpu clock divisor 
      000087 9F               [ 1]  201 	ld a,xl 
      000088 C7 50 C6         [ 1]  202 	ld CLK_CKDIVR,a  
      00008B 81               [ 4]  203 	ret
                                    204 
                                    205 ;----------------------------------
                                    206 ; TIMER2 used as audio tone output 
                                    207 ; on port D:5.
                                    208 ; channel 1 configured as PWM mode 1 
                                    209 ;-----------------------------------  
                                    210 
      00008C                        211 timer2_init:
      00008C 72 1A 50 C7      [ 1]  212 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000090 35 60 53 05      [ 1]  213  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      000094 35 08 53 0C      [ 1]  214 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      000098 81               [ 4]  215 	ret 
                                    216 
                                    217 ;---------------------------------
                                    218 ; TIM4 is configured to generate an 
                                    219 ; interrupt every millisecond 
                                    220 ;----------------------------------
      000099                        221 timer4_init:
      000099 72 18 50 C7      [ 1]  222 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      00009D 35 07 53 45      [ 1]  223 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A1 35 7D 53 46      [ 1]  224 	mov TIM4_ARR,#125 ; set for 1msec.
      0000A5 35 05 53 40      [ 1]  225 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A9 72 10 53 41      [ 1]  226 	bset TIM4_IER,#TIM4_IER_UIE
      0000AD 81               [ 4]  227 	ret
                                    228 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0000AE                         45 unlock_eeprom:
      0000AE 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0000B3 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0000B7 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0000BB 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000BF 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C3 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000C8 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0000C9                         62 unlock_flash:
      0000C9 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0000CE 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0000D2 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0000D6 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000DA 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000DE 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000E3 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0000E4                         76 row_erase:
      0000E4 88               [ 1]   77 	push a 
      0000E5 90 89            [ 2]   78 	pushw y 
      0000E7 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0000EB 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0000EF 4F               [ 1]   81 	clr a 
      0000F0 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0000F2 91 A7 00 17      [ 1]   83 	ldf ([farptr],y),a
      0000F6 90 5C            [ 1]   84     incw y
      0000F8 91 A7 00 17      [ 1]   85 	ldf ([farptr],y),a
      0000FC 90 5C            [ 1]   86     incw y
      0000FE 91 A7 00 17      [ 1]   87 	ldf ([farptr],y),a
      000102 90 5C            [ 1]   88     incw y
      000104 91 A7 00 17      [ 1]   89 	ldf ([farptr],y),a
      000108 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00010D 90 85            [ 2]   91 	popw y 
      00010F 84               [ 1]   92 	pop a 
      000110 81               [ 4]   93 	ret
      000111                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000111                         97 move_erase_to_ram:
      000111 89               [ 2]   98 	pushw x 
      000112 90 89            [ 2]   99 	pushw y 
      000114 AE 01 11         [ 2]  100 	ldw x,#row_erase_end 
      000117 1D 00 E4         [ 2]  101 	subw x,#row_erase
      00011A CF 00 0D         [ 2]  102 	ldw acc16,x 
      00011D AE 16 90         [ 2]  103 	ldw x,#tib 
      000120 90 AE 00 E4      [ 2]  104 	ldw y,#row_erase 
      000124 CD 0E 38         [ 4]  105 	call move
      000127 90 85            [ 2]  106 	popw y
      000129 85               [ 2]  107 	popw x
      00012A 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00012B                        123 program_row:
      00012B 88               [ 1]  124 	push a 
      00012C 90 89            [ 2]  125 	pushw y 
      00012E 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000130 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000134 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
                                    130 ;	mov FLASH_CR2,#(1<<FLASH_CR2_PRG) 
                                    131 ;	mov FLASH_NCR2,#~(1<<FLASH_CR2_PRG)
      000138 90 5F            [ 1]  132 	clrw y 
      00013A F6               [ 1]  133 1$:	ld a,(x)
      00013B 91 A7 00 17      [ 1]  134 	ldf ([farptr],y),a
      00013F 5C               [ 1]  135 	incw x 
      000140 90 5C            [ 1]  136 	incw y 
      000142 0A 01            [ 1]  137 	dec (BCNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000144 26 F4            [ 1]  138 	jrne 1$
                                    139 ; wait EOP bit 
      000146 72 05 50 5F FB   [ 2]  140 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00014B                        141 	_drop 1 
      00014B 5B 01            [ 2]    1     addw sp,#1 
      00014D 90 85            [ 2]  142 	popw y 
      00014F 84               [ 1]  143 	pop a 
      000150 81               [ 4]  144 	ret 
      000151                        145 program_row_end:
                                    146 
                                    147 ;-------------------------
                                    148 ; move program_row to RAM 
                                    149 ; at txtubound address 
                                    150 ;------------------------
      000151                        151 move_prg_to_ram:
      000151 89               [ 2]  152 	pushw x 
      000152 90 89            [ 2]  153 	pushw y 
      000154 AE 01 51         [ 2]  154 	ldw x,#program_row_end 
      000157 1D 01 2B         [ 2]  155 	subw x,#program_row 
      00015A CF 00 0D         [ 2]  156 	ldw acc16,x ; bytes to move 
      00015D AE 16 90         [ 2]  157 	ldw x,#tib ; destination address 
      000160 90 AE 01 2B      [ 2]  158 	ldw y,#program_row ; source address 
      000164 CD 0E 38         [ 4]  159 	call move
      000167 90 85            [ 2]  160 	popw y 
      000169 85               [ 2]  161 	popw x  
      00016A 81               [ 4]  162 	ret 
                                    163 
                                    164 
                                    165 ;-----------------------------
                                    166 ; write a row in FLASH/EEPROM 
                                    167 ; input:
                                    168 ;    farptr   destination address 
                                    169 ;    x        source address 
                                    170 ;-----------------------------
      00016B                        171 write_row:
      00016B 89               [ 2]  172 	pushw x 
      00016C 72 5D 00 17      [ 1]  173 	tnz farptr 
      000170 26 0D            [ 1]  174 	jrne to_flash 
      000172 CE 00 18         [ 2]  175 	ldw x,farptr+1 
      000175 A3 2C 00         [ 2]  176 	cpw x,#app_space  
      000178 24 05            [ 1]  177 	jruge to_flash 
      00017A                        178 to_eeprom:
      00017A CD 00 AE         [ 4]  179 	call unlock_eeprom
      00017D 20 03            [ 2]  180 	jra do_programming
      00017F                        181 to_flash:
      00017F CD 00 C9         [ 4]  182 	call unlock_flash
      000182                        183 do_programming:
      000182 85               [ 2]  184 	popw x 
      000183 CD 16 90         [ 4]  185 	call tib
      000186 72 13 50 5F      [ 1]  186 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00018A 72 17 50 5F      [ 1]  187 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00018E 81               [ 4]  188 	ret 
                                    189 
                                    190 
                                    191 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                    192 ; erase flash or EEPROM block
                                    193 ; a block is 128 bytes 
                                    194 ; input:
                                    195 ;   farptr  address row begin
                                    196 ; output:
                                    197 ;   none
                                    198 ;--------------------------------------
      00018F                        199 block_erase:
      00018F 89               [ 2]  200 	pushw x 
      000190 CE 00 18         [ 2]  201 	ldw x,farptr+1
      000193 A3 2C 00         [ 2]  202 	cpw x,#app_space 
      000196 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000198 CD 00 AE         [ 4]  205 	call unlock_eeprom 
      00019B CD 16 90         [ 4]  206 	call tib 
      00019E 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001A2 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0001A4                        210 erase_flash:
      0001A4 CD 00 C9         [ 4]  211 	call unlock_flash 
      0001A7 CD 16 90         [ 4]  212 	call tib 
      0001AA 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001AE                        214 erase_exit: 
      0001AE 85               [ 2]  215 	popw x 
      0001AF 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0001B0                        232 write_byte:
      0001B0 90 89            [ 2]  233 	pushw y
      0001B2                        234 	_vars VSIZE
      0001B2 52 02            [ 2]    1     sub sp,#VSIZE 
      0001B4 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0001B6 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0001B8 90 CE 00 18      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001BC 72 5D 00 17      [ 1]  240 	tnz farptr 
      0001C0 26 14            [ 1]  241 	jrne write_flash
      0001C2 90 A3 2C 00      [ 2]  242     cpw y,#app_space 	 
      0001C6 24 0E            [ 1]  243     jruge write_flash
      0001C8 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0001CC 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0001CE 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0001D2 22 51            [ 1]  247 	jrugt write_exit
      0001D4 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0001D6                        250 write_flash:
      0001D6 CD 00 C9         [ 4]  251 	call unlock_flash 
      0001D9 9B               [ 1]  252 1$:	sim 
      0001DA 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0001DC 92 A7 00 17      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0001E0 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0001E5 9A               [ 1]  256     rim 
      0001E6 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001EA 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0001EC                        260 write_eeprom:
      0001EC CD 00 AE         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0001EF 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0001F3 2B 08            [ 1]  264 	jrmi 1$
      0001F5 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0001F9 2A 02            [ 1]  266 	jrpl 1$
      0001FB 03 02            [ 1]  267 	cpl (OPT,sp)
      0001FD                        268 1$: 
      0001FD 0D 02            [ 1]  269     tnz (OPT,sp)
      0001FF 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000201 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000205 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000209                        274 2$: 
      000209 7B 01            [ 1]  275     ld a,(BTW,sp)
      00020B 92 A7 00 17      [ 4]  276     ldf ([farptr],x),a
      00020F 0D 02            [ 1]  277     tnz (OPT,sp)
      000211 27 08            [ 1]  278     jreq 3$
      000213 5C               [ 1]  279     incw x
      000214 7B 01            [ 1]  280     ld a,(BTW,sp)
      000216 43               [ 1]  281     cpl a
      000217 92 A7 00 17      [ 4]  282     ldf ([farptr],x),a
      00021B 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000220 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000225                        285 write_exit:
      000225                        286 	_drop VSIZE 
      000225 5B 02            [ 2]    1     addw sp,#VSIZE 
      000227 90 85            [ 2]  287 	popw y
      000229 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; input:
                                    293 ;   Y        source address   
                                    294 ;   X        array index  destination  farptr[x]
                                    295 ;   BSIZE    block size bytes 
                                    296 ;   farptr   write address , byte* 
                                    297 ; output:
                                    298 ;	X 		after last byte written 
                                    299 ;   Y 		after last byte read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                    300 ;  farptr   point after block
                                    301 ;---------------------------------------------
      00022A                        302 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00022A                        303 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    304 	; local var 
                           000001   305 	XSAVE=1 
                           000002   306 	VSIZE=2 
      00022A                        307 write_block::
      00022A 88               [ 1]  308 	push a 
      00022B                        309 	_vars VSIZE
      00022B 52 02            [ 2]    1     sub sp,#VSIZE 
      00022D 1F 01            [ 2]  310 	ldw (XSAVE,sp),x 
      00022F 1E 06            [ 2]  311 	ldw x,(BSIZE,sp) 
      000231 27 13            [ 1]  312 	jreq 9$
      000233 1E 01            [ 2]  313 1$:	ldw x,(XSAVE,sp)
      000235 90 F6            [ 1]  314 	ld a,(y)
      000237 CD 01 B0         [ 4]  315 	call write_byte 
      00023A 5C               [ 1]  316 	incw x 
      00023B 90 5C            [ 1]  317 	incw y 
      00023D 1F 01            [ 2]  318 	ldw (XSAVE,sp),x
      00023F 1E 06            [ 2]  319 	ldw x,(BSIZE,sp)
      000241 5A               [ 2]  320 	decw x
      000242 1F 06            [ 2]  321 	ldw (BSIZE,sp),x 
      000244 26 ED            [ 1]  322 	jrne 1$
      000246                        323 9$:
      000246 1E 01            [ 2]  324 	ldw x,(XSAVE,sp)
      000248 CD 1F B9         [ 4]  325 	call incr_farptr
      00024B                        326 	_drop VSIZE
      00024B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00024D 84               [ 1]  327 	pop a 
      00024E 81               [ 4]  328 	ret 
                                    329 
                                    330 
                                    331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    332 ;;  scan_free_eeprom
                                    333 ;;  return free address in eeprom 
                                    334 ;;  input:
                                    335 ;;     none
                                    336 ;;  output:
                                    337 ;;     X    address free 
                                    338 ;;          if full return 0
                                    339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00024F                        340 scan_free_eeprom::
      00024F 88               [ 1]  341     push a
      000250                        342     _vars 2  
      000250 52 02            [ 2]    1     sub sp,#2 
      000252 AE 40 00         [ 2]  343     ldw x,#EEPROM_BASE  
      000255                        344 1$: ; expect a string here 
      000255 F6               [ 1]  345     ld a,(x)
      000256 27 10            [ 1]  346     jreq 8$ ; free address 
      000258 1F 01            [ 2]  347     ldw (1,sp),x 
      00025A 5F               [ 1]  348     clrw x 
      00025B 97               [ 1]  349     ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      00025C 72 FB 01         [ 2]  350     addw x,(1,sp) ; skip name 
      00025F 1C 00 05         [ 2]  351     addw x,#5 ; skip terminal 0 and value
      000262 A3 47 FF         [ 2]  352     cpw x,#EEPROM_END 
      000265 25 EE            [ 1]  353     jrult 1$
      000267 5F               [ 1]  354     clrw x  
      000268                        355 8$: _drop 2  
      000268 5B 02            [ 2]    1     addw sp,#2 
      00026A 84               [ 1]  356     pop a 
      00026B 81               [ 4]  357     ret 
                                    358 
                                    359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    360 ;;  eefree 
                                    361 ;;  return free bytes in eeprom 
                                    362 ;;  input:
                                    363 ;;     none 
                                    364 ;;  output:
                                    365 ;;     X     size 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00026C                        367 eefree:
      00026C CD 02 4F         [ 4]  368     call scan_free_eeprom 
      00026F CF 00 2D         [ 2]  369     ldw free_eeprom,x 
      000272 5D               [ 2]  370     tnzw x 
      000273 27 09            [ 1]  371     jreq 9$ 
      000275 89               [ 2]  372     pushw x 
      000276 AE 48 00         [ 2]  373     ldw x,#EEPROM_BASE+EEPROM_SIZE 
      000279 72 F0 01         [ 2]  374     subw x,(1,sp)
      00027C                        375     _drop 2  
      00027C 5B 02            [ 2]    1     addw sp,#2 
      00027E 81               [ 4]  376 9$: ret 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00027F                         66 Uart1RxHandler: ; console receive char 
      00027F 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000284 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000287 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000289 26 06            [ 1]   70 	jrne 2$
      00028B CD 02 F1         [ 4]   71 	call putc 
      00028E CC 00 37         [ 2]   72 	jp user_interrupted
      000291                         73 2$:
      000291 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000293 26 03            [ 1]   75 	jrne 3$
      000295 CC 0E D6         [ 2]   76 	jp cold_start 	
      000298 88               [ 1]   77 3$:	push a 
      000299 A6 23            [ 1]   78 	ld a,#rx1_queue 
      00029B CB 00 2C         [ 1]   79 	add a,rx1_tail 
      00029E 5F               [ 1]   80 	clrw x 
      00029F 97               [ 1]   81 	ld xl,a 
      0002A0 84               [ 1]   82 	pop a 
      0002A1 F7               [ 1]   83 	ld (x),a 
      0002A2 C6 00 2C         [ 1]   84 	ld a,rx1_tail 
      0002A5 4C               [ 1]   85 	inc a 
      0002A6 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0002A8 C7 00 2C         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002AB 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0002AC                         97 uart1_init:
      0002AC 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0002B0 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0002B4 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0002B8 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0002BC                        103 uart1_set_baud: 
      0002BC 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002BD A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0002BF C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0002C2 27 0A            [ 1]  109 	jreq 2$ 
      0002C4                        110 1$: ; 8 Mhz 	
      0002C4 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0002C8 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0002CC 20 08            [ 2]  113 	jra 3$
      0002CE                        114 2$: ; 16 Mhz 	
      0002CE 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002D2 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0002D6                        117 3$:
      0002D6 72 5F 52 31      [ 1]  118     clr UART1_DR
      0002DA 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002DE 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0002E2 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0002E7 72 5F 00 2B      [ 1]  122     clr rx1_head 
      0002EB 72 5F 00 2C      [ 1]  123 	clr rx1_tail
      0002EF 84               [ 1]  124 	pop a  
      0002F0 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0002F1                        133 putc:: ; console output always on UART1
      0002F1                        134 uart1_putc:: 
      0002F1 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0002F6 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0002F9 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0002FA                        148 qgetc::
      0002FA                        149 uart1_qgetc::
      0002FA C6 00 2B         [ 1]  150 	ld a,rx1_head 
      0002FD C0 00 2C         [ 1]  151 	sub a,rx1_tail 
      000300 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000301                        161 getc:: ;console input
      000301                        162 uart1_getc::
      000301 CD 02 FA         [ 4]  163 	call uart1_qgetc
      000304 27 FB            [ 1]  164 	jreq uart1_getc 
      000306 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000307 A6 23            [ 1]  167 	ld a,#rx1_queue
      000309 CB 00 2B         [ 1]  168 	add a,rx1_head 
      00030C 5F               [ 1]  169 	clrw x  
      00030D 97               [ 1]  170 	ld xl,a 
      00030E F6               [ 1]  171 	ld a,(x)
      00030F 88               [ 1]  172 	push a
      000310 C6 00 2B         [ 1]  173 	ld a,rx1_head 
      000313 4C               [ 1]  174 	inc a 
      000314 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000316 C7 00 2B         [ 1]  176 	ld rx1_head,a 
      000319 84               [ 1]  177 	pop a  
      00031A 85               [ 2]  178 	popw x
      00031B 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00031C 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000328                        207 get_escape:
      000328 CD 03 01         [ 4]  208     call getc 
      00032B A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      00032D 27 02            [ 1]  210     jreq 1$
      00032F 4F               [ 1]  211     clr a
      000330 81               [ 4]  212     ret
      000331 CD 03 01         [ 4]  213 1$: call getc 
      000334 AE 03 1C         [ 2]  214     ldw x,#convert_table
      000337                        215 2$:
      000337 F1               [ 1]  216     cp a,(x)
      000338 27 08            [ 1]  217     jreq 4$
      00033A 1C 00 02         [ 2]  218     addw x,#2
      00033D 7D               [ 1]  219     tnz (x)
      00033E 26 F7            [ 1]  220     jrne 2$
      000340 4F               [ 1]  221     clr a
      000341 81               [ 4]  222     ret 
      000342 5C               [ 1]  223 4$: incw x 
      000343 F6               [ 1]  224     ld a,(x)
      000344 A1 84            [ 1]  225     cp a,#SUP
      000346 26 05            [ 1]  226     jrne 5$
      000348 88               [ 1]  227     push a 
      000349 CD 03 01         [ 4]  228     call getc
      00034C 84               [ 1]  229     pop a 
      00034D                        230 5$:
      00034D 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00034E                        241 puts::
      00034E F6               [ 1]  242     ld a,(x)
      00034F 27 06            [ 1]  243 	jreq 1$
      000351 CD 02 F1         [ 4]  244 	call putc 
      000354 5C               [ 1]  245 	incw x 
      000355 20 F7            [ 2]  246 	jra puts 
      000357 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000358                        258 bksp:
      000358 A6 08            [ 1]  259 	ld a,#BS 
      00035A CD 02 F1         [ 4]  260 	call putc 
      00035D A6 20            [ 1]  261 	ld a,#SPACE 
      00035F CD 02 F1         [ 4]  262 	call putc 
      000362 A6 08            [ 1]  263 	ld a,#BS 
      000364 CD 02 F1         [ 4]  264 	call putc 
      000367 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000368                        274 delete_nchar:
      000368 88               [ 1]  275 	push a 
      000369 0D 01            [ 1]  276 0$:	tnz (1,sp)
      00036B 27 07            [ 1]  277 	jreq 1$
      00036D CD 03 58         [ 4]  278 	call bksp 
      000370 0A 01            [ 1]  279 	dec (1,sp)
      000372 20 F5            [ 2]  280 	jra 0$
      000374 84               [ 1]  281 1$:	pop a 
      000375 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000376                        290 send_escape:
      000376 A6 1B            [ 1]  291 	ld a,#ESC 
      000378 CD 02 F1         [ 4]  292 	call putc 
      00037B A6 5B            [ 1]  293 	ld a,#'[
      00037D CD 02 F1         [ 4]  294 	call putc 
      000380 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      000381                        311 send_parameter:
      000381 89               [ 2]  312 	pushw x 
      000382 5F               [ 1]  313 	clrw x 
      000383 97               [ 1]  314 	ld xl,a 
      000384 A6 0A            [ 1]  315 	ld a,#10 
      000386 62               [ 2]  316 	div x,a 
      000387 95               [ 1]  317 	ld xh,a 
      000388 9F               [ 1]  318 	ld a,xl
      000389 4D               [ 1]  319     tnz a 
      00038A 27 0B            [ 1]  320     jreq 2$
      00038C A1 09            [ 1]  321 	cp a,#9 
      00038E 23 02            [ 2]  322 	jrule 1$
      000390 A6 39            [ 1]  323 	ld a,#'9
      000392                        324 1$:
      000392 AB 30            [ 1]  325 	add a,#'0 
      000394 CD 02 F1         [ 4]  326 	call putc
      000397 9E               [ 1]  327 2$:	ld a,xh 
      000398 AB 30            [ 1]  328 	add a,#'0
      00039A CD 02 F1         [ 4]  329 	call putc 
      00039D 85               [ 2]  330 	popw x 
      00039E 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      00039F                        344 move_left:
      00039F 88               [ 1]  345 	push a 
      0003A0 CD 03 76         [ 4]  346 	call send_escape
      0003A3 84               [ 1]  347     pop a
      0003A4 CD 03 81         [ 4]  348 	call send_parameter 
      0003A7 A6 44            [ 1]  349 	ld a,#'D 
      0003A9 CD 02 F1         [ 4]  350 	call putc 
      0003AC 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003AD                        362 move_right:
      0003AD 88               [ 1]  363 	push a 
      0003AE CD 03 76         [ 4]  364 	call send_escape
      0003B1 84               [ 1]  365     pop a
      0003B2 CD 03 81         [ 4]  366 	call send_parameter 
      0003B5 A6 43            [ 1]  367 	ld a,#'C 
      0003B7 CD 02 F1         [ 4]  368 	call putc 
      0003BA 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0003BB                        379 spaces::
      0003BB A6 20            [ 1]  380 	ld a,#SPACE 
      0003BD 5D               [ 2]  381 1$:	tnzw x
      0003BE 27 06            [ 1]  382 	jreq 9$
      0003C0 CD 02 F1         [ 4]  383 	call putc 
      0003C3 5A               [ 2]  384 	decw x
      0003C4 20 F7            [ 2]  385 	jra 1$
      0003C6                        386 9$: 
      0003C6 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      0003C7                        404 insert_char: 
      0003C7                        405 	_vars VSIZE 
      0003C7 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C9 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      0003CB 9E               [ 1]  407     ld a,xh 
      0003CC 6B 01            [ 1]  408 	ld (IPOS,sp),a
      0003CE 9F               [ 1]  409     ld a,xl 
      0003CF 6B 03            [ 1]  410     ld (LLEN,sp),a  
      0003D1 93               [ 1]  411     ldw x,y
      0003D2 5C               [ 1]  412     incw x 
      0003D3 7B 03            [ 1]  413     ld a,(LLEN,sp)
      0003D5 10 01            [ 1]  414     sub a,(IPOS,sp)
      0003D7 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0003D8 C7 00 0E         [ 1]  416     ld acc8,a 
      0003DB 72 5F 00 0D      [ 1]  417     clr acc16
      0003DF CD 0E 38         [ 4]  418     call move
      0003E2 90 AE 16 90      [ 2]  419     ldw y,#tib 
      0003E6 7B 01            [ 1]  420     ld a,(IPOS,sp)
      0003E8 C7 00 0E         [ 1]  421     ld acc8,a 
      0003EB 72 B9 00 0D      [ 2]  422     addw y,acc16 
      0003EF 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      0003F1 90 F7            [ 1]  424     ld (y),a
      0003F3 90 5C            [ 1]  425     incw y  
      0003F5 7B 01            [ 1]  426     ld a,(IPOS,sp)
      0003F7 CD 03 9F         [ 4]  427     call move_left
      0003FA AE 16 90         [ 2]  428     ldw x,#tib 
      0003FD CD 03 4E         [ 4]  429     call puts 
      000400 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000402 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000404 CD 03 9F         [ 4]  432     call move_left 
      000407                        433 	_drop VSIZE 
      000407 5B 02            [ 2]    1     addw sp,#VSIZE 
      000409 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      00040A                        447 delete_under:
      00040A                        448 	_vars VSIZE 
      00040A 52 02            [ 2]    1     sub sp,#VSIZE 
      00040C 6B 02            [ 1]  449     ld (LLEN,sp),a 
      00040E 9F               [ 1]  450     ld a,xl 
      00040F 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000411 93               [ 1]  452     ldw x,y ; move destination
      000412 90 5C            [ 1]  453     incw y  ; move source 
      000414 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000416 10 01            [ 1]  455     sub a,(CPOS,sp)
      000418 4C               [ 1]  456     inc a ; move including zero at end.
      000419 C7 00 0E         [ 1]  457     ld acc8,a 
      00041C 72 5F 00 0D      [ 1]  458     clr acc16 
      000420 CD 0E 38         [ 4]  459 	call move 
      000423 90 AE 16 90      [ 2]  460     ldw y,#tib 
      000427 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000429 C7 00 0E         [ 1]  462     ld acc8,a 
      00042C 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000430 93               [ 1]  464     ldw x,y 
      000431 CD 03 4E         [ 4]  465     call puts 
      000434 A6 20            [ 1]  466     ld a,#SPACE  
      000436 CD 02 F1         [ 4]  467     call putc
      000439 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00043B 10 01            [ 1]  469     sub a,(CPOS,sp)
      00043D CD 03 9F         [ 4]  470     call move_left 
      000440 0A 02            [ 1]  471     dec (LLEN,sp)
      000442                        472 	_drop VSIZE 
      000442 5B 02            [ 2]    1     addw sp,#VSIZE 
      000444 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000445                        485 delete_line:
      000445 CD 03 76         [ 4]  486     call send_escape
      000448 A6 32            [ 1]  487 	ld a,#'2
      00044A CD 02 F1         [ 4]  488 	call putc 
      00044D A6 4B            [ 1]  489 	ld a,#'K 
      00044F CD 02 F1         [ 4]  490 	call putc 
      000452 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000453                        523 readln::
      000453                        524 	_vars VSIZE 
      000453 52 04            [ 2]    1     sub sp,#VSIZE 
      000455 5F               [ 1]  525 	clrw x 
      000456 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000458 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      00045A 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      00045C 90 AE 16 90      [ 2]  529  	ldw y,#tib ; input buffer
      000460                        530 readln_loop:
      000460 CD 03 01         [ 4]  531 	call getc
      000463 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000465 A1 1B            [ 1]  533     cp a,#ESC 
      000467 26 05            [ 1]  534     jrne 0$
      000469 CD 03 28         [ 4]  535     call get_escape 
      00046C 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      00046E A1 0D            [ 1]  537 0$:	cp a,#CR
      000470 26 03            [ 1]  538 	jrne 1$
      000472 CC 05 FC         [ 2]  539 	jp readln_quit
      000475 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000477 26 03            [ 1]  541 	jrne 2$ 
      000479 CC 05 FC         [ 2]  542 	jp readln_quit
      00047C                        543 2$:
      00047C A1 08            [ 1]  544 	cp a,#BS
      00047E 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000480 0D 03            [ 1]  547     tnz (CPOS,sp)
      000482 27 DC            [ 1]  548     jreq readln_loop 
      000484 A6 01            [ 1]  549     ld a,#1 
      000486 CD 03 9F         [ 4]  550     call move_left
      000489 0A 03            [ 1]  551     dec (CPOS,sp)
      00048B 90 5A            [ 2]  552     decw y 
      00048D 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      00048F CC 05 A8         [ 2]  554     jp 12$
      000492                        555 3$:
      000492 A1 04            [ 1]  556 	cp a,#CTRL_D
      000494 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000496 CD 04 45         [ 4]  559 	call delete_line 
      000499 7B 03            [ 1]  560     ld a,(CPOS,sp)
      00049B 4C               [ 1]  561     inc a 
      00049C CD 03 9F         [ 4]  562     call move_left 
      00049F A6 3E            [ 1]  563 	ld a,#'> 
      0004A1 CD 02 F1         [ 4]  564 	call putc 
      0004A4 90 AE 16 90      [ 2]  565 	ldw y,#tib
      0004A8 90 7F            [ 1]  566 	clr (y)
      0004AA 0F 02            [ 1]  567 	clr (LL,sp)
      0004AC 0F 03            [ 1]  568 	clr (CPOS,sp)
      0004AE 20 B0            [ 2]  569 	jra readln_loop
      0004B0                        570 4$:
      0004B0 A1 12            [ 1]  571 	cp a,#CTRL_R 
      0004B2 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      0004B4 0D 02            [ 1]  574 	tnz (LL,sp)
      0004B6 26 A8            [ 1]  575 	jrne readln_loop
      0004B8 AE 16 90         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0004BB CD 0E 0C         [ 4]  577 	call strlen 
      0004BE 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      0004C2 27 9C            [ 1]  579 	jreq readln_loop
      0004C4 6B 02            [ 1]  580 	ld (LL,sp),a 
      0004C6 6B 03            [ 1]  581     ld (CPOS,sp),a
      0004C8 AE 16 90         [ 2]  582 	ldw x,#tib 
      0004CB CD 03 4E         [ 4]  583 	call puts
      0004CE 0F 01            [ 1]  584 	clr (LL_HB,sp)
      0004D0 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      0004D3 20 8B            [ 2]  586 	jra readln_loop 
      0004D5                        587 5$:
      0004D5 A1 05            [ 1]  588 	cp a,#CTRL_E 
      0004D7 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      0004D9 AE 16 90         [ 2]  591 	ldw x,#tib 
      0004DC CD 13 EF         [ 4]  592 	call atoi24
      0004DF CE 00 0D         [ 2]  593 	ldw x,acc16
      0004E2 CD 06 36         [ 4]  594 	call search_lineno
      0004E5 5D               [ 2]  595 	tnzw x 
      0004E6 26 0B            [ 1]  596 	jrne 51$
      0004E8 0F 02            [ 1]  597 	clr (LL,sp)
      0004EA 90 AE 16 90      [ 2]  598 	ldw y,#tib
      0004EE 90 7F            [ 1]  599     clr (y) 	
      0004F0 CC 05 FC         [ 2]  600 	jp readln_quit  
      0004F3                        601 51$:
      0004F3 CF 00 04         [ 2]  602 	ldw basicptr,x
      0004F6 E6 02            [ 1]  603 	ld a,(2,x)
      0004F8 C7 00 03         [ 1]  604 	ld count,a 
      0004FB 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      0004FF CD 0B 91         [ 4]  606 	call decompile 
      000502 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000504 A6 0D            [ 1]  608 	ld a,#CR 
      000506 CD 02 F1         [ 4]  609 	call putc 
      000509 A6 3E            [ 1]  610 	ld a,#'>
      00050B CD 02 F1         [ 4]  611 	call putc
      00050E AE 16 90         [ 2]  612     ldw x,#tib  
      000511 CD 0E 0C         [ 4]  613 	call strlen 
      000514 6B 02            [ 1]  614 	ld (LL,sp),a 
      000516 CD 03 4E         [ 4]  615 	call puts 
      000519 90 93            [ 1]  616 	ldw y,x
      00051B 7B 02            [ 1]  617     ld a,(LL,sp)
      00051D 6B 03            [ 1]  618     ld (CPOS,sp),a  
      00051F CC 04 60         [ 2]  619 	jp readln_loop
      000522                        620 6$:
      000522 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000524 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000526 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000528 11 02            [ 1]  625     cp a,(LL,sp)
      00052A 2B 03            [ 1]  626     jrmi 61$
      00052C CC 04 60         [ 2]  627     jp readln_loop 
      00052F                        628 61$:
      00052F A6 01            [ 1]  629     ld a,#1 
      000531 CD 03 AD         [ 4]  630 	call move_right 
      000534 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000536 90 5C            [ 1]  632     incw y 
      000538 CC 04 60         [ 2]  633     jp readln_loop 
      00053B A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      00053D 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      00053F 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000541 26 03            [ 1]  638 	jrne 71$
      000543 CC 04 60         [ 2]  639 	jp readln_loop
      000546                        640 71$:
      000546 A6 01            [ 1]  641     ld a,#1 
      000548 CD 03 9F         [ 4]  642 	call move_left 
      00054B 0A 03            [ 1]  643 	dec (CPOS,sp)
      00054D 90 5A            [ 2]  644     decw y 
      00054F CC 04 60         [ 2]  645 	jp readln_loop 
      000552 A1 82            [ 1]  646 8$: cp a,#HOME  
      000554 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000556 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000558 CD 03 9F         [ 4]  650     call move_left 
      00055B 0F 03            [ 1]  651 	clr (CPOS,sp)
      00055D 90 AE 16 90      [ 2]  652     ldw y,#tib 
      000561 CC 04 60         [ 2]  653 	jp readln_loop  
      000564 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000566 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000568 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      00056A 11 02            [ 1]  658 	cp a,(LL,sp)
      00056C 26 03            [ 1]  659 	jrne 91$
      00056E CC 04 60         [ 2]  660 	jp readln_loop 
      000571                        661 91$:
      000571 7B 02            [ 1]  662 	ld a,(LL,sp)
      000573 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000575 CD 03 AD         [ 4]  664 	call move_right 
      000578 7B 02            [ 1]  665 	ld a,(LL,sp)
      00057A 6B 03            [ 1]  666 	ld (CPOS,sp),a
      00057C 90 AE 16 90      [ 2]  667     ldw y,#tib
      000580 72 5F 00 0D      [ 1]  668     clr acc16 
      000584 C7 00 0E         [ 1]  669     ld acc8,a 
      000587 72 B9 00 0D      [ 2]  670     addw y,acc16  
      00058B CC 04 60         [ 2]  671 	jp readln_loop 
      00058E A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000590 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000592 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000594 90 89            [ 2]  676 	pushw y 
      000596 CD 1E 20         [ 4]  677 	call beep_1khz
      000599 90 85            [ 2]  678 	popw y 
      00059B CC 04 60         [ 2]  679 	jp readln_loop 
      00059E A1 84            [ 1]  680 11$: cp a,#SUP 
      0005A0 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      0005A2 7B 03            [ 1]  683     ld a,(CPOS,sp)
      0005A4 11 02            [ 1]  684     cp a,(LL,sp)
      0005A6 2A 08            [ 1]  685     jrpl 13$
      0005A8                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0005A8 97               [ 1]  687     ld xl,a    ; cursor position 
      0005A9 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      0005AB CD 04 0A         [ 4]  689     call delete_under
      0005AE 0A 02            [ 1]  690     dec (LLEN,sp)
      0005B0                        691 13$:
      0005B0 CC 04 60         [ 2]  692     jp readln_loop 
      0005B3                        693 final_test:
      0005B3 A1 20            [ 1]  694 	cp a,#SPACE
      0005B5 2A 03            [ 1]  695 	jrpl accept_char
      0005B7 CC 04 60         [ 2]  696 	jp readln_loop
      0005BA                        697 accept_char:
      0005BA A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      0005BC 11 02            [ 1]  699 	cp a, (LL,sp)
      0005BE 2A 03            [ 1]  700 	jrpl 1$
      0005C0 CC 04 60         [ 2]  701 	jp readln_loop
      0005C3 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      0005C5 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      0005C7 7B 03            [ 1]  705     ld a,(CPOS,sp)
      0005C9 11 02            [ 1]  706     cp a,(LL,sp)
      0005CB 27 12            [ 1]  707     jreq overwrite
      0005CD 7B 02            [ 1]  708     ld a,(LL,sp)
      0005CF 97               [ 1]  709     ld xl,a 
      0005D0 7B 03            [ 1]  710     ld a,(CPOS,sp)
      0005D2 95               [ 1]  711     ld xh,a
      0005D3 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      0005D5 CD 03 C7         [ 4]  713     call insert_char
      0005D8 0C 02            [ 1]  714     inc (LLEN,sp)
      0005DA 0C 03            [ 1]  715     inc (CPOS,sp)
      0005DC CC 04 60         [ 2]  716     jp readln_loop 
      0005DF                        717 overwrite:
      0005DF 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      0005E1 90 F7            [ 1]  719 	ld (y),a
      0005E3 90 5C            [ 1]  720     incw y
      0005E5 CD 02 F1         [ 4]  721     call putc 
      0005E8 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      0005EA 11 02            [ 1]  723 	cp a,(LL,sp)
      0005EC 2B 09            [ 1]  724 	jrmi 1$
      0005EE 90 7F            [ 1]  725 	clr (y)
      0005F0 0C 02            [ 1]  726 	inc (LL,sp)
      0005F2 0C 03            [ 1]  727     inc (CPOS,sp)
      0005F4 CC 04 60         [ 2]  728 	jp readln_loop 
      0005F7                        729 1$:	
      0005F7 0C 03            [ 1]  730 	inc (CPOS,sp)
      0005F9 CC 04 60         [ 2]  731 	jp readln_loop 
      0005FC                        732 readln_quit:
      0005FC 90 AE 16 90      [ 2]  733 	ldw y,#tib
      000600 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000602 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000605 90 7F            [ 1]  736     clr (y)
      000607 7B 02            [ 1]  737 	ld a,(LL,sp)
      000609 C7 00 03         [ 1]  738 	ld count,a 
      00060C A6 0D            [ 1]  739 	ld a,#CR
      00060E CD 02 F1         [ 4]  740 	call putc
      000611                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000611 5B 04            [ 2]    1     addw sp,#VSIZE 
      000613 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000614                        750 print_hex::
      000614 88               [ 1]  751 	push a 
      000615 4E               [ 1]  752 	swap a 
      000616 CD 06 2B         [ 4]  753 	call to_hex_char 
      000619 CD 02 F1         [ 4]  754 	call putc 
      00061C 7B 01            [ 1]  755     ld a,(1,sp) 
      00061E CD 06 2B         [ 4]  756 	call to_hex_char
      000621 CD 02 F1         [ 4]  757 	call putc
      000624 A6 20            [ 1]  758 	ld a,#SPACE 
      000626 CD 02 F1         [ 4]  759 	call putc 
      000629 84               [ 1]  760 	pop a 
      00062A 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      00062B                        770 to_hex_char::
      00062B A4 0F            [ 1]  771 	and a,#15 
      00062D A1 09            [ 1]  772 	cp a,#9 
      00062F 23 02            [ 2]  773 	jrule 1$ 
      000631 AB 07            [ 1]  774 	add a,#7
      000633 AB 30            [ 1]  775 1$: add a,#'0 
      000635 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000636                         51 search_lineno::
      000636                         52 	_vars VSIZE
      000636 52 02            [ 2]    1     sub sp,#VSIZE 
      000638 0F 01            [ 1]   53 	clr (LL,sp)
      00063A 90 CE 00 1A      [ 2]   54 	ldw y,txtbgn
      00063E 4D               [ 1]   55 	tnz a 
      00063F 27 04            [ 1]   56 	jreq search_ln_loop
      000641 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000645                         58 search_ln_loop:
      000645 90 C3 00 1C      [ 2]   59 	cpw y,txtend 
      000649 2A 10            [ 1]   60 	jrpl 8$
      00064B 90 F3            [ 1]   61 	cpw x,(y)
      00064D 27 0E            [ 1]   62 	jreq 9$
      00064F 2B 0A            [ 1]   63 	jrmi 8$ 
      000651 90 E6 02         [ 1]   64 	ld a,(2,y)
      000654 6B 02            [ 1]   65 	ld (LB,sp),a 
      000656 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000659 20 EA            [ 2]   67 	jra search_ln_loop 
      00065B                         68 8$: 
      00065B 5F               [ 1]   69 	clrw x 	
      00065C 51               [ 1]   70 	exgw x,y 
      00065D                         71 9$: _drop VSIZE
      00065D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00065F 51               [ 1]   72 	exgw x,y   
      000660 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000661                         83 del_line: 
      000661                         84 	_vars VSIZE 
      000661 52 04            [ 2]    1     sub sp,#VSIZE 
      000663 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000665 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000667 0F 01            [ 1]   87 	clr (LLEN,sp)
      000669 90 93            [ 1]   88 	ldw y,x  
      00066B 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      00066E 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000670 90 CE 00 1C      [ 2]   91 	ldw y,txtend 
      000674 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000677 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      00067B 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      00067D CD 0E 38         [ 4]   95 	call move
      000680 90 CE 00 1C      [ 2]   96 	ldw y,txtend 
      000684 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000687 90 CF 00 1C      [ 2]   98 	ldw txtend,y  
      00068B                         99 	_drop VSIZE     
      00068B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00068D 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      00068E                        115 create_gap:
      00068E                        116 	_vars VSIZE
      00068E 52 06            [ 2]    1     sub sp,#VSIZE 
      000690 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000692 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000694 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000698 90 93            [ 1]  120 	ldw y,x ; SRC
      00069A 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      00069E 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      0006A0 CE 00 1C         [ 2]  124 	ldw x,txtend 
      0006A3 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      0006A6 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      0006A9 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      0006AB CD 0E 38         [ 4]  128 	call move
      0006AE CE 00 1C         [ 2]  129 	ldw x,txtend
      0006B1 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      0006B4 CF 00 1C         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0006B7                        132 9$:	_drop VSIZE 
      0006B7 5B 06            [ 2]    1     addw sp,#VSIZE 
      0006B9 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      0006BA                        150 insert_line:
      0006BA                        151 	_vars VSIZE 
      0006BA 52 08            [ 2]    1     sub sp,#VSIZE 
      0006BC CE 00 1C         [ 2]  152 	ldw x,txtend  
      0006BF C3 00 1A         [ 2]  153 	cpw x,txtbgn 
      0006C2 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      0006C4 AE 00 02         [ 2]  156 	ldw x,#2 
      0006C7 72 D6 00 18      [ 4]  157 	ld a,([ptr16],x)
      0006CB A1 03            [ 1]  158 	cp a,#3
      0006CD 27 5A            [ 1]  159 	jreq insert_ln_exit
      0006CF 5F               [ 1]  160 	clrw x 
      0006D0 97               [ 1]  161 	ld xl,a
      0006D1 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      0006D3 CE 00 1A         [ 2]  163 	ldw x,txtbgn
      0006D6 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      0006D8 CE 00 1C         [ 2]  165 	ldw x,txtend 
      0006DB 20 38            [ 2]  166 	jra 4$
      0006DD 72 CE 00 18      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      0006E1 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      0006E3 AE 00 02         [ 2]  170 	ldw x,#2 
      0006E6 72 D6 00 18      [ 4]  171 	ld a,([ptr16],x)
      0006EA 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      0006EB 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      0006ED 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      0006EF 4F               [ 1]  177 	clr a 
      0006F0 CD 06 36         [ 4]  178 	call search_lineno 
      0006F3 5D               [ 2]  179 	tnzw x 
      0006F4 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      0006F6 17 01            [ 2]  183 	ldw (DEST,sp),y 
      0006F8 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      0006FA 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      0006FC CD 06 61         [ 4]  188 	call del_line
      0006FF                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      0006FF A6 03            [ 1]  192 	ld a,#3
      000701 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000703 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000705 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000707 C3 00 1C         [ 2]  198 	cpw x,txtend 
      00070A 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      00070C 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      00070E 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000710 CD 06 8E         [ 4]  204 	call create_gap
      000713 20 06            [ 2]  205 	jra 5$
      000715                        206 4$: 
      000715 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000718 CF 00 1C         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      00071B 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      00071D CF 00 0D         [ 2]  211 	ldw acc16,x 
      000720 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000724 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000726 CD 0E 38         [ 4]  214 	call move 
      000729                        215 insert_ln_exit:	
      000729                        216 	_drop VSIZE
      000729 5B 08            [ 2]    1     addw sp,#VSIZE 
      00072B 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      00072C                        233 parse_quote: 
      00072C                        234 	_vars VSIZE 
      00072C 52 02            [ 2]    1     sub sp,#VSIZE 
      00072E 4F               [ 1]  235 	clr a
      00072F 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000731                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      000731 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000734 27 24            [ 1]  239 	jreq 6$
      000736 72 5C 00 01      [ 1]  240 	inc in 
      00073A 6B 02            [ 1]  241 	ld (CURR,sp),a 
      00073C A6 5C            [ 1]  242 	ld a,#'\
      00073E 11 01            [ 1]  243 	cp a, (PREV,sp)
      000740 26 0A            [ 1]  244 	jrne 3$
      000742 0F 01            [ 1]  245 	clr (PREV,sp)
      000744 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000746 AD 1C            [ 4]  247 	callr convert_escape
      000748 F7               [ 1]  248 	ld (x),a 
      000749 5C               [ 1]  249 	incw x 
      00074A 20 E5            [ 2]  250 	jra 2$
      00074C                        251 3$:
      00074C 7B 02            [ 1]  252 	ld a,(CURR,sp)
      00074E A1 5C            [ 1]  253 	cp a,#'\'
      000750 27 DD            [ 1]  254 	jreq 1$
      000752 A1 22            [ 1]  255 	cp a,#'"
      000754 27 04            [ 1]  256 	jreq 6$ 
      000756 F7               [ 1]  257 	ld (x),a 
      000757 5C               [ 1]  258 	incw x 
      000758 20 D7            [ 2]  259 	jra 2$
      00075A                        260 6$:
      00075A 7F               [ 1]  261 	clr (x)
      00075B 5C               [ 1]  262 	incw x 
      00075C 90 93            [ 1]  263 	ldw y,x 
      00075E 5F               [ 1]  264 	clrw x 
      00075F A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000761                        266 	_drop VSIZE
      000761 5B 02            [ 2]    1     addw sp,#VSIZE 
      000763 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000764                        278 convert_escape:
      000764 89               [ 2]  279 	pushw x 
      000765 AE 07 79         [ 2]  280 	ldw x,#escaped 
      000768 F1               [ 1]  281 1$:	cp a,(x)
      000769 27 06            [ 1]  282 	jreq 2$
      00076B 7D               [ 1]  283 	tnz (x)
      00076C 27 09            [ 1]  284 	jreq 3$
      00076E 5C               [ 1]  285 	incw x 
      00076F 20 F7            [ 2]  286 	jra 1$
      000771 1D 07 79         [ 2]  287 2$: subw x,#escaped 
      000774 9F               [ 1]  288 	ld a,xl 
      000775 AB 07            [ 1]  289 	add a,#7
      000777 85               [ 2]  290 3$:	popw x 
      000778 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    292 
      000779 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000781                        310 parse_integer: ; { -- n }
      000781 89               [ 2]  311 	pushw x 	
      000782 4B 00            [ 1]  312 	push #0 ; TCHAR
      000784 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000786 A1 24            [ 1]  314 	cp a,#'$
      000788 26 04            [ 1]  315 	jrne 2$ 
      00078A                        316     _drop #1
      00078A 5B 01            [ 2]    1     addw sp,##1 
      00078C 4B 10            [ 1]  317 	push #16  ; BASE=16
      00078E F7               [ 1]  318 2$:	ld (x),a 
      00078F 5C               [ 1]  319 	incw x 
      000790 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000793 72 5C 00 01      [ 1]  321 	inc in 
      000797 CD 13 E3         [ 4]  322 	call to_upper 
      00079A 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      00079C CD 08 19         [ 4]  324 	call is_digit 
      00079F 25 ED            [ 1]  325 	jrc 2$
      0007A1 A6 10            [ 1]  326 	ld a,#16 
      0007A3 11 01            [ 1]  327 	cp a,(BASE,sp)
      0007A5 26 0A            [ 1]  328 	jrne 3$ 
      0007A7 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      0007A9 A1 41            [ 1]  330 	cp a,#'A 
      0007AB 2B 04            [ 1]  331 	jrmi 3$ 
      0007AD A1 47            [ 1]  332 	cp a,#'G 
      0007AF 2B DD            [ 1]  333 	jrmi 2$ 
      0007B1 72 5A 00 01      [ 1]  334 3$: dec in 	
      0007B5 7F               [ 1]  335     clr (x)
      0007B6 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      0007B8 CD 13 EF         [ 4]  337 	call atoi24
      0007BB 90 93            [ 1]  338 	ldw y,x 
      0007BD CE 00 0D         [ 2]  339 	ldw x,acc16 
      0007C0 A6 84            [ 1]  340 	ld a,#TK_INTGR
      0007C2 90 FF            [ 2]  341 	ldw (y),x 
      0007C4 72 A9 00 02      [ 2]  342 	addw y,#2
      0007C8                        343 	_drop VSIZE  
      0007C8 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0007CA 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      0007CB                        361 parse_binary: ; { -- n }
      0007CB 4B 00            [ 1]  362 	push #0
      0007CD 4B 00            [ 1]  363 	push #0
      0007CF 4B 00            [ 1]  364 	push #0
      0007D1                        365 2$:	
      0007D1 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      0007D4 72 5C 00 01      [ 1]  367 	inc in 
      0007D8 A1 30            [ 1]  368 	cp a,#'0 
      0007DA 27 06            [ 1]  369 	jreq 3$
      0007DC A1 31            [ 1]  370 	cp a,#'1 
      0007DE 27 02            [ 1]  371 	jreq 3$ 
      0007E0 20 0B            [ 2]  372 	jra bin_exit 
      0007E2 A0 30            [ 1]  373 3$: sub a,#'0 
      0007E4 46               [ 1]  374 	rrc a
      0007E5 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      0007E7 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      0007E9 09 01            [ 1]  377 	rlc (BINARY,sp) 
      0007EB 20 E4            [ 2]  378 	jra 2$  
      0007ED                        379 bin_exit:
      0007ED 72 5A 00 01      [ 1]  380 	dec in 
      0007F1 90 93            [ 1]  381 	ldw y,x
      0007F3 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      0007F5 C7 00 0C         [ 1]  383 	ld acc24,a 
      0007F8 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      0007FA CF 00 0D         [ 2]  385 	ldw acc16,x
      0007FD 90 FF            [ 2]  386 	ldw (y),x 
      0007FF 72 A9 00 02      [ 2]  387 	addw y,#2  
      000803 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      000805                        389 	_drop VSIZE 
      000805 5B 03            [ 2]    1     addw sp,#VSIZE 
      000807 81               [ 4]  390 	ret
                                    391 
                                    392 ;-------------------------------------
                                    393 ; check if A is a letter 
                                    394 ; input:
                                    395 ;   A 			character to test 
                                    396 ; output:
                                    397 ;   C flag      1 true, 0 false 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    398 ;-------------------------------------
      000808                        399 is_alpha::
      000808 A1 41            [ 1]  400 	cp a,#'A 
      00080A 8C               [ 1]  401 	ccf 
      00080B 24 0B            [ 1]  402 	jrnc 9$ 
      00080D A1 5B            [ 1]  403 	cp a,#'Z+1 
      00080F 25 07            [ 1]  404 	jrc 9$ 
      000811 A1 61            [ 1]  405 	cp a,#'a 
      000813 8C               [ 1]  406 	ccf 
      000814 24 02            [ 1]  407 	jrnc 9$
      000816 A1 7B            [ 1]  408 	cp a,#'z+1
      000818 81               [ 4]  409 9$: ret 	
                                    410 
                                    411 ;------------------------------------
                                    412 ; check if character in {'0'..'9'}
                                    413 ; input:
                                    414 ;    A  character to test
                                    415 ; output:
                                    416 ;    Carry  0 not digit | 1 digit
                                    417 ;------------------------------------
      000819                        418 is_digit::
      000819 A1 30            [ 1]  419 	cp a,#'0
      00081B 25 03            [ 1]  420 	jrc 1$
      00081D A1 3A            [ 1]  421     cp a,#'9+1
      00081F 8C               [ 1]  422 	ccf 
      000820 8C               [ 1]  423 1$:	ccf 
      000821 81               [ 4]  424     ret
                                    425 
                                    426 ;-------------------------------------
                                    427 ; return true if character in  A 
                                    428 ; is letter or digit.
                                    429 ; input:
                                    430 ;   A     ASCII character 
                                    431 ; output:
                                    432 ;   A     no change 
                                    433 ;   Carry    0 false| 1 true 
                                    434 ;--------------------------------------
      000822                        435 is_alnum::
      000822 CD 08 19         [ 4]  436 	call is_digit
      000825 25 03            [ 1]  437 	jrc 1$ 
      000827 CD 08 08         [ 4]  438 	call is_alpha
      00082A 81               [ 4]  439 1$:	ret 
                                    440 
                                    441 ;-----------------------------
                                    442 ; check if character in A 
                                    443 ; is a valid symbol character 
                                    444 ; valid: Upper case LETTER,DIGIT,'_' 
                                    445 ; input:
                                    446 ;    A   character to validate
                                    447 ; output:
                                    448 ;    Carry   set if valid 
                                    449 ;----------------------------
      00082B                        450 is_symbol_char: 
      00082B A1 5F            [ 1]  451 	cp a,#'_ 
      00082D 26 03            [ 1]  452 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00082F 99               [ 1]  453 	scf 
      000830 20 03            [ 2]  454 	jra 9$ 
      000832 CD 08 22         [ 4]  455 1$:	call is_alnum 
      000835 81               [ 4]  456 9$: ret 
                                    457 
                                    458 ;---------------------------
                                    459 ;  when lexical unit begin 
                                    460 ;  with a letter a symbol 
                                    461 ;  is expected.
                                    462 ; input:
                                    463 ;   A   first character of symbol 
                                    464 ;	X   point to output buffer 
                                    465 ;   Y   point to input text 
                                    466 ; output:
                                    467 ;	X   after symbol 
                                    468 ;   Y   point after lexical unit 
                                    469 ;---------------------------
      000836                        470 parse_symbol:
      000836 5C               [ 1]  471 	incw x ; keep space for TK_ID 
      000837                        472 symb_loop: 
                                    473 ; symbol are converted to upper case 
      000837 CD 13 E3         [ 4]  474 	call to_upper  
      00083A F7               [ 1]  475 	ld (x), a 
      00083B 5C               [ 1]  476 	incw x
      00083C 91 D6 00         [ 4]  477 	ld a,([in.w],y)
      00083F 72 5C 00 01      [ 1]  478 	inc in 
      000843 CD 08 2B         [ 4]  479 	call is_symbol_char 
      000846 25 EF            [ 1]  480 	jrc symb_loop 
      000848 7F               [ 1]  481 	clr (x)
      000849 72 5A 00 01      [ 1]  482 	dec in  
      00084D 81               [ 4]  483 	ret 
                                    484 
                                    485 ;---------------------------
                                    486 ;  token begin with a letter,
                                    487 ;  is keyword or variable. 	
                                    488 ; input:
                                    489 ;   X 		point to pad 
                                    490 ;   Y 		point to text
                                    491 ;   A 	    first letter  
                                    492 ; output:
                                    493 ;   X		exec_addr|var_addr 
                                    494 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    495 ;   pad 	keyword|var_name  
                                    496 ;--------------------------  
                           000001   497 	XFIRST=1
                           000002   498 	VSIZE=2
      00084E                        499 parse_keyword: 
      00084E 89               [ 2]  500 	pushw x ; preserve *symbol 
      00084F CD 08 36         [ 4]  501 	call parse_symbol
      000852 1E 01            [ 2]  502 	ldw x,(XFIRST,sp) 
      000854 E6 02            [ 1]  503 	ld a,(2,x)
      000856 26 14            [ 1]  504 	jrne 2$
                                    505 ; one letter variable name 
      000858 E6 01            [ 1]  506 	ld a,(1,x) 
      00085A A0 41            [ 1]  507 	sub a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00085C 48               [ 1]  508 	sll a 
      00085D 88               [ 1]  509 	push a 
      00085E 4B 00            [ 1]  510 	push #0
      000860 AE 00 2F         [ 2]  511 	ldw x,#vars 
      000863 72 FB 01         [ 2]  512 	addw x,(1,sp) ; X=var address 
      000866                        513 	_drop 2 
      000866 5B 02            [ 2]    1     addw sp,#2 
      000868 A6 85            [ 1]  514 	ld a,#TK_VAR 
      00086A 20 24            [ 2]  515 	jra 4$ 
      00086C                        516 2$: ; check for keyword, otherwise syntax error.
      00086C                        517 	_ldx_dict kword_dict ; dictionary entry point
      00086C AE 2A BD         [ 2]    1     ldw x,#kword_dict+2
      00086F 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000871 90 5C            [ 1]  519 	incw y 
      000873 CD 15 D6         [ 4]  520 	call search_dict
      000876 4D               [ 1]  521 	tnz a
      000877 26 17            [ 1]  522 	jrne 4$ 
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000879 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      00087B A6 01            [ 1]  526 	ld a,#TK_LABEL 
      00087D 90 F7            [ 1]  527 	ld (y),a 
      00087F 90 5C            [ 1]  528 	incw y
      000881                        529 24$:	
      000881 90 F6            [ 1]  530     ld a,(y)
      000883 27 04            [ 1]  531 	jreq 3$
      000885 90 5C            [ 1]  532 	incw y 
      000887 20 F8            [ 2]  533 	jra 24$ 
      000889 90 5C            [ 1]  534 3$: incw y 
      00088B A6 01            [ 1]  535 	ld a,#TK_LABEL 
      00088D 5F               [ 1]  536 	clrw x 	
      00088E 20 11            [ 2]  537 	jra 5$ 
      000890                        538 4$:	
      000890 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000892 A3 00 50         [ 2]  540 	cpw x,#LET_IDX 
      000895 27 0A            [ 1]  541 	jreq 5$  ; don't compile LET command 
      000897 90 F7            [ 1]  542 	ld (y),a 
      000899 90 5C            [ 1]  543 	incw y 
      00089B 90 FF            [ 2]  544 	ldw (y),x
      00089D 72 A9 00 02      [ 2]  545 	addw y,#2  
      0008A1                        546 5$:	_drop VSIZE 
      0008A1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0008A3 81               [ 4]  547 	ret  	
                                    548 
                                    549 ;------------------------------------
                                    550 ; skip character c in text starting from 'in'
                                    551 ; input:
                                    552 ;	 y 		point to text buffer
                                    553 ;    a 		character to skip
                                    554 ; output:  
                                    555 ;	'in' ajusted to new position
                                    556 ;------------------------------------
                           000001   557 	C = 1 ; local var
      0008A4                        558 skip:
      0008A4 88               [ 1]  559 	push a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008A5 91 D6 00         [ 4]  560 1$:	ld a,([in.w],y)
      0008A8 27 0A            [ 1]  561 	jreq 2$
      0008AA 11 01            [ 1]  562 	cp a,(C,sp)
      0008AC 26 06            [ 1]  563 	jrne 2$
      0008AE 72 5C 00 01      [ 1]  564 	inc in
      0008B2 20 F1            [ 2]  565 	jra 1$
      0008B4                        566 2$: _drop 1 
      0008B4 5B 01            [ 2]    1     addw sp,#1 
      0008B6 81               [ 4]  567 	ret
                                    568 	
                                    569 
                                    570 ;------------------------------------
                                    571 ; scan text for next token
                                    572 ; input: 
                                    573 ;	X 		pointer to buffer where 
                                    574 ;	        token id and value are copied 
                                    575 ; use:
                                    576 ;	Y   pointer to text in tib 
                                    577 ; output:
                                    578 ;   A       token attribute 
                                    579 ;   X 		token value
                                    580 ;   Y       updated position in output buffer   
                                    581 ;------------------------------------
                                    582 	; use to check special character 
                                    583 	.macro _case c t  
                                    584 	ld a,#c 
                                    585 	cp a,(TCHAR,sp) 
                                    586 	jrne t
                                    587 	.endm 
                                    588 
                           000001   589 	TCHAR=1
                           000002   590 	ATTRIB=2
                           000002   591 	VSIZE=2
      0008B7                        592 get_token:: 
      0008B7                        593 	_vars VSIZE
      0008B7 52 02            [ 2]    1     sub sp,#VSIZE 
                                    594 ;	ld a,in 
                                    595 ;	sub a,count
                                    596 ;   jrmi 0$
                                    597 ;	clr a 
                                    598 ;	ret 
      0008B9                        599 0$: 
      0008B9 90 AE 16 90      [ 2]  600 	ldw y,#tib    	
      0008BD A6 20            [ 1]  601 	ld a,#SPACE
      0008BF CD 08 A4         [ 4]  602 	call skip
      0008C2 55 00 01 00 02   [ 1]  603 	mov in.saved,in 
      0008C7 91 D6 00         [ 4]  604 	ld a,([in.w],y)
      0008CA 26 05            [ 1]  605 	jrne 1$
      0008CC 90 93            [ 1]  606 	ldw y,x 
      0008CE CC 0A 73         [ 2]  607 	jp token_exit ; end of line 
      0008D1 72 5C 00 01      [ 1]  608 1$:	inc in 
      0008D5 CD 13 E3         [ 4]  609 	call to_upper 
      0008D8 6B 01            [ 1]  610 	ld (TCHAR,sp),a 
                                    611 ; check for quoted string
      0008DA                        612 str_tst:  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008DA                        613 	_case '"' nbr_tst
      0008DA A6 22            [ 1]    1 	ld a,#'"' 
      0008DC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008DE 26 0A            [ 1]    3 	jrne nbr_tst
      0008E0 A6 02            [ 1]  614 	ld a,#TK_QSTR
      0008E2 F7               [ 1]  615 	ld (x),a 
      0008E3 5C               [ 1]  616 	incw x 
      0008E4 CD 07 2C         [ 4]  617 	call parse_quote
      0008E7 CC 0A 73         [ 2]  618 	jp token_exit
      0008EA                        619 nbr_tst:
                                    620 ; check for hexadecimal number 
      0008EA A6 24            [ 1]  621 	ld a,#'$'
      0008EC 11 01            [ 1]  622 	cp a,(TCHAR,sp) 
      0008EE 27 17            [ 1]  623 	jreq 1$
                                    624 ;check for binary number 
      0008F0 A6 26            [ 1]  625 	ld a,#'&
      0008F2 11 01            [ 1]  626 	cp a,(TCHAR,sp)
      0008F4 26 0A            [ 1]  627 	jrne 0$
      0008F6 A6 84            [ 1]  628 	ld a,#TK_INTGR
      0008F8 F7               [ 1]  629 	ld (x),a 
      0008F9 5C               [ 1]  630 	incw x 
      0008FA CD 07 CB         [ 4]  631 	call parse_binary ; expect binary integer 
      0008FD CC 0A 73         [ 2]  632 	jp token_exit 
                                    633 ; check for decimal number 	
      000900 7B 01            [ 1]  634 0$:	ld a,(TCHAR,sp)
      000902 CD 08 19         [ 4]  635 	call is_digit
      000905 24 0C            [ 1]  636 	jrnc 3$
      000907 A6 84            [ 1]  637 1$:	ld a,#TK_INTGR 
      000909 F7               [ 1]  638 	ld (x),a 
      00090A 5C               [ 1]  639 	incw x 
      00090B 7B 01            [ 1]  640 	ld a,(TCHAR,sp)
      00090D CD 07 81         [ 4]  641 	call parse_integer 
      000910 CC 0A 73         [ 2]  642 	jp token_exit 
      000913                        643 3$: 
      000913                        644 	_case '(' bkslsh_tst 
      000913 A6 28            [ 1]    1 	ld a,#'(' 
      000915 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000917 26 05            [ 1]    3 	jrne bkslsh_tst
      000919 A6 07            [ 1]  645 	ld a,#TK_LPAREN
      00091B CC 0A 6F         [ 2]  646 	jp token_char   	
      00091E                        647 bkslsh_tst: ; character token 
      00091E                        648 	_case '\',rparnt_tst
      00091E A6 5C            [ 1]    1 	ld a,#'\' 
      000920 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000922 26 16            [ 1]    3 	jrne rparnt_tst
      000924 A6 03            [ 1]  649 	ld a,#TK_CHAR 
      000926 F7               [ 1]  650 	ld (x),a 
      000927 5C               [ 1]  651 	incw x 
      000928 91 D6 00         [ 4]  652 	ld a,([in.w],y)
      00092B F7               [ 1]  653 	ld (x),a 
      00092C 5C               [ 1]  654 	incw x
      00092D 90 93            [ 1]  655 	ldw y,x 	 
      00092F 72 5C 00 01      [ 1]  656 	inc in  
      000933 5F               [ 1]  657 	clrw x 
      000934 97               [ 1]  658 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      000935 A6 03            [ 1]  659 	ld a,#TK_CHAR 
      000937 CC 0A 73         [ 2]  660 	jp token_exit 
      00093A                        661 rparnt_tst:		
      00093A                        662 	_case ')' colon_tst 
      00093A A6 29            [ 1]    1 	ld a,#')' 
      00093C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00093E 26 05            [ 1]    3 	jrne colon_tst
      000940 A6 08            [ 1]  663 	ld a,#TK_RPAREN 
      000942 CC 0A 6F         [ 2]  664 	jp token_char
      000945                        665 colon_tst:
      000945                        666 	_case ':' comma_tst 
      000945 A6 3A            [ 1]    1 	ld a,#':' 
      000947 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000949 26 05            [ 1]    3 	jrne comma_tst
      00094B A6 0B            [ 1]  667 	ld a,#TK_COLON 
      00094D CC 0A 6F         [ 2]  668 	jp token_char  
      000950                        669 comma_tst:
      000950                        670 	_case COMMA sharp_tst 
      000950 A6 2C            [ 1]    1 	ld a,#COMMA 
      000952 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000954 26 05            [ 1]    3 	jrne sharp_tst
      000956 A6 09            [ 1]  671 	ld a,#TK_COMMA
      000958 CC 0A 6F         [ 2]  672 	jp token_char
      00095B                        673 sharp_tst:
      00095B                        674 	_case SHARP dash_tst 
      00095B A6 23            [ 1]    1 	ld a,#SHARP 
      00095D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00095F 26 05            [ 1]    3 	jrne dash_tst
      000961 A6 0A            [ 1]  675 	ld a,#TK_SHARP
      000963 CC 0A 6F         [ 2]  676 	jp token_char  	 	 
      000966                        677 dash_tst: 	
      000966                        678 	_case '-' at_tst 
      000966 A6 2D            [ 1]    1 	ld a,#'-' 
      000968 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00096A 26 05            [ 1]    3 	jrne at_tst
      00096C A6 11            [ 1]  679 	ld a,#TK_MINUS  
      00096E CC 0A 6F         [ 2]  680 	jp token_char 
      000971                        681 at_tst:
      000971                        682 	_case '@' qmark_tst 
      000971 A6 40            [ 1]    1 	ld a,#'@' 
      000973 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000975 26 05            [ 1]    3 	jrne qmark_tst
      000977 A6 06            [ 1]  683 	ld a,#TK_ARRAY 
      000979 CC 0A 6F         [ 2]  684 	jp token_char
      00097C                        685 qmark_tst:
      00097C                        686 	_case '?' tick_tst 
      00097C A6 3F            [ 1]    1 	ld a,#'?' 
      00097E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000980 26 12            [ 1]    3 	jrne tick_tst
      000982 A6 80            [ 1]  687 	ld a,#TK_CMD  
      000984 F7               [ 1]  688 	ld (x),a 
      000985 5C               [ 1]  689 	incw x 
      000986 90 93            [ 1]  690 	ldw y,x 
      000988 AE 00 72         [ 2]  691 	ldw x,#PRT_IDX 
      00098B 90 FF            [ 2]  692 	ldw (y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00098D 72 A9 00 02      [ 2]  693 	addw y,#2
      000991 CC 0A 73         [ 2]  694 	jp token_exit
      000994                        695 tick_tst: ; comment 
      000994                        696 	_case TICK plus_tst 
      000994 A6 27            [ 1]    1 	ld a,#TICK 
      000996 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000998 26 35            [ 1]    3 	jrne plus_tst
      00099A A6 80            [ 1]  697 	ld a,#TK_CMD
      00099C F7               [ 1]  698 	ld (x),a 
      00099D 5C               [ 1]  699 	incw x
      00099E 90 AE 00 8C      [ 2]  700 	ldw y,#REM_IDX
      0009A2 FF               [ 2]  701 	ldw (x),y 
      0009A3 1C 00 02         [ 2]  702 	addw x,#2  
      0009A6                        703 copy_comment:
      0009A6 90 AE 16 90      [ 2]  704 	ldw y,#tib 
      0009AA 72 B9 00 00      [ 2]  705 	addw y,in.w
      0009AE 90 89            [ 2]  706 	pushw y
      0009B0 CD 0E 28         [ 4]  707 	call strcpy
      0009B3 72 F2 01         [ 2]  708     subw y,(1,sp)
      0009B6 90 9F            [ 1]  709 	ld a,yl 
      0009B8 CB 00 01         [ 1]  710 	add a,in
      0009BB C7 00 01         [ 1]  711 	ld in,a 
      0009BE 1F 01            [ 2]  712 	ldw (1,sp),x
      0009C0 72 F9 01         [ 2]  713 	addw y,(1,sp)
      0009C3 90 5C            [ 1]  714 	incw y 
      0009C5                        715 	_drop 2 
      0009C5 5B 02            [ 2]    1     addw sp,#2 
      0009C7 AE 00 8C         [ 2]  716 	ldw x,#REM_IDX 
      0009CA A6 80            [ 1]  717 	ld a,#TK_CMD 
      0009CC CC 0A 73         [ 2]  718 	jp token_exit 
      0009CF                        719 plus_tst:
      0009CF                        720 	_case '+' star_tst 
      0009CF A6 2B            [ 1]    1 	ld a,#'+' 
      0009D1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009D3 26 05            [ 1]    3 	jrne star_tst
      0009D5 A6 10            [ 1]  721 	ld a,#TK_PLUS  
      0009D7 CC 0A 6F         [ 2]  722 	jp token_char 
      0009DA                        723 star_tst:
      0009DA                        724 	_case '*' slash_tst 
      0009DA A6 2A            [ 1]    1 	ld a,#'*' 
      0009DC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009DE 26 05            [ 1]    3 	jrne slash_tst
      0009E0 A6 20            [ 1]  725 	ld a,#TK_MULT 
      0009E2 CC 0A 6F         [ 2]  726 	jp token_char 
      0009E5                        727 slash_tst: 
      0009E5                        728 	_case '/' prcnt_tst 
      0009E5 A6 2F            [ 1]    1 	ld a,#'/' 
      0009E7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009E9 26 05            [ 1]    3 	jrne prcnt_tst
      0009EB A6 21            [ 1]  729 	ld a,#TK_DIV 
      0009ED CC 0A 6F         [ 2]  730 	jp token_char 
      0009F0                        731 prcnt_tst:
      0009F0                        732 	_case '%' eql_tst 
      0009F0 A6 25            [ 1]    1 	ld a,#'%' 
      0009F2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0009F4 26 05            [ 1]    3 	jrne eql_tst
      0009F6 A6 22            [ 1]  733 	ld a,#TK_MOD
      0009F8 CC 0A 6F         [ 2]  734 	jp token_char  
                                    735 ; 1 or 2 character tokens 	
      0009FB                        736 eql_tst:
      0009FB                        737 	_case '=' gt_tst 		
      0009FB A6 3D            [ 1]    1 	ld a,#'=' 
      0009FD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009FF 26 05            [ 1]    3 	jrne gt_tst
      000A01 A6 32            [ 1]  738 	ld a,#TK_EQUAL
      000A03 CC 0A 6F         [ 2]  739 	jp token_char 
      000A06                        740 gt_tst:
      000A06                        741 	_case '>' lt_tst 
      000A06 A6 3E            [ 1]    1 	ld a,#'>' 
      000A08 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A0A 26 23            [ 1]    3 	jrne lt_tst
      000A0C A6 31            [ 1]  742 	ld a,#TK_GT 
      000A0E 6B 02            [ 1]  743 	ld (ATTRIB,sp),a 
      000A10 91 D6 00         [ 4]  744 	ld a,([in.w],y)
      000A13 72 5C 00 01      [ 1]  745 	inc in 
      000A17 A1 3D            [ 1]  746 	cp a,#'=
      000A19 26 04            [ 1]  747 	jrne 1$
      000A1B A6 33            [ 1]  748 	ld a,#TK_GE 
      000A1D 20 50            [ 2]  749 	jra token_char  
      000A1F A1 3C            [ 1]  750 1$: cp a,#'<
      000A21 26 04            [ 1]  751 	jrne 2$
      000A23 A6 35            [ 1]  752 	ld a,#TK_NE 
      000A25 20 48            [ 2]  753 	jra token_char 
      000A27 72 5A 00 01      [ 1]  754 2$: dec in
      000A2B 7B 02            [ 1]  755 	ld a,(ATTRIB,sp)
      000A2D 20 40            [ 2]  756 	jra token_char 	 
      000A2F                        757 lt_tst:
      000A2F                        758 	_case '<' other
      000A2F A6 3C            [ 1]    1 	ld a,#'<' 
      000A31 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A33 26 23            [ 1]    3 	jrne other
      000A35 A6 34            [ 1]  759 	ld a,#TK_LT 
      000A37 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      000A39 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      000A3C 72 5C 00 01      [ 1]  762 	inc in 
      000A40 A1 3D            [ 1]  763 	cp a,#'=
      000A42 26 04            [ 1]  764 	jrne 1$
      000A44 A6 36            [ 1]  765 	ld a,#TK_LE 
      000A46 20 27            [ 2]  766 	jra token_char 
      000A48 A1 3E            [ 1]  767 1$: cp a,#'>
      000A4A 26 04            [ 1]  768 	jrne 2$
      000A4C A6 35            [ 1]  769 	ld a,#TK_NE 
      000A4E 20 1F            [ 2]  770 	jra token_char 
      000A50 72 5A 00 01      [ 1]  771 2$: dec in 
      000A54 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      000A56 20 17            [ 2]  773 	jra token_char 	
      000A58                        774 other: ; not a special character 	 
      000A58 7B 01            [ 1]  775 	ld a,(TCHAR,sp)
      000A5A CD 08 08         [ 4]  776 	call is_alpha 
      000A5D 25 03            [ 1]  777 	jrc 30$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000A5F CC 11 91         [ 2]  778 	jp syntax_error 
      000A62                        779 30$: 
      000A62 CD 08 4E         [ 4]  780 	call parse_keyword
      000A65 A3 1A C4         [ 2]  781 	cpw x,#remark 
      000A68 26 09            [ 1]  782 	jrne token_exit 
      000A6A 90 93            [ 1]  783 	ldw y,x 
      000A6C CC 09 A6         [ 2]  784 	jp copy_comment 
      000A6F                        785 token_char:
      000A6F F7               [ 1]  786 	ld (x),a 
      000A70 5C               [ 1]  787 	incw x
      000A71 90 93            [ 1]  788 	ldw y,x 
      000A73                        789 token_exit:
      000A73                        790 	_drop VSIZE 
      000A73 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A75 81               [ 4]  791 	ret
                                    792 
                                    793 
                                    794 ;-----------------------------------
                                    795 ; create token list fromm text line 
                                    796 ; save this list in pad buffer 
                                    797 ;  compiled line format: 
                                    798 ;    line_no  2 bytes {0...32767}
                                    799 ;    count    1 byte  
                                    800 ;    tokens   variable length 
                                    801 ;   
                                    802 ; input:
                                    803 ;   none
                                    804 ; modified variables:
                                    805 ;   basicptr     token list buffer address 
                                    806 ;   in.w  		 3|count, i.e. index in buffer
                                    807 ;   count        length of line | 0  
                                    808 ;-----------------------------------
                           000001   809 	XSAVE=1
                           000002   810 	VSIZE=2
      000A76                        811 compile::
      000A76                        812 	_vars VSIZE 
      000A76 52 02            [ 2]    1     sub sp,#VSIZE 
      000A78 55 00 1A 00 04   [ 1]  813 	mov basicptr,txtbgn
      000A7D 72 1A 00 21      [ 1]  814 	bset flags,#FCOMP 
      000A81 A6 00            [ 1]  815 	ld a,#0
      000A83 AE 00 00         [ 2]  816 	ldw x,#0
      000A86 CF 16 E0         [ 2]  817 	ldw pad,x ; destination buffer 
      000A89 C7 16 E2         [ 1]  818 	ld pad+2,a ; count 
      000A8C AE 16 E3         [ 2]  819 	ldw x,#pad+3
      000A8F 72 5F 00 01      [ 1]  820 	clr in 
      000A93 CD 08 B7         [ 4]  821 	call get_token
      000A96 A1 84            [ 1]  822 	cp a,#TK_INTGR
      000A98 26 11            [ 1]  823 	jrne 2$
      000A9A A3 00 01         [ 2]  824 	cpw x,#1 
      000A9D 2A 05            [ 1]  825 	jrpl 1$
      000A9F A6 0A            [ 1]  826 	ld a,#ERR_BAD_VALUE
      000AA1 CC 11 93         [ 2]  827 	jp tb_error
      000AA4 CF 16 E0         [ 2]  828 1$:	ldw pad,x 
      000AA7 90 AE 16 E3      [ 2]  829 	ldw y,#pad+3 
      000AAB 90 A3 17 60      [ 2]  830 2$:	cpw y,#stack_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AAF 25 05            [ 1]  831 	jrult 3$
      000AB1 A6 0F            [ 1]  832 	ld a,#ERR_BUF_FULL 
      000AB3 CC 11 93         [ 2]  833 	jp tb_error 
      000AB6                        834 3$:	
      000AB6 93               [ 1]  835 	ldw x,y 
      000AB7 CD 08 B7         [ 4]  836 	call get_token 
      000ABA A1 00            [ 1]  837 	cp a,#TK_NONE 
      000ABC 26 ED            [ 1]  838 	jrne 2$ 
                                    839 ; compilation completed  
      000ABE 72 A2 16 E0      [ 2]  840 	subw y,#pad
      000AC2 90 9F            [ 1]  841     ld a,yl
      000AC4 AE 16 E0         [ 2]  842 	ldw x,#pad 
      000AC7 CF 00 18         [ 2]  843 	ldw ptr16,x 
      000ACA E7 02            [ 1]  844 	ld (2,x),a 
      000ACC FE               [ 2]  845 	ldw x,(x)
      000ACD 27 09            [ 1]  846 	jreq 10$
      000ACF CD 06 BA         [ 4]  847 	call insert_line
      000AD2 72 5F 00 03      [ 1]  848 	clr  count 
      000AD6 20 0F            [ 2]  849 	jra  11$ 
      000AD8                        850 10$: ; line# is zero 
      000AD8 CE 00 18         [ 2]  851 	ldw x,ptr16  
      000ADB CF 00 04         [ 2]  852 	ldw basicptr,x 
      000ADE E6 02            [ 1]  853 	ld a,(2,x)
      000AE0 C7 00 03         [ 1]  854 	ld count,a 
      000AE3 35 03 00 01      [ 1]  855 	mov in,#3 
      000AE7                        856 11$:
      000AE7                        857 	_drop VSIZE 
      000AE7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AE9 72 1B 00 21      [ 1]  858 	bres flags,#FCOMP 
      000AED 81               [ 4]  859 	ret 
                                    860 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      000AEE                         48 cpy_cmd_name:
      000AEE F6               [ 1]   49 	ld a,(x)
      000AEF 5C               [ 1]   50 	incw x
      000AF0 A4 0F            [ 1]   51 	and a,#15  
      000AF2 88               [ 1]   52 	push a 
      000AF3 0D 01            [ 1]   53     tnz (1,sp) 
      000AF5 27 0A            [ 1]   54 	jreq 9$
      000AF7 F6               [ 1]   55 1$:	ld a,(x)
      000AF8 90 F7            [ 1]   56 	ld (y),a  
      000AFA 5C               [ 1]   57 	incw x
      000AFB 90 5C            [ 1]   58 	incw y 
      000AFD 0A 01            [ 1]   59 	dec (1,sp)	 
      000AFF 26 F6            [ 1]   60 	jrne 1$
      000B01 84               [ 1]   61 9$: pop a 
      000B02 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      000B03                         72 add_space:
      000B03 90 5A            [ 2]   73 	decw y 
      000B05 90 F6            [ 1]   74 	ld a,(y)
      000B07 90 5C            [ 1]   75 	incw y
      000B09 CD 08 22         [ 4]   76 	call is_alnum 
      000B0C 24 06            [ 1]   77 	jrnc 1$
      000B0E A6 20            [ 1]   78 	ld a,#SPACE 
      000B10 90 F7            [ 1]   79 	ld (y),a 
      000B12 90 5C            [ 1]   80 	incw y 
      000B14 81               [ 4]   81 1$: ret 
                                     82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     83 ;--------------------------
                                     84 ;  align text in buffer 
                                     85 ;  to tab_width padding 
                                     86 ;  left with  SPACE 
                                     87 ; input:
                                     88 ;   X      str*
                                     89 ;   A      str_length 
                                     90 ; output:
                                     91 ;   X      ajusted
                                     92 ;--------------------------
      000B15                         93 right_align::
      000B15 88               [ 1]   94 	push a 
      000B16 7B 01            [ 1]   95 0$: ld a,(1,sp)
      000B18 C1 00 22         [ 1]   96 	cp a,tab_width 
      000B1B 2A 08            [ 1]   97 	jrpl 1$
      000B1D A6 20            [ 1]   98 	ld a,#SPACE 
      000B1F 5A               [ 2]   99 	decw x
      000B20 F7               [ 1]  100 	ld (x),a  
      000B21 0C 01            [ 1]  101 	inc (1,sp)
      000B23 20 F1            [ 2]  102 	jra 0$ 
      000B25 84               [ 1]  103 1$: pop a 	
      000B26 81               [ 4]  104 	ret 
                                    105 
                                    106 ;--------------------------
                                    107 ; print TK_QSTR
                                    108 ; converting control character
                                    109 ; to backslash sequence
                                    110 ; input:
                                    111 ;   X        char *
                                    112 ;   Y        dest. buffer 
                                    113 ; output:
                                    114 ;   X        moved forward 
                                    115 ;   Y        moved forward 
                                    116 ;-----------------------------
      000B27                        117 cpy_quote:
      000B27 A6 22            [ 1]  118 	ld a,#'"
      000B29 90 F7            [ 1]  119 	ld (y),a 
      000B2B 90 5C            [ 1]  120 	incw y 
      000B2D F6               [ 1]  121 1$:	ld a,(x)
      000B2E 27 30            [ 1]  122 	jreq 9$
      000B30 5C               [ 1]  123 	incw x 
      000B31 A1 20            [ 1]  124 	cp a,#SPACE 
      000B33 25 0E            [ 1]  125 	jrult 3$
      000B35 90 F7            [ 1]  126 	ld (y),a
      000B37 90 5C            [ 1]  127 	incw y 
      000B39 A1 5C            [ 1]  128 	cp a,#'\ 
      000B3B 26 F0            [ 1]  129 	jrne 1$ 
      000B3D                        130 2$:
      000B3D 90 F7            [ 1]  131 	ld (y),a
      000B3F 90 5C            [ 1]  132 	incw y  
      000B41 20 EA            [ 2]  133 	jra 1$
      000B43 88               [ 1]  134 3$: push a 
      000B44 A6 5C            [ 1]  135 	ld a,#'\
      000B46 90 F7            [ 1]  136 	ld (y),a 
      000B48 90 5C            [ 1]  137 	incw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B4A 84               [ 1]  138 	pop a 
      000B4B A0 07            [ 1]  139 	sub a,#7
      000B4D C7 00 0E         [ 1]  140 	ld acc8,a 
      000B50 72 5F 00 0D      [ 1]  141 	clr acc16
      000B54 89               [ 2]  142 	pushw x
      000B55 AE 07 79         [ 2]  143 	ldw x,#escaped 
      000B58 72 BB 00 0D      [ 2]  144 	addw x,acc16 
      000B5C F6               [ 1]  145 	ld a,(x)
      000B5D 85               [ 2]  146 	popw x
      000B5E 20 DD            [ 2]  147 	jra 2$
      000B60 A6 22            [ 1]  148 9$: ld a,#'"
      000B62 90 F7            [ 1]  149 	ld (y),a 
      000B64 90 5C            [ 1]  150 	incw y  
      000B66 5C               [ 1]  151 	incw x 
      000B67 81               [ 4]  152 	ret
                                    153 
                                    154 ;--------------------------
                                    155 ; return variable name 
                                    156 ; from its address.
                                    157 ; input:
                                    158 ;   X    variable address
                                    159 ; output:
                                    160 ;   A     variable letter
                                    161 ;--------------------------
      000B68                        162 var_name::
      000B68 1D 00 2F         [ 2]  163 		subw x,#vars 
      000B6B 9F               [ 1]  164 		ld a,xl 
      000B6C 44               [ 1]  165 		srl a 
      000B6D AB 41            [ 1]  166 		add a,#'A 
      000B6F 81               [ 4]  167 		ret 
                                    168 
                                    169 ;-----------------------------
                                    170 ; return cmd  idx from its 
                                    171 ; code address 
                                    172 ; input:
                                    173 ;   X      code address 
                                    174 ; output:
                                    175 ;   X      cmd_idx
                                    176 ;-----------------------------
      000B70                        177 get_cmd_idx:
      000B70 90 89            [ 2]  178 	pushw y
      000B72 90 AE 2A C3      [ 2]  179 	ldw y,#code_addr 
      000B76 90 CF 00 18      [ 2]  180 	ldw ptr16,y 
      000B7A 90 5F            [ 1]  181 	clrw y 
      000B7C 91 D3 18         [ 5]  182 1$:	cpw x,([ptr16],y)
      000B7F 27 0C            [ 1]  183 	jreq 3$ 
      000B81 90 5C            [ 1]  184 	incw y 
      000B83 91 D6 18         [ 4]  185 	ld a,([ptr16],y)
      000B86 90 5C            [ 1]  186 	incw y
      000B88 91 DA 18         [ 4]  187 	or a,([ptr16],y)	
      000B8B 26 EF            [ 1]  188 	jrne 1$
      000B8D 93               [ 1]  189 3$: ldw x,y 
      000B8E 90 85            [ 2]  190 	popw y 
      000B90 81               [ 4]  191 	ret
                                    192 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    193 
                                    194 ;-------------------------------------
                                    195 ; decompile tokens list 
                                    196 ; to original text line 
                                    197 ; input:
                                    198 ;   [basicptr]  pointer at line 
                                    199 ;   Y           output buffer
                                    200 ; output:
                                    201 ;   A           length 
                                    202 ;   Y           after string  
                                    203 ;------------------------------------
                           000001   204 	BASE_SAV=1
                           000002   205 	WIDTH_SAV=2
                           000003   206 	STR=3
                           000004   207 	VSIZE=4 
      000B91                        208 decompile::
      000B91                        209 	_vars VSIZE
      000B91 52 04            [ 2]    1     sub sp,#VSIZE 
      000B93 C6 00 0A         [ 1]  210 	ld a,base
      000B96 6B 01            [ 1]  211 	ld (BASE_SAV,sp),a  
      000B98 C6 00 22         [ 1]  212 	ld a,tab_width 
      000B9B 6B 02            [ 1]  213 	ld (WIDTH_SAV,sp),a 
      000B9D 17 03            [ 2]  214 	ldw (STR,sp),y   
      000B9F 72 CE 00 04      [ 5]  215 	ldw x,[basicptr] ; line number 
      000BA3 35 0A 00 0A      [ 1]  216 	mov base,#10
      000BA7 35 05 00 22      [ 1]  217 	mov tab_width,#5
      000BAB 72 5F 00 0C      [ 1]  218 	clr acc24 
      000BAF CF 00 0D         [ 2]  219 	ldw acc16,x
      000BB2 CD 12 F3         [ 4]  220 	call itoa  
      000BB5 CD 0B 15         [ 4]  221 	call right_align 
      000BB8 88               [ 1]  222 	push a 
      000BB9 90 93            [ 1]  223 1$:	ldw y,x ; source
      000BBB 1E 04            [ 2]  224 	ldw x,(STR+1,sp) ; destination
      000BBD CD 0E 28         [ 4]  225 	call strcpy 
      000BC0 90 5F            [ 1]  226 	clrw y 
      000BC2 84               [ 1]  227 	pop a 
      000BC3 90 97            [ 1]  228 	ld yl,a 
      000BC5 72 F9 03         [ 2]  229 	addw y,(STR,sp)
      000BC8 A6 20            [ 1]  230 	ld a,#SPACE 
      000BCA 90 F7            [ 1]  231 	ld (y),a 
      000BCC 90 5C            [ 1]  232 	incw y 
      000BCE 72 5F 00 22      [ 1]  233 	clr tab_width
      000BD2 AE 00 03         [ 2]  234 	ldw x,#3
      000BD5 CF 00 00         [ 2]  235 	ldw in.w,x 
      000BD8                        236 decomp_loop:
      000BD8 90 89            [ 2]  237 	pushw y
      000BDA CD 12 89         [ 4]  238 	call next_token 
      000BDD 90 85            [ 2]  239 	popw y 
      000BDF 4D               [ 1]  240 	tnz a  
      000BE0 26 03            [ 1]  241 	jrne 1$
      000BE2 CC 0C F2         [ 2]  242 	jp 20$
      000BE5 2B 03            [ 1]  243 1$:	jrmi 2$
      000BE7 CC 0C 63         [ 2]  244 	jp 6$
      000BEA                        245 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      000BEA A1 85            [ 1]  246 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000BEC 26 0C            [ 1]  247 	jrne 3$
                                    248 ;; TK_VAR 
      000BEE CD 0B 03         [ 4]  249 	call add_space  
      000BF1 CD 0B 68         [ 4]  250 	call var_name
      000BF4 90 F7            [ 1]  251 	ld (y),a 
      000BF6 90 5C            [ 1]  252 	incw y  
      000BF8 20 DE            [ 2]  253 	jra decomp_loop
      000BFA                        254 3$:
      000BFA A1 84            [ 1]  255 	cp a,#TK_INTGR
      000BFC 26 22            [ 1]  256 	jrne 4$
                                    257 ;; TK_INTGR
      000BFE CD 0B 03         [ 4]  258 	call add_space
      000C01 72 5F 00 0C      [ 1]  259 	clr acc24 
      000C05 CF 00 0D         [ 2]  260 	ldw acc16,x 
      000C08 90 89            [ 2]  261 	pushw y 
      000C0A CD 12 F3         [ 4]  262 	call itoa  
      000C0D 16 01            [ 2]  263 	ldw y,(1,sp) 
      000C0F 88               [ 1]  264 	push a 
      000C10 51               [ 1]  265 	exgw x,y 
      000C11 CD 0E 28         [ 4]  266 	call strcpy 
      000C14 90 5F            [ 1]  267 	clrw y
      000C16 84               [ 1]  268 	pop a  
      000C17 90 97            [ 1]  269 	ld yl,a 
      000C19 72 F9 01         [ 2]  270 	addw y,(1,sp)
      000C1C                        271 	_drop 2 
      000C1C 5B 02            [ 2]    1     addw sp,#2 
      000C1E 20 B8            [ 2]  272 	jra decomp_loop
      000C20                        273 4$: ; dictionary keyword 
      000C20 CD 0B 70         [ 4]  274 	call get_cmd_idx 
      000C23 A3 00 8C         [ 2]  275 	cpw x,#REM_IDX
      000C26 26 23            [ 1]  276 	jrne 5$
      000C28 CE 00 04         [ 2]  277 	ldw x,basicptr 
                                    278 ; copy comment to buffer 
      000C2B CD 0B 03         [ 4]  279 	call add_space
      000C2E A6 27            [ 1]  280 	ld a,#''
      000C30 90 F7            [ 1]  281 	ld (y),a 
      000C32 90 5C            [ 1]  282 	incw y 
      000C34                        283 46$:
      000C34 72 D6 00 00      [ 4]  284 	ld a,([in.w],x)
      000C38 72 5C 00 01      [ 1]  285 	inc in  
      000C3C 90 F7            [ 1]  286 	ld (y),a 
      000C3E 90 5C            [ 1]  287 	incw y 
      000C40 C6 00 01         [ 1]  288 	ld a,in 
      000C43 C1 00 03         [ 1]  289 	cp a,count 
      000C46 2B EC            [ 1]  290 	jrmi 46$
      000C48 CC 0C F2         [ 2]  291 	jp 20$  
      000C4B A3 00 50         [ 2]  292 5$: cpw x,#LET_IDX 
      000C4E 26 03            [ 1]  293 	jrne 51$
      000C50 CC 0B D8         [ 2]  294 	jp decomp_loop ; down display LET 	
      000C53                        295 51$: ; insert command name 
      000C53 CD 0B 03         [ 4]  296 	call add_space  
      000C56 90 89            [ 2]  297 	pushw y
      000C58 CD 0D 2D         [ 4]  298 	call cmd_name
      000C5B 90 85            [ 2]  299 	popw y 
      000C5D CD 0A EE         [ 4]  300 	call cpy_cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000C60 CC 0B D8         [ 2]  301 	jp decomp_loop 
      000C63                        302 6$:
                                    303 ; label?
      000C63 A1 01            [ 1]  304 	cp a,#TK_LABEL 
      000C65 26 23            [ 1]  305 	jrne 64$
                                    306 ; copy label string to output buffer   	
      000C67 A6 20            [ 1]  307 	ld a,#32 
      000C69 90 F7            [ 1]  308 	ld (y),a 
      000C6B 90 5C            [ 1]  309 	incw y 
      000C6D CE 00 04         [ 2]  310 	ldw x,basicptr 
      000C70                        311 61$:
      000C70 72 D6 00 00      [ 4]  312 	ld a,([in.w],x)
      000C74 72 5C 00 01      [ 1]  313 	inc in 
      000C78 4D               [ 1]  314 	tnz a 
      000C79 27 06            [ 1]  315 	jreq 62$
      000C7B 90 F7            [ 1]  316 	ld (y),a 
      000C7D 90 5C            [ 1]  317 	incw y 
      000C7F 20 EF            [ 2]  318 	jra 61$ 
      000C81                        319 62$: 
      000C81 A6 20            [ 1]  320 	ld a,#32 
      000C83 90 F7            [ 1]  321 	ld (y),a 
      000C85 90 5C            [ 1]  322 	incw y 
      000C87 CC 0B D8         [ 2]  323 	jp decomp_loop
      000C8A                        324 64$:
      000C8A A1 02            [ 1]  325 	cp a,#TK_QSTR 
      000C8C 26 06            [ 1]  326 	jrne 7$
                                    327 ;; TK_QSTR
      000C8E CD 0B 27         [ 4]  328 	call cpy_quote  
      000C91 CC 0B D8         [ 2]  329 	jp decomp_loop
      000C94                        330 7$:
      000C94 A1 03            [ 1]  331 	cp a,#TK_CHAR 
      000C96 26 0E            [ 1]  332 	jrne 8$
                                    333 ;; TK_CHAR 
      000C98 A6 5C            [ 1]  334 	ld a,#'\ 
      000C9A 90 F7            [ 1]  335 	ld (y),a 
      000C9C 90 5C            [ 1]  336 	incw y 
      000C9E 9F               [ 1]  337 	ld a,xl 
      000C9F 90 F7            [ 1]  338 	ld (y),a 
      000CA1 90 5C            [ 1]  339 	incw y 
      000CA3 CC 0B D8         [ 2]  340 	jp decomp_loop
      000CA6 A1 0B            [ 1]  341 8$: cp a,#TK_COLON 
      000CA8 26 09            [ 1]  342 	jrne 9$
      000CAA A6 3A            [ 1]  343 	ld a,#':
      000CAC                        344 81$:
      000CAC 90 F7            [ 1]  345 	ld (y),a 
      000CAE 90 5C            [ 1]  346 	incw y 
      000CB0                        347 82$:
      000CB0 CC 0B D8         [ 2]  348 	jp decomp_loop
      000CB3                        349 9$: 
      000CB3 A1 0A            [ 1]  350 	cp a,#TK_SHARP
      000CB5 22 0A            [ 1]  351 	jrugt 10$ 
      000CB7 A0 06            [ 1]  352 	sub a,#TK_ARRAY 
      000CB9 5F               [ 1]  353 	clrw x 
      000CBA 97               [ 1]  354 	ld xl,a
      000CBB 1C 0D 08         [ 2]  355 	addw x,#single_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000CBE F6               [ 1]  356 	ld a,(x)
      000CBF 20 EB            [ 2]  357 	jra 81$ 
      000CC1                        358 10$: 
      000CC1 A1 11            [ 1]  359 	cp a,#TK_MINUS 
      000CC3 22 0A            [ 1]  360 	jrugt 11$
      000CC5 A0 10            [ 1]  361 	sub a,#TK_PLUS 
      000CC7 5F               [ 1]  362 	clrw x 
      000CC8 97               [ 1]  363 	ld xl,a 
      000CC9 1C 0D 0D         [ 2]  364 	addw x,#add_char 
      000CCC F6               [ 1]  365 	ld a,(x)
      000CCD 20 DD            [ 2]  366 	jra 81$
      000CCF                        367 11$:
      000CCF A1 22            [ 1]  368     cp a,#TK_MOD 
      000CD1 22 0A            [ 1]  369 	jrugt 12$
      000CD3 A0 20            [ 1]  370 	sub a,#TK_MULT
      000CD5 5F               [ 1]  371 	clrw x 
      000CD6 97               [ 1]  372 	ld xl,a 
      000CD7 1C 0D 0F         [ 2]  373 	addw x,#mul_char
      000CDA F6               [ 1]  374 	ld a,(x)
      000CDB 20 CF            [ 2]  375 	jra 81$
      000CDD                        376 12$:
      000CDD A0 31            [ 1]  377 	sub a,#TK_GT  
      000CDF 48               [ 1]  378 	sll a 
      000CE0 5F               [ 1]  379 	clrw x 
      000CE1 97               [ 1]  380 	ld xl,a 
      000CE2 1C 0D 12         [ 2]  381 	addw x,#relop_str 
      000CE5 FE               [ 2]  382 	ldw x,(x)
      000CE6 F6               [ 1]  383 	ld a,(x)
      000CE7 5C               [ 1]  384 	incw x 
      000CE8 90 F7            [ 1]  385 	ld (y),a
      000CEA 90 5C            [ 1]  386 	incw y 
      000CEC F6               [ 1]  387 	ld a,(x)
      000CED 26 BD            [ 1]  388 	jrne 81$
      000CEF CC 0B D8         [ 2]  389 	jp decomp_loop 
      000CF2                        390 20$: 
      000CF2 90 7F            [ 1]  391 	clr (y)
      000CF4 1E 03            [ 2]  392 	ldw x,(STR,sp)
      000CF6 7B 01            [ 1]  393 	ld a,(BASE_SAV,sp)
      000CF8 C7 00 0A         [ 1]  394 	ld base,a 
      000CFB 7B 02            [ 1]  395 	ld a,(WIDTH_SAV,sp)
      000CFD C7 00 22         [ 1]  396 	ld tab_width,a
      000D00 72 F2 03         [ 2]  397 	subw y,(STR,sp) 
      000D03 90 9F            [ 1]  398 	ld a,yl 
      000D05                        399 	_drop VSIZE 
      000D05 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D07 81               [ 4]  400 	ret 
                                    401 
      000D08 40 28 29 2C 23         402 single_char: .byte '@','(',')',',','#'
      000D0D 2B 2D                  403 add_char: .byte '+','-'
      000D0F 2A 2F 25               404 mul_char: .byte '*','/','%'
      000D12 0D 1E 0D 20 0D 22 0D   405 relop_str: .word gt,equal,ge,lt,le,ne 
             25 0D 27 0D 2A
      000D1E 3E 00                  406 gt: .asciz ">"
      000D20 3D 00                  407 equal: .asciz "="
      000D22 3E 3D 00               408 ge: .asciz ">="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D25 3C 00                  409 lt: .asciz "<"
      000D27 3C 3D 00               410 le: .asciz "<="
      000D2A 3C 3E 00               411 ne:  .asciz "<>"
                                    412 
                                    413 ;----------------------------------
                                    414 ; search in kword_dict name
                                    415 ; from its execution address 
                                    416 ; input:
                                    417 ;   X       	cmd_index 
                                    418 ; output:
                                    419 ;   X 			cstr*  | 0 
                                    420 ;--------------------------------
                           000001   421 	CMDX=1 
                           000003   422 	LINK=3 
                           000004   423 	VSIZE=4
      000D2D                        424 cmd_name:
      000D2D                        425 	_vars VSIZE 
      000D2D 52 04            [ 2]    1     sub sp,#VSIZE 
      000D2F 72 5F 00 0D      [ 1]  426 	clr acc16 
      000D33 1F 01            [ 2]  427 	ldw (CMDX,sp),x  
      000D35 AE 2A BB         [ 2]  428 	ldw x,#kword_dict	
      000D38 1F 03            [ 2]  429 1$:	ldw (LINK,sp),x
      000D3A E6 02            [ 1]  430 	ld a,(2,x)
      000D3C A4 0F            [ 1]  431 	and a,#15 
      000D3E C7 00 0E         [ 1]  432 	ld acc8,a 
      000D41 1C 00 03         [ 2]  433 	addw x,#3
      000D44 72 BB 00 0D      [ 2]  434 	addw x,acc16
      000D48 FE               [ 2]  435 	ldw x,(x) ; command index  
      000D49 13 01            [ 2]  436 	cpw x,(CMDX,sp)
      000D4B 27 0A            [ 1]  437 	jreq 2$
      000D4D 1E 03            [ 2]  438 	ldw x,(LINK,sp)
      000D4F FE               [ 2]  439 	ldw x,(x) 
      000D50 1D 00 02         [ 2]  440 	subw x,#2  
      000D53 26 E3            [ 1]  441 	jrne 1$
      000D55 20 05            [ 2]  442 	jra 9$
      000D57 1E 03            [ 2]  443 2$: ldw x,(LINK,sp)
      000D59 1C 00 02         [ 2]  444 	addw x,#2 	
      000D5C                        445 9$:	_drop VSIZE
      000D5C 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D5E 81               [ 4]  446 	ret
                                    447 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                     29     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                     30 
                           000000    31 .if SEPARATE
                                     32 	.include "inc/nucleo_8s208.inc"
                                     33 	.include "inc/stm8s208.inc"
                                     34 	.include "inc/ascii.inc"
                                     35 	.include "inc/gen_macros.inc" 
                                     36 	.include "tbi_macros.inc" 
                                     37 .endif 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
      000000                         43 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         44 in::    .blkb 1 ; low byte of in.w 
      000002                         45 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         46 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         47 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         48 data_ptr:  .blkw 1  ; point to DATA address
      000008                         49 data_ofs:  .blkb 1  ; index to next data item 
      000009                         50 data_len:  .blkb 1  ; length of data line 
      00000A                         51 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         52 acc32:  .blkb 1 ; 32 bit accumulator most signicant byte 
      00000C                         53 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000D                         54 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000E                         55 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000F                         56 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000011                         57 timer:: .blkw 1 ;  milliseconds count down timer 
      000013                         58 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000015                         59 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000017                         60 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000018                         61 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000019                         62 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001A                         63 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001C                         64 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001E                         65 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001F                         66 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000021                         67 flags:: .blkb 1 ; various boolean flags
      000022                         68 tab_width:: .blkb 1 ; print colon width (default 6)
      000023                         69 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002B                         70 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002C                         71 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002D                         72 free_eeprom: .blkw 1 ; start address of free eeprom 
                                     73 
                                     74 
      00002F                         75 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     76 	.area BTXT (ABS)
      00007C                         77 	.org 0x7C  
                                     78 ; keep 'free_ram' as last variable 
                                     79 ; basic code compiled here. 
      00007C                         80 rsign: .blkw 1 ; "BC" 
      00007E                         81 rsize: .blkw 1 ; code size 	 
      000080                         82 free_ram: ; from here RAM free for BASIC text 
                                     83 
                                     84 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                     85 
                                     86 ;----------------------
                                     87 ; print token id && value
                                     88 ; input:
                                     89 ;   A     token id 
                                     90 ;   X     token value 
                                     91 ;---------------------
                           000001    92 	BSAVE=1
                           000002    93 	AREG=2
                           000003    94 	XREG=3
                           000004    95 	VSIZE=4
      000D5F                         96 prt_tok:
      000D5F                         97 	_vars VSIZE 
      000D5F 52 04            [ 2]    1     sub sp,#VSIZE 
      000D61 6B 02            [ 1]   98 	ld (AREG,sp),a 
      000D63 1F 03            [ 2]   99 	ldw (XREG,sp),x 
      000D65 C6 00 0A         [ 1]  100 	ld a, base
      000D68 6B 01            [ 1]  101 	ld (BSAVE,sp),a 
      000D6A 35 10 00 0A      [ 1]  102 	mov base,#16  
      000D6E AE 0D 96         [ 2]  103 	ldw x,#token_msg
      000D71 CD 03 4E         [ 4]  104 	call puts 
      000D74 5F               [ 1]  105 	clrw x 
      000D75 7B 02            [ 1]  106 	ld a,(AREG,sp)
      000D77 97               [ 1]  107 	ld xl,a 
      000D78 CD 12 D7         [ 4]  108 	call print_int 
      000D7B A6 20            [ 1]  109 	ld a,#SPACE
      000D7D CD 02 F1         [ 4]  110 	call putc 
      000D80 1E 03            [ 2]  111 	ldw x,(XREG,sp)
      000D82 CD 12 D7         [ 4]  112 	call print_int 
      000D85 A6 0D            [ 1]  113 	ld a,#CR 
      000D87 CD 02 F1         [ 4]  114 	call putc 
      000D8A 7B 01            [ 1]  115 	ld a,(BSAVE,sp)
      000D8C C7 00 0A         [ 1]  116 	ld base,a 
      000D8F 7B 02            [ 1]  117 	ld a,(AREG,sp)
      000D91 1E 03            [ 2]  118 	ldw x,(XREG,sp)
      000D93                        119 	_drop VSIZE 
      000D93 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D95 81               [ 4]  120 	ret 
      000D96 74 6F 6B 65 6E 3A 20   121 token_msg: .asciz "token: "
             00
                                    122 
                                    123 
                                    124 ;---------------------
                                    125 ; display n bytes row 
                                    126 ; from memory.
                                    127 ; input:
                                    128 ;   A   bytes to print 
                                    129 ;	X   start address 
                                    130 ; output:
                                    131 ;   X   address after last shown  
                                    132 ;---------------------
                           000001   133 	CNT=1 
                           000002   134 	ADR=2 
                           000003   135 	VSIZE=3 
      000D9E                        136 show_row:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000D9E 4D               [ 1]  137 	tnz a 
      000D9F 26 01            [ 1]  138 	jrne 1$
      000DA1 81               [ 4]  139 	ret 
      000DA2                        140 1$:	
      000DA2 89               [ 2]  141 	pushw x  
      000DA3 88               [ 1]  142 	push a 
      000DA4 35 04 00 22      [ 1]  143 	mov tab_width,#4 
      000DA8 CD 12 D7         [ 4]  144 	call print_int 
      000DAB A6 20            [ 1]  145 	ld a,#SPACE  
      000DAD CD 02 F1         [ 4]  146 	call putc
      000DB0                        147 row_loop:
      000DB0 1E 02            [ 2]  148 	ldw x,(ADR,sp)
      000DB2 F6               [ 1]  149 	ld a,(x)
      000DB3 5F               [ 1]  150 	clrw x 
      000DB4 97               [ 1]  151 	ld xl,a 
      000DB5 CD 12 D7         [ 4]  152 	call print_int 
      000DB8 1E 02            [ 2]  153 	ldw x,(ADR,sp)
      000DBA 5C               [ 1]  154 	incw x 
      000DBB 1F 02            [ 2]  155 	ldw (ADR,sp),x 
      000DBD 0A 01            [ 1]  156 	dec (CNT,sp)
      000DBF 26 EF            [ 1]  157 	jrne row_loop
      000DC1                        158 	_drop VSIZE  		
      000DC1 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DC3 35 04 00 22      [ 1]  159 	mov tab_width,#4
      000DC7 A6 0D            [ 1]  160 	ld a,#CR 
      000DC9 CD 02 F1         [ 4]  161 	call putc 
      000DCC 81               [ 4]  162 	ret 
                                    163 
                                    164 ;--------------------------
                                    165 ; print memory content 
                                    166 ; in hexadecimal format
                                    167 ;  input:
                                    168 ;    X    start address 
                                    169 ;    Y    count 
                                    170 ;--------------------------
                           000001   171 	BCNT=1
                           000003   172 	BASE=3
                           000004   173 	TABW=4
                           000004   174 	VSIZE=4   
      000DCD                        175 hex_dump:
      000DCD 88               [ 1]  176 	push a 
      000DCE                        177 	_vars VSIZE
      000DCE 52 04            [ 2]    1     sub sp,#VSIZE 
      000DD0 C6 00 0A         [ 1]  178 	ld a,base
      000DD3 6B 03            [ 1]  179 	ld (BASE,sp),a 
      000DD5 35 10 00 0A      [ 1]  180 	mov base,#16
      000DD9 C6 00 22         [ 1]  181 	ld a,tab_width 
      000DDC 6B 04            [ 1]  182 	ld (TABW,sp),a
      000DDE A6 0D            [ 1]  183 	ld a,#CR 
      000DE0 CD 02 F1         [ 4]  184 	call putc 
      000DE3 17 01            [ 2]  185 1$: ldw (BCNT,sp),y
      000DE5 A6 10            [ 1]  186 	ld a,#16
      000DE7 90 A3 00 10      [ 2]  187 	cpw y,#16
      000DEB 2A 02            [ 1]  188 	jrpl 2$
      000DED 90 9F            [ 1]  189 	ld a,yl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DEF                        190 2$: 	
      000DEF CD 0D 9E         [ 4]  191 	call show_row 
      000DF2 16 01            [ 2]  192 	ldw y,(BCNT,sp) 
      000DF4 72 A2 00 10      [ 2]  193 	subw y,#16 
      000DF8 90 A3 00 01      [ 2]  194 	cpw y,#1
      000DFC 2A E5            [ 1]  195 	jrpl 1$
      000DFE 7B 03            [ 1]  196 	ld a,(BASE,sp)
      000E00 C7 00 0A         [ 1]  197 	ld base,a
      000E03 7B 04            [ 1]  198 	ld a,(TABW,sp)
      000E05 C7 00 22         [ 1]  199 	ld tab_width,a 
      000E08                        200 	_drop VSIZE
      000E08 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E0A 84               [ 1]  201 	pop a 
      000E0B 81               [ 4]  202 	ret 
                                    203 
                                    204 ;-------------------------------------
                                    205 ; retrun string length
                                    206 ; input:
                                    207 ;   X         .asciz  pointer 
                                    208 ; output:
                                    209 ;   X         not affected 
                                    210 ;   A         length 
                                    211 ;-------------------------------------
      000E0C                        212 strlen::
      000E0C 89               [ 2]  213 	pushw x 
      000E0D 4F               [ 1]  214 	clr a
      000E0E 7D               [ 1]  215 1$:	tnz (x) 
      000E0F 27 04            [ 1]  216 	jreq 9$ 
      000E11 4C               [ 1]  217 	inc a 
      000E12 5C               [ 1]  218 	incw x 
      000E13 20 F9            [ 2]  219 	jra 1$ 
      000E15 85               [ 2]  220 9$:	popw x 
      000E16 81               [ 4]  221 	ret 
                                    222 
                                    223 ;------------------------------------
                                    224 ; compare 2 strings
                                    225 ; input:
                                    226 ;   X 		char* first string 
                                    227 ;   Y       char* second string 
                                    228 ; output:
                                    229 ;   A 		0|1 
                                    230 ;-------------------------------------
      000E17                        231 strcmp:
      000E17 F6               [ 1]  232 	ld a,(x)
      000E18 27 0B            [ 1]  233 	jreq 5$ 
      000E1A 90 F1            [ 1]  234 	cp a,(y) 
      000E1C 26 05            [ 1]  235 	jrne 4$ 
      000E1E 5C               [ 1]  236 	incw x 
      000E1F 90 5C            [ 1]  237 	incw y 
      000E21 20 F4            [ 2]  238 	jra strcmp 
      000E23                        239 4$: ; not same  
      000E23 4F               [ 1]  240 	clr a 
      000E24 81               [ 4]  241 	ret 
      000E25                        242 5$: ; same 
      000E25 A6 01            [ 1]  243 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E27 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;---------------------------------------
                                    248 ;  copy src to dest 
                                    249 ; input:
                                    250 ;   X 		dest 
                                    251 ;   Y 		src 
                                    252 ; output: 
                                    253 ;   X 		dest 
                                    254 ;----------------------------------
      000E28                        255 strcpy::
      000E28 88               [ 1]  256 	push a 
      000E29 89               [ 2]  257 	pushw x 
      000E2A 90 F6            [ 1]  258 1$: ld a,(y)
      000E2C 27 06            [ 1]  259 	jreq 9$ 
      000E2E F7               [ 1]  260 	ld (x),a 
      000E2F 5C               [ 1]  261 	incw x 
      000E30 90 5C            [ 1]  262 	incw y 
      000E32 20 F6            [ 2]  263 	jra 1$ 
      000E34 7F               [ 1]  264 9$:	clr (x)
      000E35 85               [ 2]  265 	popw x 
      000E36 84               [ 1]  266 	pop a 
      000E37 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; move memory block 
                                    271 ; input:
                                    272 ;   X 		destination 
                                    273 ;   Y 	    source 
                                    274 ;   acc16	bytes count 
                                    275 ; output:
                                    276 ;   none 
                                    277 ;--------------------------------------
                           000001   278 	INCR=1 ; increament high byte 
                           000002   279 	LB=2 ; increament low byte 
                           000002   280 	VSIZE=2
      000E38                        281 move::
      000E38 88               [ 1]  282 	push a 
      000E39                        283 	_vars VSIZE 
      000E39 52 02            [ 2]    1     sub sp,#VSIZE 
      000E3B 0F 01            [ 1]  284 	clr (INCR,sp)
      000E3D 0F 02            [ 1]  285 	clr (LB,sp)
      000E3F 90 89            [ 2]  286 	pushw y 
      000E41 13 01            [ 2]  287 	cpw x,(1,sp) ; compare DEST to SRC 
      000E43 90 85            [ 2]  288 	popw y 
      000E45 27 31            [ 1]  289 	jreq move_exit ; x==y 
      000E47 2B 0E            [ 1]  290 	jrmi move_down
      000E49                        291 move_up: ; start from top address with incr=-1
      000E49 72 BB 00 0D      [ 2]  292 	addw x,acc16
      000E4D 72 B9 00 0D      [ 2]  293 	addw y,acc16
      000E51 03 01            [ 1]  294 	cpl (INCR,sp)
      000E53 03 02            [ 1]  295 	cpl (LB,sp)   ; increment = -1 
      000E55 20 05            [ 2]  296 	jra move_loop  
      000E57                        297 move_down: ; start from bottom address with incr=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E57 5A               [ 2]  298     decw x 
      000E58 90 5A            [ 2]  299 	decw y
      000E5A 0C 02            [ 1]  300 	inc (LB,sp) ; incr=1 
      000E5C                        301 move_loop:	
      000E5C C6 00 0D         [ 1]  302     ld a, acc16 
      000E5F CA 00 0E         [ 1]  303 	or a, acc8
      000E62 27 14            [ 1]  304 	jreq move_exit 
      000E64 72 FB 01         [ 2]  305 	addw x,(INCR,sp)
      000E67 72 F9 01         [ 2]  306 	addw y,(INCR,sp) 
      000E6A 90 F6            [ 1]  307 	ld a,(y)
      000E6C F7               [ 1]  308 	ld (x),a 
      000E6D 89               [ 2]  309 	pushw x 
      000E6E CE 00 0D         [ 2]  310 	ldw x,acc16 
      000E71 5A               [ 2]  311 	decw x 
      000E72 CF 00 0D         [ 2]  312 	ldw acc16,x 
      000E75 85               [ 2]  313 	popw x 
      000E76 20 E4            [ 2]  314 	jra move_loop
      000E78                        315 move_exit:
      000E78                        316 	_drop VSIZE
      000E78 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E7A 84               [ 1]  317 	pop a 
      000E7B 81               [ 4]  318 	ret 	
                                    319 
                                    320 ;------------------------------------
                                    321 ;  set all variables to zero 
                                    322 ; input:
                                    323 ;   none 
                                    324 ; output:
                                    325 ;	none
                                    326 ;------------------------------------
      000E7C                        327 clear_vars:
      000E7C 89               [ 2]  328 	pushw x 
      000E7D 90 89            [ 2]  329 	pushw y 
      000E7F AE 00 2F         [ 2]  330 	ldw x,#vars 
      000E82 90 AE 00 34      [ 2]  331 	ldw y,#2*26 
      000E86 7F               [ 1]  332 1$:	clr (x)
      000E87 5C               [ 1]  333 	incw x 
      000E88 90 5A            [ 2]  334 	decw y 
      000E8A 26 FA            [ 1]  335 	jrne 1$
      000E8C 90 85            [ 2]  336 	popw y 
      000E8E 85               [ 2]  337 	popw x 
      000E8F 81               [ 4]  338 	ret 
                                    339 
                                    340 ;-------------------------------------
                                    341 ;  program initialization entry point 
                                    342 ;-------------------------------------
                           000002   343 	MAJOR=2
                           000000   344 	MINOR=0 
      000E90 0A 0A 54 69 6E 79 20   345 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      000ED6                        346 cold_start:
                                    347 ;set stack 
      000ED6 AE 17 FF         [ 2]  348 	ldw x,#STACK_EMPTY
      000ED9 94               [ 1]  349 	ldw sp,x   
                                    350 ; clear all ram 
      000EDA 7F               [ 1]  351 0$: clr (x)
      000EDB 5A               [ 2]  352 	decw x 
      000EDC 26 FC            [ 1]  353 	jrne 0$
                                    354 ; activate pull up on all inputs 
      000EDE A6 FF            [ 1]  355 	ld a,#255 
      000EE0 C7 50 03         [ 1]  356 	ld PA_CR1,a 
      000EE3 C7 50 08         [ 1]  357 	ld PB_CR1,a 
      000EE6 C7 50 0D         [ 1]  358 	ld PC_CR1,a 
      000EE9 C7 50 12         [ 1]  359 	ld PD_CR1,a 
      000EEC C7 50 17         [ 1]  360 	ld PE_CR1,a 
      000EEF C7 50 1C         [ 1]  361 	ld PF_CR1,a 
      000EF2 C7 50 21         [ 1]  362 	ld PG_CR1,a 
      000EF5 C7 50 2B         [ 1]  363 	ld PI_CR1,a
                                    364 ; set LD2 pin as output 
      000EF8 72 1A 50 0D      [ 1]  365     bset PC_CR1,#LED2_BIT
      000EFC 72 1A 50 0E      [ 1]  366     bset PC_CR2,#LED2_BIT
      000F00 72 1A 50 0C      [ 1]  367     bset PC_DDR,#LED2_BIT
      000F04 72 1B 50 0A      [ 1]  368 	bres PC_ODR,#LED2_BIT 
                                    369 ; disable schmitt triggers on Arduino CN4 analog inputs
      000F08 55 00 3F 54 07   [ 1]  370 	mov ADC_TDRL,0x3f
                                    371 ; disable peripherals clocks
                                    372 ;	clr CLK_PCKENR1 
                                    373 ;	clr CLK_PCKENR2
      000F0D 72 5F 50 F2      [ 1]  374 	clr AWU_TBR 
      000F11 72 14 50 CA      [ 1]  375 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    376 ; select internal clock no divisor: 16 Mhz 	
      000F15 A6 E1            [ 1]  377 	ld a,#CLK_SWR_HSI 
      000F17 5F               [ 1]  378 	clrw x  
      000F18 CD 00 76         [ 4]  379     call clock_init 
      000F1B CD 00 99         [ 4]  380 	call timer4_init
      000F1E CD 00 8C         [ 4]  381 	call timer2_init
                                    382 ; UART1 at 115200 BAUD
      000F21 CD 02 AC         [ 4]  383 	call uart1_init
                                    384 ; activate PE_4 (user button interrupt)
      000F24 72 18 50 18      [ 1]  385     bset PE_CR2,#USR_BTN_BIT 
                                    386 ; display system information
      000F28 AE 0E 90         [ 2]  387 	ldw x,#software 
      000F2B CD 03 4E         [ 4]  388 	call puts 
      000F2E A6 02            [ 1]  389 	ld a,#MAJOR 
      000F30 C7 00 0E         [ 1]  390 	ld acc8,a 
      000F33 5F               [ 1]  391 	clrw x 
      000F34 CF 00 0C         [ 2]  392 	ldw acc24,x
      000F37 72 5F 00 22      [ 1]  393 	clr tab_width  
      000F3B 35 0A 00 0A      [ 1]  394 	mov base, #10 
      000F3F CD 12 E7         [ 4]  395 	call prti24 
      000F42 A6 2E            [ 1]  396 	ld a,#'.
      000F44 CD 02 F1         [ 4]  397 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F47 A6 00            [ 1]  398 	ld a,#MINOR 
      000F49 C7 00 0E         [ 1]  399 	ld acc8,a 
      000F4C 5F               [ 1]  400 	clrw x 
      000F4D CF 00 0C         [ 2]  401 	ldw acc24,x 
      000F50 CD 12 E7         [ 4]  402 	call prti24
      000F53 A6 0D            [ 1]  403 	ld a,#CR 
      000F55 CD 02 F1         [ 4]  404 	call putc
      000F58 9A               [ 1]  405 	rim 
      000F59 72 5C 00 16      [ 1]  406 	inc seedy+1 
      000F5D 72 5C 00 14      [ 1]  407 	inc seedx+1 
      000F61 CD 0F F9         [ 4]  408 	call clear_basic
      000F64 CD 18 8E         [ 4]  409 	call ubound 
      000F67 CD 1E 20         [ 4]  410 	call beep_1khz  
      000F6A                        411 2$:	
      000F6A CD 0F DB         [ 4]  412 	call warm_init
                                    413 ; check for application in flash memory 
      000F6D CE 2C 00         [ 2]  414 	ldw x,app_sign 
      000F70 C3 20 A2         [ 2]  415 	cpw x,SIGNATURE 
      000F73 27 03            [ 1]  416 	jreq run_app
      000F75 CC 12 18         [ 2]  417 	jp cmd_line
      000F78                        418 run_app:
                                    419 ; run application in FLASH|EEPROM 
      000F78 CE 2C 02         [ 2]  420 	ldw x,app_size  
      000F7B 89               [ 2]  421 	pushw x 
      000F7C AE 2C 04         [ 2]  422 	ldw x,#app 
      000F7F CF 00 1A         [ 2]  423 	ldw txtbgn,x
      000F82 CF 00 04         [ 2]  424 	ldw basicptr,x 
      000F85 72 FB 01         [ 2]  425 	addw x,(1,sp) ; x+size 
      000F88                        426 	_drop 2 
      000F88 5B 02            [ 2]    1     addw sp,#2 
      000F8A CF 00 1C         [ 2]  427 	ldw txtend,x 
      000F8D AE 0F B9         [ 2]  428 	ldw x,#RUNNING 
      000F90 CD 03 4E         [ 4]  429 	call puts
      000F93 CE 00 04         [ 2]  430 	ldw x,basicptr    
      000F96 35 10 00 0A      [ 1]  431 	mov base,#16 
      000F9A CD 12 D7         [ 4]  432 	call print_int
      000F9D 35 0A 00 0A      [ 1]  433 	mov base,#10  
      000FA1 CE 00 04         [ 2]  434 	ldw x, basicptr 
      000FA4 E6 02            [ 1]  435 	ld a,(2,x)
      000FA6 C7 00 03         [ 1]  436 	ld count,a 
      000FA9 35 03 00 01      [ 1]  437 	mov in,#3 
      000FAD 72 10 00 21      [ 1]  438 	bset flags,#FRUN
      000FB1 CD 18 8E         [ 4]  439 	call ubound   
      000FB4 CC 12 34         [ 2]  440 	jp interpreter  
      000FB7 20 FE            [ 2]  441     jra .  
                                    442 
      000FB9 0A 72 75 6E 6E 69 6E   443 RUNNING: .asciz "\nrunning application at address: " 
             67 20 61 70 70 6C 69
             63 61 74 69 6F 6E 20
             61 74 20 61 64 64 72
             65 73 73 3A 20 00
                                    444 
      000FDB                        445 warm_init:
      000FDB 72 5F 00 21      [ 1]  446 	clr flags 
      000FDF 72 5F 00 1E      [ 1]  447 	clr loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000FE3 35 04 00 22      [ 1]  448 	mov tab_width,#TAB_WIDTH 
      000FE7 35 0A 00 0A      [ 1]  449 	mov base,#10 
      000FEB AE 00 00         [ 2]  450 	ldw x,#0 
      000FEE CF 00 04         [ 2]  451 	ldw basicptr,x 
      000FF1 CF 00 00         [ 2]  452 	ldw in.w,x 
      000FF4 72 5F 00 03      [ 1]  453 	clr count
      000FF8 81               [ 4]  454 	ret 
                                    455 
                                    456 
                                    457 ;---------------------------
                                    458 ; reset BASIC text variables 
                                    459 ; and clear variables 
                                    460 ;---------------------------
      000FF9                        461 clear_basic:
      000FF9 89               [ 2]  462 	pushw x 
      000FFA 72 5F 00 03      [ 1]  463 	clr count
      000FFE 72 5F 00 01      [ 1]  464 	clr in  
      001002 AE 00 80         [ 2]  465 	ldw x,#free_ram 
      001005 CF 00 1A         [ 2]  466 	ldw txtbgn,x 
      001008 CF 00 1C         [ 2]  467 	ldw txtend,x 
      00100B CD 0E 7C         [ 4]  468 	call clear_vars 
      00100E 85               [ 2]  469 	popw x
      00100F 81               [ 4]  470 	ret 
                                    471 
                                    472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    473 ;;   Tiny BASIC error messages     ;;
                                    474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001010                        475 err_msg:
      001010 00 00 10 30 10 3D 10   476 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             4B 10 64 10 73
      00101C 10 89 10 9F 10 B9 10   477 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             CA 10 DB
      001026 10 E7 11 1A 11 2A 11   478 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             3E 11 51
                                    479 
      001030 4D 65 6D 6F 72 79 20   480 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      00103D 73 79 6E 74 61 78 20   481 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00104B 6D 61 74 68 20 6F 70   482 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001064 64 69 76 69 73 69 6F   483 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001073 69 6E 76 61 6C 69 64   484 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001089 72 75 6E 20 74 69 6D   485 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00109F 63 6F 6D 6D 61 6E 64   486 err_cmd_only: .asciz "command line only usage.\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0010B9 64 75 70 6C 69 63 61   487 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0010CA 46 69 6C 65 20 6E 6F   488 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0010DB 62 61 64 20 76 61 6C   489 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0010E7 46 69 6C 65 20 69 6E   490 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00111A 4E 6F 20 64 61 74 61   491 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00112A 4E 6F 20 70 72 6F 67   492 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      00113E 46 69 6C 65 20 73 79   493 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001151 42 75 66 66 65 72 20   494 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                    495 
      00115E 0A 72 75 6E 20 74 69   496 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001170 0A 63 6F 6D 70 69 6C   497 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001181 6C 61 73 74 20 74 6F   498 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    499 
      001191                        500 syntax_error::
      001191 A6 02            [ 1]  501 	ld a,#ERR_SYNTAX 
                                    502 
      001193                        503 tb_error::
      001193 72 0A 00 21 44   [ 2]  504 	btjt flags,#FCOMP,1$
      001198 88               [ 1]  505 	push a 
      001199 AE 11 5E         [ 2]  506 	ldw x, #rt_msg 
      00119C CD 03 4E         [ 4]  507 	call puts 
      00119F 84               [ 1]  508 	pop a 
      0011A0 AE 10 10         [ 2]  509 	ldw x, #err_msg 
      0011A3 72 5F 00 0D      [ 1]  510 	clr acc16 
      0011A7 48               [ 1]  511 	sll a
      0011A8 72 59 00 0D      [ 1]  512 	rlc acc16  
      0011AC C7 00 0E         [ 1]  513 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0011AF 72 BB 00 0D      [ 2]  514 	addw x,acc16 
      0011B3 FE               [ 2]  515 	ldw x,(x)
      0011B4 CD 03 4E         [ 4]  516 	call puts
      0011B7 CE 00 04         [ 2]  517 	ldw x,basicptr
      0011BA C6 00 01         [ 1]  518 	ld a,in 
      0011BD CD 19 A4         [ 4]  519 	call prt_basic_line
      0011C0 AE 11 81         [ 2]  520 	ldw x,#tk_id 
      0011C3 CD 03 4E         [ 4]  521 	call puts 
      0011C6 C6 00 02         [ 1]  522 	ld a,in.saved 
      0011C9 5F               [ 1]  523 	clrw x 
      0011CA 97               [ 1]  524 	ld xl,a 
      0011CB 72 BB 00 04      [ 2]  525 	addw x,basicptr 
      0011CF F6               [ 1]  526 	ld a,(x)
      0011D0 5F               [ 1]  527 	clrw x 
      0011D1 97               [ 1]  528 	ld xl,a 
      0011D2 CD 12 D7         [ 4]  529 	call print_int
      0011D5 72 0D 00 21 37   [ 2]  530 	btjf flags,#FAUTORUN ,6$
      0011DA 20 35            [ 2]  531 	jra 6$
      0011DC                        532 1$:	
      0011DC 88               [ 1]  533 	push a 
      0011DD AE 11 70         [ 2]  534 	ldw x,#comp_msg
      0011E0 CD 03 4E         [ 4]  535 	call puts 
      0011E3 84               [ 1]  536 	pop a 
      0011E4 AE 10 10         [ 2]  537 	ldw x, #err_msg 
      0011E7 72 5F 00 0D      [ 1]  538 	clr acc16 
      0011EB 48               [ 1]  539 	sll a
      0011EC 72 59 00 0D      [ 1]  540 	rlc acc16  
      0011F0 C7 00 0E         [ 1]  541 	ld acc8, a 
      0011F3 72 BB 00 0D      [ 2]  542 	addw x,acc16 
      0011F7 FE               [ 2]  543 	ldw x,(x)
      0011F8 CD 03 4E         [ 4]  544 	call puts
      0011FB AE 16 90         [ 2]  545 	ldw x,#tib
      0011FE CD 03 4E         [ 4]  546 	call puts 
      001201 A6 0D            [ 1]  547 	ld a,#CR 
      001203 CD 02 F1         [ 4]  548 	call putc
      001206 CE 00 00         [ 2]  549 	ldw x,in.w
      001209 CD 03 BB         [ 4]  550 	call spaces
      00120C A6 5E            [ 1]  551 	ld a,#'^
      00120E CD 02 F1         [ 4]  552 	call putc 
      001211 AE 17 FF         [ 2]  553 6$: ldw x,#STACK_EMPTY 
      001214 94               [ 1]  554     ldw sp,x
      001215                        555 warm_start:
      001215 CD 0F DB         [ 4]  556 	call warm_init
                                    557 ;----------------------------
                                    558 ;   BASIC interpreter
                                    559 ;----------------------------
      001218                        560 cmd_line: ; user interface 
      001218 A6 0D            [ 1]  561 	ld a,#CR 
      00121A CD 02 F1         [ 4]  562 	call putc 
      00121D A6 3E            [ 1]  563 	ld a,#'> 
      00121F CD 02 F1         [ 4]  564 	call putc
      001222 CD 04 53         [ 4]  565 	call readln
      001225 72 5D 00 03      [ 1]  566 	tnz count 
      001229 27 ED            [ 1]  567 	jreq cmd_line
      00122B CD 0A 76         [ 4]  568 	call compile
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                    569 ;;; test 
                                    570 ; ldw x,txtbgn 
                                    571 ; ldw y,#16 
                                    572 ; call hex_dump
                                    573 ;;; end test
                                    574 
                                    575 ; if text begin with a line number
                                    576 ; the compiler set count to zero    
                                    577 ; so code is not interpreted
      00122E 72 5D 00 03      [ 1]  578 	tnz count 
      001232 27 E4            [ 1]  579 	jreq cmd_line
                                    580 
                                    581 ; if direct command 
                                    582 ; it's ready to interpret 
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;; This is the interpreter loop
                                    585 ;; for each BASIC code line. 
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001234                        587 interpreter: 
      001234 C6 00 01         [ 1]  588 	ld a,in 
      001237 C1 00 03         [ 1]  589 	cp a,count 
      00123A 2B 1D            [ 1]  590 	jrmi interp_loop
      00123C                        591 next_line:
      00123C 72 01 00 21 D7   [ 2]  592 	btjf flags, #FRUN, cmd_line
      001241 CE 00 04         [ 2]  593 	ldw x,basicptr
      001244 72 BB 00 00      [ 2]  594 	addw x,in.w 
      001248 C3 00 1C         [ 2]  595 	cpw x,txtend 
      00124B 2A C8            [ 1]  596 	jrpl warm_start
      00124D CF 00 04         [ 2]  597 	ldw basicptr,x ; start of next line  
      001250 E6 02            [ 1]  598 	ld a,(2,x)
      001252 C7 00 03         [ 1]  599 	ld count,a 
      001255 35 03 00 01      [ 1]  600 	mov in,#3 ; skip first 3 bytes of line 
      001259                        601 interp_loop: 
      001259 CD 12 89         [ 4]  602 	call next_token
      00125C A1 00            [ 1]  603 	cp a,#TK_NONE 
      00125E 27 DC            [ 1]  604 	jreq next_line 
      001260 A1 80            [ 1]  605 	cp a,#TK_CMD
      001262 26 03            [ 1]  606 	jrne 1$
      001264 FD               [ 4]  607 	call (x) 
      001265 20 F2            [ 2]  608 	jra interp_loop 
      001267                        609 1$:	 
      001267 A1 85            [ 1]  610 	cp a,#TK_VAR
      001269 26 05            [ 1]  611 	jrne 2$
      00126B CD 18 A9         [ 4]  612 	call let_var  
      00126E 20 E9            [ 2]  613 	jra interp_loop 
      001270                        614 2$:	
      001270 A1 06            [ 1]  615 	cp a,#TK_ARRAY 
      001272 26 05            [ 1]  616 	jrne 3$
      001274 CD 18 A6         [ 4]  617 	call let_array 
      001277 20 E0            [ 2]  618 	jra interp_loop
      001279                        619 3$:	
      001279 A1 0B            [ 1]  620 	cp a,#TK_COLON 
      00127B 27 DC            [ 1]  621 	jreq interp_loop
      00127D A1 01            [ 1]  622 4$: cp a,#TK_LABEL 
      00127F 26 05            [ 1]  623 	jrne 5$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001281 CD 1C AE         [ 4]  624 	call skip_label
      001284 20 D3            [ 2]  625 	jra interp_loop 
      001286 CC 11 91         [ 2]  626 5$:	jp syntax_error 
                                    627 
                                    628 		
                                    629 ;--------------------------
                                    630 ; extract next token from
                                    631 ; token list 
                                    632 ; basicptr -> base address 
                                    633 ; in  -> offset in list array 
                                    634 ; output:
                                    635 ;   A 		token attribute
                                    636 ;   X 		token value if there is one
                                    637 ;----------------------------------------
      001289                        638 next_token::
      001289 5F               [ 1]  639 	clrw x 
      00128A C6 00 01         [ 1]  640 	ld a,in 
                                    641 ; don't replace sub by "cp a,count" 
                                    642 ; if end of line must return with A=0   	
      00128D C0 00 03         [ 1]  643 	sub a,count 
      001290 27 44            [ 1]  644 	jreq 9$ ; end of line 
      001292                        645 0$: 
      001292 55 00 01 00 02   [ 1]  646 	mov in.saved,in ; in case "_unget_token" needed 
      001297 90 CE 00 04      [ 2]  647 	ldw y,basicptr 
      00129B 72 B9 00 00      [ 2]  648 	addw y,in.w 
      00129F 90 F6            [ 1]  649 	ld a,(y)
      0012A1 90 5C            [ 1]  650 	incw y   
      0012A3 4D               [ 1]  651 	tnz a 
      0012A4 2B 1B            [ 1]  652 	jrmi 4$
      0012A6 A1 06            [ 1]  653 	cp a,#TK_ARRAY
      0012A8 2A 24            [ 1]  654 	jrpl 7$  ; no attribute for these
      0012AA                        655 1$: ; 
      0012AA A1 03            [ 1]  656 	cp a,#TK_CHAR
      0012AC 26 06            [ 1]  657 	jrne 2$
      0012AE 41               [ 1]  658 	exg a,xl
      0012AF 90 F6            [ 1]  659 	ld a,(y)
      0012B1 41               [ 1]  660 	exg a,xl  
      0012B2 20 18            [ 2]  661 	jra 6$ 
      0012B4 A1 02            [ 1]  662 2$:	cp a,#TK_QSTR 
      0012B6 26 16            [ 1]  663 	jrne 7$
      0012B8 93               [ 1]  664 	ldw x,y 
                                    665 ; move pointer after string 
      0012B9 90 7D            [ 1]  666 3$:	tnz (y)
      0012BB 27 0F            [ 1]  667 	jreq 6$
      0012BD 90 5C            [ 1]  668 	incw y 
      0012BF 20 F8            [ 2]  669 	jra 3$
      0012C1                        670 4$: 
      0012C1 93               [ 1]  671 	ldw x,y 
      0012C2 FE               [ 2]  672 	ldw x,(x)
      0012C3 A1 84            [ 1]  673 	cp a,#TK_INTGR
      0012C5 2A 03            [ 1]  674 	jrpl 5$
      0012C7 DE 2A C3         [ 2]  675 	ldw x,(code_addr,x) 
      0012CA 90 5C            [ 1]  676 5$:	incw y 
      0012CC 90 5C            [ 1]  677 6$:	incw y 
      0012CE 72 B2 00 04      [ 2]  678 7$:	subw y,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      0012D2 90 CF 00 00      [ 2]  679 	ldw in.w,y 
      0012D6                        680 9$: 
      0012D6 81               [ 4]  681 	ret	
                                    682 
                                    683 ;-----------------------------------
                                    684 ; print a 16 bit integer 
                                    685 ; using variable 'base' as conversion
                                    686 ; format.
                                    687 ; input:
                                    688 ;   X       integer to print 
                                    689 ;   'base'    conversion base 
                                    690 ; output:
                                    691 ;   none 
                                    692 ;-----------------------------------
      0012D7                        693 print_int:
      0012D7 72 5F 00 0C      [ 1]  694 	clr acc24 
      0012DB CF 00 0D         [ 2]  695 	ldw acc16,x 
      0012DE 72 0F 00 0D 04   [ 2]  696 	btjf acc16,#7,prti24
      0012E3 72 53 00 0C      [ 1]  697 	cpl acc24 
                                    698 	
                                    699 ;------------------------------------
                                    700 ; print integer in acc24 
                                    701 ; input:
                                    702 ;	acc24 		integer to print 
                                    703 ;	'base' 		numerical base for conversion 
                                    704 ;   'tab_width' field width 
                                    705 ;  output:
                                    706 ;    A          string length
                                    707 ;------------------------------------
      0012E7                        708 prti24:
      0012E7 CD 12 F3         [ 4]  709     call itoa  ; conversion entier en  .asciz
      0012EA CD 0B 15         [ 4]  710 	call right_align  
      0012ED 88               [ 1]  711 	push a 
      0012EE CD 03 4E         [ 4]  712 	call puts
      0012F1 84               [ 1]  713 	pop a 
      0012F2 81               [ 4]  714     ret	
                                    715 
                                    716 ;------------------------------------
                                    717 ; convert integer in acc24 to string
                                    718 ; input:
                                    719 ;   'base'	conversion base 
                                    720 ;	acc24	integer to convert
                                    721 ; output:
                                    722 ;   X  		pointer to first char of string
                                    723 ;   A       string length
                                    724 ;------------------------------------
                           000001   725 	SIGN=1  ; integer sign 
                           000002   726 	LEN=2 
                           000003   727 	PSTR=3
                           000004   728 	VSIZE=4 ;locals size
      0012F3                        729 itoa::
      0012F3                        730 	_vars VSIZE
      0012F3 52 04            [ 2]    1     sub sp,#VSIZE 
      0012F5 0F 02            [ 1]  731 	clr (LEN,sp) ; string length  
      0012F7 0F 01            [ 1]  732 	clr (SIGN,sp)    ; sign
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0012F9 C6 00 0A         [ 1]  733 	ld a,base 
      0012FC A1 0A            [ 1]  734 	cp a,#10
      0012FE 26 0A            [ 1]  735 	jrne 1$
                                    736 	; base 10 string display with negative sign if bit 23==1
      001300 72 0F 00 0C 05   [ 2]  737 	btjf acc24,#7,1$
      001305 03 01            [ 1]  738 	cpl (SIGN,sp)
      001307 CD 13 C0         [ 4]  739 	call neg_acc24
      00130A                        740 1$:
                                    741 ; initialize string pointer 
      00130A AE 16 90         [ 2]  742 	ldw x,#tib 
      00130D 1C 00 50         [ 2]  743 	addw x,#TIB_SIZE
      001310 5A               [ 2]  744 	decw x 
      001311 7F               [ 1]  745 	clr (x)
      001312 5A               [ 2]  746 	decw x 
      001313 A6 20            [ 1]  747 	ld a,#32
      001315 F7               [ 1]  748 	ld (x),a
      001316 0C 02            [ 1]  749 	inc (LEN,sp)
      001318                        750 itoa_loop:
      001318 C6 00 0A         [ 1]  751     ld a,base
      00131B 1F 03            [ 2]  752 	ldw (PSTR,sp),x 
      00131D CD 13 5E         [ 4]  753     call divu24_8 ; acc24/A 
      001320 1E 03            [ 2]  754 	ldw x,(PSTR,sp)
      001322 AB 30            [ 1]  755     add a,#'0  ; remainder of division
      001324 A1 3A            [ 1]  756     cp a,#'9+1
      001326 2B 02            [ 1]  757     jrmi 2$
      001328 AB 07            [ 1]  758     add a,#7 
      00132A                        759 2$:	
      00132A 5A               [ 2]  760 	decw x
      00132B F7               [ 1]  761     ld (x),a
      00132C 0C 02            [ 1]  762 	inc (LEN,sp)
                                    763 	; if acc24==0 conversion done
      00132E C6 00 0C         [ 1]  764 	ld a,acc24
      001331 CA 00 0D         [ 1]  765 	or a,acc16
      001334 CA 00 0E         [ 1]  766 	or a,acc8
      001337 26 DF            [ 1]  767     jrne itoa_loop
                                    768 	;conversion done, next add '$' or '-' as required
      001339 C6 00 0A         [ 1]  769 	ld a,base 
      00133C A1 10            [ 1]  770 	cp a,#16
      00133E 27 08            [ 1]  771 	jreq 8$
      001340 7B 01            [ 1]  772 	ld a,(SIGN,sp)
      001342 27 15            [ 1]  773     jreq 10$
      001344 A6 2D            [ 1]  774     ld a,#'-
      001346 20 0D            [ 2]  775 	jra 9$ 
                                    776 ; don't print more than 4 digits
                                    777 ; in hexadecimal to avoid '-' sign 
                                    778 ; extend display 	
      001348 7B 02            [ 1]  779 8$: ld a,(LEN,sp) 
      00134A A1 06            [ 1]  780 	cp a,#6 
      00134C 2B 05            [ 1]  781 	jrmi 81$
      00134E 5C               [ 1]  782 	incw x
      00134F 0A 02            [ 1]  783 	dec (LEN,sp)
      001351 20 F5            [ 2]  784 	jra 8$
      001353                        785 81$:	
      001353 A6 24            [ 1]  786 	ld a,#'$ 
      001355 5A               [ 2]  787 9$: decw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001356 F7               [ 1]  788     ld (x),a
      001357 0C 02            [ 1]  789 	inc (LEN,sp)
      001359                        790 10$:
      001359 7B 02            [ 1]  791 	ld a,(LEN,sp)
      00135B                        792 	_drop VSIZE
      00135B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00135D 81               [ 4]  793 	ret
                                    794 
                                    795 ;-------------------------------------
                                    796 ; divide uint24_t by uint8_t
                                    797 ; used to convert uint24_t to string
                                    798 ; input:
                                    799 ;	acc24	dividend
                                    800 ;   A 		divisor
                                    801 ; output:
                                    802 ;   acc24	quotient
                                    803 ;   A		remainder
                                    804 ;------------------------------------- 
                                    805 ; offset  on sp of arguments and locals
                           000001   806 	U8   = 1   ; divisor on stack
                           000001   807 	VSIZE =1
      00135E                        808 divu24_8:
      00135E 89               [ 2]  809 	pushw x ; save x
      00135F 88               [ 1]  810 	push a 
                                    811 	; ld dividend UU:MM bytes in X
      001360 C6 00 0C         [ 1]  812 	ld a, acc24
      001363 95               [ 1]  813 	ld xh,a
      001364 C6 00 0D         [ 1]  814 	ld a,acc24+1
      001367 97               [ 1]  815 	ld xl,a
      001368 7B 01            [ 1]  816 	ld a,(U8,SP) ; divisor
      00136A 62               [ 2]  817 	div x,a ; UU:MM/U8
      00136B 88               [ 1]  818 	push a  ;save remainder
      00136C 9E               [ 1]  819 	ld a,xh
      00136D C7 00 0C         [ 1]  820 	ld acc24,a
      001370 9F               [ 1]  821 	ld a,xl
      001371 C7 00 0D         [ 1]  822 	ld acc24+1,a
      001374 84               [ 1]  823 	pop a
      001375 95               [ 1]  824 	ld xh,a
      001376 C6 00 0E         [ 1]  825 	ld a,acc24+2
      001379 97               [ 1]  826 	ld xl,a
      00137A 7B 01            [ 1]  827 	ld a,(U8,sp) ; divisor
      00137C 62               [ 2]  828 	div x,a  ; R:LL/U8
      00137D 6B 01            [ 1]  829 	ld (U8,sp),a ; save remainder
      00137F 9F               [ 1]  830 	ld a,xl
      001380 C7 00 0E         [ 1]  831 	ld acc24+2,a
      001383 84               [ 1]  832 	pop a
      001384 85               [ 2]  833 	popw x
      001385 81               [ 4]  834 	ret
                                    835 
                                    836 ;--------------------------------------
                                    837 ; unsigned multiply uint24_t by uint8_t
                                    838 ; use to convert numerical string to uint24_t
                                    839 ; input:
                                    840 ;	acc24	uint24_t 
                                    841 ;   A		uint8_t
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    842 ; output:
                                    843 ;   acc24   A*acc24
                                    844 ;-------------------------------------
                                    845 ; local variables offset  on sp
                           000003   846 	U8   = 3   ; A pushed on stack
                           000002   847 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   848 	OVFH = 1  ; multiplication overflow high byte
                           000003   849 	VSIZE = 3
      001386                        850 mulu24_8:
      001386 89               [ 2]  851 	pushw x    ; save X
                                    852 	; local variables
      001387 88               [ 1]  853 	push a     ; U8
      001388 5F               [ 1]  854 	clrw x     ; initialize overflow to 0
      001389 89               [ 2]  855 	pushw x    ; multiplication overflow
                                    856 ; multiply low byte.
      00138A C6 00 0E         [ 1]  857 	ld a,acc24+2
      00138D 97               [ 1]  858 	ld xl,a
      00138E 7B 03            [ 1]  859 	ld a,(U8,sp)
      001390 42               [ 4]  860 	mul x,a
      001391 9F               [ 1]  861 	ld a,xl
      001392 C7 00 0E         [ 1]  862 	ld acc24+2,a
      001395 9E               [ 1]  863 	ld a, xh
      001396 6B 02            [ 1]  864 	ld (OVFL,sp),a
                                    865 ; multipy middle byte
      001398 C6 00 0D         [ 1]  866 	ld a,acc24+1
      00139B 97               [ 1]  867 	ld xl,a
      00139C 7B 03            [ 1]  868 	ld a, (U8,sp)
      00139E 42               [ 4]  869 	mul x,a
                                    870 ; add overflow to this partial product
      00139F 72 FB 01         [ 2]  871 	addw x,(OVFH,sp)
      0013A2 9F               [ 1]  872 	ld a,xl
      0013A3 C7 00 0D         [ 1]  873 	ld acc24+1,a
      0013A6 4F               [ 1]  874 	clr a
      0013A7 A9 00            [ 1]  875 	adc a,#0
      0013A9 6B 01            [ 1]  876 	ld (OVFH,sp),a
      0013AB 9E               [ 1]  877 	ld a,xh
      0013AC 6B 02            [ 1]  878 	ld (OVFL,sp),a
                                    879 ; multiply most signficant byte	
      0013AE C6 00 0C         [ 1]  880 	ld a, acc24
      0013B1 97               [ 1]  881 	ld xl, a
      0013B2 7B 03            [ 1]  882 	ld a, (U8,sp)
      0013B4 42               [ 4]  883 	mul x,a
      0013B5 72 FB 01         [ 2]  884 	addw x, (OVFH,sp)
      0013B8 9F               [ 1]  885 	ld a, xl
      0013B9 C7 00 0C         [ 1]  886 	ld acc24,a
      0013BC 5B 03            [ 2]  887     addw sp,#VSIZE
      0013BE 85               [ 2]  888 	popw x
      0013BF 81               [ 4]  889 	ret
                                    890 
                                    891 ;------------------------------------
                                    892 ;  two's complement acc24
                                    893 ;  input:
                                    894 ;		acc24 variable
                                    895 ;  output:
                                    896 ;		acc24 variable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    897 ;-------------------------------------
      0013C0                        898 neg_acc24:
      0013C0 72 53 00 0E      [ 1]  899 	cpl acc24+2
      0013C4 72 53 00 0D      [ 1]  900 	cpl acc24+1
      0013C8 72 53 00 0C      [ 1]  901 	cpl acc24
      0013CC A6 01            [ 1]  902 	ld a,#1
      0013CE CB 00 0E         [ 1]  903 	add a,acc24+2
      0013D1 C7 00 0E         [ 1]  904 	ld acc24+2,a
      0013D4 4F               [ 1]  905 	clr a
      0013D5 C9 00 0D         [ 1]  906 	adc a,acc24+1
      0013D8 C7 00 0D         [ 1]  907 	ld acc24+1,a 
      0013DB 4F               [ 1]  908 	clr a 
      0013DC C9 00 0C         [ 1]  909 	adc a,acc24 
      0013DF C7 00 0C         [ 1]  910 	ld acc24,a 
      0013E2 81               [ 4]  911 	ret
                                    912 
                                    913 
                                    914 
                                    915 
                                    916 ;------------------------------------
                                    917 ; convert alpha to uppercase
                                    918 ; input:
                                    919 ;    a  character to convert
                                    920 ; output:
                                    921 ;    a  uppercase character
                                    922 ;------------------------------------
      0013E3                        923 to_upper::
      0013E3 A1 61            [ 1]  924 	cp a,#'a
      0013E5 2A 01            [ 1]  925 	jrpl 1$
      0013E7 81               [ 4]  926 0$:	ret
      0013E8 A1 7A            [ 1]  927 1$: cp a,#'z	
      0013EA 22 FB            [ 1]  928 	jrugt 0$
      0013EC A0 20            [ 1]  929 	sub a,#32
      0013EE 81               [ 4]  930 	ret
                                    931 	
                                    932 ;------------------------------------
                                    933 ; convert pad content in integer
                                    934 ; input:
                                    935 ;    x		.asciz to convert
                                    936 ; output:
                                    937 ;    acc24      int24_t
                                    938 ;------------------------------------
                                    939 	; local variables
                           000001   940 	SIGN=1 ; 1 byte, 
                           000002   941 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   942 	TEMP=3 ; 1 byte, temporary storage
                           000003   943 	VSIZE=3 ; 3 bytes reserved for local storage
      0013EF                        944 atoi24::
      0013EF 89               [ 2]  945 	pushw x 
      0013F0                        946 	_vars VSIZE
      0013F0 52 03            [ 2]    1     sub sp,#VSIZE 
                                    947 	; acc24=0 
      0013F2 72 5F 00 0C      [ 1]  948 	clr acc24    
      0013F6 72 5F 00 0D      [ 1]  949 	clr acc16
      0013FA 72 5F 00 0E      [ 1]  950 	clr acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0013FE 0F 01            [ 1]  951 	clr (SIGN,sp)
      001400 A6 0A            [ 1]  952 	ld a,#10
      001402 6B 02            [ 1]  953 	ld (BASE,sp),a ; default base decimal
      001404 F6               [ 1]  954 	ld a,(x)
      001405 27 47            [ 1]  955 	jreq 9$  ; completed if 0
      001407 A1 2D            [ 1]  956 	cp a,#'-
      001409 26 04            [ 1]  957 	jrne 1$
      00140B 03 01            [ 1]  958 	cpl (SIGN,sp)
      00140D 20 08            [ 2]  959 	jra 2$
      00140F A1 24            [ 1]  960 1$: cp a,#'$
      001411 26 06            [ 1]  961 	jrne 3$
      001413 A6 10            [ 1]  962 	ld a,#16
      001415 6B 02            [ 1]  963 	ld (BASE,sp),a
      001417 5C               [ 1]  964 2$:	incw x
      001418 F6               [ 1]  965 	ld a,(x)
      001419                        966 3$:	
      001419 A1 61            [ 1]  967 	cp a,#'a
      00141B 2B 02            [ 1]  968 	jrmi 4$
      00141D A0 20            [ 1]  969 	sub a,#32
      00141F A1 30            [ 1]  970 4$:	cp a,#'0
      001421 2B 2B            [ 1]  971 	jrmi 9$
      001423 A0 30            [ 1]  972 	sub a,#'0
      001425 A1 0A            [ 1]  973 	cp a,#10
      001427 2B 06            [ 1]  974 	jrmi 5$
      001429 A0 07            [ 1]  975 	sub a,#7
      00142B 11 02            [ 1]  976 	cp a,(BASE,sp)
      00142D 2A 1F            [ 1]  977 	jrpl 9$
      00142F 6B 03            [ 1]  978 5$:	ld (TEMP,sp),a
      001431 7B 02            [ 1]  979 	ld a,(BASE,sp)
      001433 CD 13 86         [ 4]  980 	call mulu24_8
      001436 7B 03            [ 1]  981 	ld a,(TEMP,sp)
      001438 CB 00 0E         [ 1]  982 	add a,acc24+2
      00143B C7 00 0E         [ 1]  983 	ld acc24+2,a
      00143E 4F               [ 1]  984 	clr a
      00143F C9 00 0D         [ 1]  985 	adc a,acc24+1
      001442 C7 00 0D         [ 1]  986 	ld acc24+1,a
      001445 4F               [ 1]  987 	clr a
      001446 C9 00 0C         [ 1]  988 	adc a,acc24
      001449 C7 00 0C         [ 1]  989 	ld acc24,a
      00144C 20 C9            [ 2]  990 	jra 2$
      00144E 0D 01            [ 1]  991 9$:	tnz (SIGN,sp)
      001450 27 03            [ 1]  992     jreq atoi_exit
      001452 CD 13 C0         [ 4]  993     call neg_acc24
      001455                        994 atoi_exit: 
      001455                        995 	_drop VSIZE
      001455 5B 03            [ 2]    1     addw sp,#VSIZE 
      001457 85               [ 2]  996 	popw x ; restore x
      001458 81               [ 4]  997 	ret
                                    998 
                                    999 
                                   1000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1001 ;;   TINY BASIC  operators,
                                   1002 ;;   commands and functions 
                                   1003 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   1005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1006 ;;  Arithmetic operators
                                   1007 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1008 
                                   1009 ;debug support
                           000001  1010 DEBUG_PRT=1
                           000001  1011 .if DEBUG_PRT 
                           000001  1012 	REGA=1
                           000002  1013 	SAVEB=2
                           000003  1014 	REGX=3
                           000005  1015 	REGY=5
                           000007  1016 	ACC24=7
                           000009  1017 	VSIZE=9 
      001459                       1018 printxy:
      001459                       1019 	_vars VSIZE 
      001459 52 09            [ 2]    1     sub sp,#VSIZE 
      00145B 6B 01            [ 1] 1020 	ld (REGA,sp),a 
      00145D C6 00 0A         [ 1] 1021 	ld a,base 
      001460 6B 02            [ 1] 1022 	ld (SAVEB,sp),a
      001462 1F 03            [ 2] 1023 	ldw (REGX,sp),x
      001464 17 05            [ 2] 1024 	ldw (REGY,sp),y
      001466 CE 00 0C         [ 2] 1025 	ldw x,acc24 
      001469 C6 00 0E         [ 1] 1026 	ld a,acc8 
      00146C 1F 07            [ 2] 1027 	ldw (ACC24,sp),x 
      00146E 6B 09            [ 1] 1028 	ld (ACC24+2,sp),a 
      001470 35 10 00 0A      [ 1] 1029 	mov base,#16 
      001474 5F               [ 1] 1030 	clrw x 
      001475 7B 01            [ 1] 1031 	ld a,(REGA,sp)
      001477 97               [ 1] 1032 	ld xl,a 
      001478 CD 12 D7         [ 4] 1033 	call print_int
      00147B A6 20            [ 1] 1034 	ld a,#SPACE 
      00147D CD 02 F1         [ 4] 1035 	call putc  
      001480 1E 03            [ 2] 1036 	ldw x,(REGX,sp)
      001482 CD 12 D7         [ 4] 1037 	call print_int 
      001485 A6 20            [ 1] 1038 	ld a,#SPACE 
      001487 CD 02 F1         [ 4] 1039 	call putc  
      00148A 1E 05            [ 2] 1040 	ldw x,(REGY,sp)
      00148C CD 12 D7         [ 4] 1041 	call print_int 
      00148F A6 0D            [ 1] 1042 	ld a,#CR 
      001491 CD 02 F1         [ 4] 1043 	call putc 
      001494 7B 09            [ 1] 1044 	ld a,(ACC24+2,sp)
      001496 1E 07            [ 2] 1045 	ldw x,(ACC24,sp)
      001498 CF 00 0C         [ 2] 1046 	ldw acc24,x 
      00149B C7 00 0E         [ 1] 1047 	ld acc8,a
      00149E 7B 02            [ 1] 1048 	ld a,(SAVEB,sp)
      0014A0 C7 00 0A         [ 1] 1049 	ld base,a 
      0014A3 7B 01            [ 1] 1050 	ld a,(REGA,sp)
      0014A5 1E 03            [ 2] 1051 	ldw x,(REGX,sp)
      0014A7 16 05            [ 2] 1052 	ldw y,(REGY,sp)
      0014A9                       1053 	_drop VSIZE 
      0014A9 5B 09            [ 2]    1     addw sp,#VSIZE 
      0014AB 81               [ 4] 1054 	ret 
                                   1055 .endif 
                                   1056 
                                   1057 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                   1058 ;--------------------------------------
                                   1059 ;  multiply 2 uint16_t return uint32_t
                                   1060 ;  input:
                                   1061 ;     x       uint16_t 
                                   1062 ;     y       uint16_t 
                                   1063 ;  output:
                                   1064 ;     x       product bits 15..0
                                   1065 ;     y       product bits 31..16 
                                   1066 ;---------------------------------------
                           000001  1067 		U1=1  ; uint16_t 
                           000003  1068 		DBL=3 ; uint32_t
                           000006  1069 		VSIZE=6
      0014AC                       1070 umstar:
      0014AC                       1071 	_vars VSIZE 
      0014AC 52 06            [ 2]    1     sub sp,#VSIZE 
      0014AE 1F 01            [ 2] 1072 	ldw (U1,sp),x 
                                   1073 ;initialize bits 31..16 of 
                                   1074 ;product to zero 
      0014B0 0F 03            [ 1] 1075 	clr (DBL,sp)
      0014B2 0F 04            [ 1] 1076 	clr (DBL+1,sp)
                                   1077 ; produc U1L*U2L 
      0014B4 90 9F            [ 1] 1078 	ld a,yl 
      0014B6 42               [ 4] 1079 	mul x,a 
      0014B7 1F 05            [ 2] 1080 	ldw (DBL+2,sp),x
                                   1081 ; product U1H*U2L 
      0014B9 7B 01            [ 1] 1082 	ld a,(U1,sp) ; xh 
      0014BB 93               [ 1] 1083 	ldw x,y
      0014BC 42               [ 4] 1084 	mul x,a 
      0014BD 4F               [ 1] 1085 	clr a 
      0014BE 72 FB 04         [ 2] 1086 	addw x,(DBL+1,sp) 
      0014C1 4F               [ 1] 1087 	clr a 
      0014C2 19 03            [ 1] 1088 	adc a,(DBL,sp) 
      0014C4 6B 03            [ 1] 1089 	ld (DBL,sp),a ; bits 23..17 
      0014C6 1F 04            [ 2] 1090 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1091 ; product U1L*U2H
      0014C8 90 5E            [ 1] 1092 	swapw y 
      0014CA 93               [ 1] 1093 	ldw x,y
      0014CB 7B 02            [ 1] 1094 	ld a,(U1+1,sp)
      0014CD 42               [ 4] 1095 	mul x,a
      0014CE 72 FB 04         [ 2] 1096 	addw x,(DBL+1,sp)
      0014D1 4F               [ 1] 1097 	clr a 
      0014D2 19 03            [ 1] 1098 	adc a,(DBL,sp)
      0014D4 6B 03            [ 1] 1099 	ld (DBL,sp),a 
      0014D6 1F 04            [ 2] 1100 	ldw (DBL+1,sp),x 
                                   1101 ; product U1H*U2H 	
      0014D8 7B 01            [ 1] 1102 	ld a,(U1,sp)
      0014DA 93               [ 1] 1103 	ldw x,y  
      0014DB 42               [ 4] 1104 	mul x,a 
      0014DC 72 FB 03         [ 2] 1105 	addw x,(DBL,sp)
      0014DF 90 93            [ 1] 1106 	ldw y,x 
      0014E1 1E 05            [ 2] 1107 	ldw x,(DBL+2,sp)
      0014E3                       1108 	_drop VSIZE 
      0014E3 5B 06            [ 2]    1     addw sp,#VSIZE 
      0014E5 81               [ 4] 1109 	ret
                                   1110 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   1111 
                                   1112 ;-------------------------------------
                                   1113 ; multiply 2 integers
                                   1114 ; input:
                                   1115 ;  	x       n1 
                                   1116 ;   y 		n2 
                                   1117 ; output:
                                   1118 ;	X        N1*N2 bits 15..0
                                   1119 ;   Y        N1*N2 bits 31..16 
                                   1120 ;-------------------------------------
                           000001  1121 	SIGN=1
                           000001  1122 	VSIZE=1
      0014E6                       1123 multiply:
      0014E6                       1124 	_vars VSIZE 
      0014E6 52 01            [ 2]    1     sub sp,#VSIZE 
      0014E8 0F 01            [ 1] 1125 	clr (SIGN,sp)
      0014EA 9E               [ 1] 1126 	ld a,xh 
      0014EB A4 80            [ 1] 1127 	and a,#0x80
      0014ED 2A 03            [ 1] 1128 	jrpl 1$
      0014EF 03 01            [ 1] 1129 	cpl (SIGN,sp)
      0014F1 50               [ 2] 1130 	negw x 
      0014F2                       1131 1$:	
      0014F2 90 9E            [ 1] 1132 	ld a,yh
      0014F4 A4 80            [ 1] 1133 	and a,#0x80  
      0014F6 2A 04            [ 1] 1134 	jrpl 2$ 
      0014F8 03 01            [ 1] 1135 	cpl (SIGN,sp)
      0014FA 90 50            [ 2] 1136 	negw y 
      0014FC                       1137 2$:	
      0014FC CD 14 AC         [ 4] 1138 	call umstar
      0014FF 7B 01            [ 1] 1139 	ld a,(SIGN,sp)
      001501 27 03            [ 1] 1140 	jreq 3$
      001503 CD 15 33         [ 4] 1141 	call dneg 
      001506                       1142 3$:	
      001506                       1143 	_drop VSIZE 
      001506 5B 01            [ 2]    1     addw sp,#VSIZE 
      001508 81               [ 4] 1144 	ret
                                   1145 
                                   1146 ;--------------------------------------
                                   1147 ; divide uint32_t/uint16_t
                                   1148 ; return:  quotient and remainder 
                                   1149 ; quotient expected to be uint16_t 
                                   1150 ; input:
                                   1151 ;   DBLDIVDND    on stack 
                                   1152 ;   X            divisor 
                                   1153 ; output:
                                   1154 ;   X            quotient 
                                   1155 ;   Y            remainder 
                                   1156 ;---------------------------------------
                           000003  1157 	VSIZE=3
      001509                       1158 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      001509                       1159 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1160 	; local variables 
                           000001  1161 	DIVISOR=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                           000003  1162 	CNTR=3 
      001509                       1163 udiv32_16:
      001509                       1164 	_vars VSIZE 
      001509 52 03            [ 2]    1     sub sp,#VSIZE 
      00150B 1F 01            [ 2] 1165 	ldw (DIVISOR,sp),x	; save divisor 
      00150D 1E 08            [ 2] 1166 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      00150F 16 06            [ 2] 1167 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      001511 90 5D            [ 2] 1168 	tnzw y
      001513 26 06            [ 1] 1169 	jrne long_division 
      001515 16 01            [ 2] 1170 	ldw y,(DIVISOR,sp)
      001517 65               [ 2] 1171 	divw x,y
      001518                       1172 	_drop VSIZE 
      001518 5B 03            [ 2]    1     addw sp,#VSIZE 
      00151A 81               [ 4] 1173 	ret
      00151B                       1174 long_division:
      00151B 51               [ 1] 1175 	exgw x,y ; hi in x, lo in y 
      00151C A6 11            [ 1] 1176 	ld a,#17 
      00151E 6B 03            [ 1] 1177 	ld (CNTR,sp),a
      001520                       1178 1$:
      001520 13 01            [ 2] 1179 	cpw x,(DIVISOR,sp)
      001522 2B 03            [ 1] 1180 	jrmi 2$
      001524 72 F0 01         [ 2] 1181 	subw x,(DIVISOR,sp)
      001527 8C               [ 1] 1182 2$:	ccf 
      001528 90 59            [ 2] 1183 	rlcw y 
      00152A 59               [ 2] 1184 	rlcw x 
      00152B 0A 03            [ 1] 1185 	dec (CNTR,sp)
      00152D 26 F1            [ 1] 1186 	jrne 1$
      00152F 51               [ 1] 1187 	exgw x,y 
      001530                       1188 	_drop VSIZE 
      001530 5B 03            [ 2]    1     addw sp,#VSIZE 
      001532 81               [ 4] 1189 	ret
                                   1190 
                                   1191 ;-----------------------------
                                   1192 ; negate double int.
                                   1193 ; input:
                                   1194 ;   x     bits 15..0
                                   1195 ;   y     bits 31..16
                                   1196 ; output: 
                                   1197 ;   x     bits 15..0
                                   1198 ;   y     bits 31..16
                                   1199 ;-----------------------------
      001533                       1200 dneg:
      001533 53               [ 2] 1201 	cplw x 
      001534 90 53            [ 2] 1202 	cplw y 
      001536 1C 00 01         [ 2] 1203 	addw x,#1 
      001539 24 02            [ 1] 1204 	jrnc 1$
      00153B 90 5C            [ 1] 1205 	incw y 
      00153D 81               [ 4] 1206 1$: ret 
                                   1207 
                                   1208 
                                   1209 ;--------------------------------
                                   1210 ; sign extend single to double
                                   1211 ; input:
                                   1212 ;   x    int16_t
                                   1213 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   1214 ;   x    int32_t bits 15..0
                                   1215 ;   y    int32_t bits 31..16
                                   1216 ;--------------------------------
      00153E                       1217 dbl_sign_extend:
      00153E 90 5F            [ 1] 1218 	clrw y
      001540 9E               [ 1] 1219 	ld a,xh 
      001541 A4 80            [ 1] 1220 	and a,#0x80 
      001543 27 02            [ 1] 1221 	jreq 1$
      001545 90 53            [ 2] 1222 	cplw y
      001547 81               [ 4] 1223 1$: ret 	
                                   1224 
                                   1225 
                                   1226 ;----------------------------------
                                   1227 ;  euclidian divide dbl/n1 
                                   1228 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1229 ; input:
                                   1230 ;    dbl    int32_t on stack 
                                   1231 ;    x 		n1   int16_t  disivor  
                                   1232 ; output:
                                   1233 ;    X      dbl/x  int16_t 
                                   1234 ;    Y      remainder int16_t 
                                   1235 ;----------------------------------
                           000008  1236 	VSIZE=8
      001548                       1237 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      001548                       1238 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      001548                       1239 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1240 	; local variables
                           000001  1241 	DBLHI=1
                           000003  1242 	DBLLO=3 
                           000005  1243 	SDIVSR=5 ; sign divisor
                           000006  1244 	SQUOT=6 ; sign dividend 
                           000007  1245 	DIVISR=7 ; divisor 
      001548                       1246 div32_16:
      001548                       1247 	_vars VSIZE 
      001548 52 08            [ 2]    1     sub sp,#VSIZE 
      00154A 0F 05            [ 1] 1248 	clr (SDIVSR,sp)
      00154C 0F 06            [ 1] 1249 	clr (SQUOT,sp)
                                   1250 ; copy arguments 
      00154E 16 0B            [ 2] 1251 	ldw y,(DIVDNDHI,sp)
      001550 17 01            [ 2] 1252 	ldw (DBLHI,sp),y
      001552 16 0D            [ 2] 1253 	ldw y,(DIVDNDLO,sp)
      001554 17 03            [ 2] 1254 	ldw (DBLLO,sp),y 
                                   1255 ; check for 0 divisor
      001556 5D               [ 2] 1256 	tnzw x 
      001557 26 05            [ 1] 1257     jrne 0$
      001559 A6 04            [ 1] 1258 	ld a,#ERR_DIV0 
      00155B CC 11 93         [ 2] 1259 	jp tb_error 
                                   1260 ; check divisor sign 	
      00155E 9E               [ 1] 1261 0$:	ld a,xh 
      00155F A4 80            [ 1] 1262 	and a,#0x80 
      001561 27 05            [ 1] 1263 	jreq 1$
      001563 03 05            [ 1] 1264 	cpl (SDIVSR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      001565 03 06            [ 1] 1265 	cpl (SQUOT,sp)
      001567 50               [ 2] 1266 	negw x
      001568 1F 07            [ 2] 1267 1$:	ldw (DIVISR,sp),x
                                   1268 ; check dividend sign 	 
      00156A 7B 01            [ 1] 1269  	ld a,(DBLHI,sp) 
      00156C A4 80            [ 1] 1270 	and a,#0x80 
      00156E 27 0D            [ 1] 1271 	jreq 2$ 
      001570 03 06            [ 1] 1272 	cpl (SQUOT,sp)
      001572 1E 03            [ 2] 1273 	ldw x,(DBLLO,sp)
      001574 16 01            [ 2] 1274 	ldw y,(DBLHI,sp)
      001576 CD 15 33         [ 4] 1275 	call dneg 
      001579 1F 03            [ 2] 1276 	ldw (DBLLO,sp),x 
      00157B 17 01            [ 2] 1277 	ldw (DBLHI,sp),y 
      00157D 1E 07            [ 2] 1278 2$:	ldw x,(DIVISR,sp)
      00157F CD 15 09         [ 4] 1279 	call udiv32_16
      001582 90 5D            [ 2] 1280 	tnzw y 
      001584 27 11            [ 1] 1281 	jreq 3$ 
                                   1282 ; x=quotient 
                                   1283 ; y=remainder 
                                   1284 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      001586 7B 06            [ 1] 1285 	ld a,(SQUOT,sp)
      001588 18 05            [ 1] 1286 	xor a,(SDIVSR,sp)
      00158A 27 0B            [ 1] 1287 	jreq 3$
      00158C 5C               [ 1] 1288 	incw x 
      00158D 90 CF 00 0D      [ 2] 1289 	ldw acc16,y 
      001591 16 07            [ 2] 1290 	ldw y,(DIVISR,sp)
      001593 72 B2 00 0D      [ 2] 1291 	subw y,acc16
                                   1292 ; sign quotient
      001597 7B 06            [ 1] 1293 3$:	ld a,(SQUOT,sp)
      001599 27 01            [ 1] 1294 	jreq 4$
      00159B 50               [ 2] 1295 	negw x 
      00159C                       1296 4$:	
      00159C                       1297 	_drop VSIZE 
      00159C 5B 08            [ 2]    1     addw sp,#VSIZE 
      00159E 81               [ 4] 1298 	ret 
                                   1299 
                                   1300 
                                   1301 
                                   1302 ;----------------------------------
                                   1303 ; division x/y 
                                   1304 ; input:
                                   1305 ;    X       dividend
                                   1306 ;    Y       divisor 
                                   1307 ; output:
                                   1308 ;    X       quotient
                                   1309 ;    Y       remainder 
                                   1310 ;-----------------------------------
                           000004  1311 	VSIZE=4 
                                   1312 	; local variables 
                           000001  1313 	DBLHI=1
                           000003  1314 	DBLLO=3
      00159F                       1315 divide: 
      00159F                       1316 	_vars VSIZE 
      00159F 52 04            [ 2]    1     sub sp,#VSIZE 
      0015A1 90 CF 00 0D      [ 2] 1317 	ldw acc16,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0015A5 CD 15 3E         [ 4] 1318 	call dbl_sign_extend
      0015A8 1F 03            [ 2] 1319 	ldw (DBLLO,sp),x 
      0015AA 17 01            [ 2] 1320 	ldw (DBLHI,sp),y 
      0015AC CE 00 0D         [ 2] 1321 	ldw x,acc16 
      0015AF CD 15 48         [ 4] 1322 	call div32_16 
      0015B2                       1323 	_drop VSIZE 
      0015B2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015B4 81               [ 4] 1324 	ret
                                   1325 
                                   1326 
                                   1327 ;----------------------------------
                                   1328 ;  remainder resulting from euclidian 
                                   1329 ;  division of x/y 
                                   1330 ; input:
                                   1331 ;   x   	dividend int16_t 
                                   1332 ;   y 		divisor int16_t
                                   1333 ; output:
                                   1334 ;   X       n1%n2 
                                   1335 ;----------------------------------
      0015B5                       1336 modulo:
      0015B5 CD 15 9F         [ 4] 1337 	call divide
      0015B8 93               [ 1] 1338 	ldw x,y 
      0015B9 81               [ 4] 1339 	ret 
                                   1340 
                                   1341 ;----------------------------------
                                   1342 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1343 ; return expr1*expr2/expr3 
                                   1344 ; product result is int32_t and 
                                   1345 ; divisiont is int32_t/int16_t
                                   1346 ;----------------------------------
                           000004  1347 	DBL_SIZE=4 
      0015BA                       1348 muldiv:
      0015BA CD 16 30         [ 4] 1349 	call func_args 
      0015BD A1 03            [ 1] 1350 	cp a,#3 
      0015BF 27 03            [ 1] 1351 	jreq 1$
      0015C1 CC 11 91         [ 2] 1352 	jp syntax_error
      0015C4                       1353 1$: 
      0015C4 1E 05            [ 2] 1354 	ldw x,(5,sp) ; expr1
      0015C6 16 03            [ 2] 1355 	ldw y,(3,sp) ; expr2
      0015C8 CD 14 E6         [ 4] 1356 	call multiply 
      0015CB 1F 05            [ 2] 1357 	ldw (5,sp),x  ;int32_t 15..0
      0015CD 17 03            [ 2] 1358 	ldw (3,sp),y  ;int32_t 31..16
      0015CF 85               [ 2] 1359 	popw x        ; expr3 
      0015D0 CD 15 48         [ 4] 1360 	call div32_16 ; int32_t/expr3 
      0015D3                       1361 	_drop DBL_SIZE
      0015D3 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      0015D5 81               [ 4] 1362 	ret 
                                   1363 
                                   1364 
                                   1365 ;---------------------------------
                                   1366 ; dictionary search 
                                   1367 ; input:
                                   1368 ;	X 		dictionary entry point, name field  
                                   1369 ;   y		.asciz name to search 
                                   1370 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                   1371 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   1372 ;  X		cmd_index
                                   1373 ;---------------------------------
                           000001  1374 	NLEN=1 ; cmd length 
                           000002  1375 	XSAVE=2
                           000004  1376 	YSAVE=4
                           000005  1377 	VSIZE=5 
      0015D6                       1378 search_dict::
      0015D6                       1379 	_vars VSIZE 
      0015D6 52 05            [ 2]    1     sub sp,#VSIZE 
                                   1380 
      0015D8 17 04            [ 2] 1381 	ldw (YSAVE,sp),y 
      0015DA                       1382 search_next:
      0015DA 1F 02            [ 2] 1383 	ldw (XSAVE,sp),x 
                                   1384 ; get name length in dictionary	
      0015DC F6               [ 1] 1385 	ld a,(x)
      0015DD A4 0F            [ 1] 1386 	and a,#0xf 
      0015DF 6B 01            [ 1] 1387 	ld (NLEN,sp),a  
      0015E1 16 04            [ 2] 1388 	ldw y,(YSAVE,sp) ; name pointer 
      0015E3 5C               [ 1] 1389 	incw x 
      0015E4                       1390 cp_loop:
      0015E4 90 F6            [ 1] 1391 	ld a,(y)
      0015E6 27 1B            [ 1] 1392 	jreq str_match 
      0015E8 0D 01            [ 1] 1393 	tnz (NLEN,sp)
      0015EA 27 0A            [ 1] 1394 	jreq no_match  
      0015EC F1               [ 1] 1395 	cp a,(x)
      0015ED 26 07            [ 1] 1396 	jrne no_match 
      0015EF 90 5C            [ 1] 1397 	incw y 
      0015F1 5C               [ 1] 1398 	incw x
      0015F2 0A 01            [ 1] 1399 	dec (NLEN,sp)
      0015F4 20 EE            [ 2] 1400 	jra cp_loop 
      0015F6                       1401 no_match:
      0015F6 1E 02            [ 2] 1402 	ldw x,(XSAVE,sp) 
      0015F8 1D 00 02         [ 2] 1403 	subw x,#2 ; move X to link field
      0015FB 4B 00            [ 1] 1404 	push #TK_NONE 
      0015FD FE               [ 2] 1405 	ldw x,(x) ; next word link 
      0015FE 84               [ 1] 1406 	pop a ; TK_NONE 
      0015FF 27 1F            [ 1] 1407 	jreq search_exit  ; not found  
                                   1408 ;try next 
      001601 20 D7            [ 2] 1409 	jra search_next
      001603                       1410 str_match:
      001603 1E 02            [ 2] 1411 	ldw x,(XSAVE,sp)
      001605 F6               [ 1] 1412 	ld a,(X)
      001606 6B 01            [ 1] 1413 	ld (NLEN,sp),a ; needed to test keyword type  
      001608 A4 0F            [ 1] 1414 	and a,#0xf 
                                   1415 ; move x to procedure address field 	
      00160A 4C               [ 1] 1416 	inc a 
      00160B C7 00 0E         [ 1] 1417 	ld acc8,a 
      00160E 72 5F 00 0D      [ 1] 1418 	clr acc16 
      001612 72 BB 00 0D      [ 2] 1419 	addw x,acc16 
      001616 FE               [ 2] 1420 	ldw x,(x) ; routine index  
                                   1421 ;determine keyword type bits 7:6 
      001617 7B 01            [ 1] 1422 	ld a,(NLEN,sp)
      001619 4E               [ 1] 1423 	swap a 
      00161A A4 0C            [ 1] 1424 	and a,#0xc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00161C 44               [ 1] 1425 	srl a
      00161D 44               [ 1] 1426 	srl a 
      00161E AB 80            [ 1] 1427 	add a,#128
      001620                       1428 search_exit: 
      001620                       1429 	_drop VSIZE 	 
      001620 5B 05            [ 2]    1     addw sp,#VSIZE 
      001622 81               [ 4] 1430 	ret 
                                   1431 
                                   1432 ;---------------------
                                   1433 ; check if next token
                                   1434 ;  is of expected type 
                                   1435 ; input:
                                   1436 ;   A 		 expected token attribute
                                   1437 ;  ouput:
                                   1438 ;   none     if fail call syntax_error 
                                   1439 ;--------------------
      001623                       1440 expect:
      001623 88               [ 1] 1441 	push a 
      001624 CD 12 89         [ 4] 1442 	call next_token 
      001627 11 01            [ 1] 1443 	cp a,(1,sp)
      001629 27 03            [ 1] 1444 	jreq 1$
      00162B CC 11 91         [ 2] 1445 	jp syntax_error
      00162E 84               [ 1] 1446 1$: pop a 
      00162F 81               [ 4] 1447 	ret 
                                   1448 
                                   1449 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1450 ; parse arguments list 
                                   1451 ; between ()
                                   1452 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001630                       1453 func_args:
      001630 A6 07            [ 1] 1454 	ld a,#TK_LPAREN 
      001632 CD 16 23         [ 4] 1455 	call expect 
                                   1456 ; expected to continue in arg_list 
                                   1457 ; caller must check for TK_RPAREN 
                                   1458 
                                   1459 ;-------------------------------
                                   1460 ; parse embedded BASIC routines 
                                   1461 ; arguments list.
                                   1462 ; arg_list::=  rel[','rel]*
                                   1463 ; all arguments are of integer type
                                   1464 ; and pushed on stack 
                                   1465 ; input:
                                   1466 ;   none
                                   1467 ; output:
                                   1468 ;   stack{n}   arguments pushed on stack
                                   1469 ;   A 	number of arguments pushed on stack  
                                   1470 ;--------------------------------
      001635                       1471 arg_list:
      001635 4B 00            [ 1] 1472 	push #0  
      001637 CD 17 7D         [ 4] 1473 1$: call relation
      00163A A1 00            [ 1] 1474 	cp a,#TK_NONE 
      00163C 27 20            [ 1] 1475 	jreq 5$
      00163E A1 84            [ 1] 1476 	cp a,#TK_INTGR
      001640 26 13            [ 1] 1477 	jrne 4$
      001642                       1478 3$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                   1479 ; swap return address with argument
      001642 84               [ 1] 1480 	pop a ; arg_count
      001643 90 85            [ 2] 1481 	popw y ; return address 
      001645 89               [ 2] 1482 	pushw x ; new argument 
      001646 90 89            [ 2] 1483 	pushw y 
      001648 4C               [ 1] 1484     inc a
      001649 88               [ 1] 1485 	push a 
      00164A CD 12 89         [ 4] 1486 	call next_token 
      00164D A1 09            [ 1] 1487 	cp a,#TK_COMMA 
      00164F 27 E6            [ 1] 1488 	jreq 1$ 
      001651 A1 00            [ 1] 1489 	cp a,#TK_NONE 
      001653 27 09            [ 1] 1490 	jreq 5$ 
      001655 A1 08            [ 1] 1491 4$:	cp a,#TK_RPAREN 
      001657 27 05            [ 1] 1492 	jreq 5$
      001659                       1493 	_unget_token 
      001659 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00165E 84               [ 1] 1494 5$:	pop a  
      00165F 81               [ 4] 1495 	ret 
                                   1496 
                                   1497 ;--------------------------------
                                   1498 ;   BASIC commnands 
                                   1499 ;--------------------------------
                                   1500 
                                   1501 ;--------------------------------
                                   1502 ;  arithmetic and relational 
                                   1503 ;  routines
                                   1504 ;  operators precedence
                                   1505 ;  highest to lowest
                                   1506 ;  operators on same row have 
                                   1507 ;  same precedence and are executed
                                   1508 ;  from left to right.
                                   1509 ;	'*','/','%'
                                   1510 ;   '-','+'
                                   1511 ;   '=','>','<','>=','<=','<>','><'
                                   1512 ;   '<>' and '><' are equivalent for not equal.
                                   1513 ;--------------------------------
                                   1514 
                                   1515 ;---------------------
                                   1516 ; return array element
                                   1517 ; address from @(expr)
                                   1518 ; input:
                                   1519 ;   A 		TK_ARRAY
                                   1520 ; output:
                                   1521 ;   A 		TK_INTGR
                                   1522 ;	X 		element address 
                                   1523 ;----------------------
      001660                       1524 get_array_element:
      001660 CD 16 30         [ 4] 1525 	call func_args 
      001663 A1 01            [ 1] 1526 	cp a,#1
      001665 27 03            [ 1] 1527 	jreq 1$
      001667 CC 11 91         [ 2] 1528 	jp syntax_error
      00166A 85               [ 2] 1529 1$: popw x 
                                   1530 	; check for bounds 
      00166B C3 00 1F         [ 2] 1531 	cpw x,array_size 
      00166E 23 05            [ 2] 1532 	jrule 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   1533 ; bounds {1..array_size}	
      001670 A6 0A            [ 1] 1534 2$: ld a,#ERR_BAD_VALUE 
      001672 CC 11 93         [ 2] 1535 	jp tb_error 
      001675 5D               [ 2] 1536 3$: tnzw  x
      001676 27 F8            [ 1] 1537 	jreq 2$ 
      001678 58               [ 2] 1538 	sllw x 
      001679 89               [ 2] 1539 	pushw x 
      00167A AE 16 90         [ 2] 1540 	ldw x,#tib
      00167D 72 F0 01         [ 2] 1541 	subw x,(1,sp)
      001680                       1542 	_drop 2   
      001680 5B 02            [ 2]    1     addw sp,#2 
      001682 A6 84            [ 1] 1543 	ld a,#TK_INTGR
      001684 81               [ 4] 1544 	ret 
                                   1545 
                                   1546 
                                   1547 ;***********************************
                                   1548 ;   expression parse,execute 
                                   1549 ;***********************************
                                   1550 ;-----------------------------------
                                   1551 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1552 ;			 integer | function |
                                   1553 ;			 '('relation')' 
                                   1554 ; output:
                                   1555 ;   A    token attribute 
                                   1556 ;   X 	 integer
                                   1557 ; ---------------------------------
                           000001  1558 	NEG=1
                           000001  1559 	VSIZE=1
      001685                       1560 factor:
      001685                       1561 	_vars VSIZE 
      001685 52 01            [ 2]    1     sub sp,#VSIZE 
      001687 CD 12 89         [ 4] 1562 	call next_token
      00168A A1 02            [ 1] 1563 	cp a,#CMD_END  
      00168C 25 3D            [ 1] 1564 	jrult 16$
      00168E 6B 01            [ 1] 1565 1$:	ld (NEG,sp),a 
      001690 A4 30            [ 1] 1566 	and a,#TK_GRP_MASK
      001692 A1 10            [ 1] 1567 	cp a,#TK_GRP_ADD 
      001694 27 04            [ 1] 1568 	jreq 2$
      001696 7B 01            [ 1] 1569 	ld a,(NEG,sp)
      001698 20 03            [ 2] 1570 	jra 4$  
      00169A                       1571 2$:	
      00169A CD 12 89         [ 4] 1572 	call next_token 
      00169D                       1573 4$:	
      00169D A1 81            [ 1] 1574 	cp a,#TK_IFUNC 
      00169F 26 03            [ 1] 1575 	jrne 5$ 
      0016A1 FD               [ 4] 1576 	call (x) 
      0016A2 20 32            [ 2] 1577 	jra 18$ 
      0016A4                       1578 5$:
      0016A4 A1 84            [ 1] 1579 	cp a,#TK_INTGR
      0016A6 26 02            [ 1] 1580 	jrne 6$
      0016A8 20 2C            [ 2] 1581 	jra 18$
      0016AA                       1582 6$:
      0016AA A1 06            [ 1] 1583 	cp a,#TK_ARRAY
      0016AC 26 06            [ 1] 1584 	jrne 10$
      0016AE CD 16 60         [ 4] 1585 	call get_array_element
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0016B1 FE               [ 2] 1586 	ldw x,(x)
      0016B2 20 22            [ 2] 1587 	jra 18$ 
      0016B4                       1588 10$:
      0016B4 A1 85            [ 1] 1589 	cp a,#TK_VAR 
      0016B6 26 03            [ 1] 1590 	jrne 12$
      0016B8 FE               [ 2] 1591 	ldw x,(x)
      0016B9 20 1B            [ 2] 1592 	jra 18$
      0016BB                       1593 12$:			
      0016BB A1 07            [ 1] 1594 	cp a,#TK_LPAREN
      0016BD 26 0C            [ 1] 1595 	jrne 16$
      0016BF CD 17 7D         [ 4] 1596 	call relation
      0016C2 89               [ 2] 1597 	pushw x 
      0016C3 A6 08            [ 1] 1598 	ld a,#TK_RPAREN 
      0016C5 CD 16 23         [ 4] 1599 	call expect
      0016C8 85               [ 2] 1600 	popw x 
      0016C9 20 0B            [ 2] 1601 	jra 18$	
      0016CB                       1602 16$:
      0016CB 4D               [ 1] 1603 	tnz a 
      0016CC 27 11            [ 1] 1604 	jreq 20$ 
      0016CE                       1605 	_unget_token
      0016CE 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0016D3 4F               [ 1] 1606 	clr a 
      0016D4 20 09            [ 2] 1607 	jra 20$ 
      0016D6                       1608 18$: 
      0016D6 A6 11            [ 1] 1609 	ld a,#TK_MINUS 
      0016D8 11 01            [ 1] 1610 	cp a,(NEG,sp)
      0016DA 26 01            [ 1] 1611 	jrne 19$
      0016DC 50               [ 2] 1612 	negw x
      0016DD                       1613 19$:
      0016DD A6 84            [ 1] 1614 	ld a,#TK_INTGR
      0016DF                       1615 20$:
      0016DF                       1616 	_drop VSIZE
      0016DF 5B 01            [ 2]    1     addw sp,#VSIZE 
      0016E1 81               [ 4] 1617 	ret
                                   1618 
                                   1619 ;-----------------------------------
                                   1620 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1621 ; output:
                                   1622 ;   A    	token attribute 
                                   1623 ;	X		integer
                                   1624 ;-----------------------------------
                           000001  1625 	N1=1   ; int16_t
                           000003  1626 	MULOP=3
                           000003  1627 	VSIZE=3
      0016E2                       1628 term:
      0016E2                       1629 	_vars VSIZE
      0016E2 52 03            [ 2]    1     sub sp,#VSIZE 
      0016E4 CD 16 85         [ 4] 1630 	call factor
      0016E7 4D               [ 1] 1631 	tnz a 
      0016E8 27 47            [ 1] 1632 	jreq term_exit 
      0016EA                       1633 term01:	 ; check for  operator 
      0016EA 1F 01            [ 2] 1634 	ldw (N1,sp),x  ; save first factor 
      0016EC CD 12 89         [ 4] 1635 	call next_token
      0016EF 6B 03            [ 1] 1636 	ld (MULOP,sp),a
      0016F1 A1 02            [ 1] 1637 	cp a,#CMD_END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0016F3 25 2F            [ 1] 1638 	jrult 8$
      0016F5 A4 30            [ 1] 1639 	and a,#TK_GRP_MASK
      0016F7 A1 20            [ 1] 1640 	cp a,#TK_GRP_MULT
      0016F9 27 02            [ 1] 1641 	jreq 1$
      0016FB 20 27            [ 2] 1642 	jra 8$
      0016FD                       1643 1$:	; got *|/|%
      0016FD CD 16 85         [ 4] 1644 	call factor
      001700 A1 84            [ 1] 1645 	cp a,#TK_INTGR
      001702 27 03            [ 1] 1646 	jreq 2$
      001704 CC 11 91         [ 2] 1647 	jp syntax_error
      001707 90 93            [ 1] 1648 2$:	ldw y,x 
      001709 1E 01            [ 2] 1649 	ldw x,(N1,sp)
      00170B 7B 03            [ 1] 1650 	ld a,(MULOP,sp) 
      00170D A1 20            [ 1] 1651 	cp a,#TK_MULT 
      00170F 26 05            [ 1] 1652 	jrne 3$
      001711 CD 14 E6         [ 4] 1653 	call multiply 
      001714 20 D4            [ 2] 1654 	jra term01
      001716 A1 21            [ 1] 1655 3$: cp a,#TK_DIV 
      001718 26 05            [ 1] 1656 	jrne 4$ 
      00171A CD 15 9F         [ 4] 1657 	call divide 
      00171D 20 CB            [ 2] 1658 	jra term01 
      00171F CD 15 B5         [ 4] 1659 4$: call modulo
      001722 20 C6            [ 2] 1660 	jra term01 
      001724 7B 03            [ 1] 1661 8$: ld a,(MULOP,sp)
      001726 27 05            [ 1] 1662 	jreq 9$ 
      001728                       1663 	_unget_token
      001728 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00172D 1E 01            [ 2] 1664 9$: ldw x,(N1,sp)
      00172F A6 84            [ 1] 1665 	ld a,#TK_INTGR 	
      001731                       1666 term_exit:
      001731                       1667 	_drop VSIZE 
      001731 5B 03            [ 2]    1     addw sp,#VSIZE 
      001733 81               [ 4] 1668 	ret 
                                   1669 
                                   1670 ;-------------------------------
                                   1671 ;  expr ::= term [['+'|'-'] term]*
                                   1672 ;  result range {-32768..32767}
                                   1673 ;  output:
                                   1674 ;   A    token attribute 
                                   1675 ;   X	 integer   
                                   1676 ;-------------------------------
                           000001  1677 	N1=1
                           000003  1678 	N2=3 
                           000005  1679 	OP=5 
                           000005  1680 	VSIZE=5 
      001734                       1681 expression:
      001734                       1682 	_vars VSIZE 
      001734 52 05            [ 2]    1     sub sp,#VSIZE 
      001736 CD 16 E2         [ 4] 1683 	call term
      001739 4D               [ 1] 1684 	tnz a 
      00173A 27 3E            [ 1] 1685 	jreq expr_exit 
      00173C 1F 01            [ 2] 1686 1$:	ldw (N1,sp),x 
      00173E CD 12 89         [ 4] 1687 	call next_token
      001741 6B 05            [ 1] 1688 	ld (OP,sp),a 
      001743 A1 02            [ 1] 1689 	cp a,#CMD_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001745 25 26            [ 1] 1690 	jrult 8$ 
      001747 A4 30            [ 1] 1691 	and a,#TK_GRP_MASK
      001749 A1 10            [ 1] 1692 	cp a,#TK_GRP_ADD 
      00174B 27 02            [ 1] 1693 	jreq 2$ 
      00174D 20 1E            [ 2] 1694 	jra 8$
      00174F                       1695 2$: 
      00174F CD 16 E2         [ 4] 1696 	call term
      001752 A1 84            [ 1] 1697 	cp a,#TK_INTGR
      001754 27 03            [ 1] 1698 	jreq 3$
      001756 CC 11 91         [ 2] 1699 	jp syntax_error
      001759 1F 03            [ 2] 1700 3$:	ldw (N2,sp),x 
      00175B 1E 01            [ 2] 1701 	ldw x,(N1,sp)
      00175D 7B 05            [ 1] 1702 	ld a,(OP,sp)
      00175F A1 10            [ 1] 1703 	cp a,#TK_PLUS 
      001761 26 05            [ 1] 1704 	jrne 4$
      001763 72 FB 03         [ 2] 1705 	addw x,(N2,sp)
      001766 20 D4            [ 2] 1706 	jra 1$ 
      001768 72 F0 03         [ 2] 1707 4$:	subw x,(N2,sp)
      00176B 20 CF            [ 2] 1708 	jra 1$
      00176D 7B 05            [ 1] 1709 8$: ld a,(OP,sp)
      00176F 27 05            [ 1] 1710 	jreq 9$ 
      001771                       1711 	_unget_token	
      001771 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001776 1E 01            [ 2] 1712 9$: ldw x,(N1,sp)
      001778 A6 84            [ 1] 1713 	ld a,#TK_INTGR	
      00177A                       1714 expr_exit:
      00177A                       1715 	_drop VSIZE 
      00177A 5B 05            [ 2]    1     addw sp,#VSIZE 
      00177C 81               [ 4] 1716 	ret 
                                   1717 
                                   1718 ;---------------------------------------------
                                   1719 ; rel ::= expr rel_op expr
                                   1720 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1721 ;  relation return  integer , zero is false 
                                   1722 ;  output:
                                   1723 ;    A 		token attribute  
                                   1724 ;	 X		integer 
                                   1725 ;---------------------------------------------
                           000001  1726 	N1=1
                           000003  1727 	RELOP=3
                           000003  1728 	VSIZE=3 
      00177D                       1729 relation: 
      00177D                       1730 	_vars VSIZE
      00177D 52 03            [ 2]    1     sub sp,#VSIZE 
      00177F CD 17 34         [ 4] 1731 	call expression
      001782 4D               [ 1] 1732 	tnz a 
      001783 27 4D            [ 1] 1733 	jreq rel_exit
      001785 1F 01            [ 2] 1734 	ldw (N1,sp),x 
                                   1735 ; expect rel_op or leave 
      001787 CD 12 89         [ 4] 1736 	call next_token 
      00178A 6B 03            [ 1] 1737 	ld (RELOP,sp),a 
      00178C A4 30            [ 1] 1738 	and a,#TK_GRP_MASK
      00178E A1 30            [ 1] 1739 	cp a,#TK_GRP_RELOP 
      001790 26 33            [ 1] 1740 	jrne 8$
      001792                       1741 2$:	; expect another expression
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      001792 CD 17 34         [ 4] 1742 	call expression
      001795 A1 84            [ 1] 1743 	cp a,#TK_INTGR
      001797 27 03            [ 1] 1744 	jreq 3$
      001799 CC 11 91         [ 2] 1745 	jp syntax_error 
      00179C CF 00 0D         [ 2] 1746 3$:	ldw acc16,x 
      00179F 1E 01            [ 2] 1747 	ldw x,(N1,sp) 
      0017A1 72 B0 00 0D      [ 2] 1748 	subw x,acc16
      0017A5 26 06            [ 1] 1749 	jrne 4$
      0017A7 35 02 00 0E      [ 1] 1750 	mov acc8,#2 ; n1==n2
      0017AB 20 0C            [ 2] 1751 	jra 6$ 
      0017AD                       1752 4$: 
      0017AD 2C 06            [ 1] 1753 	jrsgt 5$  
      0017AF 35 04 00 0E      [ 1] 1754 	mov acc8,#4 ; n1<2 
      0017B3 20 04            [ 2] 1755 	jra 6$
      0017B5                       1756 5$:
      0017B5 35 01 00 0E      [ 1] 1757 	mov acc8,#1 ; n1>n2 
      0017B9                       1758 6$:
      0017B9 5F               [ 1] 1759 	clrw x 
      0017BA C6 00 0E         [ 1] 1760 	ld a, acc8  
      0017BD 14 03            [ 1] 1761 	and a,(RELOP,sp)
      0017BF 4D               [ 1] 1762 	tnz a 
      0017C0 27 0E            [ 1] 1763 	jreq 10$
      0017C2 5C               [ 1] 1764 	incw x 
      0017C3 20 0B            [ 2] 1765 	jra 10$  	
      0017C5 7B 03            [ 1] 1766 8$: ld a,(RELOP,sp)
      0017C7 27 05            [ 1] 1767 	jreq 9$
      0017C9                       1768 	_unget_token
      0017C9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0017CE                       1769 9$: 
      0017CE 1E 01            [ 2] 1770 	ldw x,(N1,sp)
      0017D0                       1771 10$:
      0017D0 A6 84            [ 1] 1772 	ld a,#TK_INTGR
      0017D2                       1773 rel_exit:
      0017D2                       1774 	_drop VSIZE
      0017D2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0017D4 81               [ 4] 1775 	ret 
                                   1776 
                                   1777 ;--------------------------------
                                   1778 ; BASIC: SHOW 
                                   1779 ; print stack content in hexadecimal bytes 
                                   1780 ; 16 bytes per row 
                                   1781 ;--------------------------------
      0017D5                       1782 show:
      0017D5 AE 17 EF         [ 2] 1783 	ldw x,#cstk_prompt
      0017D8 CD 03 4E         [ 4] 1784 	call puts 
      0017DB 96               [ 1] 1785 	ldw x,sp 
      0017DC 1C 00 03         [ 2] 1786 	addw x,#3 ; ignore return address
      0017DF 90 AE 18 00      [ 2] 1787 	ldw y,#RAM_SIZE  
      0017E3 CF 00 0D         [ 2] 1788 	ldw acc16,x 
      0017E6 72 B2 00 0D      [ 2] 1789 	subw y,acc16
      0017EA CD 0D CD         [ 4] 1790 	call hex_dump
      0017ED 4F               [ 1] 1791 	clr a 
      0017EE 81               [ 4] 1792 	ret
                                   1793 
      0017EF 0A 63 6F 6E 74 65 6E  1794 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   1795 
                                   1796 
                                   1797 ;--------------------------------------------
                                   1798 ; BASIC: HEX 
                                   1799 ; select hexadecimal base for integer print
                                   1800 ;---------------------------------------------
      001816                       1801 hex_base:
      001816 35 10 00 0A      [ 1] 1802 	mov base,#16 
      00181A 81               [ 4] 1803 	ret 
                                   1804 
                                   1805 ;--------------------------------------------
                                   1806 ; BASIC: DEC 
                                   1807 ; select decimal base for integer print
                                   1808 ;---------------------------------------------
      00181B                       1809 dec_base:
      00181B 35 0A 00 0A      [ 1] 1810 	mov base,#10
      00181F 81               [ 4] 1811 	ret 
                                   1812 
                                   1813 ;------------------------
                                   1814 ; BASIC: FREE 
                                   1815 ; return free size in RAM 
                                   1816 ; output:
                                   1817 ;   A 		TK_INTGR
                                   1818 ;   X 	    size integer
                                   1819 ;--------------------------
      001820                       1820 free:
      001820 AE 16 90         [ 2] 1821 	ldw x,#tib 
      001823 90 CE 00 1A      [ 2] 1822 	ldw y,txtbgn 
      001827 90 A3 2C 00      [ 2] 1823 	cpw y,#app_space
      00182B 25 05            [ 1] 1824 	jrult 1$
      00182D 1D 00 80         [ 2] 1825 	subw x,#free_ram 
      001830 20 04            [ 2] 1826 	jra 2$ 
      001832                       1827 1$:	
      001832 72 B0 00 1C      [ 2] 1828 	subw x,txtend 
      001836 A6 84            [ 1] 1829 2$:	ld a,#TK_INTGR
      001838 81               [ 4] 1830 	ret 
                                   1831 
                                   1832 ;------------------------------
                                   1833 ; BASIC: SIZE 
                                   1834 ; command that print 
                                   1835 ; program start addres and size 
                                   1836 ;------------------------------
      001839                       1837 cmd_size:
      001839 3B 00 0A         [ 1] 1838 	push base 
      00183C AE 18 66         [ 2] 1839 	ldw x,#PROG_ADDR 
      00183F CD 03 4E         [ 4] 1840 	call puts 
      001842 CE 00 1A         [ 2] 1841 	ldw x,txtbgn     
      001845 35 10 00 0A      [ 1] 1842 	mov base,#16 
      001849 CD 12 D7         [ 4] 1843 	call print_int
      00184C 32 00 0A         [ 1] 1844 	pop base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00184F AE 18 78         [ 2] 1845 	ldw x,#PROG_SIZE 
      001852 CD 03 4E         [ 4] 1846 	call puts 
      001855 CE 00 1C         [ 2] 1847 	ldw x,txtend 
      001858 72 B0 00 1A      [ 2] 1848 	subw x,txtbgn 
      00185C CD 12 D7         [ 4] 1849 	call print_int
      00185F AE 18 87         [ 2] 1850 	ldw x,#STR_BYTES 
      001862 CD 03 4E         [ 4] 1851 	call puts  
      001865 81               [ 4] 1852 	ret 
                                   1853 
                                   1854 
      001866 70 72 6F 67 72 61 6D  1855 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001878 70 72 6F 67 72 61 6D  1856 PROG_SIZE: .asciz "program size: "
             20 73 69 7A 65 3A 20
             00
      001887 62 79 74 65 73 0A 00  1857 STR_BYTES: .asciz "bytes\n" 
                                   1858 
                                   1859 ;------------------------
                                   1860 ; BASIC: UBOUND  
                                   1861 ; return array variable size 
                                   1862 ; output:
                                   1863 ;   A 		TK_INTGR
                                   1864 ;   X 	    array size 
                                   1865 ;--------------------------
      00188E                       1866 ubound:
      00188E CD 18 20         [ 4] 1867 	call free 
      001891 54               [ 2] 1868 	srlw x 
      001892 CF 00 1F         [ 2] 1869 	ldw array_size,x
      001895 A6 84            [ 1] 1870 	ld a,#TK_INTGR
      001897 81               [ 4] 1871 	ret 
                                   1872 
                                   1873 ;-----------------------------
                                   1874 ; BASIC: LET var=expr 
                                   1875 ; variable assignement 
                                   1876 ; output:
                                   1877 ;   A 		TK_NONE 
                                   1878 ;-----------------------------
      001898                       1879 let::
      001898 CD 12 89         [ 4] 1880 	call next_token 
      00189B A1 85            [ 1] 1881 	cp a,#TK_VAR 
      00189D 27 0A            [ 1] 1882 	jreq let_var
      00189F A1 06            [ 1] 1883 	cp a,#TK_ARRAY 
      0018A1 27 03            [ 1] 1884 	jreq  let_array
      0018A3 CC 11 91         [ 2] 1885 	jp syntax_error
      0018A6                       1886 let_array:
      0018A6 CD 16 60         [ 4] 1887 	call get_array_element
      0018A9                       1888 let_var:
      0018A9 89               [ 2] 1889 	pushw x  
      0018AA CD 12 89         [ 4] 1890 	call next_token 
      0018AD A1 32            [ 1] 1891 	cp a,#TK_EQUAL
      0018AF 27 03            [ 1] 1892 	jreq 1$
      0018B1 CC 11 91         [ 2] 1893 	jp syntax_error
      0018B4                       1894 1$:	
      0018B4 CD 17 7D         [ 4] 1895 	call relation   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0018B7 A1 84            [ 1] 1896 	cp a,#TK_INTGR 
      0018B9 27 03            [ 1] 1897 	jreq 2$
      0018BB CC 11 91         [ 2] 1898 	jp syntax_error
      0018BE                       1899 2$:	
      0018BE 90 93            [ 1] 1900 	ldw y,x 
      0018C0 85               [ 2] 1901 	popw x   
      0018C1 FF               [ 2] 1902 	ldw (x),y   
      0018C2 81               [ 4] 1903 	ret 
                                   1904 
                                   1905 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1906 ; return program size 
                                   1907 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018C3                       1908 prog_size:
      0018C3 CE 00 1C         [ 2] 1909 	ldw x,txtend 
      0018C6 72 B0 00 1A      [ 2] 1910 	subw x,txtbgn 
      0018CA 81               [ 4] 1911 	ret 
                                   1912 
                                   1913 ;----------------------------
                                   1914 ; BASIC: LIST [[start][,end]]
                                   1915 ; list program lines 
                                   1916 ; form start to end 
                                   1917 ; if empty argument list then 
                                   1918 ; list all.
                                   1919 ;----------------------------
                           000001  1920 	FIRST=1
                           000003  1921 	LAST=3 
                           000005  1922 	LN_PTR=5
                           000006  1923 	VSIZE=6 
      0018CB                       1924 list:
      0018CB CE 00 1A         [ 2] 1925 	ldw x,txtbgn 
      0018CE C3 00 1C         [ 2] 1926 	cpw x,txtend 
      0018D1 2B 01            [ 1] 1927 	jrmi 1$
      0018D3 81               [ 4] 1928 	ret 
      0018D4                       1929 1$:	
      0018D4 AE 18 78         [ 2] 1930 	ldw x,#PROG_SIZE
      0018D7 CD 03 4E         [ 4] 1931 	call puts 
      0018DA CE 00 1C         [ 2] 1932 	ldw x,txtend 
      0018DD 72 B0 00 1A      [ 2] 1933 	subw x,txtbgn 
      0018E1 CD 12 D7         [ 4] 1934 	call print_int 
      0018E4 AE 18 87         [ 2] 1935 	ldw x,#STR_BYTES 
      0018E7 CD 03 4E         [ 4] 1936 	call puts 
      0018EA                       1937 	_vars VSIZE
      0018EA 52 06            [ 2]    1     sub sp,#VSIZE 
      0018EC CE 00 1A         [ 2] 1938 	ldw x,txtbgn 
      0018EF 1F 05            [ 2] 1939 	ldw (LN_PTR,sp),x 
      0018F1 FE               [ 2] 1940 	ldw x,(x) 
      0018F2 1F 01            [ 2] 1941 	ldw (FIRST,sp),x ; list from first line 
      0018F4 AE 7F FF         [ 2] 1942 	ldw x,#MAX_LINENO ; biggest line number 
      0018F7 1F 03            [ 2] 1943 	ldw (LAST,sp),x 
      0018F9 CD 16 35         [ 4] 1944 	call arg_list
      0018FC 4D               [ 1] 1945 	tnz a
      0018FD 27 31            [ 1] 1946 	jreq list_loop 
      0018FF A1 02            [ 1] 1947 	cp a,#2 
      001901 27 07            [ 1] 1948 	jreq 4$
      001903 A1 01            [ 1] 1949 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001905 27 06            [ 1] 1950 	jreq first_line 
      001907 CC 11 91         [ 2] 1951 	jp syntax_error 
      00190A 85               [ 2] 1952 4$:	popw x 
      00190B 1F 05            [ 2] 1953 	ldw (LAST+2,sp),x 
      00190D                       1954 first_line:
      00190D 85               [ 2] 1955 	popw x
      00190E 1F 01            [ 2] 1956 	ldw (FIRST,sp),x 
      001910                       1957 lines_skip:
      001910 CE 00 1A         [ 2] 1958 	ldw x,txtbgn
      001913 1F 05            [ 2] 1959 2$:	ldw (LN_PTR,sp),x 
      001915 C3 00 1C         [ 2] 1960 	cpw x,txtend 
      001918 2A 38            [ 1] 1961 	jrpl list_exit 
      00191A FE               [ 2] 1962 	ldw x,(x) ;line# 
      00191B 13 01            [ 2] 1963 	cpw x,(FIRST,sp)
      00191D 2A 11            [ 1] 1964 	jrpl list_loop 
      00191F 1E 05            [ 2] 1965 	ldw x,(LN_PTR,sp) 
      001921 E6 02            [ 1] 1966 	ld a,(2,x)
      001923 C7 00 0E         [ 1] 1967 	ld acc8,a 
      001926 72 5F 00 0D      [ 1] 1968 	clr acc16 
      00192A 72 BB 00 0D      [ 2] 1969 	addw x,acc16
      00192E 20 E3            [ 2] 1970 	jra 2$ 
                                   1971 ; print loop
      001930                       1972 list_loop:
      001930 1E 05            [ 2] 1973 	ldw x,(LN_PTR,sp)
      001932 E6 02            [ 1] 1974 	ld a,(2,x) 
      001934 CD 19 A4         [ 4] 1975 	call prt_basic_line
      001937 1E 05            [ 2] 1976 	ldw x,(LN_PTR,sp)
      001939 E6 02            [ 1] 1977 	ld a,(2,x)
      00193B C7 00 0E         [ 1] 1978 	ld acc8,a 
      00193E 72 5F 00 0D      [ 1] 1979 	clr acc16 
      001942 72 BB 00 0D      [ 2] 1980 	addw x,acc16
      001946 C3 00 1C         [ 2] 1981 	cpw x,txtend 
      001949 2A 07            [ 1] 1982 	jrpl list_exit
      00194B 1F 05            [ 2] 1983 	ldw (LN_PTR,sp),x
      00194D FE               [ 2] 1984 	ldw x,(x)
      00194E 13 03            [ 2] 1985 	cpw x,(LAST,sp)  
      001950 2F DE            [ 1] 1986 	jrslt list_loop
      001952                       1987 list_exit:
      001952 55 00 03 00 01   [ 1] 1988 	mov in,count 
      001957 AE 16 E0         [ 2] 1989 	ldw x,#pad 
      00195A CF 00 04         [ 2] 1990 	ldw basicptr,x 
      00195D                       1991 	_drop VSIZE 
      00195D 5B 06            [ 2]    1     addw sp,#VSIZE 
      00195F 81               [ 4] 1992 	ret
                                   1993 
                                   1994 
                                   1995 ;--------------------------
                                   1996 ; BASIC: EDIT \E | \F
                                   1997 ;  copy program in FLASH 
                                   1998 ;  to RAM for edition 
                                   1999 ;-------------------------
      001960                       2000 edit:
      001960 CD 20 3A         [ 4] 2001 	call qsign 
      001963 27 07            [ 1] 2002 	jreq 1$ 
      001965 AE 19 8D         [ 2] 2003 	ldw x,#NOT_SAVED 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001968 CD 03 4E         [ 4] 2004 	call puts 
      00196B 81               [ 4] 2005 	ret 
      00196C                       2006 1$: 
      00196C 90 AE 2C 00      [ 2] 2007 	ldw y,#app_sign ; source address 
      001970 CE 2C 02         [ 2] 2008     ldw x,app_size  
      001973 1C 00 04         [ 2] 2009 	addw x,#4 
      001976 CF 00 0D         [ 2] 2010 	ldw acc16,x  ; bytes to copy 
      001979 AE 00 7C         [ 2] 2011 	ldw x,#rsign ; destination address 
      00197C CD 0E 38         [ 4] 2012 	call move  
      00197F AE 00 80         [ 2] 2013 	ldw x,#free_ram 
      001982 CF 00 1A         [ 2] 2014 	ldw txtbgn,x 
      001985 72 BB 00 7E      [ 2] 2015 	addw x,rsize  
      001989 CF 00 1C         [ 2] 2016 	ldw txtend,x 
      00198C 81               [ 4] 2017 	ret 
                                   2018 
      00198D 4E 6F 20 61 70 70 6C  2019 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   2020 
                                   2021 ;--------------------------
                                   2022 ; decompile line from token list
                                   2023 ; and print it. 
                                   2024 ; input:
                                   2025 ;   A       stop at this position 
                                   2026 ;   X 		pointer at line
                                   2027 ; output:
                                   2028 ;   none 
                                   2029 ;--------------------------	
      0019A4                       2030 prt_basic_line:
      0019A4 C7 00 03         [ 1] 2031 	ld count,a 
      0019A7 E6 02            [ 1] 2032 	ld a,(2,x)
      0019A9 C1 00 03         [ 1] 2033 	cp a,count 
      0019AC 2A 03            [ 1] 2034 	jrpl 1$ 
      0019AE C7 00 03         [ 1] 2035 	ld count,a 
      0019B1 CF 00 04         [ 2] 2036 1$:	ldw basicptr,x 
      0019B4 90 AE 16 90      [ 2] 2037 	ldw y,#tib  
      0019B8 CD 0B 91         [ 4] 2038 	call decompile 
      0019BB CD 03 4E         [ 4] 2039 	call puts 
      0019BE A6 0D            [ 1] 2040 	ld a,#CR 
      0019C0 CD 02 F1         [ 4] 2041 	call putc 
      0019C3 81               [ 4] 2042 	ret 
                                   2043 
                                   2044 
                                   2045 
                                   2046 ;---------------------------------
                                   2047 ; BASIC: PRINT|? arg_list 
                                   2048 ; print values from argument list
                                   2049 ;----------------------------------
                           000001  2050 	CCOMMA=1
                           000001  2051 	VSIZE=1
      0019C4                       2052 print:
      0019C4                       2053 	_vars VSIZE 
      0019C4 52 01            [ 2]    1     sub sp,#VSIZE 
      0019C6                       2054 reset_comma:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0019C6 0F 01            [ 1] 2055 	clr (CCOMMA,sp)
      0019C8                       2056 prt_loop:
      0019C8 CD 12 89         [ 4] 2057 	call next_token
      0019CB A1 02            [ 1] 2058 	cp a,#CMD_END 
      0019CD 25 4F            [ 1] 2059 	jrult print_exit ; colon or end of line 
      0019CF A1 02            [ 1] 2060 	cp a,#TK_QSTR
      0019D1 27 12            [ 1] 2061 	jreq 1$
      0019D3 A1 03            [ 1] 2062 	cp a,#TK_CHAR 
      0019D5 27 13            [ 1] 2063 	jreq 2$ 
      0019D7 A1 82            [ 1] 2064 	cp a,#TK_CFUNC 
      0019D9 27 15            [ 1] 2065 	jreq 3$
      0019DB A1 09            [ 1] 2066 	cp a,#TK_COMMA 
      0019DD 27 18            [ 1] 2067 	jreq 4$
      0019DF A1 0A            [ 1] 2068 	cp a,#TK_SHARP 
      0019E1 27 18            [ 1] 2069 	jreq 5$
      0019E3 20 28            [ 2] 2070 	jra 7$ 
      0019E5                       2071 1$:	; print string 
      0019E5 CD 03 4E         [ 4] 2072 	call puts
      0019E8 20 DC            [ 2] 2073 	jra reset_comma
      0019EA                       2074 2$:	; print character 
      0019EA 9F               [ 1] 2075 	ld a,xl 
      0019EB CD 02 F1         [ 4] 2076 	call putc 
      0019EE 20 D6            [ 2] 2077 	jra reset_comma 
      0019F0                       2078 3$: ; print character function value  	
      0019F0 FD               [ 4] 2079 	call (x)
      0019F1 9F               [ 1] 2080 	ld a,xl 
      0019F2 CD 02 F1         [ 4] 2081 	call putc
      0019F5 20 CF            [ 2] 2082 	jra reset_comma 
      0019F7                       2083 4$: ; set comma state 
      0019F7 03 01            [ 1] 2084 	cpl (CCOMMA,sp)
      0019F9 20 CD            [ 2] 2085 	jra prt_loop   
      0019FB                       2086 5$: ; # character must be followed by an integer   
      0019FB CD 12 89         [ 4] 2087 	call next_token
      0019FE A1 84            [ 1] 2088 	cp a,#TK_INTGR 
      001A00 27 03            [ 1] 2089 	jreq 6$
      001A02 CC 11 91         [ 2] 2090 	jp syntax_error 
      001A05                       2091 6$: ; set tab width
      001A05 9F               [ 1] 2092 	ld a,xl 
      001A06 A4 0F            [ 1] 2093 	and a,#15 
      001A08 C7 00 22         [ 1] 2094 	ld tab_width,a 
      001A0B 20 B9            [ 2] 2095 	jra reset_comma 
      001A0D                       2096 7$:	
      001A0D                       2097 	_unget_token 
      001A0D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A12 CD 17 7D         [ 4] 2098 	call relation 
      001A15 A1 84            [ 1] 2099 	cp a,#TK_INTGR 
      001A17 26 05            [ 1] 2100 	jrne print_exit 
      001A19 CD 12 D7         [ 4] 2101     call print_int 
      001A1C 20 A8            [ 2] 2102 	jra reset_comma 
      001A1E                       2103 print_exit:
      001A1E 0D 01            [ 1] 2104 	tnz (CCOMMA,sp)
      001A20 26 05            [ 1] 2105 	jrne 9$
      001A22 A6 0D            [ 1] 2106 	ld a,#CR 
      001A24 CD 02 F1         [ 4] 2107     call putc 
      001A27                       2108 9$:	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      001A27 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A29 81               [ 4] 2109 	ret 
                                   2110 
                                   2111 ;----------------------
                                   2112 ; 'save_context' and
                                   2113 ; 'rest_context' must be 
                                   2114 ; called at the same 
                                   2115 ; call stack depth 
                                   2116 ; i.e. SP must have the 
                                   2117 ; save value at  
                                   2118 ; entry point of both 
                                   2119 ; routine. 
                                   2120 ;---------------------
                           000004  2121 	CTXT_SIZE=4 ; size of saved data 
                                   2122 ;--------------------
                                   2123 ; save current BASIC
                                   2124 ; interpreter context 
                                   2125 ; on stack 
                                   2126 ;--------------------
      001A2A                       2127 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001A2A                       2128 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001A2A                       2129 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001A2A                       2130 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001A2A                       2131 save_context:
      001A2A CE 00 04         [ 2] 2132 	ldw x,basicptr 
      001A2D 1F 03            [ 2] 2133 	ldw (BPTR,sp),x
      001A2F C6 00 01         [ 1] 2134 	ld a,in 
      001A32 6B 05            [ 1] 2135 	ld (IN,sp),a
      001A34 C6 00 03         [ 1] 2136 	ld a,count 
      001A37 6B 06            [ 1] 2137 	ld (CNT,sp),a  
      001A39 81               [ 4] 2138 	ret
                                   2139 
                                   2140 ;-----------------------
                                   2141 ; restore previously saved 
                                   2142 ; BASIC interpreter context 
                                   2143 ; from stack 
                                   2144 ;-------------------------
      001A3A                       2145 rest_context:
      001A3A 1E 03            [ 2] 2146 	ldw x,(BPTR,sp)
      001A3C CF 00 04         [ 2] 2147 	ldw basicptr,x 
      001A3F 7B 05            [ 1] 2148 	ld a,(IN,sp)
      001A41 C7 00 01         [ 1] 2149 	ld in,a
      001A44 7B 06            [ 1] 2150 	ld a,(CNT,sp)
      001A46 C7 00 03         [ 1] 2151 	ld count,a  
      001A49 81               [ 4] 2152 	ret
                                   2153 
                                   2154 
                                   2155 
                                   2156 ;------------------------------------------
                                   2157 ; BASIC: INPUT [string]var[,[string]var]
                                   2158 ; input value in variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                   2159 ; [string] optionally can be used as prompt 
                                   2160 ;-----------------------------------------
                           000001  2161 	CX_BPTR=1
                           000003  2162 	CX_IN=3
                           000004  2163 	CX_CNT=4
                           000005  2164 	SKIP=5
                           000006  2165 	VAR_ADDR=6
                           000007  2166 	VSIZE=7
      001A4A                       2167 input_var:
      001A4A                       2168 	_vars VSIZE 
      001A4A 52 07            [ 2]    1     sub sp,#VSIZE 
      001A4C                       2169 input_loop:
      001A4C 0F 05            [ 1] 2170 	clr (SKIP,sp)
      001A4E CD 12 89         [ 4] 2171 	call next_token 
      001A51 A1 02            [ 1] 2172 	cp a,#TK_QSTR 
      001A53 26 08            [ 1] 2173 	jrne 1$ 
      001A55 CD 03 4E         [ 4] 2174 	call puts 
      001A58 03 05            [ 1] 2175 	cpl (SKIP,sp)
      001A5A CD 12 89         [ 4] 2176 	call next_token 
      001A5D A1 85            [ 1] 2177 1$: cp a,#TK_VAR  
      001A5F 27 03            [ 1] 2178 	jreq 2$ 
      001A61 CC 11 91         [ 2] 2179 	jp syntax_error
      001A64 1F 06            [ 2] 2180 2$:	ldw (VAR_ADDR,sp),x 
      001A66 0D 05            [ 1] 2181 	tnz (SKIP,sp)
      001A68 26 06            [ 1] 2182 	jrne 21$ 
      001A6A CD 0B 68         [ 4] 2183 	call var_name 
      001A6D CD 02 F1         [ 4] 2184 	call putc   
      001A70                       2185 21$:
      001A70 A6 3A            [ 1] 2186 	ld a,#':
      001A72 CD 02 F1         [ 4] 2187 	call putc 
      001A75 CD 1A 2A         [ 4] 2188 	call save_context 
      001A78 72 5F 00 03      [ 1] 2189 	clr count  
      001A7C CD 04 53         [ 4] 2190 	call readln 
      001A7F AE 16 90         [ 2] 2191 	ldw x,#tib 
      001A82 3B 00 03         [ 1] 2192 	push count
      001A85 4B 00            [ 1] 2193 	push #0 
      001A87 72 FB 01         [ 2] 2194 	addw x,(1,sp)
      001A8A 5C               [ 1] 2195 	incw x 
      001A8B                       2196 	_drop 2 
      001A8B 5B 02            [ 2]    1     addw sp,#2 
      001A8D 72 5F 00 01      [ 1] 2197 	clr in 
      001A91 CD 08 B7         [ 4] 2198 	call get_token
      001A94 A1 84            [ 1] 2199 	cp a,#TK_INTGR
      001A96 27 10            [ 1] 2200 	jreq 3$ 
      001A98 A1 11            [ 1] 2201 	cp a,#TK_MINUS
      001A9A CD 08 B7         [ 4] 2202 	call get_token 
      001A9D A1 84            [ 1] 2203 	cp a,#TK_INTGR 
      001A9F 27 06            [ 1] 2204 	jreq 22$
      001AA1 CD 1A 3A         [ 4] 2205 	call rest_context 
      001AA4 CC 11 91         [ 2] 2206 	jp syntax_error
      001AA7                       2207 22$:
      001AA7 50               [ 2] 2208 	negw x 	
      001AA8 16 06            [ 2] 2209 3$: ldw y,(VAR_ADDR,sp) 
      001AAA 90 FF            [ 2] 2210 	ldw (y),x 
      001AAC CD 1A 3A         [ 4] 2211 	call rest_context
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001AAF CD 12 89         [ 4] 2212 	call next_token 
      001AB2 A1 09            [ 1] 2213 	cp a,#TK_COMMA 
      001AB4 27 96            [ 1] 2214 	jreq input_loop
      001AB6 A1 00            [ 1] 2215 	cp a,#TK_NONE 
      001AB8 27 07            [ 1] 2216 	jreq input_exit  
      001ABA A1 0B            [ 1] 2217 	cp a,#TK_COLON 
      001ABC 27 03            [ 1] 2218     jreq input_exit 
      001ABE CC 11 91         [ 2] 2219 	jp syntax_error 
      001AC1                       2220 input_exit:
      001AC1                       2221 	_drop VSIZE 
      001AC1 5B 07            [ 2]    1     addw sp,#VSIZE 
      001AC3 81               [ 4] 2222 	ret 
                                   2223 
                                   2224 
                                   2225 ;---------------------
                                   2226 ; BASIC: REMARK | ' 
                                   2227 ; skip comment to end of line 
                                   2228 ;---------------------- 
      001AC4                       2229 remark::
      001AC4 55 00 03 00 01   [ 1] 2230 	mov in,count 
      001AC9 81               [ 4] 2231  	ret 
                                   2232 
                                   2233 
                                   2234 ;---------------------
                                   2235 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2236 ; read in loop 'addr'  
                                   2237 ; apply & 'mask' to value 
                                   2238 ; loop while result==0.  
                                   2239 ; 'xor_mask' is used to 
                                   2240 ; invert the wait logic.
                                   2241 ; i.e. loop while not 0.
                                   2242 ;---------------------
                           000001  2243 	XMASK=1 
                           000002  2244 	MASK=2
                           000003  2245 	ADDR=3
                           000004  2246 	VSIZE=4
      001ACA                       2247 wait: 
      001ACA                       2248 	_vars VSIZE
      001ACA 52 04            [ 2]    1     sub sp,#VSIZE 
      001ACC 0F 01            [ 1] 2249 	clr (XMASK,sp) 
      001ACE CD 16 35         [ 4] 2250 	call arg_list 
      001AD1 A1 02            [ 1] 2251 	cp a,#2
      001AD3 24 03            [ 1] 2252 	jruge 0$
      001AD5 CC 11 91         [ 2] 2253 	jp syntax_error 
      001AD8 A1 03            [ 1] 2254 0$:	cp a,#3
      001ADA 25 04            [ 1] 2255 	jrult 1$
      001ADC 85               [ 2] 2256 	popw x 
      001ADD 9F               [ 1] 2257 	ld a,xl
      001ADE 6B 01            [ 1] 2258 	ld (XMASK,sp),a 
      001AE0 85               [ 2] 2259 1$: popw x ; mask 
      001AE1 9F               [ 1] 2260 	ld a,xl 
      001AE2 6B 02            [ 1] 2261 	ld (MASK,sp),a 
      001AE4 85               [ 2] 2262 	popw x ; address 
      001AE5 F6               [ 1] 2263 2$:	ld a,(x)
      001AE6 14 02            [ 1] 2264 	and a,(MASK,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001AE8 18 01            [ 1] 2265 	xor a,(XMASK,sp)
      001AEA 27 F9            [ 1] 2266 	jreq 2$ 
      001AEC                       2267 	_drop VSIZE 
      001AEC 5B 04            [ 2]    1     addw sp,#VSIZE 
      001AEE 81               [ 4] 2268 	ret 
                                   2269 
                                   2270 ;---------------------
                                   2271 ; BASIC: BSET addr,mask
                                   2272 ; set bits at 'addr' corresponding 
                                   2273 ; to those of 'mask' that are at 1.
                                   2274 ; arguments:
                                   2275 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2276 ;   mask        mask|addr
                                   2277 ; output:
                                   2278 ;	none 
                                   2279 ;--------------------------
      001AEF                       2280 bit_set:
      001AEF CD 16 35         [ 4] 2281 	call arg_list 
      001AF2 A1 02            [ 1] 2282 	cp a,#2	 
      001AF4 27 03            [ 1] 2283 	jreq 1$ 
      001AF6 CC 11 91         [ 2] 2284 	jp syntax_error
      001AF9                       2285 1$: 
      001AF9 85               [ 2] 2286 	popw x ; mask 
      001AFA 9F               [ 1] 2287 	ld a,xl 
      001AFB 85               [ 2] 2288 	popw x ; addr  
      001AFC FA               [ 1] 2289 	or a,(x)
      001AFD F7               [ 1] 2290 	ld (x),a
      001AFE 81               [ 4] 2291 	ret 
                                   2292 
                                   2293 ;---------------------
                                   2294 ; BASIC: BRES addr,mask
                                   2295 ; reset bits at 'addr' corresponding 
                                   2296 ; to those of 'mask' that are at 1.
                                   2297 ; arguments:
                                   2298 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2299 ;   mask	    ~mask&*addr  
                                   2300 ; output:
                                   2301 ;	none 
                                   2302 ;--------------------------
      001AFF                       2303 bit_reset:
      001AFF CD 16 35         [ 4] 2304 	call arg_list 
      001B02 A1 02            [ 1] 2305 	cp a,#2  
      001B04 27 03            [ 1] 2306 	jreq 1$ 
      001B06 CC 11 91         [ 2] 2307 	jp syntax_error
      001B09                       2308 1$: 
      001B09 85               [ 2] 2309 	popw x ; mask 
      001B0A 9F               [ 1] 2310 	ld a,xl 
      001B0B 43               [ 1] 2311 	cpl a 
      001B0C 85               [ 2] 2312 	popw x ; addr  
      001B0D F4               [ 1] 2313 	and a,(x)
      001B0E F7               [ 1] 2314 	ld (x),a 
      001B0F 81               [ 4] 2315 	ret 
                                   2316 
                                   2317 ;---------------------
                                   2318 ; BASIC: BTOGL addr,mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                   2319 ; toggle bits at 'addr' corresponding 
                                   2320 ; to those of 'mask' that are at 1.
                                   2321 ; arguments:
                                   2322 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2323 ;   mask	    mask^*addr  
                                   2324 ; output:
                                   2325 ;	none 
                                   2326 ;--------------------------
      001B10                       2327 bit_toggle:
      001B10 CD 16 35         [ 4] 2328 	call arg_list 
      001B13 A1 02            [ 1] 2329 	cp a,#2 
      001B15 27 03            [ 1] 2330 	jreq 1$ 
      001B17 CC 11 91         [ 2] 2331 	jp syntax_error
      001B1A 85               [ 2] 2332 1$: popw x ; mask 
      001B1B 9F               [ 1] 2333 	ld a,xl 
      001B1C 85               [ 2] 2334 	popw x ; addr  
      001B1D F8               [ 1] 2335 	xor a,(x)
      001B1E F7               [ 1] 2336 	ld (x),a 
      001B1F 81               [ 4] 2337 	ret 
                                   2338 
                                   2339 
                                   2340 ;---------------------
                                   2341 ; BASIC: BTEST(addr,bit)
                                   2342 ; return bit value at 'addr' 
                                   2343 ; bit is in range {0..7}.
                                   2344 ; arguments:
                                   2345 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2346 ;   bit 	    bit position {0..7}  
                                   2347 ; output:
                                   2348 ;	none 
                                   2349 ;--------------------------
      001B20                       2350 bit_test:
      001B20 CD 16 30         [ 4] 2351 	call func_args 
      001B23 A1 02            [ 1] 2352 	cp a,#2
      001B25 27 03            [ 1] 2353 	jreq 0$
      001B27 CC 11 91         [ 2] 2354 	jp syntax_error
      001B2A                       2355 0$:	
      001B2A 85               [ 2] 2356 	popw x 
      001B2B 9F               [ 1] 2357 	ld a,xl 
      001B2C A4 07            [ 1] 2358 	and a,#7
      001B2E 88               [ 1] 2359 	push a   
      001B2F A6 01            [ 1] 2360 	ld a,#1 
      001B31 0D 01            [ 1] 2361 1$: tnz (1,sp)
      001B33 27 05            [ 1] 2362 	jreq 2$
      001B35 48               [ 1] 2363 	sll a 
      001B36 0A 01            [ 1] 2364 	dec (1,sp)
      001B38 20 F7            [ 2] 2365 	jra 1$
      001B3A                       2366 2$: _drop 1 
      001B3A 5B 01            [ 2]    1     addw sp,#1 
      001B3C 85               [ 2] 2367 	popw x 
      001B3D F4               [ 1] 2368 	and a,(x)
      001B3E 27 02            [ 1] 2369 	jreq 3$
      001B40 A6 01            [ 1] 2370 	ld a,#1 
      001B42 5F               [ 1] 2371 3$:	clrw x 
      001B43 97               [ 1] 2372 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B44 A6 84            [ 1] 2373 	ld a,#TK_INTGR
      001B46 81               [ 4] 2374 	ret
                                   2375 
                                   2376 
                                   2377 ;--------------------
                                   2378 ; BASIC: POKE addr,byte
                                   2379 ; put a byte at addr 
                                   2380 ;--------------------
      001B47                       2381 poke:
      001B47 CD 16 35         [ 4] 2382 	call arg_list 
      001B4A A1 02            [ 1] 2383 	cp a,#2
      001B4C 27 03            [ 1] 2384 	jreq 1$
      001B4E CC 11 91         [ 2] 2385 	jp syntax_error
      001B51                       2386 1$:	
      001B51 85               [ 2] 2387 	popw x  
      001B52 9F               [ 1] 2388     ld a,xl 
      001B53 85               [ 2] 2389 	popw x 
      001B54 F7               [ 1] 2390 	ld (x),a 
      001B55 81               [ 4] 2391 	ret 
                                   2392 
                                   2393 ;-----------------------
                                   2394 ; BASIC: PEEK(addr)
                                   2395 ; get the byte at addr 
                                   2396 ; input:
                                   2397 ;	none 
                                   2398 ; output:
                                   2399 ;	X 		value 
                                   2400 ;-----------------------
      001B56                       2401 peek:
      001B56 CD 16 30         [ 4] 2402 	call func_args
      001B59 A1 01            [ 1] 2403 	cp a,#1 
      001B5B 27 03            [ 1] 2404 	jreq 1$
      001B5D CC 11 91         [ 2] 2405 	jp syntax_error
      001B60 85               [ 2] 2406 1$: popw x 
      001B61 F6               [ 1] 2407 	ld a,(x)
      001B62 5F               [ 1] 2408 	clrw x 
      001B63 97               [ 1] 2409 	ld xl,a 
      001B64 A6 84            [ 1] 2410 	ld a,#TK_INTGR
      001B66 81               [ 4] 2411 	ret 
                                   2412 
                                   2413 ;---------------------------
                                   2414 ; BASIC IF expr : instructions
                                   2415 ; evaluate expr and if true 
                                   2416 ; execute instructions on same line. 
                                   2417 ;----------------------------
      001B67                       2418 if: 
      001B67 CD 17 7D         [ 4] 2419 	call relation 
      001B6A A1 84            [ 1] 2420 	cp a,#TK_INTGR
      001B6C 27 03            [ 1] 2421 	jreq 1$ 
      001B6E CC 11 91         [ 2] 2422 	jp syntax_error
      001B71 4F               [ 1] 2423 1$:	clr a 
      001B72 5D               [ 2] 2424 	tnzw x 
      001B73 26 05            [ 1] 2425 	jrne 9$  
                                   2426 ;skip to next line
      001B75 55 00 03 00 01   [ 1] 2427 	mov in,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B7A 81               [ 4] 2428 9$:	ret 
                                   2429 
                                   2430 ;------------------------
                                   2431 ; BASIC: FOR var=expr 
                                   2432 ; set variable to expression 
                                   2433 ; leave variable address 
                                   2434 ; on stack and set
                                   2435 ; FLOOP bit in 'flags'
                                   2436 ;-----------------
                           000001  2437 	RETL1=1 ; return address  
                           000003  2438 	FSTEP=3  ; variable increment
                           000005  2439 	LIMIT=5 ; loop limit 
                           000007  2440 	CVAR=7   ; control variable 
                           000009  2441 	INW=9   ;  in.w saved
                           00000B  2442 	BPTR=11 ; baseptr saved
                           00000A  2443 	VSIZE=10  
      001B7B                       2444 for: ; { -- var_addr }
      001B7B 85               [ 2] 2445 	popw x ; call return address 
      001B7C                       2446 	_vars VSIZE 
      001B7C 52 0A            [ 2]    1     sub sp,#VSIZE 
      001B7E 89               [ 2] 2447 	pushw x  ; RETL1 
      001B7F A6 85            [ 1] 2448 	ld a,#TK_VAR 
      001B81 CD 16 23         [ 4] 2449 	call expect
      001B84 1F 07            [ 2] 2450 	ldw (CVAR,sp),x  ; control variable 
      001B86 CD 18 A9         [ 4] 2451 	call let_var 
      001B89 72 14 00 21      [ 1] 2452 	bset flags,#FLOOP 
                                   2453 ; open space on stack for loop data 
      001B8D 5F               [ 1] 2454 	clrw x 
      001B8E 1F 0B            [ 2] 2455 	ldw (BPTR,sp),x 
      001B90 1F 09            [ 2] 2456 	ldw (INW,sp),x 
      001B92 CD 12 89         [ 4] 2457 	call next_token 
      001B95 A1 80            [ 1] 2458 	cp a,#TK_CMD 
      001B97 27 03            [ 1] 2459 	jreq 1$
      001B99 CC 11 91         [ 2] 2460 	jp syntax_error
      001B9C                       2461 1$:  
      001B9C A3 1B A4         [ 2] 2462 	cpw x,#to 
      001B9F 27 03            [ 1] 2463 	jreq to
      001BA1 CC 11 91         [ 2] 2464 	jp syntax_error 
                                   2465 
                                   2466 ;-----------------------------------
                                   2467 ; BASIC: TO expr 
                                   2468 ; second part of FOR loop initilization
                                   2469 ; leave limit on stack and set 
                                   2470 ; FTO bit in 'flags'
                                   2471 ;-----------------------------------
      001BA4                       2472 to: ; { var_addr -- var_addr limit step }
      001BA4 72 04 00 21 03   [ 2] 2473 	btjt flags,#FLOOP,1$
      001BA9 CC 11 91         [ 2] 2474 	jp syntax_error
      001BAC CD 17 7D         [ 4] 2475 1$: call relation  
      001BAF A1 84            [ 1] 2476 	cp a,#TK_INTGR 
      001BB1 27 03            [ 1] 2477 	jreq 2$ 
      001BB3 CC 11 91         [ 2] 2478 	jp syntax_error
      001BB6 1F 05            [ 2] 2479 2$: ldw (LIMIT,sp),x
                                   2480 ;	ldw x,in.w 
      001BB8 CD 12 89         [ 4] 2481 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001BBB A1 00            [ 1] 2482 	cp a,#TK_NONE  
      001BBD 27 0E            [ 1] 2483 	jreq 4$ 
      001BBF A1 80            [ 1] 2484 	cp a,#TK_CMD
      001BC1 26 05            [ 1] 2485 	jrne 3$
      001BC3 A3 1B D4         [ 2] 2486 	cpw x,#step 
      001BC6 27 0C            [ 1] 2487 	jreq step
      001BC8                       2488 3$:	
      001BC8                       2489 	_unget_token   	 
      001BC8 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BCD                       2490 4$:	
      001BCD AE 00 01         [ 2] 2491 	ldw x,#1   ; default step  
      001BD0 1F 03            [ 2] 2492 	ldw (FSTEP,sp),x 
      001BD2 20 14            [ 2] 2493 	jra store_loop_addr 
                                   2494 
                                   2495 
                                   2496 ;----------------------------------
                                   2497 ; BASIC: STEP expr 
                                   2498 ; optional third par of FOR loop
                                   2499 ; initialization. 	
                                   2500 ;------------------------------------
      001BD4                       2501 step: ; {var limit -- var limit step}
      001BD4 72 04 00 21 03   [ 2] 2502 	btjt flags,#FLOOP,1$
      001BD9 CC 11 91         [ 2] 2503 	jp syntax_error
      001BDC CD 17 7D         [ 4] 2504 1$: call relation
      001BDF A1 84            [ 1] 2505 	cp a,#TK_INTGR
      001BE1 27 03            [ 1] 2506 	jreq 2$
      001BE3 CC 11 91         [ 2] 2507 	jp syntax_error
      001BE6 1F 03            [ 2] 2508 2$:	ldw (FSTEP,sp),x ; step
                                   2509 ; leave loop back entry point on cstack 
                                   2510 ; cstack is 1 call deep from interpreter
      001BE8                       2511 store_loop_addr:
      001BE8 CE 00 04         [ 2] 2512 	ldw x,basicptr  
      001BEB 1F 0B            [ 2] 2513 	ldw (BPTR,sp),x 
      001BED CE 00 00         [ 2] 2514 	ldw x,in.w 
      001BF0 1F 09            [ 2] 2515 	ldw (INW,sp),x   
      001BF2 72 15 00 21      [ 1] 2516 	bres flags,#FLOOP 
      001BF6 72 5C 00 1E      [ 1] 2517 	inc loop_depth  
      001BFA 81               [ 4] 2518 	ret 
                                   2519 
                                   2520 ;--------------------------------
                                   2521 ; BASIC: NEXT var 
                                   2522 ; FOR loop control 
                                   2523 ; increment variable with step 
                                   2524 ; and compare with limit 
                                   2525 ; loop if threshold not crossed.
                                   2526 ; else stack. 
                                   2527 ; and decrement 'loop_depth' 
                                   2528 ;--------------------------------
      001BFB                       2529 next: ; {var limit step retl1 -- [var limit step ] }
      001BFB 72 5D 00 1E      [ 1] 2530 	tnz loop_depth 
      001BFF 26 03            [ 1] 2531 	jrne 1$ 
      001C01 CC 11 91         [ 2] 2532 	jp syntax_error 
      001C04                       2533 1$: 
      001C04 A6 85            [ 1] 2534 	ld a,#TK_VAR 
      001C06 CD 16 23         [ 4] 2535 	call expect
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                   2536 ; check for good variable after NEXT 	 
      001C09 13 07            [ 2] 2537 	cpw x,(CVAR,sp)
      001C0B 27 03            [ 1] 2538 	jreq 2$  
      001C0D CC 11 91         [ 2] 2539 	jp syntax_error ; not the good one 
      001C10                       2540 2$: ; increment variable 
      001C10 FE               [ 2] 2541 	ldw x,(x)  ; get var value 
      001C11 72 FB 03         [ 2] 2542 	addw x,(FSTEP,sp) ; var+step 
      001C14 16 07            [ 2] 2543 	ldw y,(CVAR,sp)
      001C16 90 FF            [ 2] 2544 	ldw (y),x ; save var new value 
                                   2545 ; check sign of STEP  
      001C18 A6 80            [ 1] 2546 	ld a,#0x80
      001C1A 15 03            [ 1] 2547 	bcp a,(FSTEP,sp)
      001C1C 2A 06            [ 1] 2548 	jrpl 4$
                                   2549 ;negative step 
      001C1E 13 05            [ 2] 2550 	cpw x,(LIMIT,sp)
      001C20 2F 1B            [ 1] 2551 	jrslt loop_done
      001C22 20 04            [ 2] 2552 	jra loop_back 
      001C24                       2553 4$: ; positive step
      001C24 13 05            [ 2] 2554 	cpw x,(LIMIT,sp)
      001C26 2C 15            [ 1] 2555 	jrsgt loop_done
      001C28                       2556 loop_back:
      001C28 1E 0B            [ 2] 2557 	ldw x,(BPTR,sp)
      001C2A CF 00 04         [ 2] 2558 	ldw basicptr,x 
      001C2D 72 01 00 21 05   [ 2] 2559 	btjf flags,#FRUN,1$ 
      001C32 E6 02            [ 1] 2560 	ld a,(2,x)
      001C34 C7 00 03         [ 1] 2561 	ld count,a
      001C37 1E 09            [ 2] 2562 1$:	ldw x,(INW,sp)
      001C39 CF 00 00         [ 2] 2563 	ldw in.w,x 
      001C3C 81               [ 4] 2564 	ret 
      001C3D                       2565 loop_done:
                                   2566 	; remove loop data from stack  
      001C3D 85               [ 2] 2567 	popw x
      001C3E                       2568 	_drop VSIZE 
      001C3E 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001C40 72 5A 00 1E      [ 1] 2569 	dec loop_depth 
                                   2570 ;	pushw x 
                                   2571 ;	ret 
      001C44 FC               [ 2] 2572 	jp (x)
                                   2573 
                                   2574 ;----------------------------
                                   2575 ; called by goto/gosub
                                   2576 ; to get target line number 
                                   2577 ;---------------------------
      001C45                       2578 get_target_line:
      001C45 CD 12 89         [ 4] 2579 	call next_token  
      001C48 A1 84            [ 1] 2580 	cp a,#TK_INTGR
      001C4A 27 07            [ 1] 2581 	jreq get_target_line_2 
      001C4C A1 01            [ 1] 2582 	cp a,#TK_LABEL 
      001C4E 27 1F            [ 1] 2583 	jreq look_target_symbol 
      001C50 CC 11 91         [ 2] 2584 	jp syntax_error
      001C53                       2585 get_target_line_2:
      001C53 4F               [ 1] 2586 	clr a
      001C54 90 CE 00 04      [ 2] 2587 	ldw y,basicptr 
      001C58 90 FE            [ 2] 2588 	ldw y,(y)
      001C5A 90 89            [ 2] 2589 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C5C 13 01            [ 2] 2590 	cpw x,(1,sp)
      001C5E 5B 02            [ 2] 2591 	addw sp,#2 
      001C60 25 01            [ 1] 2592 	jrult 11$
      001C62 4C               [ 1] 2593 	inc a 
      001C63                       2594 11$:	
      001C63 CD 06 36         [ 4] 2595 	call search_lineno  
      001C66 5D               [ 2] 2596 	tnzw x 
      001C67 26 05            [ 1] 2597 	jrne 2$ 
      001C69 A6 05            [ 1] 2598 	ld a,#ERR_NO_LINE 
      001C6B CC 11 93         [ 2] 2599 	jp tb_error 
      001C6E 81               [ 4] 2600 2$:	ret 
                                   2601 
                                   2602 ; the GOTO|GOSUB target is a symbol.
      001C6F                       2603 look_target_symbol:
      001C6F 72 5F 00 0D      [ 1] 2604 	clr acc16 
      001C73 90 CE 00 1A      [ 2] 2605 	ldw y,txtbgn 
      001C77 90 E6 03         [ 1] 2606 1$:	ld a,(3,y) ; first TK_ID on line 
      001C7A A1 01            [ 1] 2607 	cp a,#TK_LABEL 
      001C7C 27 15            [ 1] 2608 	jreq 3$ 
      001C7E 90 E6 02         [ 1] 2609 2$:	ld a,(2,y); line length 
      001C81 C7 00 0E         [ 1] 2610 	ld acc8,a 
      001C84 72 B9 00 0D      [ 2] 2611 	addw y,acc16 ;point to next line 
      001C88 90 C3 00 1C      [ 2] 2612 	cpw y,txtend 
      001C8C 25 E9            [ 1] 2613 	jrult 1$
      001C8E A6 0A            [ 1] 2614 	ld a,#ERR_BAD_VALUE
      001C90 CC 11 93         [ 2] 2615 	jp tb_error 
      001C93                       2616 3$: ; found a TK_LABEL 
                                   2617 	; compare with GOTO|GOSUB target 
      001C93 90 89            [ 2] 2618 	pushw y 
      001C95 72 A9 00 04      [ 2] 2619 	addw y,#4 ; label string 
      001C99 CE 00 04         [ 2] 2620 	ldw x,basicptr 
      001C9C 72 BB 00 00      [ 2] 2621 	addw x,in.w 
      001CA0 CD 0E 17         [ 4] 2622 	call strcmp
      001CA3 26 04            [ 1] 2623 	jrne 4$
      001CA5 90 85            [ 2] 2624 	popw y 
      001CA7 20 D5            [ 2] 2625 	jra 2$ 
      001CA9                       2626 4$: ; target found 
      001CA9 CD 1C AE         [ 4] 2627 	call skip_label 
      001CAC 85               [ 2] 2628 	popw x 
      001CAD 81               [ 4] 2629 	ret
                                   2630 
                                   2631 ;--------------------------------
                                   2632 ;  skip label string in BASIC 
                                   2633 ;  text.
                                   2634 ;-------------------------------
      001CAE                       2635 skip_label:
      001CAE CE 00 04         [ 2] 2636 	ldw x,basicptr 
      001CB1 72 D6 00 00      [ 4] 2637 1$:	ld a,([in.w],x)
      001CB5 72 5C 00 01      [ 1] 2638 	inc in 
      001CB9 4D               [ 1] 2639 	tnz a 
      001CBA 26 F5            [ 1] 2640 	jrne 1$
      001CBC 81               [ 4] 2641 	ret 
                                   2642 
                                   2643 
                                   2644 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   2645 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2646 ; selective goto or gosub 
                                   2647 ;--------------------------------
                           000003  2648 	RET_ADDR=3
                           000005  2649 	RET_INW=5
                           000004  2650 	VSIZE=4  
      001CBD                       2651 cmd_on:
      001CBD 72 00 00 21 05   [ 2] 2652 	btjt flags,#FRUN,0$ 
      001CC2 A6 06            [ 1] 2653 	ld a,#ERR_RUN_ONLY
      001CC4 CC 11 93         [ 2] 2654 	jp tb_error 
      001CC7 CD 17 34         [ 4] 2655 0$:	call expression 
      001CCA A1 84            [ 1] 2656 	cp a,#TK_INTGR
      001CCC 27 03            [ 1] 2657 	jreq 1$
      001CCE CC 11 91         [ 2] 2658 	jp syntax_error
      001CD1 A3 00 01         [ 2] 2659 1$: cpw x,#1 
      001CD4 2F 69            [ 1] 2660 	jrslt 9$
      001CD6 A3 00 10         [ 2] 2661 	cpw x,#16 ; no more than 16 arguments 
      001CD9 22 64            [ 1] 2662 	jrugt 9$
      001CDB 9F               [ 1] 2663 	ld a,xl 
      001CDC 88               [ 1] 2664 	push a  ; selector  
      001CDD CD 12 89         [ 4] 2665 	call next_token ; should be GOTO|GOSUB 
      001CE0 A1 80            [ 1] 2666 	cp a,#TK_CMD 
      001CE2 27 03            [ 1] 2667 	jreq 2$ 
      001CE4 CC 11 91         [ 2] 2668 	jp syntax_error 
      001CE7 A3 1D 46         [ 2] 2669 2$: cpw x,#goto 
      001CEA 27 08            [ 1] 2670 	jreq 4$
      001CEC A3 1D 60         [ 2] 2671 	cpw x,#gosub 
      001CEF 27 03            [ 1] 2672 	jreq 4$ 
      001CF1 CC 11 91         [ 2] 2673 	jp syntax_error 
      001CF4 84               [ 1] 2674 4$: pop a 
      001CF5 89               [ 2] 2675 	pushw x ; save routine address 	
      001CF6 88               [ 1] 2676 	push a  ; -- code_addr selector  
      001CF7 CD 12 89         [ 4] 2677 5$: call next_token 
      001CFA A1 84            [ 1] 2678 	cp a,#TK_INTGR 
      001CFC 27 03            [ 1] 2679 	jreq 52$
      001CFE CC 11 91         [ 2] 2680 	jp syntax_error 
      001D01                       2681 52$: ; got a line number 
      001D01 0A 01            [ 1] 2682 	dec (1,sp) ; decrement selector 
      001D03 27 0B            [ 1] 2683 	jreq 58$ ; this is the selected one 
      001D05 CD 12 89         [ 4] 2684 	call next_token ; try for the next one 
      001D08 A1 09            [ 1] 2685 	cp a,#TK_COMMA 
      001D0A 27 EB            [ 1] 2686 	jreq 5$ 
                                   2687 ; arg list exhausted, selector to big 
                                   2688 ; continue execution on next line 
      001D0C                       2689 	_drop 3 ; drop selector and GOTO|GOSUB address 
      001D0C 5B 03            [ 2]    1     addw sp,#3 
      001D0E 20 2F            [ 2] 2690 	jra 9$
      001D10                       2691 58$: ;found line# in list 
      001D10                       2692 	_drop 1 ; discard selector 
      001D10 5B 01            [ 2]    1     addw sp,#1 
      001D12 55 00 03 00 01   [ 1] 2693 	mov in,count ; skip to end of this line. 
                                   2694 ; here only the routine address of GOTO|GOSUB is on stack 
                                   2695 ;   X contain target line number 
      001D17 CD 1C 53         [ 4] 2696 8$:	call get_target_line_2
      001D1A 90 85            [ 2] 2697 	popw y ; routine address GOTO|GOSUB  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D1C 90 A3 1D 46      [ 2] 2698 	cpw y,#goto 
      001D20 27 31            [ 1] 2699 	jreq jp_to_target 
      001D22 90 85            [ 2] 2700 	popw y 
      001D24                       2701 	_vars VSIZE 
      001D24 52 04            [ 2]    1     sub sp,#VSIZE 
      001D26 90 89            [ 2] 2702 	pushw y 
      001D28 90 CE 00 04      [ 2] 2703 	ldw y,basicptr 
      001D2C 55 00 03 00 01   [ 1] 2704 	mov in,count 
      001D31 72 B9 00 00      [ 2] 2705 	addw y,in.w 
      001D35 17 03            [ 2] 2706 	ldw (RET_ADDR,sp),y 
      001D37 90 AE 00 03      [ 2] 2707 	ldw y,#3 
      001D3B 17 05            [ 2] 2708 	ldw (RET_INW,sp),y
      001D3D 20 14            [ 2] 2709 	jra jp_to_target
      001D3F                       2710 9$: ; expr out of range skip to next line 
      001D3F 55 00 03 00 01   [ 1] 2711 	mov in,count
      001D44 4F               [ 1] 2712 	clr a  
      001D45 81               [ 4] 2713 	ret 
                                   2714 
                                   2715 ;------------------------
                                   2716 ; BASIC: GOTO line# 
                                   2717 ; jump to line# 
                                   2718 ; here cstack is 2 call deep from interpreter 
                                   2719 ;------------------------
      001D46                       2720 goto:
      001D46 72 00 00 21 05   [ 2] 2721 	btjt flags,#FRUN,0$ 
      001D4B A6 06            [ 1] 2722 	ld a,#ERR_RUN_ONLY
      001D4D CC 11 93         [ 2] 2723 	jp tb_error 
      001D50 CD 1C 45         [ 4] 2724 0$:	call get_target_line
      001D53                       2725 jp_to_target:
      001D53 CF 00 04         [ 2] 2726 	ldw basicptr,x 
      001D56 E6 02            [ 1] 2727 	ld a,(2,x)
      001D58 C7 00 03         [ 1] 2728 	ld count,a 
      001D5B 35 03 00 01      [ 1] 2729 	mov in,#3 
      001D5F 81               [ 4] 2730 	ret 
                                   2731 
                                   2732 
                                   2733 ;--------------------
                                   2734 ; BASIC: GOSUB line#
                                   2735 ; basic subroutine call
                                   2736 ; actual line# and basicptr 
                                   2737 ; are saved on cstack
                                   2738 ; here cstack is 2 call deep from interpreter 
                                   2739 ;--------------------
                           000003  2740 	RET_ADDR=3
                           000005  2741 	RET_INW=5
                           000004  2742 	VSIZE=4  
      001D60                       2743 gosub:
      001D60 72 00 00 21 06   [ 2] 2744 	btjt flags,#FRUN,0$ 
      001D65 A6 06            [ 1] 2745 	ld a,#ERR_RUN_ONLY
      001D67 CC 11 93         [ 2] 2746 	jp tb_error 
      001D6A 81               [ 4] 2747 	ret 
      001D6B 85               [ 2] 2748 0$:	popw x 
      001D6C                       2749 	_vars VSIZE  
      001D6C 52 04            [ 2]    1     sub sp,#VSIZE 
      001D6E 89               [ 2] 2750 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D6F CE 00 04         [ 2] 2751 	ldw x,basicptr
      001D72 1F 03            [ 2] 2752 	ldw (RET_ADDR,sp),x 
      001D74 CD 1C 45         [ 4] 2753 	call get_target_line  
      001D77 89               [ 2] 2754 	pushw x 
      001D78 CE 00 00         [ 2] 2755 	ldw x,in.w 
      001D7B 1F 07            [ 2] 2756 	ldw (RET_INW+2,sp),x
      001D7D 85               [ 2] 2757 	popw x 
      001D7E 20 D3            [ 2] 2758 	jra jp_to_target
                                   2759 
                                   2760 ;------------------------
                                   2761 ; BASIC: RETURN 
                                   2762 ; exit from a subroutine 
                                   2763 ; 
                                   2764 ;------------------------
      001D80                       2765 return:
      001D80 72 00 00 21 05   [ 2] 2766 	btjt flags,#FRUN,0$ 
      001D85 A6 06            [ 1] 2767 	ld a,#ERR_RUN_ONLY
      001D87 CC 11 93         [ 2] 2768 	jp tb_error 
      001D8A                       2769 0$:	
      001D8A 1E 03            [ 2] 2770 	ldw x,(RET_ADDR,sp) 
      001D8C CF 00 04         [ 2] 2771 	ldw basicptr,x
      001D8F E6 02            [ 1] 2772 	ld a,(2,x)
      001D91 C7 00 03         [ 1] 2773 	ld count,a  
      001D94 1E 05            [ 2] 2774 	ldw x,(RET_INW,sp)
      001D96 CF 00 00         [ 2] 2775 	ldw in.w,x 
      001D99 85               [ 2] 2776 	popw x 
      001D9A                       2777 	_drop VSIZE 
      001D9A 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D9C 89               [ 2] 2778 	pushw x
      001D9D 81               [ 4] 2779 	ret  
                                   2780 
                                   2781 
                                   2782 ;----------------------------------
                                   2783 ; BASIC: RUN
                                   2784 ; run BASIC program in RAM
                                   2785 ;----------------------------------- 
      001D9E                       2786 run: 
      001D9E 72 01 00 21 02   [ 2] 2787 	btjf flags,#FRUN,0$  
      001DA3 4F               [ 1] 2788 	clr a 
      001DA4 81               [ 4] 2789 	ret
      001DA5                       2790 0$: 
      001DA5 72 09 00 21 12   [ 2] 2791 	btjf flags,#FBREAK,1$
      001DAA                       2792 	_drop 2 
      001DAA 5B 02            [ 2]    1     addw sp,#2 
      001DAC CD 1A 3A         [ 4] 2793 	call rest_context
      001DAF                       2794 	_drop CTXT_SIZE 
      001DAF 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001DB1 72 19 00 21      [ 1] 2795 	bres flags,#FBREAK 
      001DB5 72 10 00 21      [ 1] 2796 	bset flags,#FRUN 
      001DB9 CC 12 34         [ 2] 2797 	jp interpreter 
      001DBC CE 00 1A         [ 2] 2798 1$:	ldw x,txtbgn
      001DBF C3 00 1C         [ 2] 2799 	cpw x,txtend 
      001DC2 2B 0C            [ 1] 2800 	jrmi run_it 
      001DC4 AE 11 2A         [ 2] 2801 	ldw x,#err_no_prog
      001DC7 CD 03 4E         [ 4] 2802 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001DCA 55 00 03 00 01   [ 1] 2803 	mov in,count
      001DCF 81               [ 4] 2804 	ret 
      001DD0                       2805 run_it:	 
      001DD0 CD 18 8E         [ 4] 2806     call ubound 
      001DD3                       2807 	_drop 2 ; drop return address 
      001DD3 5B 02            [ 2]    1     addw sp,#2 
                                   2808 ; clear data pointer 
      001DD5 5F               [ 1] 2809 	clrw x 
      001DD6 CF 00 06         [ 2] 2810 	ldw data_ptr,x 
      001DD9 72 5F 00 08      [ 1] 2811 	clr data_ofs 
      001DDD 72 5F 00 09      [ 1] 2812 	clr data_len 
                                   2813 ; initialize BASIC pointer 
      001DE1 CE 00 1A         [ 2] 2814 	ldw x,txtbgn 
      001DE4 CF 00 04         [ 2] 2815 	ldw basicptr,x 
      001DE7 E6 02            [ 1] 2816 	ld a,(2,x)
      001DE9 C7 00 03         [ 1] 2817 	ld count,a
      001DEC 35 03 00 01      [ 1] 2818 	mov in,#3	
      001DF0 72 10 00 21      [ 1] 2819 	bset flags,#FRUN 
      001DF4 CC 12 34         [ 2] 2820 	jp interpreter 
                                   2821 
                                   2822 
                                   2823 ;----------------------
                                   2824 ; BASIC: END
                                   2825 ; end running program
                                   2826 ;---------------------- 
      001DF7                       2827 cmd_end: 
                                   2828 ; clean stack 
      001DF7 AE 17 FF         [ 2] 2829 	ldw x,#STACK_EMPTY
      001DFA 94               [ 1] 2830 	ldw sp,x 
      001DFB CC 12 15         [ 2] 2831 	jp warm_start
                                   2832 
                                   2833 ;---------------------------
                                   2834 ; BASIC: GET var 
                                   2835 ; receive a key in variable 
                                   2836 ; don't wait 
                                   2837 ;---------------------------
      001DFE                       2838 cmd_get:
      001DFE CD 12 89         [ 4] 2839 	call next_token 
      001E01 A1 85            [ 1] 2840 	cp a,#TK_VAR 
      001E03 27 03            [ 1] 2841 	jreq 0$
      001E05 CC 11 91         [ 2] 2842 	jp syntax_error 
      001E08 CF 00 18         [ 2] 2843 0$: ldw ptr16,x 
      001E0B CD 02 FA         [ 4] 2844 	call qgetc 
      001E0E 27 03            [ 1] 2845 	jreq 2$
      001E10 CD 03 01         [ 4] 2846 	call getc  
      001E13 72 3F 00 18      [ 4] 2847 2$: clr [ptr16]
      001E17 72 5C 00 19      [ 1] 2848 	inc ptr8 
      001E1B 72 C7 00 18      [ 4] 2849 	ld [ptr16],a 
      001E1F 81               [ 4] 2850 	ret 
                                   2851 
                                   2852 
                                   2853 ;-----------------
                                   2854 ; 1 Khz beep 
                                   2855 ;-----------------
      001E20                       2856 beep_1khz:: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001E20 AE 00 64         [ 2] 2857 	ldw x,#100
      001E23 90 AE 03 E8      [ 2] 2858 	ldw y,#1000
      001E27 20 0D            [ 2] 2859 	jra beep
                                   2860 
                                   2861 ;-----------------------
                                   2862 ; BASIC: TONE expr1,expr2
                                   2863 ; used TIMER2 channel 1
                                   2864 ; to produce a tone 
                                   2865 ; arguments:
                                   2866 ;    expr1   frequency 
                                   2867 ;    expr2   duration msec.
                                   2868 ;---------------------------
      001E29                       2869 tone:
      001E29 CD 16 35         [ 4] 2870 	call arg_list 
      001E2C A1 02            [ 1] 2871 	cp a,#2 
      001E2E 27 03            [ 1] 2872 	jreq 1$
      001E30 CC 11 91         [ 2] 2873 	jp syntax_error 
      001E33                       2874 1$: 
      001E33 85               [ 2] 2875 	popw x ; duration
      001E34 90 85            [ 2] 2876 	popw y ; frequency 
      001E36                       2877 beep:  
      001E36 89               [ 2] 2878 	pushw x 
      001E37 AE F4 24         [ 2] 2879 	ldw x,#TIM2_CLK_FREQ
      001E3A 65               [ 2] 2880 	divw x,y 
                                   2881 ; round to nearest integer 
      001E3B 90 A3 7A 12      [ 2] 2882 	cpw y,#TIM2_CLK_FREQ/2
      001E3F 2B 01            [ 1] 2883 	jrmi 2$
      001E41 5C               [ 1] 2884 	incw x 
      001E42                       2885 2$:	 
      001E42 9E               [ 1] 2886 	ld a,xh 
      001E43 C7 53 0D         [ 1] 2887 	ld TIM2_ARRH,a 
      001E46 9F               [ 1] 2888 	ld a,xl 
      001E47 C7 53 0E         [ 1] 2889 	ld TIM2_ARRL,a 
                                   2890 ; 50% duty cycle 
      001E4A 8C               [ 1] 2891 	ccf 
      001E4B 56               [ 2] 2892 	rrcw x 
      001E4C 9E               [ 1] 2893 	ld a,xh 
      001E4D C7 53 0F         [ 1] 2894 	ld TIM2_CCR1H,a 
      001E50 9F               [ 1] 2895 	ld a,xl
      001E51 C7 53 10         [ 1] 2896 	ld TIM2_CCR1L,a
      001E54 72 10 53 08      [ 1] 2897 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001E58 72 10 53 00      [ 1] 2898 	bset TIM2_CR1,#TIM2_CR1_CEN
      001E5C 72 10 53 04      [ 1] 2899 	bset TIM2_EGR,#TIM2_EGR_UG
      001E60 85               [ 2] 2900 	popw x 
      001E61 CD 21 F9         [ 4] 2901 	call pause02
      001E64 72 11 53 08      [ 1] 2902 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001E68 72 11 53 00      [ 1] 2903 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001E6C 81               [ 4] 2904 	ret 
                                   2905 
                                   2906 ;-------------------------------
                                   2907 ; BASIC: ADCON 0|1 [,divisor]  
                                   2908 ; disable/enanble ADC 
                                   2909 ;-------------------------------
                           000003  2910 	ONOFF=3 
                           000001  2911 	DIVSOR=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                           000004  2912 	VSIZE=4 
      001E6D                       2913 power_adc:
      001E6D CD 16 35         [ 4] 2914 	call arg_list 
      001E70 A1 02            [ 1] 2915 	cp a,#2	
      001E72 27 0B            [ 1] 2916 	jreq 1$
      001E74 A1 01            [ 1] 2917 	cp a,#1 
      001E76 27 03            [ 1] 2918 	jreq 0$ 
      001E78 CC 11 91         [ 2] 2919 	jp syntax_error 
      001E7B AE 00 00         [ 2] 2920 0$: ldw x,#0
      001E7E 89               [ 2] 2921 	pushw x  ; divisor 
      001E7F 1E 03            [ 2] 2922 1$: ldw x,(ONOFF,sp)
      001E81 5D               [ 2] 2923 	tnzw x 
      001E82 27 1A            [ 1] 2924 	jreq 2$ 
      001E84 1E 01            [ 2] 2925 	ldw x,(DIVSOR,sp) ; divisor 
      001E86 9F               [ 1] 2926 	ld a,xl
      001E87 A4 07            [ 1] 2927 	and a,#7
      001E89 4E               [ 1] 2928 	swap a 
      001E8A C7 54 01         [ 1] 2929 	ld ADC_CR1,a
      001E8D 72 16 50 CA      [ 1] 2930 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001E91 72 10 54 01      [ 1] 2931 	bset ADC_CR1,#ADC_CR1_ADON 
      001E95                       2932 	_usec_dly 7 
      001E95 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001E98 5A               [ 2]    2     decw x
      001E99 9D               [ 1]    3     nop 
      001E9A 26 FA            [ 1]    4     jrne .-4
      001E9C 20 08            [ 2] 2933 	jra 3$
      001E9E 72 11 54 01      [ 1] 2934 2$: bres ADC_CR1,#ADC_CR1_ADON
      001EA2 72 17 50 CA      [ 1] 2935 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001EA6                       2936 3$:	_drop VSIZE 
      001EA6 5B 04            [ 2]    1     addw sp,#VSIZE 
      001EA8 81               [ 4] 2937 	ret
                                   2938 
                                   2939 ;-----------------------------
                                   2940 ; BASIC: ADCREAD (channel)
                                   2941 ; read adc channel {0..5}
                                   2942 ; output:
                                   2943 ;   A 		TK_INTGR 
                                   2944 ;   X 		value 
                                   2945 ;-----------------------------
      001EA9                       2946 analog_read:
      001EA9 CD 16 30         [ 4] 2947 	call func_args 
      001EAC A1 01            [ 1] 2948 	cp a,#1 
      001EAE 27 03            [ 1] 2949 	jreq 1$
      001EB0 CC 11 91         [ 2] 2950 	jp syntax_error
      001EB3 85               [ 2] 2951 1$: popw x 
      001EB4 A3 00 05         [ 2] 2952 	cpw x,#5 
      001EB7 23 05            [ 2] 2953 	jrule 2$
      001EB9 A6 0A            [ 1] 2954 	ld a,#ERR_BAD_VALUE
      001EBB CC 11 93         [ 2] 2955 	jp tb_error 
      001EBE 9F               [ 1] 2956 2$: ld a,xl
      001EBF C7 00 0E         [ 1] 2957 	ld acc8,a 
      001EC2 A6 05            [ 1] 2958 	ld a,#5
      001EC4 C0 00 0E         [ 1] 2959 	sub a,acc8 
      001EC7 C7 54 00         [ 1] 2960 	ld ADC_CSR,a
      001ECA 72 16 54 02      [ 1] 2961 	bset ADC_CR2,#ADC_CR2_ALIGN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001ECE 72 10 54 01      [ 1] 2962 	bset ADC_CR1,#ADC_CR1_ADON
      001ED2 72 0F 54 00 FB   [ 2] 2963 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001ED7 CE 54 04         [ 2] 2964 	ldw x,ADC_DRH
      001EDA A6 84            [ 1] 2965 	ld a,#TK_INTGR
      001EDC 81               [ 4] 2966 	ret 
                                   2967 
                                   2968 ;-----------------------
                                   2969 ; BASIC: DREAD(pin)
                                   2970 ; Arduino pins 
                                   2971 ; read state of a digital pin 
                                   2972 ; pin# {0..15}
                                   2973 ; output:
                                   2974 ;    A 		TK_INTGR
                                   2975 ;    X      0|1 
                                   2976 ;-------------------------
                           000001  2977 	PINNO=1
                           000001  2978 	VSIZE=1
      001EDD                       2979 digital_read:
      001EDD                       2980 	_vars VSIZE 
      001EDD 52 01            [ 2]    1     sub sp,#VSIZE 
      001EDF CD 16 30         [ 4] 2981 	call func_args
      001EE2 A1 01            [ 1] 2982 	cp a,#1
      001EE4 27 03            [ 1] 2983 	jreq 1$
      001EE6 CC 11 91         [ 2] 2984 	jp syntax_error
      001EE9 85               [ 2] 2985 1$: popw x 
      001EEA A3 00 0F         [ 2] 2986 	cpw x,#15 
      001EED 23 05            [ 2] 2987 	jrule 2$
      001EEF A6 0A            [ 1] 2988 	ld a,#ERR_BAD_VALUE
      001EF1 CC 11 93         [ 2] 2989 	jp tb_error 
      001EF4 CD 23 37         [ 4] 2990 2$:	call select_pin 
      001EF7 6B 01            [ 1] 2991 	ld (PINNO,sp),a
      001EF9 E6 01            [ 1] 2992 	ld a,(GPIO_IDR,x)
      001EFB 0D 01            [ 1] 2993 	tnz (PINNO,sp)
      001EFD 27 05            [ 1] 2994 	jreq 8$
      001EFF 44               [ 1] 2995 3$: srl a 
      001F00 0A 01            [ 1] 2996 	dec (PINNO,sp)
      001F02 26 FB            [ 1] 2997 	jrne 3$ 
      001F04 A4 01            [ 1] 2998 8$: and a,#1 
      001F06 5F               [ 1] 2999 	clrw x 
      001F07 97               [ 1] 3000 	ld xl,a 
      001F08 A6 84            [ 1] 3001 	ld a,#TK_INTGR
      001F0A                       3002 	_drop VSIZE
      001F0A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F0C 81               [ 4] 3003 	ret
                                   3004 
                                   3005 
                                   3006 ;-----------------------
                                   3007 ; BASIC: DWRITE pin,0|1
                                   3008 ; Arduino pins 
                                   3009 ; write to a digital pin 
                                   3010 ; pin# {0..15}
                                   3011 ; output:
                                   3012 ;    A 		TK_INTGR
                                   3013 ;    X      0|1 
                                   3014 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                           000001  3015 	PINNO=1
                           000002  3016 	PINVAL=2
                           000002  3017 	VSIZE=2
      001F0D                       3018 digital_write:
      001F0D                       3019 	_vars VSIZE 
      001F0D 52 02            [ 2]    1     sub sp,#VSIZE 
      001F0F CD 16 35         [ 4] 3020 	call arg_list  
      001F12 A1 02            [ 1] 3021 	cp a,#2 
      001F14 27 03            [ 1] 3022 	jreq 1$
      001F16 CC 11 91         [ 2] 3023 	jp syntax_error
      001F19 85               [ 2] 3024 1$: popw x 
      001F1A 9F               [ 1] 3025 	ld a,xl 
      001F1B 6B 02            [ 1] 3026 	ld (PINVAL,sp),a
      001F1D 85               [ 2] 3027 	popw x 
      001F1E A3 00 0F         [ 2] 3028 	cpw x,#15 
      001F21 23 05            [ 2] 3029 	jrule 2$
      001F23 A6 0A            [ 1] 3030 	ld a,#ERR_BAD_VALUE
      001F25 CC 11 93         [ 2] 3031 	jp tb_error 
      001F28 CD 23 37         [ 4] 3032 2$:	call select_pin 
      001F2B 6B 01            [ 1] 3033 	ld (PINNO,sp),a 
      001F2D A6 01            [ 1] 3034 	ld a,#1
      001F2F 0D 01            [ 1] 3035 	tnz (PINNO,sp)
      001F31 27 05            [ 1] 3036 	jreq 4$
      001F33 48               [ 1] 3037 3$: sll a
      001F34 0A 01            [ 1] 3038 	dec (PINNO,sp)
      001F36 26 FB            [ 1] 3039 	jrne 3$
      001F38 0D 02            [ 1] 3040 4$: tnz (PINVAL,sp)
      001F3A 26 05            [ 1] 3041 	jrne 5$
      001F3C 43               [ 1] 3042 	cpl a 
      001F3D E4 00            [ 1] 3043 	and a,(GPIO_ODR,x)
      001F3F 20 02            [ 2] 3044 	jra 8$
      001F41 EA 00            [ 1] 3045 5$: or a,(GPIO_ODR,x)
      001F43 E7 00            [ 1] 3046 8$: ld (GPIO_ODR,x),a 
      001F45                       3047 	_drop VSIZE 
      001F45 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F47 81               [ 4] 3048 	ret
                                   3049 
                                   3050 
                                   3051 ;-----------------------
                                   3052 ; BASIC: STOP
                                   3053 ; stop progam execution  
                                   3054 ; without resetting pointers 
                                   3055 ; the program is resumed
                                   3056 ; with RUN 
                                   3057 ;-------------------------
      001F48                       3058 stop:
      001F48 72 00 00 21 02   [ 2] 3059 	btjt flags,#FRUN,2$
      001F4D 4F               [ 1] 3060 	clr a
      001F4E 81               [ 4] 3061 	ret 
      001F4F                       3062 2$:	 
                                   3063 ; create space on cstack to save context 
      001F4F AE 1F 76         [ 2] 3064 	ldw x,#break_point 
      001F52 CD 03 4E         [ 4] 3065 	call puts 
      001F55                       3066 	_drop 2 ;drop return address 
      001F55 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F57                       3067 	_vars CTXT_SIZE ; context size 
      001F57 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001F59 CD 1A 2A         [ 4] 3068 	call save_context 
      001F5C AE 16 90         [ 2] 3069 	ldw x,#tib 
      001F5F CF 00 04         [ 2] 3070 	ldw basicptr,x
      001F62 7F               [ 1] 3071 	clr (x)
      001F63 72 5F 00 03      [ 1] 3072 	clr count  
      001F67 5F               [ 1] 3073 	clrw x 
      001F68 CF 00 00         [ 2] 3074 	ldw in.w,x
      001F6B 72 11 00 21      [ 1] 3075 	bres flags,#FRUN 
      001F6F 72 18 00 21      [ 1] 3076 	bset flags,#FBREAK
      001F73 CC 12 34         [ 2] 3077 	jp interpreter 
      001F76 0A 62 72 65 61 6B 20  3078 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3079 
                                   3080 ;-----------------------
                                   3081 ; BASIC: NEW
                                   3082 ; from command line only 
                                   3083 ; free program memory
                                   3084 ; and clear variables 
                                   3085 ;------------------------
      001F94                       3086 new: 
      001F94 72 01 00 21 01   [ 2] 3087 	btjf flags,#FRUN,0$ 
      001F99 81               [ 4] 3088 	ret 
      001F9A                       3089 0$:	
      001F9A CD 0F F9         [ 4] 3090 	call clear_basic 
      001F9D 81               [ 4] 3091 	ret 
                                   3092 
                                   3093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3094 ;;;  flash memory operations
                                   3095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3096 
                                   3097 ;--------------------------
                                   3098 ; align farptr to BLOCK_SIZE 
                                   3099 ;---------------------------
      001F9E                       3100 row_align:
      001F9E A6 7F            [ 1] 3101 	ld a,#0x7f 
      001FA0 C4 00 19         [ 1] 3102 	and a,farptr+2 
      001FA3 27 13            [ 1] 3103 	jreq 1$ 
      001FA5 CE 00 18         [ 2] 3104 	ldw x,farptr+1 
      001FA8 1C 00 80         [ 2] 3105 	addw x,#BLOCK_SIZE 
      001FAB 24 04            [ 1] 3106 	jrnc 0$
      001FAD 72 5C 00 17      [ 1] 3107 	inc farptr 
      001FB1 9F               [ 1] 3108 0$: ld a,xl 
      001FB2 A4 80            [ 1] 3109 	and a,#0x80
      001FB4 97               [ 1] 3110 	ld xl,a
      001FB5 CF 00 18         [ 2] 3111 	ldw farptr+1,x  	
      001FB8 81               [ 4] 3112 1$:	ret
                                   3113 
                                   3114 ;--------------------
                                   3115 ; input:
                                   3116 ;   X     increment 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   3117 ; output:
                                   3118 ;   farptr  incremented 
                                   3119 ;---------------------
      001FB9                       3120 incr_farptr:
      001FB9 72 BB 00 18      [ 2] 3121 	addw x,farptr+1 
      001FBD 24 04            [ 1] 3122 	jrnc 1$
      001FBF 72 5C 00 17      [ 1] 3123 	inc farptr 
      001FC3 CF 00 18         [ 2] 3124 1$:	ldw farptr+1,x  
      001FC6 81               [ 4] 3125 	ret 
                                   3126 
                                   3127 ;-----------------------------------
                                   3128 ; scan block for non zero byte 
                                   3129 ; block are 128 bytes 
                                   3130 ; input:
                                   3131 ;    farptr     address block  
                                   3132 ; output:
                                   3133 ;     A     0 cleared, other not cleared  
                                   3134 ;-----------------------------------
      001FC7                       3135 scan_block:
      001FC7 5F               [ 1] 3136 	clrw x 
      001FC8 92 AF 00 17      [ 5] 3137 1$: ldf a,([farptr],x) 
      001FCC 26 06            [ 1] 3138 	jrne 2$
      001FCE 5C               [ 1] 3139 	incw x 
      001FCF A3 00 80         [ 2] 3140 	cpw x,#BLOCK_SIZE 
      001FD2 25 F4            [ 1] 3141 	jrult 1$ 
      001FD4 81               [ 4] 3142 2$:	ret 
                                   3143 
                                   3144 
                                   3145 
                                   3146 ;-----------------------------------
                                   3147 ; BASIC: ERASE \E | \F 
                                   3148 ; erase all block in range from 
                                   3149 ;  'app_space' to FLASH end (0x20000)
                                   3150 ;  or all EEPROM 
                                   3151 ; that contains a non zero byte.  
                                   3152 ;-----------------------------------
                           000001  3153 	LIMIT=1 
                           000003  3154 	VSIZE = 3 
      001FD5                       3155 erase:
      001FD5 72 5F 00 17      [ 1] 3156 	clr farptr 
      001FD9                       3157 	_vars VSIZE 
      001FD9 52 03            [ 2]    1     sub sp,#VSIZE 
      001FDB CD 12 89         [ 4] 3158 	call next_token 
      001FDE A1 03            [ 1] 3159 	cp a,#TK_CHAR 
      001FE0 27 03            [ 1] 3160 	jreq 0$ 
      001FE2 CC 11 91         [ 2] 3161 	jp syntax_error
      001FE5 9F               [ 1] 3162 0$: ld a,xl 
      001FE6 A4 DF            [ 1] 3163 	and a,#0XDF 
      001FE8 A1 45            [ 1] 3164 	cp a,#'E
      001FEA 26 0C            [ 1] 3165 	jrne 1$
      001FEC AE 40 00         [ 2] 3166 	ldw x,#EEPROM_BASE 
      001FEF CF 00 18         [ 2] 3167 	ldw farptr+1,x 
      001FF2 AE 47 FF         [ 2] 3168 	ldw x,#EEPROM_END
      001FF5 4F               [ 1] 3169 	clr a 
      001FF6 20 15            [ 2] 3170 	jra 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001FF8 A1 46            [ 1] 3171 1$: cp a,#'F 
      001FFA 27 06            [ 1] 3172 	jreq 2$
      001FFC AE 10 DB         [ 2] 3173 	ldw x,#err_bad_value
      001FFF CC 11 93         [ 2] 3174 	jp tb_error
      002002                       3175 2$:
      002002 AE 2C 00         [ 2] 3176 	ldw x,#app_sign 
      002005 CF 00 18         [ 2] 3177 	ldw farptr+1,x 
      002008 A6 02            [ 1] 3178 	ld a,#(FLASH_END>>16)&0XFF 
      00200A AE 7F FF         [ 2] 3179 	ldw x,#FLASH_END&0xffff
      00200D                       3180 3$:
      00200D 6B 01            [ 1] 3181 	ld (LIMIT,sp),a 
      00200F 1F 02            [ 2] 3182 	ldw (LIMIT+1,sp),x 
                                   3183  ; operation done from RAM
                                   3184  ; copy code to RAM in tib   
      002011 CD 01 11         [ 4] 3185 	call move_erase_to_ram
      002014                       3186 4$:	 
      002014 CD 1F C7         [ 4] 3187     call scan_block 
      002017 27 08            [ 1] 3188 	jreq 5$  ; block already erased 
      002019 A6 45            [ 1] 3189     ld a,#'E 
      00201B CD 02 F1         [ 4] 3190     call putc 
      00201E CD 01 8F         [ 4] 3191 	call block_erase   
                                   3192 ; this block is clean, next  
      002021 AE 00 80         [ 2] 3193 5$:	ldw x,#BLOCK_SIZE
      002024 CD 1F B9         [ 4] 3194 	call incr_farptr
                                   3195 ; check limit, 24 bit substraction  	
      002027 7B 01            [ 1] 3196 	ld a,(LIMIT,sp)
      002029 1E 02            [ 2] 3197 	ldw x,(LIMIT+1,sp)
      00202B 72 B0 00 18      [ 2] 3198 	subw x,farptr+1
      00202F C2 00 17         [ 1] 3199 	sbc a,farptr 
      002032 22 E0            [ 1] 3200 	jrugt 4$ 
      002034 CD 0F F9         [ 4] 3201 9$: call clear_basic
      002037                       3202 	_drop VSIZE 
      002037 5B 03            [ 2]    1     addw sp,#VSIZE 
      002039 81               [ 4] 3203 	ret 
                                   3204 	
                                   3205 
                                   3206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3207 ;  check for application signature 
                                   3208 ; output:
                                   3209 ;   Carry    0 app present 
                                   3210 ;            1 no app installed  
                                   3211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00203A                       3212 qsign: 
      00203A CE 2C 00         [ 2] 3213 	ldw x,app_sign 
      00203D C3 20 A2         [ 2] 3214 	cpw x,SIGNATURE ; "BC" 
      002040 81               [ 4] 3215 	ret 
                                   3216 
                                   3217 ;---------------------------------------
                                   3218 ; BASIC: SAVE
                                   3219 ; write application in RAM to FLASH
                                   3220 ;--------------------------------------
      002041                       3221 save_app:
      002041 CD 20 3A         [ 4] 3222 	call qsign 
      002044 26 09            [ 1] 3223 	jrne 1$
      002046 AE 20 A4         [ 2] 3224 	ldw x,#CANT_DO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002049 CD 03 4E         [ 4] 3225 	call puts 
      00204C CC 20 A1         [ 2] 3226 	jp 9$
      00204F                       3227 1$: 
      00204F CE 00 1A         [ 2] 3228 	ldw x,txtbgn
      002052 C3 00 1C         [ 2] 3229 	cpw x,txtend 
      002055 25 08            [ 1] 3230 	jrult 2$ 
      002057 AE 20 E3         [ 2] 3231 	ldw x,#NO_APP
      00205A CD 03 4E         [ 4] 3232 	call puts 
      00205D 20 42            [ 2] 3233 	jra 9$
      00205F                       3234 2$: 
                                   3235 ; block programming flash
                                   3236 ; must be done from RAM 
      00205F CD 01 51         [ 4] 3237 	call move_prg_to_ram
                                   3238 ; initialize farptr 
      002062 72 5F 00 17      [ 1] 3239 	clr farptr 
      002066 AE 2C 00         [ 2] 3240 	ldw x,#app_sign 
      002069 CF 00 18         [ 2] 3241 	ldw farptr+1,x 
                                   3242 ; write signature
      00206C CE 20 A2         [ 2] 3243 	ldw x,SIGNATURE ; "BC" 
      00206F CF 00 7C         [ 2] 3244 	ldw rsign,x 
      002072 CE 00 1C         [ 2] 3245 	ldw x,txtend 
      002075 72 B0 00 1A      [ 2] 3246 	subw x,txtbgn 
      002079 CF 00 7E         [ 2] 3247 	ldw rsize,x   
                                   3248 ;copy block to flash
      00207C AE 00 7C         [ 2] 3249 	ldw x,#rsign  
      00207F 1F 01            [ 2] 3250 	ldw (1,sp),x   
      002081 1E 01            [ 2] 3251 3$:	ldw x,(1,sp)
      002083 CD 01 6B         [ 4] 3252 	call write_row 
      002086 A6 2E            [ 1] 3253     ld a,#'. 
      002088 CD 02 F1         [ 4] 3254     call putc 
      00208B 1E 01            [ 2] 3255 	ldw x,(1,sp)
      00208D 1C 00 80         [ 2] 3256 	addw x,#BLOCK_SIZE
      002090 1F 01            [ 2] 3257 	ldw (1,sp),x  
      002092 C3 00 1C         [ 2] 3258 	cpw x,txtend 
      002095 24 08            [ 1] 3259 	jruge 8$
      002097 AE 00 80         [ 2] 3260 	ldw x,#BLOCK_SIZE 
      00209A CD 1F B9         [ 4] 3261 	call incr_farptr
      00209D 20 E2            [ 2] 3262 	jra 3$ 
      00209F                       3263 8$:	
      00209F                       3264 	_drop 2   
      00209F 5B 02            [ 2]    1     addw sp,#2 
      0020A1 81               [ 4] 3265 9$: ret 
                                   3266 
      0020A2 42 43                 3267 SIGNATURE: .ascii "BC"
      0020A4 43 61 6E 27 74 20 66  3268 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             62 65 66 6F 72 65 00
      0020E3 4E 6F 20 61 70 70 6C  3269 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



             20 69 6E 20 52 41 4D
             00
                                   3270 
                                   3271 ;---------------------
                                   3272 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3273 ; write 1 or more byte to FLASH or EEPROM
                                   3274 ; starting at address  
                                   3275 ; input:
                                   3276 ;   expr1  	is address 
                                   3277 ;   expr2,...,exprn   are bytes to write
                                   3278 ; output:
                                   3279 ;   none 
                                   3280 ;---------------------
                           000001  3281 	ADDR=1
                           000002  3282 	VSIZ=2 
      0020F9                       3283 write:
      0020F9                       3284 	_vars VSIZE 
      0020F9 52 03            [ 2]    1     sub sp,#VSIZE 
      0020FB 72 5F 00 17      [ 1] 3285 	clr farptr ; expect 16 bits address 
      0020FF CD 17 34         [ 4] 3286 	call expression
      002102 A1 84            [ 1] 3287 	cp a,#TK_INTGR 
      002104 27 03            [ 1] 3288 	jreq 0$
      002106 CC 11 91         [ 2] 3289 	jp syntax_error
      002109 1F 01            [ 2] 3290 0$: ldw (ADDR,sp),x 
      00210B CD 12 89         [ 4] 3291 	call next_token 
      00210E A1 09            [ 1] 3292 	cp a,#TK_COMMA 
      002110 27 02            [ 1] 3293 	jreq 1$ 
      002112 20 19            [ 2] 3294 	jra 9$ 
      002114 CD 17 34         [ 4] 3295 1$:	call expression
      002117 A1 84            [ 1] 3296 	cp a,#TK_INTGR
      002119 27 03            [ 1] 3297 	jreq 2$
      00211B CC 11 91         [ 2] 3298 	jp syntax_error
      00211E 9F               [ 1] 3299 2$:	ld a,xl 
      00211F 1E 01            [ 2] 3300 	ldw x,(ADDR,sp) 
      002121 CF 00 18         [ 2] 3301 	ldw farptr+1,x 
      002124 5F               [ 1] 3302 	clrw x 
      002125 CD 01 B0         [ 4] 3303 	call write_byte
      002128 1E 01            [ 2] 3304 	ldw x,(ADDR,sp)
      00212A 5C               [ 1] 3305 	incw x 
      00212B 20 DC            [ 2] 3306 	jra 0$ 
      00212D                       3307 9$:
      00212D                       3308 	_drop VSIZE
      00212D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00212F 81               [ 4] 3309 	ret 
                                   3310 
                                   3311 
                                   3312 ;---------------------
                                   3313 ;BASIC: CHAR(expr)
                                   3314 ; évaluate expression 
                                   3315 ; and take the 7 least 
                                   3316 ; bits as ASCII character
                                   3317 ; return a TK_CHAR 
                                   3318 ;---------------------
      002130                       3319 char:
      002130 CD 16 30         [ 4] 3320 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002133 A1 01            [ 1] 3321 	cp a,#1
      002135 27 03            [ 1] 3322 	jreq 1$
      002137 CC 11 91         [ 2] 3323 	jp syntax_error
      00213A 85               [ 2] 3324 1$:	popw x 
      00213B 9F               [ 1] 3325 	ld a,xl 
      00213C A4 7F            [ 1] 3326 	and a,#0x7f 
      00213E 97               [ 1] 3327 	ld xl,a
      00213F A6 03            [ 1] 3328 	ld a,#TK_CHAR
      002141 81               [ 4] 3329 	ret
                                   3330 
                                   3331 ;---------------------
                                   3332 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3333 ; extract first character 
                                   3334 ; of string argument 
                                   3335 ; return it as TK_INTGR 
                                   3336 ;---------------------
      002142                       3337 ascii:
      002142 A6 07            [ 1] 3338 	ld a,#TK_LPAREN
      002144 CD 16 23         [ 4] 3339 	call expect 
      002147 CD 12 89         [ 4] 3340 	call next_token 
      00214A A1 02            [ 1] 3341 	cp a,#TK_QSTR 
      00214C 27 0E            [ 1] 3342 	jreq 1$
      00214E A1 03            [ 1] 3343 	cp a,#TK_CHAR 
      002150 27 0D            [ 1] 3344 	jreq 2$ 
      002152 A1 82            [ 1] 3345 	cp a,#TK_CFUNC 
      002154 27 03            [ 1] 3346 	jreq 0$
      002156 CC 11 91         [ 2] 3347 	jp syntax_error
      002159 FD               [ 4] 3348 0$: call (x)
      00215A 20 03            [ 2] 3349 	jra 2$
      00215C                       3350 1$: 
      00215C F6               [ 1] 3351 	ld a,(x) 
      00215D 5F               [ 1] 3352 	clrw x
      00215E 97               [ 1] 3353 	ld xl,a 
      00215F                       3354 2$: 
      00215F 89               [ 2] 3355 	pushw x 
      002160 A6 08            [ 1] 3356 	ld a,#TK_RPAREN 
      002162 CD 16 23         [ 4] 3357 	call expect
      002165 85               [ 2] 3358 	popw x 
      002166 A6 84            [ 1] 3359 	ld a,#TK_INTGR 
      002168 81               [ 4] 3360 	ret 
                                   3361 
                                   3362 ;---------------------
                                   3363 ;BASIC: KEY
                                   3364 ; wait for a character 
                                   3365 ; received from STDIN 
                                   3366 ; input:
                                   3367 ;	none 
                                   3368 ; output:
                                   3369 ;	X 		ASCII character 
                                   3370 ;---------------------
      002169                       3371 key:
      002169 CD 03 01         [ 4] 3372 	call getc 
      00216C 5F               [ 1] 3373 	clrw x 
      00216D 97               [ 1] 3374 	ld xl,a 
      00216E A6 84            [ 1] 3375 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002170 81               [ 4] 3376 	ret
                                   3377 
                                   3378 ;----------------------
                                   3379 ; BASIC: QKEY
                                   3380 ; Return true if there 
                                   3381 ; is a character in 
                                   3382 ; waiting in STDIN 
                                   3383 ; input:
                                   3384 ;  none 
                                   3385 ; output:
                                   3386 ;   X 		0|-1 
                                   3387 ;-----------------------
      002171                       3388 qkey:: 
      002171 5F               [ 1] 3389 	clrw x 
      002172 C6 00 2B         [ 1] 3390 	ld a,rx1_head
      002175 C1 00 2C         [ 1] 3391 	cp a,rx1_tail 
      002178 27 01            [ 1] 3392 	jreq 9$ 
      00217A 53               [ 2] 3393 	cplw x 
      00217B A6 84            [ 1] 3394 9$: ld a,#TK_INTGR
      00217D 81               [ 4] 3395 	ret 
                                   3396 
                                   3397 ;---------------------
                                   3398 ; BASIC: GPIO(expr,reg)
                                   3399 ; return gpio address 
                                   3400 ; expr {0..8}
                                   3401 ; input:
                                   3402 ;   none 
                                   3403 ; output:
                                   3404 ;   X 		gpio register address
                                   3405 ;----------------------------
                           000003  3406 	PORT=3
                           000001  3407 	REG=1 
                           000004  3408 	VSIZE=4 
      00217E                       3409 gpio:
      00217E CD 16 30         [ 4] 3410 	call func_args 
      002181 A1 02            [ 1] 3411 	cp a,#2
      002183 27 03            [ 1] 3412 	jreq 1$
      002185 CC 11 91         [ 2] 3413 	jp syntax_error  
      002188                       3414 1$:	
      002188 1E 03            [ 2] 3415 	ldw x,(PORT,sp)
      00218A 2B 17            [ 1] 3416 	jrmi bad_port
      00218C A3 00 09         [ 2] 3417 	cpw x,#9
      00218F 2A 12            [ 1] 3418 	jrpl bad_port
      002191 A6 05            [ 1] 3419 	ld a,#5
      002193 42               [ 4] 3420 	mul x,a
      002194 1C 50 00         [ 2] 3421 	addw x,#GPIO_BASE 
      002197 1F 03            [ 2] 3422 	ldw (PORT,sp),x  
      002199 1E 01            [ 2] 3423 	ldw x,(REG,sp) 
      00219B 72 FB 03         [ 2] 3424 	addw x,(PORT,sp)
      00219E A6 84            [ 1] 3425 	ld a,#TK_INTGR
      0021A0                       3426 	_drop VSIZE 
      0021A0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021A2 81               [ 4] 3427 	ret
      0021A3                       3428 bad_port:
      0021A3 A6 0A            [ 1] 3429 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0021A5 CC 11 93         [ 2] 3430 	jp tb_error
                                   3431 
                                   3432 
                                   3433 ;-------------------------
                                   3434 ; BASIC: UFLASH 
                                   3435 ; return free flash address
                                   3436 ; input:
                                   3437 ;  none 
                                   3438 ; output:
                                   3439 ;	A		TK_INTGR
                                   3440 ;   X 		free address 
                                   3441 ;---------------------------
      0021A8                       3442 uflash:
      0021A8 CE 2C 00         [ 2] 3443 	ldw x,app_sign
      0021AB A3 10 93         [ 2] 3444 	cpw x,#4243 ; signature "BC" 
      0021AE 27 08            [ 1] 3445 	jreq 1$
      0021B0 CE 2C 02         [ 2] 3446 	ldw x,app_size 
      0021B3 1C 2C 04         [ 2] 3447 	addw x,#app
      0021B6 20 03            [ 2] 3448 	jra 2$
      0021B8 AE 2C 00         [ 2] 3449 1$:	ldw x,#app_space 
      0021BB A6 84            [ 1] 3450 2$:	ld a,#TK_INTGR 
      0021BD 81               [ 4] 3451 	ret 
                                   3452 
                                   3453 
                                   3454 ;---------------------
                                   3455 ; BASIC: USR(addr[,arg])
                                   3456 ; execute a function written 
                                   3457 ; in binary code.
                                   3458 ; binary fonction should 
                                   3459 ; return token attribute in A 
                                   3460 ; and value in X. 
                                   3461 ; input:
                                   3462 ;   addr	routine address 
                                   3463 ;   arg 	is an optional argument 
                                   3464 ; output:
                                   3465 ;   A 		token attribute 
                                   3466 ;   X       returned value 
                                   3467 ;---------------------
      0021BE                       3468 usr:
      0021BE 90 89            [ 2] 3469 	pushw y 	
      0021C0 CD 16 30         [ 4] 3470 	call func_args 
      0021C3 A1 01            [ 1] 3471 	cp a,#1 
      0021C5 27 07            [ 1] 3472 	jreq 2$
      0021C7 A1 02            [ 1] 3473 	cp a,#2
      0021C9 27 03            [ 1] 3474 	jreq 2$  
      0021CB CC 11 91         [ 2] 3475 	jp syntax_error 
      0021CE 90 85            [ 2] 3476 2$: popw y  ; arg|addr 
      0021D0 A1 01            [ 1] 3477 	cp a,#1
      0021D2 27 02            [ 1] 3478 	jreq 3$
      0021D4 85               [ 2] 3479 	popw x ; addr
      0021D5 51               [ 1] 3480 	exgw x,y 
      0021D6 90 FD            [ 4] 3481 3$: call (y)
      0021D8 90 85            [ 2] 3482 	popw y 
      0021DA 81               [ 4] 3483 	ret 
                                   3484 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   3485 ;------------------------------
                                   3486 ; BASIC: BYE 
                                   3487 ; halt mcu in its lowest power mode 
                                   3488 ; wait for reset or external interrupt
                                   3489 ; do a cold start on wakeup.
                                   3490 ;------------------------------
      0021DB                       3491 bye:
      0021DB 72 0D 52 30 FB   [ 2] 3492 	btjf UART1_SR,#UART_SR_TC,.
      0021E0 8E               [10] 3493 	halt
      0021E1 CC 0E D6         [ 2] 3494 	jp cold_start  
                                   3495 
                                   3496 ;----------------------------------
                                   3497 ; BASIC: SLEEP 
                                   3498 ; halt mcu until reset or external
                                   3499 ; interrupt.
                                   3500 ; Resume progam after SLEEP command
                                   3501 ;----------------------------------
      0021E4                       3502 sleep:
      0021E4 72 0D 52 30 FB   [ 2] 3503 	btjf UART1_SR,#UART_SR_TC,.
      0021E9 72 16 00 21      [ 1] 3504 	bset flags,#FSLEEP
      0021ED 8E               [10] 3505 	halt 
      0021EE 81               [ 4] 3506 	ret 
                                   3507 
                                   3508 ;-------------------------------
                                   3509 ; BASIC: PAUSE expr 
                                   3510 ; suspend execution for n msec.
                                   3511 ; input:
                                   3512 ;	none
                                   3513 ; output:
                                   3514 ;	none 
                                   3515 ;------------------------------
      0021EF                       3516 pause:
      0021EF CD 17 34         [ 4] 3517 	call expression
      0021F2 A1 84            [ 1] 3518 	cp a,#TK_INTGR
      0021F4 27 03            [ 1] 3519 	jreq pause02 
      0021F6 CC 11 91         [ 2] 3520 	jp syntax_error
      0021F9                       3521 pause02: 
      0021F9 5D               [ 2] 3522 1$: tnzw x 
      0021FA 27 04            [ 1] 3523 	jreq 2$
      0021FC 8F               [10] 3524 	wfi 
      0021FD 5A               [ 2] 3525 	decw x 
      0021FE 26 F9            [ 1] 3526 	jrne 1$
      002200 4F               [ 1] 3527 2$:	clr a 
      002201 81               [ 4] 3528 	ret 
                                   3529 
                                   3530 ;------------------------------
                                   3531 ; BASIC: AWU expr
                                   3532 ; halt mcu for 'expr' milliseconds
                                   3533 ; use Auto wakeup peripheral
                                   3534 ; all oscillators stopped except LSI
                                   3535 ; range: 1ms - 511ms
                                   3536 ; input:
                                   3537 ;  none
                                   3538 ; output:
                                   3539 ;  none:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   3540 ;------------------------------
      002202                       3541 awu:
      002202 CD 17 34         [ 4] 3542   call expression
      002205 A1 84            [ 1] 3543   cp a,#TK_INTGR
      002207 27 03            [ 1] 3544   jreq awu02
      002209 CC 11 91         [ 2] 3545   jp syntax_error
      00220C                       3546 awu02:
      00220C A3 14 00         [ 2] 3547   cpw x,#5120
      00220F 2B 0C            [ 1] 3548   jrmi 1$ 
      002211 35 0F 50 F2      [ 1] 3549   mov AWU_TBR,#15 
      002215 A6 1E            [ 1] 3550   ld a,#30
      002217 62               [ 2] 3551   div x,a
      002218 A6 10            [ 1] 3552   ld a,#16
      00221A 62               [ 2] 3553   div x,a 
      00221B 20 1E            [ 2] 3554   jra 4$
      00221D                       3555 1$: 
      00221D A3 08 00         [ 2] 3556   cpw x,#2048
      002220 2B 09            [ 1] 3557   jrmi 2$ 
      002222 35 0E 50 F2      [ 1] 3558   mov AWU_TBR,#14
      002226 A6 50            [ 1] 3559   ld a,#80
      002228 62               [ 2] 3560   div x,a 
      002229 20 10            [ 2] 3561   jra 4$   
      00222B                       3562 2$:
      00222B 35 07 50 F2      [ 1] 3563   mov AWU_TBR,#7
      00222F                       3564 3$:  
                                   3565 ; while X > 64  divide by 2 and increment AWU_TBR 
      00222F A3 00 40         [ 2] 3566   cpw x,#64 
      002232 23 07            [ 2] 3567   jrule 4$ 
      002234 72 5C 50 F2      [ 1] 3568   inc AWU_TBR 
      002238 54               [ 2] 3569   srlw x 
      002239 20 F4            [ 2] 3570   jra 3$ 
      00223B                       3571 4$:
      00223B 9F               [ 1] 3572   ld a, xl
      00223C 4A               [ 1] 3573   dec a 
      00223D 27 01            [ 1] 3574   jreq 5$
      00223F 4A               [ 1] 3575   dec a 	
      002240                       3576 5$: 
      002240 A4 3E            [ 1] 3577   and a,#0x3e 
      002242 C7 50 F1         [ 1] 3578   ld AWU_APR,a 
      002245 72 18 50 F0      [ 1] 3579   bset AWU_CSR,#AWU_CSR_AWUEN
      002249 8E               [10] 3580   halt 
                                   3581 
      00224A 81               [ 4] 3582   ret 
                                   3583 
                                   3584 ;------------------------------
                                   3585 ; BASIC: TICKS
                                   3586 ; return msec ticks counter value 
                                   3587 ; input:
                                   3588 ; 	none 
                                   3589 ; output:
                                   3590 ;	X 		TK_INTGR
                                   3591 ;-------------------------------
      00224B                       3592 get_ticks:
      00224B CE 00 0F         [ 2] 3593 	ldw x,ticks 
      00224E A6 84            [ 1] 3594 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002250 81               [ 4] 3595 	ret 
                                   3596 
                                   3597 
                                   3598 
                                   3599 ;------------------------------
                                   3600 ; BASIC: ABS(expr)
                                   3601 ; return absolute value of expr.
                                   3602 ; input:
                                   3603 ;   none
                                   3604 ; output:
                                   3605 ;   X     	positive integer
                                   3606 ;-------------------------------
      002251                       3607 abs:
      002251 CD 16 30         [ 4] 3608 	call func_args 
      002254 A1 01            [ 1] 3609 	cp a,#1 
      002256 27 03            [ 1] 3610 	jreq 0$ 
      002258 CC 11 91         [ 2] 3611 	jp syntax_error
      00225B                       3612 0$:  
      00225B 85               [ 2] 3613     popw x   
      00225C 9E               [ 1] 3614 	ld a,xh 
      00225D A5 80            [ 1] 3615 	bcp a,#0x80 
      00225F 27 01            [ 1] 3616 	jreq 2$ 
      002261 50               [ 2] 3617 	negw x 
      002262 A6 84            [ 1] 3618 2$: ld a,#TK_INTGR 
      002264 81               [ 4] 3619 	ret 
                                   3620 
                                   3621 ;------------------------------
                                   3622 ; BASIC: AND(expr1,expr2)
                                   3623 ; Apply bit AND relation between
                                   3624 ; the 2 arguments, i.e expr1 & expr2 
                                   3625 ; output:
                                   3626 ; 	A 		TK_INTGR
                                   3627 ;   X 		result 
                                   3628 ;------------------------------
      002265                       3629 bit_and:
      002265 CD 16 30         [ 4] 3630 	call func_args 
      002268 A1 02            [ 1] 3631 	cp a,#2
      00226A 27 03            [ 1] 3632 	jreq 1$
      00226C CC 11 91         [ 2] 3633 	jp syntax_error 
      00226F 85               [ 2] 3634 1$:	popw x 
      002270 9E               [ 1] 3635 	ld a,xh 
      002271 14 01            [ 1] 3636 	and a,(1,sp)
      002273 95               [ 1] 3637 	ld xh,a 
      002274 9F               [ 1] 3638 	ld a,xl
      002275 14 02            [ 1] 3639 	and a,(2,sp)
      002277 97               [ 1] 3640 	ld xl,a 
      002278                       3641 	_drop 2 
      002278 5B 02            [ 2]    1     addw sp,#2 
      00227A A6 84            [ 1] 3642 	ld a,#TK_INTGR
      00227C 81               [ 4] 3643 	ret
                                   3644 
                                   3645 ;------------------------------
                                   3646 ; BASIC: OR(expr1,expr2)
                                   3647 ; Apply bit OR relation between
                                   3648 ; the 2 arguments, i.e expr1 | expr2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                                   3649 ; output:
                                   3650 ; 	A 		TK_INTGR
                                   3651 ;   X 		result 
                                   3652 ;------------------------------
      00227D                       3653 bit_or:
      00227D CD 16 30         [ 4] 3654 	call func_args 
      002280 A1 02            [ 1] 3655 	cp a,#2
      002282 27 03            [ 1] 3656 	jreq 1$
      002284 CC 11 91         [ 2] 3657 	jp syntax_error 
      002287                       3658 1$: 
      002287 85               [ 2] 3659 	popw x 
      002288 9E               [ 1] 3660 	ld a,xh 
      002289 1A 01            [ 1] 3661 	or a,(1,sp)
      00228B 95               [ 1] 3662 	ld xh,a 
      00228C 9F               [ 1] 3663 	ld a,xl 
      00228D 1A 02            [ 1] 3664 	or a,(2,sp)
      00228F 97               [ 1] 3665 	ld xl,a 
      002290                       3666 	_drop 2 
      002290 5B 02            [ 2]    1     addw sp,#2 
      002292 A6 84            [ 1] 3667 	ld a,#TK_INTGR 
      002294 81               [ 4] 3668 	ret
                                   3669 
                                   3670 ;------------------------------
                                   3671 ; BASIC: XOR(expr1,expr2)
                                   3672 ; Apply bit XOR relation between
                                   3673 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3674 ; output:
                                   3675 ; 	A 		TK_INTGR
                                   3676 ;   X 		result 
                                   3677 ;------------------------------
      002295                       3678 bit_xor:
      002295 CD 16 30         [ 4] 3679 	call func_args 
      002298 A1 02            [ 1] 3680 	cp a,#2
      00229A 27 03            [ 1] 3681 	jreq 1$
      00229C CC 11 91         [ 2] 3682 	jp syntax_error 
      00229F                       3683 1$: 
      00229F 85               [ 2] 3684 	popw x 
      0022A0 9E               [ 1] 3685 	ld a,xh 
      0022A1 18 01            [ 1] 3686 	xor a,(1,sp)
      0022A3 95               [ 1] 3687 	ld xh,a 
      0022A4 9F               [ 1] 3688 	ld a,xl 
      0022A5 18 02            [ 1] 3689 	xor a,(2,sp)
      0022A7 97               [ 1] 3690 	ld xl,a 
      0022A8                       3691 	_drop 2 
      0022A8 5B 02            [ 2]    1     addw sp,#2 
      0022AA A6 84            [ 1] 3692 	ld a,#TK_INTGR 
      0022AC 81               [ 4] 3693 	ret 
                                   3694 
                                   3695 ;------------------------------
                                   3696 ; BASIC: LSHIFT(expr1,expr2)
                                   3697 ; logical shift left expr1 by 
                                   3698 ; expr2 bits 
                                   3699 ; output:
                                   3700 ; 	A 		TK_INTGR
                                   3701 ;   X 		result 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   3702 ;------------------------------
      0022AD                       3703 lshift:
      0022AD CD 16 30         [ 4] 3704 	call func_args
      0022B0 A1 02            [ 1] 3705 	cp a,#2 
      0022B2 27 03            [ 1] 3706 	jreq 1$
      0022B4 CC 11 91         [ 2] 3707 	jp syntax_error
      0022B7 90 85            [ 2] 3708 1$: popw y   
      0022B9 85               [ 2] 3709 	popw x 
      0022BA 90 5D            [ 2] 3710 	tnzw y 
      0022BC 27 05            [ 1] 3711 	jreq 4$
      0022BE 58               [ 2] 3712 2$:	sllw x 
      0022BF 90 5A            [ 2] 3713 	decw y 
      0022C1 26 FB            [ 1] 3714 	jrne 2$
      0022C3                       3715 4$:  
      0022C3 A6 84            [ 1] 3716 	ld a,#TK_INTGR
      0022C5 81               [ 4] 3717 	ret
                                   3718 
                                   3719 ;------------------------------
                                   3720 ; BASIC: RSHIFT(expr1,expr2)
                                   3721 ; logical shift right expr1 by 
                                   3722 ; expr2 bits.
                                   3723 ; output:
                                   3724 ; 	A 		TK_INTGR
                                   3725 ;   X 		result 
                                   3726 ;------------------------------
      0022C6                       3727 rshift:
      0022C6 CD 16 30         [ 4] 3728 	call func_args
      0022C9 A1 02            [ 1] 3729 	cp a,#2 
      0022CB 27 03            [ 1] 3730 	jreq 1$
      0022CD CC 11 91         [ 2] 3731 	jp syntax_error
      0022D0 90 85            [ 2] 3732 1$: popw y  
      0022D2 85               [ 2] 3733 	popw x
      0022D3 90 5D            [ 2] 3734 	tnzw y 
      0022D5 27 05            [ 1] 3735 	jreq 4$
      0022D7 54               [ 2] 3736 2$:	srlw x 
      0022D8 90 5A            [ 2] 3737 	decw y 
      0022DA 26 FB            [ 1] 3738 	jrne 2$
      0022DC                       3739 4$:  
      0022DC A6 84            [ 1] 3740 	ld a,#TK_INTGR
      0022DE 81               [ 4] 3741 	ret
                                   3742 
                                   3743 ;--------------------------
                                   3744 ; BASIC: FCPU integer
                                   3745 ; set CPU frequency 
                                   3746 ;-------------------------- 
                                   3747 
      0022DF                       3748 fcpu:
      0022DF A6 84            [ 1] 3749 	ld a,#TK_INTGR
      0022E1 CD 16 23         [ 4] 3750 	call expect 
      0022E4 9F               [ 1] 3751 	ld a,xl 
      0022E5 A4 07            [ 1] 3752 	and a,#7 
      0022E7 C7 50 C6         [ 1] 3753 	ld CLK_CKDIVR,a 
      0022EA 81               [ 4] 3754 	ret 
                                   3755 
                                   3756 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   3757 ; BASIC: PMODE pin#, mode 
                                   3758 ; Arduino pin. 
                                   3759 ; define pin as input or output
                                   3760 ; pin#: {0..15}
                                   3761 ; mode: INPUT|OUTPUT  
                                   3762 ;------------------------------
                           000001  3763 	PINNO=1
                           000001  3764 	VSIZE=1
      0022EB                       3765 pin_mode:
      0022EB                       3766 	_vars VSIZE 
      0022EB 52 01            [ 2]    1     sub sp,#VSIZE 
      0022ED CD 16 35         [ 4] 3767 	call arg_list 
      0022F0 A1 02            [ 1] 3768 	cp a,#2 
      0022F2 27 03            [ 1] 3769 	jreq 1$
      0022F4 CC 11 91         [ 2] 3770 	jp syntax_error 
      0022F7 90 85            [ 2] 3771 1$: popw y ; mode 
      0022F9 85               [ 2] 3772 	popw x ; Dx pin 
      0022FA CD 23 37         [ 4] 3773 	call select_pin 
      0022FD 6B 01            [ 1] 3774 	ld (PINNO,sp),a  
      0022FF A6 01            [ 1] 3775 	ld a,#1 
      002301 0D 01            [ 1] 3776 	tnz (PINNO,sp)
      002303 27 0D            [ 1] 3777 	jreq 4$
      002305 48               [ 1] 3778 2$:	sll a 
      002306 0A 01            [ 1] 3779 	dec (PINNO,sp)
      002308 26 FB            [ 1] 3780 	jrne 2$ 
      00230A 6B 01            [ 1] 3781 	ld (PINNO,sp),a
      00230C 7B 01            [ 1] 3782 	ld a,(PINNO,sp)
      00230E EA 03            [ 1] 3783 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002310 E7 03            [ 1] 3784 	ld (GPIO_CR1,x),a 
      002312 90 A3 00 01      [ 2] 3785 4$:	cpw y,#OUTP 
      002316 27 10            [ 1] 3786 	jreq 6$
                                   3787 ; input mode
                                   3788 ; disable external interrupt 
      002318 7B 01            [ 1] 3789 	ld a,(PINNO,sp)
      00231A 43               [ 1] 3790 	cpl a 
      00231B E4 04            [ 1] 3791 	and a,(GPIO_CR2,x)
      00231D E7 04            [ 1] 3792 	ld (GPIO_CR2,x),a 
                                   3793 ;clear bit in DDR for input mode 
      00231F 7B 01            [ 1] 3794 	ld a,(PINNO,sp)
      002321 43               [ 1] 3795 	cpl a 
      002322 E4 02            [ 1] 3796 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002324 E7 02            [ 1] 3797 	ld (GPIO_DDR,x),a 
      002326 20 0C            [ 2] 3798 	jra 9$
      002328                       3799 6$: ;output mode  
      002328 7B 01            [ 1] 3800 	ld a,(PINNO,sp)
      00232A EA 02            [ 1] 3801 	or a,(GPIO_DDR,x) ; bit==1 for output 
      00232C E7 02            [ 1] 3802 	ld (GPIO_DDR,x),a 
      00232E 7B 01            [ 1] 3803 	ld a,(PINNO,sp)
      002330 EA 04            [ 1] 3804 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002332 E7 04            [ 1] 3805 	ld (GPIO_CR2,x),a 
      002334                       3806 9$:	
      002334                       3807 	_drop VSIZE 
      002334 5B 01            [ 2]    1     addw sp,#VSIZE 
      002336 81               [ 4] 3808 	ret
                                   3809 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                   3810 ;------------------------
                                   3811 ; select Arduino pin 
                                   3812 ; input:
                                   3813 ;   X 	 {0..15} Arduino Dx 
                                   3814 ; output:
                                   3815 ;   A     stm8s208 pin 
                                   3816 ;   X     base address s208 GPIO port 
                                   3817 ;---------------------------
      002337                       3818 select_pin:
      002337 58               [ 2] 3819 	sllw x 
      002338 1C 23 47         [ 2] 3820 	addw x,#arduino_to_8s208 
      00233B FE               [ 2] 3821 	ldw x,(x)
      00233C 9F               [ 1] 3822 	ld a,xl 
      00233D 88               [ 1] 3823 	push a 
      00233E 5E               [ 1] 3824 	swapw x 
      00233F A6 05            [ 1] 3825 	ld a,#5 
      002341 42               [ 4] 3826 	mul x,a 
      002342 1C 50 00         [ 2] 3827 	addw x,#GPIO_BASE 
      002345 84               [ 1] 3828 	pop a 
      002346 81               [ 4] 3829 	ret 
                                   3830 ; translation from Arduino D0..D15 to stm8s208rb 
      002347                       3831 arduino_to_8s208:
      002347 03 06                 3832 .byte 3,6 ; D0 
      002349 03 05                 3833 .byte 3,5 ; D1 
      00234B 04 00                 3834 .byte 4,0 ; D2 
      00234D 02 01                 3835 .byte 2,1 ; D3
      00234F 06 00                 3836 .byte 6,0 ; D4
      002351 02 02                 3837 .byte 2,2 ; D5
      002353 02 03                 3838 .byte 2,3 ; D6
      002355 03 01                 3839 .byte 3,1 ; D7
      002357 03 03                 3840 .byte 3,3 ; D8
      002359 02 04                 3841 .byte 2,4 ; D9
      00235B 04 05                 3842 .byte 4,5 ; D10
      00235D 02 06                 3843 .byte 2,6 ; D11
      00235F 02 07                 3844 .byte 2,7 ; D12
      002361 02 05                 3845 .byte 2,5 ; D13
      002363 04 02                 3846 .byte 4,2 ; D14
      002365 04 01                 3847 .byte 4,1 ; D15
                                   3848 
                                   3849 
                                   3850 ;------------------------------
                                   3851 ; BASIC: RND(expr)
                                   3852 ; return random number 
                                   3853 ; between 1 and expr inclusive
                                   3854 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3855 ; input:
                                   3856 ; 	none 
                                   3857 ; output:
                                   3858 ;	X 		random positive integer 
                                   3859 ;------------------------------
      002367                       3860 random:
      002367 CD 16 30         [ 4] 3861 	call func_args 
      00236A A1 01            [ 1] 3862 	cp a,#1
      00236C 27 03            [ 1] 3863 	jreq 1$
      00236E CC 11 91         [ 2] 3864 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002371                       3865 1$:  
      002371 A6 80            [ 1] 3866 	ld a,#0x80 
      002373 15 01            [ 1] 3867 	bcp a,(1,sp)
      002375 27 05            [ 1] 3868 	jreq 2$
      002377 A6 0A            [ 1] 3869 	ld a,#ERR_BAD_VALUE
      002379 CC 11 93         [ 2] 3870 	jp tb_error
      00237C                       3871 2$: 
                                   3872 ; acc16=(x<<5)^x 
      00237C CE 00 13         [ 2] 3873 	ldw x,seedx 
      00237F 58               [ 2] 3874 	sllw x 
      002380 58               [ 2] 3875 	sllw x 
      002381 58               [ 2] 3876 	sllw x 
      002382 58               [ 2] 3877 	sllw x 
      002383 58               [ 2] 3878 	sllw x 
      002384 9E               [ 1] 3879 	ld a,xh 
      002385 C8 00 13         [ 1] 3880 	xor a,seedx 
      002388 C7 00 0D         [ 1] 3881 	ld acc16,a 
      00238B 9F               [ 1] 3882 	ld a,xl 
      00238C C8 00 14         [ 1] 3883 	xor a,seedx+1 
      00238F C7 00 0E         [ 1] 3884 	ld acc8,a 
                                   3885 ; seedx=seedy 
      002392 CE 00 15         [ 2] 3886 	ldw x,seedy 
      002395 CF 00 13         [ 2] 3887 	ldw seedx,x  
                                   3888 ; seedy=seedy^(seedy>>1)
      002398 90 54            [ 2] 3889 	srlw y 
      00239A 90 9E            [ 1] 3890 	ld a,yh 
      00239C C8 00 15         [ 1] 3891 	xor a,seedy 
      00239F C7 00 15         [ 1] 3892 	ld seedy,a  
      0023A2 90 9F            [ 1] 3893 	ld a,yl 
      0023A4 C8 00 16         [ 1] 3894 	xor a,seedy+1 
      0023A7 C7 00 16         [ 1] 3895 	ld seedy+1,a 
                                   3896 ; acc16>>3 
      0023AA CE 00 0D         [ 2] 3897 	ldw x,acc16 
      0023AD 54               [ 2] 3898 	srlw x 
      0023AE 54               [ 2] 3899 	srlw x 
      0023AF 54               [ 2] 3900 	srlw x 
                                   3901 ; x=acc16^x 
      0023B0 9E               [ 1] 3902 	ld a,xh 
      0023B1 C8 00 0D         [ 1] 3903 	xor a,acc16 
      0023B4 95               [ 1] 3904 	ld xh,a 
      0023B5 9F               [ 1] 3905 	ld a,xl 
      0023B6 C8 00 0E         [ 1] 3906 	xor a,acc8 
      0023B9 97               [ 1] 3907 	ld xl,a 
                                   3908 ; seedy=x^seedy 
      0023BA C8 00 16         [ 1] 3909 	xor a,seedy+1
      0023BD 97               [ 1] 3910 	ld xl,a 
      0023BE 9E               [ 1] 3911 	ld a,xh 
      0023BF C8 00 15         [ 1] 3912 	xor a,seedy
      0023C2 95               [ 1] 3913 	ld xh,a 
      0023C3 CF 00 15         [ 2] 3914 	ldw seedy,x 
                                   3915 ; return seedy modulo expr + 1 
      0023C6 90 85            [ 2] 3916 	popw y 
      0023C8 65               [ 2] 3917 	divw x,y 
      0023C9 93               [ 1] 3918 	ldw x,y 
      0023CA 5C               [ 1] 3919 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0023CB                       3920 10$:
      0023CB A6 84            [ 1] 3921 	ld a,#TK_INTGR
      0023CD 81               [ 4] 3922 	ret 
                                   3923 
                                   3924 ;---------------------------------
                                   3925 ; BASIC: WORDS 
                                   3926 ; affiche la listes des mots du
                                   3927 ; dictionnaire ainsi que le nombre
                                   3928 ; de mots.
                                   3929 ;---------------------------------
                           000001  3930 	WLEN=1 ; word length
                           000002  3931 	LLEN=2 ; character sent to console
                           000003  3932 	WCNT=3 ; count words printed 
                           000003  3933 	VSIZE=3 
      0023CE                       3934 words:
      0023CE                       3935 	_vars VSIZE
      0023CE 52 03            [ 2]    1     sub sp,#VSIZE 
      0023D0 0F 02            [ 1] 3936 	clr (LLEN,sp)
      0023D2 0F 03            [ 1] 3937 	clr (WCNT,sp)
      0023D4 90 AE 2A BD      [ 2] 3938 	ldw y,#kword_dict+2
      0023D8 93               [ 1] 3939 0$:	ldw x,y
      0023D9 F6               [ 1] 3940 	ld a,(x)
      0023DA A4 0F            [ 1] 3941 	and a,#15 
      0023DC 6B 01            [ 1] 3942 	ld (WLEN,sp),a 
      0023DE 0C 03            [ 1] 3943 	inc (WCNT,sp)
      0023E0 5C               [ 1] 3944 1$:	incw x 
      0023E1 F6               [ 1] 3945 	ld a,(x)
      0023E2 CD 02 F1         [ 4] 3946 	call putc 
      0023E5 0C 02            [ 1] 3947 	inc (LLEN,sp)
      0023E7 0A 01            [ 1] 3948 	dec (WLEN,sp)
      0023E9 26 F5            [ 1] 3949 	jrne 1$
      0023EB A6 46            [ 1] 3950 	ld a,#70
      0023ED 11 02            [ 1] 3951 	cp a,(LLEN,sp)
      0023EF 2B 09            [ 1] 3952 	jrmi 2$   
      0023F1 A6 20            [ 1] 3953 	ld a,#SPACE 
      0023F3 CD 02 F1         [ 4] 3954 	call putc 
      0023F6 0C 02            [ 1] 3955 	inc (LLEN,sp) 
      0023F8 20 07            [ 2] 3956 	jra 3$
      0023FA A6 0D            [ 1] 3957 2$: ld a,#CR 
      0023FC CD 02 F1         [ 4] 3958 	call putc 
      0023FF 0F 02            [ 1] 3959 	clr (LLEN,sp)
      002401 72 A2 00 02      [ 2] 3960 3$:	subw y,#2 
      002405 90 FE            [ 2] 3961 	ldw y,(y)
      002407 26 CF            [ 1] 3962 	jrne 0$ 
      002409 A6 0D            [ 1] 3963 	ld a,#CR 
      00240B CD 02 F1         [ 4] 3964 	call putc  
      00240E 5F               [ 1] 3965 	clrw x 
      00240F 7B 03            [ 1] 3966 	ld a,(WCNT,sp)
      002411 97               [ 1] 3967 	ld xl,a 
      002412 CD 12 D7         [ 4] 3968 	call print_int 
      002415 AE 24 1E         [ 2] 3969 	ldw x,#words_count_msg
      002418 CD 03 4E         [ 4] 3970 	call puts 
      00241B                       3971 	_drop VSIZE 
      00241B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00241D 81               [ 4] 3972 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      00241E 20 77 6F 72 64 73 20  3973 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3974 
                                   3975 
                                   3976 ;-----------------------------
                                   3977 ; BASIC: TIMER expr 
                                   3978 ; initialize count down timer 
                                   3979 ;-----------------------------
      002434                       3980 set_timer:
      002434 CD 16 35         [ 4] 3981 	call arg_list
      002437 A1 01            [ 1] 3982 	cp a,#1 
      002439 27 03            [ 1] 3983 	jreq 1$
      00243B CC 11 91         [ 2] 3984 	jp syntax_error
      00243E                       3985 1$: 
      00243E 85               [ 2] 3986 	popw x 
      00243F CF 00 11         [ 2] 3987 	ldw timer,x 
      002442 81               [ 4] 3988 	ret 
                                   3989 
                                   3990 ;------------------------------
                                   3991 ; BASIC: TIMEOUT 
                                   3992 ; return state of timer 
                                   3993 ;------------------------------
      002443                       3994 timeout:
      002443 CE 00 11         [ 2] 3995 	ldw x,timer 
      002446                       3996 logical_complement:
      002446 53               [ 2] 3997 	cplw x 
      002447 A3 FF FF         [ 2] 3998 	cpw x,#-1
      00244A 27 01            [ 1] 3999 	jreq 2$
      00244C 5F               [ 1] 4000 	clrw x 
      00244D A6 84            [ 1] 4001 2$:	ld a,#TK_INTGR
      00244F 81               [ 4] 4002 	ret 
                                   4003 
                                   4004 ;--------------------------------
                                   4005 ; BASIC NOT(expr) 
                                   4006 ; return logical complement of expr
                                   4007 ;--------------------------------
      002450                       4008 func_not:
      002450 CD 16 30         [ 4] 4009 	call func_args  
      002453 A1 01            [ 1] 4010 	cp a,#1
      002455 27 03            [ 1] 4011 	jreq 1$
      002457 CC 11 91         [ 2] 4012 	jp syntax_error
      00245A 85               [ 2] 4013 1$:	popw x 
      00245B 20 E9            [ 2] 4014 	jra logical_complement
                                   4015 
                                   4016 
                                   4017 
                                   4018 ;-----------------------------------
                                   4019 ; BASIC: IWDGEN expr1 
                                   4020 ; enable independant watchdog timer
                                   4021 ; expr1 is delay in multiple of 62.5µsec
                                   4022 ; expr1 -> {1..16383}
                                   4023 ;-----------------------------------
      00245D                       4024 enable_iwdg:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      00245D CD 16 35         [ 4] 4025 	call arg_list
      002460 A1 01            [ 1] 4026 	cp a,#1 
      002462 27 03            [ 1] 4027 	jreq 1$
      002464 CC 11 91         [ 2] 4028 	jp syntax_error 
      002467 85               [ 2] 4029 1$: popw x 
      002468 4B 00            [ 1] 4030 	push #0
      00246A 35 CC 50 E0      [ 1] 4031 	mov IWDG_KR,#IWDG_KEY_ENABLE
      00246E 9E               [ 1] 4032 	ld a,xh 
      00246F A4 3F            [ 1] 4033 	and a,#0x3f
      002471 95               [ 1] 4034 	ld xh,a  
      002472 A3 00 FF         [ 2] 4035 2$:	cpw x,#255
      002475 23 06            [ 2] 4036 	jrule 3$
      002477 0C 01            [ 1] 4037 	inc (1,sp)
      002479 98               [ 1] 4038 	rcf 
      00247A 56               [ 2] 4039 	rrcw x 
      00247B 20 F5            [ 2] 4040 	jra 2$
      00247D 35 55 50 E0      [ 1] 4041 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002481 84               [ 1] 4042 	pop a  
      002482 C7 50 E1         [ 1] 4043 	ld IWDG_PR,a 
      002485 9F               [ 1] 4044 	ld a,xl
      002486 4A               [ 1] 4045 	dec a 
      002487 35 55 50 E0      [ 1] 4046 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      00248B C7 50 E2         [ 1] 4047 	ld IWDG_RLR,a 
      00248E 35 AA 50 E0      [ 1] 4048 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002492 81               [ 4] 4049 	ret 
                                   4050 
                                   4051 
                                   4052 ;-----------------------------------
                                   4053 ; BASIC: IWDGREF  
                                   4054 ; refresh independant watchdog count down 
                                   4055 ; timer before it reset MCU. 
                                   4056 ;-----------------------------------
      002493                       4057 refresh_iwdg:
      002493 35 AA 50 E0      [ 1] 4058 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002497 81               [ 4] 4059 	ret 
                                   4060 
                                   4061 
                                   4062 ;-------------------------------------
                                   4063 ; BASIC: LOG(expr)
                                   4064 ; return logarithm base 2 of expr 
                                   4065 ; this is the position of most significant
                                   4066 ; bit set. 
                                   4067 ; input: 
                                   4068 ; output:
                                   4069 ;   X     log2 
                                   4070 ;   A     TK_INTGR 
                                   4071 ;*********************************
      002498                       4072 log2:
      002498 CD 16 30         [ 4] 4073 	call func_args 
      00249B A1 01            [ 1] 4074 	cp a,#1 
      00249D 27 03            [ 1] 4075 	jreq 1$
      00249F CC 11 91         [ 2] 4076 	jp syntax_error 
      0024A2 85               [ 2] 4077 1$: popw x 
      0024A3                       4078 leading_one:
      0024A3 5D               [ 2] 4079 	tnzw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0024A4 27 0A            [ 1] 4080 	jreq 4$
      0024A6 A6 0F            [ 1] 4081 	ld a,#15 
      0024A8 59               [ 2] 4082 2$: rlcw x 
      0024A9 25 03            [ 1] 4083     jrc 3$
      0024AB 4A               [ 1] 4084 	dec a 
      0024AC 20 FA            [ 2] 4085 	jra 2$
      0024AE 5F               [ 1] 4086 3$: clrw x 
      0024AF 97               [ 1] 4087     ld xl,a
      0024B0 A6 84            [ 1] 4088 4$:	ld a,#TK_INTGR
      0024B2 81               [ 4] 4089 	ret 
                                   4090 
                                   4091 ;-----------------------------------
                                   4092 ; BASIC: BIT(expr) 
                                   4093 ; expr ->{0..15}
                                   4094 ; return 2^expr 
                                   4095 ; output:
                                   4096 ;    x    2^expr 
                                   4097 ;-----------------------------------
      0024B3                       4098 bitmask:
      0024B3 CD 16 30         [ 4] 4099     call func_args 
      0024B6 A1 01            [ 1] 4100 	cp a,#1
      0024B8 27 03            [ 1] 4101 	jreq 1$
      0024BA CC 11 91         [ 2] 4102 	jp syntax_error 
      0024BD 85               [ 2] 4103 1$: popw x 
      0024BE 9F               [ 1] 4104 	ld a,xl 
      0024BF A4 0F            [ 1] 4105 	and a,#15
      0024C1 5F               [ 1] 4106 	clrw x 
      0024C2 5C               [ 1] 4107 	incw x 
      0024C3 4D               [ 1] 4108 2$: tnz a 
      0024C4 27 04            [ 1] 4109 	jreq 3$
      0024C6 58               [ 2] 4110 	slaw x 
      0024C7 4A               [ 1] 4111 	dec a 
      0024C8 20 F9            [ 2] 4112 	jra 2$ 
      0024CA A6 84            [ 1] 4113 3$: ld a,#TK_INTGR
      0024CC 81               [ 4] 4114 	ret 
                                   4115 
                                   4116 ;------------------------------
                                   4117 ; BASIC: INVERT(expr)
                                   4118 ; 1's complement 
                                   4119 ;--------------------------------
      0024CD                       4120 invert:
      0024CD CD 16 30         [ 4] 4121 	call func_args
      0024D0 A1 01            [ 1] 4122 	cp a,#1 
      0024D2 27 03            [ 1] 4123 	jreq 1$
      0024D4 CC 11 91         [ 2] 4124 	jp syntax_error
      0024D7 85               [ 2] 4125 1$: popw x  
      0024D8 53               [ 2] 4126 	cplw x 
      0024D9 A6 84            [ 1] 4127 	ld a,#TK_INTGR 
      0024DB 81               [ 4] 4128 	ret 
                                   4129 
                                   4130 ;------------------------------
                                   4131 ; BASIC: DO 
                                   4132 ; initiate a DO ... UNTIL loop 
                                   4133 ;------------------------------
                           000003  4134 	DOLP_ADR=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                           000005  4135 	DOLP_INW=5
                           000004  4136 	VSIZE=4 
      0024DC                       4137 do_loop:
      0024DC 85               [ 2] 4138 	popw x 
      0024DD                       4139 	_vars VSIZE 
      0024DD 52 04            [ 2]    1     sub sp,#VSIZE 
      0024DF 89               [ 2] 4140 	pushw x 
      0024E0 90 CE 00 04      [ 2] 4141 	ldw y,basicptr 
      0024E4 17 03            [ 2] 4142 	ldw (DOLP_ADR,sp),y
      0024E6 90 CE 00 00      [ 2] 4143 	ldw y,in.w 
      0024EA 17 05            [ 2] 4144 	ldw (DOLP_INW,sp),y
      0024EC 72 5C 00 1E      [ 1] 4145 	inc loop_depth 
      0024F0 81               [ 4] 4146 	ret 
                                   4147 
                                   4148 ;--------------------------------
                                   4149 ; BASIC: UNTIL expr 
                                   4150 ; loop if exprssion is false 
                                   4151 ; else terminate loop
                                   4152 ;--------------------------------
      0024F1                       4153 until: 
      0024F1 72 5D 00 1E      [ 1] 4154 	tnz loop_depth 
      0024F5 26 03            [ 1] 4155 	jrne 1$ 
      0024F7 CC 11 91         [ 2] 4156 	jp syntax_error 
      0024FA                       4157 1$: 
      0024FA CD 17 7D         [ 4] 4158 	call relation 
      0024FD A1 84            [ 1] 4159 	cp a,#TK_INTGR
      0024FF 27 03            [ 1] 4160 	jreq 2$
      002501 CC 11 91         [ 2] 4161 	jp syntax_error
      002504                       4162 2$: 
      002504 5D               [ 2] 4163 	tnzw x 
      002505 26 10            [ 1] 4164 	jrne 9$
      002507 1E 03            [ 2] 4165 	ldw x,(DOLP_ADR,sp)
      002509 CF 00 04         [ 2] 4166 	ldw basicptr,x 
      00250C E6 02            [ 1] 4167 	ld a,(2,x)
      00250E C7 00 03         [ 1] 4168 	ld count,a 
      002511 1E 05            [ 2] 4169 	ldw x,(DOLP_INW,sp)
      002513 CF 00 00         [ 2] 4170 	ldw in.w,x 
      002516 81               [ 4] 4171 	ret 
      002517                       4172 9$:	; remove loop data from stack  
      002517 85               [ 2] 4173 	popw x
      002518                       4174 	_drop VSIZE
      002518 5B 04            [ 2]    1     addw sp,#VSIZE 
      00251A 72 5A 00 1E      [ 1] 4175 	dec loop_depth 
      00251E FC               [ 2] 4176 	jp (x)
                                   4177 
                                   4178 ;--------------------------
                                   4179 ; BASIC: PRTA...PRTI  
                                   4180 ;  return constant value 
                                   4181 ;  PORT  offset in GPIO
                                   4182 ;  array
                                   4183 ;---------------------------
      00251F                       4184 const_porta:
      00251F AE 00 00         [ 2] 4185 	ldw x,#0
      002522 A6 84            [ 1] 4186 	ld a,#TK_INTGR 
      002524 81               [ 4] 4187 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002525                       4188 const_portb:
      002525 AE 00 01         [ 2] 4189 	ldw x,#1
      002528 A6 84            [ 1] 4190 	ld a,#TK_INTGR 
      00252A 81               [ 4] 4191 	ret 
      00252B                       4192 const_portc:
      00252B AE 00 02         [ 2] 4193 	ldw x,#2
      00252E A6 84            [ 1] 4194 	ld a,#TK_INTGR 
      002530 81               [ 4] 4195 	ret 
      002531                       4196 const_portd:
      002531 AE 00 03         [ 2] 4197 	ldw x,#3
      002534 A6 84            [ 1] 4198 	ld a,#TK_INTGR 
      002536 81               [ 4] 4199 	ret 
      002537                       4200 const_porte:
      002537 AE 00 04         [ 2] 4201 	ldw x,#4
      00253A A6 84            [ 1] 4202 	ld a,#TK_INTGR 
      00253C 81               [ 4] 4203 	ret 
      00253D                       4204 const_portf:
      00253D AE 00 05         [ 2] 4205 	ldw x,#5
      002540 A6 84            [ 1] 4206 	ld a,#TK_INTGR 
      002542 81               [ 4] 4207 	ret 
      002543                       4208 const_portg:
      002543 AE 00 06         [ 2] 4209 	ldw x,#6
      002546 A6 84            [ 1] 4210 	ld a,#TK_INTGR 
      002548 81               [ 4] 4211 	ret 
      002549                       4212 const_porth:
      002549 AE 00 07         [ 2] 4213 	ldw x,#7
      00254C A6 84            [ 1] 4214 	ld a,#TK_INTGR 
      00254E 81               [ 4] 4215 	ret 
      00254F                       4216 const_porti:
      00254F AE 00 08         [ 2] 4217 	ldw x,#8
      002552 A6 84            [ 1] 4218 	ld a,#TK_INTGR 
      002554 81               [ 4] 4219 	ret 
                                   4220 
                                   4221 ;-------------------------------
                                   4222 ; following return constant 
                                   4223 ; related to GPIO register offset 
                                   4224 ;---------------------------------
      002555                       4225 const_odr:
      002555 A6 84            [ 1] 4226 	ld a,#TK_INTGR 
      002557 AE 00 00         [ 2] 4227 	ldw x,#GPIO_ODR
      00255A 81               [ 4] 4228 	ret 
      00255B                       4229 const_idr:
      00255B A6 84            [ 1] 4230 	ld a,#TK_INTGR 
      00255D AE 00 01         [ 2] 4231 	ldw x,#GPIO_IDR
      002560 81               [ 4] 4232 	ret 
      002561                       4233 const_ddr:
      002561 A6 84            [ 1] 4234 	ld a,#TK_INTGR 
      002563 AE 00 02         [ 2] 4235 	ldw x,#GPIO_DDR
      002566 81               [ 4] 4236 	ret 
      002567                       4237 const_cr1:
      002567 A6 84            [ 1] 4238 	ld a,#TK_INTGR 
      002569 AE 00 03         [ 2] 4239 	ldw x,#GPIO_CR1
      00256C 81               [ 4] 4240 	ret 
      00256D                       4241 const_cr2:
      00256D A6 84            [ 1] 4242 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00256F AE 00 04         [ 2] 4243 	ldw x,#GPIO_CR2
      002572 81               [ 4] 4244 	ret 
                                   4245 ;-------------------------
                                   4246 ; BASIC: POUT 
                                   4247 ;  constant for port mode
                                   4248 ;  used by PMODE 
                                   4249 ;  to set pin as output
                                   4250 ;------------------------
      002573                       4251 const_output:
      002573 A6 84            [ 1] 4252 	ld a,#TK_INTGR 
      002575 AE 00 01         [ 2] 4253 	ldw x,#OUTP
      002578 81               [ 4] 4254 	ret 
                                   4255 
                                   4256 ;-------------------------
                                   4257 ; BASIC: PINP 
                                   4258 ;  constant for port mode
                                   4259 ;  used by PMODE 
                                   4260 ;  to set pin as input
                                   4261 ;------------------------
      002579                       4262 const_input:
      002579 A6 84            [ 1] 4263 	ld a,#TK_INTGR 
      00257B AE 00 00         [ 2] 4264 	ldw x,#INP 
      00257E 81               [ 4] 4265 	ret 
                                   4266 	
                                   4267 ;-----------------------
                                   4268 ; memory area constants
                                   4269 ;-----------------------
      00257F                       4270 const_eeprom_base:
      00257F A6 84            [ 1] 4271 	ld a,#TK_INTGR 
      002581 AE 40 00         [ 2] 4272 	ldw x,#EEPROM_BASE 
      002584 81               [ 4] 4273 	ret 
                                   4274 
                                   4275 ;---------------------------
                                   4276 ; BASIC: DATA 
                                   4277 ; when the interpreter find 
                                   4278 ; a DATA line it skip it.
                                   4279 ;---------------------------
      002585                       4280 data:
      002585 55 00 03 00 01   [ 1] 4281 	mov in,count 
      00258A 81               [ 4] 4282 	ret 
                                   4283 
                                   4284 ;---------------------------
                                   4285 ; BASIC: DATLN  *expr*
                                   4286 ; set DATA pointer at line# 
                                   4287 ; specified by *expr* 
                                   4288 ;---------------------------
      00258B                       4289 data_line:
      00258B CD 17 34         [ 4] 4290 	call expression
      00258E A1 84            [ 1] 4291 	cp a,#TK_INTGR
      002590 27 03            [ 1] 4292 	jreq 1$
      002592 CC 11 91         [ 2] 4293 	jp syntax_error  
      002595 4F               [ 1] 4294 1$: clr a 
      002596 CD 06 36         [ 4] 4295 	call search_lineno
      002599 5D               [ 2] 4296 	tnzw x 
      00259A 26 05            [ 1] 4297 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      00259C A6 05            [ 1] 4298 2$:	ld a,#ERR_NO_LINE 
      00259E CC 11 93         [ 2] 4299 	jp tb_error
      0025A1                       4300 3$: ; check if valid data line 
      0025A1 90 93            [ 1] 4301     ldw y,x 
      0025A3 EE 04            [ 2] 4302 	ldw x,(4,x)
      0025A5 A3 25 85         [ 2] 4303 	cpw x,#data 
      0025A8 26 F2            [ 1] 4304 	jrne 2$ 
      0025AA 90 CF 00 06      [ 2] 4305 	ldw data_ptr,y
      0025AE 90 E6 02         [ 1] 4306 	ld a,(2,y)
      0025B1 C7 00 09         [ 1] 4307 	ld data_len,a 
      0025B4 35 06 00 08      [ 1] 4308 	mov data_ofs,#FIRST_DATA_ITEM 
      0025B8 81               [ 4] 4309 	ret
                                   4310 
                                   4311 ;---------------------------------
                                   4312 ; BASIC: RESTORE 
                                   4313 ; set data_ptr to first data line
                                   4314 ; if not DATA found pointer set to
                                   4315 ; zero 
                                   4316 ;---------------------------------
      0025B9                       4317 restore:
      0025B9 72 5F 00 06      [ 1] 4318 	clr data_ptr 
      0025BD 72 5F 00 07      [ 1] 4319 	clr data_ptr+1
      0025C1 72 5F 00 08      [ 1] 4320 	clr data_ofs 
      0025C5 72 5F 00 09      [ 1] 4321 	clr data_len
      0025C9 CE 00 1A         [ 2] 4322 	ldw x,txtbgn
      0025CC                       4323 data_search_loop: 	
      0025CC C3 00 1C         [ 2] 4324 	cpw x,txtend
      0025CF 24 1B            [ 1] 4325 	jruge 9$
      0025D1 90 93            [ 1] 4326 	ldw y,x 
      0025D3 EE 04            [ 2] 4327 	ldw x,(4,x)
      0025D5 1C 2A C3         [ 2] 4328 	addw x,#code_addr
      0025D8 FE               [ 2] 4329 	ldw x,(x)
      0025D9 A3 25 85         [ 2] 4330 	cpw x,#data 
      0025DC 26 1A            [ 1] 4331 	jrne try_next_line 
      0025DE 90 CF 00 06      [ 2] 4332 	ldw data_ptr,y 
      0025E2 90 E6 02         [ 1] 4333 	ld a,(2,y)
      0025E5 C7 00 09         [ 1] 4334 	ld data_len,a 
      0025E8 35 06 00 08      [ 1] 4335 	mov data_ofs,#FIRST_DATA_ITEM
      0025EC 72 5D 00 09      [ 1] 4336 9$:	tnz data_len 
      0025F0 26 05            [ 1] 4337     jrne 10$
      0025F2 A6 0C            [ 1] 4338 	ld a,#ERR_NO_DATA 
      0025F4 CC 11 93         [ 2] 4339 	jp tb_error 
      0025F7 81               [ 4] 4340 10$:ret
      0025F8                       4341 try_next_line:
      0025F8 93               [ 1] 4342 	ldw x,y 
      0025F9 E6 02            [ 1] 4343 	ld a,(2,x)
      0025FB C7 00 0E         [ 1] 4344 	ld acc8,a 
      0025FE 72 5F 00 0D      [ 1] 4345 	clr acc16 
      002602 72 BB 00 0D      [ 2] 4346 	addw x,acc16 
      002606 20 C4            [ 2] 4347 	jra data_search_loop
                                   4348 
                                   4349 
                                   4350 ;---------------------------------
                                   4351 ; BASIC: READ 
                                   4352 ; return next data item | 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                   4353 ;---------------------------------
                           000001  4354 	CTX_BPTR=1 
                           000003  4355 	CTX_IN=3 
                           000004  4356 	CTX_COUNT=4 
                           000005  4357 	XSAVE=5
                           000006  4358 	VSIZE=6
      002608                       4359 read:
      002608                       4360 	_vars  VSIZE 
      002608 52 06            [ 2]    1     sub sp,#VSIZE 
      00260A                       4361 read01:	
      00260A C6 00 08         [ 1] 4362 	ld a,data_ofs
      00260D C1 00 09         [ 1] 4363 	cp a,data_len 
      002610 27 37            [ 1] 4364 	jreq 2$ ; end of line  
      002612 CD 1A 2A         [ 4] 4365 	call save_context
      002615 CE 00 06         [ 2] 4366 	ldw x,data_ptr 
      002618 CF 00 04         [ 2] 4367 	ldw basicptr,x 
      00261B 55 00 08 00 01   [ 1] 4368 	mov in,data_ofs 
      002620 55 00 09 00 03   [ 1] 4369 	mov count,data_len  
      002625 CD 17 34         [ 4] 4370 	call expression 
      002628 A1 84            [ 1] 4371 	cp a,#TK_INTGR 
      00262A 27 03            [ 1] 4372 	jreq 1$ 
      00262C CC 11 91         [ 2] 4373 	jp syntax_error 
      00262F                       4374 1$:
      00262F 1F 05            [ 2] 4375 	ldw (XSAVE,SP),x
      002631 CD 12 89         [ 4] 4376 	call next_token ; skip comma
      002634 CE 00 04         [ 2] 4377 	ldw x,basicptr 
      002637 CF 00 06         [ 2] 4378 	ldw data_ptr,x 
      00263A 55 00 01 00 08   [ 1] 4379 	mov data_ofs,in 
      00263F CD 1A 3A         [ 4] 4380 	call rest_context
      002642 1E 05            [ 2] 4381 	ldw x,(XSAVE,sp)
      002644 A6 84            [ 1] 4382 	ld a,#TK_INTGR
      002646                       4383 	_drop VSIZE 
      002646 5B 06            [ 2]    1     addw sp,#VSIZE 
      002648 81               [ 4] 4384 	ret 
      002649                       4385 2$: ; end of line reached 
      002649 90 CE 00 06      [ 2] 4386 	ldw y, data_ptr 
      00264D 72 5F 00 06      [ 1] 4387 	clr data_ptr
      002651 72 5F 00 07      [ 1] 4388 	clr data_ptr+1   
      002655 72 5F 00 08      [ 1] 4389 	clr data_ofs 
      002659 72 5F 00 09      [ 1] 4390 	clr data_len 
      00265D CD 25 F8         [ 4] 4391 	call try_next_line 
      002660 20 A8            [ 2] 4392 	jra read01
                                   4393 
                                   4394 
                                   4395 ;---------------------------------
                                   4396 ; BASIC: SPIEN clkdiv, 0|1  
                                   4397 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4398 ; if clkdiv==-1 disable SPI
                                   4399 ; 0|1 -> disable|enable  
                                   4400 ;--------------------------------- 
                           000005  4401 SPI_CS_BIT=5
      002662                       4402 spi_enable:
      002662 CD 16 35         [ 4] 4403 	call arg_list 
      002665 A1 02            [ 1] 4404 	cp a,#2
      002667 27 03            [ 1] 4405 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002669 CC 11 91         [ 2] 4406 	jp syntax_error 
      00266C                       4407 1$: 
      00266C 72 12 50 C7      [ 1] 4408 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002670 85               [ 2] 4409 	popw x  
      002671 5D               [ 2] 4410 	tnzw x 
      002672 27 21            [ 1] 4411 	jreq spi_disable 
      002674 85               [ 2] 4412 	popw x 
      002675 A6 08            [ 1] 4413 	ld a,#(1<<SPI_CR1_BR)
      002677 42               [ 4] 4414 	mul x,a 
      002678 9F               [ 1] 4415 	ld a,xl 
      002679 C7 52 00         [ 1] 4416 	ld SPI_CR1,a 
                                   4417 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00267C 72 1A 50 14      [ 1] 4418 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002680 72 1A 50 16      [ 1] 4419 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4420 ; configure SPI as master mode 0.	
      002684 72 14 52 00      [ 1] 4421 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4422 ; ~CS line controlled by sofware 	
      002688 72 12 52 01      [ 1] 4423 	bset SPI_CR2,#SPI_CR2_SSM 
      00268C 72 10 52 01      [ 1] 4424     bset SPI_CR2,#SPI_CR2_SSI 
                                   4425 ; enable SPI
      002690 72 1C 52 00      [ 1] 4426 	bset SPI_CR1,#SPI_CR1_SPE 	
      002694 81               [ 4] 4427 	ret 
      002695                       4428 spi_disable:
      002695                       4429 	_drop #2; throw first argument.
      002695 5B 02            [ 2]    1     addw sp,##2 
                                   4430 ; wait spi idle 
      002697 A6 82            [ 1] 4431 1$:	ld a,#0x82 
      002699 C4 52 03         [ 1] 4432 	and a,SPI_SR
      00269C A1 02            [ 1] 4433 	cp a,#2 
      00269E 26 F7            [ 1] 4434 	jrne 1$
      0026A0 72 1D 52 00      [ 1] 4435 	bres SPI_CR1,#SPI_CR1_SPE
      0026A4 72 13 50 C7      [ 1] 4436 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      0026A8 72 1B 50 16      [ 1] 4437 	bres PE_DDR,#SPI_CS_BIT 
      0026AC 81               [ 4] 4438 	ret 
                                   4439 
      0026AD                       4440 spi_clear_error:
      0026AD A6 78            [ 1] 4441 	ld a,#0x78 
      0026AF C5 52 03         [ 1] 4442 	bcp a,SPI_SR 
      0026B2 27 04            [ 1] 4443 	jreq 1$
      0026B4 72 5F 52 03      [ 1] 4444 	clr SPI_SR 
      0026B8 81               [ 4] 4445 1$: ret 
                                   4446 
      0026B9                       4447 spi_send_byte:
      0026B9 88               [ 1] 4448 	push a 
      0026BA CD 26 AD         [ 4] 4449 	call spi_clear_error
      0026BD 84               [ 1] 4450 	pop a 
      0026BE 72 03 52 03 FB   [ 2] 4451 	btjf SPI_SR,#SPI_SR_TXE,.
      0026C3 C7 52 04         [ 1] 4452 	ld SPI_DR,a
      0026C6 72 01 52 03 FB   [ 2] 4453 	btjf SPI_SR,#SPI_SR_RXNE,.  
      0026CB C6 52 04         [ 1] 4454 	ld a,SPI_DR 
      0026CE 81               [ 4] 4455 	ret 
                                   4456 
      0026CF                       4457 spi_rcv_byte:
      0026CF A6 FF            [ 1] 4458 	ld a,#255
      0026D1 72 01 52 03 E3   [ 2] 4459 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0026D6 C6 52 04         [ 1] 4460 	ld a,SPI_DR 
      0026D9 81               [ 4] 4461 	ret
                                   4462 
                                   4463 ;------------------------------
                                   4464 ; BASIC: SPIWR byte [,byte]
                                   4465 ; write 1 or more byte
                                   4466 ;------------------------------
      0026DA                       4467 spi_write:
      0026DA CD 17 34         [ 4] 4468 	call expression
      0026DD A1 84            [ 1] 4469 	cp a,#TK_INTGR 
      0026DF 27 03            [ 1] 4470 	jreq 1$
      0026E1 CC 11 91         [ 2] 4471 	jp syntax_error 
      0026E4                       4472 1$:	
      0026E4 9F               [ 1] 4473 	ld a,xl 
      0026E5 CD 26 B9         [ 4] 4474 	call spi_send_byte 
      0026E8 CD 12 89         [ 4] 4475 	call next_token 
      0026EB A1 09            [ 1] 4476 	cp a,#TK_COMMA 
      0026ED 26 02            [ 1] 4477 	jrne 2$ 
      0026EF 20 E9            [ 2] 4478 	jra spi_write 
      0026F1 4D               [ 1] 4479 2$:	tnz a 
      0026F2 27 05            [ 1] 4480 	jreq 3$
      0026F4                       4481 	_unget_token  
      0026F4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0026F9 81               [ 4] 4482 3$:	ret 
                                   4483 
                                   4484 
                                   4485 ;-------------------------------
                                   4486 ; BASIC: SPIRD 	
                                   4487 ; read one byte from SPI 
                                   4488 ;-------------------------------
      0026FA                       4489 spi_read:
      0026FA CD 26 CF         [ 4] 4490 	call spi_rcv_byte 
      0026FD 5F               [ 1] 4491 	clrw x 
      0026FE 97               [ 1] 4492 	ld xl,a 
      0026FF A6 84            [ 1] 4493 	ld a,#TK_INTGR 
      002701 81               [ 4] 4494 	ret 
                                   4495 
                                   4496 ;------------------------------
                                   4497 ; BASIC: SPISEL 0|1 
                                   4498 ; set state of ~CS line
                                   4499 ; 0|1 deselect|select  
                                   4500 ;------------------------------
      002702                       4501 spi_select:
      002702 CD 12 89         [ 4] 4502 	call next_token 
      002705 A1 84            [ 1] 4503 	cp a,#TK_INTGR 
      002707 27 03            [ 1] 4504 	jreq 1$
      002709 CC 11 91         [ 2] 4505 	jp syntax_error 
      00270C 5D               [ 2] 4506 1$: tnzw x  
      00270D 27 05            [ 1] 4507 	jreq cs_high 
      00270F 72 1B 50 14      [ 1] 4508 	bres PE_ODR,#SPI_CS_BIT
      002713 81               [ 4] 4509 	ret 
      002714                       4510 cs_high: 
      002714 72 1A 50 14      [ 1] 4511 	bset PE_ODR,#SPI_CS_BIT
      002718 81               [ 4] 4512 	ret 
                                   4513 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   4514 ;-------------------------------
                                   4515 ; BASIC: PAD 
                                   4516 ; Return pad buffer address.
                                   4517 ;------------------------------
      002719                       4518 pad_ref:
      002719 AE 16 E0         [ 2] 4519 	ldw x,#pad 
      00271C B6 84            [ 1] 4520 	ld a,TK_INTGR
      00271E 81               [ 4] 4521 	ret 
                                   4522 
                                   4523 
                                   4524 ;------------------------------
                                   4525 ;      dictionary 
                                   4526 ; format:
                                   4527 ;   link:   2 bytes 
                                   4528 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4529 ;   cmd_name: 16 byte max 
                                   4530 ;   cmd_index: 2 bytes 
                                   4531 ;------------------------------
                                   4532 	.macro _dict_entry len,name,cmd_idx 
                                   4533 	.word LINK 
                                   4534 	LINK=.
                                   4535 name:
                                   4536 	.byte len 	
                                   4537 	.ascii "name"
                                   4538 	.word cmd_idx 
                                   4539 	.endm 
                                   4540 
                           000000  4541 	LINK=0
                                   4542 ; respect alphabetic order for BASIC names from Z-A
                                   4543 ; this sort order is for a cleaner WORDS cmd output. 	
      00271F                       4544 kword_end:
      00271F                       4545 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      00271F 00 00                    1 	.word LINK 
                           002721     2 	LINK=.
      002721                          3 XOR:
      002721 43                       4 	.byte 3+F_IFUNC 	
      002722 58 4F 52                 5 	.ascii "XOR"
      002725 00 C2                    6 	.word XOR_IDX 
      002727                       4546 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002727 27 21                    1 	.word LINK 
                           002729     2 	LINK=.
      002729                          3 WRITE:
      002729 05                       4 	.byte 5 	
      00272A 57 52 49 54 45           5 	.ascii "WRITE"
      00272F 00 C0                    6 	.word WRITE_IDX 
      002731                       4547 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002731 27 29                    1 	.word LINK 
                           002733     2 	LINK=.
      002733                          3 WORDS:
      002733 05                       4 	.byte 5 	
      002734 57 4F 52 44 53           5 	.ascii "WORDS"
      002739 00 BE                    6 	.word WORDS_IDX 
      00273B                       4548 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      00273B 27 33                    1 	.word LINK 
                           00273D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00273D                          3 WAIT:
      00273D 04                       4 	.byte 4 	
      00273E 57 41 49 54              5 	.ascii "WAIT"
      002742 00 BC                    6 	.word WAIT_IDX 
      002744                       4549 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002744 27 3D                    1 	.word LINK 
                           002746     2 	LINK=.
      002746                          3 USR:
      002746 43                       4 	.byte 3+F_IFUNC 	
      002747 55 53 52                 5 	.ascii "USR"
      00274A 00 BA                    6 	.word USR_IDX 
      00274C                       4550 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      00274C 27 46                    1 	.word LINK 
                           00274E     2 	LINK=.
      00274E                          3 UNTIL:
      00274E 05                       4 	.byte 5 	
      00274F 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002754 00 B8                    6 	.word UNTIL_IDX 
      002756                       4551 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002756 27 4E                    1 	.word LINK 
                           002758     2 	LINK=.
      002758                          3 UFLASH:
      002758 46                       4 	.byte 6+F_IFUNC 	
      002759 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      00275F 00 B6                    6 	.word UFLASH_IDX 
      002761                       4552 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002761 27 58                    1 	.word LINK 
                           002763     2 	LINK=.
      002763                          3 UBOUND:
      002763 46                       4 	.byte 6+F_IFUNC 	
      002764 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00276A 00 B4                    6 	.word UBOUND_IDX 
      00276C                       4553 	_dict_entry,4,TONE,TONE_IDX;tone  
      00276C 27 63                    1 	.word LINK 
                           00276E     2 	LINK=.
      00276E                          3 TONE:
      00276E 04                       4 	.byte 4 	
      00276F 54 4F 4E 45              5 	.ascii "TONE"
      002773 00 B2                    6 	.word TONE_IDX 
      002775                       4554 	_dict_entry,2,TO,TO_IDX;to
      002775 27 6E                    1 	.word LINK 
                           002777     2 	LINK=.
      002777                          3 TO:
      002777 02                       4 	.byte 2 	
      002778 54 4F                    5 	.ascii "TO"
      00277A 00 B0                    6 	.word TO_IDX 
      00277C                       4555 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      00277C 27 77                    1 	.word LINK 
                           00277E     2 	LINK=.
      00277E                          3 TIMER:
      00277E 05                       4 	.byte 5 	
      00277F 54 49 4D 45 52           5 	.ascii "TIMER"
      002784 00 AC                    6 	.word TIMER_IDX 
      002786                       4556 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      002786 27 7E                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                           002788     2 	LINK=.
      002788                          3 TIMEOUT:
      002788 47                       4 	.byte 7+F_IFUNC 	
      002789 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002790 00 AE                    6 	.word TMROUT_IDX 
      002792                       4557 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002792 27 88                    1 	.word LINK 
                           002794     2 	LINK=.
      002794                          3 TICKS:
      002794 45                       4 	.byte 5+F_IFUNC 	
      002795 54 49 43 4B 53           5 	.ascii "TICKS"
      00279A 00 AA                    6 	.word TICKS_IDX 
      00279C                       4558 	_dict_entry,4,STOP,STOP_IDX;stop 
      00279C 27 94                    1 	.word LINK 
                           00279E     2 	LINK=.
      00279E                          3 STOP:
      00279E 04                       4 	.byte 4 	
      00279F 53 54 4F 50              5 	.ascii "STOP"
      0027A3 00 A8                    6 	.word STOP_IDX 
      0027A5                       4559 	_dict_entry,4,STEP,STEP_IDX;step 
      0027A5 27 9E                    1 	.word LINK 
                           0027A7     2 	LINK=.
      0027A7                          3 STEP:
      0027A7 04                       4 	.byte 4 	
      0027A8 53 54 45 50              5 	.ascii "STEP"
      0027AC 00 A6                    6 	.word STEP_IDX 
      0027AE                       4560 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      0027AE 27 A7                    1 	.word LINK 
                           0027B0     2 	LINK=.
      0027B0                          3 SPIWR:
      0027B0 05                       4 	.byte 5 	
      0027B1 53 50 49 57 52           5 	.ascii "SPIWR"
      0027B6 00 A4                    6 	.word SPIWR_IDX 
      0027B8                       4561 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      0027B8 27 B0                    1 	.word LINK 
                           0027BA     2 	LINK=.
      0027BA                          3 SPISEL:
      0027BA 06                       4 	.byte 6 	
      0027BB 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0027C1 00 A2                    6 	.word SPISEL_IDX 
      0027C3                       4562 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      0027C3 27 BA                    1 	.word LINK 
                           0027C5     2 	LINK=.
      0027C5                          3 SPIRD:
      0027C5 45                       4 	.byte 5+F_IFUNC 	
      0027C6 53 50 49 52 44           5 	.ascii "SPIRD"
      0027CB 00 9E                    6 	.word SPIRD_IDX 
      0027CD                       4563 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      0027CD 27 C5                    1 	.word LINK 
                           0027CF     2 	LINK=.
      0027CF                          3 SPIEN:
      0027CF 05                       4 	.byte 5 	
      0027D0 53 50 49 45 4E           5 	.ascii "SPIEN"
      0027D5 00 A0                    6 	.word SPIEN_IDX 
      0027D7                       4564 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027D7 27 CF                    1 	.word LINK 
                           0027D9     2 	LINK=.
      0027D9                          3 SLEEP:
      0027D9 05                       4 	.byte 5 	
      0027DA 53 4C 45 45 50           5 	.ascii "SLEEP"
      0027DF 00 9C                    6 	.word SLEEP_IDX 
      0027E1                       4565     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      0027E1 27 D9                    1 	.word LINK 
                           0027E3     2 	LINK=.
      0027E3                          3 SIZE:
      0027E3 04                       4 	.byte 4 	
      0027E4 53 49 5A 45              5 	.ascii "SIZE"
      0027E8 00 C4                    6 	.word SIZE_IDX 
      0027EA                       4566 	_dict_entry,4,SHOW,SHOW_IDX;show 
      0027EA 27 E3                    1 	.word LINK 
                           0027EC     2 	LINK=.
      0027EC                          3 SHOW:
      0027EC 04                       4 	.byte 4 	
      0027ED 53 48 4F 57              5 	.ascii "SHOW"
      0027F1 00 98                    6 	.word SHOW_IDX 
      0027F3                       4567 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      0027F3 27 EC                    1 	.word LINK 
                           0027F5     2 	LINK=.
      0027F5                          3 SAVE:
      0027F5 04                       4 	.byte 4 	
      0027F6 53 41 56 45              5 	.ascii "SAVE"
      0027FA 00 36                    6 	.word SAVE_IDX 
      0027FC                       4568 	_dict_entry 3,RUN,RUN_IDX;run
      0027FC 27 F5                    1 	.word LINK 
                           0027FE     2 	LINK=.
      0027FE                          3 RUN:
      0027FE 03                       4 	.byte 3 	
      0027FF 52 55 4E                 5 	.ascii "RUN"
      002802 00 96                    6 	.word RUN_IDX 
      002804                       4569 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      002804 27 FE                    1 	.word LINK 
                           002806     2 	LINK=.
      002806                          3 RSHIFT:
      002806 46                       4 	.byte 6+F_IFUNC 	
      002807 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00280D 00 94                    6 	.word RSHIFT_IDX 
      00280F                       4570 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      00280F 28 06                    1 	.word LINK 
                           002811     2 	LINK=.
      002811                          3 RND:
      002811 43                       4 	.byte 3+F_IFUNC 	
      002812 52 4E 44                 5 	.ascii "RND"
      002815 00 92                    6 	.word RND_IDX 
      002817                       4571 	_dict_entry,6,RETURN,RET_IDX;return 
      002817 28 11                    1 	.word LINK 
                           002819     2 	LINK=.
      002819                          3 RETURN:
      002819 06                       4 	.byte 6 	
      00281A 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002820 00 90                    6 	.word RET_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002822                       4572 	_dict_entry,7,RESTORE,REST_IDX;restore 
      002822 28 19                    1 	.word LINK 
                           002824     2 	LINK=.
      002824                          3 RESTORE:
      002824 07                       4 	.byte 7 	
      002825 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00282C 00 8E                    6 	.word REST_IDX 
      00282E                       4573 	_dict_entry 6,REMARK,REM_IDX;remark 
      00282E 28 24                    1 	.word LINK 
                           002830     2 	LINK=.
      002830                          3 REMARK:
      002830 06                       4 	.byte 6 	
      002831 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002837 00 8C                    6 	.word REM_IDX 
      002839                       4574 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      002839 28 30                    1 	.word LINK 
                           00283B     2 	LINK=.
      00283B                          3 REBOOT:
      00283B 06                       4 	.byte 6 	
      00283C 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002842 00 8A                    6 	.word RBT_IDX 
      002844                       4575 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      002844 28 3B                    1 	.word LINK 
                           002846     2 	LINK=.
      002846                          3 READ:
      002846 44                       4 	.byte 4+F_IFUNC 	
      002847 52 45 41 44              5 	.ascii "READ"
      00284B 00 88                    6 	.word READ_IDX 
      00284D                       4576 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      00284D 28 46                    1 	.word LINK 
                           00284F     2 	LINK=.
      00284F                          3 QKEY:
      00284F 44                       4 	.byte 4+F_IFUNC 	
      002850 51 4B 45 59              5 	.ascii "QKEY"
      002854 00 86                    6 	.word QKEY_IDX 
      002856                       4577 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      002856 28 4F                    1 	.word LINK 
                           002858     2 	LINK=.
      002858                          3 PRTI:
      002858 44                       4 	.byte 4+F_IFUNC 	
      002859 50 52 54 49              5 	.ascii "PRTI"
      00285D 00 84                    6 	.word PRTI_IDX 
      00285F                       4578 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      00285F 28 58                    1 	.word LINK 
                           002861     2 	LINK=.
      002861                          3 PRTH:
      002861 44                       4 	.byte 4+F_IFUNC 	
      002862 50 52 54 48              5 	.ascii "PRTH"
      002866 00 82                    6 	.word PRTH_IDX 
      002868                       4579 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      002868 28 61                    1 	.word LINK 
                           00286A     2 	LINK=.
      00286A                          3 PRTG:
      00286A 44                       4 	.byte 4+F_IFUNC 	
      00286B 50 52 54 47              5 	.ascii "PRTG"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      00286F 00 80                    6 	.word PRTG_IDX 
      002871                       4580 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      002871 28 6A                    1 	.word LINK 
                           002873     2 	LINK=.
      002873                          3 PRTF:
      002873 44                       4 	.byte 4+F_IFUNC 	
      002874 50 52 54 46              5 	.ascii "PRTF"
      002878 00 7E                    6 	.word PRTF_IDX 
      00287A                       4581 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      00287A 28 73                    1 	.word LINK 
                           00287C     2 	LINK=.
      00287C                          3 PRTE:
      00287C 44                       4 	.byte 4+F_IFUNC 	
      00287D 50 52 54 45              5 	.ascii "PRTE"
      002881 00 7C                    6 	.word PRTE_IDX 
      002883                       4582 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      002883 28 7C                    1 	.word LINK 
                           002885     2 	LINK=.
      002885                          3 PRTD:
      002885 44                       4 	.byte 4+F_IFUNC 	
      002886 50 52 54 44              5 	.ascii "PRTD"
      00288A 00 7A                    6 	.word PRTD_IDX 
      00288C                       4583 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      00288C 28 85                    1 	.word LINK 
                           00288E     2 	LINK=.
      00288E                          3 PRTC:
      00288E 44                       4 	.byte 4+F_IFUNC 	
      00288F 50 52 54 43              5 	.ascii "PRTC"
      002893 00 78                    6 	.word PRTC_IDX 
      002895                       4584 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      002895 28 8E                    1 	.word LINK 
                           002897     2 	LINK=.
      002897                          3 PRTB:
      002897 44                       4 	.byte 4+F_IFUNC 	
      002898 50 52 54 42              5 	.ascii "PRTB"
      00289C 00 76                    6 	.word PRTB_IDX 
      00289E                       4585 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      00289E 28 97                    1 	.word LINK 
                           0028A0     2 	LINK=.
      0028A0                          3 PRTA:
      0028A0 44                       4 	.byte 4+F_IFUNC 	
      0028A1 50 52 54 41              5 	.ascii "PRTA"
      0028A5 00 74                    6 	.word PRTA_IDX 
      0028A7                       4586 	_dict_entry 5,PRINT,PRT_IDX;print 
      0028A7 28 A0                    1 	.word LINK 
                           0028A9     2 	LINK=.
      0028A9                          3 PRINT:
      0028A9 05                       4 	.byte 5 	
      0028AA 50 52 49 4E 54           5 	.ascii "PRINT"
      0028AF 00 72                    6 	.word PRT_IDX 
      0028B1                       4587 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      0028B1 28 A9                    1 	.word LINK 
                           0028B3     2 	LINK=.
      0028B3                          3 POUT:
      0028B3 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0028B4 50 4F 55 54              5 	.ascii "POUT"
      0028B8 00 70                    6 	.word POUT_IDX 
      0028BA                       4588 	_dict_entry,4,POKE,POKE_IDX;poke 
      0028BA 28 B3                    1 	.word LINK 
                           0028BC     2 	LINK=.
      0028BC                          3 POKE:
      0028BC 04                       4 	.byte 4 	
      0028BD 50 4F 4B 45              5 	.ascii "POKE"
      0028C1 00 6E                    6 	.word POKE_IDX 
      0028C3                       4589 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      0028C3 28 BC                    1 	.word LINK 
                           0028C5     2 	LINK=.
      0028C5                          3 PMODE:
      0028C5 05                       4 	.byte 5 	
      0028C6 50 4D 4F 44 45           5 	.ascii "PMODE"
      0028CB 00 68                    6 	.word PMODE_IDX 
      0028CD                       4590 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      0028CD 28 C5                    1 	.word LINK 
                           0028CF     2 	LINK=.
      0028CF                          3 PINP:
      0028CF 44                       4 	.byte 4+F_IFUNC 	
      0028D0 50 49 4E 50              5 	.ascii "PINP"
      0028D4 00 6C                    6 	.word PINP_IDX 
      0028D6                       4591 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      0028D6 28 CF                    1 	.word LINK 
                           0028D8     2 	LINK=.
      0028D8                          3 PEEK:
      0028D8 44                       4 	.byte 4+F_IFUNC 	
      0028D9 50 45 45 4B              5 	.ascii "PEEK"
      0028DD 00 6A                    6 	.word PEEK_IDX 
      0028DF                       4592 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      0028DF 28 D8                    1 	.word LINK 
                           0028E1     2 	LINK=.
      0028E1                          3 PAUSE:
      0028E1 05                       4 	.byte 5 	
      0028E2 50 41 55 53 45           5 	.ascii "PAUSE"
      0028E7 00 66                    6 	.word PAUSE_IDX 
      0028E9                       4593 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      0028E9 28 E1                    1 	.word LINK 
                           0028EB     2 	LINK=.
      0028EB                          3 PAD:
      0028EB 43                       4 	.byte 3+F_IFUNC 	
      0028EC 50 41 44                 5 	.ascii "PAD"
      0028EF 00 64                    6 	.word PAD_IDX 
      0028F1                       4594 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      0028F1 28 EB                    1 	.word LINK 
                           0028F3     2 	LINK=.
      0028F3                          3 OR:
      0028F3 42                       4 	.byte 2+F_IFUNC 	
      0028F4 4F 52                    5 	.ascii "OR"
      0028F6 00 62                    6 	.word OR_IDX 
      0028F8                       4595 	_dict_entry,2,ON,ON_IDX; cmd_on 
      0028F8 28 F3                    1 	.word LINK 
                           0028FA     2 	LINK=.
      0028FA                          3 ON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0028FA 02                       4 	.byte 2 	
      0028FB 4F 4E                    5 	.ascii "ON"
      0028FD 00 C6                    6 	.word ON_IDX 
      0028FF                       4596 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      0028FF 28 FA                    1 	.word LINK 
                           002901     2 	LINK=.
      002901                          3 ODR:
      002901 43                       4 	.byte 3+F_IFUNC 	
      002902 4F 44 52                 5 	.ascii "ODR"
      002905 00 60                    6 	.word ODR_IDX 
      002907                       4597 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      002907 29 01                    1 	.word LINK 
                           002909     2 	LINK=.
      002909                          3 NOT:
      002909 43                       4 	.byte 3+F_IFUNC 	
      00290A 4E 4F 54                 5 	.ascii "NOT"
      00290D 00 5E                    6 	.word NOT_IDX 
      00290F                       4598 	_dict_entry,4,NEXT,NEXT_IDX;next 
      00290F 29 09                    1 	.word LINK 
                           002911     2 	LINK=.
      002911                          3 NEXT:
      002911 04                       4 	.byte 4 	
      002912 4E 45 58 54              5 	.ascii "NEXT"
      002916 00 5A                    6 	.word NEXT_IDX 
      002918                       4599 	_dict_entry,3,NEW,NEW_IDX;new
      002918 29 11                    1 	.word LINK 
                           00291A     2 	LINK=.
      00291A                          3 NEW:
      00291A 03                       4 	.byte 3 	
      00291B 4E 45 57                 5 	.ascii "NEW"
      00291E 00 5C                    6 	.word NEW_IDX 
      002920                       4600 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      002920 29 1A                    1 	.word LINK 
                           002922     2 	LINK=.
      002922                          3 MULDIV:
      002922 46                       4 	.byte 6+F_IFUNC 	
      002923 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      002929 00 58                    6 	.word MULDIV_IDX 
      00292B                       4601 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      00292B 29 22                    1 	.word LINK 
                           00292D     2 	LINK=.
      00292D                          3 LSHIFT:
      00292D 46                       4 	.byte 6+F_IFUNC 	
      00292E 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002934 00 56                    6 	.word LSHIFT_IDX 
      002936                       4602 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      002936 29 2D                    1 	.word LINK 
                           002938     2 	LINK=.
      002938                          3 LOG:
      002938 43                       4 	.byte 3+F_IFUNC 	
      002939 4C 4F 47                 5 	.ascii "LOG"
      00293C 00 54                    6 	.word LOG_IDX 
      00293E                       4603 	_dict_entry 4,LIST,LIST_IDX;list
      00293E 29 38                    1 	.word LINK 
                           002940     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002940                          3 LIST:
      002940 04                       4 	.byte 4 	
      002941 4C 49 53 54              5 	.ascii "LIST"
      002945 00 52                    6 	.word LIST_IDX 
      002947                       4604 	_dict_entry 3,LET,LET_IDX;let 
      002947 29 40                    1 	.word LINK 
                           002949     2 	LINK=.
      002949                          3 LET:
      002949 03                       4 	.byte 3 	
      00294A 4C 45 54                 5 	.ascii "LET"
      00294D 00 50                    6 	.word LET_IDX 
      00294F                       4605 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      00294F 29 49                    1 	.word LINK 
                           002951     2 	LINK=.
      002951                          3 KEY:
      002951 43                       4 	.byte 3+F_IFUNC 	
      002952 4B 45 59                 5 	.ascii "KEY"
      002955 00 4E                    6 	.word KEY_IDX 
      002957                       4606 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      002957 29 51                    1 	.word LINK 
                           002959     2 	LINK=.
      002959                          3 IWDGREF:
      002959 07                       4 	.byte 7 	
      00295A 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002961 00 4C                    6 	.word IWDGREF_IDX 
      002963                       4607 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      002963 29 59                    1 	.word LINK 
                           002965     2 	LINK=.
      002965                          3 IWDGEN:
      002965 06                       4 	.byte 6 	
      002966 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00296C 00 4A                    6 	.word IWDGEN_IDX 
      00296E                       4608 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      00296E 29 65                    1 	.word LINK 
                           002970     2 	LINK=.
      002970                          3 INVERT:
      002970 46                       4 	.byte 6+F_IFUNC 	
      002971 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002977 00 48                    6 	.word INVERT_IDX 
      002979                       4609 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      002979 29 70                    1 	.word LINK 
                           00297B     2 	LINK=.
      00297B                          3 INPUT:
      00297B 05                       4 	.byte 5 	
      00297C 49 4E 50 55 54           5 	.ascii "INPUT"
      002981 00 46                    6 	.word INPUT_IDX 
      002983                       4610 	_dict_entry,2,IF,IF_IDX;if 
      002983 29 7B                    1 	.word LINK 
                           002985     2 	LINK=.
      002985                          3 IF:
      002985 02                       4 	.byte 2 	
      002986 49 46                    5 	.ascii "IF"
      002988 00 44                    6 	.word IF_IDX 
      00298A                       4611 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      00298A 29 85                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                           00298C     2 	LINK=.
      00298C                          3 IDR:
      00298C 43                       4 	.byte 3+F_IFUNC 	
      00298D 49 44 52                 5 	.ascii "IDR"
      002990 00 42                    6 	.word IDR_IDX 
      002992                       4612 	_dict_entry,3,HEX,HEX_IDX;hex_base
      002992 29 8C                    1 	.word LINK 
                           002994     2 	LINK=.
      002994                          3 HEX:
      002994 03                       4 	.byte 3 	
      002995 48 45 58                 5 	.ascii "HEX"
      002998 00 40                    6 	.word HEX_IDX 
      00299A                       4613 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      00299A 29 94                    1 	.word LINK 
                           00299C     2 	LINK=.
      00299C                          3 GPIO:
      00299C 44                       4 	.byte 4+F_IFUNC 	
      00299D 47 50 49 4F              5 	.ascii "GPIO"
      0029A1 00 3E                    6 	.word GPIO_IDX 
      0029A3                       4614 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0029A3 29 9C                    1 	.word LINK 
                           0029A5     2 	LINK=.
      0029A5                          3 GOTO:
      0029A5 04                       4 	.byte 4 	
      0029A6 47 4F 54 4F              5 	.ascii "GOTO"
      0029AA 00 3C                    6 	.word GOTO_IDX 
      0029AC                       4615 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0029AC 29 A5                    1 	.word LINK 
                           0029AE     2 	LINK=.
      0029AE                          3 GOSUB:
      0029AE 05                       4 	.byte 5 	
      0029AF 47 4F 53 55 42           5 	.ascii "GOSUB"
      0029B4 00 3A                    6 	.word GOSUB_IDX 
      0029B6                       4616 	_dict_entry,3,GET,GET_IDX; cmd_get 
      0029B6 29 AE                    1 	.word LINK 
                           0029B8     2 	LINK=.
      0029B8                          3 GET:
      0029B8 03                       4 	.byte 3 	
      0029B9 47 45 54                 5 	.ascii "GET"
      0029BC 00 C8                    6 	.word GET_IDX 
      0029BE                       4617 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      0029BE 29 B8                    1 	.word LINK 
                           0029C0     2 	LINK=.
      0029C0                          3 FREE:
      0029C0 44                       4 	.byte 4+F_IFUNC 	
      0029C1 46 52 45 45              5 	.ascii "FREE"
      0029C5 00 9A                    6 	.word FREE_IDX 
      0029C7                       4618 	_dict_entry,3,FOR,FOR_IDX;for 
      0029C7 29 C0                    1 	.word LINK 
                           0029C9     2 	LINK=.
      0029C9                          3 FOR:
      0029C9 03                       4 	.byte 3 	
      0029CA 46 4F 52                 5 	.ascii "FOR"
      0029CD 00 38                    6 	.word FOR_IDX 
      0029CF                       4619 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      0029CF 29 C9                    1 	.word LINK 
                           0029D1     2 	LINK=.
      0029D1                          3 FCPU:
      0029D1 04                       4 	.byte 4 	
      0029D2 46 43 50 55              5 	.ascii "FCPU"
      0029D6 00 34                    6 	.word FCPU_IDX 
      0029D8                       4620 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      0029D8 29 D1                    1 	.word LINK 
                           0029DA     2 	LINK=.
      0029DA                          3 ERASE:
      0029DA 05                       4 	.byte 5 	
      0029DB 45 52 41 53 45           5 	.ascii "ERASE"
      0029E0 00 32                    6 	.word ERASE_IDX 
      0029E2                       4621 	_dict_entry,3,END,END_IDX;cmd_end  
      0029E2 29 DA                    1 	.word LINK 
                           0029E4     2 	LINK=.
      0029E4                          3 END:
      0029E4 03                       4 	.byte 3 	
      0029E5 45 4E 44                 5 	.ascii "END"
      0029E8 00 30                    6 	.word END_IDX 
      0029EA                       4622 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      0029EA 29 E4                    1 	.word LINK 
                           0029EC     2 	LINK=.
      0029EC                          3 EEPROM:
      0029EC 46                       4 	.byte 6+F_IFUNC 	
      0029ED 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0029F3 00 2E                    6 	.word EEPROM_IDX 
      0029F5                       4623 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      0029F5 29 EC                    1 	.word LINK 
                           0029F7     2 	LINK=.
      0029F7                          3 EDIT:
      0029F7 04                       4 	.byte 4 	
      0029F8 45 44 49 54              5 	.ascii "EDIT"
      0029FC 00 2C                    6 	.word EDIT_IDX 
      0029FE                       4624 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      0029FE 29 F7                    1 	.word LINK 
                           002A00     2 	LINK=.
      002A00                          3 DWRITE:
      002A00 06                       4 	.byte 6+F_CMD 	
      002A01 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002A07 00 2A                    6 	.word DWRITE_IDX 
      002A09                       4625 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      002A09 2A 00                    1 	.word LINK 
                           002A0B     2 	LINK=.
      002A0B                          3 DREAD:
      002A0B 45                       4 	.byte 5+F_IFUNC 	
      002A0C 44 52 45 41 44           5 	.ascii "DREAD"
      002A11 00 28                    6 	.word DREAD_IDX 
      002A13                       4626 	_dict_entry,2,DO,DO_IDX;do_loop
      002A13 2A 0B                    1 	.word LINK 
                           002A15     2 	LINK=.
      002A15                          3 DO:
      002A15 02                       4 	.byte 2 	
      002A16 44 4F                    5 	.ascii "DO"
      002A18 00 26                    6 	.word DO_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A1A                       4627 	_dict_entry,3,DEC,DEC_IDX;dec_base
      002A1A 2A 15                    1 	.word LINK 
                           002A1C     2 	LINK=.
      002A1C                          3 DEC:
      002A1C 03                       4 	.byte 3 	
      002A1D 44 45 43                 5 	.ascii "DEC"
      002A20 00 24                    6 	.word DEC_IDX 
      002A22                       4628 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      002A22 2A 1C                    1 	.word LINK 
                           002A24     2 	LINK=.
      002A24                          3 DDR:
      002A24 43                       4 	.byte 3+F_IFUNC 	
      002A25 44 44 52                 5 	.ascii "DDR"
      002A28 00 22                    6 	.word DDR_IDX 
      002A2A                       4629 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      002A2A 2A 24                    1 	.word LINK 
                           002A2C     2 	LINK=.
      002A2C                          3 DATALN:
      002A2C 06                       4 	.byte 6 	
      002A2D 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002A33 00 20                    6 	.word DATALN_IDX 
      002A35                       4630 	_dict_entry,4,DATA,DATA_IDX;data  
      002A35 2A 2C                    1 	.word LINK 
                           002A37     2 	LINK=.
      002A37                          3 DATA:
      002A37 04                       4 	.byte 4 	
      002A38 44 41 54 41              5 	.ascii "DATA"
      002A3C 00 1E                    6 	.word DATA_IDX 
      002A3E                       4631 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      002A3E 2A 37                    1 	.word LINK 
                           002A40     2 	LINK=.
      002A40                          3 CRL:
      002A40 43                       4 	.byte 3+F_IFUNC 	
      002A41 43 52 4C                 5 	.ascii "CRL"
      002A44 00 1C                    6 	.word CRL_IDX 
      002A46                       4632 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      002A46 2A 40                    1 	.word LINK 
                           002A48     2 	LINK=.
      002A48                          3 CRH:
      002A48 43                       4 	.byte 3+F_IFUNC 	
      002A49 43 52 48                 5 	.ascii "CRH"
      002A4C 00 1A                    6 	.word CRH_IDX 
      002A4E                       4633 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      002A4E 2A 48                    1 	.word LINK 
                           002A50     2 	LINK=.
      002A50                          3 CHAR:
      002A50 84                       4 	.byte 4+F_CFUNC 	
      002A51 43 48 41 52              5 	.ascii "CHAR"
      002A55 00 18                    6 	.word CHAR_IDX 
      002A57                       4634 	_dict_entry,3,BYE,BYE_IDX;bye 
      002A57 2A 50                    1 	.word LINK 
                           002A59     2 	LINK=.
      002A59                          3 BYE:
      002A59 03                       4 	.byte 3 	
      002A5A 42 59 45                 5 	.ascii "BYE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002A5D 00 16                    6 	.word BYE_IDX 
      002A5F                       4635 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      002A5F 2A 59                    1 	.word LINK 
                           002A61     2 	LINK=.
      002A61                          3 BTOGL:
      002A61 05                       4 	.byte 5 	
      002A62 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002A67 00 14                    6 	.word BTOGL_IDX 
      002A69                       4636 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      002A69 2A 61                    1 	.word LINK 
                           002A6B     2 	LINK=.
      002A6B                          3 BTEST:
      002A6B 45                       4 	.byte 5+F_IFUNC 	
      002A6C 42 54 45 53 54           5 	.ascii "BTEST"
      002A71 00 12                    6 	.word BTEST_IDX 
      002A73                       4637 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      002A73 2A 6B                    1 	.word LINK 
                           002A75     2 	LINK=.
      002A75                          3 BSET:
      002A75 04                       4 	.byte 4 	
      002A76 42 53 45 54              5 	.ascii "BSET"
      002A7A 00 10                    6 	.word BSET_IDX 
      002A7C                       4638 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      002A7C 2A 75                    1 	.word LINK 
                           002A7E     2 	LINK=.
      002A7E                          3 BRES:
      002A7E 04                       4 	.byte 4 	
      002A7F 42 52 45 53              5 	.ascii "BRES"
      002A83 00 0E                    6 	.word BRES_IDX 
      002A85                       4639 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      002A85 2A 7E                    1 	.word LINK 
                           002A87     2 	LINK=.
      002A87                          3 BIT:
      002A87 43                       4 	.byte 3+F_IFUNC 	
      002A88 42 49 54                 5 	.ascii "BIT"
      002A8B 00 0C                    6 	.word BIT_IDX 
      002A8D                       4640 	_dict_entry,3,AWU,AWU_IDX;awu 
      002A8D 2A 87                    1 	.word LINK 
                           002A8F     2 	LINK=.
      002A8F                          3 AWU:
      002A8F 03                       4 	.byte 3 	
      002A90 41 57 55                 5 	.ascii "AWU"
      002A93 00 0A                    6 	.word AWU_IDX 
      002A95                       4641 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      002A95 2A 8F                    1 	.word LINK 
                           002A97     2 	LINK=.
      002A97                          3 ASC:
      002A97 43                       4 	.byte 3+F_IFUNC 	
      002A98 41 53 43                 5 	.ascii "ASC"
      002A9B 00 08                    6 	.word ASC_IDX 
      002A9D                       4642 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      002A9D 2A 97                    1 	.word LINK 
                           002A9F     2 	LINK=.
      002A9F                          3 AND:
      002A9F 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002AA0 41 4E 44                 5 	.ascii "AND"
      002AA3 00 06                    6 	.word AND_IDX 
      002AA5                       4643 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      002AA5 2A 9F                    1 	.word LINK 
                           002AA7     2 	LINK=.
      002AA7                          3 ADCREAD:
      002AA7 47                       4 	.byte 7+F_IFUNC 	
      002AA8 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002AAF 00 04                    6 	.word ADCREAD_IDX 
      002AB1                       4644 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      002AB1 2A A7                    1 	.word LINK 
                           002AB3     2 	LINK=.
      002AB3                          3 ADCON:
      002AB3 05                       4 	.byte 5 	
      002AB4 41 44 43 4F 4E           5 	.ascii "ADCON"
      002AB9 00 02                    6 	.word ADCON_IDX 
      002ABB                       4645 kword_dict::
      002ABB                       4646 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      002ABB 2A B3                    1 	.word LINK 
                           002ABD     2 	LINK=.
      002ABD                          3 ABS:
      002ABD 43                       4 	.byte 3+F_IFUNC 	
      002ABE 41 42 53                 5 	.ascii "ABS"
      002AC1 00 00                    6 	.word ABS_IDX 
                                   4647 
                                   4648 ;comands and fonctions address table 	
      002AC3                       4649 code_addr::
      002AC3 22 51 1E 6D 1E A9 22  4650 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             65 21 42 22 02 24 B3
      002AD1 1A FF 1A EF 1B 20 1B  4651 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             10 21 DB 21 30 25 6D
      002ADF 25 67 25 85 25 8B 25  4652 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             61 18 1B 24 DC 1E DD
             1F 0D
      002AEF 19 60 25 7F 1D F7 1F  4653 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             D5 22 DF 20 41 1B 7B
             1D 60 1D 46 21 7E
      002B03 18 16 25 5B 1B 67 1A  4654 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             4A 24 CD 24 5D 24 93
             21 69
      002B13 18 98 18 CB 24 98 22  4655 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             AD 15 BA 1B FB 1F 94
      002B21 24 50 25 55 22 7D 27  4656 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             19 21 EF 22 EB 1B 56
             25 79
      002B31 1B 47 25 73 19 C4 25  4657 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             1F 25 25 25 2B 25 31
             25 37
      002B41 25 3D 25 43 25 49 25  4658 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             4F 21 71 26 08 0E D6
             1A C4
      002B51 25 B9 1D 80 23 67 22  4659 	.word restore,return, random,rshift,run,show,free ; 72..79
             C6 1D 9E 17 D5 18 20
      002B5F 21 E4 26 FA 26 62 27  4660 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             02 26 DA 1B D4 1F 48
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



             22 4B
      002B6F 24 34 24 43 1B A4 1E  4661 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             29 18 8E 21 A8 24 F1
             21 BE
      002B7F 1A CA 23 CE 20 F9 22  4662 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get ; 96..99
             95 18 39 1C BD 1D FE
      002B8D 00 00                 4663 	.word 0 
                                   4664 
                                   4665 
                                   4666 
                                   4667 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      002C00                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      002C00                         30 app_space::
      002C00 00 00                   31 app_sign: .word 0 ; .ascii "BC"  ; signature 
      002C02 00 00                   32 app_size: .word 0 ; 31 
      002C04                         33 app: 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 ;;  BASIC code demo 'BLINK.BAS' 
                                     36 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     37 ;; byte code generated by compiler.
                                     38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     39 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     40 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     41 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   4 ABS        002ABD R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   4 ADCON      002AB3 R
    ADCON_ID=  000002     |   4 ADCREAD    002AA7 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        002A9F R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        002A97 R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   4 AWU        002A8F R   |   4 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        002A87 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000C 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   4 BRES       002A7E R   |     BRES_IDX=  00000E 
    BS      =  000008     |     BSAVE   =  000001     |   4 BSET       002A75 R
    BSET_IDX=  000010     |     BSIZE   =  000006     |   4 BTEST      002A6B R
    BTEST_ID=  000012     |   4 BTOGL      002A61 R   |     BTOGL_ID=  000014 
    BTW     =  000001     |   4 BYE        002A59 R   |     BYE_IDX =  000016 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    0020A4 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       002A50 R   |     CHAR_IDX=  000018     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  00002C     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        002A48 R
    CRH_IDX =  00001A     |   4 CRL        002A40 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       002A37 R
  4 DATALN     002A2C R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        002A24 R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   4 DEC        002A1C R   |     DEC_IDX =  000024 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         002A15 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]

Symbol Table

  4 DREAD      002A0B R   |     DREAD_ID=  000028     |   4 DWRITE     002A00 R
    DWRITE_I=  00002A     |   4 EDIT       0029F7 R   |     EDIT_IDX=  00002C 
  4 EEPROM     0029EC R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002E     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        0029E4 R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      0029DA R
    ERASE_ID=  000032     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       0029D1 R   |     FCPU_IDX=  000034 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        0029C9 R   |     FOR_IDX =  000038 
  4 FREE       0029C0 R   |     FREE_IDX=  00009A     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   4 GET        0029B8 R
    GET_IDX =  0000C8     |   4 GOSUB      0029AE R   |     GOSUB_ID=  00003A 
  4 GOTO       0029A5 R   |     GOTO_IDX=  00003C     |   4 GPIO       00299C R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003E 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        002994 R   |     HEX_IDX =  000040     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        00298C R   |     IDR_IDX =  000042 
  4 IF         002985 R   |     IF_IDX  =  000044     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   4 INPUT      00297B R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000046     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  4 INVERT     002970 R   |     INVERT_I=  000048     |     INW     =  000009 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     002965 R   |     IWDGEN_I=  00004A     |   4 IWDGREF    002959 R
    IWDGREF_=  00004C     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        002951 R
    KEY_END =  000083     |     KEY_IDX =  00004E     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        002949 R
    LET_IDX =  000050     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  002ABD R   |   4 LIST       002940 R
    LIST_IDX=  000052     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG        002938 R
    LOG_IDX =  000054     |   4 LSHIFT     00292D R   |     LSHIFT_I=  000056 
    MAJOR   =  000002     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |   4 MULDIV     002922 R
    MULDIV_I=  000058     |     MULOP   =  000003     |     N1      =  000001 
    N2      =  000003     |     NAFR    =  004804     |     NAK     =  000015 
    NCLKOPT =  004808     |     NEG     =  000001     |   4 NEW        00291A R
    NEW_IDX =  00005C     |   4 NEXT       002911 R   |     NEXT_IDX=  00005A 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]

Symbol Table

    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   4 NOT        002909 R
    NOT_IDX =  00005E     |   4 NOT_SAVE   00198D R   |   4 NO_APP     0020E3 R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        002901 R   |     ODR_IDX =  000060 
  4 ON         0028FA R   |     ONOFF   =  000003     |     ON_IDX  =  0000C6 
    OP      =  000005     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OR         0028F3 R
    OR_IDX  =  000062     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        0028EB R   |     PAD_IDX =  000064 
    PAD_SIZE=  000080     |   4 PAUSE      0028E1 R   |     PAUSE_ID=  000066 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       0028D8 R   |     PEEK_IDX=  00006A 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   4 PINP       0028CF R
    PINP_IDX=  00006C     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      0028C5 R
    PMODE_ID=  000068     |   4 POKE       0028BC R   |     POKE_IDX=  00006E 
    PORT    =  000003     |   4 POUT       0028B3 R   |     POUT_IDX=  000070 
    PREV    =  000001     |   4 PRINT      0028A9 R   |   4 PROG_ADD   001866 R
  4 PROG_SIZ   001878 R   |   4 PRTA       0028A0 R   |     PRTA_IDX=  000074 
  4 PRTB       002897 R   |     PRTB_IDX=  000076     |   4 PRTC       00288E R
    PRTC_IDX=  000078     |   4 PRTD       002885 R   |     PRTD_IDX=  00007A 
  4 PRTE       00287C R   |     PRTE_IDX=  00007C     |   4 PRTF       002873 R
    PRTF_IDX=  00007E     |   4 PRTG       00286A R   |     PRTG_IDX=  000080 
  4 PRTH       002861 R   |     PRTH_IDX=  000082     |   4 PRTI       002858 R
    PRTI_IDX=  000084     |     PRT_IDX =  000072     |     PSTR    =  000003 
  4 QKEY       00284F R   |     QKEY_IDX=  000086     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |     RBT_IDX =  00008A 
  4 READ       002846 R   |     READ_IDX=  000088     |   4 REBOOT     00283B R
    REG     =  000001     |     REGA    =  000001     |     REGX    =  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]

Symbol Table

    REGY    =  000005     |     RELOP   =  000003     |   4 REMARK     002830 R
    REM_IDX =  00008C     |   4 RESTORE    002824 R   |     REST_IDX=  00008E 
    RETL1   =  000001     |   4 RETURN     002819 R   |     RET_ADDR=  000003 
    RET_IDX =  000090     |     RET_INW =  000005     |   4 RND        002811 R
    RND_IDX =  000092     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     002806 R   |     RSHIFT_I=  000094     |     RST_SR  =  0050B3 
  4 RUN        0027FE R   |   4 RUNNING    000FB9 R   |     RUN_IDX =  000096 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |   4 SAVE       0027F5 R
    SAVEB   =  000002     |     SAVE_IDX=  000036     |     SDIVSR  =  000005 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   4 SHOW       0027EC R   |     SHOW_IDX=  000098 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   0020A2 R
  4 SIZE       0027E3 R   |     SIZE_IDX=  0000C4     |     SKIP    =  000005 
  4 SLEEP      0027D9 R   |     SLEEP_ID=  00009C     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      0027CF R
    SPIEN_ID=  0000A0     |   4 SPIRD      0027C5 R   |     SPIRD_ID=  00009E 
  4 SPISEL     0027BA R   |     SPISEL_I=  0000A2     |   4 SPIWR      0027B0 R
    SPIWR_ID=  0000A4     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   4 STEP       0027A7 R   |     STEP_IDX=  0000A6 
  4 STOP       00279E R   |     STOP_IDX=  0000A8     |     STR     =  000003 
  4 STR_BYTE   001887 R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      002794 R   |     TICKS_ID=  0000AA 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    002788 R   |   4 TIMER      00277E R
    TIMER_ID=  0000AC     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000006     |     TK_CFUNC=  000082     |     TK_CHAR =  000003 
    TK_CMD  =  000080     |     TK_COLON=  00000B     |     TK_COMMA=  000009 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000001     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_TARGE=  000004     |     TK_VAR  =  000085 
    TMROUT_I=  0000AE     |   4 TO         002777 R   |   4 TONE       00276E R
    TONE_IDX=  0000B2     |     TO_IDX  =  0000B0     |   4 Timer4Up   00000F R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     002763 R
    UBOUND_I=  0000B4     |   4 UBTN_Han   000048 R   |   4 UFLASH     002758 R
    UFLASH_I=  0000B6     |   4 UNTIL      00274E R   |     UNTIL_ID=  0000B8 
    US      =  00001F     |   4 USER_ABO   00005B R   |   4 USR        002746 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]

Symbol Table

    USR_IDX =  0000BA     |   4 Uart1RxH   00027F R   |   4 UserButt   000024 R
    VAR_ADDR=  000006     |     VSISE   =  000003     |     VSIZ    =  000002 
    VSIZE   =  000006     |     VT      =  00000B     |   4 WAIT       00273D R
    WAIT_IDX=  0000BC     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  4 WORDS      002733 R   |     WORDS_ID=  0000BE     |   4 WRITE      002729 R
    WRITE_ID=  0000C0     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        002721 R   |     XOR_IDX =  0000C2 
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000004 
  4 abs        002251 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B R   |   5 acc8       00000E GR  |   4 accept_c   0005BA R
  4 add_char   000D0D R   |   4 add_spac   000B03 R   |   4 analog_r   001EA9 R
  4 app        002C04 R   |   4 app_sign   002C00 R   |   4 app_size   002C02 R
  4 app_spac   002C00 GR  |   4 arduino_   002347 R   |   4 arg_list   001635 R
  5 array_si   00001F R   |   4 ascii      002142 R   |   4 at_tst     000971 R
  4 atoi24     0013EF GR  |   4 atoi_exi   001455 R   |   4 awu        002202 R
  4 awu02      00220C R   |   4 bad_port   0021A3 R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       001E36 R   |   4 beep_1kh   001E20 GR
  4 bin_exit   0007ED R   |   4 bit_and    002265 R   |   4 bit_or     00227D R
  4 bit_rese   001AFF R   |   4 bit_set    001AEF R   |   4 bit_test   001B20 R
  4 bit_togg   001B10 R   |   4 bit_xor    002295 R   |   4 bitmask    0024B3 R
  4 bkslsh_t   00091E R   |   4 bksp       000358 R   |   4 block_er   00018F R
  4 break_po   001F76 R   |   4 bye        0021DB R   |   4 char       002130 R
  4 clear_ba   000FF9 R   |   4 clear_va   000E7C R   |   4 clock_in   000076 R
  4 cmd_end    001DF7 R   |   4 cmd_get    001DFE R   |   4 cmd_line   001218 R
  4 cmd_name   000D2D R   |   4 cmd_on     001CBD R   |   4 cmd_size   001839 R
  4 code_add   002AC3 GR  |   4 cold_sta   000ED6 R   |   4 colon_ts   000945 R
  4 comma_ts   000950 R   |   4 comp_msg   001170 R   |   4 compile    000A76 GR
  4 const_cr   002567 R   |   4 const_cr   00256D R   |   4 const_dd   002561 R
  4 const_ee   00257F R   |   4 const_id   00255B R   |   4 const_in   002579 R
  4 const_od   002555 R   |   4 const_ou   002573 R   |   4 const_po   00251F R
  4 const_po   002525 R   |   4 const_po   00252B R   |   4 const_po   002531 R
  4 const_po   002537 R   |   4 const_po   00253D R   |   4 const_po   002543 R
  4 const_po   002549 R   |   4 const_po   00254F R   |   4 convert_   000764 R
  4 convert_   00031C R   |   4 copy_com   0009A6 R   |   5 count      000003 GR
  4 cp_loop    0015E4 R   |   4 cpy_cmd_   000AEE R   |   4 cpy_quot   000B27 R
  4 create_g   00068E R   |   4 cs_high    002714 R   |   4 cstk_pro   0017EF R
  4 dash_tst   000966 R   |   4 data       002585 R   |   5 data_len   000009 R
  4 data_lin   00258B R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 data_sea   0025CC R   |   4 dbl_sign   00153E R   |   4 dec_base   00181B R
  4 decomp_l   000BD8 R   |   4 decompil   000B91 GR  |   4 del_line   000661 R
  4 delete_l   000445 R   |   4 delete_n   000368 R   |   4 delete_u   00040A R
  4 digital_   001EDD R   |   4 digital_   001F0D R   |   4 div32_16   001548 R
  4 divide     00159F R   |   4 divu24_8   00135E R   |   4 dneg       001533 R
  4 do_loop    0024DC R   |   4 do_progr   000182 R   |   4 edit       001960 R
  4 eefree     00026C R   |   4 enable_i   00245D R   |   4 eql_tst    0009FB R
  4 equal      000D20 R   |   4 erase      001FD5 R   |   4 erase_ex   0001AE R
  4 erase_fl   0001A4 R   |   4 err_bad_   0010DB R   |   4 err_buf_   001151 R
  4 err_cmd_   00109F R   |   4 err_div0   001064 R   |   4 err_dupl   0010B9 R
  4 err_math   00104B R   |   4 err_mem_   001030 R   |   4 err_msg    001010 R
  4 err_no_a   0010E7 R   |   4 err_no_d   00111A R   |   4 err_no_f   00113E R
  4 err_no_l   001073 R   |   4 err_no_p   00112A R   |   4 err_not_   0010CA R
  4 err_run_   001089 R   |   4 err_synt   00103D R   |   4 escaped    000779 GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]

Symbol Table

  4 expect     001623 R   |   4 expr_exi   00177A R   |   4 expressi   001734 R
  4 factor     001685 R   |   5 farptr     000017 R   |   4 fcpu       0022DF R
  4 final_te   0005B3 R   |   4 first_li   00190D R   |   5 flags      000021 GR
  4 for        001B7B R   |   4 free       001820 R   |   5 free_eep   00002D R
  7 free_ram   000080 R   |   4 func_arg   001630 R   |   4 func_not   002450 R
  4 ge         000D22 R   |   4 get_arra   001660 R   |   4 get_cmd_   000B70 R
  4 get_esca   000328 R   |   4 get_targ   001C45 R   |   4 get_targ   001C53 R
  4 get_tick   00224B R   |   4 get_toke   0008B7 GR  |   4 getc       000301 GR
  4 gosub      001D60 R   |   4 goto       001D46 R   |   4 gpio       00217E R
  4 gt         000D1E R   |   4 gt_tst     000A06 R   |   4 hex_base   001816 R
  4 hex_dump   000DCD R   |   4 if         001B67 R   |   5 in         000001 GR
  5 in.saved   000002 GR  |   5 in.w       000000 GR  |   4 incr_far   001FB9 R
  4 input_ex   001AC1 R   |   4 input_lo   001A4C R   |   4 input_va   001A4A R
  4 insert_c   0003C7 R   |   4 insert_l   0006BA R   |   4 insert_l   000729 R
  4 interp_l   001259 R   |   4 interpre   001234 R   |   4 invert     0024CD R
  4 is_alnum   000822 GR  |   4 is_alpha   000808 GR  |   4 is_digit   000819 GR
  4 is_symbo   00082B R   |   4 itoa       0012F3 GR  |   4 itoa_loo   001318 R
  4 jp_to_ta   001D53 R   |   4 key        002169 R   |   4 kword_di   002ABB GR
  4 kword_en   00271F R   |   4 le         000D27 R   |   4 leading_   0024A3 R
  4 let        001898 GR  |   4 let_arra   0018A6 R   |   4 let_var    0018A9 R
  4 lines_sk   001910 R   |   4 list       0018CB R   |   4 list_exi   001952 R
  4 list_loo   001930 R   |   4 log2       002498 R   |   4 logical_   002446 R
  4 long_div   00151B R   |   4 look_tar   001C6F R   |   4 loop_bac   001C28 R
  5 loop_dep   00001E R   |   4 loop_don   001C3D R   |   4 lshift     0022AD R
  4 lt         000D25 R   |   4 lt_tst     000A2F R   |   4 modulo     0015B5 R
  4 move       000E38 GR  |   4 move_dow   000E57 R   |   4 move_era   000111 R
  4 move_exi   000E78 R   |   4 move_lef   00039F R   |   4 move_loo   000E5C R
  4 move_prg   000151 R   |   4 move_rig   0003AD R   |   4 move_up    000E49 R
  4 mul_char   000D0F R   |   4 muldiv     0015BA R   |   4 multiply   0014E6 R
  4 mulu24_8   001386 R   |   4 nbr_tst    0008EA R   |   4 ne         000D2A R
  4 neg_acc2   0013C0 R   |   4 new        001F94 R   |   4 next       001BFB R
  4 next_lin   00123C R   |   4 next_tok   001289 GR  |   4 no_match   0015F6 R
  4 other      000A58 R   |   4 overwrit   0005DF R   |   2 pad        0016E0 GR
  4 pad_ref    002719 R   |   4 parse_bi   0007CB R   |   4 parse_in   000781 R
  4 parse_ke   00084E R   |   4 parse_qu   00072C R   |   4 parse_sy   000836 R
  4 pause      0021EF R   |   4 pause02    0021F9 R   |   4 peek       001B56 R
  4 pin_mode   0022EB R   |   4 plus_tst   0009CF R   |   4 poke       001B47 R
  4 power_ad   001E6D R   |   4 prcnt_ts   0009F0 R   |   4 print      0019C4 R
  4 print_ex   001A1E R   |   4 print_he   000614 GR  |   4 print_in   0012D7 R
  4 printxy    001459 R   |   4 prog_siz   0018C3 R   |   4 program_   00012B R
  4 program_   000151 R   |   4 prt_basi   0019A4 R   |   4 prt_loop   0019C8 R
  4 prt_tok    000D5F R   |   4 prti24     0012E7 R   |   5 ptr16      000018 GR
  5 ptr8       000019 R   |   4 putc       0002F1 GR  |   4 puts       00034E GR
  4 qgetc      0002FA GR  |   4 qkey       002171 GR  |   4 qmark_ts   00097C R
  4 qsign      00203A R   |   4 random     002367 R   |   4 read       002608 R
  4 read01     00260A R   |   4 readln     000453 GR  |   4 readln_l   000460 R
  4 readln_q   0005FC R   |   4 refresh_   002493 R   |   4 rel_exit   0017D2 R
  4 relation   00177D R   |   4 relop_st   000D12 R   |   4 remark     001AC4 GR
  4 reset_co   0019C6 R   |   4 rest_con   001A3A R   |   4 restore    0025B9 R
  4 return     001D80 R   |   4 right_al   000B15 GR  |   4 row_alig   001F9E R
  4 row_eras   0000E4 R   |   4 row_eras   000111 R   |   4 row_loop   000DB0 R
  4 rparnt_t   00093A R   |   4 rshift     0022C6 R   |   7 rsign      00007C R
  7 rsize      00007E R   |   4 rt_msg     00115E R   |   4 run        001D9E R
  4 run_app    000F78 R   |   4 run_it     001DD0 R   |   5 rx1_head   00002B R
  5 rx1_queu   000023 R   |   5 rx1_tail   00002C R   |   4 save_app   002041 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]

Symbol Table

  4 save_con   001A2A R   |   4 scan_blo   001FC7 R   |   4 scan_fre   00024F GR
  4 search_d   0015D6 GR  |   4 search_e   001620 R   |   4 search_l   000636 GR
  4 search_l   000645 R   |   4 search_n   0015DA R   |   5 seedx      000013 R
  5 seedy      000015 R   |   4 select_p   002337 R   |   4 send_esc   000376 R
  4 send_par   000381 R   |   4 set_time   002434 R   |   4 sharp_ts   00095B R
  4 show       0017D5 R   |   4 show_row   000D9E R   |   4 single_c   000D08 R
  4 skip       0008A4 R   |   4 skip_lab   001CAE R   |   4 slash_ts   0009E5 R
  4 sleep      0021E4 R   |   4 software   000E90 R   |   4 spaces     0003BB GR
  4 spi_clea   0026AD R   |   4 spi_disa   002695 R   |   4 spi_enab   002662 R
  4 spi_rcv_   0026CF R   |   4 spi_read   0026FA R   |   4 spi_sele   002702 R
  4 spi_send   0026B9 R   |   4 spi_writ   0026DA R   |   2 stack_fu   001760 GR
  2 stack_un   001800 R   |   4 star_tst   0009DA R   |   4 step       001BD4 R
  4 stop       001F48 R   |   4 store_lo   001BE8 R   |   4 str_matc   001603 R
  4 str_tst    0008DA R   |   4 strcmp     000E17 R   |   4 strcpy     000E28 GR
  4 strlen     000E0C GR  |   4 symb_loo   000837 R   |   4 syntax_e   001191 GR
  5 tab_widt   000022 GR  |   4 tb_error   001193 GR  |   4 term       0016E2 R
  4 term01     0016EA R   |   4 term_exi   001731 R   |   2 tib        001690 GR
  4 tick_tst   000994 R   |   5 ticks      00000F R   |   4 timeout    002443 R
  5 timer      000011 GR  |   4 timer2_i   00008C R   |   4 timer4_i   000099 R
  4 tk_id      001181 R   |   4 to         001BA4 R   |   4 to_eepro   00017A R
  4 to_flash   00017F R   |   4 to_hex_c   00062B GR  |   4 to_upper   0013E3 GR
  4 token_ch   000A6F R   |   4 token_ex   000A73 R   |   4 token_ms   000D96 R
  4 tone       001E29 R   |   4 try_next   0025F8 R   |   5 txtbgn     00001A GR
  5 txtend     00001C GR  |   4 uart1_ge   000301 GR  |   4 uart1_in   0002AC R
  4 uart1_pu   0002F1 GR  |   4 uart1_qg   0002FA GR  |   4 uart1_se   0002BC R
  4 ubound     00188E R   |   4 udiv32_1   001509 R   |   4 uflash     0021A8 R
  4 umstar     0014AC R   |   4 unlock_e   0000AE R   |   4 unlock_f   0000C9 R
  4 until      0024F1 R   |   4 user_int   000037 R   |   4 usr        0021BE R
  4 var_name   000B68 GR  |   5 vars       00002F GR  |   4 wait       001ACA R
  4 warm_ini   000FDB R   |   4 warm_sta   001215 R   |   4 words      0023CE R
  4 words_co   00241E R   |   4 write      0020F9 R   |   4 write_bl   00022A GR
  4 write_by   0001B0 R   |   4 write_ee   0001EC R   |   4 write_ex   000225 R
  4 write_fl   0001D6 R   |   4 write_ro   00016B R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    170   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   2C04   flags    0
   5 DATA       size     63   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

