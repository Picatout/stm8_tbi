ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;   constantes related to Arduino 
                                     60 ;   API mapping 
                                     61 ;-------------------------------------
                           000000    62         INP=0
                           000001    63         OUTP=1 
                                     64 
                                     65 ;--------------------------------------
                                     66 ;       token attribute
                                     67 ;--------------------------------------
                                     68         ; bits 4:5 identify token group 
                                     69         ; 0x0n -> miscelinous 
                                     70         ; 0x1n -> +|- operators 
                                     71         ; 0x2n -> *|/|% operators
                                     72         ; 0x3n -> relational operators 
                           000080    73         TK_CMD=128      ; BASIC command   
                           000081    74         TK_IFUNC=129    ; BASIC integer function
                           000082    75         TK_CFUNC=130    ; BASIC character function
                           000083    76         TK_CONST=131    ; BASIC constant 
                           000084    77         TK_INTGR=132    ; 16 bits integer 
                           000085    78         TK_VAR=133
                           000086    79         TK_FLOAT=134    ; float32 
                           000087    80         TK_NOT=135
                           000088    81         TK_AND=136      ;
                           000089    82         TK_OR=137       ;
                           00008A    83         TK_XOR=138      ; 
                           000000    84         TK_NONE=0       ; not a token 
                           000002    85         TK_QSTR=2       ; quoted string  
                           000003    86         TK_LABEL=3      ; used for defined, constants, variables
                           000004    87         TK_CHAR=4       ; ASCII character 
                           000005    88         TK_ARRAY=5     ; array variable '@' 
                           000006    89         TK_LPAREN=6     ; left parenthesis '('
                           000007    90         TK_RPAREN=7     ; right parenthesis ')'
                           000008    91         TK_COMMA=8     ; item separator ',' 
                           000009    92         TK_SHARP=9     ; print colon width '#' 
                           00000A    93         TK_COLON=0xa      ; command separator ':' 
                                     94         
                           000010    95         TK_PLUS=0x10    ; addition operator '+'
                           000011    96         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    97         TK_MULT=0x20    ; multiplication operator '*'
                           000021    98         TK_DIV=0x21     ; division operator '/'
                           000022    99         TK_MOD=0x22     ; modulo operator '%'
                                    100 
                                    101         ; don't change these token values 
                                    102         ; values chosen to be used as a mask.
                                    103         ; bit 7   1 for dictionary words else 0 
                                    104         ; bits 6  always 0 
                                    105         ; bits 5:4 identify group 
                                    106         ; bits 3:0 token identifier inside group  
                           000031   107         TK_GT=0x31      ; relation operator '>'
                           000032   108         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   109         TK_GE=0x33      ; relation operator '>='
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000034   110         TK_LT=0x34      ; relation operator '<'
                           000036   111         TK_LE=0x36      ; relation operator '<='
                           000035   112         TK_NE=0x35      ; relation operator '<>' not equal 
                                    113         ; token groups 
                           000030   114         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   115         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   116         TK_GRP_ADD=0x10  ; additive operators
                           000020   117         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   118         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   119         CMD_END=2 
                                    120 
                                    121 ;--------------------------------------
                                    122 ;   error codes 
                                    123 ;--------------------------------------
                           000000   124     ERR_NONE=0
                           000001   125     ERR_MEM_FULL=1 
                           000002   126     ERR_SYNTAX=2
                           000003   127     ERR_MATH_OVF=3
                           000004   128     ERR_DIV0=4 
                           000005   129     ERR_NO_LINE=5
                           000006   130     ERR_RUN_ONLY=6
                           000007   131     ERR_CMD_ONLY=7
                           000008   132     ERR_DUPLICATE=8
                           000009   133     ERR_NOT_FILE=9
                           00000A   134     ERR_BAD_VALUE=10
                           00000B   135     ERR_NO_ACCESS=11
                           00000C   136     ERR_NO_DATA=12 
                           00000D   137     ERR_NO_PROG=13
                           00000E   138     ERR_NO_FSPACE=14
                           00000F   139     ERR_BUF_FULL=15
                           000010   140     ERR_OVERFLOW=16 
                                    141 
                                    142 ;--------------------------------------
                                    143 ;   assembler flags 
                                    144 ;-------------------------------------
                                    145 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    146 
                                    147      .macro _usec_dly n 
                                    148     ldw x,#(16*n-2)/4
                                    149     decw x
                                    150     nop 
                                    151     jrne .-4
                                    152     .endm 
                                    153     
                                    154     ; load X register with 
                                    155     ; entry point of dictionary
                                    156     ; before calling 'search_dict'
                                    157     .macro _ldx_dict dict_name
                                    158     ldw x,#dict_name+2
                                    159     .endm 
                                    160 
                                    161     ; reset BASIC pointer
                                    162     ; to beginning of last token
                                    163     ; extracted except if it was end of line 
                                    164     .macro _unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165      mov in,in.saved  
                                    166     .endm
                                    167 
                                    168 
                                    169     ; extract code address for 
                                    170     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    171     .macro _get_code_addr
                                    172         ldw x,(x)
                                    173         inc in 
                                    174         inc in 
                                    175     .endm 
                                    176 
                                    177 
                                    178 
                                    179 ;---------------------------------------
                                    180 ;    xtack manipulation macros 
                                    181 ;    Y is used as xstack pointer  
                                    182 ;----------------------------------------
                                    183     ; pop in A:X from XSTACK 
                                    184     .macro _xpop 
                                    185     ld a,(y)
                                    186     ldw x,y 
                                    187     ldw x,(1,x)
                                    188     addw y,#CELL_SIZE 
                                    189     .endm 
                                    190 
                                    191     ; push A:X  to XSTACK 
                                    192     .macro _xpush 
                                    193     subw y,#CELL_SIZE
                                    194     ld (y),a 
                                    195     ldw (1,y),x 
                                    196     .endm 
                                    197 
                                    198     ; drop from XSTACK 
                                    199     .macro _xdrop 
                                    200     addw y,#CELL_SIZE 
                                    201     .endm 
                                    202 
                                    203     ; @T fetch top xstack 
                                    204     .macro _at_top
                                    205     ld a,(y)
                                    206     ldw x,y 
                                    207     ldw x,(1,x)
                                    208     .endm 
                                    209 
                                    210     ; @N  fetch next on xstack 
                                    211     .macro _at_next 
                                    212     ld a,(3,y)
                                    213     ldw x,y 
                                    214     ldw x,(4,x)
                                    215     .endm 
                                    216 
                                    217     ; !T put on top of xtack 
                                    218     .macro _store_top 
                                    219     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ldw (1,y),x     
                                    221     .endm 
                                    222 
                                    223     ; !N put next on xstack 
                                    224     .macro _store_next 
                                    225     ld (3,y),a 
                                    226     ldw (4,y),x 
                                    227     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001690                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         44 pad:: .ds PAD_SIZE             ; working buffer
      001760                         45 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         46 xstack_unf:: ; xstack underflow 
      00179C                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 99             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 8C         [ 4]  120 	call print_registers
      000019 CD 05 37         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 68         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 16 D4         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5. CN9-6
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 C6         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1D 57         [ 4]  280 	call func_eefree 
      000121 CD 1C 8E         [ 4]  281 	call ubound 
      000124 CD 14 9E         [ 4]  282 	call clear_basic
      000127 CD 26 5C         [ 4]  283 	call beep_1khz  
      00012A CD 14 4B         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 28 97         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 16 D4         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 7C         [ 4]  293 	call warm_init
      00013C AE 37 04         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 37 02      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 68         [ 4]  299 	call puts 
      00014F CD 1F 19         [ 4]  300 	call program_info 
      000152 CC 25 F7         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016A                         37 dup24:
      00016A                         38     _at_top 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F                         39     _xpush 
      00016F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000173 90 F7            [ 1]    2     ld (y),a 
      000175 90 EF 01         [ 2]    3     ldw (1,y),x 
      000178 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      000179                         48 add24: ; ( N T -- N+T )
      000179                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000179 90 F6            [ 1]    1     ld a,(y)
      00017B 93               [ 1]    2     ldw x,y 
      00017C EE 01            [ 2]    3     ldw x,(1,x)
      00017E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000182 89               [ 2]   50     pushw x  
      000183 88               [ 1]   51     push a  
      000184                         52     _at_top  
      000184 90 F6            [ 1]    1     ld a,(y)
      000186 93               [ 1]    2     ldw x,y 
      000187 EE 01            [ 2]    3     ldw x,(1,x)
      000189 72 FB 02         [ 2]   53     addw x,(2,sp)
      00018C 19 01            [ 1]   54     adc a, (1,sp)
      00018E                         55     _store_top 
      00018E 90 F7            [ 1]    1     ld (y),a 
      000190 90 EF 01         [ 2]    2     ldw (1,y),x     
      000193                         56     _drop 3 
      000193 5B 03            [ 2]    1     addw sp,#3 
      000195 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      000196                         63 sub24: ; ( N T -- N-T ) 
      000196                         64     _xpop 
      000196 90 F6            [ 1]    1     ld a,(y)
      000198 93               [ 1]    2     ldw x,y 
      000199 EE 01            [ 2]    3     ldw x,(1,x)
      00019B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00019F 89               [ 2]   65     pushw x 
      0001A0 88               [ 1]   66     push  a
      0001A1                         67     _at_top  
      0001A1 90 F6            [ 1]    1     ld a,(y)
      0001A3 93               [ 1]    2     ldw x,y 
      0001A4 EE 01            [ 2]    3     ldw x,(1,x)
      0001A6 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001A9 12 01            [ 1]   69     sbc a, (1,sp)
      0001AB                         70     _store_top  
      0001AB 90 F7            [ 1]    1     ld (y),a 
      0001AD 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B0                         71     _drop 3 
      0001B0 5B 03            [ 2]    1     addw sp,#3 
      0001B2 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B3                         77 cp24:
      0001B3                         78     _xpop 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001BC C7 00 0C         [ 1]   79     ld acc24,a 
      0001BF CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0001C2                         81     _at_top 
      0001C2 90 F6            [ 1]    1     ld a,(y)
      0001C4 93               [ 1]    2     ldw x,y 
      0001C5 EE 01            [ 2]    3     ldw x,(1,x)
      0001C7 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001CB C2 00 0C         [ 1]   83     sbc a,acc24
      0001CE 2F 08            [ 1]   84     jrslt 1$
      0001D0 26 0A            [ 1]   85     jrne 2$
      0001D2 5D               [ 2]   86     tnzw x 
      0001D3 26 07            [ 1]   87     jrne 2$
      0001D5 4F               [ 1]   88     clr a 
      0001D6 20 06            [ 2]   89     jra 9$ 
      0001D8                         90 1$: ; i1 < i2 
      0001D8 A6 FF            [ 1]   91     ld a,#255
      0001DA 20 02            [ 2]   92     jra 9$ 
      0001DC                         93 2$: ; i1 > i2 
      0001DC A6 01            [ 1]   94     ld a,#1 
      0001DE 5F               [ 1]   95 9$: clrw x
      0001DF                         96      _store_top 
      0001DF 90 F7            [ 1]    1     ld (y),a 
      0001E1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E4 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001E5                        103 cp24_ax:
      0001E5 88               [ 1]  104     push a 
      0001E6 C3 00 0D         [ 2]  105     cpw x,acc16 
      0001E9 C2 00 0C         [ 1]  106     sbc a,acc24
      0001EC 84               [ 1]  107     pop a 
      0001ED 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001EE                        115 abs24: ; ( i -- u )
      0001EE 90 F6            [ 1]  116     ld a,(y)
      0001F0 A1 80            [ 1]  117     cp a,#0x80 
      0001F2 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F4 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001F5                        124 cpl24:  ; i -- ~i 
      0001F5 90 73            [ 1]  125     cpl (y) 
      0001F7 90 63 01         [ 1]  126     cpl (1,y)
      0001FA 90 63 02         [ 1]  127     cpl (2,y)
      0001FD 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001FE                        133 neg24: ; (i -- -i )
      0001FE                        134     _at_top
      0001FE 90 F6            [ 1]    1     ld a,(y)
      000200 93               [ 1]    2     ldw x,y 
      000201 EE 01            [ 2]    3     ldw x,(1,x)
      000203 43               [ 1]  135     cpl  a  
      000204 53               [ 2]  136     cplw x 
      000205 1C 00 01         [ 2]  137     addw x,#1
      000208 A9 00            [ 1]  138     adc a,#0
      00020A                        139     _store_top  
      00020A 90 F7            [ 1]    1     ld (y),a 
      00020C 90 EF 01         [ 2]    2     ldw (1,y),x     
      00020F 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000210                        145 neg_ax:
      000210 43               [ 1]  146     cpl  a  
      000211 53               [ 2]  147     cplw x 
      000212 1C 00 01         [ 2]  148     addw x,#1
      000215 A9 00            [ 1]  149     adc a,#0
      000217 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      000218                        155 neg_acc24: ; 
      000218 72 53 00 0C      [ 1]  156     cpl acc24 
      00021C 72 53 00 0D      [ 1]  157     cpl acc16 
      000220 72 53 00 0E      [ 1]  158     cpl acc8
      000224 72 5C 00 0E      [ 1]  159     inc acc8 
      000228 26 0A            [ 1]  160     jrne 9$
      00022A 72 5C 00 0D      [ 1]  161     inc acc16 
      00022E 26 04            [ 1]  162     jrne 9$
      000230 72 5C 00 0C      [ 1]  163     inc acc24 
      000234 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      000235                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000235 88               [ 1]  181     push a 
      000236 72 5F 00 0B      [ 1]  182 	clr acc32
      00023A 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      00023E 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000241 97               [ 1]  186     ld xl,a 
      000242 7B 01            [ 1]  187     ld a,(U8,sp)
      000244 42               [ 4]  188     mul x,a 
      000245 CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      000248 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      00024B 97               [ 1]  192     ld xl,a 
      00024C 7B 01            [ 1]  193     ld a,(U8,sp) 
      00024E 42               [ 4]  194     mul x,a 
      00024F 72 BB 00 0C      [ 2]  195     addw x,acc24
      000253 72 59 00 0B      [ 1]  196     rlc acc32 
      000257 CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025A 90 F6            [ 1]  199     ld a,(Y)
      00025C 97               [ 1]  200     ld xl,a 
      00025D 7B 01            [ 1]  201     ld a,(U8,sp)
      00025F 42               [ 4]  202     mul x,a 
      000260 72 BB 00 0B      [ 2]  203     addw x,acc32
      000264 02               [ 1]  204     rlwa x 
      000265 4D               [ 1]  205     tnz a 
      000266 27 05            [ 1]  206     jreq 1$
      000268 A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026A CC 16 4A         [ 2]  208     jp tb_error 
      00026D                        209 1$:
      00026D 9E               [ 1]  210     ld a,xh  
      00026E CE 00 0D         [ 2]  211     ldw x,acc16   
      000271                        212     _drop VSIZE 
      000271 5B 01            [ 2]    1     addw sp,#VSIZE 
      000273 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000274                        224 mul24:
      000274                        225     _vars VSIZE
      000274 52 07            [ 2]    1     sub sp,#VSIZE 
      000276 5F               [ 1]  226     clrw x 
      000277 1F 01            [ 2]  227     ldw (PROD,sp),x 
      000279 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      00027B                        229     _xpop 
      00027B 90 F6            [ 1]    1     ld a,(y)
      00027D 93               [ 1]    2     ldw x,y 
      00027E EE 01            [ 2]    3     ldw x,(1,x)
      000280 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000284 4D               [ 1]  230     tnz a 
      000285 2A 05            [ 1]  231     jrpl 0$
      000287 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      000289 CD 02 10         [ 4]  233     call neg_ax 
      00028C                        234 0$:    
      00028C 6B 05            [ 1]  235     ld (N1,sp),a 
      00028E 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000290 90 7D            [ 1]  237     tnz (Y)
      000292 2A 05            [ 1]  238     jrpl 2$ 
      000294 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      000296 CD 01 FE         [ 4]  240     call neg24
      000299                        241 2$: 
      000299 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      00029B 27 0A            [ 1]  243     jreq 4$
      00029D CD 02 35         [ 4]  244     call mulu24_8
      0002A0 4D               [ 1]  245     tnz a 
      0002A1 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A3 6B 01            [ 1]  247     ld (PROD,sp),a
      0002A5 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002A7                        249 4$:
      0002A7 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002A9 27 0D            [ 1]  251     jreq 5$
      0002AB CD 02 35         [ 4]  252     call mulu24_8
      0002AE 4D               [ 1]  253     tnz a 
      0002AF 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B1 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B4 29 29            [ 1]  256     jrv 8$ ; overflow
      0002B6 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002B8                        258 5$:
      0002B8 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BA 27 10            [ 1]  260     jreq 6$
      0002BC CD 02 35         [ 4]  261     call mulu24_8
      0002BF 01               [ 1]  262     rrwa x 
      0002C0 5D               [ 2]  263     tnzw x 
      0002C1 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C3 4D               [ 1]  265     tnz a 
      0002C4 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002C6 1B 01            [ 1]  267     add a,(PROD,sp)
      0002C8 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CA 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002CC                        270 6$:
      0002CC 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002CE 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D0 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D2 27 03            [ 1]  274     jreq 9$
      0002D4 CD 02 10         [ 4]  275     call neg_ax 
      0002D7                        276 9$:
      0002D7                        277     _store_top 
      0002D7 90 F7            [ 1]    1     ld (y),a 
      0002D9 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002DC                        278     _drop VSIZE 
      0002DC 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002DE 81               [ 4]  279     ret 
      0002DF                        280 8$: ; overflow
      0002DF A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0002E1 CC 16 4A         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E4                        296 divu24_8:
      0002E4 89               [ 2]  297 	pushw x ; save x
      0002E5 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002E6 CE 00 0C         [ 2]  300 	ldw x,acc24
      0002E9 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002EB 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002EC 88               [ 1]  303 	push a  ;save remainder
      0002ED CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F0 84               [ 1]  305 	pop a
      0002F1 95               [ 1]  306 	ld xh,a
      0002F2 C6 00 0E         [ 1]  307 	ld a,acc8
      0002F5 97               [ 1]  308 	ld xl,a
      0002F6 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002F8 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002F9 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002FB 9F               [ 1]  312 	ld a,xl
      0002FC C7 00 0E         [ 1]  313 	ld acc8,a
      0002FF 84               [ 1]  314 	pop a
      000300 85               [ 2]  315 	popw x
      000301 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000302                        332 div24:
      000302                        333     _vars VSIZE 
      000302 52 06            [ 2]    1     sub sp,#VSIZE 
      000304 0F 06            [ 1]  334     clr (RSIGN,sp)
      000306 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000308                        336     _xpop 
      000308 90 F6            [ 1]    1     ld a,(y)
      00030A 93               [ 1]    2     ldw x,y 
      00030B EE 01            [ 2]    3     ldw x,(1,x)
      00030D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000311 4D               [ 1]  337     tnz a 
      000312 2A 05            [ 1]  338     jrpl 0$ 
      000314 03 05            [ 1]  339     cpl (QSIGN,sp)
      000316 CD 02 10         [ 4]  340     call neg_ax
      000319                        341 0$:
      000319 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      00031B 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      00031D 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      00031F 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000321 26 05            [ 1]  346     jrne 1$ 
      000323 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      000325 CC 16 4A         [ 2]  348     jp tb_error 
      000328                        349 1$: ; dividend  
      000328                        350     _at_top
      000328 90 F6            [ 1]    1     ld a,(y)
      00032A 93               [ 1]    2     ldw x,y 
      00032B EE 01            [ 2]    3     ldw x,(1,x)
      00032D 4D               [ 1]  351     tnz a 
      00032E 2A 07            [ 1]  352     jrpl 2$
      000330 CD 02 10         [ 4]  353     call neg_ax
      000333 03 05            [ 1]  354     cpl (QSIGN,sp)
      000335 03 06            [ 1]  355     cpl (RSIGN,sp)
      000337                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      000337                        359     _store_top 
      000337 90 F7            [ 1]    1     ld (y),a 
      000339 90 EF 01         [ 2]    2     ldw (1,y),x     
      00033C A6 18            [ 1]  360     ld a,#24 
      00033E 6B 04            [ 1]  361     ld (CNTR,sp),a
      000340 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000342 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000344 CD 01 E5         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      000347 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      000349 C6 00 0C         [ 1]  368     ld a,acc24 
      00034C CE 00 0D         [ 2]  369     ldw x,acc16 
      00034F 72 5F 00 0C      [ 1]  370     clr acc24 
      000353 72 5F 00 0D      [ 1]  371     clr acc16 
      000357 72 5F 00 0E      [ 1]  372     clr acc8 
      00035B 20 26            [ 2]  373     jra 6$
      00035D                        374 22$:     
      00035D 4F               [ 1]  375     clr a 
      00035E 5F               [ 1]  376     clrw x 
      00035F 98               [ 1]  377     rcf  
      000360                        378 3$: ; shift carry in acc24 bit 0 
      000360 90 69 02         [ 1]  379     rlc (2,y) 
      000363 90 69 01         [ 1]  380     rlc (1,y)
      000366 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000368 59               [ 2]  382     rlcw x  
      000369 49               [ 1]  383     rlc a
      00036A 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      00036D 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      00036F 24 05            [ 1]  386     jrnc 5$
      000371 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000374 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      000376                        389 5$: ; shift carry in QUOTIENT 
      000376 8C               [ 1]  390     ccf
      000377 0A 04            [ 1]  391     dec (CNTR,sp)
      000379 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      00037B 90 69 02         [ 1]  394     rlc (2,y)
      00037E 90 69 01         [ 1]  395     rlc (1,y) 
      000381 90 79            [ 1]  396     rlc (y) 
      000383                        397 6$:    
      000383 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      000385 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      000387 0D 05            [ 1]  400     tnz (QSIGN,sp)
      000389 27 03            [ 1]  401     jreq 8$
      00038B CD 01 FE         [ 4]  402     call neg24
      00038E                        403 8$: 
      00038E 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000390 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000392                        406 81$:
      000392 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000394 27 03            [ 1]  408     jreq 9$
      000396 CD 02 10         [ 4]  409     call neg_ax       
      000399                        410 9$: _drop VSIZE 
      000399 5B 06            [ 2]    1     addw sp,#VSIZE 
      00039B 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      00039C                        423 mod24:
      00039C CD 03 02         [ 4]  424     call div24 
      00039F                        425     _store_top  ; replace quotient by remainder 
      00039F 90 F7            [ 1]    1     ld (y),a 
      0003A1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A4 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003A5                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003A5                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003A5                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003A5                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003A5                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003A5                         37 prt_regs::
      0003A5 AE 03 E8         [ 2]   38 	ldw x,#regs_state 
      0003A8 CD 09 68         [ 4]   39 	call puts
                                     40 ; register PC
      0003AB 16 01            [ 2]   41 	ldw y,(1,sp)
      0003AD AE 05 1C         [ 2]   42 	ldw x,#REG_EPC 
      0003B0 CD 04 6D         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003B3 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003B5 AE 05 2D         [ 2]   46 	ldw x,#REG_CC 
      0003B8 CD 04 4B         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003BB 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003BD AE 05 29         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003C0 CD 04 4B         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003C3 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003C5 AE 05 25         [ 2]   54 	ldw x,#REG_X 
      0003C8 CD 04 6D         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      0003CB 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      0003CD AE 05 21         [ 2]   58 	ldw x,#REG_Y 
      0003D0 CD 04 6D         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      0003D3 90 96            [ 1]   61 	ldw y,sp
      0003D5 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      0003D9 AE 05 32         [ 2]   63 	ldw x,#REG_SP
      0003DC CD 04 6D         [ 4]   64 	call prt_reg16
      0003DF A6 0D            [ 1]   65 	ld a,#CR 
      0003E1 CD 09 0B         [ 4]   66 	call putc
      0003E4 CD 09 0B         [ 4]   67 	call putc   
      0003E7 81               [ 4]   68 	ret 
                                     69 
                                     70 
      0003E8 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      00040F                         81 prt_peek::
      00040F 89               [ 2]   82 	pushw x 
      000410 35 10 00 0A      [ 1]   83 	mov base,#16 
      000414 CD 17 EE         [ 4]   84 	call prt_i16  
      000417 A6 3A            [ 1]   85 	ld a,#': 
      000419 CD 09 0B         [ 4]   86 	call putc 
      00041C A6 20            [ 1]   87 	ld a,#SPACE 
      00041E CD 09 0B         [ 4]   88 	call putc 
      000421 85               [ 2]   89 	popw x 
      000422 F6               [ 1]   90 	ld a,(x)
      000423 5F               [ 1]   91 	clrw x 
      000424 97               [ 1]   92 	ld xl,a 
      000425 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000429 CD 17 EE         [ 4]   94 	call prt_i16 
      00042C 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      00042D                        102 ledon:
      00042D 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000431 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000432                        107 ledoff:
      000432 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      000436 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000437                        112 ledtoggle:
      000437 A6 20            [ 1]  113     ld a,#LED2_MASK
      000439 C8 50 0A         [ 1]  114     xor a,PC_ODR
      00043C C7 50 0A         [ 1]  115     ld PC_ODR,a
      00043F 81               [ 4]  116     ret 
                                    117 
      000440                        118 left_paren:
      000440 A6 20            [ 1]  119 	ld a,#SPACE 
      000442 CD 09 0B         [ 4]  120 	call putc
      000445 A6 28            [ 1]  121 	ld a,#'( 
      000447 CD 09 0B         [ 4]  122 	call putc 	
      00044A 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      00044B                        133 prt_reg8:
      00044B 88               [ 1]  134 	push a 
      00044C CD 09 68         [ 4]  135 	call puts 
      00044F 7B 01            [ 1]  136 	ld a,(1,sp) 
      000451 5F               [ 1]  137 	clrw x 
      000452 97               [ 1]  138 	ld xl,a 
      000453 35 10 00 0A      [ 1]  139 	mov base,#16
      000457 CD 17 EE         [ 4]  140 	call prt_i16  
      00045A CD 04 40         [ 4]  141 	call left_paren 
      00045D 84               [ 1]  142 	pop a 
      00045E 5F               [ 1]  143 	clrw x 
      00045F 97               [ 1]  144 	ld xl,a 
      000460 35 0A 00 0A      [ 1]  145 	mov base,#10 
      000464 CD 17 EE         [ 4]  146 	call prt_i16  
      000467 A6 29            [ 1]  147 	ld a,#') 
      000469 CD 09 0B         [ 4]  148 	call putc
      00046C 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      00046D                        159 prt_reg16: 
      00046D 90 89            [ 2]  160 	pushw y 
      00046F CD 09 68         [ 4]  161 	call puts 
      000472 1E 01            [ 2]  162 	ldw x,(1,sp) 
      000474 35 10 00 0A      [ 1]  163 	mov base,#16 
      000478 CD 17 EE         [ 4]  164 	call prt_i16  
      00047B CD 04 40         [ 4]  165 	call left_paren 
      00047E 85               [ 2]  166 	popw x 
      00047F 35 0A 00 0A      [ 1]  167 	mov base,#10 
      000483 CD 17 EE         [ 4]  168 	call prt_i16  
      000486 A6 29            [ 1]  169 	ld a,#') 
      000488 CD 09 0B         [ 4]  170 	call putc
      00048B 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      00048C                        177 print_registers:
      00048C AE 04 DF         [ 2]  178 	ldw x,#STATES
      00048F CD 09 68         [ 4]  179 	call puts
                                    180 ; print EPC 
      000492 AE 05 1C         [ 2]  181 	ldw x, #REG_EPC
      000495 CD 09 68         [ 4]  182 	call puts 
      000498 7B 0B            [ 1]  183 	ld a, (11,sp)
      00049A C7 00 0E         [ 1]  184 	ld acc8,a 
      00049D 7B 0A            [ 1]  185 	ld a, (10,sp) 
      00049F C7 00 0D         [ 1]  186 	ld acc16,a 
      0004A2 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004A4 C7 00 0C         [ 1]  188 	ld acc24,a
      0004A7 5F               [ 1]  189 	clrw x  
      0004A8 A6 10            [ 1]  190 	ld a,#16
      0004AA CD 18 05         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004AD AE 05 25         [ 2]  193 	ldw x,#REG_X
      0004B0 16 05            [ 2]  194 	ldw y,(5,sp)
      0004B2 CD 04 6D         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004B5 AE 05 21         [ 2]  197 	ldw x,#REG_Y
      0004B8 16 07            [ 2]  198 	ldw y, (7,sp)
      0004BA CD 04 6D         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004BD AE 05 29         [ 2]  201 	ldw x,#REG_A
      0004C0 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004C2 CD 04 4B         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004C5 AE 05 2D         [ 2]  205 	ldw x,#REG_CC 
      0004C8 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004CA CD 04 4B         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      0004CD AE 05 32         [ 2]  209 	ldw x,#REG_SP
      0004D0 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0004D2 72 A9 00 0C      [ 2]  211 	addw y,#12
      0004D6 CD 04 6D         [ 4]  212 	call prt_reg16  
      0004D9 A6 0A            [ 1]  213 	ld a,#'\n' 
      0004DB CD 09 0B         [ 4]  214 	call putc
      0004DE 81               [ 4]  215 	ret
                                    216 
      0004DF 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00051C 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000521 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      000525 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000529 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      00052D 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000532 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000537                        235 cmd_itf:
      000537 52 01            [ 2]  236 	sub sp,#VSIZE 
      000539 72 5F 00 18      [ 1]  237 	clr farptr 
      00053D 72 5F 00 19      [ 1]  238 	clr farptr+1 
      000541 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      000545                        240 repl:
      000545 A6 0D            [ 1]  241 	ld a,#CR 
      000547 CD 09 0B         [ 4]  242 	call putc 
      00054A A6 3F            [ 1]  243 	ld a,#'? 
      00054C CD 09 0B         [ 4]  244 	call putc
      00054F 72 5F 00 00      [ 1]  245 	clr in.w 
      000553 72 5F 00 01      [ 1]  246 	clr in 
      000557 CD 0A 6D         [ 4]  247 	call readln
      00055A 90 AE 16 90      [ 2]  248 	ldw y,#tib  
      00055E 90 F6            [ 1]  249 	ld a,(y)
      000560 27 E3            [ 1]  250 	jreq repl  
      000562 72 5C 00 01      [ 1]  251 	inc in 
      000566 CD 18 84         [ 4]  252 	call to_upper 
      000569 A1 51            [ 1]  253 	cp a,#'Q 
      00056B 26 17            [ 1]  254 	jrne test_p
      00056D                        255 repl_exit:
      00056D 72 5F 16 90      [ 1]  256 	clr tib 
      000571 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000575 72 5F 00 01      [ 1]  258 	clr in 
      000579                        259 	_drop #VSIZE 	
      000579 5B 01            [ 2]    1     addw sp,##VSIZE 
      00057B 81               [ 4]  260 	ret  
      00057C                        261 invalid:
      00057C AE 05 FD         [ 2]  262 	ldw x,#invalid_cmd 
      00057F CD 09 68         [ 4]  263 	call puts 
      000582 20 C1            [ 2]  264 	jra repl 
      000584                        265 test_p:	
      000584 A1 50            [ 1]  266     cp a,#'P 
      000586 27 11            [ 1]  267 	jreq mem_peek
      000588 A1 53            [ 1]  268     cp a,#'S 
      00058A 26 F0            [ 1]  269 	jrne invalid 
      00058C                        270 print_string:	
      00058C CD 0E E2         [ 4]  271 	call get_token
      00058F A1 84            [ 1]  272 	cp a,#TK_INTGR 
      000591 26 E9            [ 1]  273 	jrne invalid 
      000593 CD 09 68         [ 4]  274 	call puts
      000596 CC 05 45         [ 2]  275 	jp repl 	
      000599                        276 mem_peek:
      000599 A6 20            [ 1]  277 	ld a,#SPACE 
      00059B CD 0E CF         [ 4]  278 	call skip  	 
      00059E 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005A2 AE 16 E0         [ 2]  280 	ldw x,#pad 
      0005A5 CD 13 A2         [ 4]  281 	call strcpy
      0005A8 AE 16 E0         [ 2]  282 	ldw x,#pad
      0005AB CD 18 90         [ 4]  283 	call atoi24 	
      0005AE C6 00 0C         [ 1]  284 	ld a, acc24 
      0005B1 CA 00 0D         [ 1]  285 	or a,acc16 
      0005B4 CA 00 0E         [ 1]  286 	or a,acc8 
      0005B7 26 02            [ 1]  287 	jrne 1$ 
      0005B9 20 0C            [ 2]  288 	jra peek_byte  
      0005BB CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005BE CF 00 18         [ 2]  290 	ldw farptr,x 
      0005C1 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005C4 C7 00 1A         [ 1]  292 	ld farptr+2,a 
      0005C7                        293 peek_byte:
      0005C7 CD 06 0C         [ 4]  294 	call print_farptr 
      0005CA A6 08            [ 1]  295 	ld a,#8 
      0005CC 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      0005CE 5F               [ 1]  297 	clrw x 
      0005CF CD 06 27         [ 4]  298 1$:	call fetchc  
      0005D2 89               [ 2]  299 	pushw x 
      0005D3 C7 00 0E         [ 1]  300 	ld acc8,a 
      0005D6 5F               [ 1]  301 	clrw x 
      0005D7 CF 00 0C         [ 2]  302 	ldw acc24,x 
      0005DA A6 90            [ 1]  303 	ld a,#16+128
      0005DC CD 18 05         [ 4]  304 	call prt_acc24
      0005DF 85               [ 2]  305 	popw x 
      0005E0 0A 01            [ 1]  306 	dec (PSIZE,sp)
      0005E2 26 EB            [ 1]  307 	jrne 1$ 
      0005E4 A6 08            [ 1]  308 	ld a,#8 
      0005E6 CB 00 1A         [ 1]  309 	add a,farptr+2 
      0005E9 C7 00 1A         [ 1]  310 	ld farptr+2,a
      0005EC 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0005ED C9 00 19         [ 1]  312 	adc a,farptr+1 
      0005F0 C7 00 19         [ 1]  313 	ld farptr+1,a 
      0005F3 4F               [ 1]  314 	clr a 
      0005F4 C9 00 18         [ 1]  315 	adc a,farptr 
      0005F7 C7 00 18         [ 1]  316 	ld farptr,a 
      0005FA CC 05 45         [ 2]  317 	jp repl  
                                    318 
      0005FD 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      00060C                        324 print_farptr:
      00060C C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      00060F C7 00 0E         [ 1]  326 	ld acc8,a 
      000612 CE 00 18         [ 2]  327 	ldw x,farptr 
      000615 CF 00 0C         [ 2]  328 	ldw acc24,x 
      000618 5F               [ 1]  329 	clrw x 
      000619 A6 10            [ 1]  330 	ld a,#16 
      00061B CD 18 05         [ 4]  331 	call prt_acc24
      00061E A6 20            [ 1]  332 	ld a,#SPACE 
      000620 CD 09 0B         [ 4]  333 	call putc 
      000623 CD 09 0B         [ 4]  334 	call putc 
      000626 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000627                        346 fetchc: ; @C
      000627 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      00062B 5C               [ 1]  348 	incw x
      00062C 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      00062D                        360 number:
      00062D CD 0E E2         [ 4]  361 	call get_token
      000630 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000632 27 03            [ 1]  363 	jreq 1$
      000634 CC 16 48         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000637 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000638                        380 show_row:
      000638 4D               [ 1]  381 	tnz a 
      000639 26 01            [ 1]  382 	jrne 1$
      00063B 81               [ 4]  383 	ret 
      00063C                        384 1$:	
      00063C 89               [ 2]  385 	pushw x  
      00063D 88               [ 1]  386 	push a 
      00063E 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      000642 CD 17 EE         [ 4]  388 	call prt_i16 
      000645 A6 20            [ 1]  389 	ld a,#SPACE  
      000647 CD 09 0B         [ 4]  390 	call putc
      00064A                        391 row_loop:
      00064A 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      00064C F6               [ 1]  393 	ld a,(x)
      00064D 5F               [ 1]  394 	clrw x 
      00064E 97               [ 1]  395 	ld xl,a 
      00064F CD 17 EE         [ 4]  396 	call prt_i16 
      000652 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      000654 5C               [ 1]  398 	incw x 
      000655 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000657 0A 01            [ 1]  400 	dec (CNT,sp)
      000659 26 EF            [ 1]  401 	jrne row_loop
      00065B                        402 	_drop VSIZE  		
      00065B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00065D 35 04 00 23      [ 1]  403 	mov tab_width,#4
      000661 A6 0D            [ 1]  404 	ld a,#CR 
      000663 CD 09 0B         [ 4]  405 	call putc 
      000666 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000667                        419 hex_dump:
      000667 88               [ 1]  420 	push a 
      000668                        421 	_vars VSIZE
      000668 52 04            [ 2]    1     sub sp,#VSIZE 
      00066A C6 00 0A         [ 1]  422 	ld a,base
      00066D 6B 03            [ 1]  423 	ld (BASE,sp),a 
      00066F 35 10 00 0A      [ 1]  424 	mov base,#16
      000673 C6 00 23         [ 1]  425 	ld a,tab_width 
      000676 6B 04            [ 1]  426 	ld (TABW,sp),a
      000678 A6 0D            [ 1]  427 	ld a,#CR 
      00067A CD 09 0B         [ 4]  428 	call putc 
      00067D 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      00067F A6 10            [ 1]  430 	ld a,#16
      000681 90 A3 00 10      [ 2]  431 	cpw y,#16
      000685 2A 02            [ 1]  432 	jrpl 2$
      000687 90 9F            [ 1]  433 	ld a,yl
      000689                        434 2$: 	
      000689 CD 06 38         [ 4]  435 	call show_row 
      00068C 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      00068E 72 A2 00 10      [ 2]  437 	subw y,#16 
      000692 90 A3 00 01      [ 2]  438 	cpw y,#1
      000696 2A E5            [ 1]  439 	jrpl 1$
      000698 7B 03            [ 1]  440 	ld a,(BASE,sp)
      00069A C7 00 0A         [ 1]  441 	ld base,a
      00069D 7B 04            [ 1]  442 	ld a,(TABW,sp)
      00069F C7 00 23         [ 1]  443 	ld tab_width,a 
      0006A2                        444 	_drop VSIZE
      0006A2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006A4 84               [ 1]  445 	pop a 
      0006A5 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006A6                         45 unlock_eeprom:
      0006A6 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006AB 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006AF 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006B3 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006B7 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006BB 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006C0 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006C1                         62 unlock_flash:
      0006C1 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006C6 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006CA 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006CE 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006D2 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006D6 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006DB 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006DC                         76 row_erase:
      0006DC 88               [ 1]   77 	push a 
      0006DD 90 89            [ 2]   78 	pushw y 
      0006DF 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006E3 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006E7 4F               [ 1]   81 	clr a 
      0006E8 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0006EA 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006EE 90 5C            [ 1]   84     incw y
      0006F0 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006F4 90 5C            [ 1]   86     incw y
      0006F6 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006FA 90 5C            [ 1]   88     incw y
      0006FC 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000700 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000705 90 85            [ 2]   91 	popw y 
      000707 84               [ 1]   92 	pop a 
      000708 81               [ 4]   93 	ret
      000709                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000709                         97 move_erase_to_ram:
      000709 89               [ 2]   98 	pushw x 
      00070A 90 89            [ 2]   99 	pushw y 
      00070C AE 07 09         [ 2]  100 	ldw x,#row_erase_end 
      00070F 1D 06 DC         [ 2]  101 	subw x,#row_erase
      000712 CF 00 0D         [ 2]  102 	ldw acc16,x 
      000715 AE 16 90         [ 2]  103 	ldw x,#tib 
      000718 90 AE 06 DC      [ 2]  104 	ldw y,#row_erase 
      00071C CD 13 B2         [ 4]  105 	call move
      00071F 90 85            [ 2]  106 	popw y
      000721 85               [ 2]  107 	popw x
      000722 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000723                        123 program_row:
      000723 88               [ 1]  124 	push a 
      000724 90 89            [ 2]  125 	pushw y 
      000726 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000728 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00072C 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000730 90 5F            [ 1]  130 	clrw y 
      000732 F6               [ 1]  131 1$:	ld a,(x)
      000733 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000737 5C               [ 1]  133 	incw x 
      000738 90 5C            [ 1]  134 	incw y 
      00073A 0A 01            [ 1]  135 	dec (BCNT,sp)
      00073C 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00073E 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000743                        139 	_drop 1 
      000743 5B 01            [ 2]    1     addw sp,#1 
      000745 90 85            [ 2]  140 	popw y 
      000747 84               [ 1]  141 	pop a 
      000748 81               [ 4]  142 	ret 
      000749                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000749                        149 move_prg_to_ram:
      000749 89               [ 2]  150 	pushw x 
      00074A 90 89            [ 2]  151 	pushw y 
      00074C AE 07 49         [ 2]  152 	ldw x,#program_row_end 
      00074F 1D 07 23         [ 2]  153 	subw x,#program_row 
      000752 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000755 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000758 90 AE 07 23      [ 2]  156 	ldw y,#program_row ; source address 
      00075C CD 13 B2         [ 4]  157 	call move
      00075F 90 85            [ 2]  158 	popw y 
      000761 85               [ 2]  159 	popw x  
      000762 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000763                        169 write_buffer:
      000763 89               [ 2]  170 	pushw x 
      000764 72 5D 00 18      [ 1]  171 	tnz farptr 
      000768 26 0D            [ 1]  172 	jrne to_flash 
      00076A CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00076D A3 37 00         [ 2]  174 	cpw x,#app_space  
      000770 24 05            [ 1]  175 	jruge to_flash 
      000772                        176 to_eeprom:
      000772 CD 06 A6         [ 4]  177 	call unlock_eeprom
      000775 20 03            [ 2]  178 	jra do_programming
      000777                        179 to_flash:
      000777 CD 06 C1         [ 4]  180 	call unlock_flash
      00077A                        181 do_programming:
      00077A 85               [ 2]  182 	popw x 
      00077B CD 16 90         [ 4]  183 	call tib
      00077E 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000782 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000786 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000787                        197 block_erase:
      000787 89               [ 2]  198 	pushw x 
      000788 C6 00 18         [ 1]  199 	ld a,farptr 
      00078B 26 14            [ 1]  200 	jrne erase_flash
      00078D CE 00 19         [ 2]  201 	ldw x,farptr+1
      000790 A3 37 00         [ 2]  202 	cpw x,#app_space 
      000793 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000795 CD 06 A6         [ 4]  205 	call unlock_eeprom 
      000798 CD 16 90         [ 4]  206 	call tib 
      00079B 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00079F 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007A1                        210 erase_flash:
      0007A1 CD 06 C1         [ 4]  211 	call unlock_flash 
      0007A4 CD 16 90         [ 4]  212 	call tib 
      0007A7 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007AB                        214 erase_exit: 
      0007AB 85               [ 2]  215 	popw x 
      0007AC 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007AD                        232 write_byte:
      0007AD 90 89            [ 2]  233 	pushw y
      0007AF                        234 	_vars VSIZE
      0007AF 52 02            [ 2]    1     sub sp,#VSIZE 
      0007B1 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007B3 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007B5 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007B9 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007BD 26 14            [ 1]  241 	jrne write_flash
      0007BF 90 A3 37 00      [ 2]  242     cpw y,#app_space 	 
      0007C3 24 0E            [ 1]  243     jruge write_flash
      0007C5 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007C9 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0007CB 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007CF 22 51            [ 1]  247 	jrugt write_exit
      0007D1 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007D3                        250 write_flash:
      0007D3 CD 06 C1         [ 4]  251 	call unlock_flash 
      0007D6 9B               [ 1]  252 1$:	sim 
      0007D7 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007D9 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007DD 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007E2 9A               [ 1]  256     rim 
      0007E3 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E7 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007E9                        260 write_eeprom:
      0007E9 CD 06 A6         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007EC 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007F0 2B 08            [ 1]  264 	jrmi 1$
      0007F2 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007F6 2A 02            [ 1]  266 	jrpl 1$
      0007F8 03 02            [ 1]  267 	cpl (OPT,sp)
      0007FA                        268 1$: 
      0007FA 0D 02            [ 1]  269     tnz (OPT,sp)
      0007FC 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007FE 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000802 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000806                        274 2$: 
      000806 7B 01            [ 1]  275     ld a,(BTW,sp)
      000808 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      00080C 0D 02            [ 1]  277     tnz (OPT,sp)
      00080E 27 08            [ 1]  278     jreq 3$
      000810 5C               [ 1]  279     incw x
      000811 7B 01            [ 1]  280     ld a,(BTW,sp)
      000813 43               [ 1]  281     cpl a
      000814 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000818 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081D 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000822                        285 write_exit:
      000822                        286 	_drop VSIZE 
      000822 5B 02            [ 2]    1     addw sp,#VSIZE 
      000824 90 85            [ 2]  287 	popw y
      000826 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000827                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000827                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000827                        309 write_block::
      000827 88               [ 1]  310 	push a 
      000828                        311 	_vars VSIZE
      000828 52 02            [ 2]    1     sub sp,#VSIZE 
      00082A 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      00082C 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      00082E 27 13            [ 1]  314 	jreq 9$
      000830 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      000832 90 F6            [ 1]  316 	ld a,(y)
      000834 CD 07 AD         [ 4]  317 	call write_byte 
      000837 5C               [ 1]  318 	incw x 
      000838 90 5C            [ 1]  319 	incw y 
      00083A 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      00083C 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      00083E 5A               [ 2]  322 	decw x
      00083F 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      000841 26 ED            [ 1]  324 	jrne 1$
      000843                        325 9$:
      000843 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      000845 CD 08 7D         [ 4]  327 	call incr_farptr
      000848                        328 	_drop VSIZE
      000848 5B 02            [ 2]    1     addw sp,#VSIZE 
      00084A 84               [ 1]  329 	pop a 
      00084B 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      00084C                        347 write_nbytes:
      00084C 90 89            [ 2]  348 	pushw y
      00084E 88               [ 1]  349 	push a 
      00084F 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      000851 5F               [ 1]  351 	clrw x 
      000852                        352 1$:  
      000852 90 F6            [ 1]  353 	ld a,(y)
      000854 90 5C            [ 1]  354 	incw y
      000856 CD 07 AD         [ 4]  355 	call write_byte 
      000859 5C               [ 1]  356 	incw x 
      00085A 0A 01            [ 1]  357 	dec (1,sp)  
      00085C 26 F4            [ 1]  358 	jrne 1$ 
      00085E 84               [ 1]  359 9$: pop a 
      00085F 90 85            [ 2]  360 	popw y 
      000861 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      000862                        370 row_align:
      000862 A6 7F            [ 1]  371 	ld a,#0x7f 
      000864 C4 00 1A         [ 1]  372 	and a,farptr+2 
      000867 27 13            [ 1]  373 	jreq 1$ 
      000869 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      00086C 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      00086F 24 04            [ 1]  376 	jrnc 0$
      000871 72 5C 00 18      [ 1]  377 	inc farptr 
      000875 9F               [ 1]  378 0$: ld a,xl 
      000876 A4 80            [ 1]  379 	and a,#0x80
      000878 97               [ 1]  380 	ld xl,a
      000879 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      00087C 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      00087D                        390 incr_farptr:
      00087D 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      000881 24 04            [ 1]  392 	jrnc 1$
      000883 72 5C 00 18      [ 1]  393 	inc farptr 
      000887 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      00088A 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      00088B                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00088B 5F               [ 1]  406 	clrw x 
      00088C 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      000890 26 06            [ 1]  408 	jrne 2$
      000892 5C               [ 1]  409 	incw x 
      000893 A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      000896 25 F4            [ 1]  411 	jrult 1$ 
      000898 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      000899                         66 Uart1RxHandler: ; console receive char 
      000899 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      00089E C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008A1 A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008A3 26 06            [ 1]   70 	jrne 2$
      0008A5 CD 09 0B         [ 4]   71 	call putc 
      0008A8 CC 00 57         [ 2]   72 	jp user_interrupted
      0008AB                         73 2$:
      0008AB A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008AD 26 03            [ 1]   75 	jrne 3$
      0008AF CC 00 C3         [ 2]   76 	jp cold_start 	
      0008B2 88               [ 1]   77 3$:	push a 
      0008B3 A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008B5 CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008B8 5F               [ 1]   80 	clrw x 
      0008B9 97               [ 1]   81 	ld xl,a 
      0008BA 84               [ 1]   82 	pop a 
      0008BB F7               [ 1]   83 	ld (x),a 
      0008BC C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008BF 4C               [ 1]   85 	inc a 
      0008C0 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008C2 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008C5 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008C6                         97 uart1_init:
      0008C6 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008CA 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008CE 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008D2 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008D6                        103 uart1_set_baud: 
      0008D6 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008D7 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008D9 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008DC 27 0A            [ 1]  109 	jreq 2$ 
      0008DE                        110 1$: ; 8 Mhz 	
      0008DE 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008E2 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008E6 20 08            [ 2]  113 	jra 3$
      0008E8                        114 2$: ; 16 Mhz 	
      0008E8 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008EC 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008F0                        117 3$:
      0008F0 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008F4 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008F8 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008FC 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      000901 72 5F 00 2E      [ 1]  122     clr rx1_head 
      000905 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000909 84               [ 1]  124 	pop a  
      00090A 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      00090B                        133 putc:: ; console output always on UART1
      00090B                        134 uart1_putc:: 
      00090B 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000910 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000913 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000914                        148 qgetc::
      000914                        149 uart1_qgetc::
      000914 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000917 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      00091A 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      00091B                        161 getc:: ;console input
      00091B                        162 uart1_getc::
      00091B CD 09 14         [ 4]  163 	call uart1_qgetc
      00091E 27 FB            [ 1]  164 	jreq uart1_getc 
      000920 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000921 A6 26            [ 1]  167 	ld a,#rx1_queue
      000923 CB 00 2E         [ 1]  168 	add a,rx1_head 
      000926 5F               [ 1]  169 	clrw x  
      000927 97               [ 1]  170 	ld xl,a 
      000928 F6               [ 1]  171 	ld a,(x)
      000929 88               [ 1]  172 	push a
      00092A C6 00 2E         [ 1]  173 	ld a,rx1_head 
      00092D 4C               [ 1]  174 	inc a 
      00092E A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000930 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000933 84               [ 1]  177 	pop a  
      000934 85               [ 2]  178 	popw x
      000935 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000936 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000942                        207 get_escape:
      000942 CD 09 1B         [ 4]  208     call getc 
      000945 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000947 27 02            [ 1]  210     jreq 1$
      000949 4F               [ 1]  211     clr a
      00094A 81               [ 4]  212     ret
      00094B CD 09 1B         [ 4]  213 1$: call getc 
      00094E AE 09 36         [ 2]  214     ldw x,#convert_table
      000951                        215 2$:
      000951 F1               [ 1]  216     cp a,(x)
      000952 27 08            [ 1]  217     jreq 4$
      000954 1C 00 02         [ 2]  218     addw x,#2
      000957 7D               [ 1]  219     tnz (x)
      000958 26 F7            [ 1]  220     jrne 2$
      00095A 4F               [ 1]  221     clr a
      00095B 81               [ 4]  222     ret 
      00095C 5C               [ 1]  223 4$: incw x 
      00095D F6               [ 1]  224     ld a,(x)
      00095E A1 84            [ 1]  225     cp a,#SUP
      000960 26 05            [ 1]  226     jrne 5$
      000962 88               [ 1]  227     push a 
      000963 CD 09 1B         [ 4]  228     call getc
      000966 84               [ 1]  229     pop a 
      000967                        230 5$:
      000967 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      000968                        241 puts::
      000968 F6               [ 1]  242     ld a,(x)
      000969 27 06            [ 1]  243 	jreq 1$
      00096B CD 09 0B         [ 4]  244 	call putc 
      00096E 5C               [ 1]  245 	incw x 
      00096F 20 F7            [ 2]  246 	jra puts 
      000971 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000972                        258 bksp:
      000972 A6 08            [ 1]  259 	ld a,#BS 
      000974 CD 09 0B         [ 4]  260 	call putc 
      000977 A6 20            [ 1]  261 	ld a,#SPACE 
      000979 CD 09 0B         [ 4]  262 	call putc 
      00097C A6 08            [ 1]  263 	ld a,#BS 
      00097E CD 09 0B         [ 4]  264 	call putc 
      000981 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000982                        274 delete_nchar:
      000982 88               [ 1]  275 	push a 
      000983 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000985 27 07            [ 1]  277 	jreq 1$
      000987 CD 09 72         [ 4]  278 	call bksp 
      00098A 0A 01            [ 1]  279 	dec (1,sp)
      00098C 20 F5            [ 2]  280 	jra 0$
      00098E 84               [ 1]  281 1$:	pop a 
      00098F 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000990                        290 send_escape:
      000990 A6 1B            [ 1]  291 	ld a,#ESC 
      000992 CD 09 0B         [ 4]  292 	call putc 
      000995 A6 5B            [ 1]  293 	ld a,#'[
      000997 CD 09 0B         [ 4]  294 	call putc 
      00099A 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00099B                        311 send_parameter:
      00099B 89               [ 2]  312 	pushw x 
      00099C 5F               [ 1]  313 	clrw x 
      00099D 97               [ 1]  314 	ld xl,a 
      00099E A6 0A            [ 1]  315 	ld a,#10 
      0009A0 62               [ 2]  316 	div x,a 
      0009A1 95               [ 1]  317 	ld xh,a 
      0009A2 9F               [ 1]  318 	ld a,xl
      0009A3 4D               [ 1]  319     tnz a 
      0009A4 27 0B            [ 1]  320     jreq 2$
      0009A6 A1 09            [ 1]  321 	cp a,#9 
      0009A8 23 02            [ 2]  322 	jrule 1$
      0009AA A6 09            [ 1]  323 	ld a,#9
      0009AC                        324 1$:
      0009AC AB 30            [ 1]  325 	add a,#'0 
      0009AE CD 09 0B         [ 4]  326 	call putc
      0009B1 9E               [ 1]  327 2$:	ld a,xh 
      0009B2 AB 30            [ 1]  328 	add a,#'0
      0009B4 CD 09 0B         [ 4]  329 	call putc 
      0009B7 85               [ 2]  330 	popw x 
      0009B8 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009B9                        344 move_left:
      0009B9 88               [ 1]  345 	push a 
      0009BA CD 09 90         [ 4]  346 	call send_escape
      0009BD 84               [ 1]  347     pop a
      0009BE CD 09 9B         [ 4]  348 	call send_parameter 
      0009C1 A6 44            [ 1]  349 	ld a,#'D 
      0009C3 CD 09 0B         [ 4]  350 	call putc 
      0009C6 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0009C7                        362 move_right:
      0009C7 88               [ 1]  363 	push a 
      0009C8 CD 09 90         [ 4]  364 	call send_escape
      0009CB 84               [ 1]  365     pop a
      0009CC CD 09 9B         [ 4]  366 	call send_parameter 
      0009CF A6 43            [ 1]  367 	ld a,#'C 
      0009D1 CD 09 0B         [ 4]  368 	call putc 
      0009D4 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009D5                        379 spaces::
      0009D5 A6 20            [ 1]  380 	ld a,#SPACE 
      0009D7 5D               [ 2]  381 1$:	tnzw x
      0009D8 27 06            [ 1]  382 	jreq 9$
      0009DA CD 09 0B         [ 4]  383 	call putc 
      0009DD 5A               [ 2]  384 	decw x
      0009DE 20 F7            [ 2]  385 	jra 1$
      0009E0                        386 9$: 
      0009E0 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009E1                        405 insert_char: 
      0009E1                        406 	_vars VSIZE 
      0009E1 52 03            [ 2]    1     sub sp,#VSIZE 
      0009E3 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009E5 9E               [ 1]  408     ld a,xh 
      0009E6 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009E8 9F               [ 1]  410     ld a,xl 
      0009E9 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009EB 93               [ 1]  412     ldw x,y
      0009EC 5C               [ 1]  413     incw x 
      0009ED 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009EF 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0009F1 4C               [ 1]  416     inc a 
      0009F2 C7 00 0E         [ 1]  417     ld acc8,a 
      0009F5 72 5F 00 0D      [ 1]  418     clr acc16
      0009F9 CD 13 B2         [ 4]  419     call move
      0009FC 90 AE 16 90      [ 2]  420     ldw y,#tib 
      000A00 7B 01            [ 1]  421     ld a,(IPOS,sp)
      000A02 C7 00 0E         [ 1]  422     ld acc8,a 
      000A05 72 B9 00 0D      [ 2]  423     addw y,acc16 
      000A09 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      000A0B 90 F7            [ 1]  425     ld (y),a
      000A0D 90 5C            [ 1]  426     incw y  
      000A0F 7B 01            [ 1]  427     ld a,(IPOS,sp)
      000A11 CD 09 B9         [ 4]  428     call move_left
      000A14 AE 16 90         [ 2]  429     ldw x,#tib 
      000A17 CD 09 68         [ 4]  430     call puts 
      000A1A 7B 03            [ 1]  431     ld a,(LLEN,sp)
      000A1C 10 01            [ 1]  432     sub a,(IPOS,sp) 
      000A1E CD 09 B9         [ 4]  433     call move_left 
      000A21                        434 	_drop VSIZE 
      000A21 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A23 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      000A24                        448 delete_under:
      000A24                        449 	_vars VSIZE 
      000A24 52 02            [ 2]    1     sub sp,#VSIZE 
      000A26 6B 02            [ 1]  450     ld (LLEN,sp),a 
      000A28 9F               [ 1]  451     ld a,xl 
      000A29 6B 01            [ 1]  452     ld (CPOS,sp),a 
      000A2B 93               [ 1]  453     ldw x,y ; move destination
      000A2C 90 5C            [ 1]  454     incw y  ; move source 
      000A2E 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A30 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A32 4C               [ 1]  457     inc a ; move including zero at end.
      000A33 C7 00 0E         [ 1]  458     ld acc8,a 
      000A36 72 5F 00 0D      [ 1]  459     clr acc16 
      000A3A CD 13 B2         [ 4]  460 	call move 
      000A3D 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A41 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A43 C7 00 0E         [ 1]  463     ld acc8,a 
      000A46 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A4A 93               [ 1]  465     ldw x,y 
      000A4B CD 09 68         [ 4]  466     call puts 
      000A4E A6 20            [ 1]  467     ld a,#SPACE  
      000A50 CD 09 0B         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000A53 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A55 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A57 CD 09 B9         [ 4]  471     call move_left 
      000A5A 0A 02            [ 1]  472     dec (LLEN,sp)
      000A5C                        473 	_drop VSIZE 
      000A5C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5E 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A5F                        486 delete_line:
      000A5F CD 09 90         [ 4]  487     call send_escape
      000A62 A6 32            [ 1]  488 	ld a,#'2
      000A64 CD 09 0B         [ 4]  489 	call putc 
      000A67 A6 4B            [ 1]  490 	ld a,#'K 
      000A69 CD 09 0B         [ 4]  491 	call putc 
      000A6C 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A6D                        524 readln::
      000A6D 90 89            [ 2]  525 	pushw y 
      000A6F                        526 	_vars VSIZE 
      000A6F 52 04            [ 2]    1     sub sp,#VSIZE 
      000A71 5F               [ 1]  527 	clrw x 
      000A72 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A74 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A76 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A78 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A7C                        532 readln_loop:
      000A7C CD 09 1B         [ 4]  533 	call getc
      000A7F 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A81 A1 1B            [ 1]  535     cp a,#ESC 
      000A83 26 05            [ 1]  536     jrne 0$
      000A85 CD 09 42         [ 4]  537     call get_escape 
      000A88 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A8A A1 0D            [ 1]  539 0$:	cp a,#CR
      000A8C 26 03            [ 1]  540 	jrne 1$
      000A8E CC 0C 09         [ 2]  541 	jp readln_quit
      000A91 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A93 26 03            [ 1]  543 	jrne 2$ 
      000A95 CC 0C 09         [ 2]  544 	jp readln_quit
      000A98                        545 2$:
      000A98 A1 08            [ 1]  546 	cp a,#BS
      000A9A 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A9C 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A9E 27 DC            [ 1]  550     jreq readln_loop 
      000AA0 A6 01            [ 1]  551     ld a,#1 
      000AA2 CD 09 B9         [ 4]  552     call move_left
      000AA5 0A 03            [ 1]  553     dec (CPOS,sp)
      000AA7 90 5A            [ 2]  554     decw y 
      000AA9 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000AAB CC 0B B5         [ 2]  556     jp 12$
      000AAE                        557 3$:
      000AAE A1 04            [ 1]  558 	cp a,#CTRL_D
      000AB0 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000AB2 CD 0A 5F         [ 4]  561 	call delete_line 
      000AB5 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000AB7 4C               [ 1]  563     inc a 
      000AB8 CD 09 B9         [ 4]  564     call move_left 
      000ABB A6 3E            [ 1]  565 	ld a,#'> 
      000ABD CD 09 0B         [ 4]  566 	call putc 
      000AC0 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000AC4 90 7F            [ 1]  568 	clr (y)
      000AC6 0F 02            [ 1]  569 	clr (LL,sp)
      000AC8 0F 03            [ 1]  570 	clr (CPOS,sp)
      000ACA 20 B0            [ 2]  571 	jra readln_loop
      000ACC                        572 4$:
      000ACC A1 12            [ 1]  573 	cp a,#CTRL_R 
      000ACE 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000AD0 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000AD2 26 A8            [ 1]  577 	jrne readln_loop
      000AD4 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AD8 93               [ 1]  579 	ldw x,y
      000AD9 CD 13 86         [ 4]  580 	call strlen
      000ADC 4D               [ 1]  581 	tnz a  
      000ADD 27 9D            [ 1]  582 	jreq readln_loop
      000ADF 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AE1 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AE3 93               [ 1]  585 	ldw x,y  
      000AE4 CD 09 68         [ 4]  586 	call puts
      000AE7 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000AE9 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000AEC 20 8E            [ 2]  589 	jra readln_loop 
      000AEE                        590 5$:
      000AEE A1 05            [ 1]  591 	cp a,#CTRL_E 
      000AF0 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AF2 AE 16 90         [ 2]  594 	ldw x,#tib 
      000AF5 CD 18 90         [ 4]  595 	call atoi24
      000AF8 CE 00 0D         [ 2]  596 	ldw x,acc16
      000AFB CD 0C 45         [ 4]  597 	call search_lineno
      000AFE 5D               [ 2]  598 	tnzw x 
      000AFF 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000B01 CC 0C 09         [ 2]  603 	jp readln_quit  
      000B04                        604 51$:
      000B04 CF 00 04         [ 2]  605 	ldw basicptr,x
      000B07 E6 02            [ 1]  606 	ld a,(2,x)
      000B09 C7 00 03         [ 1]  607 	ld count,a 
      000B0C 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000B10 CD 11 A2         [ 4]  609 	call decompile 
      000B13 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  611 	ld a,#CR 
      000B17 CD 09 0B         [ 4]  612 	call putc 
      000B1A A6 3E            [ 1]  613 	ld a,#'>
      000B1C CD 09 0B         [ 4]  614 	call putc
      000B1F AE 16 90         [ 2]  615     ldw x,#tib  
      000B22 CD 13 86         [ 4]  616 	call strlen 
      000B25 6B 02            [ 1]  617 	ld (LL,sp),a 
      000B27 CD 09 68         [ 4]  618 	call puts 
      000B2A 90 93            [ 1]  619 	ldw y,x
      000B2C 7B 02            [ 1]  620     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B30 CC 0A 7C         [ 2]  622 	jp readln_loop
      000B33                        623 6$:
      000B33 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B37 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  628     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  629     jrmi 61$
      000B3D CC 0A 7C         [ 2]  630     jp readln_loop 
      000B40                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B40 A6 01            [ 1]  632     ld a,#1 
      000B42 CD 09 C7         [ 4]  633 	call move_right 
      000B45 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  635     incw y 
      000B49 CC 0A 7C         [ 2]  636     jp readln_loop 
      000B4C A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B50 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  641 	jrne 71$
      000B54 CC 0A 7C         [ 2]  642 	jp readln_loop
      000B57                        643 71$:
      000B57 A6 01            [ 1]  644     ld a,#1 
      000B59 CD 09 B9         [ 4]  645 	call move_left 
      000B5C 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  647     decw y 
      000B60 CC 0A 7C         [ 2]  648 	jp readln_loop 
      000B63 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B67 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B69 CD 09 B9         [ 4]  653     call move_left 
      000B6C 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B6E 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B72 CC 0A 7C         [ 2]  656 	jp readln_loop  
      000B75 A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B79 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  661 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  662 	jrne 91$
      000B7F CC 0A 7C         [ 2]  663 	jp readln_loop 
      000B82                        664 91$:
      000B82 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B84 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B86 CD 09 C7         [ 4]  667 	call move_right 
      000B89 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B8D 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  671     clr acc16 
      000B95 C7 00 0E         [ 1]  672     ld acc8,a 
      000B98 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B9C CC 0A 7C         [ 2]  674 	jp readln_loop 
      000B9F A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000BA5 CD 26 5C         [ 4]  679 	call beep_1khz
      000BA8 CC 0A 7C         [ 2]  680 	jp readln_loop 
      000BAB A1 84            [ 1]  681 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000BAF 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  685     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000BB5                        687 12$:
      000BB5 97               [ 1]  688     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 24         [ 4]  690     call delete_under
      000BBB 0A 02            [ 1]  691     dec (LLEN,sp)
      000BBD                        692 13$:
      000BBD CC 0A 7C         [ 2]  693     jp readln_loop 
      000BC0                        694 final_test:
      000BC0 A1 20            [ 1]  695 	cp a,#SPACE
      000BC2 2A 03            [ 1]  696 	jrpl accept_char
      000BC4 CC 0A 7C         [ 2]  697 	jp readln_loop
      000BC7                        698 accept_char:
      000BC7 A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  700 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  701 	jrpl 1$
      000BCD CC 0A 7C         [ 2]  702 	jp readln_loop
      000BD0 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BD4 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  707     cp a,(LL,sp)
      000BD8 27 12            [ 1]  708     jreq overwrite
      000BDA 7B 02            [ 1]  709     ld a,(LL,sp)
      000BDC 97               [ 1]  710     ld xl,a 
      000BDD 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BDF 95               [ 1]  712     ld xh,a
      000BE0 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BE2 CD 09 E1         [ 4]  714     call insert_char
      000BE5 0C 02            [ 1]  715     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BE9 CC 0A 7C         [ 2]  717     jp readln_loop 
      000BEC                        718 overwrite:
      000BEC 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  720 	ld (y),a
      000BF0 90 5C            [ 1]  721     incw y
      000BF2 CD 09 0B         [ 4]  722     call putc 
      000BF5 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  724 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  725 	jrmi 1$
      000BFB 90 7F            [ 1]  726 	clr (y)
      000BFD 0C 02            [ 1]  727 	inc (LL,sp)
      000BFF 0C 03            [ 1]  728     inc (CPOS,sp)
      000C01 CC 0A 7C         [ 2]  729 	jp readln_loop 
      000C04                        730 1$:	
      000C04 0C 03            [ 1]  731 	inc (CPOS,sp)
      000C06 CC 0A 7C         [ 2]  732 	jp readln_loop 
      000C09                        733 readln_quit:
      000C09 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000C0D 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  737     clr (y)
      000C14 7B 02            [ 1]  738 	ld a,(LL,sp)
      000C16 C7 00 03         [ 1]  739 	ld count,a 
      000C19 A6 0D            [ 1]  740 	ld a,#CR
      000C1B CD 09 0B         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C1E                        742 	_drop VSIZE 
      000C1E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  743 	popw y 
      000C22 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000C23                        752 print_hex::
      000C23 88               [ 1]  753 	push a 
      000C24 4E               [ 1]  754 	swap a 
      000C25 CD 0C 3A         [ 4]  755 	call to_hex_char 
      000C28 CD 09 0B         [ 4]  756 	call putc 
      000C2B 7B 01            [ 1]  757     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  758 	call to_hex_char
      000C30 CD 09 0B         [ 4]  759 	call putc
      000C33 A6 20            [ 1]  760 	ld a,#SPACE 
      000C35 CD 09 0B         [ 4]  761 	call putc 
      000C38 84               [ 1]  762 	pop a 
      000C39 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C3A                        772 to_hex_char::
      000C3A A4 0F            [ 1]  773 	and a,#15 
      000C3C A1 09            [ 1]  774 	cp a,#9 
      000C3E 23 02            [ 2]  775 	jrule 1$ 
      000C40 AB 07            [ 1]  776 	add a,#7
      000C42 AB 30            [ 1]  777 1$: add a,#'0 
      000C44 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 B2         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C9A                         99 	_drop VSIZE     
      000C9A 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C9C 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C9D                        115 create_gap:
      000C9D                        116 	_vars VSIZE
      000C9D 52 06            [ 2]    1     sub sp,#VSIZE 
      000C9F 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CA1 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA3 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CA7 90 93            [ 1]  120 	ldw y,x ; SRC
      000CA9 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CAD 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CAF CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CB2 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CB5 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CB8 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CBA CD 13 B2         [ 4]  128 	call move
      000CBD CE 00 1D         [ 2]  129 	ldw x,txtend
      000CC0 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC3 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000CC6                        132 9$:	_drop VSIZE 
      000CC6 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CC8 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CC9                        150 insert_line:
      000CC9                        151 	_vars VSIZE 
      000CC9 52 08            [ 2]    1     sub sp,#VSIZE 
      000CCB CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CCE C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CD1 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD3 AE 00 02         [ 2]  156 	ldw x,#2 
      000CD6 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CDA A1 03            [ 1]  158 	cp a,#3
      000CDC 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CDE 5F               [ 1]  160 	clrw x 
      000CDF 97               [ 1]  161 	ld xl,a
      000CE0 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CE2 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CE5 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CE7 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CEA 20 38            [ 2]  166 	jra 4$
      000CEC 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CF0 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CF2 AE 00 02         [ 2]  170 	ldw x,#2 
      000CF5 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CF9 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CFA 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CFC 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CFE 4F               [ 1]  177 	clr a 
      000CFF CD 0C 45         [ 4]  178 	call search_lineno 
      000D02 5D               [ 2]  179 	tnzw x 
      000D03 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D05 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D07 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D09 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D0B CD 0C 70         [ 4]  188 	call del_line
      000D0E                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D0E A6 03            [ 1]  192 	ld a,#3
      000D10 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D12 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D14 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D16 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D19 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D1B 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D1D 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D1F CD 0C 9D         [ 4]  204 	call create_gap
      000D22 20 06            [ 2]  205 	jra 5$
      000D24                        206 4$: 
      000D24 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D27 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D2A 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D2C CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D2F 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D33 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D35 CD 13 B2         [ 4]  214 	call move 
      000D38                        215 insert_ln_exit:	
      000D38                        216 	_drop VSIZE
      000D38 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D3A 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D3B                        233 parse_quote: 
      000D3B                        234 	_vars VSIZE 
      000D3B 52 02            [ 2]    1     sub sp,#VSIZE 
      000D3D 4F               [ 1]  235 	clr a
      000D3E 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D40                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000D40 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D43 27 24            [ 1]  239 	jreq 6$
      000D45 72 5C 00 01      [ 1]  240 	inc in 
      000D49 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D4B A6 5C            [ 1]  242 	ld a,#'\
      000D4D 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D4F 26 0A            [ 1]  244 	jrne 3$
      000D51 0F 01            [ 1]  245 	clr (PREV,sp)
      000D53 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D55 AD 1C            [ 4]  247 	callr convert_escape
      000D57 F7               [ 1]  248 	ld (x),a 
      000D58 5C               [ 1]  249 	incw x 
      000D59 20 E5            [ 2]  250 	jra 2$
      000D5B                        251 3$:
      000D5B 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D5D A1 5C            [ 1]  253 	cp a,#'\'
      000D5F 27 DD            [ 1]  254 	jreq 1$
      000D61 A1 22            [ 1]  255 	cp a,#'"
      000D63 27 04            [ 1]  256 	jreq 6$ 
      000D65 F7               [ 1]  257 	ld (x),a 
      000D66 5C               [ 1]  258 	incw x 
      000D67 20 D7            [ 2]  259 	jra 2$
      000D69                        260 6$:
      000D69 7F               [ 1]  261 	clr (x)
      000D6A 5C               [ 1]  262 	incw x 
      000D6B 90 93            [ 1]  263 	ldw y,x 
      000D6D 5F               [ 1]  264 	clrw x 
      000D6E A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D70                        266 	_drop VSIZE
      000D70 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D72 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D73                        278 convert_escape:
      000D73 89               [ 2]  279 	pushw x 
      000D74 AE 0D 88         [ 2]  280 	ldw x,#escaped 
      000D77 F1               [ 1]  281 1$:	cp a,(x)
      000D78 27 06            [ 1]  282 	jreq 2$
      000D7A 7D               [ 1]  283 	tnz (x)
      000D7B 27 09            [ 1]  284 	jreq 3$
      000D7D 5C               [ 1]  285 	incw x 
      000D7E 20 F7            [ 2]  286 	jra 1$
      000D80 1D 0D 88         [ 2]  287 2$: subw x,#escaped 
      000D83 9F               [ 1]  288 	ld a,xl 
      000D84 AB 07            [ 1]  289 	add a,#7
      000D86 85               [ 2]  290 3$:	popw x 
      000D87 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    292 
      000D88 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D90                        310 parse_integer: ; { -- n }
      000D90 89               [ 2]  311 	pushw x 	
      000D91 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D93 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D95 A1 24            [ 1]  314 	cp a,#'$
      000D97 26 04            [ 1]  315 	jrne 2$ 
      000D99                        316     _drop #1
      000D99 5B 01            [ 2]    1     addw sp,##1 
      000D9B 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D9D F7               [ 1]  318 2$:	ld (x),a 
      000D9E 5C               [ 1]  319 	incw x 
      000D9F 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DA2 72 5C 00 01      [ 1]  321 	inc in 
      000DA6 CD 18 84         [ 4]  322 	call to_upper 
      000DA9 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DAB CD 0E 2D         [ 4]  324 	call is_digit 
      000DAE 25 ED            [ 1]  325 	jrc 2$
      000DB0 A6 10            [ 1]  326 	ld a,#16 
      000DB2 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB4 26 0A            [ 1]  328 	jrne 3$ 
      000DB6 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DB8 A1 41            [ 1]  330 	cp a,#'A 
      000DBA 2B 04            [ 1]  331 	jrmi 3$ 
      000DBC A1 47            [ 1]  332 	cp a,#'G 
      000DBE 2B DD            [ 1]  333 	jrmi 2$ 
      000DC0 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC4 7F               [ 1]  335     clr (x)
      000DC5 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DC7 CD 18 90         [ 4]  337 	call atoi24
      000DCA 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000DCC C6 00 0C         [ 1]  339 	ld a,acc24 
      000DCF 90 F7            [ 1]  340 	ld (y),a 
      000DD1 90 5C            [ 1]  341 	incw y  
      000DD3 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DD6 90 FF            [ 2]  343 	ldw (y),x 
      000DD8 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DDC A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DDE                        346 	_drop VSIZE  
      000DDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DE0 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE1                        364 parse_binary: ; { -- n }
      000DE1 4B 00            [ 1]  365 	push #0
      000DE3 4B 00            [ 1]  366 	push #0
      000DE5 4B 00            [ 1]  367 	push #0
      000DE7                        368 2$:	
      000DE7 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DEA 72 5C 00 01      [ 1]  370 	inc in 
      000DEE A1 30            [ 1]  371 	cp a,#'0 
      000DF0 27 06            [ 1]  372 	jreq 3$
      000DF2 A1 31            [ 1]  373 	cp a,#'1 
      000DF4 27 02            [ 1]  374 	jreq 3$ 
      000DF6 20 0B            [ 2]  375 	jra bin_exit 
      000DF8 A0 30            [ 1]  376 3$: sub a,#'0 
      000DFA 46               [ 1]  377 	rrc a
      000DFB 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DFD 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DFF 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E01 20 E4            [ 2]  381 	jra 2$  
      000E03                        382 bin_exit:
      000E03 72 5A 00 01      [ 1]  383 	dec in 
      000E07 90 93            [ 1]  384 	ldw y,x
      000E09 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E0B 90 F7            [ 1]  386 	ld (y),a 
      000E0D 90 5C            [ 1]  387 	incw y 
      000E0F 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000E11 90 FF            [ 2]  389 	ldw (y),x 
      000E13 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E17 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E19                        392 	_drop VSIZE 
      000E19 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E1B 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E1C                        402 is_alpha::
      000E1C A1 41            [ 1]  403 	cp a,#'A 
      000E1E 8C               [ 1]  404 	ccf 
      000E1F 24 0B            [ 1]  405 	jrnc 9$ 
      000E21 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E23 25 07            [ 1]  407 	jrc 9$ 
      000E25 A1 61            [ 1]  408 	cp a,#'a 
      000E27 8C               [ 1]  409 	ccf 
      000E28 24 02            [ 1]  410 	jrnc 9$
      000E2A A1 7B            [ 1]  411 	cp a,#'z+1
      000E2C 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E2D                        421 is_digit::
      000E2D A1 30            [ 1]  422 	cp a,#'0
      000E2F 25 03            [ 1]  423 	jrc 1$
      000E31 A1 3A            [ 1]  424     cp a,#'9+1
      000E33 8C               [ 1]  425 	ccf 
      000E34 8C               [ 1]  426 1$:	ccf 
      000E35 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E36                        438 is_alnum::
      000E36 CD 0E 2D         [ 4]  439 	call is_digit
      000E39 25 03            [ 1]  440 	jrc 1$ 
      000E3B CD 0E 1C         [ 4]  441 	call is_alpha
      000E3E 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E3F                        453 is_symbol_char: 
      000E3F A1 5F            [ 1]  454 	cp a,#'_ 
      000E41 26 03            [ 1]  455 	jrne 1$
      000E43 99               [ 1]  456 	scf 
      000E44 20 03            [ 2]  457 	jra 9$ 
      000E46 CD 0E 36         [ 4]  458 1$:	call is_alnum 
      000E49 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4A                        473 parse_symbol:
      000E4A 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E4B                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E4B CD 18 84         [ 4]  477 	call to_upper  
      000E4E F7               [ 1]  478 	ld (x), a 
      000E4F 5C               [ 1]  479 	incw x
      000E50 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E53 72 5C 00 01      [ 1]  481 	inc in 
      000E57 CD 0E 3F         [ 4]  482 	call is_symbol_char 
      000E5A 25 EF            [ 1]  483 	jrc symb_loop 
      000E5C 7F               [ 1]  484 	clr (x)
      000E5D 72 5A 00 01      [ 1]  485 	dec in  
      000E61 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E62                        502 parse_keyword: 
      000E62 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E63 CD 0E 4A         [ 4]  504 	call parse_symbol
      000E66 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E68 E6 02            [ 1]  506 	ld a,(2,x)
      000E6A 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E6C E6 01            [ 1]  509 	ld a,(1,x) 
      000E6E A0 41            [ 1]  510 	sub a,#'A 
      000E70 AE 00 03         [ 2]  511 	ldw x,#3 
      000E73 42               [ 4]  512 	mul x,a 
      000E74 1C 00 34         [ 2]  513 	addw x,#vars 
      000E77 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E79 20 36            [ 2]  515 	jra 4$ 
      000E7B                        516 2$: ; check for keyword, otherwise syntax error.
      000E7B                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E7B AE 34 D8         [ 2]    1     ldw x,#kword_dict+2
      000E7E 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E80 90 5C            [ 1]  519 	incw y 
      000E82 CD 19 11         [ 4]  520 	call search_dict
      000E85 4D               [ 1]  521 	tnz a
      000E86 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E88 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8A A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E8C 90 F7            [ 1]  527 	ld (y),a 
      000E8E 90 5C            [ 1]  528 	incw y
      000E90 93               [ 1]  529 	ldw x,y 
      000E91 CD 13 86         [ 4]  530 	call strlen
      000E94 A1 0F            [ 1]  531 	cp a,#15 
      000E96 23 02            [ 2]  532 	jrule 22$ 
      000E98 A6 0F            [ 1]  533 	ld a,#15
      000E9A                        534 22$:	
      000E9A 88               [ 1]  535 	push a 
      000E9B                        536 24$:
      000E9B 90 F6            [ 1]  537     ld a,(y)
      000E9D 27 09            [ 1]  538 	jreq 3$
      000E9F 90 5C            [ 1]  539 	incw y
      000EA1 0A 01            [ 1]  540 	dec (1,sp) 
      000EA3 26 F6            [ 1]  541 	jrne 24$
      000EA5 4F               [ 1]  542 	clr a 
      000EA6 90 F7            [ 1]  543 	ld (y),a 
      000EA8 90 5C            [ 1]  544 3$: incw y 
      000EAA                        545 	_drop 1 
      000EAA 5B 01            [ 2]    1     addw sp,#1 
      000EAC A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EAE 5F               [ 1]  547 	clrw x 	
      000EAF 20 1B            [ 2]  548 	jra 5$ 
      000EB1                        549 4$:	
      000EB1 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EB3 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000EB5 2B 06            [ 1]  552 	jrmi 41$
      000EB7 90 F7            [ 1]  553 	ld (y),a 
      000EB9 90 5C            [ 1]  554 	incw y 
      000EBB 20 0F            [ 2]  555 	jra 5$ 
      000EBD                        556 41$:	
      000EBD A3 1C 99         [ 2]  557 	cpw x,#let  
      000EC0 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000EC2 90 F7            [ 1]  559 	ld (y),a 
      000EC4 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000EC6 90 FF            [ 2]  561 	ldw (y),x
      000EC8 72 A9 00 02      [ 2]  562 	addw y,#2  
      000ECC                        563 5$:	_drop VSIZE 
      000ECC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000ECE 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000ECF                        575 skip:
      000ECF 88               [ 1]  576 	push a
      000ED0 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000ED3 27 0A            [ 1]  578 	jreq 2$
      000ED5 11 01            [ 1]  579 	cp a,(C,sp)
      000ED7 26 06            [ 1]  580 	jrne 2$
      000ED9 72 5C 00 01      [ 1]  581 	inc in
      000EDD 20 F1            [ 2]  582 	jra 1$
      000EDF                        583 2$: _drop 1 
      000EDF 5B 01            [ 2]    1     addw sp,#1 
      000EE1 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EE2                        609 get_token:: 
      000EE2                        610 	_vars VSIZE
      000EE2 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EE4                        616 0$: 
      000EE4 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EE8 A6 20            [ 1]  618 	ld a,#SPACE
      000EEA CD 0E CF         [ 4]  619 	call skip
      000EED 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EF2 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EF5 26 05            [ 1]  622 	jrne 1$
      000EF7 90 93            [ 1]  623 	ldw y,x 
      000EF9 CC 10 93         [ 2]  624 	jp token_exit ; end of line 
      000EFC 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F00 CD 18 84         [ 4]  626 	call to_upper 
      000F03 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F05                        629 str_tst:  	
      000F05                        630 	_case '"' nbr_tst
      000F05 A6 22            [ 1]    1 	ld a,#'"' 
      000F07 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F09 26 0A            [ 1]    3 	jrne nbr_tst
      000F0B A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F0D F7               [ 1]  632 	ld (x),a 
      000F0E 5C               [ 1]  633 	incw x 
      000F0F CD 0D 3B         [ 4]  634 	call parse_quote
      000F12 CC 10 93         [ 2]  635 	jp token_exit
      000F15                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F15 A6 24            [ 1]  638 	ld a,#'$'
      000F17 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F19 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F1B A6 26            [ 1]  642 	ld a,#'&
      000F1D 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F1F 26 0A            [ 1]  644 	jrne 0$
      000F21 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F23 F7               [ 1]  646 	ld (x),a 
      000F24 5C               [ 1]  647 	incw x 
      000F25 CD 0D E1         [ 4]  648 	call parse_binary ; expect binary integer 
      000F28 CC 10 93         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F2B 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F2D CD 0E 2D         [ 4]  652 	call is_digit
      000F30 24 0C            [ 1]  653 	jrnc 3$
      000F32 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F34 F7               [ 1]  655 	ld (x),a 
      000F35 5C               [ 1]  656 	incw x 
      000F36 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F38 CD 0D 90         [ 4]  658 	call parse_integer 
      000F3B CC 10 93         [ 2]  659 	jp token_exit 
      000F3E                        660 3$: 
      000F3E                        661 	_case '(' bkslsh_tst 
      000F3E A6 28            [ 1]    1 	ld a,#'(' 
      000F40 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F42 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000F44 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F46 CC 10 8F         [ 2]  663 	jp token_char   	
      000F49                        664 bkslsh_tst: ; character token 
      000F49                        665 	_case '\',rparnt_tst
      000F49 A6 5C            [ 1]    1 	ld a,#'\' 
      000F4B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4D 26 16            [ 1]    3 	jrne rparnt_tst
      000F4F A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F51 F7               [ 1]  667 	ld (x),a 
      000F52 5C               [ 1]  668 	incw x 
      000F53 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F56 F7               [ 1]  670 	ld (x),a 
      000F57 5C               [ 1]  671 	incw x
      000F58 90 93            [ 1]  672 	ldw y,x 	 
      000F5A 72 5C 00 01      [ 1]  673 	inc in  
      000F5E 5F               [ 1]  674 	clrw x 
      000F5F 97               [ 1]  675 	ld xl,a 
      000F60 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F62 CC 10 93         [ 2]  677 	jp token_exit 
      000F65                        678 rparnt_tst:		
      000F65                        679 	_case ')' colon_tst 
      000F65 A6 29            [ 1]    1 	ld a,#')' 
      000F67 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F69 26 05            [ 1]    3 	jrne colon_tst
      000F6B A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F6D CC 10 8F         [ 2]  681 	jp token_char
      000F70                        682 colon_tst:
      000F70                        683 	_case ':' comma_tst 
      000F70 A6 3A            [ 1]    1 	ld a,#':' 
      000F72 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F74 26 05            [ 1]    3 	jrne comma_tst
      000F76 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F78 CC 10 8F         [ 2]  685 	jp token_char  
      000F7B                        686 comma_tst:
      000F7B                        687 	_case COMMA sharp_tst 
      000F7B A6 2C            [ 1]    1 	ld a,#COMMA 
      000F7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7F 26 05            [ 1]    3 	jrne sharp_tst
      000F81 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F83 CC 10 8F         [ 2]  689 	jp token_char
      000F86                        690 sharp_tst:
      000F86                        691 	_case SHARP dash_tst 
      000F86 A6 23            [ 1]    1 	ld a,#SHARP 
      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 05            [ 1]    3 	jrne dash_tst
      000F8C A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F8E CC 10 8F         [ 2]  693 	jp token_char  	 	 
      000F91                        694 dash_tst: 	
      000F91                        695 	_case '-' at_tst 
      000F91 A6 2D            [ 1]    1 	ld a,#'-' 
      000F93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F95 26 05            [ 1]    3 	jrne at_tst
      000F97 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F99 CC 10 8F         [ 2]  697 	jp token_char 
      000F9C                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      000F9C                        699 	_case '@' qmark_tst 
      000F9C A6 40            [ 1]    1 	ld a,#'@' 
      000F9E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA0 26 05            [ 1]    3 	jrne qmark_tst
      000FA2 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FA4 CC 10 8F         [ 2]  701 	jp token_char
      000FA7                        702 qmark_tst:
      000FA7                        703 	_case '?' tick_tst 
      000FA7 A6 3F            [ 1]    1 	ld a,#'?' 
      000FA9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FAB 26 12            [ 1]    3 	jrne tick_tst
      000FAD A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FAF F7               [ 1]  705 	ld (x),a 
      000FB0 5C               [ 1]  706 	incw x 
      000FB1 90 93            [ 1]  707 	ldw y,x 
      000FB3 AE 20 AF         [ 2]  708 	ldw x,#print
      000FB6 90 FF            [ 2]  709 	ldw (y),x 
      000FB8 72 A9 00 02      [ 2]  710 	addw y,#2
      000FBC CC 10 93         [ 2]  711 	jp token_exit
      000FBF                        712 tick_tst: ; comment 
      000FBF                        713 	_case TICK plus_tst 
      000FBF A6 27            [ 1]    1 	ld a,#TICK 
      000FC1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC3 26 2B            [ 1]    3 	jrne plus_tst
      000FC5 A6 80            [ 1]  714 	ld a,#TK_CMD
      000FC7 F7               [ 1]  715 	ld (x),a 
      000FC8 5C               [ 1]  716 	incw x
      000FC9 90 AE 21 F7      [ 2]  717 	ldw y,#remark 
      000FCD FF               [ 2]  718 	ldw (x),y 
      000FCE 1C 00 02         [ 2]  719 	addw x,#2  
      000FD1                        720 copy_comment:
      000FD1 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FD5 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FD9 90 89            [ 2]  723 	pushw y 
      000FDB CD 13 A2         [ 4]  724 	call strcpy
      000FDE 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FE1 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FE3 17 01            [ 2]  727 	ldw (1,sp),y 
      000FE5 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FE8                        729 	_drop 2 
      000FE8 5B 02            [ 2]    1     addw sp,#2 
      000FEA 4F               [ 1]  730 	clr a 
      000FEB 90 93            [ 1]  731 	ldw y,x 
      000FED CC 10 93         [ 2]  732 	jp token_exit 
      000FF0                        733 plus_tst:
      000FF0                        734 	_case '+' star_tst 
      000FF0 A6 2B            [ 1]    1 	ld a,#'+' 
      000FF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF4 26 05            [ 1]    3 	jrne star_tst
      000FF6 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FF8 CC 10 8F         [ 2]  736 	jp token_char 
      000FFB                        737 star_tst:
      000FFB                        738 	_case '*' slash_tst 
      000FFB A6 2A            [ 1]    1 	ld a,#'*' 
      000FFD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      000FFF 26 05            [ 1]    3 	jrne slash_tst
      001001 A6 20            [ 1]  739 	ld a,#TK_MULT 
      001003 CC 10 8F         [ 2]  740 	jp token_char 
      001006                        741 slash_tst: 
      001006                        742 	_case '/' prcnt_tst 
      001006 A6 2F            [ 1]    1 	ld a,#'/' 
      001008 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100A 26 05            [ 1]    3 	jrne prcnt_tst
      00100C A6 21            [ 1]  743 	ld a,#TK_DIV 
      00100E CC 10 8F         [ 2]  744 	jp token_char 
      001011                        745 prcnt_tst:
      001011                        746 	_case '%' eql_tst 
      001011 A6 25            [ 1]    1 	ld a,#'%' 
      001013 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001015 26 05            [ 1]    3 	jrne eql_tst
      001017 A6 22            [ 1]  747 	ld a,#TK_MOD
      001019 CC 10 8F         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      00101C                        750 eql_tst:
      00101C                        751 	_case '=' gt_tst 		
      00101C A6 3D            [ 1]    1 	ld a,#'=' 
      00101E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001020 26 05            [ 1]    3 	jrne gt_tst
      001022 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      001024 CC 10 8F         [ 2]  753 	jp token_char 
      001027                        754 gt_tst:
      001027                        755 	_case '>' lt_tst 
      001027 A6 3E            [ 1]    1 	ld a,#'>' 
      001029 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00102B 26 23            [ 1]    3 	jrne lt_tst
      00102D A6 31            [ 1]  756 	ld a,#TK_GT 
      00102F 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001031 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001034 72 5C 00 01      [ 1]  759 	inc in 
      001038 A1 3D            [ 1]  760 	cp a,#'=
      00103A 26 04            [ 1]  761 	jrne 1$
      00103C A6 33            [ 1]  762 	ld a,#TK_GE 
      00103E 20 4F            [ 2]  763 	jra token_char  
      001040 A1 3C            [ 1]  764 1$: cp a,#'<
      001042 26 04            [ 1]  765 	jrne 2$
      001044 A6 35            [ 1]  766 	ld a,#TK_NE 
      001046 20 47            [ 2]  767 	jra token_char 
      001048 72 5A 00 01      [ 1]  768 2$: dec in
      00104C 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      00104E 20 3F            [ 2]  770 	jra token_char 	 
      001050                        771 lt_tst:
      001050                        772 	_case '<' other
      001050 A6 3C            [ 1]    1 	ld a,#'<' 
      001052 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001054 26 23            [ 1]    3 	jrne other
      001056 A6 34            [ 1]  773 	ld a,#TK_LT 
      001058 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00105A 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      00105D 72 5C 00 01      [ 1]  776 	inc in 
      001061 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001063 26 04            [ 1]  778 	jrne 1$
      001065 A6 36            [ 1]  779 	ld a,#TK_LE 
      001067 20 26            [ 2]  780 	jra token_char 
      001069 A1 3E            [ 1]  781 1$: cp a,#'>
      00106B 26 04            [ 1]  782 	jrne 2$
      00106D A6 35            [ 1]  783 	ld a,#TK_NE 
      00106F 20 1E            [ 2]  784 	jra token_char 
      001071 72 5A 00 01      [ 1]  785 2$: dec in 
      001075 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001077 20 16            [ 2]  787 	jra token_char 	
      001079                        788 other: ; not a special character 	 
      001079 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00107B CD 0E 1C         [ 4]  790 	call is_alpha 
      00107E 25 03            [ 1]  791 	jrc 30$ 
      001080 CC 16 48         [ 2]  792 	jp syntax_error 
      001083                        793 30$: 
      001083 CD 0E 62         [ 4]  794 	call parse_keyword
      001086 A3 21 F7         [ 2]  795 	cpw x,#remark 
      001089 26 08            [ 1]  796 	jrne token_exit 
      00108B 93               [ 1]  797 	ldw x,y 
      00108C CC 0F D1         [ 2]  798 	jp copy_comment 
      00108F                        799 token_char:
      00108F F7               [ 1]  800 	ld (x),a 
      001090 5C               [ 1]  801 	incw x
      001091 90 93            [ 1]  802 	ldw y,x 
      001093                        803 token_exit:
      001093                        804 	_drop VSIZE 
      001093 5B 02            [ 2]    1     addw sp,#VSIZE 
      001095 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001096                        825 compile::
      001096 90 89            [ 2]  826 	pushw y 
      001098                        827 	_vars VSIZE 
      001098 52 02            [ 2]    1     sub sp,#VSIZE 
      00109A 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      00109F 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      0010A3 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      0010A5 AE 00 00         [ 2]  831 	ldw x,#0
      0010A8 CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      0010AB C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      0010AE AE 16 E3         [ 2]  834 	ldw x,#pad+3
      0010B1 72 5F 00 01      [ 1]  835 	clr in 
      0010B5 CD 0E E2         [ 4]  836 	call get_token
      0010B8 A1 84            [ 1]  837 	cp a,#TK_INTGR
      0010BA 26 11            [ 1]  838 	jrne 2$
      0010BC A3 00 01         [ 2]  839 	cpw x,#1 
      0010BF 2A 05            [ 1]  840 	jrpl 1$
      0010C1 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      0010C3 CC 16 4A         [ 2]  842 	jp tb_error
      0010C6 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      0010C9 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      0010CD 90 A3 17 9C      [ 2]  845 2$:	cpw y,#stack_full 
      0010D1 25 05            [ 1]  846 	jrult 3$
      0010D3 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010D5 CC 16 4A         [ 2]  848 	jp tb_error 
      0010D8                        849 3$:	
      0010D8 93               [ 1]  850 	ldw x,y 
      0010D9 CD 0E E2         [ 4]  851 	call get_token 
      0010DC A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010DE 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010E0 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010E4 90 9F            [ 1]  856     ld a,yl
      0010E6 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010E9 CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010EC E7 02            [ 1]  859 	ld (2,x),a 
      0010EE FE               [ 2]  860 	ldw x,(x)
      0010EF 27 09            [ 1]  861 	jreq 10$
      0010F1 CD 0C C9         [ 4]  862 	call insert_line
      0010F4 72 5F 00 03      [ 1]  863 	clr  count 
      0010F8 20 0F            [ 2]  864 	jra  11$ 
      0010FA                        865 10$: ; line# is zero 
      0010FA CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010FD CF 00 04         [ 2]  867 	ldw basicptr,x 
      001100 E6 02            [ 1]  868 	ld a,(2,x)
      001102 C7 00 03         [ 1]  869 	ld count,a 
      001105 35 03 00 01      [ 1]  870 	mov in,#3 
      001109                        871 11$:
      001109                        872 	_drop VSIZE 
      001109 5B 02            [ 2]    1     addw sp,#VSIZE 
      00110B 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      00110F 90 85            [ 2]  874 	popw y 
      001111 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001112                         48 cpy_cmd_name:
      001112 5D               [ 2]   49 	tnzw x 
      001113 27 14            [ 1]   50 	jreq 10$
      001115 F6               [ 1]   51 	ld a,(x)
      001116 5C               [ 1]   52 	incw x
      001117 A4 0F            [ 1]   53 	and a,#15  
      001119 88               [ 1]   54 	push a 
      00111A 0D 01            [ 1]   55     tnz (1,sp) 
      00111C 27 0A            [ 1]   56 	jreq 9$
      00111E F6               [ 1]   57 1$:	ld a,(x)
      00111F 90 F7            [ 1]   58 	ld (y),a  
      001121 5C               [ 1]   59 	incw x
      001122 90 5C            [ 1]   60 	incw y 
      001124 0A 01            [ 1]   61 	dec (1,sp)	 
      001126 26 F6            [ 1]   62 	jrne 1$
      001128 84               [ 1]   63 9$: pop a 
      001129                         64 10$: 
      001129 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00112A                         75 add_space:
      00112A 90 5A            [ 2]   76 	decw y 
      00112C 90 F6            [ 1]   77 	ld a,(y)
      00112E 90 5C            [ 1]   78 	incw y
      001130 A1 29            [ 1]   79 	cp a,#') 
      001132 27 05            [ 1]   80 	jreq 0$
      001134 CD 0E 36         [ 4]   81 	call is_alnum 
      001137 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001139                         83 0$: 
      001139 A6 20            [ 1]   84 	ld a,#SPACE 
      00113B 90 F7            [ 1]   85 	ld (y),a 
      00113D 90 5C            [ 1]   86 	incw y 
      00113F 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001140                         99 right_align::
      001140 88               [ 1]  100 	push a 
      001141 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001143 C1 00 23         [ 1]  102 	cp a,tab_width 
      001146 2A 08            [ 1]  103 	jrpl 1$
      001148 A6 20            [ 1]  104 	ld a,#SPACE 
      00114A 5A               [ 2]  105 	decw x
      00114B F7               [ 1]  106 	ld (x),a  
      00114C 0C 01            [ 1]  107 	inc (1,sp)
      00114E 20 F1            [ 2]  108 	jra 0$ 
      001150 84               [ 1]  109 1$: pop a 	
      001151 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001152                        123 cpy_quote:
      001152 A6 22            [ 1]  124 	ld a,#'"
      001154 90 F7            [ 1]  125 	ld (y),a 
      001156 90 5C            [ 1]  126 	incw y 
      001158 89               [ 2]  127 	pushw x 
      001159 CD 17 BF         [ 4]  128 	call skip_string 
      00115C 85               [ 2]  129 	popw x 
      00115D F6               [ 1]  130 1$:	ld a,(x)
      00115E 27 30            [ 1]  131 	jreq 9$
      001160 5C               [ 1]  132 	incw x 
      001161 A1 20            [ 1]  133 	cp a,#SPACE 
      001163 25 0E            [ 1]  134 	jrult 3$
      001165 90 F7            [ 1]  135 	ld (y),a
      001167 90 5C            [ 1]  136 	incw y 
      001169 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      00116B 26 F0            [ 1]  138 	jrne 1$ 
      00116D                        139 2$:
      00116D 90 F7            [ 1]  140 	ld (y),a
      00116F 90 5C            [ 1]  141 	incw y  
      001171 20 EA            [ 2]  142 	jra 1$
      001173 88               [ 1]  143 3$: push a 
      001174 A6 5C            [ 1]  144 	ld a,#'\
      001176 90 F7            [ 1]  145 	ld (y),a 
      001178 90 5C            [ 1]  146 	incw y  
      00117A 84               [ 1]  147 	pop a 
      00117B A0 07            [ 1]  148 	sub a,#7
      00117D C7 00 0E         [ 1]  149 	ld acc8,a 
      001180 72 5F 00 0D      [ 1]  150 	clr acc16
      001184 89               [ 2]  151 	pushw x
      001185 AE 0D 88         [ 2]  152 	ldw x,#escaped 
      001188 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00118C F6               [ 1]  154 	ld a,(x)
      00118D 85               [ 2]  155 	popw x
      00118E 20 DD            [ 2]  156 	jra 2$
      001190 A6 22            [ 1]  157 9$: ld a,#'"
      001192 90 F7            [ 1]  158 	ld (y),a 
      001194 90 5C            [ 1]  159 	incw y  
      001196 5C               [ 1]  160 	incw x 
      001197 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      001198                        171 var_name::
      001198 1D 00 34         [ 2]  172 		subw x,#vars 
      00119B A6 03            [ 1]  173 		ld a,#3
      00119D 62               [ 2]  174 		div x,a 
      00119E 9F               [ 1]  175 		ld a,xl 
      00119F AB 41            [ 1]  176 		add a,#'A 
      0011A1 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011A2                        195 decompile::
      0011A2                        196 	_vars VSIZE
      0011A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0011A4 C6 00 0A         [ 1]  197 	ld a,base
      0011A7 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011A9 C6 00 23         [ 1]  199 	ld a,tab_width 
      0011AC 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011AE 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011B0 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011B4 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011B8 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011BC 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011C0 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011C3 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011C4 CD 18 2B         [ 4]  208 	call itoa  
      0011C7 CD 11 40         [ 4]  209 	call right_align 
      0011CA 88               [ 1]  210 	push a 
      0011CB 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011CD 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011CF CD 13 A2         [ 4]  213 	call strcpy 
      0011D2 90 5F            [ 1]  214 	clrw y 
      0011D4 84               [ 1]  215 	pop a 
      0011D5 90 97            [ 1]  216 	ld yl,a 
      0011D7 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011DA A6 20            [ 1]  218 	ld a,#SPACE 
      0011DC 90 F7            [ 1]  219 	ld (y),a 
      0011DE 90 5C            [ 1]  220 	incw y 
      0011E0 72 5F 00 23      [ 1]  221 	clr tab_width
      0011E4 AE 00 03         [ 2]  222 	ldw x,#3
      0011E7 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011EA                        224 decomp_loop:
      0011EA 90 89            [ 2]  225 	pushw y
      0011EC CD 17 A6         [ 4]  226 	call next_token 
      0011EF 90 85            [ 2]  227 	popw y 
      0011F1 4D               [ 1]  228 	tnz a  
      0011F2 26 03            [ 1]  229 	jrne 1$
      0011F4 CC 13 17         [ 2]  230 	jp 20$
      0011F7 2B 03            [ 1]  231 1$:	jrmi 2$
      0011F9 CC 12 88         [ 2]  232 	jp 6$
      0011FC                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011FC A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011FE 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001200 CD 11 2A         [ 4]  237 	call add_space
      001203 CD 17 CE         [ 4]  238 	call get_addr   
      001206 CD 11 98         [ 4]  239 	call var_name
      001209 90 F7            [ 1]  240 	ld (y),a 
      00120B 90 5C            [ 1]  241 	incw y  
      00120D 20 DB            [ 2]  242 	jra decomp_loop
      00120F                        243 3$:
      00120F A1 84            [ 1]  244 	cp a,#TK_INTGR
      001211 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001213 CD 17 D8         [ 4]  247 	call get_int24 
      001216 C7 00 0C         [ 1]  248 	ld acc24,a 
      001219 CF 00 0D         [ 2]  249 	ldw acc16,x 
      00121C CD 11 2A         [ 4]  250 	call add_space
      00121F 90 89            [ 2]  251 	pushw y 
      001221 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001223 CD 18 2B         [ 4]  253 	call itoa  
      001226 16 01            [ 2]  254 	ldw y,(1,sp) 
      001228 88               [ 1]  255 	push a 
      001229 51               [ 1]  256 	exgw x,y 
      00122A CD 13 A2         [ 4]  257 	call strcpy 
      00122D 90 5F            [ 1]  258 	clrw y
      00122F 84               [ 1]  259 	pop a  
      001230 90 97            [ 1]  260 	ld yl,a 
      001232 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001235                        262 	_drop 2 
      001235 5B 02            [ 2]    1     addw sp,#2 
      001237 20 B1            [ 2]  263 	jra decomp_loop
      001239                        264 4$: ; dictionary keyword
      001239 A1 87            [ 1]  265 	cp a,#TK_NOT 
      00123B 24 39            [ 1]  266 	jruge 50$ 
      00123D FE               [ 2]  267 	ldw x,(x)
      00123E 72 5C 00 01      [ 1]  268 	inc in 
      001242 72 5C 00 01      [ 1]  269 	inc in 
      001246 A3 21 F7         [ 2]  270 	cpw x,#remark 
      001249 26 23            [ 1]  271 	jrne 5$
      00124B CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      00124E CD 11 2A         [ 4]  274 	call add_space
      001251 A6 27            [ 1]  275 	ld a,#''
      001253 90 F7            [ 1]  276 	ld (y),a 
      001255 90 5C            [ 1]  277 	incw y 
      001257                        278 46$:
      001257 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00125B 72 5C 00 01      [ 1]  280 	inc in  
      00125F 90 F7            [ 1]  281 	ld (y),a 
      001261 90 5C            [ 1]  282 	incw y 
      001263 C6 00 01         [ 1]  283 	ld a,in 
      001266 C1 00 03         [ 1]  284 	cp a,count 
      001269 2B EC            [ 1]  285 	jrmi 46$
      00126B CC 13 17         [ 2]  286 	jp 20$  
      00126E A3 1C 99         [ 2]  287 5$: cpw x,#let  
      001271 26 05            [ 1]  288 	jrne 54$
      001273 CC 11 EA         [ 2]  289 	jp decomp_loop ; down display LET
      001276                        290 50$:
      001276 5F               [ 1]  291 	clrw x 
      001277 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001278                        297 54$: ; insert command name 
      001278 CD 11 2A         [ 4]  298 	call add_space  
      00127B 90 89            [ 2]  299 	pushw y
      00127D CD 13 52         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001280 90 85            [ 2]  301 	popw y 
      001282 CD 11 12         [ 4]  302 	call cpy_cmd_name
      001285 CC 11 EA         [ 2]  303 	jp decomp_loop 
      001288                        304 6$:
                                    305 ; label?
      001288 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00128A 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00128C A6 20            [ 1]  309 	ld a,#32 
      00128E 90 F7            [ 1]  310 	ld (y),a 
      001290 90 5C            [ 1]  311 	incw y 
      001292                        312 61$:
      001292 89               [ 2]  313 	pushw x 
      001293 CD 17 BF         [ 4]  314 	call skip_string 
      001296 85               [ 2]  315 	popw x 
      001297                        316 62$:	
      001297 F6               [ 1]  317 	ld a,(x)
      001298 27 07            [ 1]  318 	jreq 63$ 
      00129A 5C               [ 1]  319 	incw x  
      00129B 90 F7            [ 1]  320 	ld (y),a 
      00129D 90 5C            [ 1]  321 	incw y 
      00129F 20 F6            [ 2]  322 	jra 62$ 
      0012A1                        323 63$: 
      0012A1 A6 20            [ 1]  324 	ld a,#32 
      0012A3 90 F7            [ 1]  325 	ld (y),a 
      0012A5 90 5C            [ 1]  326 	incw y 
      0012A7 CC 11 EA         [ 2]  327 	jp decomp_loop
      0012AA                        328 64$:
      0012AA A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012AC 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012AE CD 11 2A         [ 4]  332 	call add_space
      0012B1 CD 11 52         [ 4]  333 	call cpy_quote  
      0012B4 CC 11 EA         [ 2]  334 	jp decomp_loop
      0012B7                        335 7$:
      0012B7 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012B9 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012BB CD 11 2A         [ 4]  339 	call add_space 
      0012BE A6 5C            [ 1]  340 	ld a,#'\ 
      0012C0 90 F7            [ 1]  341 	ld (y),a 
      0012C2 90 5C            [ 1]  342 	incw y
      0012C4 F6               [ 1]  343 	ld a,(x)
      0012C5 72 5C 00 01      [ 1]  344 	inc in  
      0012C9 20 06            [ 2]  345 	jra 81$
      0012CB A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012CD 26 09            [ 1]  347 	jrne 9$
      0012CF A6 3A            [ 1]  348 	ld a,#':
      0012D1                        349 81$:
      0012D1 90 F7            [ 1]  350 	ld (y),a 
      0012D3 90 5C            [ 1]  351 	incw y 
      0012D5                        352 82$:
      0012D5 CC 11 EA         [ 2]  353 	jp decomp_loop
      0012D8                        354 9$: 
      0012D8 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0012DA 22 0A            [ 1]  356 	jrugt 10$ 
      0012DC A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012DE 5F               [ 1]  358 	clrw x 
      0012DF 97               [ 1]  359 	ld xl,a
      0012E0 1C 13 2D         [ 2]  360 	addw x,#single_char 
      0012E3 F6               [ 1]  361 	ld a,(x)
      0012E4 20 EB            [ 2]  362 	jra 81$ 
      0012E6                        363 10$: 
      0012E6 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012E8 22 0A            [ 1]  365 	jrugt 11$
      0012EA A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012EC 5F               [ 1]  367 	clrw x 
      0012ED 97               [ 1]  368 	ld xl,a 
      0012EE 1C 13 32         [ 2]  369 	addw x,#add_char 
      0012F1 F6               [ 1]  370 	ld a,(x)
      0012F2 20 DD            [ 2]  371 	jra 81$
      0012F4                        372 11$:
      0012F4 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012F6 22 0A            [ 1]  374 	jrugt 12$
      0012F8 A0 20            [ 1]  375 	sub a,#TK_MULT
      0012FA 5F               [ 1]  376 	clrw x 
      0012FB 97               [ 1]  377 	ld xl,a 
      0012FC 1C 13 34         [ 2]  378 	addw x,#mul_char
      0012FF F6               [ 1]  379 	ld a,(x)
      001300 20 CF            [ 2]  380 	jra 81$
      001302                        381 12$:
      001302 A0 31            [ 1]  382 	sub a,#TK_GT  
      001304 48               [ 1]  383 	sll a 
      001305 5F               [ 1]  384 	clrw x 
      001306 97               [ 1]  385 	ld xl,a 
      001307 1C 13 37         [ 2]  386 	addw x,#relop_str 
      00130A FE               [ 2]  387 	ldw x,(x)
      00130B F6               [ 1]  388 	ld a,(x)
      00130C 5C               [ 1]  389 	incw x 
      00130D 90 F7            [ 1]  390 	ld (y),a
      00130F 90 5C            [ 1]  391 	incw y 
      001311 F6               [ 1]  392 	ld a,(x)
      001312 26 BD            [ 1]  393 	jrne 81$
      001314 CC 11 EA         [ 2]  394 	jp decomp_loop 
      001317                        395 20$: 
      001317 90 7F            [ 1]  396 	clr (y)
      001319 1E 03            [ 2]  397 	ldw x,(STR,sp)
      00131B 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      00131D C7 00 0A         [ 1]  399 	ld base,a 
      001320 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001322 C7 00 23         [ 1]  401 	ld tab_width,a
      001325 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      001328 90 9F            [ 1]  403 	ld a,yl 
      00132A                        404 	_drop VSIZE 
      00132A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00132C 81               [ 4]  405 	ret 
                                    406 
      00132D 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001332 2B 2D                  408 add_char: .byte '+','-'
      001334 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001337 13 43 13 45 13 47 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             4A 13 4F 13 4C
      001343 3E 00                  411 gt: .asciz ">"
      001345 3D 00                  412 equal: .asciz "="
      001347 3E 3D 00               413 ge: .asciz ">="
      00134A 3C 00                  414 lt: .asciz "<"
      00134C 3C 3D 00               415 le: .asciz "<="
      00134F 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001352                        429 cmd_name:
      001352                        430 	_vars VSIZE 
      001352 52 04            [ 2]    1     sub sp,#VSIZE 
      001354 72 5F 00 0D      [ 1]  431 	clr acc16 
      001358 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00135A AE 34 D6         [ 2]  433 	ldw x,#kword_dict	
      00135D 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      00135F E6 02            [ 1]  435 	ld a,(2,x)
      001361 A4 0F            [ 1]  436 	and a,#15 
      001363 C7 00 0E         [ 1]  437 	ld acc8,a 
      001366 1C 00 03         [ 2]  438 	addw x,#3
      001369 72 BB 00 0D      [ 2]  439 	addw x,acc16
      00136D FE               [ 2]  440 	ldw x,(x) ; code address   
      00136E 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001370 27 0C            [ 1]  442 	jreq 2$
      001372 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001374 FE               [ 2]  444 	ldw x,(x) 
      001375 1D 00 02         [ 2]  445 	subw x,#2  
      001378 26 E3            [ 1]  446 	jrne 1$
      00137A 4F               [ 1]  447 	clr a 
      00137B 5F               [ 1]  448 	clrw x 
      00137C 20 05            [ 2]  449 	jra 9$
      00137E 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001380 1C 00 02         [ 2]  451 	addw x,#2 	
      001383                        452 9$:	_drop VSIZE
      001383 5B 04            [ 2]    1     addw sp,#VSIZE 
      001385 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001386                        118 strlen::
      001386 89               [ 2]  119 	pushw x 
      001387 4F               [ 1]  120 	clr a
      001388 7D               [ 1]  121 1$:	tnz (x) 
      001389 27 04            [ 1]  122 	jreq 9$ 
      00138B 4C               [ 1]  123 	inc a 
      00138C 5C               [ 1]  124 	incw x 
      00138D 20 F9            [ 2]  125 	jra 1$ 
      00138F 85               [ 2]  126 9$:	popw x 
      001390 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      001391                        137 strcmp:
      001391 F6               [ 1]  138 	ld a,(x)
      001392 27 0B            [ 1]  139 	jreq 5$ 
      001394 90 F1            [ 1]  140 	cp a,(y) 
      001396 26 05            [ 1]  141 	jrne 4$ 
      001398 5C               [ 1]  142 	incw x 
      001399 90 5C            [ 1]  143 	incw y 
      00139B 20 F4            [ 2]  144 	jra strcmp 
      00139D                        145 4$: ; not same  
      00139D 4F               [ 1]  146 	clr a 
      00139E 81               [ 4]  147 	ret 
      00139F                        148 5$: ; same 
      00139F A6 01            [ 1]  149 	ld a,#1 
      0013A1 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013A2                        161 strcpy::
      0013A2 88               [ 1]  162 	push a 
      0013A3 89               [ 2]  163 	pushw x 
      0013A4 90 F6            [ 1]  164 1$: ld a,(y)
      0013A6 27 06            [ 1]  165 	jreq 9$ 
      0013A8 F7               [ 1]  166 	ld (x),a 
      0013A9 5C               [ 1]  167 	incw x 
      0013AA 90 5C            [ 1]  168 	incw y 
      0013AC 20 F6            [ 2]  169 	jra 1$ 
      0013AE 7F               [ 1]  170 9$:	clr (x)
      0013AF 85               [ 2]  171 	popw x 
      0013B0 84               [ 1]  172 	pop a 
      0013B1 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      0013B2                        187 move::
      0013B2 88               [ 1]  188 	push a 
      0013B3                        189 	_vars VSIZE 
      0013B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B5 0F 01            [ 1]  190 	clr (INCR,sp)
      0013B7 0F 02            [ 1]  191 	clr (LB,sp)
      0013B9 90 89            [ 2]  192 	pushw y 
      0013BB 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      0013BD 90 85            [ 2]  194 	popw y 
      0013BF 27 31            [ 1]  195 	jreq move_exit ; x==y 
      0013C1 2B 0E            [ 1]  196 	jrmi move_down
      0013C3                        197 move_up: ; start from top address with incr=-1
      0013C3 72 BB 00 0D      [ 2]  198 	addw x,acc16
      0013C7 72 B9 00 0D      [ 2]  199 	addw y,acc16
      0013CB 03 01            [ 1]  200 	cpl (INCR,sp)
      0013CD 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      0013CF 20 05            [ 2]  202 	jra move_loop  
      0013D1                        203 move_down: ; start from bottom address with incr=1 
      0013D1 5A               [ 2]  204     decw x 
      0013D2 90 5A            [ 2]  205 	decw y
      0013D4 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013D6                        207 move_loop:	
      0013D6 C6 00 0D         [ 1]  208     ld a, acc16 
      0013D9 CA 00 0E         [ 1]  209 	or a, acc8
      0013DC 27 14            [ 1]  210 	jreq move_exit 
      0013DE 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013E1 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013E4 90 F6            [ 1]  213 	ld a,(y)
      0013E6 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0013E7 89               [ 2]  215 	pushw x 
      0013E8 CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013EB 5A               [ 2]  217 	decw x 
      0013EC CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013EF 85               [ 2]  219 	popw x 
      0013F0 20 E4            [ 2]  220 	jra move_loop
      0013F2                        221 move_exit:
      0013F2                        222 	_drop VSIZE
      0013F2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013F4 84               [ 1]  223 	pop a 
      0013F5 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013F6                        233 clear_vars:
      0013F6 89               [ 2]  234 	pushw x 
      0013F7 88               [ 1]  235 	push a  
      0013F8 AE 00 34         [ 2]  236 	ldw x,#vars 
      0013FB A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013FD 7F               [ 1]  238 1$:	clr (x)
      0013FE 5C               [ 1]  239 	incw x 
      0013FF 4A               [ 1]  240 	dec a 
      001400 26 FB            [ 1]  241 	jrne 1$
      001402 84               [ 1]  242 	pop a 
      001403 85               [ 2]  243 	popw x 
      001404 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      001405 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      00144B                        255 system_information:
      00144B AE 14 05         [ 2]  256 	ldw x,#software 
      00144E CD 09 68         [ 4]  257 	call puts 
      001451 A6 02            [ 1]  258 	ld a,#MAJOR 
      001453 C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      001456 5F               [ 1]  260 	clrw x 
      001457 CF 00 0C         [ 2]  261 	ldw acc24,x
      00145A 72 5F 00 23      [ 1]  262 	clr tab_width  
      00145E 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001462 CD 18 05         [ 4]  264 	call prt_acc24 
      001465 A6 2E            [ 1]  265 	ld a,#'.
      001467 CD 09 0B         [ 4]  266 	call putc 
      00146A A6 00            [ 1]  267 	ld a,#MINOR 
      00146C C7 00 0E         [ 1]  268 	ld acc8,a 
      00146F 5F               [ 1]  269 	clrw x 
      001470 CF 00 0C         [ 2]  270 	ldw acc24,x 
      001473 CD 18 05         [ 4]  271 	call prt_acc24
      001476 A6 0D            [ 1]  272 	ld a,#CR 
      001478 CD 09 0B         [ 4]  273 	call putc
                                    274 ;call test 
      00147B 81               [ 4]  275 	ret
                                    276 
      00147C                        277 warm_init:
      00147C 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      001480 72 5F 00 22      [ 1]  279 	clr flags 
      001484 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      001488 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      00148C 35 0A 00 0A      [ 1]  282 	mov base,#10 
      001490 AE 00 00         [ 2]  283 	ldw x,#0 
      001493 CF 00 04         [ 2]  284 	ldw basicptr,x 
      001496 CF 00 00         [ 2]  285 	ldw in.w,x 
      001499 72 5F 00 03      [ 1]  286 	clr count
      00149D 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      00149E                        293 clear_basic:
      00149E 89               [ 2]  294 	pushw x 
      00149F 72 5F 00 03      [ 1]  295 	clr count
      0014A3 72 5F 00 01      [ 1]  296 	clr in  
      0014A7 AE 00 90         [ 2]  297 	ldw x,#free_ram 
      0014AA CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      0014AD CF 00 1D         [ 2]  299 	ldw txtend,x 
      0014B0 CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      0014B3 CF 00 32         [ 2]  301 	ldw dvar_end,x 
      0014B6 CD 13 F6         [ 4]  302 	call clear_vars 
      0014B9 85               [ 2]  303 	popw x
      0014BA 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014BB                        309 err_msg:
      0014BB 00 00 14 DD 14 EA 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             F8 15 11 15 20
      0014C7 15 36 15 4C 15 66 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             77 15 88
      0014D1 15 94 15 C7 15 D7 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             EB 15 FE
      0014DB 16 0B                  313 	.word err_overflow 
                                    314 
      0014DD 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014EA 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014F8 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001511 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001520 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001536 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00154C 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001566 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001577 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001588 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001594 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015C7 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015D7 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015EB 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015FE 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      00160B 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    331 
      001615 0A 72 75 6E 20 74 69   332 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001627 0A 63 6F 6D 70 69 6C   333 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001638 6C 61 73 74 20 74 6F   334 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    335 
      001648                        336 syntax_error::
      001648 A6 02            [ 1]  337 	ld a,#ERR_SYNTAX 
                                    338 
      00164A                        339 tb_error::
      00164A 72 0A 00 22 4C   [ 2]  340 	btjt flags,#FCOMP,1$
      00164F 88               [ 1]  341 	push a 
      001650 AE 16 15         [ 2]  342 	ldw x, #rt_msg 
      001653 CD 09 68         [ 4]  343 	call puts 
      001656 84               [ 1]  344 	pop a 
      001657 AE 14 BB         [ 2]  345 	ldw x, #err_msg 
      00165A 72 5F 00 0D      [ 1]  346 	clr acc16 
      00165E 48               [ 1]  347 	sll a
      00165F 72 59 00 0D      [ 1]  348 	rlc acc16  
      001663 C7 00 0E         [ 1]  349 	ld acc8, a 
      001666 72 BB 00 0D      [ 2]  350 	addw x,acc16 
      00166A FE               [ 2]  351 	ldw x,(x)
      00166B CD 09 68         [ 4]  352 	call puts
      00166E CE 00 04         [ 2]  353 	ldw x,basicptr 
                           000001   354 .if DEBUG 
      001671 C6 00 03         [ 1]  355 ld a,count 
      001674 90 5F            [ 1]  356 clrw y 
      001676 90 02            [ 1]  357 rlwa y  
      001678 CD 06 67         [ 4]  358 call hex_dump
      00167B CE 00 04         [ 2]  359 ldw x,basicptr
                                    360 .endif 
      00167E C6 00 01         [ 1]  361 	ld a,in 
      001681 CD 20 8B         [ 4]  362 	call prt_basic_line
      001684 AE 16 38         [ 2]  363 	ldw x,#tk_id 
      001687 CD 09 68         [ 4]  364 	call puts 
      00168A C6 00 02         [ 1]  365 	ld a,in.saved 
      00168D 5F               [ 1]  366 	clrw x 
      00168E 97               [ 1]  367 	ld xl,a 
      00168F 72 BB 00 04      [ 2]  368 	addw x,basicptr 
      001693 F6               [ 1]  369 	ld a,(x)
      001694 5F               [ 1]  370 	clrw x 
      001695 97               [ 1]  371 	ld xl,a 
      001696 CD 17 EE         [ 4]  372 	call prt_i16
      001699 20 35            [ 2]  373 	jra 6$
      00169B                        374 1$:	
      00169B 88               [ 1]  375 	push a 
      00169C AE 16 27         [ 2]  376 	ldw x,#comp_msg
      00169F CD 09 68         [ 4]  377 	call puts 
      0016A2 84               [ 1]  378 	pop a 
      0016A3 AE 14 BB         [ 2]  379 	ldw x, #err_msg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0016A6 72 5F 00 0D      [ 1]  380 	clr acc16 
      0016AA 48               [ 1]  381 	sll a
      0016AB 72 59 00 0D      [ 1]  382 	rlc acc16  
      0016AF C7 00 0E         [ 1]  383 	ld acc8, a 
      0016B2 72 BB 00 0D      [ 2]  384 	addw x,acc16 
      0016B6 FE               [ 2]  385 	ldw x,(x)
      0016B7 CD 09 68         [ 4]  386 	call puts
      0016BA AE 16 90         [ 2]  387 	ldw x,#tib
      0016BD CD 09 68         [ 4]  388 	call puts 
      0016C0 A6 0D            [ 1]  389 	ld a,#CR 
      0016C2 CD 09 0B         [ 4]  390 	call putc
      0016C5 CE 00 00         [ 2]  391 	ldw x,in.w
      0016C8 CD 09 D5         [ 4]  392 	call spaces
      0016CB A6 5E            [ 1]  393 	ld a,#'^
      0016CD CD 09 0B         [ 4]  394 	call putc 
      0016D0 AE 17 FF         [ 2]  395 6$: ldw x,#STACK_EMPTY 
      0016D3 94               [ 1]  396     ldw sp,x
                                    397 
      0016D4                        398 warm_start:
      0016D4 CD 14 7C         [ 4]  399 	call warm_init
                                    400 ;----------------------------
                                    401 ;   BASIC interpreter
                                    402 ;----------------------------
      0016D7                        403 cmd_line: ; user interface 
      0016D7 A6 0D            [ 1]  404 	ld a,#CR 
      0016D9 CD 09 0B         [ 4]  405 	call putc 
      0016DC A6 3E            [ 1]  406 	ld a,#'> 
      0016DE CD 09 0B         [ 4]  407 	call putc
      0016E1 CD 0A 6D         [ 4]  408 	call readln
      0016E4 72 5D 00 03      [ 1]  409 	tnz count 
      0016E8 27 ED            [ 1]  410 	jreq cmd_line
      0016EA CD 10 96         [ 4]  411 	call compile
                                    412 ;;;;;;;;;;;;;;;;;;;;;;	
                                    413 ;pushw y 
                                    414 ;ldw x,txtbgn  
                                    415 ;ldw y,txtend
                                    416 ;ldw acc16,x   
                                    417 ;subw y,acc16 
                                    418 ;call hex_dump
                                    419 ;popw y 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;
                                    421 
                                    422 ; if text begin with a line number
                                    423 ; the compiler set count to zero    
                                    424 ; so code is not interpreted
      0016ED 72 5D 00 03      [ 1]  425 	tnz count 
      0016F1 27 E4            [ 1]  426 	jreq cmd_line
                                    427 	
                                    428 ; if direct command 
                                    429 ; it's ready to interpret 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    431 ;; This is the interpreter loop
                                    432 ;; for each BASIC code line. 
                                    433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016F3                        434 interpreter: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0016F3 C6 00 01         [ 1]  435 	ld a,in 
      0016F6 C1 00 03         [ 1]  436 	cp a,count 
      0016F9 2B 1D            [ 1]  437 	jrmi interp_loop
      0016FB                        438 next_line:
      0016FB 72 01 00 22 D7   [ 2]  439 	btjf flags, #FRUN, cmd_line
      001700 CE 00 04         [ 2]  440 	ldw x,basicptr
      001703 72 BB 00 00      [ 2]  441 	addw x,in.w 
      001707 C3 00 1D         [ 2]  442 	cpw x,txtend 
      00170A 2A C8            [ 1]  443 	jrpl warm_start
      00170C CF 00 04         [ 2]  444 	ldw basicptr,x ; start of next line  
      00170F E6 02            [ 1]  445 	ld a,(2,x)
      001711 C7 00 03         [ 1]  446 	ld count,a 
      001714 35 03 00 01      [ 1]  447 	mov in,#3 ; skip first 3 bytes of line 
      001718                        448 interp_loop:
      001718 CD 17 A6         [ 4]  449 	call next_token
      00171B A1 00            [ 1]  450 	cp a,#TK_NONE 
      00171D 27 DC            [ 1]  451 	jreq next_line 
      00171F A1 80            [ 1]  452 	cp a,#TK_CMD
      001721 26 0C            [ 1]  453 	jrne 1$
      001723                        454 	_get_code_addr
      001723 FE               [ 2]    1         ldw x,(x)
      001724 72 5C 00 01      [ 1]    2         inc in 
      001728 72 5C 00 01      [ 1]    3         inc in 
      00172C FD               [ 4]  455 	call(x)
      00172D 20 E9            [ 2]  456 	jra interp_loop 
      00172F                        457 1$:	 
      00172F A1 85            [ 1]  458 	cp a,#TK_VAR
      001731 26 05            [ 1]  459 	jrne 2$
      001733 CD 1C AC         [ 4]  460 	call let_var  
      001736 20 E0            [ 2]  461 	jra interp_loop 
      001738                        462 2$:	
      001738 A1 05            [ 1]  463 	cp a,#TK_ARRAY 
      00173A 26 05            [ 1]  464 	jrne 3$
      00173C CD 1C A7         [ 4]  465 	call let_array 
      00173F 20 D7            [ 2]  466 	jra interp_loop
      001741                        467 3$:	
      001741 A1 03            [ 1]  468 	cp a,#TK_LABEL
      001743 26 05            [ 1]  469 	jrne 4$
      001745 CD 17 51         [ 4]  470 	call let_dvar  
      001748 20 CE            [ 2]  471 	jra interp_loop 
      00174A                        472 4$: 
      00174A A1 0A            [ 1]  473 	cp a,#TK_COLON 
      00174C 27 CA            [ 1]  474 	jreq interp_loop
      00174E CC 16 48         [ 2]  475 5$:	jp syntax_error 
                                    476 
                                    477 
                                    478 ;----------------------
                                    479 ; when a label is met 
                                    480 ; at interp_loop
                                    481 ; it may be a variable 
                                    482 ; assignement to DIM 
                                    483 ; variable 
                                    484 ;----------------------
      001751                        485 let_dvar:
      001751 89               [ 2]  486 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001752 CD 17 BF         [ 4]  487 	call skip_string 
      001755 CE 00 04         [ 2]  488 	ldw x,basicptr 
      001758 72 BB 00 00      [ 2]  489 	addw x,in.w 
      00175C F6               [ 1]  490 	ld a,(x)
      00175D A1 32            [ 1]  491 	cp a,#TK_EQUAL 
      00175F 26 42            [ 1]  492 	jrne 9$ 
                                    493 ; dvar assignment 
      001761 72 5C 00 01      [ 1]  494 	inc in  
      001765 CD 1B DA         [ 4]  495 	call condition  
      001768 A1 84            [ 1]  496 	cp a,#TK_INTGR 
      00176A 27 03            [ 1]  497 	jreq 1$ 
      00176C CC 16 48         [ 2]  498 0$:	jp syntax_error 
      00176F 90 89            [ 2]  499 1$: pushw y 
      001771 90 CE 00 30      [ 2]  500 	ldw y,dvar_bgn 
      001775 1E 03            [ 2]  501 	ldw x,(3,sp) ; pointer to var name 
      001777 CD 1D 80         [ 4]  502 	call search_name 
      00177A 5D               [ 2]  503 	tnzw x 
      00177B 27 EF            [ 1]  504 	jreq 0$ 
      00177D F6               [ 1]  505 	ld a,(x)
      00177E 88               [ 1]  506 	push a 
      00177F 4B 00            [ 1]  507 	push #0 
      001781 72 FB 01         [ 2]  508 	addw x,(1,sp)
      001784 1D 00 03         [ 2]  509 	subw x,#CELL_SIZE 
      001787 CF 00 19         [ 2]  510 	ldw ptr16,x
      00178A                        511 	_drop 2 
      00178A 5B 02            [ 2]    1     addw sp,#2 
      00178C 90 85            [ 2]  512 	popw y  
      00178E                        513 	_xpop 
      00178E 90 F6            [ 1]    1     ld a,(y)
      001790 93               [ 1]    2     ldw x,y 
      001791 EE 01            [ 2]    3     ldw x,(1,x)
      001793 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001797 72 C7 00 19      [ 4]  514 	ld [ptr16],a 
      00179B 72 5C 00 1A      [ 1]  515 	inc ptr8 
      00179F 72 CF 00 19      [ 5]  516 	ldw [ptr16],x 
      0017A3                        517 9$: _drop 2 	
      0017A3 5B 02            [ 2]    1     addw sp,#2 
      0017A5 81               [ 4]  518 	ret 
                                    519 
                                    520 
                                    521 ;--------------------------
                                    522 ; extract next token from
                                    523 ; token list 
                                    524 ; basicptr -> base address 
                                    525 ; in  -> offset in list array 
                                    526 ; output:
                                    527 ;   A 		token attribute
                                    528 ;   X 		*token_value 
                                    529 ;----------------------------------------
      0017A6                        530 next_token::
                                    531 ;	clrw x 
      0017A6 C6 00 01         [ 1]  532 	ld a,in 
      0017A9 C7 00 02         [ 1]  533 	ld in.saved,a ; in case "_unget_token" needed 
                                    534 ; don't replace sub by "cp a,count" 
                                    535 ; if end of line must return with A=0   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0017AC C0 00 03         [ 1]  536 	sub a,count 
      0017AF 27 0D            [ 1]  537 	jreq 9$ ; end of line 
      0017B1                        538 0$: 
      0017B1 CE 00 04         [ 2]  539 	ldw x,basicptr 
      0017B4 72 BB 00 00      [ 2]  540 	addw x,in.w 
      0017B8 F6               [ 1]  541 	ld a,(x)
      0017B9 5C               [ 1]  542 	incw x
      0017BA 72 5C 00 01      [ 1]  543 	inc in   
      0017BE 81               [ 4]  544 9$: ret 
                                    545 
                                    546 ;-------------------------
                                    547 ;  skip .asciz in BASIC line 
                                    548 ;  name 
                                    549 ;  input:
                                    550 ;     x		* string 
                                    551 ;  output:
                                    552 ;     none 
                                    553 ;-------------------------
      0017BF                        554 skip_string:
      0017BF F6               [ 1]  555 	ld a,(x)
      0017C0 27 03            [ 1]  556 	jreq 1$
      0017C2 5C               [ 1]  557 	incw x 
      0017C3 20 FA            [ 2]  558 	jra skip_string 
      0017C5 5C               [ 1]  559 1$: incw x 	
      0017C6 72 B0 00 04      [ 2]  560 	subw x,basicptr 
      0017CA CF 00 00         [ 2]  561 	ldw in.w,x 
      0017CD 81               [ 4]  562 	ret 
                                    563 
                                    564 ;---------------------
                                    565 ; extract 16 bits  
                                    566 ; address from BASIC
                                    567 ; code 
                                    568 ; input:
                                    569 ;    X    *address
                                    570 ; output:
                                    571 ;    X    address 
                                    572 ;-------------------- 
      0017CE                        573 get_addr:
      0017CE FE               [ 2]  574 	ldw x,(x)
      0017CF 72 5C 00 01      [ 1]  575 	inc in 
      0017D3 72 5C 00 01      [ 1]  576 	inc in 
      0017D7 81               [ 4]  577 	ret 
                                    578 
                                    579 ;--------------------
                                    580 ; extract int24_t  
                                    581 ; value from BASIC 
                                    582 ; code 
                                    583 ; input:
                                    584 ;    X   *integer 
                                    585 ; output:
                                    586 ;    A:X   int24  
                                    587 ;--------------------
      0017D8                        588 get_int24:
      0017D8 F6               [ 1]  589 	ld a,(x)
      0017D9 EE 01            [ 2]  590 	ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    591 ; skip 3 bytes 
      0017DB 72 5C 00 01      [ 1]  592 	inc in 
      0017DF 72 5C 00 01      [ 1]  593 	inc in 
      0017E3 72 5C 00 01      [ 1]  594 	inc in 
      0017E7 81               [ 4]  595 	ret 
                                    596 
                                    597 ;-------------------------
                                    598 ; get character from 
                                    599 ; BASIC code 
                                    600 ; input:
                                    601 ;    X   *char 
                                    602 ; output:
                                    603 ;    A    char 
                                    604 ;-------------------------
      0017E8                        605 get_char:
      0017E8 F6               [ 1]  606 	ld a,(x)
      0017E9 72 5C 00 01      [ 1]  607 	inc in  
      0017ED 81               [ 4]  608     ret 
                                    609 
                                    610 ;-----------------------------------
                                    611 ; print a 16 bit integer 
                                    612 ; using variable 'base' as conversion
                                    613 ; format.
                                    614 ; input:
                                    615 ;    X       integer to print 
                                    616 ;   'base'    conversion base 
                                    617 ; output:
                                    618 ;   terminal  
                                    619 ;-----------------------------------
      0017EE                        620 prt_i16:
      0017EE 72 5F 00 0C      [ 1]  621 	clr acc24 
      0017F2 CF 00 0D         [ 2]  622 	ldw acc16,x 
      0017F5 A6 10            [ 1]  623 	ld a,#16
      0017F7 C1 00 0A         [ 1]  624 	cp a,base
      0017FA 27 09            [ 1]  625 	jreq prt_acc24  
      0017FC 72 0F 00 0D 04   [ 2]  626 	btjf acc16,#7,prt_acc24
      001801 72 53 00 0C      [ 1]  627 	cpl acc24 ; sign extend 
                                    628 	
                                    629 ;------------------------------------
                                    630 ; print integer in acc24 
                                    631 ; input:
                                    632 ;	acc24 		integer to print 
                                    633 ;	'base' 		numerical base for conversion 
                                    634 ;   'tab_width' field width 
                                    635 ;    A 			signed||unsigned conversion
                                    636 ;  output:
                                    637 ;    A          string length
                                    638 ;------------------------------------
      001805                        639 prt_acc24:
      001805 A6 FF            [ 1]  640 	ld a,#255  ; signed conversion  
      001807 CD 18 2B         [ 4]  641     call itoa  ; conversion entier en  .asciz
      00180A CD 11 40         [ 4]  642 	call right_align  
      00180D 88               [ 1]  643 	push a 
      00180E CD 09 68         [ 4]  644 	call puts
      001811 84               [ 1]  645 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001812 81               [ 4]  646     ret	
                                    647 
                                    648 ;---------------------------------------
                                    649 ;  print value at xstack top 
                                    650 ;---------------------------------------
      001813                        651 print_top: 
      001813                        652 	_xpop 
      001813 90 F6            [ 1]    1     ld a,(y)
      001815 93               [ 1]    2     ldw x,y 
      001816 EE 01            [ 2]    3     ldw x,(1,x)
      001818 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00181C C7 00 0C         [ 1]  653 	ld acc24,a 
      00181F CF 00 0D         [ 2]  654 	ldw acc16,x 
      001822 CD 18 05         [ 4]  655 	call prt_acc24 
      001825 A6 20            [ 1]  656 	ld a,#SPACE
      001827 CD 09 0B         [ 4]  657 	call putc 
      00182A 81               [ 4]  658 	ret 
                                    659 
                                    660 ;------------------------------------
                                    661 ; convert integer in acc24 to string
                                    662 ; input:
                                    663 ;   'base'	conversion base 
                                    664 ;	acc24	integer to convert
                                    665 ;   A       0=unsigned, else signed 
                                    666 ; output:
                                    667 ;   X  		pointer to first char of string
                                    668 ;   A       string length
                                    669 ;------------------------------------
                           000001   670 	SIGN=1  ; integer sign 
                           000002   671 	LEN=2 
                           000003   672 	PSTR=3
                           000004   673 	VSIZE=4 ;locals size
      00182B                        674 itoa::
      00182B                        675 	_vars VSIZE
      00182B 52 04            [ 2]    1     sub sp,#VSIZE 
      00182D 0F 02            [ 1]  676 	clr (LEN,sp) ; string length  
      00182F 0F 01            [ 1]  677 	clr (SIGN,sp)    ; sign
      001831 4D               [ 1]  678 	tnz A
      001832 27 11            [ 1]  679 	jreq 1$ ; unsigned conversion  
      001834 C6 00 0A         [ 1]  680 	ld a,base 
      001837 A1 0A            [ 1]  681 	cp a,#10
      001839 26 0A            [ 1]  682 	jrne 1$
                                    683 	; base 10 string display with negative sign if bit 23==1
      00183B 72 0F 00 0C 05   [ 2]  684 	btjf acc24,#7,1$
      001840 03 01            [ 1]  685 	cpl (SIGN,sp)
      001842 CD 02 18         [ 4]  686 	call neg_acc24
      001845                        687 1$:
                                    688 ; initialize string pointer 
      001845 AE 16 90         [ 2]  689 	ldw x,#tib 
      001848 1C 00 50         [ 2]  690 	addw x,#TIB_SIZE
      00184B 5A               [ 2]  691 	decw x 
      00184C 7F               [ 1]  692 	clr (x)
      00184D                        693 itoa_loop:
      00184D C6 00 0A         [ 1]  694     ld a,base
                                    695 ;	ldw (PSTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      001850 CD 02 E4         [ 4]  696     call divu24_8 ; acc24/A 
                                    697 ;	ldw x,(PSTR,sp)
      001853 AB 30            [ 1]  698     add a,#'0  ; remainder of division
      001855 A1 3A            [ 1]  699     cp a,#'9+1
      001857 2B 02            [ 1]  700     jrmi 2$
      001859 AB 07            [ 1]  701     add a,#7 
      00185B                        702 2$:	
      00185B 5A               [ 2]  703 	decw x
      00185C F7               [ 1]  704     ld (x),a
      00185D 0C 02            [ 1]  705 	inc (LEN,sp)
                                    706 	; if acc24==0 conversion done
      00185F C6 00 0C         [ 1]  707 	ld a,acc24
      001862 CA 00 0D         [ 1]  708 	or a,acc16
      001865 CA 00 0E         [ 1]  709 	or a,acc8
      001868 26 E3            [ 1]  710     jrne itoa_loop
                                    711 	;conversion done, next add '$' or '-' as required
      00186A C6 00 0A         [ 1]  712 	ld a,base 
      00186D A1 10            [ 1]  713 	cp a,#16
      00186F 27 08            [ 1]  714 	jreq 8$
      001871 7B 01            [ 1]  715 	ld a,(SIGN,sp)
      001873 27 0A            [ 1]  716     jreq 10$
      001875 A6 2D            [ 1]  717     ld a,#'-
      001877 20 02            [ 2]  718 	jra 9$ 
      001879                        719 8$:	
      001879 A6 24            [ 1]  720 	ld a,#'$ 
      00187B 5A               [ 2]  721 9$: decw x
      00187C F7               [ 1]  722     ld (x),a
      00187D 0C 02            [ 1]  723 	inc (LEN,sp)
      00187F                        724 10$:
      00187F 7B 02            [ 1]  725 	ld a,(LEN,sp)
      001881                        726 	_drop VSIZE
      001881 5B 04            [ 2]    1     addw sp,#VSIZE 
      001883 81               [ 4]  727 	ret
                                    728 
                                    729 ;------------------------------------
                                    730 ; convert alpha to uppercase
                                    731 ; input:
                                    732 ;    a  character to convert
                                    733 ; output:
                                    734 ;    a  uppercase character
                                    735 ;------------------------------------
      001884                        736 to_upper::
      001884 A1 61            [ 1]  737 	cp a,#'a
      001886 2A 01            [ 1]  738 	jrpl 1$
      001888 81               [ 4]  739 0$:	ret
      001889 A1 7A            [ 1]  740 1$: cp a,#'z	
      00188B 22 FB            [ 1]  741 	jrugt 0$
      00188D A0 20            [ 1]  742 	sub a,#32
      00188F 81               [ 4]  743 	ret
                                    744 	
                                    745 ;------------------------------------
                                    746 ; convert pad content in integer
                                    747 ; input:
                                    748 ;    x		* .asciz to convert
                                    749 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                    750 ;    acc24      int24_t
                                    751 ;------------------------------------
                                    752 	; local variables
                           000001   753 	SIGN=1 ; 1 byte, 
                           000002   754 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   755 	TEMP=3 ; 1 byte, temporary storage
                           000004   756 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   757 	VSIZE=5 ; 5 bytes reserved for local storage
      001890                        758 atoi24::
      001890                        759 	_vars VSIZE
      001890 52 05            [ 2]    1     sub sp,#VSIZE 
      001892 1F 04            [ 2]  760 	ldw (XTEMP,sp),x 
                                    761 ; conversion made on xstack 
      001894 4F               [ 1]  762 	clr a 
      001895 5F               [ 1]  763 	clrw x 
      001896                        764 	_xpush 
      001896 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00189A 90 F7            [ 1]    2     ld (y),a 
      00189C 90 EF 01         [ 2]    3     ldw (1,y),x 
      00189F 0F 01            [ 1]  765 	clr (SIGN,sp)
      0018A1 A6 0A            [ 1]  766 	ld a,#10
      0018A3 6B 02            [ 1]  767 	ld (BASE,sp),a ; default base decimal
      0018A5 1E 04            [ 2]  768 	ldw x,(XTEMP,sp)
      0018A7 F6               [ 1]  769 	ld a,(x)
      0018A8 27 4E            [ 1]  770 	jreq 9$  ; completed if 0
      0018AA A1 2D            [ 1]  771 	cp a,#'-
      0018AC 26 04            [ 1]  772 	jrne 1$
      0018AE 03 01            [ 1]  773 	cpl (SIGN,sp)
      0018B0 20 08            [ 2]  774 	jra 2$
      0018B2 A1 24            [ 1]  775 1$: cp a,#'$
      0018B4 26 08            [ 1]  776 	jrne 3$
      0018B6 A6 10            [ 1]  777 	ld a,#16
      0018B8 6B 02            [ 1]  778 	ld (BASE,sp),a
      0018BA 5C               [ 1]  779 2$:	incw x
      0018BB 1F 04            [ 2]  780 	ldw (XTEMP,sp),x 
      0018BD F6               [ 1]  781 	ld a,(x)
      0018BE                        782 3$:	; char to digit 
      0018BE A1 61            [ 1]  783 	cp a,#'a
      0018C0 2B 02            [ 1]  784 	jrmi 4$
      0018C2 A0 20            [ 1]  785 	sub a,#32
      0018C4 A1 30            [ 1]  786 4$:	cp a,#'0
      0018C6 2B 30            [ 1]  787 	jrmi 9$
      0018C8 A0 30            [ 1]  788 	sub a,#'0
      0018CA A1 0A            [ 1]  789 	cp a,#10
      0018CC 2B 06            [ 1]  790 	jrmi 5$
      0018CE A0 07            [ 1]  791 	sub a,#7
      0018D0 11 02            [ 1]  792 	cp a,(BASE,sp)
      0018D2 2A 24            [ 1]  793 	jrpl 9$
      0018D4 6B 03            [ 1]  794 5$:	ld (TEMP,sp),a
      0018D6 7B 02            [ 1]  795 	ld a,(BASE,sp)
      0018D8 CD 02 35         [ 4]  796 	call mulu24_8
      0018DB                        797 	_xpush 
      0018DB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018DF 90 F7            [ 1]    2     ld (y),a 
      0018E1 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0018E4 5F               [ 1]  798 	clrw x 
      0018E5 7B 03            [ 1]  799 	ld a,(TEMP,sp)
      0018E7 02               [ 1]  800 	rlwa x 
      0018E8                        801 	_xpush 
      0018E8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018EC 90 F7            [ 1]    2     ld (y),a 
      0018EE 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018F1 CD 01 79         [ 4]  802 	call add24 
      0018F4 1E 04            [ 2]  803 	ldw x,(XTEMP,sp)
      0018F6 20 C2            [ 2]  804 	jra 2$
      0018F8 0D 01            [ 1]  805 9$:	tnz (SIGN,sp)
      0018FA 27 03            [ 1]  806     jreq atoi_exit
      0018FC CD 01 FE         [ 4]  807     call neg24
      0018FF                        808 atoi_exit:
      0018FF                        809 	_xpop 
      0018FF 90 F6            [ 1]    1     ld a,(y)
      001901 93               [ 1]    2     ldw x,y 
      001902 EE 01            [ 2]    3     ldw x,(1,x)
      001904 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001908 C7 00 0C         [ 1]  810 	ld acc24,a 
      00190B CF 00 0D         [ 2]  811 	ldw acc16,x  
      00190E                        812 	_drop VSIZE
      00190E 5B 05            [ 2]    1     addw sp,#VSIZE 
      001910 81               [ 4]  813 	ret
                                    814 
                                    815 
                                    816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    817 ;;   TINY BASIC  operators,
                                    818 ;;   commands and functions 
                                    819 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    820 
                                    821 ;---------------------------------
                                    822 ; dictionary search 
                                    823 ; input:
                                    824 ;	X 		dictionary entry point, name field  
                                    825 ;   y		.asciz name to search 
                                    826 ; output:
                                    827 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    828 ;  X		routine address|TK_OP 
                                    829 ;---------------------------------
                           000001   830 	NLEN=1 ; cmd length 
                           000002   831 	XSAVE=2
                           000004   832 	YSAVE=4
                           000005   833 	VSIZE=5 
      001911                        834 search_dict::
      001911                        835 	_vars VSIZE 
      001911 52 05            [ 2]    1     sub sp,#VSIZE 
      001913 17 04            [ 2]  836 	ldw (YSAVE,sp),y 
      001915                        837 search_next:
      001915 1F 02            [ 2]  838 	ldw (XSAVE,sp),x 
                                    839 ; get name length in dictionary	
      001917 F6               [ 1]  840 	ld a,(x)
      001918 A4 0F            [ 1]  841 	and a,#0xf 
      00191A 6B 01            [ 1]  842 	ld (NLEN,sp),a  
      00191C 16 04            [ 2]  843 	ldw y,(YSAVE,sp) ; name pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00191E 5C               [ 1]  844 	incw x 
      00191F                        845 cp_loop:
      00191F 90 F6            [ 1]  846 	ld a,(y)
      001921 27 1B            [ 1]  847 	jreq str_match 
      001923 0D 01            [ 1]  848 	tnz (NLEN,sp)
      001925 27 0A            [ 1]  849 	jreq no_match  
      001927 F1               [ 1]  850 	cp a,(x)
      001928 26 07            [ 1]  851 	jrne no_match 
      00192A 90 5C            [ 1]  852 	incw y 
      00192C 5C               [ 1]  853 	incw x
      00192D 0A 01            [ 1]  854 	dec (NLEN,sp)
      00192F 20 EE            [ 2]  855 	jra cp_loop 
      001931                        856 no_match:
      001931 1E 02            [ 2]  857 	ldw x,(XSAVE,sp) 
      001933 1D 00 02         [ 2]  858 	subw x,#2 ; move X to link field
      001936 4B 00            [ 1]  859 	push #TK_NONE 
      001938 FE               [ 2]  860 	ldw x,(x) ; next word link 
      001939 84               [ 1]  861 	pop a ; TK_NONE 
      00193A 27 1D            [ 1]  862 	jreq search_exit  ; not found  
                                    863 ;try next 
      00193C 20 D7            [ 2]  864 	jra search_next
      00193E                        865 str_match:
      00193E 1E 02            [ 2]  866 	ldw x,(XSAVE,sp)
      001940 F6               [ 1]  867 	ld a,(X)
      001941 6B 01            [ 1]  868 	ld (NLEN,sp),a ; needed to test keyword type  
      001943 A4 0F            [ 1]  869 	and a,#NLEN_MASK 
                                    870 ; move x to procedure address field 	
      001945 4C               [ 1]  871 	inc a 
      001946 C7 00 0E         [ 1]  872 	ld acc8,a 
      001949 72 5F 00 0D      [ 1]  873 	clr acc16 
      00194D 72 BB 00 0D      [ 2]  874 	addw x,acc16 
      001951 FE               [ 2]  875 	ldw x,(x) ; routine address  
                                    876 ;determine keyword type bits 7:4 
      001952 7B 01            [ 1]  877 	ld a,(NLEN,sp)
      001954 A4 F0            [ 1]  878 	and a,#KW_TYPE_MASK 
      001956 4E               [ 1]  879 	swap a 
      001957 AB 80            [ 1]  880 	add a,#128
      001959                        881 search_exit: 
      001959                        882 	_drop VSIZE 
      001959 5B 05            [ 2]    1     addw sp,#VSIZE 
      00195B 81               [ 4]  883 	ret 
                                    884 
                                    885 ;---------------------
                                    886 ; check if next token
                                    887 ;  is of expected type 
                                    888 ; input:
                                    889 ;   A 		 expected token attribute
                                    890 ;  ouput:
                                    891 ;   none     if fail call syntax_error 
                                    892 ;--------------------
      00195C                        893 expect:
      00195C 88               [ 1]  894 	push a 
      00195D CD 17 A6         [ 4]  895 	call next_token 
      001960 11 01            [ 1]  896 	cp a,(1,sp)
      001962 27 03            [ 1]  897 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001964 CC 16 48         [ 2]  898 	jp syntax_error
      001967 84               [ 1]  899 1$: pop a 
      001968 81               [ 4]  900 	ret 
                                    901 
                                    902 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    903 ; parse arguments list 
                                    904 ; between ()
                                    905 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001969                        906 func_args:
      001969 A6 06            [ 1]  907 	ld a,#TK_LPAREN 
      00196B CD 19 5C         [ 4]  908 	call expect 
                                    909 ; expected to continue in arg_list 
                                    910 ; caller must check for TK_RPAREN 
                                    911 
                                    912 ;-------------------------------
                                    913 ; parse embedded BASIC routines 
                                    914 ; arguments list.
                                    915 ; arg_list::=  expr[','expr]*
                                    916 ; all arguments are of int24_t type
                                    917 ; and pushed on stack 
                                    918 ; input:
                                    919 ;   none
                                    920 ; output:
                                    921 ;   xstack{n}   arguments pushed on xstack
                                    922 ;   A 	number of arguments pushed on xstack  
                                    923 ;--------------------------------
      00196E                        924 arg_list:
      00196E 4B 00            [ 1]  925 	push #0
      001970 CD 1B DA         [ 4]  926 1$:	call condition 
      001973 4D               [ 1]  927 	tnz a 
      001974 27 12            [ 1]  928 	jreq 7$  
      001976 0C 01            [ 1]  929 	inc (1,sp)
      001978 CD 17 A6         [ 4]  930 	call next_token 
      00197B A1 08            [ 1]  931 	cp a,#TK_COMMA 
      00197D 27 F1            [ 1]  932 	jreq 1$ 
      00197F A1 07            [ 1]  933 	cp a,#TK_RPAREN
      001981 27 05            [ 1]  934 	jreq 7$
      001983                        935 	_unget_token 
      001983 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001988 84               [ 1]  936 7$:	pop a  
      001989 81               [ 4]  937 	ret 
                                    938 
                                    939 ;--------------------------------
                                    940 ;   BASIC commnands 
                                    941 ;--------------------------------
                                    942 
                                    943 ;--------------------------------
                                    944 ;  arithmetic and relational 
                                    945 ;  routines
                                    946 ;  operators precedence
                                    947 ;  highest to lowest
                                    948 ;  operators on same row have 
                                    949 ;  same precedence and are executed
                                    950 ;  from left to right.
                                    951 ;	'*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                    952 ;   '-','+'
                                    953 ;   '=','>','<','>=','<=','<>','><'
                                    954 ;   '<>' and '><' are equivalent for not equal.
                                    955 ;--------------------------------
                                    956 
                                    957 ;---------------------
                                    958 ; return array element
                                    959 ; address from @(expr)
                                    960 ; input:
                                    961 ;   A 		TK_ARRAY
                                    962 ; output:
                                    963 ;	X 		element address 
                                    964 ;----------------------
      00198A                        965 get_array_element:
      00198A CD 19 69         [ 4]  966 	call func_args 
      00198D A1 01            [ 1]  967 	cp a,#1
      00198F 27 03            [ 1]  968 	jreq 1$
      001991 CC 16 48         [ 2]  969 	jp syntax_error
      001994                        970 1$: _xpop 
      001994 90 F6            [ 1]    1     ld a,(y)
      001996 93               [ 1]    2     ldw x,y 
      001997 EE 01            [ 2]    3     ldw x,(1,x)
      001999 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    971     ; ignore A, index < 65536 in any case 
                                    972 	; check for bounds 
      00199D C3 00 20         [ 2]  973 	cpw x,array_size 
      0019A0 23 05            [ 2]  974 	jrule 3$
                                    975 ; bounds {1..array_size}	
      0019A2 A6 0A            [ 1]  976 2$: ld a,#ERR_BAD_VALUE 
      0019A4 CC 16 4A         [ 2]  977 	jp tb_error 
      0019A7 5D               [ 2]  978 3$: tnzw  x
      0019A8 27 F8            [ 1]  979 	jreq 2$ 
      0019AA 89               [ 2]  980 	pushw x 
      0019AB 58               [ 2]  981 	sllw x 
      0019AC 72 FB 01         [ 2]  982 	addw x,(1,sp) ; index*size_of(int24)
      0019AF 1F 01            [ 2]  983 	ldw (1,sp),x  
      0019B1 AE 16 90         [ 2]  984 	ldw x,#tib ; array is below tib 
      0019B4 72 F0 01         [ 2]  985 	subw x,(1,sp)
      0019B7                        986 	_drop 2   
      0019B7 5B 02            [ 2]    1     addw sp,#2 
      0019B9 81               [ 4]  987 	ret 
                                    988 
                                    989 
                                    990 ;***********************************
                                    991 ;   expression parse,execute 
                                    992 ;***********************************
                                    993 ;-----------------------------------
                                    994 ; factor ::= ['+'|'-'|e]  var | @ |
                                    995 ;			 integer | function |
                                    996 ;			 '('relation')' 
                                    997 ; output:
                                    998 ;   A       token attribute 
                                    999 ;   xstack  value  
                                   1000 ; ---------------------------------
                           000001  1001 	NEG=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



                           000001  1002 	VSIZE=1
      0019BA                       1003 factor:
      0019BA                       1004 	_vars VSIZE 
      0019BA 52 01            [ 2]    1     sub sp,#VSIZE 
      0019BC 0F 01            [ 1] 1005 	clr (NEG,sp)
      0019BE CD 17 A6         [ 4] 1006 	call next_token
      0019C1 4D               [ 1] 1007 	tnz a 
      0019C2 26 03            [ 1] 1008 	jrne 1$ 
      0019C4 CC 1A 7B         [ 2] 1009 	jp 22$ 
      0019C7 A1 10            [ 1] 1010 1$:	cp a,#TK_PLUS 
      0019C9 27 06            [ 1] 1011 	jreq 2$
      0019CB A1 11            [ 1] 1012 	cp a,#TK_MINUS 
      0019CD 26 05            [ 1] 1013 	jrne 4$ 
      0019CF 03 01            [ 1] 1014 	cpl (NEG,sp)
      0019D1                       1015 2$:	
      0019D1 CD 17 A6         [ 4] 1016 	call next_token
      0019D4                       1017 4$:
      0019D4 4D               [ 1] 1018 	tnz a 
      0019D5 26 03            [ 1] 1019 	jrne 41$ 
      0019D7 CC 16 48         [ 2] 1020 	jp syntax_error  
      0019DA                       1021 41$:	
      0019DA A1 81            [ 1] 1022 	cp a,#TK_IFUNC 
      0019DC 26 0C            [ 1] 1023 	jrne 5$ 
      0019DE                       1024 	_get_code_addr 
      0019DE FE               [ 2]    1         ldw x,(x)
      0019DF 72 5C 00 01      [ 1]    2         inc in 
      0019E3 72 5C 00 01      [ 1]    3         inc in 
      0019E7 FD               [ 4] 1025 	call (x); result in A:X  
      0019E8 20 7F            [ 2] 1026 	jra 18$ 
      0019EA                       1027 5$:
      0019EA A1 84            [ 1] 1028 	cp a,#TK_INTGR
      0019EC 26 05            [ 1] 1029 	jrne 6$
      0019EE CD 17 D8         [ 4] 1030 	call get_int24 ; A:X
      0019F1 20 76            [ 2] 1031 	jra 18$
      0019F3                       1032 6$:
      0019F3 A1 05            [ 1] 1033 	cp a,#TK_ARRAY
      0019F5 26 05            [ 1] 1034 	jrne 7$
      0019F7 CD 19 8A         [ 4] 1035 	call get_array_element
      0019FA 20 07            [ 2] 1036     jra 71$
      0019FC                       1037 7$:
      0019FC A1 85            [ 1] 1038 	cp a,#TK_VAR 
      0019FE 26 08            [ 1] 1039 	jrne 8$
      001A00 CD 17 CE         [ 4] 1040 	call get_addr 
      001A03                       1041 71$: ; put value in A:X
      001A03 F6               [ 1] 1042 	ld a,(x)
      001A04 EE 01            [ 2] 1043 	ldw x,(1,x)
      001A06 20 61            [ 2] 1044 	jra 18$
      001A08                       1045 8$:
      001A08 A1 03            [ 1] 1046 	cp a,#TK_LABEL 
      001A0A 26 2C            [ 1] 1047 	jrne 9$
      001A0C 90 89            [ 2] 1048 	pushw y  
      001A0E 89               [ 2] 1049 	pushw x 
      001A0F CD 17 BF         [ 4] 1050 	call skip_string
      001A12 1E 01            [ 2] 1051 	ldw x,(1,sp) 
      001A14 90 AE 40 00      [ 2] 1052 	ldw y,#EEPROM_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A18 CD 1D 80         [ 4] 1053 	call search_name
      001A1B 5D               [ 2] 1054 	tnzw x 
      001A1C 26 11            [ 1] 1055 	jrne 82$ 
      001A1E 90 CE 00 30      [ 2] 1056 	ldw y,dvar_bgn
      001A22 1E 01            [ 2] 1057 	ldw x,(1,sp)
      001A24 CD 1D 80         [ 4] 1058 	call search_name
      001A27 5D               [ 2] 1059 	tnzw x 
      001A28 26 05            [ 1] 1060 	jrne 82$ 
      001A2A 85               [ 2] 1061 	popw x 
      001A2B 90 85            [ 2] 1062 	popw y 
      001A2D 20 32            [ 2] 1063 	jra 16$
      001A2F                       1064 82$:
      001A2F                       1065 	_drop 2  ; name pointer 
      001A2F 5B 02            [ 2]    1     addw sp,#2 
      001A31 90 85            [ 2] 1066 	popw y   
      001A33 CD 1C DC         [ 4] 1067 	call get_value ; in A:X 
      001A36 20 31            [ 2] 1068 	jra 18$
      001A38                       1069 9$: 
      001A38 A1 82            [ 1] 1070 	cp a,#TK_CFUNC 
      001A3A 26 0E            [ 1] 1071 	jrne 12$
      001A3C                       1072 	_get_code_addr 
      001A3C FE               [ 2]    1         ldw x,(x)
      001A3D 72 5C 00 01      [ 1]    2         inc in 
      001A41 72 5C 00 01      [ 1]    3         inc in 
      001A45 FD               [ 4] 1073 	call(x)
      001A46 5F               [ 1] 1074 	clrw x 
      001A47 02               [ 1] 1075 	rlwa x  ; char>int24 in A:X 
      001A48 20 1F            [ 2] 1076 	jra 18$ 	 
      001A4A                       1077 12$:			
      001A4A A1 06            [ 1] 1078 	cp a,#TK_LPAREN
      001A4C 26 13            [ 1] 1079 	jrne 16$
      001A4E CD 1A C1         [ 4] 1080 	call expression
      001A51 A6 07            [ 1] 1081 	ld a,#TK_RPAREN 
      001A53 CD 19 5C         [ 4] 1082 	call expect
      001A56                       1083 	_xpop 
      001A56 90 F6            [ 1]    1     ld a,(y)
      001A58 93               [ 1]    2     ldw x,y 
      001A59 EE 01            [ 2]    3     ldw x,(1,x)
      001A5B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A5F 20 08            [ 2] 1084 	jra 18$	
      001A61                       1085 16$:
      001A61                       1086 	_unget_token 
      001A61 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A66 4F               [ 1] 1087 	clr a 
      001A67 20 12            [ 2] 1088 	jra 22$ 
      001A69                       1089 18$: 
      001A69 0D 01            [ 1] 1090 	tnz (NEG,sp)
      001A6B 27 03            [ 1] 1091 	jreq 20$
      001A6D CD 02 10         [ 4] 1092 	call neg_ax   
      001A70                       1093 20$:
      001A70                       1094 	_xpush 
      001A70 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A74 90 F7            [ 1]    2     ld (y),a 
      001A76 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A79 A6 84            [ 1] 1095 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A7B                       1096 22$:
      001A7B                       1097 	_drop VSIZE
      001A7B 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A7D 81               [ 4] 1098 	ret
                                   1099 
                                   1100 
                                   1101 ;-----------------------------------
                                   1102 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1103 ; output:
                                   1104 ;   A    	token attribute 
                                   1105 ;	xstack		value 
                                   1106 ;-----------------------------------
                           000001  1107 	MULOP=1
                           000001  1108 	VSIZE=1
      001A7E                       1109 term:
      001A7E                       1110 	_vars VSIZE
      001A7E 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1111 ; first factor 	
      001A80 CD 19 BA         [ 4] 1112 	call factor
      001A83 4D               [ 1] 1113 	tnz a 
      001A84 27 38            [ 1] 1114 	jreq term_exit  
      001A86                       1115 term01:	 ; check for  operator '*'|'/'|'%' 
      001A86 CD 17 A6         [ 4] 1116 	call next_token
      001A89 6B 01            [ 1] 1117 	ld (MULOP,sp),a
      001A8B A4 30            [ 1] 1118 	and a,#TK_GRP_MASK
      001A8D A1 20            [ 1] 1119 	cp a,#TK_GRP_MULT
      001A8F 27 09            [ 1] 1120 	jreq 1$
      001A91 A6 84            [ 1] 1121 	ld a,#TK_INTGR
      001A93                       1122 	_unget_token 
      001A93 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A98 20 24            [ 2] 1123 	jra term_exit 
      001A9A                       1124 1$:	; got *|/|%
                                   1125 ;second factor
      001A9A CD 19 BA         [ 4] 1126 	call factor
      001A9D 4D               [ 1] 1127 	tnz a 
      001A9E 26 03            [ 1] 1128 	jrne 2$ 
      001AA0 CC 16 48         [ 2] 1129 	jp syntax_error 
      001AA3                       1130 2$: ; select operation 	
      001AA3 7B 01            [ 1] 1131 	ld a,(MULOP,sp) 
      001AA5 A1 20            [ 1] 1132 	cp a,#TK_MULT 
      001AA7 26 05            [ 1] 1133 	jrne 3$
                                   1134 ; '*' operator
      001AA9 CD 02 74         [ 4] 1135 	call mul24 
      001AAC 20 D8            [ 2] 1136 	jra term01
      001AAE A1 21            [ 1] 1137 3$: cp a,#TK_DIV 
      001AB0 26 05            [ 1] 1138 	jrne 4$ 
                                   1139 ; '/' operator	
      001AB2 CD 03 02         [ 4] 1140 	call div24 
      001AB5 20 CF            [ 2] 1141 	jra term01 
      001AB7                       1142 4$: ; '%' operator
      001AB7 CD 03 9C         [ 4] 1143 	call mod24
      001ABA 20 CA            [ 2] 1144 	jra term01 
      001ABC                       1145 9$: 
      001ABC A6 84            [ 1] 1146 	ld a,#TK_INTGR
      001ABE                       1147 term_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001ABE                       1148 	_drop VSIZE 
      001ABE 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AC0 81               [ 4] 1149 	ret 
                                   1150 
                                   1151 ;-------------------------------
                                   1152 ;  expr ::= term [['+'|'-'] term]*
                                   1153 ;  result range {-32768..32767}
                                   1154 ;  output:
                                   1155 ;   A    token attribute 
                                   1156 ;   xstack	 result    
                                   1157 ;-------------------------------
                           000001  1158 	OP=1 
                           000001  1159 	VSIZE=1 
      001AC1                       1160 expression:
      001AC1                       1161 	_vars VSIZE 
      001AC1 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1162 ; first term 	
      001AC3 CD 1A 7E         [ 4] 1163 	call term
      001AC6 4D               [ 1] 1164 	tnz a 
      001AC7 27 2D            [ 1] 1165 	jreq 9$
      001AC9                       1166 1$:	; operator '+'|'-'
      001AC9 CD 17 A6         [ 4] 1167 	call next_token
      001ACC 6B 01            [ 1] 1168 	ld (OP,sp),a 
      001ACE A4 30            [ 1] 1169 	and a,#TK_GRP_MASK
      001AD0 A1 10            [ 1] 1170 	cp a,#TK_GRP_ADD 
      001AD2 27 09            [ 1] 1171 	jreq 2$ 
      001AD4                       1172 	_unget_token 
      001AD4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AD9 A6 84            [ 1] 1173 	ld a,#TK_INTGR
      001ADB 20 19            [ 2] 1174 	jra 9$ 
      001ADD                       1175 2$: ; second term 
      001ADD CD 1A 7E         [ 4] 1176 	call term
      001AE0 4D               [ 1] 1177 	tnz a 
      001AE1 26 03            [ 1] 1178 	jrne 3$
      001AE3 CC 16 48         [ 2] 1179 	jp syntax_error
      001AE6                       1180 3$:
      001AE6 7B 01            [ 1] 1181 	ld a,(OP,sp)
      001AE8 A1 10            [ 1] 1182 	cp a,#TK_PLUS 
      001AEA 26 05            [ 1] 1183 	jrne 4$
                                   1184 ; '+' operator	
      001AEC CD 01 79         [ 4] 1185 	call add24
      001AEF 20 D8            [ 2] 1186 	jra 1$ 
      001AF1                       1187 4$:	; '-' operator 
      001AF1 CD 01 96         [ 4] 1188 	call sub24
      001AF4 20 D3            [ 2] 1189 	jra 1$
      001AF6                       1190 9$:
      001AF6                       1191 	_drop VSIZE 
      001AF6 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AF8 81               [ 4] 1192 	ret 
                                   1193 
                                   1194 ;---------------------------------------------
                                   1195 ; rel ::= expr rel_op expr
                                   1196 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1197 ;  relation return  integer , zero is false 
                                   1198 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   1199 ;	 xstack		value  
                                   1200 ;---------------------------------------------
                           000001  1201 	RELOP=1
                           000001  1202 	VSIZE=1 
      001AF9                       1203 relation: 
      001AF9                       1204 	_vars VSIZE
      001AF9 52 01            [ 2]    1     sub sp,#VSIZE 
      001AFB CD 1A C1         [ 4] 1205 	call expression
      001AFE 4D               [ 1] 1206 	tnz a 
      001AFF 27 54            [ 1] 1207 	jreq 9$ 
                                   1208 ; expect rel_op or leave 
      001B01 CD 17 A6         [ 4] 1209 	call next_token 
      001B04 6B 01            [ 1] 1210 	ld (RELOP,sp),a 
      001B06 A4 30            [ 1] 1211 	and a,#TK_GRP_MASK
      001B08 A1 30            [ 1] 1212 	cp a,#TK_GRP_RELOP 
      001B0A 27 09            [ 1] 1213 	jreq 2$
      001B0C A6 84            [ 1] 1214 	ld a,#TK_INTGR 
      001B0E                       1215 	_unget_token 
      001B0E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B13 20 40            [ 2] 1216 	jra 9$ 
      001B15                       1217 2$:	; expect another expression
      001B15 CD 1A C1         [ 4] 1218 	call expression
      001B18 4D               [ 1] 1219 	tnz a 
      001B19 26 03            [ 1] 1220 	jrne 3$
      001B1B CC 16 48         [ 2] 1221 	jp syntax_error 
      001B1E                       1222 3$: 
      001B1E CD 01 B3         [ 4] 1223 	call cp24 
      001B21                       1224 	_xpop  
      001B21 90 F6            [ 1]    1     ld a,(y)
      001B23 93               [ 1]    2     ldw x,y 
      001B24 EE 01            [ 2]    3     ldw x,(1,x)
      001B26 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B2A 4D               [ 1] 1225 	tnz a 
      001B2B 2B 08            [ 1] 1226 	jrmi 4$
      001B2D 26 0C            [ 1] 1227 	jrne 5$
      001B2F 35 02 00 0E      [ 1] 1228 	mov acc8,#2 ; i1==i2
      001B33 20 0A            [ 2] 1229 	jra 6$ 
      001B35                       1230 4$: ; i1<i2
      001B35 35 04 00 0E      [ 1] 1231 	mov acc8,#4 
      001B39 20 04            [ 2] 1232 	jra 6$
      001B3B                       1233 5$: ; i1>i2
      001B3B 35 01 00 0E      [ 1] 1234 	mov acc8,#1  
      001B3F                       1235 6$: ; 0=false, -1=true 
      001B3F 5F               [ 1] 1236 	clrw x 
      001B40 C6 00 0E         [ 1] 1237 	ld a, acc8  
      001B43 14 01            [ 1] 1238 	and a,(RELOP,sp)
      001B45 27 03            [ 1] 1239 	jreq 7$
      001B47 53               [ 2] 1240 	cplw x 
      001B48 A6 FF            [ 1] 1241 	ld a,#255 
      001B4A                       1242 7$:	_xpush 
      001B4A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B4E 90 F7            [ 1]    2     ld (y),a 
      001B50 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B53 A6 84            [ 1] 1243 	ld a,#TK_INTGR
      001B55                       1244 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B55                       1245 	_drop VSIZE
      001B55 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B57 81               [ 4] 1246 	ret 
                                   1247 
                                   1248 ;-------------------------------------------
                                   1249 ;  AND factor:  [NOT] relation | (condition)
                                   1250 ;  output:
                                   1251 ;     A      TK_INTGR|0
                                   1252 ;-------------------------------------------
                           000001  1253 	NOT_OP=1
      001B58                       1254 and_factor:
      001B58 4B 00            [ 1] 1255 	push #0 
      001B5A CD 17 A6         [ 4] 1256 0$:	call next_token  
      001B5D 4D               [ 1] 1257 	tnz a 
      001B5E 27 25            [ 1] 1258 	jreq 8$ 
      001B60 A1 87            [ 1] 1259 	cp a,#TK_NOT 
      001B62 26 04            [ 1] 1260 	jrne 1$ 
      001B64 03 01            [ 1] 1261 	cpl (NOT_OP,sp)
      001B66 20 F2            [ 2] 1262 	jra 0$ 
      001B68                       1263 1$:	
      001B68 A1 06            [ 1] 1264 	cp a,#TK_LPAREN 
      001B6A 26 0A            [ 1] 1265 	jrne 2$
      001B6C CD 1B DA         [ 4] 1266 	call condition
      001B6F A6 07            [ 1] 1267 	ld a,#TK_RPAREN 
      001B71 CD 19 5C         [ 4] 1268 	call expect
      001B74 20 08            [ 2] 1269 	jra 3$
      001B76                       1270 2$: _unget_token 
      001B76 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B7B CD 1A F9         [ 4] 1271 	call relation
      001B7E                       1272 3$:
      001B7E 0D 01            [ 1] 1273 	tnz (NOT_OP,sp)
      001B80 27 03            [ 1] 1274 	jreq 8$ 
      001B82 CD 01 F5         [ 4] 1275 	call cpl24
      001B85                       1276 8$:
      001B85                       1277 	_drop 1  
      001B85 5B 01            [ 2]    1     addw sp,#1 
      001B87 81               [ 4] 1278     ret 
                                   1279 
                                   1280 
                                   1281 ;--------------------------------------------
                                   1282 ;  AND operator as priority over OR||XOR 
                                   1283 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1284 ;          
                                   1285 ;  output:
                                   1286 ;     A     TK_INTGR|0
                                   1287 ;    xtack   value 
                                   1288 ;--------------------------------------------
      001B88                       1289 and_cond:
      001B88 CD 1B 58         [ 4] 1290 	call and_factor
      001B8B 4D               [ 1] 1291 	tnz a 
      001B8C 27 4B            [ 1] 1292 	jreq 9$  
      001B8E CD 17 A6         [ 4] 1293 1$: call next_token 
      001B91 4D               [ 1] 1294 	tnz a 
      001B92 27 43            [ 1] 1295 	jreq 6$ 
      001B94 A1 88            [ 1] 1296 	cp a,#TK_AND 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001B96 27 07            [ 1] 1297 	jreq 3$
      001B98                       1298 	_unget_token 
      001B98 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B9D 20 38            [ 2] 1299 	jra 6$ 
      001B9F CD 1B 58         [ 4] 1300 3$:	call and_factor  
      001BA2 4D               [ 1] 1301 	tnz a 
      001BA3 26 03            [ 1] 1302 	jrne 4$
      001BA5 CC 16 48         [ 2] 1303 	jp syntax_error 
      001BA8                       1304 4$:	
      001BA8                       1305 	_xpop 
      001BA8 90 F6            [ 1]    1     ld a,(y)
      001BAA 93               [ 1]    2     ldw x,y 
      001BAB EE 01            [ 2]    3     ldw x,(1,x)
      001BAD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BB1 C7 00 0C         [ 1] 1306 	ld acc24,a 
      001BB4 CF 00 0D         [ 2] 1307 	ldw acc16,x
      001BB7                       1308 	_xpop 
      001BB7 90 F6            [ 1]    1     ld a,(y)
      001BB9 93               [ 1]    2     ldw x,y 
      001BBA EE 01            [ 2]    3     ldw x,(1,x)
      001BBC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BC0 C4 00 0C         [ 1] 1309 	and a,acc24 
      001BC3 02               [ 1] 1310 	rlwa x 
      001BC4 C4 00 0D         [ 1] 1311 	and a,acc16 
      001BC7 02               [ 1] 1312 	rlwa x 
      001BC8 C4 00 0E         [ 1] 1313 	and a,acc8 
      001BCB 02               [ 1] 1314 	rlwa x
      001BCC                       1315 	_xpush
      001BCC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BD0 90 F7            [ 1]    2     ld (y),a 
      001BD2 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BD5 20 B7            [ 2] 1316 	jra 1$  
      001BD7 A6 84            [ 1] 1317 6$: ld a,#TK_INTGR 
      001BD9 81               [ 4] 1318 9$:	ret 	 
                                   1319 
                                   1320 
                                   1321 ;--------------------------------------------
                                   1322 ; condition for IF and UNTIL 
                                   1323 ; operators: OR,XOR 
                                   1324 ; format:  and_cond [ OP and_cond ]* 
                                   1325 ; output:
                                   1326 ;    A        INTGR|0 
                                   1327 ;    xstack   value 
                                   1328 ;--------------------------------------------
                           000001  1329 	ATMP=1
                           000002  1330 	OP=2
                           000002  1331 	VSIZE=2 
      001BDA                       1332 condition:
      001BDA                       1333 	_vars VSIZE 
      001BDA 52 02            [ 2]    1     sub sp,#VSIZE 
      001BDC CD 1B 88         [ 4] 1334 	call and_cond
      001BDF 4D               [ 1] 1335 	tnz a 
      001BE0 27 69            [ 1] 1336 	jreq 9$ 
      001BE2 CD 17 A6         [ 4] 1337 1$:	call next_token 
      001BE5 A1 89            [ 1] 1338 	cp a,#TK_OR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001BE7 27 0B            [ 1] 1339 	jreq 2$
      001BE9 A1 8A            [ 1] 1340 	cp a,#TK_XOR
      001BEB 27 07            [ 1] 1341 	jreq 2$ 
      001BED                       1342 	_unget_token 
      001BED 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BF2 20 55            [ 2] 1343 	jra 8$ 
      001BF4 6B 02            [ 1] 1344 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BF6 CD 1B 88         [ 4] 1345 	call and_cond
      001BF9 A1 84            [ 1] 1346 	cp a,#TK_INTGR 
      001BFB 27 03            [ 1] 1347 	jreq 3$
      001BFD CC 16 48         [ 2] 1348 	jp syntax_error 
      001C00                       1349 3$:	 
      001C00                       1350 	_xpop  ; rigth arg 
      001C00 90 F6            [ 1]    1     ld a,(y)
      001C02 93               [ 1]    2     ldw x,y 
      001C03 EE 01            [ 2]    3     ldw x,(1,x)
      001C05 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C09 C7 00 0C         [ 1] 1351 	ld acc24,a 
      001C0C CF 00 0D         [ 2] 1352 	ldw acc16,x 
      001C0F                       1353 	_xpop  ; left arg  
      001C0F 90 F6            [ 1]    1     ld a,(y)
      001C11 93               [ 1]    2     ldw x,y 
      001C12 EE 01            [ 2]    3     ldw x,(1,x)
      001C14 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C18 6B 01            [ 1] 1354 	ld (ATMP,sp),a 
      001C1A 7B 02            [ 1] 1355 	ld a,(OP,sp)
      001C1C A1 8A            [ 1] 1356 	cp a,#TK_XOR 
      001C1E 27 10            [ 1] 1357 	jreq 5$ 
      001C20                       1358 4$: ; A:X OR acc24   
      001C20 7B 01            [ 1] 1359 	ld a,(ATMP,sp)
      001C22 CA 00 0C         [ 1] 1360 	or a,acc24 
      001C25 02               [ 1] 1361 	rlwa x 
      001C26 CA 00 0D         [ 1] 1362 	or a,acc16 
      001C29 02               [ 1] 1363 	rlwa x 
      001C2A CA 00 0E         [ 1] 1364 	or a,acc8 
      001C2D 02               [ 1] 1365 	rlwa x 
      001C2E 20 0E            [ 2] 1366 	jra 6$  
      001C30                       1367 5$: ; A:X XOR acc24 
      001C30 7B 01            [ 1] 1368 	ld a,(ATMP,sp)
      001C32 C8 00 0C         [ 1] 1369 	xor a,acc24 
      001C35 02               [ 1] 1370 	rlwa x 
      001C36 C8 00 0D         [ 1] 1371 	xor a,acc16 
      001C39 02               [ 1] 1372 	rlwa x 
      001C3A C8 00 0E         [ 1] 1373 	xor a,acc8 
      001C3D 02               [ 1] 1374 	rlwa x 
      001C3E                       1375 6$: _xpush
      001C3E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C42 90 F7            [ 1]    2     ld (y),a 
      001C44 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C47 20 99            [ 2] 1376 	jra 1$ 
      001C49 A6 84            [ 1] 1377 8$:	ld a,#TK_INTGR 
      001C4B                       1378 9$:	_drop VSIZE 
      001C4B 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C4D 81               [ 4] 1379 	ret 
                                   1380 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



                                   1381 
                                   1382 ;--------------------------------------------
                                   1383 ; BASIC: HEX 
                                   1384 ; select hexadecimal base for integer print
                                   1385 ;---------------------------------------------
      001C4E                       1386 hex_base:
      001C4E 35 10 00 0A      [ 1] 1387 	mov base,#16 
      001C52 81               [ 4] 1388 	ret 
                                   1389 
                                   1390 ;--------------------------------------------
                                   1391 ; BASIC: DEC 
                                   1392 ; select decimal base for integer print
                                   1393 ;---------------------------------------------
      001C53                       1394 dec_base:
      001C53 35 0A 00 0A      [ 1] 1395 	mov base,#10
      001C57 81               [ 4] 1396 	ret 
                                   1397 
                                   1398 ;------------------------
                                   1399 ; BASIC: FREE 
                                   1400 ; return free size in RAM 
                                   1401 ; output:
                                   1402 ;   A:x		size 
                                   1403 ;--------------------------
      001C58                       1404 free:
      001C58 4F               [ 1] 1405 	clr a 
      001C59 AE 16 90         [ 2] 1406 	ldw x,#tib 
      001C5C 72 B0 00 32      [ 2] 1407 	subw x,dvar_end 
      001C60 81               [ 4] 1408 	ret 
                                   1409 
                                   1410 ;------------------------------
                                   1411 ; BASIC: SIZE 
                                   1412 ; command that print 
                                   1413 ; program start addres and size 
                                   1414 ;------------------------------
      001C61                       1415 cmd_size:
      001C61 3B 00 0A         [ 1] 1416 	push base 
      001C64 AE 1F 58         [ 2] 1417 	ldw x,#PROG_ADDR 
      001C67 CD 09 68         [ 4] 1418 	call puts 
      001C6A CE 00 1B         [ 2] 1419 	ldw x,txtbgn     
      001C6D 35 10 00 0A      [ 1] 1420 	mov base,#16 
      001C71 CD 17 EE         [ 4] 1421 	call prt_i16
      001C74 32 00 0A         [ 1] 1422 	pop base 
      001C77 AE 1F 6A         [ 2] 1423 	ldw x,#PROG_SIZE 
      001C7A CD 09 68         [ 4] 1424 	call puts 
      001C7D CE 00 1D         [ 2] 1425 	ldw x,txtend 
      001C80 72 B0 00 1B      [ 2] 1426 	subw x,txtbgn 
      001C84 CD 17 EE         [ 4] 1427 	call prt_i16
      001C87 AE 1F 7B         [ 2] 1428 	ldw x,#STR_BYTES 
      001C8A CD 09 68         [ 4] 1429 	call puts  
      001C8D 81               [ 4] 1430 	ret 
                                   1431 
                                   1432 
                                   1433 ;------------------------
                                   1434 ; BASIC: UBOUND  
                                   1435 ; return array variable size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1436 ; and set 'array_size' variable 
                                   1437 ; output:
                                   1438 ;   A:X 	array_size
                                   1439 ;--------------------------
      001C8E                       1440 ubound:
      001C8E CD 1C 58         [ 4] 1441 	call free 
      001C91 A6 03            [ 1] 1442 	ld a,#CELL_SIZE 
      001C93 62               [ 2] 1443 	div x,a 
      001C94 CF 00 20         [ 2] 1444 	ldw array_size,x
      001C97 4F               [ 1] 1445 	clr a 
      001C98 81               [ 4] 1446 	ret 
                                   1447 
                                   1448 ;-----------------------------
                                   1449 ; BASIC: LET var=expr 
                                   1450 ; variable assignement 
                                   1451 ; output:
                                   1452 ;   A 		TK_NONE 
                                   1453 ;-----------------------------
      001C99                       1454 let::
      001C99 CD 17 A6         [ 4] 1455 	call next_token 
      001C9C A1 85            [ 1] 1456 	cp a,#TK_VAR 
      001C9E 27 0C            [ 1] 1457 	jreq let_var
      001CA0 A1 05            [ 1] 1458 	cp a,#TK_ARRAY 
      001CA2 27 03            [ 1] 1459 	jreq  let_array
      001CA4 CC 16 48         [ 2] 1460 	jp syntax_error
      001CA7                       1461 let_array:
      001CA7 CD 19 8A         [ 4] 1462 	call get_array_element
      001CAA 20 03            [ 2] 1463 	jra let_eval 
      001CAC                       1464 let_var:
      001CAC CD 17 CE         [ 4] 1465 	call get_addr
      001CAF                       1466 let_eval:
      001CAF CF 00 19         [ 2] 1467 	ldw ptr16,x  ; variable address 
      001CB2 CD 17 A6         [ 4] 1468 	call next_token 
      001CB5 A1 32            [ 1] 1469 	cp a,#TK_EQUAL
      001CB7 27 03            [ 1] 1470 	jreq 1$
      001CB9 CC 16 48         [ 2] 1471 	jp syntax_error
      001CBC                       1472 1$:	
      001CBC CD 1B DA         [ 4] 1473 	call condition   
      001CBF A1 84            [ 1] 1474 	cp a,#TK_INTGR 
      001CC1 27 03            [ 1] 1475 	jreq 2$
      001CC3 CC 16 48         [ 2] 1476 	jp syntax_error
      001CC6                       1477 2$:	
      001CC6                       1478 	_xpop ; value 
      001CC6 90 F6            [ 1]    1     ld a,(y)
      001CC8 93               [ 1]    2     ldw x,y 
      001CC9 EE 01            [ 2]    3     ldw x,(1,x)
      001CCB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CCF                       1479 3$:
      001CCF 72 C7 00 19      [ 4] 1480 	ld [ptr16],a
      001CD3 72 5C 00 1A      [ 1] 1481 	inc ptr8  
      001CD7 72 CF 00 19      [ 5] 1482 	ldw [ptr16],x 
      001CDB 81               [ 4] 1483 	ret 
                                   1484 
                                   1485 
                                   1486 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                   1487 ; return constant/dvar value 
                                   1488 ; from it's record address
                                   1489 ; input:
                                   1490 ;	X	*const record 
                                   1491 ; output:
                                   1492 ;   A:X   const  value
                                   1493 ;--------------------------
      001CDC                       1494 get_value: ; -- i 
      001CDC F6               [ 1] 1495 	ld a,(x) ; record size 
      001CDD A0 03            [ 1] 1496 	sub a,#CELL_SIZE ; * value 
      001CDF 88               [ 1] 1497 	push a 
      001CE0 4B 00            [ 1] 1498 	push #0 
      001CE2 72 FB 01         [ 2] 1499 	addw x,(1,sp)
      001CE5 F6               [ 1] 1500 	ld a,(x)
      001CE6 EE 01            [ 2] 1501 	ldw x,(1,x)
      001CE8                       1502 	_drop 2
      001CE8 5B 02            [ 2]    1     addw sp,#2 
      001CEA 81               [ 4] 1503 	ret 
                                   1504 
                                   1505 
                                   1506 ;--------------------------
                                   1507 ; list constants in EEPROM 
                                   1508 ; call when using LIST \C 
                                   1509 ;-------------------------
                           000001  1510 	COUNT=1
                           000003  1511 	YTEMP=3
                           000004  1512 	VSIZE=4 
      001CEB                       1513 list_const:
      001CEB 90 89            [ 2] 1514 	pushw y 
      001CED                       1515 	_vars 4 
      001CED 52 04            [ 2]    1     sub sp,#4 
      001CEF 5F               [ 1] 1516 	clrw x 
      001CF0 1F 01            [ 2] 1517 	ldw (COUNT,sp),x  
      001CF2 90 AE 40 00      [ 2] 1518 	ldw Y,#EEPROM_BASE 
      001CF6 90 C3 00 24      [ 2] 1519 1$:	cpw y,free_eeprom 
      001CFA 24 35            [ 1] 1520 	jruge 9$
      001CFC 17 03            [ 2] 1521     ldw (YTEMP,sp),y 
      001CFE 93               [ 1] 1522 	ldw x,y
      001CFF 5C               [ 1] 1523 	incw x 
      001D00 CD 09 68         [ 4] 1524 	call puts  
      001D03 A6 3D            [ 1] 1525 	ld a,#'= 
      001D05 CD 09 0B         [ 4] 1526 	call putc 
      001D08 1E 03            [ 2] 1527 	ldw x,(YTEMP,sp)
      001D0A CD 1C DC         [ 4] 1528 	call get_value 
      001D0D C7 00 0C         [ 1] 1529 	ld acc24,a 
      001D10 CF 00 0D         [ 2] 1530 	ldw acc16,x 
      001D13 CD 18 05         [ 4] 1531 	call prt_acc24
      001D16 A6 0D            [ 1] 1532 	ld a,#CR 
      001D18 CD 09 0B         [ 4] 1533 	call putc 
      001D1B 1E 01            [ 2] 1534 	ldw x,(COUNT,sp)
      001D1D 5C               [ 1] 1535 	incw x 
      001D1E 1F 01            [ 2] 1536 	ldw (COUNT,sp),x 
      001D20 72 5F 00 0D      [ 1] 1537 	clr acc16 
      001D24 16 03            [ 2] 1538 	ldw y,(YTEMP,sp)
      001D26 90 F6            [ 1] 1539 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D28 C7 00 0E         [ 1] 1540 	ld acc8,a
      001D2B 72 B9 00 0D      [ 2] 1541 	addw y,acc16 
      001D2F 20 C5            [ 2] 1542 	jra 1$ 
      001D31                       1543 9$:	
      001D31 1E 01            [ 2] 1544 	ldw x,(COUNT,sp)
      001D33 CD 17 EE         [ 4] 1545 	call prt_i16 
      001D36 AE 1D 41         [ 2] 1546 	ldw x,#CONST_COUNT 
      001D39 CD 09 68         [ 4] 1547 	call puts 
      001D3C                       1548 	_drop VSIZE 
      001D3C 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D3E 90 85            [ 2] 1549 	popw y 
      001D40 81               [ 4] 1550 	ret 
                                   1551 
      001D41 20 63 6F 6E 73 74 61  1552 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1553 
                                   1554 
                                   1555 ;--------------------------
                                   1556 ; BASIC: EEFREE 
                                   1557 ; eeprom_free 
                                   1558 ; search end of data  
                                   1559 ; in EEPROM 
                                   1560 ; input:
                                   1561 ;    none 
                                   1562 ; output:
                                   1563 ;    A:X     address free
                                   1564 ;-------------------------
      001D57                       1565 func_eefree:
      001D57 AE 40 00         [ 2] 1566 	ldw x,#EEPROM_BASE 
      001D5A 35 08 00 0E      [ 1] 1567 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D5E A3 47 F8         [ 2] 1568     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D61 24 17            [ 1] 1569 	jruge 8$ ; no free space 
      001D63 F6               [ 1] 1570 2$: ld a,(x)
      001D64 26 0C            [ 1] 1571 	jrne 3$
      001D66 5C               [ 1] 1572 	incw x 
      001D67 72 5A 00 0E      [ 1] 1573 	dec acc8 
      001D6B 26 F6            [ 1] 1574 	jrne 2$
      001D6D 1D 00 08         [ 2] 1575 	subw x,#8 
      001D70 20 09            [ 2] 1576 	jra 9$  
      001D72 F6               [ 1] 1577 3$: ld a,(x)
      001D73 5C               [ 1] 1578 	incw x
      001D74 4D               [ 1] 1579 	tnz a  
      001D75 26 FB            [ 1] 1580 	jrne 3$
      001D77 5A               [ 2] 1581 	decw x   
      001D78 20 E0            [ 2] 1582 	jra 1$ 
      001D7A 5F               [ 1] 1583 8$: clrw x ; no free space 
      001D7B 4F               [ 1] 1584 9$: clr a 
      001D7C CF 00 24         [ 2] 1585 	ldw free_eeprom,x ; save in system variable 
      001D7F 81               [ 4] 1586 	ret 
                                   1587 
                           000005  1588 REC_XTRA_BYTES=5 
                                   1589 ;--------------------------
                                   1590 ; search constant/dim_var name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1591 ; format of record  
                                   1592 ;   .byte record length 
                                   1593 ;         = strlen(name)+5 
                                   1594 ;   .asciz name (variable length)
                                   1595 ;   .int24 value (3 bytes )
                                   1596 ; a constant record use 7+ bytes
                                   1597 ; constants are saved in EEPROM  
                                   1598 ; input:
                                   1599 ;    X     *name
                                   1600 ;    Y     search from address 
                                   1601 ; output:
                                   1602 ;    X     address|0
                                   1603 ; use:
                                   1604 ;   A,Y, acc16 
                                   1605 ;-------------------------
                           000001  1606 	NAMEPTR=1 ; target name pointer 
                           000003  1607 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1608 	RECLEN=5  ; record length of target
                           000007  1609 	LIMIT=7   ; search area limit 
                           000008  1610 	VSIZE=8  
      001D80                       1611 search_name:
      001D80                       1612 	_vars VSIZE
      001D80 52 08            [ 2]    1     sub sp,#VSIZE 
      001D82 72 5F 00 0D      [ 1] 1613 	clr acc16 
      001D86 CD 13 86         [ 4] 1614 	call strlen 
      001D89 AB 05            [ 1] 1615 	add a,#REC_XTRA_BYTES
      001D8B 6B 05            [ 1] 1616 	ld (RECLEN,sp),a    
      001D8D 1F 01            [ 2] 1617 	ldw (NAMEPTR,sp),x
      001D8F 90 A3 40 00      [ 2] 1618 	cpw y,#EEPROM_BASE 
      001D93 25 05            [ 1] 1619 	jrult 0$ 
      001D95 CE 00 24         [ 2] 1620 	ldw x,free_eeprom 
      001D98 20 03            [ 2] 1621 	jra 10$ 
      001D9A CE 00 32         [ 2] 1622 0$: ldw x,dvar_end 
      001D9D                       1623 10$: 
      001D9D 1F 07            [ 2] 1624 	ldw (LIMIT,sp),x 
      001D9F 17 03            [ 2] 1625 1$:	ldw (WLKPTR,sp),y
      001DA1 93               [ 1] 1626 	ldw x,y 
      001DA2 13 07            [ 2] 1627 	cpw x, (LIMIT,sp) 
      001DA4 24 1C            [ 1] 1628 	jruge 7$ ; no match found 
      001DA6 90 F6            [ 1] 1629 	ld a,(y)
      001DA8 11 05            [ 1] 1630 	cp a,(RECLEN,sp)
      001DAA 26 09            [ 1] 1631 	jrne 2$ 
      001DAC 90 5C            [ 1] 1632 	incw y 
      001DAE 1E 01            [ 2] 1633 	ldw x,(NAMEPTR,sp)
      001DB0 CD 13 91         [ 4] 1634 	call strcmp
      001DB3 26 11            [ 1] 1635 	jrne 8$ ; match found 
      001DB5                       1636 2$: ; skip this one 	
      001DB5 16 03            [ 2] 1637 	ldW Y,(WLKPTR,sp)
      001DB7 90 F6            [ 1] 1638 	ld a,(y)
      001DB9 C7 00 0E         [ 1] 1639 	ld acc8,a 
      001DBC 72 B9 00 0D      [ 2] 1640 	addw y,acc16 
      001DC0 20 DD            [ 2] 1641 	jra 1$  
      001DC2                       1642 7$: ; no match found 
      001DC2 0F 03            [ 1] 1643 	clr (WLKPTR,sp)
      001DC4 0F 04            [ 1] 1644 	clr (WLKPTR+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001DC6                       1645 8$: ; match found 
      001DC6 1E 03            [ 2] 1646 	ldw x,(WLKPTR,sp) ; record address 
      001DC8                       1647 9$:	_DROP VSIZE
      001DC8 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DCA 81               [ 4] 1648 	 ret 
                                   1649 
                                   1650 
                                   1651 ;--------------------------------------------
                                   1652 ; BASIC: CONST name=value [, name=value]*
                                   1653 ; define constant(s) saved in EEPROM
                                   1654 ;--------------------------------------------
                           000001  1655 	CNAME=1 
                           000003  1656 	BUFPTR=3
                           000005  1657 	RECLEN=5
                           000006  1658 	UPDATE=6
                           000007  1659 	YSAVE=7
                           000008  1660 	VSIZE=8 
      001DCB                       1661 cmd_const:
      001DCB 90 89            [ 2] 1662 	pushw y 
      001DCD                       1663 	_vars VSIZE 
      001DCD 52 08            [ 2]    1     sub sp,#VSIZE 
      001DCF 0F 06            [ 1] 1664 	clr (UPDATE,sp)
      001DD1 CD 17 A6         [ 4] 1665 	call next_token 
      001DD4 A1 04            [ 1] 1666 	cp a,#TK_CHAR 
      001DD6 26 0D            [ 1] 1667 	jrne 0$
      001DD8 CD 17 E8         [ 4] 1668 	call get_char 
      001DDB A4 DF            [ 1] 1669 	and a,#0xDF 
      001DDD A1 55            [ 1] 1670 	cp a,#'U 
      001DDF 26 08            [ 1] 1671 	jrne 1$
      001DE1 03 06            [ 1] 1672 	cpl (UPDATE,sp)
      001DE3 20 07            [ 2] 1673 	jra const_loop 
      001DE5 A1 03            [ 1] 1674 0$: cp a,#TK_LABEL 
      001DE7 27 08            [ 1] 1675 	jreq cloop_1
      001DE9 CC 16 48         [ 2] 1676 1$: jp syntax_error
      001DEC                       1677 const_loop: 
      001DEC A6 03            [ 1] 1678 	ld a,#TK_LABEL 
      001DEE CD 19 5C         [ 4] 1679 	call expect  
      001DF1                       1680 cloop_1: 
      001DF1 1F 01            [ 2] 1681 	ldw (CNAME,sp),x ; *const_name
      001DF3 CD 17 BF         [ 4] 1682 	call skip_string
      001DF6 1E 01            [ 2] 1683 	ldw x,(CNAME,sp)
      001DF8 CD 13 86         [ 4] 1684 	call strlen  
      001DFB AB 05            [ 1] 1685 	add a,#REC_XTRA_BYTES 
      001DFD 6B 05            [ 1] 1686 	ld (RECLEN,sp),a 
                                   1687 ; copy name in buffer  
      001DFF 16 01            [ 2] 1688 	ldw y,(CNAME,sp) 
      001E01 AE 16 90         [ 2] 1689 	ldw x,#tib  
      001E04 7B 05            [ 1] 1690 	ld a,(RECLEN,sp)
      001E06 F7               [ 1] 1691 	ld (x),a 
      001E07 5C               [ 1] 1692 	incw x  
      001E08 CD 13 A2         [ 4] 1693 	call strcpy 
      001E0B 1F 03            [ 2] 1694 	ldw (BUFPTR,sp),x 
                                   1695 ; x not updated by strcpy 
                                   1696 ; BUFPTR must be incremented 
                                   1697 ; to point after name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E0D 5F               [ 1] 1698 	clrw x 
      001E0E 7B 05            [ 1] 1699 	ld a,(RECLEN,sp)
      001E10 A0 04            [ 1] 1700 	sub a,#REC_XTRA_BYTES-1
      001E12 97               [ 1] 1701 	ld xl,a  
      001E13 72 FB 03         [ 2] 1702 	addw x,(BUFPTR,sp)
      001E16 1F 03            [ 2] 1703 	ldw (BUFPTR,sp),x 
      001E18 A6 32            [ 1] 1704 	ld a,#TK_EQUAL 
      001E1A CD 19 5C         [ 4] 1705 	call expect 
      001E1D 16 07            [ 2] 1706 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001E1F CD 1A C1         [ 4] 1707 	call expression 
      001E22 A1 84            [ 1] 1708 	cp a,#TK_INTGR 
      001E24 27 03            [ 1] 1709 	jreq 5$ 
      001E26 CC 16 48         [ 2] 1710 	jp syntax_error 
      001E29                       1711 5$:	_xpop 
      001E29 90 F6            [ 1]    1     ld a,(y)
      001E2B 93               [ 1]    2     ldw x,y 
      001E2C EE 01            [ 2]    3     ldw x,(1,x)
      001E2E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E32 17 07            [ 2] 1712 	ldw (YSAVE,sp),y ; save xtack pointer 
      001E34 16 03            [ 2] 1713 	ldw y,(BUFPTR,sp)
      001E36 90 F7            [ 1] 1714 	ld (y),a 
      001E38 90 EF 01         [ 2] 1715 	ldw (1,y),x 
                                   1716 ; record completed in buffer 
                                   1717 ; check if constant already exist 
                                   1718 ; if exist and \U option then update  
      001E3B 72 5F 00 18      [ 1] 1719 	clr farptr 
      001E3F 1E 01            [ 2] 1720 	ldw x,(CNAME,sp)
      001E41 90 AE 40 00      [ 2] 1721 	ldw y,#EEPROM_BASE
      001E45 CD 1D 80         [ 4] 1722 	call search_name 
      001E48 5D               [ 2] 1723 	tnzw x 
      001E49 27 06            [ 1] 1724 	jreq 6$ ; new constant  
      001E4B 0D 06            [ 1] 1725 	tnz (UPDATE,sp)
      001E4D 27 1F            [ 1] 1726 	jreq 8$ 
      001E4F 20 03            [ 2] 1727 	jra 7$	
      001E51                       1728 6$:	
      001E51 CE 00 24         [ 2] 1729 	ldw x,free_eeprom  
      001E54                       1730 7$:	
      001E54 CF 00 19         [ 2] 1731 	ldw farptr+1,x 
      001E57 AE 16 90         [ 2] 1732 	ldw x,#tib 
      001E5A 7B 05            [ 1] 1733 	ld a,(RECLEN,sp)
      001E5C CD 08 4C         [ 4] 1734 	call write_nbytes
      001E5F 0D 06            [ 1] 1735 	tnz (UPDATE,sp)
      001E61 26 0B            [ 1] 1736 	jrne 8$ ; not a new constant, don't update free_eeprom
                                   1737 ; update free_eeprom 
      001E63 5F               [ 1] 1738 	clrw x 
      001E64 7B 05            [ 1] 1739 	ld a,(RECLEN,sp)
      001E66 97               [ 1] 1740 	ld xl,a 
      001E67 72 BB 00 24      [ 2] 1741 	addw x,free_eeprom 
      001E6B CF 00 24         [ 2] 1742 	ldw free_eeprom,x
      001E6E                       1743 8$: ; check for next constant 
      001E6E CD 17 A6         [ 4] 1744 	call next_token 
      001E71 A1 08            [ 1] 1745 	cp a,#TK_COMMA 
      001E73 26 03            [ 1] 1746 	jrne 9$ ; no other constant 
      001E75 CC 1D EC         [ 2] 1747 	jp const_loop 
      001E78                       1748 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001E78                       1749 	_unget_token    
      001E78 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E7D                       1750 10$: 
      001E7D                       1751 	_drop VSIZE 
      001E7D 5B 08            [ 2]    1     addw sp,#VSIZE 
      001E7F 90 85            [ 2] 1752 	popw y ; restore xstack pointer 
      001E81 81               [ 4] 1753 	ret 
                                   1754 
                                   1755 ;---------------------------------
                                   1756 ; BASIC: DIM var_name [var_name]* 
                                   1757 ; create named variables at end 
                                   1758 ; of BASIC program. 
                                   1759 ; These variables are initialized 
                                   1760 ; to 0. 
                                   1761 ; record format same ast CONST 
                                   1762 ; but r/w because stored in RAM 
                                   1763 ;---------------------------------
                           000001  1764 	VAR_NAME=1 
                           000003  1765 	REC_LEN=3 
                           000004  1766 	VSIZE=4 
      001E82                       1767 cmd_dim:
      001E82 72 00 00 22 05   [ 2] 1768 	btjt flags,#FRUN,cmd_dim1
      001E87 A6 06            [ 1] 1769 	ld a,#ERR_RUN_ONLY
      001E89 CC 16 4A         [ 2] 1770 	jp tb_error 
      001E8C                       1771 cmd_dim1:	
      001E8C 90 89            [ 2] 1772 	pushw y 
      001E8E                       1773 	_vars VSIZE
      001E8E 52 04            [ 2]    1     sub sp,#VSIZE 
      001E90 0F 03            [ 1] 1774 	clr (REC_LEN,sp ) 
      001E92 CD 17 A6         [ 4] 1775 0$:	call next_token 
      001E95 A1 03            [ 1] 1776 	cp a,#TK_LABEL  
      001E97 27 03            [ 1] 1777 	jreq 1$ 
      001E99 CC 16 48         [ 2] 1778 	jp syntax_error 
      001E9C 1F 01            [ 2] 1779 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001E9E CD 13 86         [ 4] 1780 	call strlen 
      001EA1 AB 05            [ 1] 1781 	add a,#REC_XTRA_BYTES
      001EA3 6B 04            [ 1] 1782 	ld (REC_LEN+1,sp),a
      001EA5 CD 17 BF         [ 4] 1783 	call skip_string 
      001EA8 1E 01            [ 2] 1784 	ldw x,(VAR_NAME,sp) 
      001EAA 90 CE 00 30      [ 2] 1785 	ldw y,dvar_bgn 
      001EAE CD 1D 80         [ 4] 1786 	call search_name  
      001EB1 5D               [ 2] 1787 	tnzw x 
      001EB2 26 1B            [ 1] 1788 	jrne 4$ ; already exist 	
      001EB4 CE 00 32         [ 2] 1789 	ldw x,dvar_end 
      001EB7 7B 04            [ 1] 1790 	ld a,(REC_LEN+1,sp)
      001EB9 F7               [ 1] 1791 	ld (x),a 
      001EBA 5C               [ 1] 1792 	incw x 
      001EBB 16 01            [ 2] 1793 	ldw y,(VAR_NAME,sp)
      001EBD CD 13 A2         [ 4] 1794 	call strcpy
      001EC0 5A               [ 2] 1795 	decw x 
      001EC1 72 FB 03         [ 2] 1796 	addw x,(REC_LEN,sp)
      001EC4 CF 00 32         [ 2] 1797 	ldw dvar_end,x 
      001EC7 1D 00 03         [ 2] 1798 	subw x,#CELL_SIZE  
      001ECA 7F               [ 1] 1799 	clr (x)
      001ECB 6F 01            [ 1] 1800 	clr (1,x)  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001ECD 6F 02            [ 1] 1801 	clr (2,x)
      001ECF CD 17 A6         [ 4] 1802 4$: call next_token 
      001ED2 A1 08            [ 1] 1803 	cp a,#TK_COMMA 
      001ED4 27 BC            [ 1] 1804 	jreq 0$ 
      001ED6 A1 32            [ 1] 1805 	cp a,#TK_EQUAL 
      001ED8 26 2A            [ 1] 1806 	jrne 8$
                                   1807 ; initialize variable 
      001EDA CD 1B DA         [ 4] 1808 	call condition 
      001EDD A1 84            [ 1] 1809 	cp a,#TK_INTGR
      001EDF 27 03            [ 1] 1810 	jreq 5$
      001EE1 CC 16 48         [ 2] 1811 	jp syntax_error
      001EE4 CE 00 32         [ 2] 1812 5$: ldw x,dvar_end 
      001EE7 1D 00 03         [ 2] 1813 	subw x,#CELL_SIZE 
      001EEA CF 00 19         [ 2] 1814 	ldw ptr16,x 
      001EED                       1815 	_xpop 
      001EED 90 F6            [ 1]    1     ld a,(y)
      001EEF 93               [ 1]    2     ldw x,y 
      001EF0 EE 01            [ 2]    3     ldw x,(1,x)
      001EF2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EF6 72 C7 00 19      [ 4] 1816 	ld [ptr16],a 
      001EFA 72 5C 00 1A      [ 1] 1817 	inc ptr8 
      001EFE 72 CF 00 19      [ 5] 1818 	ldw [ptr16],x 
      001F02 20 CB            [ 2] 1819 	jra 4$ 
      001F04                       1820 8$:	
      001F04                       1821 	_unget_token 	
      001F04 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F09                       1822 	_drop VSIZE 
      001F09 5B 04            [ 2]    1     addw sp,#VSIZE 
      001F0B CD 1C 8E         [ 4] 1823 	call ubound 
      001F0E 90 85            [ 2] 1824 	popw y 
      001F10 81               [ 4] 1825 	ret 
                                   1826 
                                   1827 
                                   1828 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1829 ; return program size 
                                   1830 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001F11                       1831 prog_size:
      001F11 CE 00 1D         [ 2] 1832 	ldw x,txtend 
      001F14 72 B0 00 1B      [ 2] 1833 	subw x,txtbgn 
      001F18 81               [ 4] 1834 	ret 
                                   1835 
                                   1836 ;----------------------------
                                   1837 ; print program information 
                                   1838 ;---------------------------
      001F19                       1839 program_info: 
      001F19 AE 1F 58         [ 2] 1840 	ldw x,#PROG_ADDR 
      001F1C CD 09 68         [ 4] 1841 	call puts 
      001F1F CE 00 1B         [ 2] 1842 	ldw x,txtbgn 
      001F22 35 10 00 0A      [ 1] 1843 	mov base,#16 
      001F26 CD 17 EE         [ 4] 1844 	call prt_i16
      001F29 35 0A 00 0A      [ 1] 1845 	mov base,#10  
      001F2D AE 1F 6A         [ 2] 1846 	ldw x,#PROG_SIZE
      001F30 CD 09 68         [ 4] 1847 	call puts 
      001F33 CD 1F 11         [ 4] 1848 	call prog_size 
      001F36 CD 17 EE         [ 4] 1849 	call prt_i16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001F39 AE 1F 7B         [ 2] 1850 	ldw x,#STR_BYTES 
      001F3C CD 09 68         [ 4] 1851 	call puts
      001F3F CE 00 1B         [ 2] 1852 	ldw x,txtbgn
      001F42 A3 37 04         [ 2] 1853 	cpw x,#app 
      001F45 25 05            [ 1] 1854 	jrult 2$
      001F47 AE 1F 82         [ 2] 1855 	ldw x,#FLASH_MEM 
      001F4A 20 03            [ 2] 1856 	jra 3$
      001F4C AE 1F 93         [ 2] 1857 2$: ldw x,#RAM_MEM 	 
      001F4F CD 09 68         [ 4] 1858 3$:	call puts 
      001F52 A6 0D            [ 1] 1859 	ld a,#CR 
      001F54 CD 09 0B         [ 4] 1860 	call putc
      001F57 81               [ 4] 1861 	ret 
                                   1862 
      001F58 70 72 6F 67 72 61 6D  1863 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001F6A 2C 20 70 72 6F 67 72  1864 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001F7B 20 62 79 74 65 73 00  1865 STR_BYTES: .asciz " bytes" 
      001F82 20 69 6E 20 46 4C 41  1866 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001F93 20 69 6E 20 52 41 4D  1867 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1868 
                                   1869 
                                   1870 ;----------------------------
                                   1871 ; BASIC: LIST [[start][,end]]
                                   1872 ; list program lines 
                                   1873 ; form start to end 
                                   1874 ; if empty argument list then 
                                   1875 ; list all.
                                   1876 ;----------------------------
                           000001  1877 	FIRST=1
                           000003  1878 	LAST=3 
                           000005  1879 	LN_PTR=5
                           000006  1880 	VSIZE=6 
      001FA2                       1881 list:
      001FA2 72 01 00 22 05   [ 2] 1882 	btjf flags,#FRUN,0$
      001FA7 A6 07            [ 1] 1883 	ld a,#ERR_CMD_ONLY
      001FA9 CC 16 4A         [ 2] 1884 	jp tb_error
      001FAC                       1885 0$:	 
      001FAC CD 17 A6         [ 4] 1886 	call next_token 
      001FAF A1 04            [ 1] 1887 	cp a,#TK_CHAR 
      001FB1 26 10            [ 1] 1888 	jrne 2$
      001FB3 CD 17 E8         [ 4] 1889 	call get_char 
      001FB6 A4 DF            [ 1] 1890 	and a,#0xDF 
      001FB8 A1 43            [ 1] 1891 	cp a,#'C 
      001FBA 26 04            [ 1] 1892 	jrne 1$
      001FBC CD 1C EB         [ 4] 1893 	call list_const
      001FBF 81               [ 4] 1894 	ret 
      001FC0 CC 16 48         [ 2] 1895 1$: jp syntax_error 
      001FC3                       1896 2$:	_unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      001FC3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FC8 CD 1F 11         [ 4] 1897 	call prog_size 
      001FCB 22 01            [ 1] 1898 	jrugt 3$
      001FCD 81               [ 4] 1899 	ret 
      001FCE                       1900 3$: _vars VSIZE
      001FCE 52 06            [ 2]    1     sub sp,#VSIZE 
      001FD0 CE 00 1B         [ 2] 1901 	ldw x,txtbgn 
      001FD3 1F 05            [ 2] 1902 	ldw (LN_PTR,sp),x 
      001FD5 FE               [ 2] 1903 	ldw x,(x) 
      001FD6 1F 01            [ 2] 1904 	ldw (FIRST,sp),x ; list from first line 
      001FD8 AE 7F FF         [ 2] 1905 	ldw x,#MAX_LINENO ; biggest line number 
      001FDB 1F 03            [ 2] 1906 	ldw (LAST,sp),x 
      001FDD CD 19 6E         [ 4] 1907 	call arg_list
      001FE0 4D               [ 1] 1908 	tnz a
      001FE1 27 31            [ 1] 1909 	jreq list_loop 
      001FE3 A1 02            [ 1] 1910 	cp a,#2 
      001FE5 27 07            [ 1] 1911 	jreq 4$
      001FE7 A1 01            [ 1] 1912 	cp a,#1 
      001FE9 27 06            [ 1] 1913 	jreq first_line 
      001FEB CC 16 48         [ 2] 1914 	jp syntax_error 
      001FEE 85               [ 2] 1915 4$:	popw x 
      001FEF 1F 05            [ 2] 1916 	ldw (LAST+2,sp),x 
      001FF1                       1917 first_line:
      001FF1 85               [ 2] 1918 	popw x
      001FF2 1F 01            [ 2] 1919 	ldw (FIRST,sp),x 
      001FF4                       1920 lines_skip:
      001FF4 CE 00 1B         [ 2] 1921 	ldw x,txtbgn
      001FF7 1F 05            [ 2] 1922 2$:	ldw (LN_PTR,sp),x 
      001FF9 C3 00 1D         [ 2] 1923 	cpw x,txtend 
      001FFC 2A 38            [ 1] 1924 	jrpl list_exit 
      001FFE FE               [ 2] 1925 	ldw x,(x) ;line# 
      001FFF 13 01            [ 2] 1926 	cpw x,(FIRST,sp)
      002001 2A 11            [ 1] 1927 	jrpl list_loop 
      002003 1E 05            [ 2] 1928 	ldw x,(LN_PTR,sp) 
      002005 E6 02            [ 1] 1929 	ld a,(2,x)
      002007 C7 00 0E         [ 1] 1930 	ld acc8,a 
      00200A 72 5F 00 0D      [ 1] 1931 	clr acc16 
      00200E 72 BB 00 0D      [ 2] 1932 	addw x,acc16
      002012 20 E3            [ 2] 1933 	jra 2$ 
                                   1934 ; print loop
      002014                       1935 list_loop:
      002014 1E 05            [ 2] 1936 	ldw x,(LN_PTR,sp)
      002016 E6 02            [ 1] 1937 	ld a,(2,x) 
      002018 CD 20 8B         [ 4] 1938 	call prt_basic_line
      00201B 1E 05            [ 2] 1939 	ldw x,(LN_PTR,sp)
      00201D E6 02            [ 1] 1940 	ld a,(2,x)
      00201F C7 00 0E         [ 1] 1941 	ld acc8,a 
      002022 72 5F 00 0D      [ 1] 1942 	clr acc16 
      002026 72 BB 00 0D      [ 2] 1943 	addw x,acc16
      00202A C3 00 1D         [ 2] 1944 	cpw x,txtend 
      00202D 2A 07            [ 1] 1945 	jrpl list_exit
      00202F 1F 05            [ 2] 1946 	ldw (LN_PTR,sp),x
      002031 FE               [ 2] 1947 	ldw x,(x)
      002032 13 03            [ 2] 1948 	cpw x,(LAST,sp)  
      002034 2F DE            [ 1] 1949 	jrslt list_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002036                       1950 list_exit:
      002036 55 00 03 00 01   [ 1] 1951 	mov in,count 
      00203B AE 16 E0         [ 2] 1952 	ldw x,#pad 
      00203E CF 00 04         [ 2] 1953 	ldw basicptr,x 
      002041                       1954 	_drop VSIZE 
      002041 5B 06            [ 2]    1     addw sp,#VSIZE 
      002043 CD 1F 19         [ 4] 1955 	call program_info 
      002046 81               [ 4] 1956 	ret
                                   1957 
                                   1958 
                                   1959 ;--------------------------
                                   1960 ; BASIC: EDIT 
                                   1961 ;  copy program in FLASH 
                                   1962 ;  to RAM for edition 
                                   1963 ;-------------------------
      002047                       1964 edit:
      002047 CD 28 97         [ 4] 1965 	call qsign 
      00204A 27 07            [ 1] 1966 	jreq 1$ 
      00204C AE 20 74         [ 2] 1967 	ldw x,#NOT_SAVED 
      00204F CD 09 68         [ 4] 1968 	call puts 
      002052 81               [ 4] 1969 	ret 
      002053                       1970 1$: 
      002053 90 AE 37 00      [ 2] 1971 	ldw y,#app_sign ; source address 
      002057 CE 37 02         [ 2] 1972     ldw x,app_size  
      00205A 1C 00 04         [ 2] 1973 	addw x,#4 
      00205D CF 00 0D         [ 2] 1974 	ldw acc16,x  ; bytes to copy 
      002060 AE 00 8C         [ 2] 1975 	ldw x,#rsign ; destination address 
      002063 CD 13 B2         [ 4] 1976 	call move  
      002066 AE 00 90         [ 2] 1977 	ldw x,#free_ram 
      002069 CF 00 1B         [ 2] 1978 	ldw txtbgn,x 
      00206C 72 BB 00 8E      [ 2] 1979 	addw x,rsize  
      002070 CF 00 1D         [ 2] 1980 	ldw txtend,x 
      002073 81               [ 4] 1981 	ret 
                                   1982 
      002074 4E 6F 20 61 70 70 6C  1983 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1984 
                                   1985 
                                   1986 ;--------------------------
                                   1987 ; decompile line from token list
                                   1988 ; and print it. 
                                   1989 ; input:
                                   1990 ;   A       stop at this position 
                                   1991 ;   X 		pointer at line
                                   1992 ; output:
                                   1993 ;   none 
                                   1994 ;--------------------------	
      00208B                       1995 prt_basic_line:
      00208B 90 89            [ 2] 1996 	pushw y 
      00208D C7 00 03         [ 1] 1997 	ld count,a 
      002090 E6 02            [ 1] 1998 	ld a,(2,x)
      002092 C1 00 03         [ 1] 1999 	cp a,count 
      002095 2A 03            [ 1] 2000 	jrpl 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002097 C7 00 03         [ 1] 2001 	ld count,a 
      00209A CF 00 04         [ 2] 2002 1$:	ldw basicptr,x 
      00209D 90 AE 16 90      [ 2] 2003 	ldw y,#tib  
      0020A1 CD 11 A2         [ 4] 2004 	call decompile 
      0020A4 CD 09 68         [ 4] 2005 	call puts 
      0020A7 A6 0D            [ 1] 2006 	ld a,#CR 
      0020A9 CD 09 0B         [ 4] 2007 	call putc 
      0020AC 90 85            [ 2] 2008 	popw y 
      0020AE 81               [ 4] 2009 	ret 
                                   2010 
                                   2011 
                                   2012 ;---------------------------------
                                   2013 ; BASIC: PRINT|? arg_list 
                                   2014 ; print values from argument list
                                   2015 ;----------------------------------
                           000001  2016 	CCOMMA=1
                           000001  2017 	VSIZE=1
      0020AF                       2018 print:
      0020AF                       2019 	_vars VSIZE 
      0020AF 52 01            [ 2]    1     sub sp,#VSIZE 
      0020B1                       2020 reset_comma:
      0020B1 0F 01            [ 1] 2021 	clr (CCOMMA,sp)
      0020B3                       2022 prt_loop:
      0020B3 CD 17 A6         [ 4] 2023 	call next_token
      0020B6 A1 02            [ 1] 2024 	cp a,#CMD_END 
      0020B8 25 08            [ 1] 2025 	jrult 0$
      0020BA A1 0A            [ 1] 2026 	cp a,#TK_COLON 
      0020BC 27 04            [ 1] 2027 	jreq 0$
      0020BE A1 80            [ 1] 2028 	cp a,#TK_CMD
      0020C0 26 07            [ 1] 2029 	jrne 10$
      0020C2                       2030 0$:
      0020C2                       2031 	_unget_token 
      0020C2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0020C7 20 63            [ 2] 2032 	jra 8$ 
      0020C9                       2033 10$:	
      0020C9 A1 02            [ 1] 2034 	cp a,#TK_QSTR
      0020CB 27 12            [ 1] 2035 	jreq 1$
      0020CD A1 04            [ 1] 2036 	cp a,#TK_CHAR 
      0020CF 27 1B            [ 1] 2037 	jreq 2$ 
      0020D1 A1 82            [ 1] 2038 	cp a,#TK_CFUNC 
      0020D3 27 1F            [ 1] 2039 	jreq 3$
      0020D5 A1 08            [ 1] 2040 	cp a,#TK_COMMA 
      0020D7 27 2A            [ 1] 2041 	jreq 4$
      0020D9 A1 09            [ 1] 2042 	cp a,#TK_SHARP 
      0020DB 27 2A            [ 1] 2043 	jreq 5$
      0020DD 20 3D            [ 2] 2044 	jra 7$ 
      0020DF                       2045 1$:	; print string 
      0020DF CD 09 68         [ 4] 2046 	call puts
      0020E2 5C               [ 1] 2047 	incw x
      0020E3 72 B0 00 04      [ 2] 2048 	subw x,basicptr 
      0020E7 CF 00 00         [ 2] 2049 	ldw in.w,x  
      0020EA 20 C5            [ 2] 2050 	jra reset_comma
      0020EC                       2051 2$:	; print character 
      0020EC CD 17 E8         [ 4] 2052 	call get_char 
      0020EF CD 09 0B         [ 4] 2053 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0020F2 20 BD            [ 2] 2054 	jra reset_comma 
      0020F4                       2055 3$: ; print character function value  	
      0020F4                       2056 	_get_code_addr 
      0020F4 FE               [ 2]    1         ldw x,(x)
      0020F5 72 5C 00 01      [ 1]    2         inc in 
      0020F9 72 5C 00 01      [ 1]    3         inc in 
      0020FD FD               [ 4] 2057 	call (x)
      0020FE CD 09 0B         [ 4] 2058 	call putc
      002101 20 AE            [ 2] 2059 	jra reset_comma 
      002103                       2060 4$: ; set comma state 
      002103 03 01            [ 1] 2061 	cpl (CCOMMA,sp)
      002105 20 AC            [ 2] 2062 	jra prt_loop   
      002107                       2063 5$: ; # character must be followed by an integer   
      002107 CD 17 A6         [ 4] 2064 	call next_token
      00210A A1 84            [ 1] 2065 	cp a,#TK_INTGR 
      00210C 27 03            [ 1] 2066 	jreq 6$
      00210E CC 16 48         [ 2] 2067 	jp syntax_error 
      002111                       2068 6$: ; set tab width
      002111 CD 17 D8         [ 4] 2069 	call get_int24 
      002114 9F               [ 1] 2070 	ld a,xl 
      002115 A4 0F            [ 1] 2071 	and a,#15 
      002117 C7 00 23         [ 1] 2072 	ld tab_width,a 
      00211A 20 95            [ 2] 2073 	jra reset_comma 
      00211C                       2074 7$:	
      00211C                       2075 	_unget_token 
      00211C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002121 CD 1B DA         [ 4] 2076 	call condition
      002124 4D               [ 1] 2077 	tnz a 
      002125 27 05            [ 1] 2078 	jreq 8$    
      002127 CD 18 13         [ 4] 2079     call print_top
      00212A 20 85            [ 2] 2080 	jra reset_comma 
      00212C                       2081 8$:
      00212C 0D 01            [ 1] 2082 	tnz (CCOMMA,sp)
      00212E 26 05            [ 1] 2083 	jrne 9$
      002130 A6 0D            [ 1] 2084 	ld a,#CR 
      002132 CD 09 0B         [ 4] 2085     call putc 
      002135                       2086 9$:	_drop VSIZE 
      002135 5B 01            [ 2]    1     addw sp,#VSIZE 
      002137 81               [ 4] 2087 	ret 
                                   2088 
                                   2089 ;----------------------
                                   2090 ; 'save_context' and
                                   2091 ; 'rest_context' must be 
                                   2092 ; called at the same 
                                   2093 ; call stack depth 
                                   2094 ; i.e. SP must have the 
                                   2095 ; save value at  
                                   2096 ; entry point of both 
                                   2097 ; routine. 
                                   2098 ;---------------------
                           000004  2099 	CTXT_SIZE=4 ; size of saved data 
                                   2100 ;--------------------
                                   2101 ; save current BASIC
                                   2102 ; interpreter context 
                                   2103 ; on stack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2104 ;--------------------
      002138                       2105 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      002138                       2106 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      002138                       2107 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      002138                       2108 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      002138                       2109 save_context:
      002138 CE 00 04         [ 2] 2110 	ldw x,basicptr 
      00213B 1F 03            [ 2] 2111 	ldw (BPTR,sp),x
      00213D C6 00 01         [ 1] 2112 	ld a,in 
      002140 6B 05            [ 1] 2113 	ld (IN,sp),a
      002142 C6 00 03         [ 1] 2114 	ld a,count 
      002145 6B 06            [ 1] 2115 	ld (CNT,sp),a  
      002147 81               [ 4] 2116 	ret
                                   2117 
                                   2118 ;-----------------------
                                   2119 ; restore previously saved 
                                   2120 ; BASIC interpreter context 
                                   2121 ; from stack 
                                   2122 ;-------------------------
      002148                       2123 rest_context:
      002148 1E 03            [ 2] 2124 	ldw x,(BPTR,sp)
      00214A CF 00 04         [ 2] 2125 	ldw basicptr,x 
      00214D 7B 05            [ 1] 2126 	ld a,(IN,sp)
      00214F C7 00 01         [ 1] 2127 	ld in,a
      002152 7B 06            [ 1] 2128 	ld a,(CNT,sp)
      002154 C7 00 03         [ 1] 2129 	ld count,a  
      002157 81               [ 4] 2130 	ret
                                   2131 
                                   2132 
                                   2133 
                                   2134 ;------------------------------------------
                                   2135 ; BASIC: INPUT [string]var[,[string]var]
                                   2136 ; input value in variables 
                                   2137 ; [string] optionally can be used as prompt 
                                   2138 ;-----------------------------------------
                           000001  2139 	CX_BPTR=1
                           000003  2140 	CX_IN=3
                           000004  2141 	CX_CNT=4
                           000005  2142 	SKIP=5
                           000005  2143 	VSIZE=5
      002158                       2144 input_var:
      002158 90 89            [ 2] 2145 	pushw y 
      00215A                       2146 	_vars VSIZE 
      00215A 52 05            [ 2]    1     sub sp,#VSIZE 
      00215C                       2147 input_loop:
      00215C 0F 05            [ 1] 2148 	clr (SKIP,sp)
      00215E CD 17 A6         [ 4] 2149 	call next_token 
      002161 A1 02            [ 1] 2150 	cp a,#TK_QSTR 
      002163 26 10            [ 1] 2151 	jrne 1$ 
      002165 CD 09 68         [ 4] 2152 	call puts 
      002168 5C               [ 1] 2153 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002169 72 B0 00 04      [ 2] 2154 	subw x,basicptr 
      00216D CF 00 00         [ 2] 2155 	ldw in.w,x 
      002170 03 05            [ 1] 2156 	cpl (SKIP,sp)
      002172 CD 17 A6         [ 4] 2157 	call next_token 
      002175 A1 85            [ 1] 2158 1$: cp a,#TK_VAR  
      002177 27 03            [ 1] 2159 	jreq 2$ 
      002179 CC 16 48         [ 2] 2160 	jp syntax_error
      00217C CD 17 CE         [ 4] 2161 2$:	call get_addr
      00217F CF 00 19         [ 2] 2162 	ldw ptr16,x 
      002182 0D 05            [ 1] 2163 	tnz (SKIP,sp)
      002184 26 06            [ 1] 2164 	jrne 21$ 
      002186 CD 11 98         [ 4] 2165 	call var_name 
      002189 CD 09 0B         [ 4] 2166 	call putc   
      00218C                       2167 21$:
      00218C A6 3A            [ 1] 2168 	ld a,#':
      00218E CD 09 0B         [ 4] 2169 	call putc 
      002191 CD 21 38         [ 4] 2170 	call save_context 
      002194 72 5F 00 03      [ 1] 2171 	clr count  
      002198 CD 0A 6D         [ 4] 2172 	call readln 
      00219B AE 16 90         [ 2] 2173 	ldw x,#tib 
      00219E 3B 00 03         [ 1] 2174 	push count
      0021A1 4B 00            [ 1] 2175 	push #0 
      0021A3 72 FB 01         [ 2] 2176 	addw x,(1,sp)
      0021A6 5C               [ 1] 2177 	incw x 
      0021A7                       2178 	_drop 2 
      0021A7 5B 02            [ 2]    1     addw sp,#2 
      0021A9 72 5F 00 01      [ 1] 2179 	clr in 
      0021AD CD 0E E2         [ 4] 2180 	call get_token
      0021B0 A1 84            [ 1] 2181 	cp a,#TK_INTGR
      0021B2 27 14            [ 1] 2182 	jreq 3$ 
      0021B4 A1 11            [ 1] 2183 	cp a,#TK_MINUS
      0021B6 26 07            [ 1] 2184 	jrne 22$
      0021B8 CD 0E E2         [ 4] 2185 	call get_token 
      0021BB A1 84            [ 1] 2186 	cp a,#TK_INTGR 
      0021BD 27 06            [ 1] 2187 	jreq 23$
      0021BF                       2188 22$:
      0021BF CD 21 48         [ 4] 2189 	call rest_context 
      0021C2 CC 16 48         [ 2] 2190 	jp syntax_error
      0021C5                       2191 23$:
      0021C5 CD 02 18         [ 4] 2192 	call neg_acc24	
      0021C8                       2193 3$: 
      0021C8 C6 00 0C         [ 1] 2194 	ld a,acc24 
      0021CB CE 00 0D         [ 2] 2195 	ldw x,acc16 
      0021CE 72 C7 00 19      [ 4] 2196 	ld [ptr16],a
      0021D2 72 5C 00 1A      [ 1] 2197 	inc ptr8  
      0021D6 72 CF 00 19      [ 5] 2198 	ldw [ptr16],x 
      0021DA CD 21 48         [ 4] 2199 	call rest_context
      0021DD CD 17 A6         [ 4] 2200 	call next_token 
      0021E0 A1 08            [ 1] 2201 	cp a,#TK_COMMA
      0021E2 26 03            [ 1] 2202 	jrne 4$ 
      0021E4 CC 21 5C         [ 2] 2203 	jp input_loop
      0021E7                       2204 4$:
      0021E7 A1 00            [ 1] 2205 	cp a,#TK_NONE 
      0021E9 27 07            [ 1] 2206 	jreq input_exit  
      0021EB A1 0A            [ 1] 2207 	cp a,#TK_COLON 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021ED 27 03            [ 1] 2208     jreq input_exit 
      0021EF CC 16 48         [ 2] 2209 	jp syntax_error 
      0021F2                       2210 input_exit:
      0021F2                       2211 	_drop VSIZE 
      0021F2 5B 05            [ 2]    1     addw sp,#VSIZE 
      0021F4 90 85            [ 2] 2212 	popw y 
      0021F6 81               [ 4] 2213 	ret 
                                   2214 
                                   2215 
                                   2216 ;---------------------
                                   2217 ; BASIC: REM | ' 
                                   2218 ; skip comment to end of line 
                                   2219 ;---------------------- 
      0021F7                       2220 remark::
      0021F7 55 00 03 00 01   [ 1] 2221 	mov in,count 
      0021FC 81               [ 4] 2222  	ret 
                                   2223 
                                   2224 
                                   2225 ;---------------------
                                   2226 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2227 ; read in loop 'addr'  
                                   2228 ; apply & 'mask' to value 
                                   2229 ; loop while result==0.  
                                   2230 ; 'xor_mask' is used to 
                                   2231 ; invert the wait logic.
                                   2232 ; i.e. loop while not 0.
                                   2233 ;---------------------
                           000001  2234 	XMASK=1 
                           000002  2235 	MASK=2
                           000003  2236 	ADDR=3
                           000004  2237 	VSIZE=4
      0021FD                       2238 wait: 
      0021FD                       2239 	_vars VSIZE
      0021FD 52 04            [ 2]    1     sub sp,#VSIZE 
      0021FF 0F 01            [ 1] 2240 	clr (XMASK,sp) 
      002201 CD 19 6E         [ 4] 2241 	call arg_list 
      002204 A1 02            [ 1] 2242 	cp a,#2
      002206 24 03            [ 1] 2243 	jruge 0$
      002208 CC 16 48         [ 2] 2244 	jp syntax_error 
      00220B A1 03            [ 1] 2245 0$:	cp a,#3
      00220D 25 0C            [ 1] 2246 	jrult 1$
      00220F                       2247 	_xpop  ; xor mask 
      00220F 90 F6            [ 1]    1     ld a,(y)
      002211 93               [ 1]    2     ldw x,y 
      002212 EE 01            [ 2]    3     ldw x,(1,x)
      002214 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002218 9F               [ 1] 2248 	ld a,xl 
      002219 6B 01            [ 1] 2249 	ld (XMASK,sp),a 
      00221B                       2250 1$: _xpop ; mask
      00221B 90 F6            [ 1]    1     ld a,(y)
      00221D 93               [ 1]    2     ldw x,y 
      00221E EE 01            [ 2]    3     ldw x,(1,x)
      002220 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002224 9F               [ 1] 2251     ld a,xl  
      002225 6B 02            [ 1] 2252 	ld (MASK,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002227                       2253 	_xpop ; address 
      002227 90 F6            [ 1]    1     ld a,(y)
      002229 93               [ 1]    2     ldw x,y 
      00222A EE 01            [ 2]    3     ldw x,(1,x)
      00222C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002230 F6               [ 1] 2254 2$:	ld a,(x)
      002231 14 02            [ 1] 2255 	and a,(MASK,sp)
      002233 18 01            [ 1] 2256 	xor a,(XMASK,sp)
      002235 27 F9            [ 1] 2257 	jreq 2$ 
      002237                       2258 	_drop VSIZE 
      002237 5B 04            [ 2]    1     addw sp,#VSIZE 
      002239 81               [ 4] 2259 	ret 
                                   2260 
                                   2261 ;---------------------
                                   2262 ; BASIC: BSET addr,mask
                                   2263 ; set bits at 'addr' corresponding 
                                   2264 ; to those of 'mask' that are at 1.
                                   2265 ; arguments:
                                   2266 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2267 ;   mask        mask|addr
                                   2268 ; output:
                                   2269 ;	none 
                                   2270 ;--------------------------
      00223A                       2271 bit_set:
      00223A CD 19 6E         [ 4] 2272 	call arg_list 
      00223D A1 02            [ 1] 2273 	cp a,#2	 
      00223F 27 03            [ 1] 2274 	jreq 1$ 
      002241 CC 16 48         [ 2] 2275 	jp syntax_error
      002244                       2276 1$: 
      002244                       2277 	_xpop ; mask 
      002244 90 F6            [ 1]    1     ld a,(y)
      002246 93               [ 1]    2     ldw x,y 
      002247 EE 01            [ 2]    3     ldw x,(1,x)
      002249 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00224D 9F               [ 1] 2278 	ld a,xl
      00224E 88               [ 1] 2279 	push a  
      00224F                       2280 	_xpop ; addr  
      00224F 90 F6            [ 1]    1     ld a,(y)
      002251 93               [ 1]    2     ldw x,y 
      002252 EE 01            [ 2]    3     ldw x,(1,x)
      002254 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002258 84               [ 1] 2281 	pop a 
      002259 FA               [ 1] 2282 	or a,(x)
      00225A F7               [ 1] 2283 	ld (x),a
      00225B 81               [ 4] 2284 	ret 
                                   2285 
                                   2286 ;---------------------
                                   2287 ; BASIC: BRES addr,mask
                                   2288 ; reset bits at 'addr' corresponding 
                                   2289 ; to those of 'mask' that are at 1.
                                   2290 ; arguments:
                                   2291 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2292 ;   mask	    ~mask&*addr  
                                   2293 ; output:
                                   2294 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   2295 ;--------------------------
      00225C                       2296 bit_reset:
      00225C CD 19 6E         [ 4] 2297 	call arg_list 
      00225F A1 02            [ 1] 2298 	cp a,#2  
      002261 27 03            [ 1] 2299 	jreq 1$ 
      002263 CC 16 48         [ 2] 2300 	jp syntax_error
      002266                       2301 1$: 
      002266                       2302 	_xpop ; mask 
      002266 90 F6            [ 1]    1     ld a,(y)
      002268 93               [ 1]    2     ldw x,y 
      002269 EE 01            [ 2]    3     ldw x,(1,x)
      00226B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00226F 9F               [ 1] 2303 	ld a,xl 
      002270 43               [ 1] 2304 	cpl a
      002271 88               [ 1] 2305 	push a  
      002272                       2306 	_xpop ; addr  
      002272 90 F6            [ 1]    1     ld a,(y)
      002274 93               [ 1]    2     ldw x,y 
      002275 EE 01            [ 2]    3     ldw x,(1,x)
      002277 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00227B 84               [ 1] 2307 	pop a 
      00227C F4               [ 1] 2308 	and a,(x)
      00227D F7               [ 1] 2309 	ld (x),a 
      00227E 81               [ 4] 2310 	ret 
                                   2311 
                                   2312 ;---------------------
                                   2313 ; BASIC: BTOGL addr,mask
                                   2314 ; toggle bits at 'addr' corresponding 
                                   2315 ; to those of 'mask' that are at 1.
                                   2316 ; arguments:
                                   2317 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2318 ;   mask	    mask^*addr  
                                   2319 ; output:
                                   2320 ;	none 
                                   2321 ;--------------------------
      00227F                       2322 bit_toggle:
      00227F CD 19 6E         [ 4] 2323 	call arg_list 
      002282 A1 02            [ 1] 2324 	cp a,#2 
      002284 27 03            [ 1] 2325 	jreq 1$ 
      002286 CC 16 48         [ 2] 2326 	jp syntax_error
      002289                       2327 1$: _xpop ; mask 
      002289 90 F6            [ 1]    1     ld a,(y)
      00228B 93               [ 1]    2     ldw x,y 
      00228C EE 01            [ 2]    3     ldw x,(1,x)
      00228E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002292 9F               [ 1] 2328 	ld a,xl
      002293 88               [ 1] 2329 	push a 
      002294                       2330 	_xpop  ; addr  
      002294 90 F6            [ 1]    1     ld a,(y)
      002296 93               [ 1]    2     ldw x,y 
      002297 EE 01            [ 2]    3     ldw x,(1,x)
      002299 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00229D 84               [ 1] 2331 	pop a 
      00229E F8               [ 1] 2332 	xor a,(x)
      00229F F7               [ 1] 2333 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0022A0 81               [ 4] 2334 	ret 
                                   2335 
                                   2336 
                                   2337 ;---------------------
                                   2338 ; BASIC: BTEST(addr,bit)
                                   2339 ; return bit value at 'addr' 
                                   2340 ; bit is in range {0..7}.
                                   2341 ; arguments:
                                   2342 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2343 ;   bit 	    bit position {0..7}  
                                   2344 ; output:
                                   2345 ;	A:X       bit value  
                                   2346 ;--------------------------
      0022A1                       2347 bit_test:
      0022A1 CD 19 69         [ 4] 2348 	call func_args 
      0022A4 A1 02            [ 1] 2349 	cp a,#2
      0022A6 27 03            [ 1] 2350 	jreq 0$
      0022A8 CC 16 48         [ 2] 2351 	jp syntax_error
      0022AB                       2352 0$:	
      0022AB                       2353 	_xpop 
      0022AB 90 F6            [ 1]    1     ld a,(y)
      0022AD 93               [ 1]    2     ldw x,y 
      0022AE EE 01            [ 2]    3     ldw x,(1,x)
      0022B0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022B4 9F               [ 1] 2354 	ld a,xl 
      0022B5 A4 07            [ 1] 2355 	and a,#7
      0022B7 88               [ 1] 2356 	push a   
      0022B8 A6 01            [ 1] 2357 	ld a,#1 
      0022BA 0D 01            [ 1] 2358 1$: tnz (1,sp)
      0022BC 27 05            [ 1] 2359 	jreq 2$
      0022BE 48               [ 1] 2360 	sll a 
      0022BF 0A 01            [ 1] 2361 	dec (1,sp)
      0022C1 20 F7            [ 2] 2362 	jra 1$
      0022C3 6B 01            [ 1] 2363 2$: ld (1,sp),a  
      0022C5                       2364 	_xpop ; address  
      0022C5 90 F6            [ 1]    1     ld a,(y)
      0022C7 93               [ 1]    2     ldw x,y 
      0022C8 EE 01            [ 2]    3     ldw x,(1,x)
      0022CA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022CE 84               [ 1] 2365 	pop a 
      0022CF F4               [ 1] 2366 	and a,(x)
      0022D0 27 02            [ 1] 2367 	jreq 3$
      0022D2 A6 01            [ 1] 2368 	ld a,#1 
      0022D4 5F               [ 1] 2369 3$:	clrw x 
      0022D5 97               [ 1] 2370 	ld xl,a
      0022D6 4F               [ 1] 2371 	clr a  
      0022D7 81               [ 4] 2372 	ret
                                   2373 
                                   2374 ;--------------------
                                   2375 ; BASIC: POKE addr,byte
                                   2376 ; put a byte at addr 
                                   2377 ;--------------------
      0022D8                       2378 poke:
      0022D8 CD 19 6E         [ 4] 2379 	call arg_list 
      0022DB A1 02            [ 1] 2380 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      0022DD 27 03            [ 1] 2381 	jreq 1$
      0022DF CC 16 48         [ 2] 2382 	jp syntax_error
      0022E2                       2383 1$:	
      0022E2                       2384 	_xpop ; byte   
      0022E2 90 F6            [ 1]    1     ld a,(y)
      0022E4 93               [ 1]    2     ldw x,y 
      0022E5 EE 01            [ 2]    3     ldw x,(1,x)
      0022E7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022EB 9F               [ 1] 2385     ld a,xl 
      0022EC 88               [ 1] 2386 	push a 
      0022ED                       2387 	_xpop ; address 
      0022ED 90 F6            [ 1]    1     ld a,(y)
      0022EF 93               [ 1]    2     ldw x,y 
      0022F0 EE 01            [ 2]    3     ldw x,(1,x)
      0022F2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022F6 84               [ 1] 2388 	pop a 
      0022F7 F7               [ 1] 2389 	ld (x),a 
      0022F8 81               [ 4] 2390 	ret 
                                   2391 
                                   2392 ;-----------------------
                                   2393 ; BASIC: PEEK(addr)
                                   2394 ; get the byte at addr 
                                   2395 ; input:
                                   2396 ;	none 
                                   2397 ; output:
                                   2398 ;	X 		value 
                                   2399 ;-----------------------
      0022F9                       2400 peek:
      0022F9 CD 19 69         [ 4] 2401 	call func_args
      0022FC A1 01            [ 1] 2402 	cp a,#1 
      0022FE 27 03            [ 1] 2403 	jreq 1$
      002300 CC 16 48         [ 2] 2404 	jp syntax_error
      002303                       2405 1$: _xpop ; address  
      002303 90 F6            [ 1]    1     ld a,(y)
      002305 93               [ 1]    2     ldw x,y 
      002306 EE 01            [ 2]    3     ldw x,(1,x)
      002308 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00230C C7 00 18         [ 1] 2406 	ld farptr,a 
      00230F CF 00 19         [ 2] 2407 	ldw ptr16,x 
      002312 92 BC 00 18      [ 5] 2408 	ldf a,[farptr]
      002316 5F               [ 1] 2409 	clrw x 
      002317 97               [ 1] 2410 	ld xl,a 
      002318 4F               [ 1] 2411 	clr a 
      002319 81               [ 4] 2412 	ret 
                                   2413 
                                   2414 ;---------------------------
                                   2415 ; BASIC IF expr : instructions
                                   2416 ; evaluate expr and if true 
                                   2417 ; execute instructions on same line. 
                                   2418 ;----------------------------
      00231A                       2419 if: 
      00231A CD 1B DA         [ 4] 2420 	call condition  
      00231D                       2421 	_xpop 
      00231D 90 F6            [ 1]    1     ld a,(y)
      00231F 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002320 EE 01            [ 2]    3     ldw x,(1,x)
      002322 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002326 4D               [ 1] 2422 	tnz  a  
      002327 26 0D            [ 1] 2423 	jrne 9$
      002329 5D               [ 2] 2424 	tnzw x 
      00232A 26 0A            [ 1] 2425 	jrne 9$  
                                   2426 ;skip to next line
      00232C 55 00 03 00 01   [ 1] 2427 	mov in,count
      002331                       2428 	_drop 2 
      002331 5B 02            [ 2]    1     addw sp,#2 
      002333 CC 16 FB         [ 2] 2429 	jp next_line
      002336 81               [ 4] 2430 9$:	ret 
                                   2431 
                                   2432 ;------------------------
                                   2433 ; BASIC: FOR var=expr 
                                   2434 ; set variable to expression 
                                   2435 ; leave variable address 
                                   2436 ; on stack and set
                                   2437 ; FLOOP bit in 'flags'
                                   2438 ;-----------------
                           000001  2439 	RETL1=1 ; return address  
                           000003  2440 	FSTEP=3  ; variable increment int24
                           000006  2441 	LIMIT=6 ; loop limit, int24  
                           000009  2442 	CVAR=9   ; control variable 
                           00000B  2443 	INW=11   ;  in.w saved
                           00000D  2444 	BPTR=13 ; baseptr saved
                           00000D  2445 	VSIZE=13  
      002337                       2446 for: ; { -- var_addr }
      002337 85               [ 2] 2447 	popw x ; call return address 
      002338                       2448 	_vars VSIZE 
      002338 52 0D            [ 2]    1     sub sp,#VSIZE 
      00233A 89               [ 2] 2449 	pushw x  ; RETL1 
      00233B A6 85            [ 1] 2450 	ld a,#TK_VAR 
      00233D CD 19 5C         [ 4] 2451 	call expect
      002340 CD 17 CE         [ 4] 2452 	call get_addr
      002343 1F 09            [ 2] 2453 	ldw (CVAR,sp),x  ; control variable 
      002345 CD 1C AF         [ 4] 2454 	call let_eval 
      002348 72 14 00 22      [ 1] 2455 	bset flags,#FLOOP 
      00234C CD 17 A6         [ 4] 2456 	call next_token 
      00234F A1 80            [ 1] 2457 	cp a,#TK_CMD 
      002351 27 03            [ 1] 2458 	jreq 1$
      002353 CC 16 48         [ 2] 2459 	jp syntax_error
      002356                       2460 1$:  
      002356                       2461 	_get_code_addr
      002356 FE               [ 2]    1         ldw x,(x)
      002357 72 5C 00 01      [ 1]    2         inc in 
      00235B 72 5C 00 01      [ 1]    3         inc in 
      00235F A3 23 67         [ 2] 2462 	cpw x,#to   
      002362 27 03            [ 1] 2463 	jreq to
      002364 CC 16 48         [ 2] 2464 	jp syntax_error 
                                   2465 
                                   2466 ;-----------------------------------
                                   2467 ; BASIC: TO expr 
                                   2468 ; second part of FOR loop initilization
                                   2469 ; leave limit on stack and set 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2470 ; FTO bit in 'flags'
                                   2471 ;-----------------------------------
      002367                       2472 to: ; { var_addr -- var_addr limit step }
      002367 72 04 00 22 03   [ 2] 2473 	btjt flags,#FLOOP,1$
      00236C CC 16 48         [ 2] 2474 	jp syntax_error
      00236F CD 1A C1         [ 4] 2475 1$: call expression   
      002372 A1 84            [ 1] 2476 	cp a,#TK_INTGR 
      002374 27 03            [ 1] 2477 	jreq 2$ 
      002376 CC 16 48         [ 2] 2478 	jp syntax_error
      002379                       2479 2$: _xpop
      002379 90 F6            [ 1]    1     ld a,(y)
      00237B 93               [ 1]    2     ldw x,y 
      00237C EE 01            [ 2]    3     ldw x,(1,x)
      00237E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002382 6B 06            [ 1] 2480 	ld (LIMIT,sp),a 
      002384 1F 07            [ 2] 2481 	ldw (LIMIT+1,sp),x
      002386 CD 17 A6         [ 4] 2482 	call next_token
      002389 A1 00            [ 1] 2483 	cp a,#TK_NONE  
      00238B 27 17            [ 1] 2484 	jreq 4$ 
      00238D A1 80            [ 1] 2485 	cp a,#TK_CMD
      00238F 26 0E            [ 1] 2486 	jrne 3$
      002391                       2487 	_get_code_addr
      002391 FE               [ 2]    1         ldw x,(x)
      002392 72 5C 00 01      [ 1]    2         inc in 
      002396 72 5C 00 01      [ 1]    3         inc in 
      00239A A3 23 AD         [ 2] 2488 	cpw x,#step 
      00239D 27 0E            [ 1] 2489 	jreq step
      00239F                       2490 3$:	
      00239F                       2491 	_unget_token   	 
      00239F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0023A4                       2492 4$:	
      0023A4 0F 03            [ 1] 2493 	clr (FSTEP,sp) 
      0023A6 AE 00 01         [ 2] 2494 	ldw x,#1   ; default step  
      0023A9 1F 04            [ 2] 2495 	ldw (FSTEP+1,sp),x 
      0023AB 20 2F            [ 2] 2496 	jra store_loop_addr 
                                   2497 
                                   2498 
                                   2499 ;----------------------------------
                                   2500 ; BASIC: STEP expr 
                                   2501 ; optional third par of FOR loop
                                   2502 ; initialization. 	
                                   2503 ;------------------------------------
      0023AD                       2504 step: ; {var limit -- var limit step}
      0023AD 72 04 00 22 03   [ 2] 2505 	btjt flags,#FLOOP,1$
      0023B2 CC 16 48         [ 2] 2506 	jp syntax_error
      0023B5 CD 1A C1         [ 4] 2507 1$: call expression 
      0023B8 A1 84            [ 1] 2508 	cp a,#TK_INTGR
      0023BA 27 03            [ 1] 2509 	jreq 2$
      0023BC CC 16 48         [ 2] 2510 	jp syntax_error
      0023BF                       2511 2$:	
      0023BF                       2512 	_xpop 
      0023BF 90 F6            [ 1]    1     ld a,(y)
      0023C1 93               [ 1]    2     ldw x,y 
      0023C2 EE 01            [ 2]    3     ldw x,(1,x)
      0023C4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0023C8 6B 03            [ 1] 2513 	ld (FSTEP,sp),a 
      0023CA 1F 04            [ 2] 2514 	ldw (FSTEP+1,sp),x ; step
                                   2515 ; if step < 0 decrement LIMIT 
      0023CC 4D               [ 1] 2516 	tnz a
      0023CD 2A 0D            [ 1] 2517 	jrpl store_loop_addr 
      0023CF 7B 06            [ 1] 2518 	ld a,(LIMIT,sp)
      0023D1 1E 07            [ 2] 2519 	ldw x,(LIMIT+1,sp)
      0023D3 1D 00 01         [ 2] 2520 	subw x,#1 
      0023D6 A2 00            [ 1] 2521 	sbc a,#0 
      0023D8 6B 06            [ 1] 2522 	ld (LIMIT,sp),a 
      0023DA 1F 07            [ 2] 2523 	ldw (LIMIT+1,sp),x 
                                   2524 ; leave loop back entry point on cstack 
                                   2525 ; cstack is 1 call deep from interpreter
      0023DC                       2526 store_loop_addr:
      0023DC CE 00 04         [ 2] 2527 	ldw x,basicptr
      0023DF 1F 0D            [ 2] 2528 	ldw (BPTR,sp),x 
      0023E1 CE 00 00         [ 2] 2529 	ldw x,in.w 
      0023E4 1F 0B            [ 2] 2530 	ldw (INW,sp),x   
      0023E6 72 15 00 22      [ 1] 2531 	bres flags,#FLOOP 
      0023EA 72 5C 00 1F      [ 1] 2532 	inc loop_depth  
      0023EE 81               [ 4] 2533 	ret 
                                   2534 
                                   2535 ;--------------------------------
                                   2536 ; BASIC: NEXT var 
                                   2537 ; FOR loop control 
                                   2538 ; increment variable with step 
                                   2539 ; and compare with limit 
                                   2540 ; loop if threshold not crossed.
                                   2541 ; else stack. 
                                   2542 ; and decrement 'loop_depth' 
                                   2543 ;--------------------------------
      0023EF                       2544 next: ; {var limit step retl1 -- [var limit step ] }
      0023EF 72 5D 00 1F      [ 1] 2545 	tnz loop_depth 
      0023F3 26 03            [ 1] 2546 	jrne 1$ 
      0023F5 CC 16 48         [ 2] 2547 	jp syntax_error 
      0023F8                       2548 1$: 
      0023F8 A6 85            [ 1] 2549 	ld a,#TK_VAR 
      0023FA CD 19 5C         [ 4] 2550 	call expect
      0023FD CD 17 CE         [ 4] 2551 	call get_addr 
                                   2552 ; check for good variable after NEXT 	 
      002400 13 09            [ 2] 2553 	cpw x,(CVAR,sp)
      002402 27 03            [ 1] 2554 	jreq 2$  
      002404 CC 16 48         [ 2] 2555 	jp syntax_error ; not the good one 
      002407                       2556 2$: 
      002407 CF 00 19         [ 2] 2557 	ldw ptr16,x 
                                   2558 	; increment variable 
      00240A F6               [ 1] 2559 	ld a,(x)
      00240B EE 01            [ 2] 2560 	ldw x,(1,x)  ; get var value 
      00240D 72 FB 04         [ 2] 2561 	addw x,(FSTEP+1,sp) ; var+step 
      002410 19 03            [ 1] 2562 	adc a,(FSTEP,sp)
      002412 72 C7 00 19      [ 4] 2563 	ld [ptr16],a
      002416 72 5C 00 1A      [ 1] 2564 	inc ptr8  
      00241A 72 CF 00 19      [ 5] 2565 	ldw [ptr16],x 
      00241E C7 00 0C         [ 1] 2566 	ld acc24,a 
      002421 CF 00 0D         [ 2] 2567 	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002424 7B 06            [ 1] 2568 	ld a,(LIMIT,sp)
      002426 1E 07            [ 2] 2569 	ldw x,(LIMIT+1,sp)
      002428 72 B0 00 0D      [ 2] 2570 	subw x,acc16 
      00242C C2 00 0C         [ 1] 2571 	sbc a,acc24
      00242F 18 03            [ 1] 2572 	xor a,(FSTEP,sp)
      002431 A8 80            [ 1] 2573 	xor a,#0x80
      002433 2B 12            [ 1] 2574 	jrmi loop_back  
      002435 20 25            [ 2] 2575 	jra loop_done   
                                   2576 ; check sign of STEP  
      002437 7B 03            [ 1] 2577 	ld a,(FSTEP,sp)
      002439 2A 07            [ 1] 2578 	jrpl 4$
                                   2579 ;negative step
      00243B C6 00 0E         [ 1] 2580     ld a,acc8 
      00243E 2F 07            [ 1] 2581 	jrslt loop_back   
      002440 20 1A            [ 2] 2582 	jra loop_done  
      002442                       2583 4$: ; positive step
      002442 72 0E 00 0E 15   [ 2] 2584 	btjt acc8,#7,loop_done 
      002447                       2585 loop_back:
      002447 1E 0D            [ 2] 2586 	ldw x,(BPTR,sp)
      002449 CF 00 04         [ 2] 2587 	ldw basicptr,x 
      00244C 72 01 00 22 05   [ 2] 2588 	btjf flags,#FRUN,1$ 
      002451 E6 02            [ 1] 2589 	ld a,(2,x)
      002453 C7 00 03         [ 1] 2590 	ld count,a
      002456 1E 0B            [ 2] 2591 1$:	ldw x,(INW,sp)
      002458 CF 00 00         [ 2] 2592 	ldw in.w,x 
      00245B 81               [ 4] 2593 	ret 
      00245C                       2594 loop_done:
                                   2595 	; remove loop data from stack  
      00245C 85               [ 2] 2596 	popw x
      00245D                       2597 	_drop VSIZE 
      00245D 5B 0D            [ 2]    1     addw sp,#VSIZE 
      00245F 72 5A 00 1F      [ 1] 2598 	dec loop_depth 
      002463 FC               [ 2] 2599 	jp (x)
                                   2600 
                                   2601 ;----------------------------
                                   2602 ; called by goto/gosub
                                   2603 ; to get target line number 
                                   2604 ; output:
                                   2605 ;    x    line address 
                                   2606 ;---------------------------
      002464                       2607 get_target_line:
      002464 CD 17 A6         [ 4] 2608 	call next_token  
      002467 A1 84            [ 1] 2609 	cp a,#TK_INTGR
      002469 27 07            [ 1] 2610 	jreq get_target_line_addr 
      00246B A1 03            [ 1] 2611 	cp a,#TK_LABEL 
      00246D 27 26            [ 1] 2612 	jreq look_target_symbol 
      00246F CC 16 48         [ 2] 2613 	jp syntax_error
                                   2614 ; the target is a line number 
                                   2615 ; search it. 
      002472                       2616 get_target_line_addr:
      002472 90 89            [ 2] 2617 	pushw y 
      002474 CD 17 D8         [ 4] 2618 	call get_int24 ; line # 
      002477 4F               [ 1] 2619 	clr a
      002478 90 CE 00 04      [ 2] 2620 	ldw y,basicptr 
      00247C 90 FE            [ 2] 2621 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00247E 90 89            [ 2] 2622 	pushw y 
      002480 13 01            [ 2] 2623 	cpw x,(1,sp)
      002482                       2624 	_drop 2  
      002482 5B 02            [ 2]    1     addw sp,#2 
      002484 25 01            [ 1] 2625 	jrult 11$
      002486 4C               [ 1] 2626 	inc a 
      002487                       2627 11$: ; scan program for this line# 	
      002487 CD 0C 45         [ 4] 2628 	call search_lineno  
      00248A 5D               [ 2] 2629 	tnzw x ; 0| line# address 
      00248B 26 05            [ 1] 2630 	jrne 2$ 
      00248D A6 05            [ 1] 2631 	ld a,#ERR_NO_LINE 
      00248F CC 16 4A         [ 2] 2632 	jp tb_error 
      002492 90 85            [ 2] 2633 2$:	popw y  
      002494 81               [ 4] 2634 	ret 
                                   2635 
                                   2636 ; the GOTO|GOSUB target is a symbol.
                                   2637 ; output:
                                   2638 ;    X    line address|0 
      002495                       2639 look_target_symbol:
      002495 90 89            [ 2] 2640 	pushw y 
      002497 89               [ 2] 2641 	pushw x 
      002498 CD 17 BF         [ 4] 2642 	call skip_string 
      00249B 72 5F 00 0D      [ 1] 2643 	clr acc16 
      00249F 90 CE 00 1B      [ 2] 2644 	ldw y,txtbgn 
      0024A3 90 E6 03         [ 1] 2645 1$:	ld a,(3,y) ; first TK_ID on line 
      0024A6 A1 03            [ 1] 2646 	cp a,#TK_LABEL 
      0024A8 27 15            [ 1] 2647 	jreq 3$ 
      0024AA 90 E6 02         [ 1] 2648 2$:	ld a,(2,y); line length 
      0024AD C7 00 0E         [ 1] 2649 	ld acc8,a 
      0024B0 72 B9 00 0D      [ 2] 2650 	addw y,acc16 ;point to next line 
      0024B4 90 C3 00 1D      [ 2] 2651 	cpw y,txtend 
      0024B8 25 E9            [ 1] 2652 	jrult 1$
      0024BA A6 0A            [ 1] 2653 	ld a,#ERR_BAD_VALUE
      0024BC CC 16 4A         [ 2] 2654 	jp tb_error 
      0024BF                       2655 3$: ; found a TK_LABEL 
                                   2656 	; compare with GOTO|GOSUB target 
      0024BF 90 89            [ 2] 2657 	pushw y ; line address 
      0024C1 72 A9 00 04      [ 2] 2658 	addw y,#4 ; label string 
      0024C5 1E 03            [ 2] 2659 	ldw x,(3,sp) ; target string 
      0024C7 CD 13 91         [ 4] 2660 	call strcmp
      0024CA 26 04            [ 1] 2661 	jrne 4$
      0024CC 90 85            [ 2] 2662 	popw y 
      0024CE 20 DA            [ 2] 2663 	jra 2$ 
      0024D0                       2664 4$: ; target found 
      0024D0 85               [ 2] 2665 	popw x ;  address line target  
      0024D1                       2666 	_drop 2 ; target string 
      0024D1 5B 02            [ 2]    1     addw sp,#2 
      0024D3 90 85            [ 2] 2667 	popw y 
      0024D5 81               [ 4] 2668 	ret
                                   2669 
                                   2670 
                                   2671 ;--------------------------------
                                   2672 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2673 ; selective goto or gosub 
                                   2674 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      0024D6                       2675 cmd_on:
      0024D6 72 00 00 22 05   [ 2] 2676 	btjt flags,#FRUN,0$ 
      0024DB A6 06            [ 1] 2677 	ld a,#ERR_RUN_ONLY
      0024DD CC 16 4A         [ 2] 2678 	jp tb_error 
      0024E0 CD 1A C1         [ 4] 2679 0$:	call expression 
      0024E3 A1 84            [ 1] 2680 	cp a,#TK_INTGR
      0024E5 27 03            [ 1] 2681 	jreq 1$
      0024E7 CC 16 48         [ 2] 2682 	jp syntax_error
      0024EA                       2683 1$: _xpop
      0024EA 90 F6            [ 1]    1     ld a,(y)
      0024EC 93               [ 1]    2     ldw x,y 
      0024ED EE 01            [ 2]    3     ldw x,(1,x)
      0024EF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2684 ; the selector is the element indice 
                                   2685 ; in the list of arguments. {1..#elements} 
      0024F3 9F               [ 1] 2686 	ld a,xl ; keep only bits 7..0
      0024F4 27 68            [ 1] 2687 	jreq 9$ ; element # begin at 1. 
      0024F6 88               [ 1] 2688 	push a  ; selector  
      0024F7 CD 17 A6         [ 4] 2689 	call next_token
      0024FA A1 80            [ 1] 2690 	cp a,#TK_CMD 
      0024FC 27 03            [ 1] 2691 	jreq 2$ 
      0024FE CC 16 48         [ 2] 2692 	jp syntax_error 
      002501                       2693 2$: _get_code_addr
      002501 FE               [ 2]    1         ldw x,(x)
      002502 72 5C 00 01      [ 1]    2         inc in 
      002506 72 5C 00 01      [ 1]    3         inc in 
                                   2694 ;; must be a GOTO or GOSUB 
      00250A A3 25 68         [ 2] 2695 	cpw x,#goto 
      00250D 27 08            [ 1] 2696 	jreq 4$
      00250F A3 25 82         [ 2] 2697 	cpw x,#gosub 
      002512 27 03            [ 1] 2698 	jreq 4$ 
      002514 CC 16 48         [ 2] 2699 	jp syntax_error 
      002517                       2700 4$: 
      002517 84               [ 1] 2701 	pop a 
      002518 89               [ 2] 2702 	pushw x ; save routine address 	
      002519 88               [ 1] 2703 	push a  ; selector  
      00251A                       2704 5$: ; skip elements in list until selector==0 
      00251A 0A 01            [ 1] 2705 	dec (1,sp)
      00251C 27 26            [ 1] 2706 	jreq 6$ 
                                   2707 ; can be a line# or a label 
      00251E CD 17 A6         [ 4] 2708 	call next_token 
      002521 A1 84            [ 1] 2709 	cp a,#TK_INTGR 
      002523 27 07            [ 1] 2710 	jreq 52$
      002525 A1 03            [ 1] 2711 	cp a,#TK_LABEL 
      002527 27 0D            [ 1] 2712 	jreq 54$
      002529 CC 16 48         [ 2] 2713 	jp syntax_error 
      00252C                       2714 52$: ; got a line number 
      00252C C6 00 01         [ 1] 2715 	ld a,in ; skip over int24 value 
      00252F AB 03            [ 1] 2716 	add a,#CELL_SIZE ; integer size  
      002531 C7 00 01         [ 1] 2717 	ld in,a 
      002534 20 03            [ 2] 2718 	jra 56$
      002536 CD 17 BF         [ 4] 2719 54$: call skip_string ; skip over label 	
      002539                       2720 56$: ; if another element comma present 
      002539 CD 17 A6         [ 4] 2721 	call next_token
      00253C A1 08            [ 1] 2722 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00253E 27 DA            [ 1] 2723 	jreq 5$ 
                                   2724 ; arg list exhausted, selector to big 
                                   2725 ; continue execution on next line 
      002540                       2726 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002540 5B 03            [ 2]    1     addw sp,#3 
      002542 20 1A            [ 2] 2727 	jra 9$
      002544                       2728 6$: ;at selected position  
      002544                       2729 	_drop 1 ; discard selector
      002544 5B 01            [ 2]    1     addw sp,#1 
                                   2730 ; here only the routine address 
                                   2731 ; of GOTO|GOSUB is on stack 
      002546 CD 24 64         [ 4] 2732     call get_target_line
      002549 CF 00 19         [ 2] 2733 	ldw ptr16,x 	
      00254C 55 00 03 00 01   [ 1] 2734 	mov in,count ; move to end of line  
      002551 85               [ 2] 2735 	popw x ; cmd address, GOTO||GOSUB 
      002552 A3 25 68         [ 2] 2736 	cpw x,#goto 
      002555 26 05            [ 1] 2737 	jrne 7$ 
      002557 CE 00 19         [ 2] 2738 	ldw x,ptr16 
      00255A 20 19            [ 2] 2739 	jra jp_to_target
      00255C                       2740 7$: 
      00255C 20 35            [ 2] 2741 	jra gosub_2 ; target in ptr16 
      00255E                       2742 9$: ; expr out of range skip to end of line
                                   2743     ; this will force a fall to next line  
      00255E 55 00 03 00 01   [ 1] 2744 	mov in,count
      002563                       2745 	_drop 2
      002563 5B 02            [ 2]    1     addw sp,#2 
      002565 CC 16 FB         [ 2] 2746 	jp next_line  
                                   2747 
                                   2748 
                                   2749 ;------------------------
                                   2750 ; BASIC: GOTO line# 
                                   2751 ; jump to line# 
                                   2752 ; here cstack is 2 call deep from interpreter 
                                   2753 ;------------------------
      002568                       2754 goto:
      002568 72 00 00 22 05   [ 2] 2755 	btjt flags,#FRUN,goto_1  
      00256D A6 06            [ 1] 2756 	ld a,#ERR_RUN_ONLY
      00256F CC 16 4A         [ 2] 2757 	jp tb_error 
      002572                       2758 goto_1:
      002572 CD 24 64         [ 4] 2759 	call get_target_line
      002575                       2760 jp_to_target:
      002575 CF 00 04         [ 2] 2761 	ldw basicptr,x 
      002578 E6 02            [ 1] 2762 	ld a,(2,x)
      00257A C7 00 03         [ 1] 2763 	ld count,a 
      00257D 35 03 00 01      [ 1] 2764 	mov in,#3 
      002581 81               [ 4] 2765 	ret 
                                   2766 
                                   2767 
                                   2768 ;--------------------
                                   2769 ; BASIC: GOSUB line#
                                   2770 ; basic subroutine call
                                   2771 ; actual line# and basicptr 
                                   2772 ; are saved on cstack
                                   2773 ; here cstack is 2 call deep from interpreter 
                                   2774 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                           000001  2775 	RET_ADDR=1 ; subroutine return address 
                           000003  2776 	RET_BPTR=3 ; basicptr return point 
                           000005  2777 	RET_INW=5  ; in.w return point 
                           000004  2778 	VSIZE=4 
      002582                       2779 gosub:
      002582 72 00 00 22 06   [ 2] 2780 	btjt flags,#FRUN,gosub_1 
      002587 A6 06            [ 1] 2781 	ld a,#ERR_RUN_ONLY
      002589 CC 16 4A         [ 2] 2782 	jp tb_error 
      00258C 81               [ 4] 2783 	ret 
      00258D                       2784 gosub_1:
      00258D CD 24 64         [ 4] 2785 	call get_target_line 
      002590 CF 00 19         [ 2] 2786 	ldw ptr16,x
      002593                       2787 gosub_2: 
      002593 85               [ 2] 2788 	popw x 
      002594                       2789 	_vars VSIZE  
      002594 52 04            [ 2]    1     sub sp,#VSIZE 
      002596 89               [ 2] 2790 	pushw x ; RET_ADDR 
                                   2791 ; save BASIC subroutine return point.   
      002597 CE 00 04         [ 2] 2792 	ldw x,basicptr
      00259A 1F 03            [ 2] 2793 	ldw (RET_BPTR,sp),x 
      00259C CE 00 00         [ 2] 2794 	ldw x,in.w 
      00259F 1F 05            [ 2] 2795 	ldw (RET_INW,sp),x
      0025A1 CE 00 19         [ 2] 2796 	ldw x,ptr16  
      0025A4 20 CF            [ 2] 2797 	jra jp_to_target
                                   2798 
                                   2799 ;------------------------
                                   2800 ; BASIC: RETURN 
                                   2801 ; exit from BASIC subroutine 
                                   2802 ;------------------------
      0025A6                       2803 return:
      0025A6 72 00 00 22 05   [ 2] 2804 	btjt flags,#FRUN,0$ 
      0025AB A6 06            [ 1] 2805 	ld a,#ERR_RUN_ONLY
      0025AD CC 16 4A         [ 2] 2806 	jp tb_error 
      0025B0                       2807 0$:	
      0025B0 1E 03            [ 2] 2808 	ldw x,(RET_BPTR,sp) 
      0025B2 CF 00 04         [ 2] 2809 	ldw basicptr,x
      0025B5 E6 02            [ 1] 2810 	ld a,(2,x)
      0025B7 C7 00 03         [ 1] 2811 	ld count,a  
      0025BA 1E 05            [ 2] 2812 	ldw x,(RET_INW,sp)
      0025BC CF 00 00         [ 2] 2813 	ldw in.w,x 
      0025BF 85               [ 2] 2814 	popw x 
      0025C0                       2815 	_drop VSIZE 
      0025C0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0025C2 FC               [ 2] 2816 	jp (x)
                                   2817 
                                   2818 
                                   2819 ;----------------------------------
                                   2820 ; BASIC: RUN
                                   2821 ; run BASIC program in RAM
                                   2822 ;----------------------------------- 
      0025C3                       2823 run: 
      0025C3 72 01 00 22 02   [ 2] 2824 	btjf flags,#FRUN,0$  
      0025C8 4F               [ 1] 2825 	clr a 
      0025C9 81               [ 4] 2826 	ret
      0025CA                       2827 0$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0025CA 72 09 00 22 12   [ 2] 2828 	btjf flags,#FBREAK,1$
      0025CF                       2829 	_drop 2 
      0025CF 5B 02            [ 2]    1     addw sp,#2 
      0025D1 CD 21 48         [ 4] 2830 	call rest_context
      0025D4                       2831 	_drop CTXT_SIZE 
      0025D4 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0025D6 72 19 00 22      [ 1] 2832 	bres flags,#FBREAK 
      0025DA 72 10 00 22      [ 1] 2833 	bset flags,#FRUN 
      0025DE CC 16 F3         [ 2] 2834 	jp interpreter 
      0025E1 CE 00 1B         [ 2] 2835 1$:	ldw x,txtbgn
      0025E4 C3 00 1D         [ 2] 2836 	cpw x,txtend 
      0025E7 2B 0C            [ 1] 2837 	jrmi run_it 
      0025E9 AE 15 D7         [ 2] 2838 	ldw x,#err_no_prog
      0025EC CD 09 68         [ 4] 2839 	call puts 
      0025EF 55 00 03 00 01   [ 1] 2840 	mov in,count
      0025F4 81               [ 4] 2841 	ret 
      0025F5                       2842 run_it:	 
      0025F5                       2843 	_drop 2 ; drop return address 
      0025F5 5B 02            [ 2]    1     addw sp,#2 
      0025F7                       2844 run_it_02: 
      0025F7 CD 1C 8E         [ 4] 2845     call ubound 
      0025FA CD 13 F6         [ 4] 2846 	call clear_vars
                                   2847 ; initialize DIM variables pointers 
      0025FD CE 00 1D         [ 2] 2848 	ldw x,txtend 
      002600 CF 00 30         [ 2] 2849 	ldw dvar_bgn,x 
      002603 CF 00 32         [ 2] 2850 	ldw dvar_end,x 	 
                                   2851 ; clear data pointer 
      002606 5F               [ 1] 2852 	clrw x 
      002607 CF 00 06         [ 2] 2853 	ldw data_ptr,x 
      00260A 72 5F 00 08      [ 1] 2854 	clr data_ofs 
      00260E 72 5F 00 09      [ 1] 2855 	clr data_len 
                                   2856 ; initialize BASIC pointer 
      002612 CE 00 1B         [ 2] 2857 	ldw x,txtbgn 
      002615 CF 00 04         [ 2] 2858 	ldw basicptr,x 
      002618 E6 02            [ 1] 2859 	ld a,(2,x)
      00261A C7 00 03         [ 1] 2860 	ld count,a
      00261D 35 03 00 01      [ 1] 2861 	mov in,#3	
      002621 72 10 00 22      [ 1] 2862 	bset flags,#FRUN 
      002625 CC 16 F3         [ 2] 2863 	jp interpreter 
                                   2864 
                                   2865 
                                   2866 ;----------------------
                                   2867 ; BASIC: END
                                   2868 ; end running program
                                   2869 ;---------------------- 
      002628                       2870 cmd_end: 
                                   2871 ; clean stack 
      002628 AE 17 FF         [ 2] 2872 	ldw x,#STACK_EMPTY
      00262B 94               [ 1] 2873 	ldw sp,x 
      00262C CC 16 D4         [ 2] 2874 	jp warm_start
                                   2875 
                                   2876 ;---------------------------
                                   2877 ; BASIC: GET var 
                                   2878 ; receive a key in variable 
                                   2879 ; don't wait 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   2880 ;---------------------------
      00262F                       2881 cmd_get:
      00262F CD 17 A6         [ 4] 2882 	call next_token 
      002632 A1 85            [ 1] 2883 	cp a,#TK_VAR 
      002634 27 03            [ 1] 2884 	jreq 0$
      002636 CC 16 48         [ 2] 2885 	jp syntax_error 
      002639 CD 17 CE         [ 4] 2886 0$: call get_addr 
      00263C CF 00 19         [ 2] 2887 	ldw ptr16,x 
      00263F CD 09 14         [ 4] 2888 	call qgetc 
      002642 27 03            [ 1] 2889 	jreq 2$
      002644 CD 09 1B         [ 4] 2890 	call getc  
      002647 72 3F 00 19      [ 4] 2891 2$: clr [ptr16]
      00264B 72 5C 00 1A      [ 1] 2892 	inc ptr8 
      00264F 72 3F 00 19      [ 4] 2893 	clr [ptr16]
      002653 72 5C 00 1A      [ 1] 2894 	inc ptr8 
      002657 72 C7 00 19      [ 4] 2895 	ld [ptr16],a 
      00265B 81               [ 4] 2896 	ret 
                                   2897 
                                   2898 
                                   2899 ;-----------------
                                   2900 ; 1 Khz beep 
                                   2901 ;-----------------
      00265C                       2902 beep_1khz:: 
      00265C 90 89            [ 2] 2903 	pushw y 
      00265E AE 00 64         [ 2] 2904 	ldw x,#100
      002661 90 AE 03 E8      [ 2] 2905 	ldw y,#1000
      002665 20 22            [ 2] 2906 	jra beep
                                   2907 
                                   2908 ;-----------------------
                                   2909 ; BASIC: TONE expr1,expr2
                                   2910 ; used TIMER2 channel 1
                                   2911 ; to produce a tone 
                                   2912 ; arguments:
                                   2913 ;    expr1   frequency 
                                   2914 ;    expr2   duration msec.
                                   2915 ;---------------------------
      002667                       2916 tone:
      002667 90 89            [ 2] 2917 	pushw y 
      002669 CD 19 6E         [ 4] 2918 	call arg_list 
      00266C A1 02            [ 1] 2919 	cp a,#2 
      00266E 27 03            [ 1] 2920 	jreq 1$
      002670 CC 16 48         [ 2] 2921 	jp syntax_error 
      002673                       2922 1$: 
      002673                       2923 	_xpop 
      002673 90 F6            [ 1]    1     ld a,(y)
      002675 93               [ 1]    2     ldw x,y 
      002676 EE 01            [ 2]    3     ldw x,(1,x)
      002678 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00267C 89               [ 2] 2924 	pushw x ; duration 
      00267D                       2925 	_xpop ; frequency
      00267D 90 F6            [ 1]    1     ld a,(y)
      00267F 93               [ 1]    2     ldw x,y 
      002680 EE 01            [ 2]    3     ldw x,(1,x)
      002682 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002686 90 93            [ 1] 2926 	ldw y,x ; frequency 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      002688 85               [ 2] 2927 	popw x  ; duration 
      002689                       2928 beep:  
      002689 89               [ 2] 2929 	pushw x 
      00268A AE F4 24         [ 2] 2930 	ldw x,#TIM2_CLK_FREQ
      00268D 65               [ 2] 2931 	divw x,y ; cntr=Fclk/freq 
                                   2932 ; round to nearest integer 
      00268E 90 A3 7A 12      [ 2] 2933 	cpw y,#TIM2_CLK_FREQ/2
      002692 2B 01            [ 1] 2934 	jrmi 2$
      002694 5C               [ 1] 2935 	incw x 
      002695                       2936 2$:	 
      002695 9E               [ 1] 2937 	ld a,xh 
      002696 C7 53 0D         [ 1] 2938 	ld TIM2_ARRH,a 
      002699 9F               [ 1] 2939 	ld a,xl 
      00269A C7 53 0E         [ 1] 2940 	ld TIM2_ARRL,a 
                                   2941 ; 50% duty cycle 
      00269D 8C               [ 1] 2942 	ccf 
      00269E 56               [ 2] 2943 	rrcw x 
      00269F 9E               [ 1] 2944 	ld a,xh 
      0026A0 C7 53 0F         [ 1] 2945 	ld TIM2_CCR1H,a 
      0026A3 9F               [ 1] 2946 	ld a,xl
      0026A4 C7 53 10         [ 1] 2947 	ld TIM2_CCR1L,a
      0026A7 72 10 53 08      [ 1] 2948 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0026AB 72 10 53 00      [ 1] 2949 	bset TIM2_CR1,#TIM2_CR1_CEN
      0026AF 72 10 53 04      [ 1] 2950 	bset TIM2_EGR,#TIM2_EGR_UG
      0026B3 85               [ 2] 2951 	popw x 
      0026B4 CD 2A F5         [ 4] 2952 	call pause02
      0026B7 72 11 53 08      [ 1] 2953 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0026BB 72 11 53 00      [ 1] 2954 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0026BF 90 85            [ 2] 2955 	popw y 
      0026C1 81               [ 4] 2956 	ret 
                                   2957 
                                   2958 ;-------------------------------
                                   2959 ; BASIC: ADCON 0|1 [,divisor]  
                                   2960 ; disable/enanble ADC 
                                   2961 ;-------------------------------
                           000003  2962 	ONOFF=3 
                           000001  2963 	DIVSOR=1
                           000004  2964 	VSIZE=4 
      0026C2                       2965 power_adc:
      0026C2 CD 19 6E         [ 4] 2966 	call arg_list 
      0026C5 A1 02            [ 1] 2967 	cp a,#2	
      0026C7 27 12            [ 1] 2968 	jreq 1$
      0026C9 A1 01            [ 1] 2969 	cp a,#1 
      0026CB 27 03            [ 1] 2970 	jreq 0$ 
      0026CD CC 16 48         [ 2] 2971 	jp syntax_error 
      0026D0 4F               [ 1] 2972 0$:	clr a 
      0026D1 5F               [ 1] 2973 	clrw x
      0026D2                       2974 	_xpush   ; divisor  
      0026D2 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0026D6 90 F7            [ 1]    2     ld (y),a 
      0026D8 90 EF 01         [ 2]    3     ldw (1,y),x 
      0026DB                       2975 1$: _at_next 
      0026DB 90 E6 03         [ 1]    1     ld a,(3,y)
      0026DE 93               [ 1]    2     ldw x,y 
      0026DF EE 04            [ 2]    3     ldw x,(4,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026E1 5D               [ 2] 2976 	tnzw x 
      0026E2 27 25            [ 1] 2977 	jreq 2$ 
      0026E4                       2978 	_xpop
      0026E4 90 F6            [ 1]    1     ld a,(y)
      0026E6 93               [ 1]    2     ldw x,y 
      0026E7 EE 01            [ 2]    3     ldw x,(1,x)
      0026E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026ED                       2979 	_xdrop  
      0026ED 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0026F1 9F               [ 1] 2980 	ld a,xl
      0026F2 A4 07            [ 1] 2981 	and a,#7
      0026F4 4E               [ 1] 2982 	swap a 
      0026F5 C7 54 01         [ 1] 2983 	ld ADC_CR1,a
      0026F8 72 16 50 CA      [ 1] 2984 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026FC 72 10 54 01      [ 1] 2985 	bset ADC_CR1,#ADC_CR1_ADON 
      002700                       2986 	_usec_dly 7 
      002700 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002703 5A               [ 2]    2     decw x
      002704 9D               [ 1]    3     nop 
      002705 26 FA            [ 1]    4     jrne .-4
      002707 20 08            [ 2] 2987 	jra 3$
      002709 72 11 54 01      [ 1] 2988 2$: bres ADC_CR1,#ADC_CR1_ADON
      00270D 72 17 50 CA      [ 1] 2989 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002711                       2990 3$:	
      002711 81               [ 4] 2991 	ret
                                   2992 
                                   2993 ;-----------------------------
                                   2994 ; BASIC: ADCREAD (channel)
                                   2995 ; read adc channel {0..5}
                                   2996 ; output:
                                   2997 ;   A 		TK_INTGR 
                                   2998 ;   X 		value 
                                   2999 ;-----------------------------
      002712                       3000 analog_read:
      002712 CD 19 69         [ 4] 3001 	call func_args 
      002715 A1 01            [ 1] 3002 	cp a,#1 
      002717 27 03            [ 1] 3003 	jreq 1$
      002719 CC 16 48         [ 2] 3004 	jp syntax_error
      00271C                       3005 1$: _xpop 
      00271C 90 F6            [ 1]    1     ld a,(y)
      00271E 93               [ 1]    2     ldw x,y 
      00271F EE 01            [ 2]    3     ldw x,(1,x)
      002721 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002725 A3 00 05         [ 2] 3006 	cpw x,#5 
      002728 23 05            [ 2] 3007 	jrule 2$
      00272A A6 0A            [ 1] 3008 	ld a,#ERR_BAD_VALUE
      00272C CC 16 4A         [ 2] 3009 	jp tb_error 
      00272F 9F               [ 1] 3010 2$: ld a,xl
      002730 C7 00 0E         [ 1] 3011 	ld acc8,a 
      002733 A6 05            [ 1] 3012 	ld a,#5
      002735 C0 00 0E         [ 1] 3013 	sub a,acc8 
      002738 C7 54 00         [ 1] 3014 	ld ADC_CSR,a
      00273B 72 16 54 02      [ 1] 3015 	bset ADC_CR2,#ADC_CR2_ALIGN
      00273F 72 10 54 01      [ 1] 3016 	bset ADC_CR1,#ADC_CR1_ADON
      002743 72 0F 54 00 FB   [ 2] 3017 	btjf ADC_CSR,#ADC_CSR_EOC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002748 CE 54 04         [ 2] 3018 	ldw x,ADC_DRH
      00274B A6 84            [ 1] 3019 	ld a,#TK_INTGR
      00274D 81               [ 4] 3020 	ret 
                                   3021 
                                   3022 ;-----------------------
                                   3023 ; BASIC: DREAD(pin)
                                   3024 ; Arduino pins 
                                   3025 ; read state of a digital pin 
                                   3026 ; pin# {0..15}
                                   3027 ; output:
                                   3028 ;    A 		TK_INTGR
                                   3029 ;    X      0|1 
                                   3030 ;-------------------------
                           000001  3031 	PINNO=1
                           000001  3032 	VSIZE=1
      00274E                       3033 digital_read:
      00274E                       3034 	_vars VSIZE 
      00274E 52 01            [ 2]    1     sub sp,#VSIZE 
      002750 CD 19 69         [ 4] 3035 	call func_args
      002753 A1 01            [ 1] 3036 	cp a,#1
      002755 27 03            [ 1] 3037 	jreq 1$
      002757 CC 16 48         [ 2] 3038 	jp syntax_error
      00275A                       3039 1$: _xpop 
      00275A 90 F6            [ 1]    1     ld a,(y)
      00275C 93               [ 1]    2     ldw x,y 
      00275D EE 01            [ 2]    3     ldw x,(1,x)
      00275F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002763 A3 00 0F         [ 2] 3040 	cpw x,#15 
      002766 23 05            [ 2] 3041 	jrule 2$
      002768 A6 0A            [ 1] 3042 	ld a,#ERR_BAD_VALUE
      00276A CC 16 4A         [ 2] 3043 	jp tb_error 
      00276D CD 2C 38         [ 4] 3044 2$:	call select_pin 
      002770 6B 01            [ 1] 3045 	ld (PINNO,sp),a
      002772 E6 01            [ 1] 3046 	ld a,(GPIO_IDR,x)
      002774 0D 01            [ 1] 3047 	tnz (PINNO,sp)
      002776 27 05            [ 1] 3048 	jreq 8$
      002778 44               [ 1] 3049 3$: srl a 
      002779 0A 01            [ 1] 3050 	dec (PINNO,sp)
      00277B 26 FB            [ 1] 3051 	jrne 3$ 
      00277D A4 01            [ 1] 3052 8$: and a,#1 
      00277F 5F               [ 1] 3053 	clrw x 
      002780 97               [ 1] 3054 	ld xl,a 
      002781 4F               [ 1] 3055 	clr a 
      002782                       3056 	_drop VSIZE
      002782 5B 01            [ 2]    1     addw sp,#VSIZE 
      002784 81               [ 4] 3057 	ret
                                   3058 
                                   3059 
                                   3060 ;-----------------------
                                   3061 ; BASIC: DWRITE pin,0|1
                                   3062 ; Arduino pins 
                                   3063 ; write to a digital pin 
                                   3064 ; pin# {0..15}
                                   3065 ; output:
                                   3066 ;    A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3067 ;    X      0|1 
                                   3068 ;-------------------------
                           000001  3069 	PINNO=1
                           000002  3070 	PINVAL=2
                           000002  3071 	VSIZE=2
      002785                       3072 digital_write:
      002785                       3073 	_vars VSIZE 
      002785 52 02            [ 2]    1     sub sp,#VSIZE 
      002787 CD 19 6E         [ 4] 3074 	call arg_list  
      00278A A1 02            [ 1] 3075 	cp a,#2 
      00278C 27 03            [ 1] 3076 	jreq 1$
      00278E CC 16 48         [ 2] 3077 	jp syntax_error
      002791                       3078 1$: _xpop 
      002791 90 F6            [ 1]    1     ld a,(y)
      002793 93               [ 1]    2     ldw x,y 
      002794 EE 01            [ 2]    3     ldw x,(1,x)
      002796 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00279A 9F               [ 1] 3079 	ld a,xl 
      00279B 6B 02            [ 1] 3080 	ld (PINVAL,sp),a
      00279D                       3081 	_xpop 
      00279D 90 F6            [ 1]    1     ld a,(y)
      00279F 93               [ 1]    2     ldw x,y 
      0027A0 EE 01            [ 2]    3     ldw x,(1,x)
      0027A2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027A6 A3 00 0F         [ 2] 3082 	cpw x,#15 
      0027A9 23 05            [ 2] 3083 	jrule 2$
      0027AB A6 0A            [ 1] 3084 	ld a,#ERR_BAD_VALUE
      0027AD CC 16 4A         [ 2] 3085 	jp tb_error 
      0027B0 CD 2C 38         [ 4] 3086 2$:	call select_pin 
      0027B3 6B 01            [ 1] 3087 	ld (PINNO,sp),a 
      0027B5 A6 01            [ 1] 3088 	ld a,#1
      0027B7 0D 01            [ 1] 3089 	tnz (PINNO,sp)
      0027B9 27 05            [ 1] 3090 	jreq 4$
      0027BB 48               [ 1] 3091 3$: sll a
      0027BC 0A 01            [ 1] 3092 	dec (PINNO,sp)
      0027BE 26 FB            [ 1] 3093 	jrne 3$
      0027C0 0D 02            [ 1] 3094 4$: tnz (PINVAL,sp)
      0027C2 26 05            [ 1] 3095 	jrne 5$
      0027C4 43               [ 1] 3096 	cpl a 
      0027C5 E4 00            [ 1] 3097 	and a,(GPIO_ODR,x)
      0027C7 20 02            [ 2] 3098 	jra 8$
      0027C9 EA 00            [ 1] 3099 5$: or a,(GPIO_ODR,x)
      0027CB E7 00            [ 1] 3100 8$: ld (GPIO_ODR,x),a 
      0027CD                       3101 	_drop VSIZE 
      0027CD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0027CF 81               [ 4] 3102 	ret
                                   3103 
                                   3104 
                                   3105 ;-----------------------
                                   3106 ; BASIC: STOP
                                   3107 ; stop progam execution  
                                   3108 ; without resetting pointers 
                                   3109 ; the program is resumed
                                   3110 ; with RUN 
                                   3111 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027D0                       3112 stop:
      0027D0 72 00 00 22 02   [ 2] 3113 	btjt flags,#FRUN,2$
      0027D5 4F               [ 1] 3114 	clr a
      0027D6 81               [ 4] 3115 	ret 
      0027D7                       3116 2$:	 
                                   3117 ; create space on cstack to save context 
      0027D7 AE 27 FE         [ 2] 3118 	ldw x,#break_point 
      0027DA CD 09 68         [ 4] 3119 	call puts 
      0027DD                       3120 	_drop 2 ;drop return address 
      0027DD 5B 02            [ 2]    1     addw sp,#2 
      0027DF                       3121 	_vars CTXT_SIZE ; context size 
      0027DF 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0027E1 CD 21 38         [ 4] 3122 	call save_context 
      0027E4 AE 16 90         [ 2] 3123 	ldw x,#tib 
      0027E7 CF 00 04         [ 2] 3124 	ldw basicptr,x
      0027EA 7F               [ 1] 3125 	clr (x)
      0027EB 72 5F 00 03      [ 1] 3126 	clr count  
      0027EF 5F               [ 1] 3127 	clrw x 
      0027F0 CF 00 00         [ 2] 3128 	ldw in.w,x
      0027F3 72 11 00 22      [ 1] 3129 	bres flags,#FRUN 
      0027F7 72 18 00 22      [ 1] 3130 	bset flags,#FBREAK
      0027FB CC 16 F3         [ 2] 3131 	jp interpreter 
      0027FE 0A 62 72 65 61 6B 20  3132 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3133 
                                   3134 ;-----------------------
                                   3135 ; BASIC: NEW
                                   3136 ; from command line only 
                                   3137 ; free program memory
                                   3138 ; and clear variables 
                                   3139 ;------------------------
      00281C                       3140 new: 
      00281C 72 01 00 22 01   [ 2] 3141 	btjf flags,#FRUN,0$ 
      002821 81               [ 4] 3142 	ret 
      002822                       3143 0$:	
      002822 CD 14 9E         [ 4] 3144 	call clear_basic 
      002825 81               [ 4] 3145 	ret 
                                   3146 
                                   3147 ;-----------------------------------
                                   3148 ; BASIC: ERASE \E | \F 
                                   3149 ; erase all block in range from 
                                   3150 ;  'app_space' to FLASH end (0x20000)
                                   3151 ;  or all EEPROM 
                                   3152 ; that contains a non zero byte.  
                                   3153 ;-----------------------------------
                           000001  3154 	LIMIT=1 
                           000003  3155 	VSIZE = 3 
      002826                       3156 erase:
      002826 72 5F 00 18      [ 1] 3157 	clr farptr 
      00282A                       3158 	_vars VSIZE 
      00282A 52 03            [ 2]    1     sub sp,#VSIZE 
      00282C CD 17 A6         [ 4] 3159 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00282F A1 04            [ 1] 3160 	cp a,#TK_CHAR 
      002831 27 03            [ 1] 3161 	jreq 0$ 
      002833 CC 16 48         [ 2] 3162 	jp syntax_error
      002836 CD 17 E8         [ 4] 3163 0$: call get_char 
      002839 A4 DF            [ 1] 3164 	and a,#0XDF 
      00283B A1 45            [ 1] 3165 	cp a,#'E
      00283D 26 0C            [ 1] 3166 	jrne 1$
      00283F AE 40 00         [ 2] 3167 	ldw x,#EEPROM_BASE 
      002842 CF 00 19         [ 2] 3168 	ldw farptr+1,x 
      002845 AE 47 FF         [ 2] 3169 	ldw x,#EEPROM_END
      002848 4F               [ 1] 3170 	clr a 
      002849 20 15            [ 2] 3171 	jra 3$ 
      00284B A1 46            [ 1] 3172 1$: cp a,#'F 
      00284D 27 06            [ 1] 3173 	jreq 2$
      00284F AE 15 88         [ 2] 3174 	ldw x,#err_bad_value
      002852 CC 16 4A         [ 2] 3175 	jp tb_error
      002855                       3176 2$:
      002855 AE 37 00         [ 2] 3177 	ldw x,#app_space  
      002858 CF 00 19         [ 2] 3178 	ldw farptr+1,x 
      00285B A6 02            [ 1] 3179 	ld a,#(FLASH_END>>16)&0XFF 
      00285D AE 7F FF         [ 2] 3180 	ldw x,#FLASH_END&0xffff
      002860                       3181 3$:
      002860 6B 01            [ 1] 3182 	ld (LIMIT,sp),a 
      002862 1F 02            [ 2] 3183 	ldw (LIMIT+1,sp),x 
                                   3184  ; operation done from RAM
                                   3185  ; copy code to RAM in tib   
      002864 CD 07 09         [ 4] 3186 	call move_erase_to_ram
      002867                       3187 4$:	 
      002867 CD 08 8B         [ 4] 3188     call scan_block 
      00286A 27 08            [ 1] 3189 	jreq 5$  ; block already erased 
      00286C A6 45            [ 1] 3190     ld a,#'E 
      00286E CD 09 0B         [ 4] 3191     call putc 
      002871 CD 07 87         [ 4] 3192 	call block_erase   
                                   3193 ; this block is clean, next  
      002874 AE 00 80         [ 2] 3194 5$:	ldw x,#BLOCK_SIZE
      002877 CD 08 7D         [ 4] 3195 	call incr_farptr
                                   3196 ; check limit, 24 bit substraction  	
      00287A 7B 01            [ 1] 3197 	ld a,(LIMIT,sp)
      00287C 1E 02            [ 2] 3198 	ldw x,(LIMIT+1,sp)
      00287E 72 B0 00 19      [ 2] 3199 	subw x,farptr+1
      002882 C2 00 18         [ 1] 3200 	sbc a,farptr 
      002885 22 E0            [ 1] 3201 	jrugt 4$ 
      002887 CD 14 9E         [ 4] 3202 9$: call clear_basic
      00288A 1E 02            [ 2] 3203 	ldw x,(LIMIT+1,sp)
      00288C A3 47 FF         [ 2] 3204 	cpw x,#EEPROM_END
      00288F 26 03            [ 1] 3205 	jrne 10$
      002891 CD 1D 57         [ 4] 3206 	call func_eefree 
      002894                       3207 10$:
      002894                       3208 	_drop VSIZE 
      002894 5B 03            [ 2]    1     addw sp,#VSIZE 
      002896 81               [ 4] 3209 	ret 
                                   3210 	
                                   3211 
                                   3212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3213 ;  check for application signature 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3214 ; output:
                                   3215 ;   Carry    0 app present 
                                   3216 ;            1 no app installed  
                                   3217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002897                       3218 qsign: 
      002897 CE 37 00         [ 2] 3219 	ldw x,app_sign 
      00289A C3 29 57         [ 2] 3220 	cpw x,SIGNATURE ; "TB" 
      00289D 81               [ 4] 3221 	ret 
                                   3222 
                                   3223 ;--------------------------------------
                                   3224 ;  fill write buffer 
                                   3225 ;  input:
                                   3226 ;    y  point to output buffer 
                                   3227 ;    x  point to source 
                                   3228 ;    a  bytes to write in buffer 
                                   3229 ;  output:
                                   3230 ;    y   += A 
                                   3231 ;    X   += A 
                                   3232 ;    A   0 
                                   3233 ;---------------------------------------
      00289E                       3234 fill_write_buffer:
      00289E 88               [ 1] 3235 	push a 
      00289F 4D               [ 1] 3236 	tnz a 
      0028A0 27 0A            [ 1] 3237 	jreq 9$ 
      0028A2 F6               [ 1] 3238 1$: ld a,(x)
      0028A3 5C               [ 1] 3239 	incw x 
      0028A4 90 F7            [ 1] 3240 	ld (y),a 
      0028A6 90 5C            [ 1] 3241 	incw y 
      0028A8 0A 01            [ 1] 3242 	dec (1,sp) 
      0028AA 26 F6            [ 1] 3243 	jrne 1$ 
      0028AC 84               [ 1] 3244 9$:	pop a 
      0028AD 81               [ 4] 3245     ret 	
                                   3246 
                                   3247 ;--------------------------------------
                                   3248 ;  fill pad buffer with zero 
                                   3249 ;  input:
                                   3250 ;	none 
                                   3251 ;  output:
                                   3252 ;    y     buffer address  
                                   3253 ;--------------------------------------
      0028AE                       3254 clear_block_buffer:
      0028AE 88               [ 1] 3255 	push a 
      0028AF 90 AE 16 E0      [ 2] 3256 	ldw y,#block_buffer 
      0028B3 90 89            [ 2] 3257 	pushw y
      0028B5 A6 80            [ 1] 3258 	ld a,#BLOCK_SIZE   
      0028B7 90 7F            [ 1] 3259 1$:	clr (y)
      0028B9 90 5C            [ 1] 3260 	incw y
      0028BB 4A               [ 1] 3261 	dec a  
      0028BC 26 F9            [ 1] 3262 	jrne 1$ 	
      0028BE 90 85            [ 2] 3263 9$: popw y 
      0028C0 84               [ 1] 3264 	pop a 			
      0028C1 81               [ 4] 3265 	ret 
                                   3266 
                                   3267 
                                   3268 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3269 ; BASIC: SAVE
                                   3270 ; write application from RAM to FLASH
                                   3271 ; at UFLASH address
                                   3272 ;--------------------------------------
                           000001  3273 	XTEMP=1
                           000003  3274 	COUNT=3  ; last count bytes written 
                           000004  3275 	CNT_LO=4 ; count low byte 
                           000005  3276 	TOWRITE=5 ; how bytes left to write  
                           000006  3277 	VSIZE=6 
      0028C2                       3278 save_app:
      0028C2 89               [ 2] 3279 	pushw x 
      0028C3 90 89            [ 2] 3280 	pushw y 
      0028C5                       3281 	_vars VSIZE
      0028C5 52 06            [ 2]    1     sub sp,#VSIZE 
      0028C7 CD 28 97         [ 4] 3282 	call qsign 
      0028CA 26 09            [ 1] 3283 	jrne 1$
      0028CC AE 29 59         [ 2] 3284 	ldw x,#CANT_DO 
      0028CF CD 09 68         [ 4] 3285 	call puts 
      0028D2 CC 29 51         [ 2] 3286 	jp 9$
      0028D5                       3287 1$: 
      0028D5 CE 00 1B         [ 2] 3288 	ldw x,txtbgn
      0028D8 C3 00 1D         [ 2] 3289 	cpw x,txtend 
      0028DB 25 09            [ 1] 3290 	jrult 2$ 
      0028DD AE 29 9B         [ 2] 3291 	ldw x,#NO_APP
      0028E0 CD 09 68         [ 4] 3292 	call puts 
      0028E3 CC 29 51         [ 2] 3293 	jp 9$
      0028E6                       3294 2$: 
                                   3295 ; block programming flash
                                   3296 ; must be done from RAM
                                   3297 ; moved in tib  
      0028E6 CD 07 49         [ 4] 3298 	call move_prg_to_ram
                                   3299 ; initialize farptr 
                                   3300 ; to app_sign address 
      0028E9 72 5F 00 18      [ 1] 3301 	clr farptr 
      0028ED AE 37 00         [ 2] 3302 	ldw x,#app_sign 
      0028F0 CF 00 19         [ 2] 3303 	ldw farptr+1,x
                                   3304 ; initialize local variables 
      0028F3 CD 1F 11         [ 4] 3305 	call prog_size
      0028F6 1F 05            [ 2] 3306 	ldw (TOWRITE,sp),x
      0028F8 0F 03            [ 1] 3307 	clr (COUNT,sp)
                                   3308 ; first bock 
                                   3309 ; containt signature 2 bytes 
                                   3310 ; and size 	2 bytes 
                                   3311 ; use Y as pointer to block_buffer
      0028FA CD 28 AE         [ 4] 3312 	call clear_block_buffer ; -- y=*block_buffer	
                                   3313 ; write signature
      0028FD CE 29 57         [ 2] 3314 	ldw x,SIGNATURE ; "BC" 
      002900 90 FF            [ 2] 3315 	ldw (y),x 
      002902 72 A9 00 02      [ 2] 3316 	addw y,#2
      002906 1E 05            [ 2] 3317 	ldw x,(TOWRITE,sp)
      002908 90 FF            [ 2] 3318 	ldw (y),x
      00290A 72 A9 00 02      [ 2] 3319 	addw y,#2   
      00290E A6 7C            [ 1] 3320 	ld a,#(BLOCK_SIZE-4)
      002910 6B 04            [ 1] 3321 	ld (CNT_LO,sp),a 
      002912 A3 00 7C         [ 2] 3322 	cpw x,#(BLOCK_SIZE-4) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002915 22 01            [ 1] 3323 	jrugt 3$
      002917 9F               [ 1] 3324 	ld a,xl 
      002918 6B 04            [ 1] 3325 3$:	ld (CNT_LO,sp),a   
      00291A CE 00 1B         [ 2] 3326 	ldw x,txtbgn 
      00291D 1F 01            [ 2] 3327 	ldw (XTEMP,sp),x 
      00291F                       3328 32$: 
      00291F 1E 01            [ 2] 3329 	ldw x,(XTEMP,sp)
      002921 7B 04            [ 1] 3330 	ld a,(CNT_LO,sp)
      002923 CD 28 9E         [ 4] 3331 	call fill_write_buffer 
      002926 1F 01            [ 2] 3332 	ldw (XTEMP,sp),x 
      002928 AE 16 E0         [ 2] 3333 	ldw x,#block_buffer
      00292B CD 07 63         [ 4] 3334 	call write_buffer
      00292E AE 00 80         [ 2] 3335 	ldw x,#BLOCK_SIZE 
      002931 CD 08 7D         [ 4] 3336 	call incr_farptr  
                                   3337 ; following blocks 
      002934 1E 01            [ 2] 3338 	ldw x,(XTEMP,sp)
      002936 C3 00 1D         [ 2] 3339 	cpw x,txtend 
      002939 24 16            [ 1] 3340 	jruge 9$ 
      00293B 1E 05            [ 2] 3341 	ldw x,(TOWRITE,sp)
      00293D 72 F0 03         [ 2] 3342 	subw x,(COUNT,sp)
      002940 1F 05            [ 2] 3343 	ldw (TOWRITE,sp),x 
      002942 A6 80            [ 1] 3344 	ld a,#BLOCK_SIZE 
      002944 A3 00 80         [ 2] 3345 	cpw x,#BLOCK_SIZE 
      002947 24 01            [ 1] 3346 	jruge 4$ 
      002949 9F               [ 1] 3347 	ld a,xl 
      00294A 6B 04            [ 1] 3348 4$:	ld (CNT_LO,sp),a 
      00294C CD 28 AE         [ 4] 3349 	call clear_block_buffer 
      00294F 20 CE            [ 2] 3350 	jra 32$ 
      002951                       3351 9$:	_drop VSIZE 
      002951 5B 06            [ 2]    1     addw sp,#VSIZE 
      002953 90 85            [ 2] 3352     popw y 
      002955 85               [ 2] 3353 	popw x 
      002956 81               [ 4] 3354 	ret 
                                   3355 
                                   3356 
      002957 54 42                 3357 SIGNATURE: .ascii "TB"
      002959 43 61 6E 27 74 20 66  3358 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      00299B 4E 6F 20 61 70 70 6C  3359 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3360 
                                   3361 ;---------------------
                                   3362 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3363 ; write 1 or more byte to FLASH or EEPROM
                                   3364 ; starting at address  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3365 ; input:
                                   3366 ;   expr1  	is address 
                                   3367 ;   expr2,...,exprn   are bytes to write
                                   3368 ; output:
                                   3369 ;   none 
                                   3370 ;---------------------
      0029B1                       3371 write:
      0029B1 CD 1A C1         [ 4] 3372 	call expression
      0029B4 A1 84            [ 1] 3373 	cp a,#TK_INTGR 
      0029B6 27 03            [ 1] 3374 	jreq 0$
      0029B8 CC 16 48         [ 2] 3375 	jp syntax_error
      0029BB                       3376 0$: _xpop 
      0029BB 90 F6            [ 1]    1     ld a,(y)
      0029BD 93               [ 1]    2     ldw x,y 
      0029BE EE 01            [ 2]    3     ldw x,(1,x)
      0029C0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C4 C7 00 18         [ 1] 3377 	ld farptr,a 
      0029C7 CF 00 19         [ 2] 3378 	ldw ptr16,x 
      0029CA                       3379 1$:	
      0029CA CD 17 A6         [ 4] 3380 	call next_token 
      0029CD A1 08            [ 1] 3381 	cp a,#TK_COMMA 
      0029CF 27 02            [ 1] 3382 	jreq 2$ 
      0029D1 20 20            [ 2] 3383 	jra 9$ ; no more data 
      0029D3 CD 1A C1         [ 4] 3384 2$:	call expression
      0029D6 A1 84            [ 1] 3385 	cp a,#TK_INTGR
      0029D8 27 03            [ 1] 3386 	jreq 3$
      0029DA CC 16 48         [ 2] 3387 	jp syntax_error
      0029DD                       3388 3$:	_xpop 
      0029DD 90 F6            [ 1]    1     ld a,(y)
      0029DF 93               [ 1]    2     ldw x,y 
      0029E0 EE 01            [ 2]    3     ldw x,(1,x)
      0029E2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029E6 9F               [ 1] 3389 	ld a,xl 
      0029E7 5F               [ 1] 3390 	clrw x 
      0029E8 CD 07 AD         [ 4] 3391 	call write_byte
      0029EB AE 00 01         [ 2] 3392 	ldw x,#1 
      0029EE CD 08 7D         [ 4] 3393 	call incr_farptr 
      0029F1 20 D7            [ 2] 3394 	jra 1$ 
      0029F3                       3395 9$:
      0029F3 81               [ 4] 3396 	ret 
                                   3397 
                                   3398 
                                   3399 ;---------------------
                                   3400 ;BASIC: CHAR(expr)
                                   3401 ; évaluate expression 
                                   3402 ; and take the 7 least 
                                   3403 ; bits as ASCII character
                                   3404 ; output: 
                                   3405 ; 	A char 
                                   3406 ;---------------------
      0029F4                       3407 func_char:
      0029F4 CD 19 69         [ 4] 3408 	call func_args 
      0029F7 A1 01            [ 1] 3409 	cp a,#1
      0029F9 27 03            [ 1] 3410 	jreq 1$
      0029FB CC 16 48         [ 2] 3411 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029FE                       3412 1$:	_xpop
      0029FE 90 F6            [ 1]    1     ld a,(y)
      002A00 93               [ 1]    2     ldw x,y 
      002A01 EE 01            [ 2]    3     ldw x,(1,x)
      002A03 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A07 9F               [ 1] 3413 	ld a,xl
      002A08 A4 7F            [ 1] 3414 	and a,#0x7f 
      002A0A 81               [ 4] 3415 	ret
                                   3416 
                                   3417 ;---------------------
                                   3418 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3419 ; extract first character 
                                   3420 ; of string argument 
                                   3421 ; output:
                                   3422 ;    A:X    int24 
                                   3423 ;---------------------
      002A0B                       3424 ascii:
      002A0B A6 06            [ 1] 3425 	ld a,#TK_LPAREN
      002A0D CD 19 5C         [ 4] 3426 	call expect 
      002A10 CD 17 A6         [ 4] 3427 	call next_token 
      002A13 A1 02            [ 1] 3428 	cp a,#TK_QSTR 
      002A15 27 0E            [ 1] 3429 	jreq 1$
      002A17 A1 04            [ 1] 3430 	cp a,#TK_CHAR 
      002A19 27 12            [ 1] 3431 	jreq 2$ 
      002A1B A1 82            [ 1] 3432 	cp a,#TK_CFUNC 
      002A1D 27 03            [ 1] 3433 	jreq 0$
      002A1F CC 16 48         [ 2] 3434 	jp syntax_error
      002A22                       3435 0$: ; cfunc 
      002A22 FD               [ 4] 3436 	call (x)
      002A23 20 0B            [ 2] 3437 	jra 3$
      002A25                       3438 1$: ; quoted string 
      002A25 F6               [ 1] 3439 	ld a,(x)
      002A26 88               [ 1] 3440 	push a  
      002A27 CD 17 BF         [ 4] 3441 	call skip_string
      002A2A 84               [ 1] 3442 	pop a  	
      002A2B 20 03            [ 2] 3443 	jra 3$ 
      002A2D                       3444 2$: ; character 
      002A2D CD 17 E8         [ 4] 3445 	call get_char 
      002A30 5F               [ 1] 3446 3$:	clrw x 
      002A31 02               [ 1] 3447 	rlwa x   
      002A32                       3448 4$:	_xpush  
      002A32 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002A36 90 F7            [ 1]    2     ld (y),a 
      002A38 90 EF 01         [ 2]    3     ldw (1,y),x 
      002A3B A6 07            [ 1] 3449 	ld a,#TK_RPAREN 
      002A3D CD 19 5C         [ 4] 3450 	call expect
      002A40                       3451 9$:	
      002A40                       3452 	_xpop  
      002A40 90 F6            [ 1]    1     ld a,(y)
      002A42 93               [ 1]    2     ldw x,y 
      002A43 EE 01            [ 2]    3     ldw x,(1,x)
      002A45 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A49 81               [ 4] 3453 	ret 
                                   3454 
                                   3455 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3456 ;BASIC: KEY
                                   3457 ; wait for a character 
                                   3458 ; received from STDIN 
                                   3459 ; input:
                                   3460 ;	none 
                                   3461 ; output:
                                   3462 ;	a	 character 
                                   3463 ;---------------------
      002A4A                       3464 key:
      002A4A CD 09 1B         [ 4] 3465 	call getc 
      002A4D 81               [ 4] 3466 	ret
                                   3467 
                                   3468 ;----------------------
                                   3469 ; BASIC: QKEY
                                   3470 ; Return true if there 
                                   3471 ; is a character in 
                                   3472 ; waiting in STDIN 
                                   3473 ; input:
                                   3474 ;  none 
                                   3475 ; output:
                                   3476 ;   A     0|-1
                                   3477 ;-----------------------
      002A4E                       3478 qkey:: 
      002A4E 5F               [ 1] 3479 	clrw x 
      002A4F C6 00 2E         [ 1] 3480 	ld a,rx1_head
      002A52 C0 00 2F         [ 1] 3481 	sub a,rx1_tail 
      002A55 27 03            [ 1] 3482 	jreq 9$ 
      002A57 53               [ 2] 3483 	cplw x
      002A58 A6 FF            [ 1] 3484 	ld a,#255    
      002A5A                       3485 9$: 
      002A5A 81               [ 4] 3486 	ret 
                                   3487 
                                   3488 ;---------------------
                                   3489 ; BASIC: GPIO(port,reg)
                                   3490 ; return gpio register address 
                                   3491 ; expr {PORTA..PORTI}
                                   3492 ; input:
                                   3493 ;   none 
                                   3494 ; output:
                                   3495 ;   A:X 	gpio register address
                                   3496 ;----------------------------
                                   3497 ;	N=PORT
                                   3498 ;	T=REG 
      002A5B                       3499 gpio:
      002A5B CD 19 69         [ 4] 3500 	call func_args 
      002A5E A1 02            [ 1] 3501 	cp a,#2
      002A60 27 03            [ 1] 3502 	jreq 1$
      002A62 CC 16 48         [ 2] 3503 	jp syntax_error  
      002A65                       3504 1$:	_at_next 
      002A65 90 E6 03         [ 1]    1     ld a,(3,y)
      002A68 93               [ 1]    2     ldw x,y 
      002A69 EE 04            [ 2]    3     ldw x,(4,x)
      002A6B A3 50 00         [ 2] 3505 	cpw x,#PA_BASE 
      002A6E 2B 16            [ 1] 3506 	jrmi bad_port
      002A70 A3 50 29         [ 2] 3507 	cpw x,#PI_BASE+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A73 2A 11            [ 1] 3508 	jrpl bad_port
      002A75 89               [ 2] 3509 	pushw x 
      002A76                       3510 	_xpop
      002A76 90 F6            [ 1]    1     ld a,(y)
      002A78 93               [ 1]    2     ldw x,y 
      002A79 EE 01            [ 2]    3     ldw x,(1,x)
      002A7B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A7F 72 FB 01         [ 2] 3511 	addw x,(1,sp)
      002A82                       3512 	_drop 2 
      002A82 5B 02            [ 2]    1     addw sp,#2 
      002A84 4F               [ 1] 3513 	clr a 
      002A85 81               [ 4] 3514 	ret
      002A86                       3515 bad_port:
      002A86 A6 0A            [ 1] 3516 	ld a,#ERR_BAD_VALUE
      002A88 CC 16 4A         [ 2] 3517 	jp tb_error
                                   3518 
                                   3519 
                                   3520 ;-------------------------
                                   3521 ; BASIC: UFLASH 
                                   3522 ; return free flash address
                                   3523 ; align to BLOCK address 
                                   3524 ; input:
                                   3525 ;  none 
                                   3526 ; output:
                                   3527 ;	A		TK_INTGR
                                   3528 ;   xstack	free address 
                                   3529 ;---------------------------
      002A8B                       3530 uflash:
      002A8B CD 28 97         [ 4] 3531 	call qsign 
      002A8E 26 13            [ 1] 3532 	jrne 1$
      002A90 AE 37 00         [ 2] 3533 	ldw x,#app_space 
      002A93 72 BB 37 02      [ 2] 3534 	addw x,app_size 
      002A97 1C 00 04         [ 2] 3535 	addw x,#4
                                   3536 ; align on 128 bytes block 
      002A9A 1C 00 80         [ 2] 3537 	addw x,#BLOCK_SIZE 
      002A9D 9F               [ 1] 3538 	ld a,xl 
      002A9E A4 80            [ 1] 3539 	and a,#0x80 
      002AA0 97               [ 1] 3540 	ld xl,a 
      002AA1 20 03            [ 2] 3541 	jra 2$
      002AA3 AE 37 00         [ 2] 3542 1$:	ldw x,#app_space 
      002AA6                       3543 2$:
      002AA6 4F               [ 1] 3544 	clr a 
      002AA7 81               [ 4] 3545 	ret 
                                   3546 
                                   3547 
                                   3548 ;---------------------
                                   3549 ; BASIC: USR(addr,arg)
                                   3550 ; execute a function written 
                                   3551 ; in binary code.
                                   3552 ; input:
                                   3553 ;   addr	routine address 
                                   3554 ;   arg 	is an argument
                                   3555 ;           it can be ignore 
                                   3556 ;           by cally. 
                                   3557 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3558 ;   xstack 	value returned by cally  
                                   3559 ;---------------------
      002AA8                       3560 usr:
      002AA8 CD 19 69         [ 4] 3561 	call func_args 
      002AAB A1 02            [ 1] 3562 	cp a,#2
      002AAD 27 03            [ 1] 3563 	jreq 1$  
      002AAF CC 16 48         [ 2] 3564 	jp syntax_error 
      002AB2                       3565 1$: 
      002AB2                       3566 	_at_next ; A:X addr 
      002AB2 90 E6 03         [ 1]    1     ld a,(3,y)
      002AB5 93               [ 1]    2     ldw x,y 
      002AB6 EE 04            [ 2]    3     ldw x,(4,x)
      002AB8 CF 00 19         [ 2] 3567 	ldw ptr16,X 
      002ABB                       3568 	_xpop  ; arg 
      002ABB 90 F6            [ 1]    1     ld a,(y)
      002ABD 93               [ 1]    2     ldw x,y 
      002ABE EE 01            [ 2]    3     ldw x,(1,x)
      002AC0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AC4                       3569 	_store_top ; overwrite addr 
      002AC4 90 F7            [ 1]    1     ld (y),a 
      002AC6 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AC9 72 CD 00 19      [ 6] 3570     call [ptr16]
      002ACD 81               [ 4] 3571 	ret 
                                   3572 
                                   3573 
                                   3574 ;------------------------------
                                   3575 ; BASIC: BYE 
                                   3576 ; halt mcu in its lowest power mode 
                                   3577 ; wait for reset or external interrupt
                                   3578 ; do a cold start on wakeup.
                                   3579 ;------------------------------
      002ACE                       3580 bye:
      002ACE 72 0D 52 30 FB   [ 2] 3581 	btjf UART1_SR,#UART_SR_TC,.
      002AD3 8E               [10] 3582 	halt
      002AD4 CC 00 C3         [ 2] 3583 	jp cold_start  
                                   3584 
                                   3585 ;----------------------------------
                                   3586 ; BASIC: SLEEP 
                                   3587 ; halt mcu until reset or external
                                   3588 ; interrupt.
                                   3589 ; Resume progam after SLEEP command
                                   3590 ;----------------------------------
      002AD7                       3591 sleep:
      002AD7 72 0D 52 30 FB   [ 2] 3592 	btjf UART1_SR,#UART_SR_TC,.
      002ADC 72 16 00 22      [ 1] 3593 	bset flags,#FSLEEP
      002AE0 8E               [10] 3594 	halt 
      002AE1 81               [ 4] 3595 	ret 
                                   3596 
                                   3597 ;-------------------------------
                                   3598 ; BASIC: PAUSE expr 
                                   3599 ; suspend execution for n msec.
                                   3600 ; input:
                                   3601 ;	none
                                   3602 ; output:
                                   3603 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3604 ;------------------------------
      002AE2                       3605 pause:
      002AE2 CD 1A C1         [ 4] 3606 	call expression
      002AE5 A1 84            [ 1] 3607 	cp a,#TK_INTGR
      002AE7 27 03            [ 1] 3608 	jreq 1$ 
      002AE9 CC 16 48         [ 2] 3609 	jp syntax_error
      002AEC                       3610 1$: _xpop 
      002AEC 90 F6            [ 1]    1     ld a,(y)
      002AEE 93               [ 1]    2     ldw x,y 
      002AEF EE 01            [ 2]    3     ldw x,(1,x)
      002AF1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AF5                       3611 pause02:
      002AF5 CF 00 12         [ 2] 3612 	ldw timer,x 
      002AF8 CE 00 12         [ 2] 3613 1$: ldw x,timer 
      002AFB 5D               [ 2] 3614 	tnzw x 
      002AFC 27 03            [ 1] 3615 	jreq 2$
      002AFE 8F               [10] 3616 	wfi 
      002AFF 26 F7            [ 1] 3617 	jrne 1$
      002B01                       3618 2$:	
      002B01 81               [ 4] 3619 	ret 
                                   3620 
                                   3621 ;------------------------------
                                   3622 ; BASIC: AWU expr
                                   3623 ; halt mcu for 'expr' milliseconds
                                   3624 ; use Auto wakeup peripheral
                                   3625 ; all oscillators stopped except LSI
                                   3626 ; range: 1ms - 511ms
                                   3627 ; input:
                                   3628 ;  none
                                   3629 ; output:
                                   3630 ;  none:
                                   3631 ;------------------------------
      002B02                       3632 awu:
      002B02 CD 1A C1         [ 4] 3633   call expression
      002B05 A1 84            [ 1] 3634   cp a,#TK_INTGR
      002B07 27 03            [ 1] 3635   jreq 1$
      002B09 CC 16 48         [ 2] 3636   jp syntax_error
      002B0C                       3637 1$: _xpop 
      002B0C 90 F6            [ 1]    1     ld a,(y)
      002B0E 93               [ 1]    2     ldw x,y 
      002B0F EE 01            [ 2]    3     ldw x,(1,x)
      002B11 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B15                       3638 awu02:
      002B15 A3 14 00         [ 2] 3639   cpw x,#5120
      002B18 2B 0C            [ 1] 3640   jrmi 1$ 
      002B1A 35 0F 50 F2      [ 1] 3641   mov AWU_TBR,#15 
      002B1E A6 1E            [ 1] 3642   ld a,#30
      002B20 62               [ 2] 3643   div x,a
      002B21 A6 10            [ 1] 3644   ld a,#16
      002B23 62               [ 2] 3645   div x,a 
      002B24 20 1E            [ 2] 3646   jra 4$
      002B26                       3647 1$: 
      002B26 A3 08 00         [ 2] 3648   cpw x,#2048
      002B29 2B 09            [ 1] 3649   jrmi 2$ 
      002B2B 35 0E 50 F2      [ 1] 3650   mov AWU_TBR,#14
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002B2F A6 50            [ 1] 3651   ld a,#80
      002B31 62               [ 2] 3652   div x,a 
      002B32 20 10            [ 2] 3653   jra 4$   
      002B34                       3654 2$:
      002B34 35 07 50 F2      [ 1] 3655   mov AWU_TBR,#7
      002B38                       3656 3$:  
                                   3657 ; while X > 64  divide by 2 and increment AWU_TBR 
      002B38 A3 00 40         [ 2] 3658   cpw x,#64 
      002B3B 23 07            [ 2] 3659   jrule 4$ 
      002B3D 72 5C 50 F2      [ 1] 3660   inc AWU_TBR 
      002B41 54               [ 2] 3661   srlw x 
      002B42 20 F4            [ 2] 3662   jra 3$ 
      002B44                       3663 4$:
      002B44 9F               [ 1] 3664   ld a, xl
      002B45 4A               [ 1] 3665   dec a 
      002B46 27 01            [ 1] 3666   jreq 5$
      002B48 4A               [ 1] 3667   dec a 	
      002B49                       3668 5$: 
      002B49 A4 3E            [ 1] 3669   and a,#0x3e 
      002B4B C7 50 F1         [ 1] 3670   ld AWU_APR,a 
      002B4E 72 18 50 F0      [ 1] 3671   bset AWU_CSR,#AWU_CSR_AWUEN
      002B52 8E               [10] 3672   halt 
                                   3673 
      002B53 81               [ 4] 3674   ret 
                                   3675 
                                   3676 ;------------------------------
                                   3677 ; BASIC: TICKS
                                   3678 ; return msec ticks counter value 
                                   3679 ; input:
                                   3680 ; 	none 
                                   3681 ; output:
                                   3682 ;	X 		TK_INTGR
                                   3683 ;-------------------------------
      002B54                       3684 get_ticks:
      002B54 C6 00 0F         [ 1] 3685 	ld a,ticks 
      002B57 CE 00 10         [ 2] 3686 	ldw x,ticks+1 
      002B5A 81               [ 4] 3687 	ret 
                                   3688 
                                   3689 ;------------------------------
                                   3690 ; BASIC: ABS(expr)
                                   3691 ; return absolute value of expr.
                                   3692 ; input:
                                   3693 ;   none
                                   3694 ; output:
                                   3695 ;   xstack    positive int24 
                                   3696 ;-------------------------------
      002B5B                       3697 abs:
      002B5B CD 19 69         [ 4] 3698 	call func_args 
      002B5E A1 01            [ 1] 3699 	cp a,#1 
      002B60 27 03            [ 1] 3700 	jreq 0$ 
      002B62 CC 16 48         [ 2] 3701 	jp syntax_error
      002B65                       3702 0$:  
      002B65 CD 01 EE         [ 4] 3703 	call abs24 
      002B68                       3704 	_xpop 
      002B68 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B6A 93               [ 1]    2     ldw x,y 
      002B6B EE 01            [ 2]    3     ldw x,(1,x)
      002B6D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B71 81               [ 4] 3705 	ret 
                                   3706 
                                   3707 ;------------------------------
                                   3708 ; BASIC: LSHIFT(expr1,expr2)
                                   3709 ; logical shift left expr1 by 
                                   3710 ; expr2 bits 
                                   3711 ; output:
                                   3712 ; 	A:x 	result 
                                   3713 ;------------------------------
      002B72                       3714 lshift:
      002B72 CD 19 69         [ 4] 3715 	call func_args
      002B75 A1 02            [ 1] 3716 	cp a,#2 
      002B77 27 03            [ 1] 3717 	jreq 1$
      002B79 CC 16 48         [ 2] 3718 	jp syntax_error
      002B7C                       3719 1$: _xpop 
      002B7C 90 F6            [ 1]    1     ld a,(y)
      002B7E 93               [ 1]    2     ldw x,y 
      002B7F EE 01            [ 2]    3     ldw x,(1,x)
      002B81 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B85 9F               [ 1] 3720 	ld a,xl 
      002B86 88               [ 1] 3721 	push a      
      002B87                       3722 	_xpop  ; T>A:X 
      002B87 90 F6            [ 1]    1     ld a,(y)
      002B89 93               [ 1]    2     ldw x,y 
      002B8A EE 01            [ 2]    3     ldw x,(1,x)
      002B8C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B90 0D 01            [ 1] 3723 	tnz (1,sp) 
      002B92 27 07            [ 1] 3724 	jreq 4$
      002B94 98               [ 1] 3725 2$:	rcf 
      002B95 59               [ 2] 3726 	rlcw x 
      002B96 49               [ 1] 3727 	rlc a 
      002B97 0A 01            [ 1] 3728 	dec (1,sp) 
      002B99 26 F9            [ 1] 3729 	jrne 2$
      002B9B                       3730 4$: _drop 1 
      002B9B 5B 01            [ 2]    1     addw sp,#1 
      002B9D 81               [ 4] 3731 	ret
                                   3732 
                                   3733 ;------------------------------
                                   3734 ; BASIC: RSHIFT(expr1,expr2)
                                   3735 ; logical shift right expr1 by 
                                   3736 ; expr2 bits.
                                   3737 ; output:
                                   3738 ; 	A 		TK_INTGR
                                   3739 ;   X 		result 
                                   3740 ;------------------------------
      002B9E                       3741 rshift:
      002B9E CD 19 69         [ 4] 3742 	call func_args
      002BA1 A1 02            [ 1] 3743 	cp a,#2 
      002BA3 27 03            [ 1] 3744 	jreq 1$
      002BA5 CC 16 48         [ 2] 3745 	jp syntax_error
      002BA8                       3746 1$: _xpop ; T>A:X
      002BA8 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002BAA 93               [ 1]    2     ldw x,y 
      002BAB EE 01            [ 2]    3     ldw x,(1,x)
      002BAD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BB1 9F               [ 1] 3747     ld a,xl 
      002BB2 88               [ 1] 3748 	push a    
      002BB3                       3749 	_xpop  
      002BB3 90 F6            [ 1]    1     ld a,(y)
      002BB5 93               [ 1]    2     ldw x,y 
      002BB6 EE 01            [ 2]    3     ldw x,(1,x)
      002BB8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BBC 0D 01            [ 1] 3750 	tnz (1,sp)
      002BBE 27 07            [ 1] 3751 	jreq 4$
      002BC0 98               [ 1] 3752 2$:	rcf 
      002BC1 46               [ 1] 3753 	rrc a 
      002BC2 56               [ 2] 3754 	rrcw x 
      002BC3 0A 01            [ 1] 3755 	dec (1,sp) 
      002BC5 26 F9            [ 1] 3756 	jrne 2$
      002BC7                       3757 4$: _drop 1 
      002BC7 5B 01            [ 2]    1     addw sp,#1 
      002BC9 81               [ 4] 3758 	ret
                                   3759 
                                   3760 ;--------------------------
                                   3761 ; BASIC: FCPU integer
                                   3762 ; set CPU frequency 
                                   3763 ;-------------------------- 
                                   3764 
      002BCA                       3765 fcpu:
      002BCA A6 84            [ 1] 3766 	ld a,#TK_INTGR
      002BCC CD 19 5C         [ 4] 3767 	call expect 
      002BCF CD 17 D8         [ 4] 3768 	call get_int24 
      002BD2 9F               [ 1] 3769 	ld a,xl 
      002BD3 A4 07            [ 1] 3770 	and a,#7 
      002BD5 C7 50 C6         [ 1] 3771 	ld CLK_CKDIVR,a 
      002BD8 81               [ 4] 3772 	ret 
                                   3773 
                                   3774 ;------------------------------
                                   3775 ; BASIC: PMODE pin#, mode 
                                   3776 ; Arduino pin. 
                                   3777 ; define pin as input or output
                                   3778 ; pin#: {0..15}
                                   3779 ; mode: INPUT|OUTPUT  
                                   3780 ;------------------------------
                           000001  3781 	PINNO=1
                           000001  3782 	VSIZE=1
      002BD9                       3783 pin_mode:
      002BD9                       3784 	_vars VSIZE 
      002BD9 52 01            [ 2]    1     sub sp,#VSIZE 
      002BDB CD 19 6E         [ 4] 3785 	call arg_list 
      002BDE A1 02            [ 1] 3786 	cp a,#2 
      002BE0 27 03            [ 1] 3787 	jreq 1$
      002BE2 CC 16 48         [ 2] 3788 	jp syntax_error 
      002BE5                       3789 1$: _xpop 
      002BE5 90 F6            [ 1]    1     ld a,(y)
      002BE7 93               [ 1]    2     ldw x,y 
      002BE8 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002BEA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BEE CF 00 19         [ 2] 3790 	ldw ptr16,x ; mode 
      002BF1                       3791 	_xpop ; Dx pin 
      002BF1 90 F6            [ 1]    1     ld a,(y)
      002BF3 93               [ 1]    2     ldw x,y 
      002BF4 EE 01            [ 2]    3     ldw x,(1,x)
      002BF6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BFA CD 2C 38         [ 4] 3792 	call select_pin 
      002BFD 6B 01            [ 1] 3793 	ld (PINNO,sp),a  
      002BFF A6 01            [ 1] 3794 	ld a,#1 
      002C01 0D 01            [ 1] 3795 	tnz (PINNO,sp)
      002C03 27 0D            [ 1] 3796 	jreq 4$
      002C05 48               [ 1] 3797 2$:	sll a 
      002C06 0A 01            [ 1] 3798 	dec (PINNO,sp)
      002C08 26 FB            [ 1] 3799 	jrne 2$ 
      002C0A 6B 01            [ 1] 3800 	ld (PINNO,sp),a
      002C0C 7B 01            [ 1] 3801 	ld a,(PINNO,sp)
      002C0E EA 03            [ 1] 3802 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002C10 E7 03            [ 1] 3803 	ld (GPIO_CR1,x),a 
      002C12 A6 01            [ 1] 3804 4$:	ld a,#OUTP
      002C14 C1 00 0E         [ 1] 3805 	cp a,acc8 
      002C17 27 10            [ 1] 3806 	jreq 6$
                                   3807 ; input mode
                                   3808 ; disable external interrupt 
      002C19 7B 01            [ 1] 3809 	ld a,(PINNO,sp)
      002C1B 43               [ 1] 3810 	cpl a 
      002C1C E4 04            [ 1] 3811 	and a,(GPIO_CR2,x)
      002C1E E7 04            [ 1] 3812 	ld (GPIO_CR2,x),a 
                                   3813 ;clear bit in DDR for input mode 
      002C20 7B 01            [ 1] 3814 	ld a,(PINNO,sp)
      002C22 43               [ 1] 3815 	cpl a 
      002C23 E4 02            [ 1] 3816 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002C25 E7 02            [ 1] 3817 	ld (GPIO_DDR,x),a 
      002C27 20 0C            [ 2] 3818 	jra 9$
      002C29                       3819 6$: ;output mode  
      002C29 7B 01            [ 1] 3820 	ld a,(PINNO,sp)
      002C2B EA 02            [ 1] 3821 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002C2D E7 02            [ 1] 3822 	ld (GPIO_DDR,x),a 
      002C2F 7B 01            [ 1] 3823 	ld a,(PINNO,sp)
      002C31 EA 04            [ 1] 3824 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002C33 E7 04            [ 1] 3825 	ld (GPIO_CR2,x),a 
      002C35                       3826 9$:	
      002C35                       3827 	_drop VSIZE 
      002C35 5B 01            [ 2]    1     addw sp,#VSIZE 
      002C37 81               [ 4] 3828 	ret
                                   3829 
                                   3830 ;------------------------
                                   3831 ; select Arduino pin 
                                   3832 ; input:
                                   3833 ;   X 	 {0..15} Arduino Dx 
                                   3834 ; output:
                                   3835 ;   A     stm8s208 pin 
                                   3836 ;   X     base address s208 GPIO port 
                                   3837 ;---------------------------
      002C38                       3838 select_pin:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C38 58               [ 2] 3839 	sllw x 
      002C39 1C 2C 48         [ 2] 3840 	addw x,#arduino_to_8s208 
      002C3C FE               [ 2] 3841 	ldw x,(x)
      002C3D 9F               [ 1] 3842 	ld a,xl 
      002C3E 88               [ 1] 3843 	push a 
      002C3F 5E               [ 1] 3844 	swapw x 
      002C40 A6 05            [ 1] 3845 	ld a,#5 
      002C42 42               [ 4] 3846 	mul x,a 
      002C43 1C 50 00         [ 2] 3847 	addw x,#GPIO_BASE 
      002C46 84               [ 1] 3848 	pop a 
      002C47 81               [ 4] 3849 	ret 
                                   3850 ; translation from Arduino D0..D15 to stm8s208rb 
      002C48                       3851 arduino_to_8s208:
      002C48 03 06                 3852 .byte 3,6 ; D0 
      002C4A 03 05                 3853 .byte 3,5 ; D1 
      002C4C 04 00                 3854 .byte 4,0 ; D2 
      002C4E 02 01                 3855 .byte 2,1 ; D3
      002C50 06 00                 3856 .byte 6,0 ; D4
      002C52 02 02                 3857 .byte 2,2 ; D5
      002C54 02 03                 3858 .byte 2,3 ; D6
      002C56 03 01                 3859 .byte 3,1 ; D7
      002C58 03 03                 3860 .byte 3,3 ; D8
      002C5A 02 04                 3861 .byte 2,4 ; D9
      002C5C 04 05                 3862 .byte 4,5 ; D10
      002C5E 02 06                 3863 .byte 2,6 ; D11
      002C60 02 07                 3864 .byte 2,7 ; D12
      002C62 02 05                 3865 .byte 2,5 ; D13
      002C64 04 02                 3866 .byte 4,2 ; D14
      002C66 04 01                 3867 .byte 4,1 ; D15
                                   3868 
                                   3869 
                                   3870 ;------------------------------
                                   3871 ; BASIC: RND(expr)
                                   3872 ; return random number 
                                   3873 ; between 1 and expr inclusive
                                   3874 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3875 ; input:
                                   3876 ; 	none 
                                   3877 ; output:
                                   3878 ;	xstack 	random positive integer 
                                   3879 ;------------------------------
      002C68                       3880 random:
      002C68 CD 19 69         [ 4] 3881 	call func_args 
      002C6B A1 01            [ 1] 3882 	cp a,#1
      002C6D 27 03            [ 1] 3883 	jreq 1$
      002C6F CC 16 48         [ 2] 3884 	jp syntax_error
      002C72                       3885 1$:  
      002C72                       3886 	_xpop   
      002C72 90 F6            [ 1]    1     ld a,(y)
      002C74 93               [ 1]    2     ldw x,y 
      002C75 EE 01            [ 2]    3     ldw x,(1,x)
      002C77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C7B 89               [ 2] 3887 	pushw x 
      002C7C 88               [ 1] 3888 	push a  
      002C7D A6 80            [ 1] 3889 	ld a,#0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002C7F 15 01            [ 1] 3890 	bcp a,(1,sp)
      002C81 27 05            [ 1] 3891 	jreq 2$
      002C83 A6 0A            [ 1] 3892 	ld a,#ERR_BAD_VALUE
      002C85 CC 16 4A         [ 2] 3893 	jp tb_error
      002C88                       3894 2$: 
                                   3895 ; acc16=(x<<5)^x 
      002C88 CE 00 14         [ 2] 3896 	ldw x,seedx 
      002C8B 58               [ 2] 3897 	sllw x 
      002C8C 58               [ 2] 3898 	sllw x 
      002C8D 58               [ 2] 3899 	sllw x 
      002C8E 58               [ 2] 3900 	sllw x 
      002C8F 58               [ 2] 3901 	sllw x 
      002C90 9E               [ 1] 3902 	ld a,xh 
      002C91 C8 00 14         [ 1] 3903 	xor a,seedx 
      002C94 C7 00 0D         [ 1] 3904 	ld acc16,a 
      002C97 9F               [ 1] 3905 	ld a,xl 
      002C98 C8 00 15         [ 1] 3906 	xor a,seedx+1 
      002C9B C7 00 0E         [ 1] 3907 	ld acc8,a 
                                   3908 ; seedx=seedy 
      002C9E CE 00 16         [ 2] 3909 	ldw x,seedy 
      002CA1 CF 00 14         [ 2] 3910 	ldw seedx,x  
                                   3911 ; seedy=seedy^(seedy>>1)
      002CA4 CE 00 16         [ 2] 3912 	ldw x,seedy 
      002CA7 54               [ 2] 3913 	srlw x 
      002CA8 9E               [ 1] 3914 	ld a,xh 
      002CA9 C8 00 16         [ 1] 3915 	xor a,seedy 
      002CAC C7 00 16         [ 1] 3916 	ld seedy,a  
      002CAF 9F               [ 1] 3917 	ld a,xl 
      002CB0 C8 00 17         [ 1] 3918 	xor a,seedy+1 
      002CB3 C7 00 17         [ 1] 3919 	ld seedy+1,a 
                                   3920 ; acc16>>3 
      002CB6 CE 00 0D         [ 2] 3921 	ldw x,acc16 
      002CB9 54               [ 2] 3922 	srlw x 
      002CBA 54               [ 2] 3923 	srlw x 
      002CBB 54               [ 2] 3924 	srlw x 
                                   3925 ; x=acc16^x 
      002CBC 9E               [ 1] 3926 	ld a,xh 
      002CBD C8 00 0D         [ 1] 3927 	xor a,acc16 
      002CC0 C7 00 0D         [ 1] 3928 	ld acc16,a 
      002CC3 9F               [ 1] 3929 	ld a,xl 
      002CC4 C8 00 0E         [ 1] 3930 	xor a,acc8 
      002CC7 C7 00 0E         [ 1] 3931 	ld acc8,a 
                                   3932 ; seedy=acc16^seedy 
      002CCA C8 00 17         [ 1] 3933 	xor a,seedy+1
      002CCD 97               [ 1] 3934 	ld xl,a 
      002CCE C6 00 0D         [ 1] 3935 	ld a,acc16 
      002CD1 C8 00 16         [ 1] 3936 	xor a,seedy
      002CD4 95               [ 1] 3937 	ld xh,a 
      002CD5 CF 00 16         [ 2] 3938 	ldw seedy,x 
                                   3939 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002CD8 C6 00 15         [ 1] 3940 	ld a,seedx+1
      002CDB A4 7F            [ 1] 3941 	and a,#127
      002CDD                       3942 	_xpush 
      002CDD 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002CE1 90 F7            [ 1]    2     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CE3 90 EF 01         [ 2]    3     ldw (1,y),x 
      002CE6 84               [ 1] 3943 	pop a 
      002CE7 85               [ 2] 3944 	popw x 
      002CE8                       3945 	_xpush 
      002CE8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002CEC 90 F7            [ 1]    2     ld (y),a 
      002CEE 90 EF 01         [ 2]    3     ldw (1,y),x 
      002CF1 CD 03 9C         [ 4] 3946 	call mod24 
      002CF4                       3947 	_xpop
      002CF4 90 F6            [ 1]    1     ld a,(y)
      002CF6 93               [ 1]    2     ldw x,y 
      002CF7 EE 01            [ 2]    3     ldw x,(1,x)
      002CF9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CFD 1C 00 01         [ 2] 3948 	addw x,#1 
      002D00 A9 00            [ 1] 3949 	adc a,#0  
      002D02 81               [ 4] 3950 	ret 
                                   3951 
                                   3952 ;---------------------------------
                                   3953 ; BASIC: WORDS 
                                   3954 ; affiche la listes des mots du
                                   3955 ; dictionnaire ainsi que le nombre
                                   3956 ; de mots.
                                   3957 ;---------------------------------
                           000001  3958 	WLEN=1 ; word length
                           000002  3959 	LLEN=2 ; character sent to console
                           000003  3960 	WCNT=3 ; count words printed 
                           000003  3961 	VSIZE=3 
      002D03                       3962 words:
      002D03 90 89            [ 2] 3963 	pushw y
      002D05                       3964 	_vars VSIZE
      002D05 52 03            [ 2]    1     sub sp,#VSIZE 
      002D07 0F 02            [ 1] 3965 	clr (LLEN,sp)
      002D09 0F 03            [ 1] 3966 	clr (WCNT,sp)
      002D0B 90 AE 34 D8      [ 2] 3967 	ldw y,#kword_dict+2
      002D0F 93               [ 1] 3968 0$:	ldw x,y
      002D10 F6               [ 1] 3969 	ld a,(x)
      002D11 A4 0F            [ 1] 3970 	and a,#15 
      002D13 6B 01            [ 1] 3971 	ld (WLEN,sp),a 
      002D15 0C 03            [ 1] 3972 	inc (WCNT,sp)
      002D17 5C               [ 1] 3973 1$:	incw x 
      002D18 F6               [ 1] 3974 	ld a,(x)
      002D19 CD 09 0B         [ 4] 3975 	call putc 
      002D1C 0C 02            [ 1] 3976 	inc (LLEN,sp)
      002D1E 0A 01            [ 1] 3977 	dec (WLEN,sp)
      002D20 26 F5            [ 1] 3978 	jrne 1$
      002D22 A6 46            [ 1] 3979 	ld a,#70
      002D24 11 02            [ 1] 3980 	cp a,(LLEN,sp)
      002D26 2B 09            [ 1] 3981 	jrmi 2$   
      002D28 A6 20            [ 1] 3982 	ld a,#SPACE 
      002D2A CD 09 0B         [ 4] 3983 	call putc 
      002D2D 0C 02            [ 1] 3984 	inc (LLEN,sp) 
      002D2F 20 07            [ 2] 3985 	jra 3$
      002D31 A6 0D            [ 1] 3986 2$: ld a,#CR 
      002D33 CD 09 0B         [ 4] 3987 	call putc 
      002D36 0F 02            [ 1] 3988 	clr (LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D38 72 A2 00 02      [ 2] 3989 3$:	subw y,#2 
      002D3C 90 FE            [ 2] 3990 	ldw y,(y)
      002D3E 26 CF            [ 1] 3991 	jrne 0$ 
      002D40 A6 0D            [ 1] 3992 	ld a,#CR 
      002D42 CD 09 0B         [ 4] 3993 	call putc  
      002D45 5F               [ 1] 3994 	clrw x 
      002D46 7B 03            [ 1] 3995 	ld a,(WCNT,sp)
      002D48 97               [ 1] 3996 	ld xl,a 
      002D49 CD 17 EE         [ 4] 3997 	call prt_i16 
      002D4C AE 2D 57         [ 2] 3998 	ldw x,#words_count_msg
      002D4F CD 09 68         [ 4] 3999 	call puts 
      002D52                       4000 	_drop VSIZE 
      002D52 5B 03            [ 2]    1     addw sp,#VSIZE 
      002D54 90 85            [ 2] 4001 	popw y 
      002D56 81               [ 4] 4002 	ret 
      002D57 20 77 6F 72 64 73 20  4003 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4004 
                                   4005 
                                   4006 ;-----------------------------
                                   4007 ; BASIC: TIMER expr 
                                   4008 ; initialize count down timer 
                                   4009 ;-----------------------------
      002D6D                       4010 set_timer:
      002D6D CD 19 6E         [ 4] 4011 	call arg_list
      002D70 A1 01            [ 1] 4012 	cp a,#1 
      002D72 27 03            [ 1] 4013 	jreq 1$
      002D74 CC 16 48         [ 2] 4014 	jp syntax_error
      002D77                       4015 1$: 
      002D77                       4016 	_xpop  
      002D77 90 F6            [ 1]    1     ld a,(y)
      002D79 93               [ 1]    2     ldw x,y 
      002D7A EE 01            [ 2]    3     ldw x,(1,x)
      002D7C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D80 CF 00 12         [ 2] 4017 	ldw timer,x 
      002D83 81               [ 4] 4018 	ret 
                                   4019 
                                   4020 ;------------------------------
                                   4021 ; BASIC: TIMEOUT 
                                   4022 ; return state of timer 
                                   4023 ; output:
                                   4024 ;   A:X     0 not timeout 
                                   4025 ;   A:X     -1 timeout 
                                   4026 ;------------------------------
      002D84                       4027 timeout:
      002D84 4F               [ 1] 4028 	clr a 
      002D85 CE 00 12         [ 2] 4029 	ldw x,timer 
      002D88 27 02            [ 1] 4030 	jreq 1$
      002D8A 5F               [ 1] 4031 	clrw x
      002D8B 81               [ 4] 4032 	ret  
      002D8C 43               [ 1] 4033 1$:	cpl a
      002D8D 53               [ 2] 4034 	cplw x 
      002D8E 81               [ 4] 4035 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4036  	
                                   4037 
                                   4038 
                                   4039 
                                   4040 ;-----------------------------------
                                   4041 ; BASIC: IWDGEN expr1 
                                   4042 ; enable independant watchdog timer
                                   4043 ; expr1 is delay in multiple of 62.5µsec
                                   4044 ; expr1 -> {1..16383}
                                   4045 ;-----------------------------------
      002D8F                       4046 enable_iwdg:
      002D8F CD 19 6E         [ 4] 4047 	call arg_list
      002D92 A1 01            [ 1] 4048 	cp a,#1 
      002D94 27 03            [ 1] 4049 	jreq 1$
      002D96 CC 16 48         [ 2] 4050 	jp syntax_error 
      002D99                       4051 1$: _xpop  
      002D99 90 F6            [ 1]    1     ld a,(y)
      002D9B 93               [ 1]    2     ldw x,y 
      002D9C EE 01            [ 2]    3     ldw x,(1,x)
      002D9E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DA2 4B 00            [ 1] 4052 	push #0
      002DA4 35 CC 50 E0      [ 1] 4053 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002DA8 9E               [ 1] 4054 	ld a,xh 
      002DA9 A4 3F            [ 1] 4055 	and a,#0x3f
      002DAB 95               [ 1] 4056 	ld xh,a  
      002DAC A3 00 FF         [ 2] 4057 2$:	cpw x,#255
      002DAF 23 06            [ 2] 4058 	jrule 3$
      002DB1 0C 01            [ 1] 4059 	inc (1,sp)
      002DB3 98               [ 1] 4060 	rcf 
      002DB4 56               [ 2] 4061 	rrcw x 
      002DB5 20 F5            [ 2] 4062 	jra 2$
      002DB7 35 55 50 E0      [ 1] 4063 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002DBB 84               [ 1] 4064 	pop a  
      002DBC C7 50 E1         [ 1] 4065 	ld IWDG_PR,a 
      002DBF 9F               [ 1] 4066 	ld a,xl
      002DC0 4A               [ 1] 4067 	dec a 
      002DC1 35 55 50 E0      [ 1] 4068 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002DC5 C7 50 E2         [ 1] 4069 	ld IWDG_RLR,a 
      002DC8 35 AA 50 E0      [ 1] 4070 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002DCC 81               [ 4] 4071 	ret 
                                   4072 
                                   4073 
                                   4074 ;-----------------------------------
                                   4075 ; BASIC: IWDGREF  
                                   4076 ; refresh independant watchdog count down 
                                   4077 ; timer before it reset MCU. 
                                   4078 ;-----------------------------------
      002DCD                       4079 refresh_iwdg:
      002DCD 35 AA 50 E0      [ 1] 4080 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002DD1 81               [ 4] 4081 	ret 
                                   4082 
                                   4083 
                                   4084 ;-------------------------------------
                                   4085 ; BASIC: LOG2(expr)
                                   4086 ; return logarithm base 2 of expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



                                   4087 ; this is the position of most significant
                                   4088 ; bit set. 
                                   4089 ; input: 
                                   4090 ; output:
                                   4091 ;   A     TK_INTGR 
                                   4092 ;   xstack log2 
                                   4093 ;*********************************
      002DD2                       4094 log2:
      002DD2 CD 19 69         [ 4] 4095 	call func_args 
      002DD5 A1 01            [ 1] 4096 	cp a,#1 
      002DD7 27 03            [ 1] 4097 	jreq 1$
      002DD9 CC 16 48         [ 2] 4098 	jp syntax_error 
      002DDC                       4099 1$: 
      002DDC                       4100 	_xpop    
      002DDC 90 F6            [ 1]    1     ld a,(y)
      002DDE 93               [ 1]    2     ldw x,y 
      002DDF EE 01            [ 2]    3     ldw x,(1,x)
      002DE1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DE5 4D               [ 1] 4101 	tnz a
      002DE6 26 08            [ 1] 4102 	jrne 2$ 
      002DE8 5D               [ 2] 4103 	tnzw x 
      002DE9 26 05            [ 1] 4104 	jrne 2$
      002DEB A6 0A            [ 1] 4105 	ld a,#ERR_BAD_VALUE
      002DED CC 16 4A         [ 2] 4106 	jp tb_error 
      002DF0 4B 18            [ 1] 4107 2$: push #24 
      002DF2 59               [ 2] 4108 3$: rlcw x 
      002DF3 49               [ 1] 4109     rlc a 
      002DF4 25 04            [ 1] 4110 	jrc 4$
      002DF6 0A 01            [ 1] 4111 	dec (1,sp) 
      002DF8 26 F8            [ 1] 4112 	jrne 3$
      002DFA 5F               [ 1] 4113 4$: clrw x 
      002DFB 84               [ 1] 4114     pop a 
      002DFC 4A               [ 1] 4115 	dec a
      002DFD 02               [ 1] 4116 	rlwa x  
      002DFE                       4117 9$:	
      002DFE 81               [ 4] 4118 	ret 
                                   4119 
                                   4120 ;-----------------------------------
                                   4121 ; BASIC: BIT(expr) 
                                   4122 ; expr ->{0..23}
                                   4123 ; return 2^expr 
                                   4124 ; output:
                                   4125 ;    A:X    2^expr 
                                   4126 ;-----------------------------------
      002DFF                       4127 bitmask:
      002DFF CD 19 69         [ 4] 4128     call func_args 
      002E02 A1 01            [ 1] 4129 	cp a,#1
      002E04 27 03            [ 1] 4130 	jreq 1$
      002E06 CC 16 48         [ 2] 4131 	jp syntax_error 
      002E09                       4132 1$: _xpop 
      002E09 90 F6            [ 1]    1     ld a,(y)
      002E0B 93               [ 1]    2     ldw x,y 
      002E0C EE 01            [ 2]    3     ldw x,(1,x)
      002E0E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E12 9F               [ 1] 4133 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002E13 AE 00 01         [ 2] 4134 	ldw x,#1 
      002E16 A4 17            [ 1] 4135 	and a,#23
      002E18 27 0A            [ 1] 4136 	jreq 9$
      002E1A 88               [ 1] 4137 	push a 
      002E1B 4F               [ 1] 4138 	clr a 
      002E1C                       4139 2$: 
      002E1C 58               [ 2] 4140 	slaw x 
      002E1D 49               [ 1] 4141 	rlc a 	
      002E1E 0A 01            [ 1] 4142 	dec (1,sp)
      002E20 26 FA            [ 1] 4143 	jrne 2$ 
      002E22                       4144 4$:
      002E22                       4145     _drop 1 
      002E22 5B 01            [ 2]    1     addw sp,#1 
      002E24 81               [ 4] 4146 9$:	ret 
                                   4147 
                                   4148 ;------------------------------
                                   4149 ; BASIC: DO 
                                   4150 ; initiate a DO ... UNTIL loop 
                                   4151 ;------------------------------
                           000003  4152 	DOLP_ADR=3 
                           000005  4153 	DOLP_INW=5
                           000004  4154 	VSIZE=4 
      002E25                       4155 do_loop:
      002E25 85               [ 2] 4156 	popw x 
      002E26                       4157 	_vars VSIZE 
      002E26 52 04            [ 2]    1     sub sp,#VSIZE 
      002E28 89               [ 2] 4158 	pushw x 
      002E29 CE 00 04         [ 2] 4159 	ldw x,basicptr 
      002E2C 1F 03            [ 2] 4160 	ldw (DOLP_ADR,sp),x
      002E2E CE 00 00         [ 2] 4161 	ldw x,in.w 
      002E31 1F 05            [ 2] 4162 	ldw (DOLP_INW,sp),x
      002E33 72 5C 00 1F      [ 1] 4163 	inc loop_depth 
      002E37 81               [ 4] 4164 	ret 
                                   4165 
                                   4166 ;--------------------------------
                                   4167 ; BASIC: UNTIL expr 
                                   4168 ; loop if exprssion is false 
                                   4169 ; else terminate loop
                                   4170 ;--------------------------------
      002E38                       4171 until: 
      002E38 72 5D 00 1F      [ 1] 4172 	tnz loop_depth 
      002E3C 26 03            [ 1] 4173 	jrne 1$ 
      002E3E CC 16 48         [ 2] 4174 	jp syntax_error 
      002E41                       4175 1$: 
      002E41 CD 1B DA         [ 4] 4176 	call condition  
      002E44                       4177 	_xpop 
      002E44 90 F6            [ 1]    1     ld a,(y)
      002E46 93               [ 1]    2     ldw x,y 
      002E47 EE 01            [ 2]    3     ldw x,(1,x)
      002E49 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E4D 4D               [ 1] 4178 	tnz a 
      002E4E 26 13            [ 1] 4179 	jrne 9$ 
      002E50 5D               [ 2] 4180 	tnzw x 
      002E51 26 10            [ 1] 4181 	jrne 9$ 
      002E53 1E 03            [ 2] 4182 	ldw x,(DOLP_ADR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002E55 CF 00 04         [ 2] 4183 	ldw basicptr,x 
      002E58 E6 02            [ 1] 4184 	ld a,(2,x)
      002E5A C7 00 03         [ 1] 4185 	ld count,a 
      002E5D 1E 05            [ 2] 4186 	ldw x,(DOLP_INW,sp)
      002E5F CF 00 00         [ 2] 4187 	ldw in.w,x 
      002E62 81               [ 4] 4188 	ret 
      002E63                       4189 9$:	; remove loop data from stack  
      002E63 85               [ 2] 4190 	popw x
      002E64                       4191 	_drop VSIZE
      002E64 5B 04            [ 2]    1     addw sp,#VSIZE 
      002E66 72 5A 00 1F      [ 1] 4192 	dec loop_depth 
      002E6A FC               [ 2] 4193 	jp (x)
                                   4194 
                                   4195 ;--------------------------
                                   4196 ; BASIC: PORTA...PORTI  
                                   4197 ;  return constant value 
                                   4198 ;  PORT  base address 
                                   4199 ;---------------------------
      002E6B                       4200 const_porta:
      002E6B AE 50 00         [ 2] 4201 	ldw x,#PA_BASE 
      002E6E 4F               [ 1] 4202 	clr a 
      002E6F 81               [ 4] 4203 	ret 
      002E70                       4204 const_portb:
      002E70 AE 50 05         [ 2] 4205 	ldw x,#PB_BASE 
      002E73 4F               [ 1] 4206 	clr a 
      002E74 81               [ 4] 4207 	ret 
      002E75                       4208 const_portc:
      002E75 AE 50 0A         [ 2] 4209 	ldw x,#PC_BASE 
      002E78 4F               [ 1] 4210 	clr a 
      002E79 81               [ 4] 4211 	ret 
      002E7A                       4212 const_portd:
      002E7A AE 50 0F         [ 2] 4213 	ldw x,#PD_BASE 
      002E7D 4F               [ 1] 4214 	clr a 
      002E7E 81               [ 4] 4215 	ret 
      002E7F                       4216 const_porte:
      002E7F AE 50 14         [ 2] 4217 	ldw x,#PE_BASE 
      002E82 4F               [ 1] 4218 	clr a 
      002E83 81               [ 4] 4219 	ret 
      002E84                       4220 const_portf:
      002E84 AE 50 19         [ 2] 4221 	ldw x,#PF_BASE 
      002E87 4F               [ 1] 4222 	clr a 
      002E88 81               [ 4] 4223 	ret 
      002E89                       4224 const_portg:
      002E89 AE 50 1E         [ 2] 4225 	ldw x,#PG_BASE 
      002E8C 4F               [ 1] 4226 	clr a 
      002E8D 81               [ 4] 4227 	ret 
      002E8E                       4228 const_porti:
      002E8E AE 50 28         [ 2] 4229 	ldw x,#PI_BASE 
      002E91 4F               [ 1] 4230 	clr a 
      002E92 81               [ 4] 4231 	ret 
                                   4232 
                                   4233 ;-------------------------------
                                   4234 ; following return constant 
                                   4235 ; related to GPIO register offset 
                                   4236 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002E93                       4237 const_odr:
      002E93 4F               [ 1] 4238 	clr a 
      002E94 AE 00 00         [ 2] 4239 	ldw x,#GPIO_ODR
      002E97 81               [ 4] 4240 	ret 
      002E98                       4241 const_idr:
      002E98 4F               [ 1] 4242 	clr a 
      002E99 AE 00 01         [ 2] 4243 	ldw x,#GPIO_IDR
      002E9C 81               [ 4] 4244 	ret 
      002E9D                       4245 const_ddr:
      002E9D 4F               [ 1] 4246 	clr a
      002E9E AE 00 02         [ 2] 4247 	ldw x,#GPIO_DDR
      002EA1 81               [ 4] 4248 	ret 
      002EA2                       4249 const_cr1:
      002EA2 4F               [ 1] 4250 	clr a 
      002EA3 AE 00 03         [ 2] 4251 	ldw x,#GPIO_CR1
      002EA6 81               [ 4] 4252 	ret 
      002EA7                       4253 const_cr2:
      002EA7 4F               [ 1] 4254 	clr a
      002EA8 AE 00 04         [ 2] 4255 	ldw x,#GPIO_CR2
      002EAB 81               [ 4] 4256 	ret 
                                   4257 ;-------------------------
                                   4258 ; BASIC: POUT 
                                   4259 ;  constant for port mode
                                   4260 ;  used by PMODE 
                                   4261 ;  to set pin as output
                                   4262 ;------------------------
      002EAC                       4263 const_output:
      002EAC 4F               [ 1] 4264 	clr a 
      002EAD AE 00 01         [ 2] 4265 	ldw x,#OUTP
      002EB0 81               [ 4] 4266 	ret 
                                   4267 
                                   4268 ;-------------------------
                                   4269 ; BASIC: PINP 
                                   4270 ;  constant for port mode
                                   4271 ;  used by PMODE 
                                   4272 ;  to set pin as input
                                   4273 ;------------------------
      002EB1                       4274 const_input:
      002EB1 4F               [ 1] 4275 	clr a  
      002EB2 AE 00 00         [ 2] 4276 	ldw x,#INP 
      002EB5 81               [ 4] 4277 	ret 
                                   4278 	
                                   4279 ;-----------------------
                                   4280 ; memory area constants
                                   4281 ;-----------------------
      002EB6                       4282 const_eeprom_base:
      002EB6 4F               [ 1] 4283 	clr a  
      002EB7 AE 40 00         [ 2] 4284 	ldw x,#EEPROM_BASE 
      002EBA 81               [ 4] 4285 	ret 
                                   4286 
                                   4287 ;---------------------------
                                   4288 ; BASIC: DATA 
                                   4289 ; when the interpreter find 
                                   4290 ; a DATA line it skip it.
                                   4291 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002EBB                       4292 data:
      002EBB 55 00 03 00 01   [ 1] 4293 	mov in,count 
      002EC0 81               [ 4] 4294 	ret 
                                   4295 
                                   4296 ;------------------------------
                                   4297 ; check if it is a DATA line 
                                   4298 ; input: 
                                   4299 ;    X    line address 
                                   4300 ; output:
                                   4301 ;    Z    set if DATA line 
                                   4302 ;----------------------------
      002EC1                       4303 is_data_line:
      002EC1 89               [ 2] 4304 	pushw x 
      002EC2 E6 03            [ 1] 4305 	ld a,(3,x)
      002EC4 A1 80            [ 1] 4306 	cp a,#TK_CMD 
      002EC6 26 05            [ 1] 4307 	jrne 9$
      002EC8 EE 04            [ 2] 4308 	ldw x,(4,x)
      002ECA A3 2E BB         [ 2] 4309 	cpw x,#data  
      002ECD 85               [ 2] 4310 9$: popw x 
      002ECE 81               [ 4] 4311 	ret 
                                   4312 
                                   4313 ;---------------------------------
                                   4314 ; BASIC: RESTORE [line#]
                                   4315 ; set data_ptr to first data line
                                   4316 ; if no DATA found pointer set to
                                   4317 ; zero.
                                   4318 ; if a line# is given as argument 
                                   4319 ; a data line with that number 
                                   4320 ; is searched and the data pointer 
                                   4321 ; is set to it. If there is no 
                                   4322 ; data line with that number 
                                   4323 ; the program is interrupted. 
                                   4324 ;---------------------------------
      002ECF                       4325 restore:
      002ECF 5F               [ 1] 4326 	clrw x 
      002ED0 CF 00 06         [ 2] 4327 	ldw data_ptr,x 
      002ED3 CF 00 08         [ 2] 4328 	ldw data_ofs,x 
      002ED6 CE 00 1B         [ 2] 4329 	ldw x,txtbgn 
      002ED9 CD 17 A6         [ 4] 4330 	call next_token 
      002EDC A1 84            [ 1] 4331 	cp a,#TK_INTGR
      002EDE 26 10            [ 1] 4332 	jrne 0$
      002EE0 CD 17 D8         [ 4] 4333 	call get_int24
      002EE3 90 89            [ 2] 4334 	pushw y 
      002EE5 4F               [ 1] 4335 	clr a 
      002EE6 CD 0C 45         [ 4] 4336 	call search_lineno  
      002EE9 90 85            [ 2] 4337 	popw y 
      002EEB 5D               [ 2] 4338 	tnzw x 
      002EEC 26 17            [ 1] 4339 	jrne set_data_pointer 
      002EEE 20 44            [ 2] 4340 	jra data_error 
      002EF0                       4341 0$:
      002EF0                       4342 	_unget_token  
      002EF0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4343 ; search first DATA line 	
      002EF5 C3 00 1D         [ 2] 4344 1$:	cpw x,txtend
      002EF8 24 3A            [ 1] 4345 	jruge data_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002EFA                       4346 2$:	
      002EFA CD 2E C1         [ 4] 4347 	call is_data_line 
      002EFD 26 00            [ 1] 4348 	jrne 4$
      002EFF CD 2F 12         [ 4] 4349 4$:	call try_next_line 
      002F02 26 FB            [ 1] 4350 	jrne 4$ 
      002F04 81               [ 4] 4351 	ret 
                                   4352 
                                   4353 ;---------------------
                                   4354 ; set data pointer 
                                   4355 ; variables at new line 
                                   4356 ; input:
                                   4357 ;    X    line address 
                                   4358 ;----------------------
      002F05                       4359 set_data_pointer:
      002F05 CF 00 06         [ 2] 4360 	ldw data_ptr,x
      002F08 E6 02            [ 1] 4361 	ld a,(2,x)
      002F0A C7 00 09         [ 1] 4362 	ld data_len,a 
      002F0D 35 06 00 08      [ 1] 4363 	mov data_ofs,#FIRST_DATA_ITEM
      002F11 81               [ 4] 4364 	ret 
                                   4365 
                                   4366 
                                   4367 ;--------------------
                                   4368 ; at end of data line 
                                   4369 ; check if next line 
                                   4370 ; is a data line 
                                   4371 ; input:
                                   4372 ;    X   actual line address 
                                   4373 ;  
                                   4374 ;-------------------
      002F12                       4375 try_next_line: 
      002F12 E6 02            [ 1] 4376 	ld a,(2,x)
      002F14 C7 00 0E         [ 1] 4377 	ld acc8,a 
      002F17 72 5F 00 0D      [ 1] 4378 	clr acc16 
      002F1B 72 BB 00 0D      [ 2] 4379 	addw x,acc16 
      002F1F C3 00 1D         [ 2] 4380 	cpw x,txtend 
      002F22 25 02            [ 1] 4381 	jrult 1$
      002F24 20 0E            [ 2] 4382 	jra data_error 
      002F26                       4383 1$:	
      002F26 CD 2E C1         [ 4] 4384 	call is_data_line 
      002F29 27 04            [ 1] 4385 	jreq 2$
      002F2B A6 01            [ 1] 4386 	ld a,#1  
      002F2D 20 04            [ 2] 4387 	jra 9$
      002F2F CD 2F 05         [ 4] 4388 2$:	call set_data_pointer
      002F32 4F               [ 1] 4389 	clr a  
      002F33 81               [ 4] 4390 9$:	ret 
      002F34                       4391 data_error:	
      002F34 A6 0C            [ 1] 4392     ld a,#ERR_NO_DATA 
      002F36 CC 16 4A         [ 2] 4393 	jp tb_error 
                                   4394 
                                   4395 
                                   4396 ;---------------------------------
                                   4397 ; BASIC: READ 
                                   4398 ; return next data item | 0 
                                   4399 ;---------------------------------
                           000001  4400 	CTX_BPTR=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                           000003  4401 	CTX_IN=3 
                           000004  4402 	CTX_COUNT=4 
                           000005  4403 	INT24=5
                           000007  4404 	VSIZE=7 
      002F39                       4405 read:
      002F39                       4406 	_vars  VSIZE 
      002F39 52 07            [ 2]    1     sub sp,#VSIZE 
      002F3B CD 21 38         [ 4] 4407 	call save_context
      002F3E                       4408 read01:	
      002F3E C6 00 08         [ 1] 4409 	ld a,data_ofs
      002F41 C1 00 09         [ 1] 4410 	cp a,data_len 
      002F44 27 37            [ 1] 4411 	jreq 2$ ; end of line  
      002F46                       4412 0$:
      002F46 CE 00 06         [ 2] 4413 	ldw x,data_ptr 
      002F49 CF 00 04         [ 2] 4414 	ldw basicptr,x 
      002F4C 55 00 08 00 01   [ 1] 4415 	mov in,data_ofs 
      002F51 55 00 09 00 03   [ 1] 4416 	mov count,data_len  
      002F56 CD 1A C1         [ 4] 4417 	call expression 
      002F59 A1 84            [ 1] 4418 	cp a,#TK_INTGR 
      002F5B 27 03            [ 1] 4419 	jreq 1$ 
      002F5D CC 16 48         [ 2] 4420 	jp syntax_error 
      002F60                       4421 1$:
      002F60 CD 17 A6         [ 4] 4422 	call next_token ; skip comma
      002F63 CE 00 04         [ 2] 4423 	ldw x,basicptr 
      002F66 CF 00 06         [ 2] 4424 	ldw data_ptr,x 
      002F69 55 00 01 00 08   [ 1] 4425 	mov data_ofs,in 
      002F6E CD 21 48         [ 4] 4426 	call rest_context
      002F71                       4427 	_xpop 
      002F71 90 F6            [ 1]    1     ld a,(y)
      002F73 93               [ 1]    2     ldw x,y 
      002F74 EE 01            [ 2]    3     ldw x,(1,x)
      002F76 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F7A                       4428 	_drop VSIZE 
      002F7A 5B 07            [ 2]    1     addw sp,#VSIZE 
      002F7C 81               [ 4] 4429 	ret 
      002F7D                       4430 2$: ; end of line reached 
                                   4431 	; try next line 
      002F7D CE 00 06         [ 2] 4432 	ldw x,data_ptr  
      002F80 CD 2F 12         [ 4] 4433 	call try_next_line
      002F83 27 C1            [ 1] 4434 	jreq 0$ 
      002F85 20 AD            [ 2] 4435 	jra data_error 
                                   4436 
                                   4437 ;---------------------------------
                                   4438 ; BASIC: SPIEN clkdiv, 0|1  
                                   4439 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4440 ; if clkdiv==-1 disable SPI
                                   4441 ; 0|1 -> disable|enable  
                                   4442 ;--------------------------------- 
                           000005  4443 SPI_CS_BIT=5
      002F87                       4444 spi_enable:
      002F87 CD 19 6E         [ 4] 4445 	call arg_list 
      002F8A A1 02            [ 1] 4446 	cp a,#2
      002F8C 27 03            [ 1] 4447 	jreq 1$
      002F8E CC 16 48         [ 2] 4448 	jp syntax_error 
      002F91                       4449 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002F91 72 12 50 C7      [ 1] 4450 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002F95 85               [ 2] 4451 	popw x  
      002F96 5D               [ 2] 4452 	tnzw x 
      002F97 27 21            [ 1] 4453 	jreq spi_disable 
      002F99 85               [ 2] 4454 	popw x 
      002F9A A6 08            [ 1] 4455 	ld a,#(1<<SPI_CR1_BR)
      002F9C 42               [ 4] 4456 	mul x,a 
      002F9D 9F               [ 1] 4457 	ld a,xl 
      002F9E C7 52 00         [ 1] 4458 	ld SPI_CR1,a 
                                   4459 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002FA1 72 1A 50 14      [ 1] 4460 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002FA5 72 1A 50 16      [ 1] 4461 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4462 ; configure SPI as master mode 0.	
      002FA9 72 14 52 00      [ 1] 4463 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4464 ; ~CS line controlled by sofware 	
      002FAD 72 12 52 01      [ 1] 4465 	bset SPI_CR2,#SPI_CR2_SSM 
      002FB1 72 10 52 01      [ 1] 4466     bset SPI_CR2,#SPI_CR2_SSI 
                                   4467 ; enable SPI
      002FB5 72 1C 52 00      [ 1] 4468 	bset SPI_CR1,#SPI_CR1_SPE 	
      002FB9 81               [ 4] 4469 	ret 
      002FBA                       4470 spi_disable:
      002FBA                       4471 	_drop #2; throw first argument.
      002FBA 5B 02            [ 2]    1     addw sp,##2 
                                   4472 ; wait spi idle 
      002FBC A6 82            [ 1] 4473 1$:	ld a,#0x82 
      002FBE C4 52 03         [ 1] 4474 	and a,SPI_SR
      002FC1 A1 02            [ 1] 4475 	cp a,#2 
      002FC3 26 F7            [ 1] 4476 	jrne 1$
      002FC5 72 1D 52 00      [ 1] 4477 	bres SPI_CR1,#SPI_CR1_SPE
      002FC9 72 13 50 C7      [ 1] 4478 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002FCD 72 1B 50 16      [ 1] 4479 	bres PE_DDR,#SPI_CS_BIT 
      002FD1 81               [ 4] 4480 	ret 
                                   4481 
      002FD2                       4482 spi_clear_error:
      002FD2 A6 78            [ 1] 4483 	ld a,#0x78 
      002FD4 C5 52 03         [ 1] 4484 	bcp a,SPI_SR 
      002FD7 27 04            [ 1] 4485 	jreq 1$
      002FD9 72 5F 52 03      [ 1] 4486 	clr SPI_SR 
      002FDD 81               [ 4] 4487 1$: ret 
                                   4488 
      002FDE                       4489 spi_send_byte:
      002FDE 88               [ 1] 4490 	push a 
      002FDF CD 2F D2         [ 4] 4491 	call spi_clear_error
      002FE2 84               [ 1] 4492 	pop a 
      002FE3 72 03 52 03 FB   [ 2] 4493 	btjf SPI_SR,#SPI_SR_TXE,.
      002FE8 C7 52 04         [ 1] 4494 	ld SPI_DR,a
      002FEB 72 01 52 03 FB   [ 2] 4495 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002FF0 C6 52 04         [ 1] 4496 	ld a,SPI_DR 
      002FF3 81               [ 4] 4497 	ret 
                                   4498 
      002FF4                       4499 spi_rcv_byte:
      002FF4 A6 FF            [ 1] 4500 	ld a,#255
      002FF6 72 01 52 03 E3   [ 2] 4501 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002FFB C6 52 04         [ 1] 4502 	ld a,SPI_DR 
      002FFE 81               [ 4] 4503 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



                                   4504 
                                   4505 ;------------------------------
                                   4506 ; BASIC: SPIWR byte [,byte]
                                   4507 ; write 1 or more byte
                                   4508 ;------------------------------
      002FFF                       4509 spi_write:
      002FFF CD 1A C1         [ 4] 4510 	call expression
      003002 A1 84            [ 1] 4511 	cp a,#TK_INTGR 
      003004 27 03            [ 1] 4512 	jreq 1$
      003006 CC 16 48         [ 2] 4513 	jp syntax_error 
      003009                       4514 1$:	
      003009 9F               [ 1] 4515 	ld a,xl 
      00300A CD 2F DE         [ 4] 4516 	call spi_send_byte 
      00300D CD 17 A6         [ 4] 4517 	call next_token 
      003010 A1 08            [ 1] 4518 	cp a,#TK_COMMA 
      003012 26 02            [ 1] 4519 	jrne 2$ 
      003014 20 E9            [ 2] 4520 	jra spi_write 
      003016 4D               [ 1] 4521 2$:	tnz a 
      003017 27 05            [ 1] 4522 	jreq 3$
      003019                       4523 	_unget_token  
      003019 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00301E 81               [ 4] 4524 3$:	ret 
                                   4525 
                                   4526 
                                   4527 ;-------------------------------
                                   4528 ; BASIC: SPIRD 	
                                   4529 ; read one byte from SPI 
                                   4530 ;-------------------------------
      00301F                       4531 spi_read:
      00301F CD 2F F4         [ 4] 4532 	call spi_rcv_byte 
      003022 5F               [ 1] 4533 	clrw x 
      003023 97               [ 1] 4534 	ld xl,a 
      003024 4F               [ 1] 4535 	clr a  
      003025 81               [ 4] 4536 	ret 
                                   4537 
                                   4538 ;------------------------------
                                   4539 ; BASIC: SPISEL 0|1 
                                   4540 ; set state of ~CS line
                                   4541 ; 0|1 deselect|select  
                                   4542 ;------------------------------
      003026                       4543 spi_select:
      003026 CD 17 A6         [ 4] 4544 	call next_token 
      003029 A1 84            [ 1] 4545 	cp a,#TK_INTGR 
      00302B 27 03            [ 1] 4546 	jreq 1$
      00302D CC 16 48         [ 2] 4547 	jp syntax_error 
      003030 5D               [ 2] 4548 1$: tnzw x  
      003031 27 05            [ 1] 4549 	jreq cs_high 
      003033 72 1B 50 14      [ 1] 4550 	bres PE_ODR,#SPI_CS_BIT
      003037 81               [ 4] 4551 	ret 
      003038                       4552 cs_high: 
      003038 72 1A 50 14      [ 1] 4553 	bset PE_ODR,#SPI_CS_BIT
      00303C 81               [ 4] 4554 	ret 
                                   4555 
                                   4556 ;-------------------------------
                                   4557 ; BASIC: PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



                                   4558 ; Return pad buffer address.
                                   4559 ;------------------------------
      00303D                       4560 pad_ref:
      00303D AE 16 E0         [ 2] 4561 	ldw x,#pad 
      003040 4F               [ 1] 4562 	clr a
      003041 81               [ 4] 4563 	ret 
                                   4564 
                                   4565 ;****************************
                                   4566 ; expression stack 
                                   4567 ; manipulation routines
                                   4568 ;****************************
                                   4569 
                                   4570 ;-----------------------------
                                   4571 ; BASIC: PUSH expr|rel|cond 
                                   4572 ; push the result on xtack
                                   4573 ;-----------------------------
      003042                       4574 xpush:
      003042 CD 1B DA         [ 4] 4575 	call condition 
      003045 81               [ 4] 4576 	ret 
                                   4577 
                                   4578 ;------------------------------
                                   4579 ; BASIC: POP 
                                   4580 ; pop top of xstack 
                                   4581 ;------------------------------
      003046                       4582 xpop:
      003046                       4583 	_xpop 
      003046 90 F6            [ 1]    1     ld a,(y)
      003048 93               [ 1]    2     ldw x,y 
      003049 EE 01            [ 2]    3     ldw x,(1,x)
      00304B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00304F 81               [ 4] 4584 	ret 
                                   4585 
                                   4586 
                                   4587 ;------------------------------
                                   4588 ; BASIC: ALLOC expr 
                                   4589 ; allocate expr element on xtack 
                                   4590 ;-------------------------------
      003050                       4591 xalloc: 
      003050 CD 1A C1         [ 4] 4592 	call expression 
      003053 A1 84            [ 1] 4593 	cp a,#TK_INTGR
      003055 27 03            [ 1] 4594 	jreq 1$ 
      003057 CC 16 48         [ 2] 4595 	jp syntax_error
      00305A                       4596 1$: _xpop 
      00305A 90 F6            [ 1]    1     ld a,(y)
      00305C 93               [ 1]    2     ldw x,y 
      00305D EE 01            [ 2]    3     ldw x,(1,x)
      00305F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003063 4D               [ 1] 4597 	tnz a 
      003064 27 05            [ 1] 4598 	jreq 3$ 
      003066 A6 0A            [ 1] 4599 2$:	ld a,#ERR_BAD_VALUE
      003068 CC 16 4A         [ 2] 4600 	jp tb_error 
      00306B A3 00 14         [ 2] 4601 3$: cpw x,#XSTACK_SIZE 
      00306E 22 F6            [ 1] 4602 	jrugt 2$
      003070 A6 03            [ 1] 4603 	ld a,#CELL_SIZE 
      003072 42               [ 4] 4604 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003073 CF 00 0D         [ 2] 4605 	ldw acc16,x 
      003076 72 B2 00 0D      [ 2] 4606 	subw y,acc16 
      00307A 90 A3 17 60      [ 2] 4607 	cpw y,#xstack_full
      00307E 22 05            [ 1] 4608 	jrugt 9$
      003080 A6 01            [ 1] 4609 	ld a,#ERR_MEM_FULL
      003082 CC 16 4A         [ 2] 4610 	jp tb_error 
      003085                       4611 9$:	 
      003085 81               [ 4] 4612 	ret 
                                   4613 
                                   4614 
                                   4615 ;------------------------------
                                   4616 ;  BASIC DROP expr 
                                   4617 ;  expr in range {0..XSTACK_SIZE}
                                   4618 ;  discard n elements from xtack
                                   4619 ;------------------------------
      003086                       4620 xdrop:
      003086 CD 1A C1         [ 4] 4621 	call expression 
      003089 A1 84            [ 1] 4622 	cp a,#TK_INTGR
      00308B 27 03            [ 1] 4623 	jreq 1$ 
      00308D CC 16 48         [ 2] 4624 	jp syntax_error 
      003090                       4625 1$:	_xpop 
      003090 90 F6            [ 1]    1     ld a,(y)
      003092 93               [ 1]    2     ldw x,y 
      003093 EE 01            [ 2]    3     ldw x,(1,x)
      003095 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003099 9F               [ 1] 4626 	ld a,xl 
      00309A A4 1F            [ 1] 4627 	and a,#0x1f 
      00309C 5F               [ 1] 4628 	clrw x 
      00309D 97               [ 1] 4629 	ld xl,a 
      00309E A6 03            [ 1] 4630 	ld a,#CELL_SIZE 
      0030A0 42               [ 4] 4631 	mul x,a 
      0030A1 CF 00 0D         [ 2] 4632 	ldw acc16,x  
      0030A4 72 B9 00 0D      [ 2] 4633 	addw y,acc16 
      0030A8 90 A3 17 73      [ 2] 4634 	cpw y,#XSTACK_EMPTY 
      0030AC 23 04            [ 2] 4635 	jrule 9$
      0030AE 90 AE 17 73      [ 2] 4636 	ldw y,#XSTACK_EMPTY 
      0030B2 81               [ 4] 4637 9$:	ret 
                                   4638 
                                   4639 ;-----------------------
                                   4640 ; check if value in A:X 
                                   4641 ; is inside xstack bound
                                   4642 ; output:
                                   4643 ;    X     slot address  
                                   4644 ;-----------------------
      0030B3                       4645 xstack_bound:
      0030B3 4D               [ 1] 4646 	tnz a 
      0030B4 26 16            [ 1] 4647 	jrne 8$ 
      0030B6 A3 00 14         [ 2] 4648 1$: cpw x,#XSTACK_SIZE 
      0030B9 22 11            [ 1] 4649 	jrugt 8$
      0030BB A6 03            [ 1] 4650 	ld a,#CELL_SIZE 
      0030BD 42               [ 4] 4651 	mul x,a
      0030BE CF 00 0D         [ 2] 4652 	ldw acc16,x 
      0030C1 93               [ 1] 4653 	ldw x,y 
      0030C2 72 BB 00 0D      [ 2] 4654 	addw x,acc16 
      0030C6 A3 17 73         [ 2] 4655 	cpw x,#XSTACK_EMPTY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0030C9 24 01            [ 1] 4656 	jruge 8$  
      0030CB 81               [ 4] 4657 	ret 
      0030CC A6 0A            [ 1] 4658 8$: ld a,#ERR_BAD_VALUE
      0030CE CC 16 4A         [ 2] 4659 	jp tb_error 
                                   4660 
                                   4661 ;-------------------------
                                   4662 ; BASIC: PUT expr, cond 
                                   4663 ; expr -> slot 
                                   4664 ; cond -> valut to put 
                                   4665 ; on xstack 
                                   4666 ;-------------------------
      0030D1                       4667 xput:
      0030D1 CD 19 6E         [ 4] 4668 	call arg_list 
      0030D4 A1 02            [ 1] 4669 	cp a,#2 
      0030D6 27 03            [ 1] 4670 	jreq 1$ 
      0030D8 CC 16 48         [ 2] 4671 0$:	jp syntax_error
      0030DB                       4672 1$: _xpop   ; value to put 
      0030DB 90 F6            [ 1]    1     ld a,(y)
      0030DD 93               [ 1]    2     ldw x,y 
      0030DE EE 01            [ 2]    3     ldw x,(1,x)
      0030E0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030E4 89               [ 2] 4673 	pushw x 
      0030E5 88               [ 1] 4674 	push a 
      0030E6                       4675 	_xpop    ; slot 
      0030E6 90 F6            [ 1]    1     ld a,(y)
      0030E8 93               [ 1]    2     ldw x,y 
      0030E9 EE 01            [ 2]    3     ldw x,(1,x)
      0030EB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030EF CD 30 B3         [ 4] 4676 	call xstack_bound
      0030F2 CF 00 19         [ 2] 4677     ldw ptr16,x 
      0030F5 84               [ 1] 4678 	pop a 
      0030F6 85               [ 2] 4679 	popw x 
      0030F7 72 C7 00 19      [ 4] 4680 	ld [ptr16],a 
      0030FB 72 5C 00 1A      [ 1] 4681 	inc ptr8 
      0030FF 72 CF 00 19      [ 5] 4682 	ldw [ptr16],x 
      003103 81               [ 4] 4683 	ret 
                                   4684 
                                   4685 ;------------------------
                                   4686 ; BASIC: PICK expr 
                                   4687 ; get nième element on 
                                   4688 ; xtack. 
                                   4689 ;-----------------------
      003104                       4690 xpick:
      003104 CD 19 69         [ 4] 4691 	call func_args 
      003107 A1 01            [ 1] 4692 	cp a,#1 
      003109 27 03            [ 1] 4693 	jreq 1$
      00310B CC 16 48         [ 2] 4694 	jp syntax_error 
      00310E                       4695 1$: _xpop 
      00310E 90 F6            [ 1]    1     ld a,(y)
      003110 93               [ 1]    2     ldw x,y 
      003111 EE 01            [ 2]    3     ldw x,(1,x)
      003113 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003117 CD 30 B3         [ 4] 4696 	call xstack_bound
      00311A F6               [ 1] 4697     ld a,(x)
      00311B EE 01            [ 2] 4698 	ldw x,(1,x)				
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      00311D 81               [ 4] 4699 	ret 
                                   4700 
                                   4701 
                                   4702 
                                   4703 ;------------------------------
                                   4704 ;      dictionary 
                                   4705 ; format:
                                   4706 ;   link:   2 bytes 
                                   4707 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4708 ;   cmd_name: 16 byte max 
                                   4709 ;   code_addr: 2 bytes 
                                   4710 ;------------------------------
                                   4711 	.macro _dict_entry len,name,code_addr 
                                   4712 	.word LINK 
                                   4713 	LINK=.
                                   4714 name:
                                   4715 	.byte len   	
                                   4716 	.ascii "name"
                                   4717 	.word code_addr  
                                   4718 	.endm 
                                   4719 
                           000000  4720 	LINK=0
                                   4721 ; respect alphabetic order for BASIC names from Z-A
                                   4722 ; this sort order is for a cleaner WORDS cmd output. 	
      00311E                       4723 kword_end:
      00311E                       4724 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      00311E 00 00                    1 	.word LINK 
                           003120     2 	LINK=.
      003120                          3 XOR:
      003120 A3                       4 	.byte 3+F_XOR   	
      003121 58 4F 52                 5 	.ascii "XOR"
      003124 00 8A                    6 	.word TK_XOR  
      003126                       4725 	_dict_entry,5,WRITE,write  
      003126 31 20                    1 	.word LINK 
                           003128     2 	LINK=.
      003128                          3 WRITE:
      003128 05                       4 	.byte 5   	
      003129 57 52 49 54 45           5 	.ascii "WRITE"
      00312E 29 B1                    6 	.word write  
      003130                       4726 	_dict_entry,5,WORDS,words 
      003130 31 28                    1 	.word LINK 
                           003132     2 	LINK=.
      003132                          3 WORDS:
      003132 05                       4 	.byte 5   	
      003133 57 4F 52 44 53           5 	.ascii "WORDS"
      003138 2D 03                    6 	.word words  
      00313A                       4727 	_dict_entry 4,WAIT,wait 
      00313A 31 32                    1 	.word LINK 
                           00313C     2 	LINK=.
      00313C                          3 WAIT:
      00313C 04                       4 	.byte 4   	
      00313D 57 41 49 54              5 	.ascii "WAIT"
      003141 21 FD                    6 	.word wait  
      003143                       4728 	_dict_entry,3+F_IFUNC,USR,usr
      003143 31 3C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                           003145     2 	LINK=.
      003145                          3 USR:
      003145 13                       4 	.byte 3+F_IFUNC   	
      003146 55 53 52                 5 	.ascii "USR"
      003149 2A A8                    6 	.word usr  
      00314B                       4729 	_dict_entry,5,UNTIL,until 
      00314B 31 45                    1 	.word LINK 
                           00314D     2 	LINK=.
      00314D                          3 UNTIL:
      00314D 05                       4 	.byte 5   	
      00314E 55 4E 54 49 4C           5 	.ascii "UNTIL"
      003153 2E 38                    6 	.word until  
      003155                       4730 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      003155 31 4D                    1 	.word LINK 
                           003157     2 	LINK=.
      003157                          3 UFLASH:
      003157 16                       4 	.byte 6+F_IFUNC   	
      003158 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      00315E 2A 8B                    6 	.word uflash  
      003160                       4731 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003160 31 57                    1 	.word LINK 
                           003162     2 	LINK=.
      003162                          3 UBOUND:
      003162 16                       4 	.byte 6+F_IFUNC   	
      003163 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      003169 1C 8E                    6 	.word ubound  
      00316B                       4732 	_dict_entry,4,TONE,tone  
      00316B 31 62                    1 	.word LINK 
                           00316D     2 	LINK=.
      00316D                          3 TONE:
      00316D 04                       4 	.byte 4   	
      00316E 54 4F 4E 45              5 	.ascii "TONE"
      003172 26 67                    6 	.word tone  
      003174                       4733 	_dict_entry,2,TO,to
      003174 31 6D                    1 	.word LINK 
                           003176     2 	LINK=.
      003176                          3 TO:
      003176 02                       4 	.byte 2   	
      003177 54 4F                    5 	.ascii "TO"
      003179 23 67                    6 	.word to  
      00317B                       4734 	_dict_entry,5,TIMER,set_timer
      00317B 31 76                    1 	.word LINK 
                           00317D     2 	LINK=.
      00317D                          3 TIMER:
      00317D 05                       4 	.byte 5   	
      00317E 54 49 4D 45 52           5 	.ascii "TIMER"
      003183 2D 6D                    6 	.word set_timer  
      003185                       4735 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      003185 31 7D                    1 	.word LINK 
                           003187     2 	LINK=.
      003187                          3 TIMEOUT:
      003187 17                       4 	.byte 7+F_IFUNC   	
      003188 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00318F 2D 84                    6 	.word timeout  
      003191                       4736 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003191 31 87                    1 	.word LINK 
                           003193     2 	LINK=.
      003193                          3 TICKS:
      003193 15                       4 	.byte 5+F_IFUNC   	
      003194 54 49 43 4B 53           5 	.ascii "TICKS"
      003199 2B 54                    6 	.word get_ticks  
      00319B                       4737 	_dict_entry,4,STOP,stop 
      00319B 31 93                    1 	.word LINK 
                           00319D     2 	LINK=.
      00319D                          3 STOP:
      00319D 04                       4 	.byte 4   	
      00319E 53 54 4F 50              5 	.ascii "STOP"
      0031A2 27 D0                    6 	.word stop  
      0031A4                       4738 	_dict_entry,4,STEP,step 
      0031A4 31 9D                    1 	.word LINK 
                           0031A6     2 	LINK=.
      0031A6                          3 STEP:
      0031A6 04                       4 	.byte 4   	
      0031A7 53 54 45 50              5 	.ascii "STEP"
      0031AB 23 AD                    6 	.word step  
      0031AD                       4739 	_dict_entry,5,SPIWR,spi_write
      0031AD 31 A6                    1 	.word LINK 
                           0031AF     2 	LINK=.
      0031AF                          3 SPIWR:
      0031AF 05                       4 	.byte 5   	
      0031B0 53 50 49 57 52           5 	.ascii "SPIWR"
      0031B5 2F FF                    6 	.word spi_write  
      0031B7                       4740 	_dict_entry,6,SPISEL,spi_select
      0031B7 31 AF                    1 	.word LINK 
                           0031B9     2 	LINK=.
      0031B9                          3 SPISEL:
      0031B9 06                       4 	.byte 6   	
      0031BA 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0031C0 30 26                    6 	.word spi_select  
      0031C2                       4741 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      0031C2 31 B9                    1 	.word LINK 
                           0031C4     2 	LINK=.
      0031C4                          3 SPIRD:
      0031C4 15                       4 	.byte 5+F_IFUNC   	
      0031C5 53 50 49 52 44           5 	.ascii "SPIRD"
      0031CA 30 1F                    6 	.word spi_read  
      0031CC                       4742 	_dict_entry,5,SPIEN,spi_enable 
      0031CC 31 C4                    1 	.word LINK 
                           0031CE     2 	LINK=.
      0031CE                          3 SPIEN:
      0031CE 05                       4 	.byte 5   	
      0031CF 53 50 49 45 4E           5 	.ascii "SPIEN"
      0031D4 2F 87                    6 	.word spi_enable  
      0031D6                       4743 	_dict_entry,5,SLEEP,sleep 
      0031D6 31 CE                    1 	.word LINK 
                           0031D8     2 	LINK=.
      0031D8                          3 SLEEP:
      0031D8 05                       4 	.byte 5   	
      0031D9 53 4C 45 45 50           5 	.ascii "SLEEP"
      0031DE 2A D7                    6 	.word sleep  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0031E0                       4744     _dict_entry,4,SIZE,cmd_size 
      0031E0 31 D8                    1 	.word LINK 
                           0031E2     2 	LINK=.
      0031E2                          3 SIZE:
      0031E2 04                       4 	.byte 4   	
      0031E3 53 49 5A 45              5 	.ascii "SIZE"
      0031E7 1C 61                    6 	.word cmd_size  
      0031E9                       4745 	_dict_entry,4,SAVE,save_app 
      0031E9 31 E2                    1 	.word LINK 
                           0031EB     2 	LINK=.
      0031EB                          3 SAVE:
      0031EB 04                       4 	.byte 4   	
      0031EC 53 41 56 45              5 	.ascii "SAVE"
      0031F0 28 C2                    6 	.word save_app  
      0031F2                       4746 	_dict_entry 3,RUN,run
      0031F2 31 EB                    1 	.word LINK 
                           0031F4     2 	LINK=.
      0031F4                          3 RUN:
      0031F4 03                       4 	.byte 3   	
      0031F5 52 55 4E                 5 	.ascii "RUN"
      0031F8 25 C3                    6 	.word run  
      0031FA                       4747 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0031FA 31 F4                    1 	.word LINK 
                           0031FC     2 	LINK=.
      0031FC                          3 RSHIFT:
      0031FC 16                       4 	.byte 6+F_IFUNC   	
      0031FD 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      003203 2B 9E                    6 	.word rshift  
      003205                       4748 	_dict_entry,3+F_IFUNC,RND,random 
      003205 31 FC                    1 	.word LINK 
                           003207     2 	LINK=.
      003207                          3 RND:
      003207 13                       4 	.byte 3+F_IFUNC   	
      003208 52 4E 44                 5 	.ascii "RND"
      00320B 2C 68                    6 	.word random  
      00320D                       4749 	_dict_entry,6,RETURN,return 
      00320D 32 07                    1 	.word LINK 
                           00320F     2 	LINK=.
      00320F                          3 RETURN:
      00320F 06                       4 	.byte 6   	
      003210 52 45 54 55 52 4E        5 	.ascii "RETURN"
      003216 25 A6                    6 	.word return  
      003218                       4750 	_dict_entry,7,RESTORE,restore 
      003218 32 0F                    1 	.word LINK 
                           00321A     2 	LINK=.
      00321A                          3 RESTORE:
      00321A 07                       4 	.byte 7   	
      00321B 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003222 2E CF                    6 	.word restore  
      003224                       4751 	_dict_entry 3,REM,remark 
      003224 32 1A                    1 	.word LINK 
                           003226     2 	LINK=.
      003226                          3 REM:
      003226 03                       4 	.byte 3   	
      003227 52 45 4D                 5 	.ascii "REM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      00322A 21 F7                    6 	.word remark  
      00322C                       4752 	_dict_entry,6,REBOOT,cold_start
      00322C 32 26                    1 	.word LINK 
                           00322E     2 	LINK=.
      00322E                          3 REBOOT:
      00322E 06                       4 	.byte 6   	
      00322F 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      003235 00 C3                    6 	.word cold_start  
      003237                       4753 	_dict_entry,4+F_IFUNC,READ,read  
      003237 32 2E                    1 	.word LINK 
                           003239     2 	LINK=.
      003239                          3 READ:
      003239 14                       4 	.byte 4+F_IFUNC   	
      00323A 52 45 41 44              5 	.ascii "READ"
      00323E 2F 39                    6 	.word read  
      003240                       4754 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003240 32 39                    1 	.word LINK 
                           003242     2 	LINK=.
      003242                          3 QKEY:
      003242 14                       4 	.byte 4+F_IFUNC   	
      003243 51 4B 45 59              5 	.ascii "QKEY"
      003247 2A 4E                    6 	.word qkey  
      003249                       4755 	_dict_entry,3,PUT,xput 
      003249 32 42                    1 	.word LINK 
                           00324B     2 	LINK=.
      00324B                          3 PUT:
      00324B 03                       4 	.byte 3   	
      00324C 50 55 54                 5 	.ascii "PUT"
      00324F 30 D1                    6 	.word xput  
      003251                       4756 	_dict_entry,4,PUSH,xpush   
      003251 32 4B                    1 	.word LINK 
                           003253     2 	LINK=.
      003253                          3 PUSH:
      003253 04                       4 	.byte 4   	
      003254 50 55 53 48              5 	.ascii "PUSH"
      003258 30 42                    6 	.word xpush  
      00325A                       4757 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      00325A 32 53                    1 	.word LINK 
                           00325C     2 	LINK=.
      00325C                          3 PORTI:
      00325C 15                       4 	.byte 5+F_IFUNC   	
      00325D 50 4F 52 54 49           5 	.ascii "PORTI"
      003262 2E 8E                    6 	.word const_porti  
      003264                       4758 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      003264 32 5C                    1 	.word LINK 
                           003266     2 	LINK=.
      003266                          3 PORTG:
      003266 15                       4 	.byte 5+F_IFUNC   	
      003267 50 4F 52 54 47           5 	.ascii "PORTG"
      00326C 2E 89                    6 	.word const_portg  
      00326E                       4759 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      00326E 32 66                    1 	.word LINK 
                           003270     2 	LINK=.
      003270                          3 PORTF:
      003270 15                       4 	.byte 5+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003271 50 4F 52 54 46           5 	.ascii "PORTF"
      003276 2E 84                    6 	.word const_portf  
      003278                       4760 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      003278 32 70                    1 	.word LINK 
                           00327A     2 	LINK=.
      00327A                          3 PORTE:
      00327A 15                       4 	.byte 5+F_IFUNC   	
      00327B 50 4F 52 54 45           5 	.ascii "PORTE"
      003280 2E 7F                    6 	.word const_porte  
      003282                       4761 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003282 32 7A                    1 	.word LINK 
                           003284     2 	LINK=.
      003284                          3 PORTD:
      003284 15                       4 	.byte 5+F_IFUNC   	
      003285 50 4F 52 54 44           5 	.ascii "PORTD"
      00328A 2E 7A                    6 	.word const_portd  
      00328C                       4762 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      00328C 32 84                    1 	.word LINK 
                           00328E     2 	LINK=.
      00328E                          3 PORTC:
      00328E 15                       4 	.byte 5+F_IFUNC   	
      00328F 50 4F 52 54 43           5 	.ascii "PORTC"
      003294 2E 75                    6 	.word const_portc  
      003296                       4763 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      003296 32 8E                    1 	.word LINK 
                           003298     2 	LINK=.
      003298                          3 PORTB:
      003298 15                       4 	.byte 5+F_IFUNC   	
      003299 50 4F 52 54 42           5 	.ascii "PORTB"
      00329E 2E 70                    6 	.word const_portb  
      0032A0                       4764 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      0032A0 32 98                    1 	.word LINK 
                           0032A2     2 	LINK=.
      0032A2                          3 PORTA:
      0032A2 15                       4 	.byte 5+F_IFUNC   	
      0032A3 50 4F 52 54 41           5 	.ascii "PORTA"
      0032A8 2E 6B                    6 	.word const_porta  
      0032AA                       4765 	_dict_entry 5,PRINT,print 
      0032AA 32 A2                    1 	.word LINK 
                           0032AC     2 	LINK=.
      0032AC                          3 PRINT:
      0032AC 05                       4 	.byte 5   	
      0032AD 50 52 49 4E 54           5 	.ascii "PRINT"
      0032B2 20 AF                    6 	.word print  
      0032B4                       4766 	_dict_entry,4+F_IFUNC,POUT,const_output
      0032B4 32 AC                    1 	.word LINK 
                           0032B6     2 	LINK=.
      0032B6                          3 POUT:
      0032B6 14                       4 	.byte 4+F_IFUNC   	
      0032B7 50 4F 55 54              5 	.ascii "POUT"
      0032BB 2E AC                    6 	.word const_output  
      0032BD                       4767 	_dict_entry,3+F_IFUNC,POP,xpop 
      0032BD 32 B6                    1 	.word LINK 
                           0032BF     2 	LINK=.
      0032BF                          3 POP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0032BF 13                       4 	.byte 3+F_IFUNC   	
      0032C0 50 4F 50                 5 	.ascii "POP"
      0032C3 30 46                    6 	.word xpop  
      0032C5                       4768 	_dict_entry,4,POKE,poke 
      0032C5 32 BF                    1 	.word LINK 
                           0032C7     2 	LINK=.
      0032C7                          3 POKE:
      0032C7 04                       4 	.byte 4   	
      0032C8 50 4F 4B 45              5 	.ascii "POKE"
      0032CC 22 D8                    6 	.word poke  
      0032CE                       4769 	_dict_entry,5,PMODE,pin_mode 
      0032CE 32 C7                    1 	.word LINK 
                           0032D0     2 	LINK=.
      0032D0                          3 PMODE:
      0032D0 05                       4 	.byte 5   	
      0032D1 50 4D 4F 44 45           5 	.ascii "PMODE"
      0032D6 2B D9                    6 	.word pin_mode  
      0032D8                       4770 	_dict_entry,4+F_IFUNC,PINP,const_input
      0032D8 32 D0                    1 	.word LINK 
                           0032DA     2 	LINK=.
      0032DA                          3 PINP:
      0032DA 14                       4 	.byte 4+F_IFUNC   	
      0032DB 50 49 4E 50              5 	.ascii "PINP"
      0032DF 2E B1                    6 	.word const_input  
      0032E1                       4771 	_dict_entry,4+F_IFUNC,PICK,xpick 
      0032E1 32 DA                    1 	.word LINK 
                           0032E3     2 	LINK=.
      0032E3                          3 PICK:
      0032E3 14                       4 	.byte 4+F_IFUNC   	
      0032E4 50 49 43 4B              5 	.ascii "PICK"
      0032E8 31 04                    6 	.word xpick  
      0032EA                       4772 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0032EA 32 E3                    1 	.word LINK 
                           0032EC     2 	LINK=.
      0032EC                          3 PEEK:
      0032EC 14                       4 	.byte 4+F_IFUNC   	
      0032ED 50 45 45 4B              5 	.ascii "PEEK"
      0032F1 22 F9                    6 	.word peek  
      0032F3                       4773 	_dict_entry,5,PAUSE,pause 
      0032F3 32 EC                    1 	.word LINK 
                           0032F5     2 	LINK=.
      0032F5                          3 PAUSE:
      0032F5 05                       4 	.byte 5   	
      0032F6 50 41 55 53 45           5 	.ascii "PAUSE"
      0032FB 2A E2                    6 	.word pause  
      0032FD                       4774 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0032FD 32 F5                    1 	.word LINK 
                           0032FF     2 	LINK=.
      0032FF                          3 PAD:
      0032FF 13                       4 	.byte 3+F_IFUNC   	
      003300 50 41 44                 5 	.ascii "PAD"
      003303 30 3D                    6 	.word pad_ref  
      003305                       4775 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      003305 32 FF                    1 	.word LINK 
                           003307     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      003307                          3 OR:
      003307 92                       4 	.byte 2+F_OR   	
      003308 4F 52                    5 	.ascii "OR"
      00330A 00 89                    6 	.word TK_OR  
      00330C                       4776 	_dict_entry,2,ON,cmd_on 
      00330C 33 07                    1 	.word LINK 
                           00330E     2 	LINK=.
      00330E                          3 ON:
      00330E 02                       4 	.byte 2   	
      00330F 4F 4E                    5 	.ascii "ON"
      003311 24 D6                    6 	.word cmd_on  
      003313                       4777 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      003313 33 0E                    1 	.word LINK 
                           003315     2 	LINK=.
      003315                          3 ODR:
      003315 13                       4 	.byte 3+F_IFUNC   	
      003316 4F 44 52                 5 	.ascii "ODR"
      003319 2E 93                    6 	.word const_odr  
      00331B                       4778 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      00331B 33 15                    1 	.word LINK 
                           00331D     2 	LINK=.
      00331D                          3 NOT:
      00331D 73                       4 	.byte 3+F_NOT   	
      00331E 4E 4F 54                 5 	.ascii "NOT"
      003321 00 87                    6 	.word TK_NOT  
      003323                       4779 	_dict_entry,4,NEXT,next 
      003323 33 1D                    1 	.word LINK 
                           003325     2 	LINK=.
      003325                          3 NEXT:
      003325 04                       4 	.byte 4   	
      003326 4E 45 58 54              5 	.ascii "NEXT"
      00332A 23 EF                    6 	.word next  
      00332C                       4780 	_dict_entry,3,NEW,new
      00332C 33 25                    1 	.word LINK 
                           00332E     2 	LINK=.
      00332E                          3 NEW:
      00332E 03                       4 	.byte 3   	
      00332F 4E 45 57                 5 	.ascii "NEW"
      003332 28 1C                    6 	.word new  
      003334                       4781 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      003334 33 2E                    1 	.word LINK 
                           003336     2 	LINK=.
      003336                          3 LSHIFT:
      003336 16                       4 	.byte 6+F_IFUNC   	
      003337 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00333D 2B 72                    6 	.word lshift  
      00333F                       4782 	_dict_entry,4+F_IFUNC,LOG2,log2 
      00333F 33 36                    1 	.word LINK 
                           003341     2 	LINK=.
      003341                          3 LOG2:
      003341 14                       4 	.byte 4+F_IFUNC   	
      003342 4C 4F 47 32              5 	.ascii "LOG2"
      003346 2D D2                    6 	.word log2  
      003348                       4783 	_dict_entry 4,LIST,list
      003348 33 41                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                           00334A     2 	LINK=.
      00334A                          3 LIST:
      00334A 04                       4 	.byte 4   	
      00334B 4C 49 53 54              5 	.ascii "LIST"
      00334F 1F A2                    6 	.word list  
      003351                       4784 	_dict_entry 3,LET,let 
      003351 33 4A                    1 	.word LINK 
                           003353     2 	LINK=.
      003353                          3 LET:
      003353 03                       4 	.byte 3   	
      003354 4C 45 54                 5 	.ascii "LET"
      003357 1C 99                    6 	.word let  
      003359                       4785 	_dict_entry,3+F_CFUNC,KEY,key 
      003359 33 53                    1 	.word LINK 
                           00335B     2 	LINK=.
      00335B                          3 KEY:
      00335B 23                       4 	.byte 3+F_CFUNC   	
      00335C 4B 45 59                 5 	.ascii "KEY"
      00335F 2A 4A                    6 	.word key  
      003361                       4786 	_dict_entry,7,IWDGREF,refresh_iwdg
      003361 33 5B                    1 	.word LINK 
                           003363     2 	LINK=.
      003363                          3 IWDGREF:
      003363 07                       4 	.byte 7   	
      003364 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00336B 2D CD                    6 	.word refresh_iwdg  
      00336D                       4787 	_dict_entry,6,IWDGEN,enable_iwdg
      00336D 33 63                    1 	.word LINK 
                           00336F     2 	LINK=.
      00336F                          3 IWDGEN:
      00336F 06                       4 	.byte 6   	
      003370 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003376 2D 8F                    6 	.word enable_iwdg  
      003378                       4788 	_dict_entry,5,INPUT,input_var  
      003378 33 6F                    1 	.word LINK 
                           00337A     2 	LINK=.
      00337A                          3 INPUT:
      00337A 05                       4 	.byte 5   	
      00337B 49 4E 50 55 54           5 	.ascii "INPUT"
      003380 21 58                    6 	.word input_var  
      003382                       4789 	_dict_entry,2,IF,if 
      003382 33 7A                    1 	.word LINK 
                           003384     2 	LINK=.
      003384                          3 IF:
      003384 02                       4 	.byte 2   	
      003385 49 46                    5 	.ascii "IF"
      003387 23 1A                    6 	.word if  
      003389                       4790 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003389 33 84                    1 	.word LINK 
                           00338B     2 	LINK=.
      00338B                          3 IDR:
      00338B 13                       4 	.byte 3+F_IFUNC   	
      00338C 49 44 52                 5 	.ascii "IDR"
      00338F 2E 98                    6 	.word const_idr  
      003391                       4791 	_dict_entry,3,HEX,hex_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003391 33 8B                    1 	.word LINK 
                           003393     2 	LINK=.
      003393                          3 HEX:
      003393 03                       4 	.byte 3   	
      003394 48 45 58                 5 	.ascii "HEX"
      003397 1C 4E                    6 	.word hex_base  
      003399                       4792 	_dict_entry,4,GOTO,goto 
      003399 33 93                    1 	.word LINK 
                           00339B     2 	LINK=.
      00339B                          3 GOTO:
      00339B 04                       4 	.byte 4   	
      00339C 47 4F 54 4F              5 	.ascii "GOTO"
      0033A0 25 68                    6 	.word goto  
      0033A2                       4793 	_dict_entry,5,GOSUB,gosub 
      0033A2 33 9B                    1 	.word LINK 
                           0033A4     2 	LINK=.
      0033A4                          3 GOSUB:
      0033A4 05                       4 	.byte 5   	
      0033A5 47 4F 53 55 42           5 	.ascii "GOSUB"
      0033AA 25 82                    6 	.word gosub  
      0033AC                       4794 	_dict_entry,3,GET,cmd_get 
      0033AC 33 A4                    1 	.word LINK 
                           0033AE     2 	LINK=.
      0033AE                          3 GET:
      0033AE 03                       4 	.byte 3   	
      0033AF 47 45 54                 5 	.ascii "GET"
      0033B2 26 2F                    6 	.word cmd_get  
      0033B4                       4795 	_dict_entry,4+F_IFUNC,FREE,free
      0033B4 33 AE                    1 	.word LINK 
                           0033B6     2 	LINK=.
      0033B6                          3 FREE:
      0033B6 14                       4 	.byte 4+F_IFUNC   	
      0033B7 46 52 45 45              5 	.ascii "FREE"
      0033BB 1C 58                    6 	.word free  
      0033BD                       4796 	_dict_entry,3,FOR,for 
      0033BD 33 B6                    1 	.word LINK 
                           0033BF     2 	LINK=.
      0033BF                          3 FOR:
      0033BF 03                       4 	.byte 3   	
      0033C0 46 4F 52                 5 	.ascii "FOR"
      0033C3 23 37                    6 	.word for  
      0033C5                       4797 	_dict_entry,4,FCPU,fcpu 
      0033C5 33 BF                    1 	.word LINK 
                           0033C7     2 	LINK=.
      0033C7                          3 FCPU:
      0033C7 04                       4 	.byte 4   	
      0033C8 46 43 50 55              5 	.ascii "FCPU"
      0033CC 2B CA                    6 	.word fcpu  
      0033CE                       4798 	_dict_entry,5,ERASE,erase 
      0033CE 33 C7                    1 	.word LINK 
                           0033D0     2 	LINK=.
      0033D0                          3 ERASE:
      0033D0 05                       4 	.byte 5   	
      0033D1 45 52 41 53 45           5 	.ascii "ERASE"
      0033D6 28 26                    6 	.word erase  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0033D8                       4799 	_dict_entry,3,END,cmd_end  
      0033D8 33 D0                    1 	.word LINK 
                           0033DA     2 	LINK=.
      0033DA                          3 END:
      0033DA 03                       4 	.byte 3   	
      0033DB 45 4E 44                 5 	.ascii "END"
      0033DE 26 28                    6 	.word cmd_end  
      0033E0                       4800 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0033E0 33 DA                    1 	.word LINK 
                           0033E2     2 	LINK=.
      0033E2                          3 EEPROM:
      0033E2 16                       4 	.byte 6+F_IFUNC   	
      0033E3 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0033E9 2E B6                    6 	.word const_eeprom_base  
      0033EB                       4801 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0033EB 33 E2                    1 	.word LINK 
                           0033ED     2 	LINK=.
      0033ED                          3 EEFREE:
      0033ED 16                       4 	.byte 6+F_IFUNC   	
      0033EE 45 45 46 52 45 45        5 	.ascii "EEFREE"
      0033F4 1D 57                    6 	.word func_eefree  
      0033F6                       4802 	_dict_entry,4,EDIT,edit 
      0033F6 33 ED                    1 	.word LINK 
                           0033F8     2 	LINK=.
      0033F8                          3 EDIT:
      0033F8 04                       4 	.byte 4   	
      0033F9 45 44 49 54              5 	.ascii "EDIT"
      0033FD 20 47                    6 	.word edit  
      0033FF                       4803 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0033FF 33 F8                    1 	.word LINK 
                           003401     2 	LINK=.
      003401                          3 DWRITE:
      003401 06                       4 	.byte 6+F_CMD   	
      003402 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003408 27 85                    6 	.word digital_write  
      00340A                       4804 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      00340A 34 01                    1 	.word LINK 
                           00340C     2 	LINK=.
      00340C                          3 DROP:
      00340C 04                       4 	.byte 4   	
      00340D 44 52 4F 50              5 	.ascii "DROP"
      003411 30 86                    6 	.word xdrop  
      003413                       4805 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      003413 34 0C                    1 	.word LINK 
                           003415     2 	LINK=.
      003415                          3 DREAD:
      003415 15                       4 	.byte 5+F_IFUNC   	
      003416 44 52 45 41 44           5 	.ascii "DREAD"
      00341B 27 4E                    6 	.word digital_read  
      00341D                       4806 	_dict_entry,2,DO,do_loop
      00341D 34 15                    1 	.word LINK 
                           00341F     2 	LINK=.
      00341F                          3 DO:
      00341F 02                       4 	.byte 2   	
      003420 44 4F                    5 	.ascii "DO"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003422 2E 25                    6 	.word do_loop  
      003424                       4807 	_dict_entry,3,DIM,cmd_dim 
      003424 34 1F                    1 	.word LINK 
                           003426     2 	LINK=.
      003426                          3 DIM:
      003426 03                       4 	.byte 3   	
      003427 44 49 4D                 5 	.ascii "DIM"
      00342A 1E 82                    6 	.word cmd_dim  
      00342C                       4808 	_dict_entry,3,DEC,dec_base
      00342C 34 26                    1 	.word LINK 
                           00342E     2 	LINK=.
      00342E                          3 DEC:
      00342E 03                       4 	.byte 3   	
      00342F 44 45 43                 5 	.ascii "DEC"
      003432 1C 53                    6 	.word dec_base  
      003434                       4809 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      003434 34 2E                    1 	.word LINK 
                           003436     2 	LINK=.
      003436                          3 DDR:
      003436 13                       4 	.byte 3+F_IFUNC   	
      003437 44 44 52                 5 	.ascii "DDR"
      00343A 2E 9D                    6 	.word const_ddr  
      00343C                       4810 	_dict_entry,4,DATA,data  
      00343C 34 36                    1 	.word LINK 
                           00343E     2 	LINK=.
      00343E                          3 DATA:
      00343E 04                       4 	.byte 4   	
      00343F 44 41 54 41              5 	.ascii "DATA"
      003443 2E BB                    6 	.word data  
      003445                       4811 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003445 34 3E                    1 	.word LINK 
                           003447     2 	LINK=.
      003447                          3 CR2:
      003447 13                       4 	.byte 3+F_IFUNC   	
      003448 43 52 32                 5 	.ascii "CR2"
      00344B 2E A7                    6 	.word const_cr2  
      00344D                       4812 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00344D 34 47                    1 	.word LINK 
                           00344F     2 	LINK=.
      00344F                          3 CR1:
      00344F 13                       4 	.byte 3+F_IFUNC   	
      003450 43 52 31                 5 	.ascii "CR1"
      003453 2E A2                    6 	.word const_cr1  
      003455                       4813 	_dict_entry,5,CONST,cmd_const 
      003455 34 4F                    1 	.word LINK 
                           003457     2 	LINK=.
      003457                          3 CONST:
      003457 05                       4 	.byte 5   	
      003458 43 4F 4E 53 54           5 	.ascii "CONST"
      00345D 1D CB                    6 	.word cmd_const  
      00345F                       4814 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00345F 34 57                    1 	.word LINK 
                           003461     2 	LINK=.
      003461                          3 CHAR:
      003461 24                       4 	.byte 4+F_CFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      003462 43 48 41 52              5 	.ascii "CHAR"
      003466 29 F4                    6 	.word func_char  
      003468                       4815 	_dict_entry,3,BYE,bye 
      003468 34 61                    1 	.word LINK 
                           00346A     2 	LINK=.
      00346A                          3 BYE:
      00346A 03                       4 	.byte 3   	
      00346B 42 59 45                 5 	.ascii "BYE"
      00346E 2A CE                    6 	.word bye  
      003470                       4816 	_dict_entry,5,BTOGL,bit_toggle
      003470 34 6A                    1 	.word LINK 
                           003472     2 	LINK=.
      003472                          3 BTOGL:
      003472 05                       4 	.byte 5   	
      003473 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003478 22 7F                    6 	.word bit_toggle  
      00347A                       4817 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00347A 34 72                    1 	.word LINK 
                           00347C     2 	LINK=.
      00347C                          3 BTEST:
      00347C 15                       4 	.byte 5+F_IFUNC   	
      00347D 42 54 45 53 54           5 	.ascii "BTEST"
      003482 22 A1                    6 	.word bit_test  
      003484                       4818 	_dict_entry,4,BSET,bit_set 
      003484 34 7C                    1 	.word LINK 
                           003486     2 	LINK=.
      003486                          3 BSET:
      003486 04                       4 	.byte 4   	
      003487 42 53 45 54              5 	.ascii "BSET"
      00348B 22 3A                    6 	.word bit_set  
      00348D                       4819 	_dict_entry,4,BRES,bit_reset
      00348D 34 86                    1 	.word LINK 
                           00348F     2 	LINK=.
      00348F                          3 BRES:
      00348F 04                       4 	.byte 4   	
      003490 42 52 45 53              5 	.ascii "BRES"
      003494 22 5C                    6 	.word bit_reset  
      003496                       4820 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003496 34 8F                    1 	.word LINK 
                           003498     2 	LINK=.
      003498                          3 BIT:
      003498 13                       4 	.byte 3+F_IFUNC   	
      003499 42 49 54                 5 	.ascii "BIT"
      00349C 2D FF                    6 	.word bitmask  
      00349E                       4821 	_dict_entry,3,AWU,awu 
      00349E 34 98                    1 	.word LINK 
                           0034A0     2 	LINK=.
      0034A0                          3 AWU:
      0034A0 03                       4 	.byte 3   	
      0034A1 41 57 55                 5 	.ascii "AWU"
      0034A4 2B 02                    6 	.word awu  
      0034A6                       4822 	_dict_entry,3+F_IFUNC,ASC,ascii
      0034A6 34 A0                    1 	.word LINK 
                           0034A8     2 	LINK=.
      0034A8                          3 ASC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      0034A8 13                       4 	.byte 3+F_IFUNC   	
      0034A9 41 53 43                 5 	.ascii "ASC"
      0034AC 2A 0B                    6 	.word ascii  
      0034AE                       4823 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0034AE 34 A8                    1 	.word LINK 
                           0034B0     2 	LINK=.
      0034B0                          3 AND:
      0034B0 83                       4 	.byte 3+F_AND   	
      0034B1 41 4E 44                 5 	.ascii "AND"
      0034B4 00 88                    6 	.word TK_AND  
      0034B6                       4824 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      0034B6 34 B0                    1 	.word LINK 
                           0034B8     2 	LINK=.
      0034B8                          3 ALLOC:
      0034B8 05                       4 	.byte 5   	
      0034B9 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      0034BE 30 50                    6 	.word xalloc  
      0034C0                       4825 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0034C0 34 B8                    1 	.word LINK 
                           0034C2     2 	LINK=.
      0034C2                          3 ADCREAD:
      0034C2 17                       4 	.byte 7+F_IFUNC   	
      0034C3 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0034CA 27 12                    6 	.word analog_read  
      0034CC                       4826 	_dict_entry,5,ADCON,power_adc 
      0034CC 34 C2                    1 	.word LINK 
                           0034CE     2 	LINK=.
      0034CE                          3 ADCON:
      0034CE 05                       4 	.byte 5   	
      0034CF 41 44 43 4F 4E           5 	.ascii "ADCON"
      0034D4 26 C2                    6 	.word power_adc  
      0034D6                       4827 kword_dict::
      0034D6                       4828 	_dict_entry,3+F_IFUNC,ABS,abs
      0034D6 34 CE                    1 	.word LINK 
                           0034D8     2 	LINK=.
      0034D8                          3 ABS:
      0034D8 13                       4 	.byte 3+F_IFUNC   	
      0034D9 41 42 53                 5 	.ascii "ABS"
      0034DC 2B 5B                    6 	.word abs  
                                   4829 
                           000000  4830 INDIRECT=0 
                           000000  4831 .if INDIRECT 
                                   4832 ;comands and fonctions address table 	
                                   4833 code_addr::
                                   4834 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4835 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4836 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4837 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4838 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4839 	.word let,list,log2,lshift,next,new ; 40..47
                                   4840 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4841 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4842 	.word const_portf,const_portg,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4843 	.word restore,return, random,rshift,run,free ; 72..79
                                   4844 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



                                   4845 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4846 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4847 	.word func_eefree,0 
                                   4848 .endif 
                                   4849 
                                   4850 
                                   4851 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0034DE                         30 test:
      0034DE                         31     _vars VSIZE 
      0034DE 52 08            [ 2]    1     sub sp,#VSIZE 
      0034E0 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0034E3 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0034E5 CE 00 0F         [ 2]   34     ldw x,ticks 
      0034E8 1F 01            [ 2]   35     ldw (T,sp),x
      0034EA                         36 1$: ; test add24 
      0034EA A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0034EC AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0034EF C7 00 0C         [ 1]   39     ld acc24,a 
      0034F2 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0034F5 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0034F7 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0034FA CD 01 79         [ 4]   43     call add24 
      0034FD 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0034FF 1D 00 01         [ 2]   45     subw x,#1
      003502 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      003504 26 E4            [ 1]   47     jrne 1$
      003506 CD 18 05         [ 4]   48     call prt_acc24
      003509 A6 20            [ 1]   49     ld a,#SPACE 
      00350B CD 09 0B         [ 4]   50     call putc 
      00350E CE 00 0F         [ 2]   51     ldw x,ticks 
      003511 72 F0 01         [ 2]   52     subw x,(T,sp)
      003514 CD 17 EE         [ 4]   53     call prt_i16  
      003517 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      003519 CD 09 0B         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      00351C CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      00351F 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003521 CE 00 0F         [ 2]   60     ldw x,ticks 
      003524 1F 01            [ 2]   61     ldw (T,sp),x 
      003526                         62 2$: 
      003526 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      003528 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      00352B C7 00 0C         [ 1]   65     ld acc24,a 
      00352E CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003531 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003533 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003536 CD 02 74         [ 4]   69     call mul24 
      003539 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      00353B 1D 00 01         [ 2]   71     subw x,#1
      00353E 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003540 26 E4            [ 1]   73     jrne 2$ 
      003542 CD 18 05         [ 4]   74    call prt_acc24 
      003545 A6 20            [ 1]   75    ld a,#SPACE 
      003547 CD 09 0B         [ 4]   76    call putc 
      00354A CE 00 0F         [ 2]   77     ldw x,ticks 
      00354D 72 F0 01         [ 2]   78     subw x,(T,sp)
      003550 CD 17 EE         [ 4]   79     call prt_i16 
      003553 A6 0D            [ 1]   80     ld a,#CR 
      003555 CD 09 0B         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      003558 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00355B 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      00355D CE 00 0F         [ 2]   85     ldw x,ticks 
      003560 1F 01            [ 2]   86     ldw (T,sp),x 
      003562                         87 3$: 
      003562 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003564 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003567 C7 00 0C         [ 1]   90     ld acc24,a 
      00356A CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00356D A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      00356F AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003572 CD 02 74         [ 4]   94     call mul24 
      003575 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003577 1D 00 01         [ 2]   96     subw x,#1
      00357A 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00357C 26 E4            [ 1]   98     jrne 3$ 
      00357E CD 18 05         [ 4]   99     call prt_acc24    
      003581 A6 20            [ 1]  100     ld a,#SPACE 
      003583 CD 09 0B         [ 4]  101     call putc 
      003586 CE 00 0F         [ 2]  102     ldw x,ticks 
      003589 72 F0 01         [ 2]  103     subw x,(T,sp)
      00358C CD 17 EE         [ 4]  104     call prt_i16 
      00358F A6 0D            [ 1]  105     ld a,#CR 
      003591 CD 09 0B         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003594 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003597 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



      003599 CE 00 0F         [ 2]  110     ldw x,ticks 
      00359C 1F 01            [ 2]  111     ldw (T,sp),x 
      00359E                        112 4$:
      00359E A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0035A0 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0035A3 C7 00 0C         [ 1]  115     ld acc24,a 
      0035A6 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0035A9 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0035AB AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0035AE CD 02 74         [ 4]  119     call mul24 
      0035B1 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0035B3 1D 00 01         [ 2]  121     subw x,#1
      0035B6 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0035B8 26 E4            [ 1]  123     jrne 4$ 
      0035BA CD 18 05         [ 4]  124     call prt_acc24 
      0035BD A6 20            [ 1]  125     ld a,#SPACE 
      0035BF CD 09 0B         [ 4]  126     call putc 
      0035C2 CE 00 0F         [ 2]  127     ldw x,ticks 
      0035C5 72 F0 01         [ 2]  128     subw x,(T,sp)
      0035C8 CD 17 EE         [ 4]  129     call prt_i16 
      0035CB A6 0D            [ 1]  130     ld a,#CR 
      0035CD CD 09 0B         [ 4]  131     call putc 
                                    132 ; test abs24 
      0035D0 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0035D3 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0035D5 CE 00 0F         [ 2]  135     ldw x,ticks 
      0035D8 1F 01            [ 2]  136     ldw (T,sp),x 
      0035DA                        137 5$: 
      0035DA A6 FF            [ 1]  138     ld a,#0xff
      0035DC AE FF FF         [ 2]  139     ldw x,#0xffff
      0035DF CD 01 EE         [ 4]  140     call abs24 
      0035E2 C7 00 0C         [ 1]  141     ld acc24,a 
      0035E5 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0035E8 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0035EA 1D 00 01         [ 2]  144     subw x,#1
      0035ED 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0035EF 26 E9            [ 1]  146     jrne 5$ 
      0035F1 CD 18 05         [ 4]  147     call prt_acc24 
      0035F4 A6 20            [ 1]  148     ld a,#SPACE 
      0035F6 CD 09 0B         [ 4]  149     call putc 
      0035F9 CE 00 0F         [ 2]  150     ldw x,ticks 
      0035FC 72 F0 01         [ 2]  151     subw x,(T,sp)
      0035FF CD 17 EE         [ 4]  152     call prt_i16 
      003602                        153 6$:
      003602 A6 0D            [ 1]  154     ld a,#CR 
      003604 CD 09 0B         [ 4]  155     call putc 
      003607 CD 36 4D         [ 4]  156     call read_integer 
      00360A 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      00360F 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      003614 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003619 CD 36 4D         [ 4]  160     call read_integer 
      00361C C6 00 0C         [ 1]  161     ld a,acc24 
      00361F CE 00 0D         [ 2]  162     ldw x,acc16 
      003622 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      003627 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



      00362C 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003631 CD 03 02         [ 4]  166     call div24 
      003634 88               [ 1]  167     push a 
      003635 89               [ 2]  168     pushw x 
      003636 CD 18 05         [ 4]  169     call prt_acc24 
      003639 A6 20            [ 1]  170     ld a,#SPACE 
      00363B CD 09 0B         [ 4]  171     call putc 
      00363E 85               [ 2]  172     popw x
      00363F CF 00 0D         [ 2]  173     ldw acc16,x  
      003642 32 00 0C         [ 1]  174     pop acc24 
      003645 CD 18 05         [ 4]  175     call prt_acc24
      003648 20 B8            [ 2]  176     jra 6$
      00364A                        177     _drop VSIZE 
      00364A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00364C 81               [ 4]  178     ret 
                                    179 
                                    180 
      00364D                        181 read_integer:
      00364D A6 3F            [ 1]  182     ld a,#'? 
      00364F CD 09 0B         [ 4]  183     call putc  
      003652 72 5F 00 03      [ 1]  184 	clr count  
      003656 CD 0A 6D         [ 4]  185 	call readln 
      003659 AE 16 90         [ 2]  186 	ldw x,#tib 
      00365C 3B 00 03         [ 1]  187 	push count
      00365F 4B 00            [ 1]  188 	push #0 
      003661 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003664 5C               [ 1]  190 	incw x 
      003665                        191 	_drop 2 
      003665 5B 02            [ 2]    1     addw sp,#2 
      003667 72 5F 00 01      [ 1]  192 	clr in 
      00366B CD 0E E2         [ 4]  193 	call get_token
      00366E A1 84            [ 1]  194 	cp a,#TK_INTGR
      003670 27 0F            [ 1]  195 	jreq 3$ 
      003672 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003674 CD 0E E2         [ 4]  197 	call get_token 
      003677 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      003679 27 03            [ 1]  199 	jreq 2$
      00367B CC 16 48         [ 2]  200 	jp syntax_error
      00367E                        201 2$:
      00367E CD 02 18         [ 4]  202 	call neg_acc24  	
      003681                        203 3$: 
      003681 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003700                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003700                         30 app_space::
      003700 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003702 00 00                   32 app_size: .word 0 
      003704                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0034D8 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0034CE R
    ADCON_ID=  000002     |   4 ADCREAD    0034C2 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      0034B8 R   |   4 AND        0034B0 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        0034A8 R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   000157 R   |   4 AWU        0034A0 R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        003498 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       00348F R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       003486 R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      00347C R
    BTEST_ID=  000010     |   4 BTOGL      003472 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |     BUFPTR  =  000003     |   4 BYE        00346A R
    BYE_IDX =  000014     |     C       =  000001     |     CAN     =  000018 
  4 CANT_DO    002959 R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CCOMMA  =  000001     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000003     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   4 CHAR       003461 R   |     CHAR_IDX=  000016 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNAME   =  000001     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     CODE_ADD=  000001 
    COMMA   =  00002C     |   4 CONST      003457 R   |   4 CONST_CO   001D41 R
    CONST_ID=  0000B6     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CR1        00344F R   |     CR1_IDX =  00001A     |   4 CR2        003447 R
    CR2_IDX =  000018     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       00343E R   |     DATA_IDX=  00001C     |     DBG_A   =  000008 
    DBG_CC  =  000009     |     DBG_X   =  000006     |     DBG_Y   =  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        003436 R   |     DDR_IDX =  00001E 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        00342E R   |     DEC_IDX =  000020     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   4 DIM        003426 R
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         00341F R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      003415 R   |     DREAD_ID=  000024     |   4 DROP       00340C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 DWRITE     003401 R   |     DWRITE_I=  000026     |   4 EDIT       0033F8 R
    EDIT_IDX=  000028     |   4 EEFREE     0033ED R   |     EEFREE_I=  0000B8 
  4 EEPROM     0033E2 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        0033DA R   |     END_IDX =  00002C     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      0033D0 R
    ERASE_ID=  00002E     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_OVER=  000010     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       0033C7 R   |     FCPU_IDX=  000030 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001F82 R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   4 FOR        0033BF R
    FOR_IDX =  000034     |   4 FREE       0033B6 R   |     FREE_IDX=  000088 
    FRUN    =  000000     |     FS      =  00001C     |     FSLEEP  =  000003 
    FSTEP   =  000003     |     FTRAP   =  000001     |     F_AND   =  000080 
    F_CFUNC =  000020     |     F_CMD   =  000000     |     F_CONST =  000030 
    F_IFUNC =  000010     |     F_NOT   =  000070     |     F_OR    =  000090 
    F_XOR   =  0000A0     |   4 GET        0033AE R   |     GET_IDX =  0000B4 
  4 GOSUB      0033A4 R   |     GOSUB_ID=  000036     |   4 GOTO       00339B R
    GOTO_IDX=  000038     |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        003393 R   |     HEX_IDX =  00003A     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        00338B R   |     IDR_IDX =  00003C 
  4 IF         003384 R   |     IF_IDX  =  00003E     |     IN      =  000005 
    INCR    =  000001     |     INDIRECT=  000000     |     INP     =  000000 
  4 INPUT      00337A R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000040     |     INPUT_PU=  000001 
    INT24   =  000005     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     00336F R   |     IWDGEN_I=  000042     |   4 IWDGREF    003363 R
    IWDGREF_=  000044     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        00335B R
    KEY_END =  000083     |     KEY_IDX =  000046     |     KW_TYPE_=  0000F0 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        003353 R   |     LET_IDX =  000048     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |   4 LINK    =  0034D8 R
  4 LIST       00334A R   |     LIST_IDX=  00004A     |     LL      =  000001 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  4 LOG2       003341 R   |     LOG_IDX =  00004C     |     LOOP_CNT=  002710 
  4 LSHIFT     003336 R   |     LSHIFT_I=  00004E     |     MAJOR   =  000002 
    MASK    =  000002     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000001     |     N1      =  000005     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000001     |     NCLKOPT =  004808 
    NEG     =  000001     |   4 NEW        00332E R   |     NEW_IDX =  000052 
  4 NEXT       003325 R   |     NEXT_IDX=  000050     |     NFLASH_W=  00480E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    NHSECNT =  00480A     |     NLEN    =  000001     |     NLEN_MAS=  00000F 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   4 NOT        00331D R
    NOT_IDX =  0000F8     |     NOT_OP  =  000001     |   4 NOT_SAVE   002074 R
  4 NO_APP     00299B R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        003315 R
    ODR_IDX =  000054     |   4 ON         00330E R   |     ONOFF   =  000003 
    ON_IDX  =  0000B2     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         003307 R   |     OR_IDX  =  0000FC     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        0032FF R   |     PAD_IDX =  000056     |     PAD_SIZE=  000080 
  4 PAUSE      0032F5 R   |     PAUSE_ID=  000058     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       0032EC R   |     PEEK_IDX=  00005C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  4 PICK       0032E3 R   |     PINNO   =  000001     |   4 PINP       0032DA R
    PINP_IDX=  00005E     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      0032D0 R
    PMODE_ID=  00005A     |   4 POKE       0032C7 R   |     POKE_IDX=  000060 
  4 POP        0032BF R   |   4 PORTA      0032A2 R   |   4 PORTB      003298 R
  4 PORTC      00328E R   |   4 PORTD      003284 R   |   4 PORTE      00327A R
  4 PORTF      003270 R   |   4 PORTG      003266 R   |   4 PORTI      00325C R
  4 POUT       0032B6 R   |     POUT_IDX=  000062     |     PREV    =  000001 
  4 PRINT      0032AC R   |     PROD    =  000001     |     PROD_SIG=  000004 
  4 PROG_ADD   001F58 R   |   4 PROG_SIZ   001F6A R   |     PRTA_IDX=  000066 
    PRTB_IDX=  000068     |     PRTC_IDX=  00006A     |     PRTD_IDX=  00006C 
    PRTE_IDX=  00006E     |     PRTF_IDX=  000070     |     PRTG_IDX=  000072 
    PRTI_IDX=  000074     |     PRT_IDX =  000064     |     PSIZE   =  000001 
    PSTR    =  000003     |   4 PUSH       003253 R   |   4 PUT        00324B R
  4 QKEY       003242 R   |     QKEY_IDX=  000076     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001F93 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    RAM_SIZE=  001800     |     RBT_IDX =  00007A     |   4 READ       003239 R
    READ_IDX=  000078     |   4 REBOOT     00322E R   |     RECLEN  =  000005 
    REC_LEN =  000003     |     REC_XTRA=  000005     |   4 REG_A      000529 R
  4 REG_CC     00052D R   |   4 REG_EPC    00051C R   |   4 REG_SP     000532 R
  4 REG_X      000525 R   |   4 REG_Y      000521 R   |     RELOP   =  000001 
  4 REM        003226 R   |     REM_IDX =  00007C     |   4 RESTORE    00321A R
    REST_IDX=  00007E     |     RETL1   =  000001     |   4 RETURN     00320F R
    RET_ADDR=  000001     |     RET_BPTR=  000003     |     RET_IDX =  000080 
    RET_INW =  000005     |   4 RND        003207 R   |     RND_IDX =  000082 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     0031FC R
    RSHIFT_I=  000084     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        0031F4 R   |     RUN_IDX =  000086     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   4 SAVE       0031EB R
    SAVE_IDX=  000032     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   002957 R   |   4 SIZE       0031E2 R
    SIZE_IDX=  0000B0     |     SKIP    =  000005     |   4 SLEEP      0031D8 R
    SLEEP_ID=  00008A     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      0031CE R   |     SPIEN_ID=  00008E 
  4 SPIRD      0031C4 R   |     SPIRD_ID=  00008C     |   4 SPISEL     0031B9 R
    SPISEL_I=  000090     |   4 SPIWR      0031AF R   |     SPIWR_ID=  000092 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     0004DF R
  4 STEP       0031A6 R   |     STEP_IDX=  000094     |   4 STOP       00319D R
    STOP_IDX=  000096     |     STR     =  000003     |   4 STR_BYTE   001F7B R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      003193 R   |     TICKS_ID=  000098 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    003187 R   |   4 TIMER      00317D R
    TIMER_ID=  00009A     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_AND  =  000088     |     TK_ARRAY=  000005     |     TK_CFUNC=  000082 
    TK_CHAR =  000004     |     TK_CMD  =  000080     |     TK_COLON=  00000A 
    TK_COMMA=  000008     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FLOAT=  000086     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000006     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_NOT  =  000087 
    TK_OR   =  000089     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  00008A     |     TMROUT_I=  00009C     |   4 TO         003176 R
  4 TONE       00316D R   |     TONE_IDX=  0000A0     |     TOWRITE =  000005 
    TO_IDX  =  00009E     |   4 Timer4Up   000021 R   |   4 TrapHand   000012 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     003162 R   |     UBOUND_I=  0000A2 
  4 UBTN_Han   000068 R   |   4 UFLASH     003157 R   |     UFLASH_I=  0000A4 
  4 UNTIL      00314D R   |     UNTIL_ID=  0000A6     |     UPDATE  =  000006 
    US      =  00001F     |   4 USER_ABO   000070 R   |   4 USR        003145 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000A8     |   4 Uart1RxH   000899 R   |   4 UserButt   000044 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VAR_NAME=  000001 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       00313C R
    WAIT_IDX=  0000AA     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
    WLKPTR  =  000003     |   4 WORDS      003132 R   |     WORDS_ID=  0000AC 
  4 WRITE      003128 R   |     WRITE_ID=  0000AE     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        003120 R
    XOR_IDX =  0000FE     |     XSAVE   =  000002     |     XSTACK_E=  001773 
    XSTACK_S=  000014     |     XTEMP   =  000001     |     YSAVE   =  000007 
    YTEMP   =  000003     |   4 abs        002B5B R   |   4 abs24      0001EE R
  5 acc16      00000D GR  |   5 acc24      00000C GR  |   5 acc32      00000B GR
  5 acc8       00000E GR  |   4 accept_c   000BC7 R   |   4 add24      000179 R
  4 add_char   001332 R   |   4 add_spac   00112A R   |   4 analog_r   002712 R
  4 and_cond   001B88 R   |   4 and_fact   001B58 R   |   4 app        003704 R
  4 app_sign   003700 R   |   4 app_size   003702 R   |   4 app_spac   003700 GR
  4 arduino_   002C48 R   |   4 arg_list   00196E R   |   5 array_si   000020 R
  4 ascii      002A0B R   |   4 at_tst     000F9C R   |   4 atoi24     001890 GR
  4 atoi_exi   0018FF R   |   4 awu        002B02 R   |   4 awu02      002B15 R
  4 bad_port   002A86 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       002689 R   |   4 beep_1kh   00265C GR  |   4 bin_exit   000E03 R
  4 bit_rese   00225C R   |   4 bit_set    00223A R   |   4 bit_test   0022A1 R
  4 bit_togg   00227F R   |   4 bitmask    002DFF R   |   4 bkslsh_t   000F49 R
  4 bksp       000972 R   |   2 block_bu   0016E0 GR  |   4 block_er   000787 R
  4 break_po   0027FE R   |   4 bye        002ACE R   |   4 clear_ba   00149E R
  4 clear_bl   0028AE R   |   4 clear_va   0013F6 R   |   4 clock_in   00008B R
  4 cloop_1    001DF1 R   |   4 cmd_cons   001DCB R   |   4 cmd_dim    001E82 R
  4 cmd_dim1   001E8C R   |   4 cmd_end    002628 R   |   4 cmd_get    00262F R
  4 cmd_itf    000537 R   |   4 cmd_line   0016D7 R   |   4 cmd_name   001352 R
  4 cmd_on     0024D6 R   |   4 cmd_size   001C61 R   |   4 cold_sta   0000C3 R
  4 colon_ts   000F70 R   |   4 comma_ts   000F7B R   |   4 comp_msg   001627 R
  4 compile    001096 GR  |   4 conditio   001BDA R   |   4 const_cr   002EA2 R
  4 const_cr   002EA7 R   |   4 const_dd   002E9D R   |   4 const_ee   002EB6 R
  4 const_id   002E98 R   |   4 const_in   002EB1 R   |   4 const_lo   001DEC R
  4 const_od   002E93 R   |   4 const_ou   002EAC R   |   4 const_po   002E6B R
  4 const_po   002E70 R   |   4 const_po   002E75 R   |   4 const_po   002E7A R
  4 const_po   002E7F R   |   4 const_po   002E84 R   |   4 const_po   002E89 R
  4 const_po   002E8E R   |   4 convert_   000D73 R   |   4 convert_   000936 R
  4 copy_com   000FD1 R   |   5 count      000003 GR  |   4 cp24       0001B3 R
  4 cp24_ax    0001E5 R   |   4 cp_loop    00191F R   |   4 cpl24      0001F5 R
  4 cpy_cmd_   001112 R   |   4 cpy_quot   001152 R   |   4 create_g   000C9D R
  4 cs_high    003038 R   |   4 dash_tst   000F91 R   |   4 data       002EBB R
  4 data_err   002F34 R   |   5 data_len   000009 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 dec_base   001C53 R   |   4 decomp_l   0011EA R
  4 decompil   0011A2 GR  |   4 del_line   000C70 R   |   4 delete_l   000A5F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

  4 delete_n   000982 R   |   4 delete_u   000A24 R   |   4 digital_   00274E R
  4 digital_   002785 R   |   4 div24      000302 R   |   4 divu24_8   0002E4 R
  4 do_loop    002E25 R   |   4 do_progr   00077A R   |   4 dup24      00016A R
  5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR  |   4 edit       002047 R
  4 enable_i   002D8F R   |   4 eql_tst    00101C R   |   4 equal      001345 R
  4 erase      002826 R   |   4 erase_ex   0007AB R   |   4 erase_fl   0007A1 R
  4 err_bad_   001588 R   |   4 err_buf_   0015FE R   |   4 err_cmd_   00154C R
  4 err_div0   001511 R   |   4 err_dupl   001566 R   |   4 err_math   0014F8 R
  4 err_mem_   0014DD R   |   4 err_msg    0014BB R   |   4 err_no_a   001594 R
  4 err_no_d   0015C7 R   |   4 err_no_f   0015EB R   |   4 err_no_l   001520 R
  4 err_no_p   0015D7 R   |   4 err_not_   001577 R   |   4 err_over   00160B R
  4 err_run_   001536 R   |   4 err_synt   0014EA R   |   4 escaped    000D88 GR
  4 expect     00195C R   |   4 expressi   001AC1 R   |   4 factor     0019BA R
  5 farptr     000018 R   |   4 fcpu       002BCA R   |   4 fetchc     000627 R
  4 fill_wri   00289E R   |   4 final_te   000BC0 R   |   4 first_li   001FF1 R
  5 flags      000022 GR  |   4 for        002337 R   |   4 free       001C58 R
  5 free_eep   000024 R   |   7 free_ram   000090 R   |   4 func_arg   001969 R
  4 func_cha   0029F4 R   |   4 func_eef   001D57 R   |   4 ge         001347 R
  4 get_addr   0017CE R   |   4 get_arra   00198A R   |   4 get_char   0017E8 R
  4 get_esca   000942 R   |   4 get_int2   0017D8 R   |   4 get_targ   002464 R
  4 get_targ   002472 R   |   4 get_tick   002B54 R   |   4 get_toke   000EE2 GR
  4 get_valu   001CDC R   |   4 getc       00091B GR  |   4 gosub      002582 R
  4 gosub_1    00258D R   |   4 gosub_2    002593 R   |   4 goto       002568 R
  4 goto_1     002572 R   |   4 gpio       002A5B R   |   4 gt         001343 R
  4 gt_tst     001027 R   |   4 hex_base   001C4E R   |   4 hex_dump   000667 R
  4 if         00231A R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   00087D R   |   4 input_ex   0021F2 R
  4 input_lo   00215C R   |   4 input_va   002158 R   |   4 insert_c   0009E1 R
  4 insert_l   000CC9 R   |   4 insert_l   000D38 R   |   4 interp_l   001718 R
  4 interpre   0016F3 R   |   4 invalid    00057C R   |   4 invalid_   0005FD R
  4 is_alnum   000E36 GR  |   4 is_alpha   000E1C GR  |   4 is_data_   002EC1 R
  4 is_digit   000E2D GR  |   4 is_symbo   000E3F R   |   4 itoa       00182B GR
  4 itoa_loo   00184D R   |   4 jp_to_ta   002575 R   |   4 key        002A4A R
  4 kword_di   0034D6 GR  |   4 kword_en   00311E R   |   4 le         00134C R
  4 ledoff     000432 R   |   4 ledon      00042D R   |   4 ledtoggl   000437 R
  4 left_par   000440 R   |   4 let        001C99 GR  |   4 let_arra   001CA7 R
  4 let_dvar   001751 R   |   4 let_eval   001CAF R   |   4 let_var    001CAC R
  4 lines_sk   001FF4 R   |   4 list       001FA2 R   |   4 list_con   001CEB R
  4 list_exi   002036 R   |   4 list_loo   002014 R   |   4 log2       002DD2 R
  4 look_tar   002495 R   |   4 loop_bac   002447 R   |   5 loop_dep   00001F R
  4 loop_don   00245C R   |   4 lshift     002B72 R   |   4 lt         00134A R
  4 lt_tst     001050 R   |   4 mem_peek   000599 R   |   4 mod24      00039C R
  4 move       0013B2 GR  |   4 move_dow   0013D1 R   |   4 move_era   000709 R
  4 move_exi   0013F2 R   |   4 move_lef   0009B9 R   |   4 move_loo   0013D6 R
  4 move_prg   000749 R   |   4 move_rig   0009C7 R   |   4 move_up    0013C3 R
  4 mul24      000274 R   |   4 mul_char   001334 R   |   4 mulu24_8   000235 R
  4 nbr_tst    000F15 R   |   4 ne         00134F R   |   4 neg24      0001FE R
  4 neg_acc2   000218 R   |   4 neg_ax     000210 R   |   4 new        00281C R
  4 next       0023EF R   |   4 next_lin   0016FB R   |   4 next_tok   0017A6 GR
  4 no_match   001931 R   |   4 number     00062D R   |   4 other      001079 R
  4 overwrit   000BEC R   |   2 pad        0016E0 GR  |   4 pad_ref    00303D R
  4 parse_bi   000DE1 R   |   4 parse_in   000D90 R   |   4 parse_ke   000E62 R
  4 parse_qu   000D3B R   |   4 parse_sy   000E4A R   |   4 pause      002AE2 R
  4 pause02    002AF5 R   |   4 peek       0022F9 R   |   4 peek_byt   0005C7 R
  4 pin_mode   002BD9 R   |   4 plus_tst   000FF0 R   |   4 poke       0022D8 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

  4 power_ad   0026C2 R   |   4 prcnt_ts   001011 R   |   4 print      0020AF R
  4 print_fa   00060C R   |   4 print_he   000C23 GR  |   4 print_re   00048C R
  4 print_st   00058C R   |   4 print_to   001813 R   |   4 prog_siz   001F11 R
  4 program_   001F19 R   |   4 program_   000723 R   |   4 program_   000749 R
  4 prt_acc2   001805 R   |   4 prt_basi   00208B R   |   4 prt_i16    0017EE R
  4 prt_loop   0020B3 R   |   4 prt_peek   00040F GR  |   4 prt_reg1   00046D R
  4 prt_reg8   00044B R   |   4 prt_regs   0003A5 GR  |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       00090B GR  |   4 puts       000968 GR
  4 qgetc      000914 GR  |   4 qkey       002A4E GR  |   4 qmark_ts   000FA7 R
  4 qsign      002897 R   |   4 random     002C68 R   |   4 read       002F39 R
  4 read01     002F3E R   |   4 read_int   00364D R   |   4 readln     000A6D GR
  4 readln_l   000A7C R   |   4 readln_q   000C09 R   |   4 refresh_   002DCD R
  4 regs_sta   0003E8 R   |   4 relation   001AF9 R   |   4 relop_st   001337 R
  4 remark     0021F7 GR  |   4 repl       000545 R   |   4 repl_exi   00056D R
  4 reset_co   0020B1 R   |   4 rest_con   002148 R   |   4 restore    002ECF R
  4 return     0025A6 R   |   4 right_al   001140 GR  |   4 row_alig   000862 R
  4 row_eras   0006DC R   |   4 row_eras   000709 R   |   4 row_loop   00064A R
  4 rparnt_t   000F65 R   |   4 rshift     002B9E R   |   7 rsign      00008C R
  7 rsize      00008E R   |   4 rt_msg     001615 R   |   4 run        0025C3 R
  4 run_app    000135 R   |   4 run_it     0025F5 R   |   4 run_it_0   0025F7 R
  5 rx1_head   00002E R   |   5 rx1_queu   000026 R   |   5 rx1_tail   00002F R
  4 save_app   0028C2 R   |   4 save_con   002138 R   |   4 scan_blo   00088B R
  4 search_d   001911 GR  |   4 search_e   001959 R   |   4 search_l   000C45 GR
  4 search_l   000C54 R   |   4 search_n   001D80 R   |   4 search_n   001915 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002C38 R
  4 send_esc   000990 R   |   4 send_par   00099B R   |   4 set_data   002F05 R
  4 set_time   002D6D R   |   4 sharp_ts   000F86 R   |   4 show_row   000638 R
  4 single_c   00132D R   |   4 skip       000ECF R   |   4 skip_str   0017BF R
  4 slash_ts   001006 R   |   4 sleep      002AD7 R   |   4 software   001405 R
  4 spaces     0009D5 GR  |   4 spi_clea   002FD2 R   |   4 spi_disa   002FBA R
  4 spi_enab   002F87 R   |   4 spi_rcv_   002FF4 R   |   4 spi_read   00301F R
  4 spi_sele   003026 R   |   4 spi_send   002FDE R   |   4 spi_writ   002FFF R
  2 stack_fu   00179C GR  |   2 stack_un   001828 R   |   4 star_tst   000FFB R
  4 step       0023AD R   |   4 stop       0027D0 R   |   4 store_lo   0023DC R
  4 str_matc   00193E R   |   4 str_tst    000F05 R   |   4 strcmp     001391 R
  4 strcpy     0013A2 GR  |   4 strlen     001386 GR  |   4 sub24      000196 R
  4 symb_loo   000E4B R   |   4 syntax_e   001648 GR  |   4 system_i   00144B R
  5 tab_widt   000023 GR  |   4 tb_error   00164A GR  |   4 term       001A7E R
  4 term01     001A86 R   |   4 term_exi   001ABE R   |   4 test       0034DE R
  4 test_p     000584 R   |   2 tib        001690 GR  |   4 tick_tst   000FBF R
  5 ticks      00000F R   |   4 timeout    002D84 R   |   5 timer      000012 GR
  4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R   |   4 tk_id      001638 R
  4 to         002367 R   |   4 to_eepro   000772 R   |   4 to_flash   000777 R
  4 to_hex_c   000C3A GR  |   4 to_upper   001884 GR  |   4 token_ch   00108F R
  4 token_ex   001093 R   |   4 tone       002667 R   |   4 try_next   002F12 R
  5 txtbgn     00001B GR  |   5 txtend     00001D GR  |   4 uart1_ge   00091B GR
  4 uart1_in   0008C6 R   |   4 uart1_pu   00090B GR  |   4 uart1_qg   000914 GR
  4 uart1_se   0008D6 R   |   4 ubound     001C8E R   |   4 uflash     002A8B R
  4 unlock_e   0006A6 R   |   4 unlock_f   0006C1 R   |   4 until      002E38 R
  4 user_int   000057 R   |   4 usr        002AA8 R   |   4 var_name   001198 GR
  5 vars       000034 GR  |   4 wait       0021FD R   |   4 warm_ini   00147C R
  4 warm_sta   0016D4 R   |   4 words      002D03 R   |   4 words_co   002D57 R
  4 write      0029B1 R   |   4 write_bl   000827 GR  |   4 write_bu   000763 R
  4 write_by   0007AD R   |   4 write_ee   0007E9 R   |   4 write_ex   000822 R
  4 write_fl   0007D3 R   |   4 write_nb   00084C R   |   4 xalloc     003050 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Symbol Table

  4 xdrop      003086 R   |   4 xpick      003104 R   |   4 xpop       003046 R
  4 xpush      003042 R   |   4 xput       0030D1 R   |   4 xstack_b   0030B3 R
  2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 251.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3704   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

