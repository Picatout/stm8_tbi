ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                                    144 
                                    145 ;--------------------------------------
                                    146 ;   assembler flags 
                                    147 ;-------------------------------------
                                    148 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    149 
                                    150      .macro _usec_dly n 
                                    151     ldw x,#(16*n-2)/4
                                    152     decw x
                                    153     nop 
                                    154     jrne .-4
                                    155     .endm 
                                    156     
                                    157     ; load X register with 
                                    158     ; entry point of dictionary
                                    159     ; before calling 'search_dict'
                                    160     .macro _ldx_dict dict_name
                                    161     ldw x,#dict_name+2
                                    162     .endm 
                                    163 
                                    164     ; reset BASIC pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; to beginning of last token
                                    166     ; extracted except if it was end of line 
                                    167     .macro _unget_token 
                                    168      mov in,in.saved  
                                    169     .endm
                                    170 
                                    171 
                                    172     ; extract code address for 
                                    173     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    174     .macro _get_code_addr
                                    175         ldw x,(x)
                                    176         inc in 
                                    177         inc in 
                                    178     .endm 
                                    179 
                                    180 
                                    181 
                                    182 ;---------------------------------------
                                    183 ;    xtack manipulation macros 
                                    184 ;    Y is used as xstack pointer  
                                    185 ;----------------------------------------
                                    186     ; pop in A:X from XSTACK 
                                    187     .macro _xpop 
                                    188     ld a,(y)
                                    189     ldw x,y 
                                    190     ldw x,(1,x)
                                    191     addw y,#CELL_SIZE 
                                    192     .endm 
                                    193 
                                    194     ; push A:X  to XSTACK 
                                    195     .macro _xpush 
                                    196     subw y,#CELL_SIZE
                                    197     ld (y),a 
                                    198     ldw (1,y),x 
                                    199     .endm 
                                    200 
                                    201     ; drop from XSTACK 
                                    202     .macro _xdrop 
                                    203     addw y,#CELL_SIZE 
                                    204     .endm 
                                    205 
                                    206     ; @T fetch top xstack 
                                    207     .macro _at_top
                                    208     ld a,(y)
                                    209     ldw x,y 
                                    210     ldw x,(1,x)
                                    211     .endm 
                                    212 
                                    213     ; @N  fetch next on xstack 
                                    214     .macro _at_next 
                                    215     ld a,(3,y)
                                    216     ldw x,y 
                                    217     ldw x,(4,x)
                                    218     .endm 
                                    219 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ; !T put on top of xtack 
                                    221     .macro _store_top 
                                    222     ld (y),a 
                                    223     ldw (1,y),x     
                                    224     .endm 
                                    225 
                                    226     ; !N put next on xstack 
                                    227     .macro _store_next 
                                    228     ld (3,y),a 
                                    229     ldw (4,y),x 
                                    230     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001690                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         45 xstack_unf:: ; xstack underflow 
      00179C                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B8             54     int cold_start			; RESET vector 
                           000001    55 .if DEBUG
      000004 82 00 00 12             56 	int DebugHandler 		;TRAP  software interrupt
                           000000    57 .else
                                     58 	int SysCall ; TRAP  BASIC sys() calls 
                                     59 .endif
      000008 82 00 00 00             60 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             61 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             62 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             63 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             64 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             65 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             66 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 39             67 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             68 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             69 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             70 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             71 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             72 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             73 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             74 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             75 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             76 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             77 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 6C             78 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             79 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             80 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             81 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             82 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 16             83 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             84 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             85 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             86 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             87 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             88 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             89 	int NonHandledInterrupt ;int29  not used
                                     90 
                                     91 ;---------------------------------------
                                     92     .area CODE
                                     93 ;---------------------------------------
                                     94 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     96 ; non handled interrupt 
                                     97 ; reset MCU
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         99 NonHandledInterrupt:
      000000                        100 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    101 
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    103 ; auto wakeup from halt
                                    104 ; at iret, program continue 
                                    105 ; after hatl instruction
                                    106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        107 AWUHandler:
      000004 72 19 50 F0      [ 1]  108 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  109 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  110 	clr AWU_TBR 
      000011 80               [11]  111 	iret
                                    112 
                                    113 ;------------------------------------
                                    114 ; software interrupt handler  
                                    115 ;------------------------------------
                           000001   116 .if DEBUG 
      000012                        117 DebugHandler:
      000012 CD 04 17         [ 4]  118 	call print_registers
      000015 80               [11]  119 	iret
                           000000   120 .else 
                                    121 SysCall:
                                    122 
                                    123 	iret 
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000016                        132 Timer4UpdateHandler:
      000016 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      00001A C6 00 0F         [ 1]  134 	ld a,ticks 
      00001D CE 00 10         [ 2]  135 	ldw x,ticks+1
      000020 1C 00 01         [ 2]  136 	addw x,#1 
      000023 A9 00            [ 1]  137 	adc a,#0 
      000025 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000027 4F               [ 1]  140 	clr a 
      000028 5F               [ 1]  141 	clrw x 
      000029 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00002C CF 00 10         [ 2]  143 	ldw ticks+1,x 
      00002F CE 00 12         [ 2]  144 	ldw x,timer
      000032 27 04            [ 1]  145 	jreq 1$
      000034 5A               [ 2]  146 	decw x 
      000035 CF 00 12         [ 2]  147 	ldw timer,x 
      000038                        148 1$:	
      000038 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000039                        157 UserButtonHandler:
                                    158 ; wait button release
      000039 5F               [ 1]  159 	clrw x
      00003A 5A               [ 2]  160 1$: decw x 
      00003B 26 FD            [ 1]  161 	jrne 1$
      00003D 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      000042 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000047 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      00004B 80               [11]  166 	iret
      00004C                        167 2$:	
      00004C                        168 user_interrupted:
      00004C 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      000051 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      000053                        171 4$:	; program interrupted by user 
      000053 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000057 AE 00 65         [ 2]  173 	ldw x,#USER_ABORT
      00005A CD 09 3B         [ 4]  174 	call puts 
      00005D                        175 UBTN_Handler_exit:
      00005D AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      000060 94               [ 1]  177     ldw sp,x
      000061 9A               [ 1]  178 	rim 
      000062 CC 16 C5         [ 2]  179 5$:	jp warm_start
                                    180 
      000065 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000080                        195 clock_init:	
      000080 C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      000083 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000085 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000089 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      00008C C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00008F 26 FB            [ 1]  202 	jrne 1$
      000091                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      000091 9F               [ 1]  205 	ld a,xl 
      000092 C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      000095 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5. CN9-6
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      000096                        215 timer2_init:
      000096 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      00009A 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009E 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000A2 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000A3                        225 timer4_init:
      0000A3 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A7 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000AB 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AF 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B3 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000B7 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000B8                        236 cold_start:
                                    237 ;set stack 
      0000B8 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000BB 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000BC 7F               [ 1]  241 0$: clr (x)
      0000BD 5A               [ 2]  242 	decw x 
      0000BE 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000C0 A6 FF            [ 1]  245 	ld a,#255 
      0000C2 C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000C5 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000C8 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000CB C7 50 12         [ 1]  249 	ld PD_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000CE C7 50 17         [ 1]  250 	ld PE_CR1,a 
      0000D1 C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000D4 C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000D7 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000DA 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000DE 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000E2 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000E6 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000EA 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000EF 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000F3 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      0000F7 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      0000F9 5F               [ 1]  268 	clrw x  
      0000FA CD 00 80         [ 4]  269     call clock_init 
      0000FD CD 00 A3         [ 4]  270 	call timer4_init
      000100 CD 00 96         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      000103 CD 08 99         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000106 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      00010A 9A               [ 1]  277 	rim ; enable interrupts 
      00010B 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00010F 72 5C 00 15      [ 1]  279 	inc seedx+1 
      000113 CD 1D 41         [ 4]  280 	call func_eefree 
      000116 CD 1C 76         [ 4]  281 	call ubound 
      000119 CD 14 71         [ 4]  282 	call clear_basic
      00011C CD 25 A6         [ 4]  283 	call beep_1khz  
      00011F CD 14 1E         [ 4]  284 	call system_information
      000122                        285 2$:	
                                    286 ; check for application in flash memory 
      000122 CD 27 E1         [ 4]  287 	call qsign 
      000125 27 03            [ 1]  288 	jreq run_app
      000127 CC 16 C5         [ 2]  289 	jp warm_start 
      00012A                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      00012A 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      00012E CD 14 4F         [ 4]  293 	call warm_init
      000131 AE 36 04         [ 2]  294 	ldw x,#app 
      000134 CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000137 72 BB 36 02      [ 2]  296 	addw x,app_size 
      00013B CF 00 1D         [ 2]  297 	ldw txtend,x 
      00013E AE 01 4C         [ 2]  298 	ldw x,#AUTO_RUN 
      000141 CD 09 3B         [ 4]  299 	call puts 
      000144 CD 1E 63         [ 4]  300 	call program_info 
      000147 CC 25 41         [ 2]  301 	jp run_it_02  
      00014A 20 FE            [ 2]  302     jra .  
                                    303 
      00014C 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00015F                         37 dup24:
      00015F                         38     _at_top 
      00015F 90 F6            [ 1]    1     ld a,(y)
      000161 93               [ 1]    2     ldw x,y 
      000162 EE 01            [ 2]    3     ldw x,(1,x)
      000164                         39     _xpush 
      000164 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000168 90 F7            [ 1]    2     ld (y),a 
      00016A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00016D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00016E                         48 add24: ; ( N T -- N+T )
      00016E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00016E 90 F6            [ 1]    1     ld a,(y)
      000170 93               [ 1]    2     ldw x,y 
      000171 EE 01            [ 2]    3     ldw x,(1,x)
      000173 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000177 89               [ 2]   50     pushw x  
      000178 88               [ 1]   51     push a  
      000179                         52     _at_top  
      000179 90 F6            [ 1]    1     ld a,(y)
      00017B 93               [ 1]    2     ldw x,y 
      00017C EE 01            [ 2]    3     ldw x,(1,x)
      00017E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000181 19 01            [ 1]   54     adc a, (1,sp)
      000183                         55     _store_top 
      000183 90 F7            [ 1]    1     ld (y),a 
      000185 90 EF 01         [ 2]    2     ldw (1,y),x     
      000188                         56     _drop 3 
      000188 5B 03            [ 2]    1     addw sp,#3 
      00018A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00018B                         63 sub24: ; ( N T -- N-T ) 
      00018B                         64     _xpop 
      00018B 90 F6            [ 1]    1     ld a,(y)
      00018D 93               [ 1]    2     ldw x,y 
      00018E EE 01            [ 2]    3     ldw x,(1,x)
      000190 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000194 89               [ 2]   65     pushw x 
      000195 88               [ 1]   66     push  a
      000196                         67     _at_top  
      000196 90 F6            [ 1]    1     ld a,(y)
      000198 93               [ 1]    2     ldw x,y 
      000199 EE 01            [ 2]    3     ldw x,(1,x)
      00019B 72 F0 02         [ 2]   68     subw x,(2,sp) 
      00019E 12 01            [ 1]   69     sbc a, (1,sp)
      0001A0                         70     _store_top  
      0001A0 90 F7            [ 1]    1     ld (y),a 
      0001A2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A5                         71     _drop 3 
      0001A5 5B 03            [ 2]    1     addw sp,#3 
      0001A7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001A8                         77 cp24:
      0001A8                         78     _xpop 
      0001A8 90 F6            [ 1]    1     ld a,(y)
      0001AA 93               [ 1]    2     ldw x,y 
      0001AB EE 01            [ 2]    3     ldw x,(1,x)
      0001AD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001B1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001B4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0001B7                         81     _at_top 
      0001B7 90 F6            [ 1]    1     ld a,(y)
      0001B9 93               [ 1]    2     ldw x,y 
      0001BA EE 01            [ 2]    3     ldw x,(1,x)
      0001BC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001C0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001C3 2F 08            [ 1]   84     jrslt 1$
      0001C5 26 0A            [ 1]   85     jrne 2$
      0001C7 5D               [ 2]   86     tnzw x 
      0001C8 26 07            [ 1]   87     jrne 2$
      0001CA 4F               [ 1]   88     clr a 
      0001CB 20 06            [ 2]   89     jra 9$ 
      0001CD                         90 1$: ; i1 < i2 
      0001CD A6 FF            [ 1]   91     ld a,#255
      0001CF 20 02            [ 2]   92     jra 9$ 
      0001D1                         93 2$: ; i1 > i2 
      0001D1 A6 01            [ 1]   94     ld a,#1 
      0001D3 5F               [ 1]   95 9$: clrw x
      0001D4                         96      _store_top 
      0001D4 90 F7            [ 1]    1     ld (y),a 
      0001D6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001DA                        103 cp24_ax:
      0001DA 88               [ 1]  104     push a 
      0001DB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001DE C2 00 0C         [ 1]  106     sbc a,acc24
      0001E1 84               [ 1]  107     pop a 
      0001E2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001E3                        115 abs24: ; ( i -- u )
      0001E3 90 F6            [ 1]  116     ld a,(y)
      0001E5 A1 80            [ 1]  117     cp a,#0x80 
      0001E7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001E9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001EA                        124 cpl24:  ; i -- ~i 
      0001EA 90 73            [ 1]  125     cpl (y) 
      0001EC 90 63 01         [ 1]  126     cpl (1,y)
      0001EF 90 63 02         [ 1]  127     cpl (2,y)
      0001F2 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001F3                        133 neg24: ; (i -- -i )
      0001F3                        134     _at_top
      0001F3 90 F6            [ 1]    1     ld a,(y)
      0001F5 93               [ 1]    2     ldw x,y 
      0001F6 EE 01            [ 2]    3     ldw x,(1,x)
      0001F8 43               [ 1]  135     cpl  a  
      0001F9 53               [ 2]  136     cplw x 
      0001FA 1C 00 01         [ 2]  137     addw x,#1
      0001FD A9 00            [ 1]  138     adc a,#0
      0001FF                        139     _store_top  
      0001FF 90 F7            [ 1]    1     ld (y),a 
      000201 90 EF 01         [ 2]    2     ldw (1,y),x     
      000204 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000205                        145 neg_ax:
      000205 43               [ 1]  146     cpl  a  
      000206 53               [ 2]  147     cplw x 
      000207 1C 00 01         [ 2]  148     addw x,#1
      00020A A9 00            [ 1]  149     adc a,#0
      00020C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00020D                        155 neg_acc24: ; 
      00020D 72 53 00 0C      [ 1]  156     cpl acc24 
      000211 72 53 00 0D      [ 1]  157     cpl acc16 
      000215 72 53 00 0E      [ 1]  158     cpl acc8
      000219 72 5C 00 0E      [ 1]  159     inc acc8 
      00021D 26 0A            [ 1]  160     jrne 9$
      00021F 72 5C 00 0D      [ 1]  161     inc acc16 
      000223 26 04            [ 1]  162     jrne 9$
      000225 72 5C 00 0C      [ 1]  163     inc acc24 
      000229 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00022A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00022A 88               [ 1]  181     push a 
      00022B 72 5F 00 0B      [ 1]  182 	clr acc32
      00022F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000233 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000236 97               [ 1]  186     ld xl,a 
      000237 7B 01            [ 1]  187     ld a,(U8,sp)
      000239 42               [ 4]  188     mul x,a 
      00023A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00023D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000240 97               [ 1]  192     ld xl,a 
      000241 7B 01            [ 1]  193     ld a,(U8,sp) 
      000243 42               [ 4]  194     mul x,a 
      000244 72 BB 00 0C      [ 2]  195     addw x,acc24
      000248 72 59 00 0B      [ 1]  196     rlc acc32 
      00024C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00024F 90 F6            [ 1]  199     ld a,(Y)
      000251 97               [ 1]  200     ld xl,a 
      000252 7B 01            [ 1]  201     ld a,(U8,sp)
      000254 42               [ 4]  202     mul x,a 
      000255 72 BB 00 0B      [ 2]  203     addw x,acc32
      000259 02               [ 1]  204     rlwa x 
      00025A 4D               [ 1]  205     tnz a 
      00025B 27 05            [ 1]  206     jreq 1$
      00025D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00025F CC 16 3B         [ 2]  208     jp tb_error 
      000262                        209 1$:
      000262 9E               [ 1]  210     ld a,xh  
      000263 CE 00 0D         [ 2]  211     ldw x,acc16   
      000266                        212     _drop VSIZE 
      000266 5B 01            [ 2]    1     addw sp,#VSIZE 
      000268 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000269                        224 mul24:
      000269                        225     _vars VSIZE
      000269 52 07            [ 2]    1     sub sp,#VSIZE 
      00026B 5F               [ 1]  226     clrw x 
      00026C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00026E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000270                        229     _xpop 
      000270 90 F6            [ 1]    1     ld a,(y)
      000272 93               [ 1]    2     ldw x,y 
      000273 EE 01            [ 2]    3     ldw x,(1,x)
      000275 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000279 4D               [ 1]  230     tnz a 
      00027A 2A 05            [ 1]  231     jrpl 0$
      00027C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00027E CD 02 05         [ 4]  233     call neg_ax 
      000281                        234 0$:    
      000281 6B 05            [ 1]  235     ld (N1,sp),a 
      000283 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000285 90 7D            [ 1]  237     tnz (Y)
      000287 2A 05            [ 1]  238     jrpl 2$ 
      000289 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00028B CD 01 F3         [ 4]  240     call neg24
      00028E                        241 2$: 
      00028E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      000290 27 0A            [ 1]  243     jreq 4$
      000292 CD 02 2A         [ 4]  244     call mulu24_8
      000295 4D               [ 1]  245     tnz a 
      000296 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      000298 6B 01            [ 1]  247     ld (PROD,sp),a
      00029A 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      00029C                        249 4$:
      00029C 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      00029E 27 0D            [ 1]  251     jreq 5$
      0002A0 CD 02 2A         [ 4]  252     call mulu24_8
      0002A3 4D               [ 1]  253     tnz a 
      0002A4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002A6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002A9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002AB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002AD                        258 5$:
      0002AD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002AF 27 10            [ 1]  260     jreq 6$
      0002B1 CD 02 2A         [ 4]  261     call mulu24_8
      0002B4 01               [ 1]  262     rrwa x 
      0002B5 5D               [ 2]  263     tnzw x 
      0002B6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002B8 4D               [ 1]  265     tnz a 
      0002B9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002BB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002BD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002BF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002C1                        270 6$:
      0002C1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002C3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002C5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002C7 27 03            [ 1]  274     jreq 9$
      0002C9 CD 02 05         [ 4]  275     call neg_ax 
      0002CC                        276 9$:
      0002CC                        277     _store_top 
      0002CC 90 F7            [ 1]    1     ld (y),a 
      0002CE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002D1                        278     _drop VSIZE 
      0002D1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002D3 81               [ 4]  279     ret 
      0002D4                        280 8$: ; overflow
      0002D4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002D6 CC 16 3B         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002D9                        296 divu24_8:
      0002D9 89               [ 2]  297 	pushw x ; save x
      0002DA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002DB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002DE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002E0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002E1 88               [ 1]  303 	push a  ;save remainder
      0002E2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002E5 84               [ 1]  305 	pop a
      0002E6 95               [ 1]  306 	ld xh,a
      0002E7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002EA 97               [ 1]  308 	ld xl,a
      0002EB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002ED 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002EE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002F0 9F               [ 1]  312 	ld a,xl
      0002F1 C7 00 0E         [ 1]  313 	ld acc8,a
      0002F4 84               [ 1]  314 	pop a
      0002F5 85               [ 2]  315 	popw x
      0002F6 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      0002F7                        332 div24:
      0002F7                        333     _vars VSIZE 
      0002F7 52 06            [ 2]    1     sub sp,#VSIZE 
      0002F9 0F 06            [ 1]  334     clr (RSIGN,sp)
      0002FB 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      0002FD                        336     _xpop 
      0002FD 90 F6            [ 1]    1     ld a,(y)
      0002FF 93               [ 1]    2     ldw x,y 
      000300 EE 01            [ 2]    3     ldw x,(1,x)
      000302 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000306 4D               [ 1]  337     tnz a 
      000307 2A 05            [ 1]  338     jrpl 0$ 
      000309 03 05            [ 1]  339     cpl (QSIGN,sp)
      00030B CD 02 05         [ 4]  340     call neg_ax
      00030E                        341 0$:
      00030E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000310 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000312 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000314 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000316 26 05            [ 1]  346     jrne 1$ 
      000318 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00031A CC 16 3B         [ 2]  348     jp tb_error 
      00031D                        349 1$: ; dividend  
      00031D                        350     _at_top
      00031D 90 F6            [ 1]    1     ld a,(y)
      00031F 93               [ 1]    2     ldw x,y 
      000320 EE 01            [ 2]    3     ldw x,(1,x)
      000322 4D               [ 1]  351     tnz a 
      000323 2A 07            [ 1]  352     jrpl 2$
      000325 CD 02 05         [ 4]  353     call neg_ax
      000328 03 05            [ 1]  354     cpl (QSIGN,sp)
      00032A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00032C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00032C                        359     _store_top 
      00032C 90 F7            [ 1]    1     ld (y),a 
      00032E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000331 A6 18            [ 1]  360     ld a,#24 
      000333 6B 04            [ 1]  361     ld (CNTR,sp),a
      000335 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000337 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000339 CD 01 DA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00033C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00033E C6 00 0C         [ 1]  368     ld a,acc24 
      000341 CE 00 0D         [ 2]  369     ldw x,acc16 
      000344 72 5F 00 0C      [ 1]  370     clr acc24 
      000348 72 5F 00 0D      [ 1]  371     clr acc16 
      00034C 72 5F 00 0E      [ 1]  372     clr acc8 
      000350 20 26            [ 2]  373     jra 6$
      000352                        374 22$:     
      000352 4F               [ 1]  375     clr a 
      000353 5F               [ 1]  376     clrw x 
      000354 98               [ 1]  377     rcf  
      000355                        378 3$: ; shift carry in acc24 bit 0 
      000355 90 69 02         [ 1]  379     rlc (2,y) 
      000358 90 69 01         [ 1]  380     rlc (1,y)
      00035B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00035D 59               [ 2]  382     rlcw x  
      00035E 49               [ 1]  383     rlc a
      00035F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000362 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000364 24 05            [ 1]  386     jrnc 5$
      000366 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000369 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00036B                        389 5$: ; shift carry in QUOTIENT 
      00036B 8C               [ 1]  390     ccf
      00036C 0A 04            [ 1]  391     dec (CNTR,sp)
      00036E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000370 90 69 02         [ 1]  394     rlc (2,y)
      000373 90 69 01         [ 1]  395     rlc (1,y) 
      000376 90 79            [ 1]  396     rlc (y) 
      000378                        397 6$:    
      000378 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00037A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00037C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00037E 27 03            [ 1]  401     jreq 8$
      000380 CD 01 F3         [ 4]  402     call neg24
      000383                        403 8$: 
      000383 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000385 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000387                        406 81$:
      000387 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000389 27 03            [ 1]  408     jreq 9$
      00038B CD 02 05         [ 4]  409     call neg_ax       
      00038E                        410 9$: _drop VSIZE 
      00038E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000390 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      000391                        423 mod24:
      000391 CD 02 F7         [ 4]  424     call div24 
      000394                        425     _store_top  ; replace quotient by remainder 
      000394 90 F7            [ 1]    1     ld (y),a 
      000396 90 EF 01         [ 2]    2     ldw (1,y),x     
      000399 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                           000001    25 .if DEBUG 
                                     26 
                                     27     .area CODE
                                     28 
                                     29 ;--------------------
                                     30 ; print content at address in hex.
                                     31 ; input:
                                     32 ;   X 	address to peek 
                                     33 ; output:
                                     34 ;	none 
                                     35 ;--------------------	
      00039A                         36 prt_peek::
      00039A 89               [ 2]   37 	pushw x 
      00039B 35 10 00 0A      [ 1]   38 	mov base,#16 
      00039F CD 17 E5         [ 4]   39 	call prt_i16  
      0003A2 A6 3A            [ 1]   40 	ld a,#': 
      0003A4 CD 08 DE         [ 4]   41 	call putc 
      0003A7 A6 20            [ 1]   42 	ld a,#SPACE 
      0003A9 CD 08 DE         [ 4]   43 	call putc 
      0003AC 85               [ 2]   44 	popw x 
      0003AD F6               [ 1]   45 	ld a,(x)
      0003AE 5F               [ 1]   46 	clrw x 
      0003AF 97               [ 1]   47 	ld xl,a 
      0003B0 35 0A 00 0A      [ 1]   48 	mov base,#10 
      0003B4 CD 17 E5         [ 4]   49 	call prt_i16 
      0003B7 81               [ 4]   50 	ret 
                                     51 
                                     52 ;----------------------------------------
                                     53 ;   DEBUG support functions
                                     54 ;----------------------------------------
                                     55 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                     56 ; turn LED on 
      0003B8                         57 ledon:
      0003B8 72 1A 50 0A      [ 1]   58     bset PC_ODR,#LED2_BIT
      0003BC 81               [ 4]   59     ret 
                                     60 
                                     61 ; turn LED off 
      0003BD                         62 ledoff:
      0003BD 72 1B 50 0A      [ 1]   63     bres PC_ODR,#LED2_BIT 
      0003C1 81               [ 4]   64     ret 
                                     65 
                                     66 ; invert LED status 
      0003C2                         67 ledtoggle:
      0003C2 A6 20            [ 1]   68     ld a,#LED2_MASK
      0003C4 C8 50 0A         [ 1]   69     xor a,PC_ODR
      0003C7 C7 50 0A         [ 1]   70     ld PC_ODR,a
      0003CA 81               [ 4]   71     ret 
                                     72 
      0003CB                         73 left_paren:
      0003CB A6 20            [ 1]   74 	ld a,#SPACE 
      0003CD CD 08 DE         [ 4]   75 	call putc
      0003D0 A6 28            [ 1]   76 	ld a,#'( 
      0003D2 CD 08 DE         [ 4]   77 	call putc 	
      0003D5 81               [ 4]   78 	ret 
                                     79 
                                     80 ;------------------------------
                                     81 ; print 8 bit register 
                                     82 ; input:
                                     83 ;   X  point to register name 
                                     84 ;   A  register value to print 
                                     85 ; output:
                                     86 ;   none
                                     87 ;------------------------------- 
      0003D6                         88 prt_reg8:
      0003D6 88               [ 1]   89 	push a 
      0003D7 CD 09 3B         [ 4]   90 	call puts 
      0003DA 7B 01            [ 1]   91 	ld a,(1,sp) 
      0003DC 5F               [ 1]   92 	clrw x 
      0003DD 97               [ 1]   93 	ld xl,a 
      0003DE 35 10 00 0A      [ 1]   94 	mov base,#16
      0003E2 CD 17 E5         [ 4]   95 	call prt_i16  
      0003E5 CD 03 CB         [ 4]   96 	call left_paren 
      0003E8 84               [ 1]   97 	pop a 
      0003E9 5F               [ 1]   98 	clrw x 
      0003EA 97               [ 1]   99 	ld xl,a 
      0003EB 35 0A 00 0A      [ 1]  100 	mov base,#10 
      0003EF CD 17 E5         [ 4]  101 	call prt_i16  
      0003F2 A6 29            [ 1]  102 	ld a,#') 
      0003F4 CD 08 DE         [ 4]  103 	call putc
      0003F7 81               [ 4]  104 	ret
                                    105 
                                    106 ;--------------------------------
                                    107 ; print 16 bits register 
                                    108 ; input:
                                    109 ;   X   point register name 
                                    110 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                    111 ; output:
                                    112 ;  none
                                    113 ;--------------------------------
      0003F8                        114 prt_reg16: 
      0003F8 90 89            [ 2]  115 	pushw y 
      0003FA CD 09 3B         [ 4]  116 	call puts 
      0003FD 1E 01            [ 2]  117 	ldw x,(1,sp) 
      0003FF 35 10 00 0A      [ 1]  118 	mov base,#16 
      000403 CD 17 E5         [ 4]  119 	call prt_i16  
      000406 CD 03 CB         [ 4]  120 	call left_paren 
      000409 85               [ 2]  121 	popw x 
      00040A 35 0A 00 0A      [ 1]  122 	mov base,#10 
      00040E CD 17 E5         [ 4]  123 	call prt_i16  
      000411 A6 29            [ 1]  124 	ld a,#') 
      000413 CD 08 DE         [ 4]  125 	call putc
      000416 81               [ 4]  126 	ret 
                                    127 
                                    128 ;------------------------------------
                                    129 ; print registers contents saved on
                                    130 ; stack by trap interrupt.
                                    131 ;------------------------------------
                           000001   132 	SAVE_ACC24=1 
                           000002   133 	SAVE_ACC16=2
                           000003   134 	VSIZE=3 
      000417                        135 	_argofs VSIZE ; TrapHandler saved acc24  
                           000005     1     ARG_OFS=2+VSIZE 
      000417                        136 	_arg R_PC, 8 
                           00000D     1     R_PC=ARG_OFS+8 
      000417                        137 	_arg R_PCE,7 
                           00000C     1     R_PCE=ARG_OFS+7 
      000417                        138 	_arg R_Y 5 
                           00000A     1     R_Y=ARG_OFS+5 
      000417                        139 	_arg R_X 3
                           000008     1     R_X=ARG_OFS+3 
      000417                        140 	_arg R_A 2
                           000007     1     R_A=ARG_OFS+2 
      000417                        141 	_arg R_CC 1
                           000006     1     R_CC=ARG_OFS+1 
      000417                        142 print_registers:
      000417                        143 	_vars VSIZE 
      000417 52 03            [ 2]    1     sub sp,#VSIZE 
      000419 C6 00 0C         [ 1]  144 	ld a,acc24 
      00041C CE 00 0D         [ 2]  145 	ldw x,acc16 
      00041F 6B 01            [ 1]  146 	ld (SAVE_ACC24,sp),a 
      000421 1F 02            [ 2]  147 	ldw (SAVE_ACC16,sp),x 
      000423 AE 04 86         [ 2]  148 	ldw x,#STATES
      000426 CD 09 3B         [ 4]  149 	call puts
                                    150 ; print EPC 
      000429 35 10 00 0A      [ 1]  151 	mov base,#16
      00042D AE 04 C2         [ 2]  152 	ldw x, #REG_EPC
      000430 CD 09 3B         [ 4]  153 	call puts 
      000433 7B 0C            [ 1]  154 	ld a, (R_PCE,sp)
      000435 C7 00 0E         [ 1]  155 	ld acc8,a 
      000438 1E 0D            [ 2]  156 	ldw x,(R_PC,sp)
      00043A C7 00 0C         [ 1]  157 	ld acc24,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      00043D CF 00 0D         [ 2]  158 	ldw acc16,x 
      000440 4F               [ 1]  159 	clr a 
      000441 CD 17 FC         [ 4]  160 	call prt_acc24 
      000444 35 0A 00 0A      [ 1]  161 	mov base,#10  
                                    162 ; print x
      000448 AE 04 CB         [ 2]  163 	ldw x,#REG_X
      00044B 16 08            [ 2]  164 	ldw y,(R_X,sp)
      00044D CD 03 F8         [ 4]  165 	call prt_reg16  
                                    166 ; print Y 
      000450 AE 04 C7         [ 2]  167 	ldw x,#REG_Y
      000453 16 0A            [ 2]  168 	ldw y, (R_Y,sp)
      000455 CD 03 F8         [ 4]  169 	call prt_reg16  
                                    170 ; print A 
      000458 AE 04 CF         [ 2]  171 	ldw x,#REG_A
      00045B 7B 07            [ 1]  172 	ld a, (R_A,sp) 
      00045D CD 03 D6         [ 4]  173 	call prt_reg8
                                    174 ; print CC 
      000460 AE 04 D3         [ 2]  175 	ldw x,#REG_CC 
      000463 7B 06            [ 1]  176 	ld a, (R_CC,sp) 
      000465 CD 03 D6         [ 4]  177 	call prt_reg8 
                                    178 ; print SP 
      000468 AE 04 D8         [ 2]  179 	ldw x,#REG_SP
      00046B 90 96            [ 1]  180 	ldw y,sp 
      00046D 72 A9 00 0E      [ 2]  181 	addw y,#(VSIZE+2+9)
      000471 CD 03 F8         [ 4]  182 	call prt_reg16  
      000474 A6 0A            [ 1]  183 	ld a,#'\n' 
      000476 CD 08 DE         [ 4]  184 	call putc
      000479 7B 01            [ 1]  185 	ld a,(SAVE_ACC24,sp)
      00047B 1E 02            [ 2]  186 	ldw x,(SAVE_ACC16,sp)
      00047D C7 00 0C         [ 1]  187 	ld acc24,a 
      000480 CF 00 0D         [ 2]  188 	ldw acc16,x 
      000483                        189 	_drop VSIZE  	
      000483 5B 03            [ 2]    1     addw sp,#VSIZE 
      000485 81               [ 4]  190 	ret
                                    191 
      000486 0A 52 65 67 69 73 74   192 STATES:  .asciz "\nRegisters state at TRAP point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 54
             52 41 50 20 70 6F 69
             6E 74 2E 0A 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
      0004C2 45 50 43 3A 00         193 REG_EPC: .asciz "EPC:"
      0004C7 0A 59 3A 00            194 REG_Y:   .asciz "\nY:" 
      0004CB 0A 58 3A 00            195 REG_X:   .asciz "\nX:"
      0004CF 0A 41 3A 00            196 REG_A:   .asciz "\nA:" 
      0004D3 0A 43 43 3A 00         197 REG_CC:  .asciz "\nCC:"
      0004D8 0A 53 50 3A 00         198 REG_SP:  .asciz "\nSP:"
                                    199 
                                    200 ;----------------------
                                    201 ; input:
                                    202 ;	Y    *input buffer 
                                    203 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    204 ;   acc24  integer 
                                    205 ;----------------------
      0004DD                        206 parse_addr:
      0004DD A6 20            [ 1]  207 	ld a,#SPACE 
      0004DF CD 0E A2         [ 4]  208 	call skip  	 
      0004E2 72 B9 00 00      [ 2]  209 	addw y,in.w 
      0004E6 AE 16 E0         [ 2]  210 	ldw x,#pad 
      0004E9 CD 13 75         [ 4]  211 	call strcpy
      0004EC AE 16 E0         [ 2]  212 	ldw x,#pad
      0004EF CD 18 87         [ 4]  213 	call atoi24 	
      0004F2 81               [ 4]  214 	ret 
                                    215 
                                    216 ;----------------------------
                                    217 ; command interface
                                    218 ; only 3 commands:
                                    219 ;  'q' to resume application
                                    220 ;  'p [addr]' to print memory values 
                                    221 ;  's addr' to print string 
                                    222 ;----------------------------
                                    223 ;local variable
                           00000B   224 	PSIZE=11
                           00000A   225 	SAV_COUNT=10
                           000009   226 	SAV_IN=9
                           000008   227 	SAV_ACC24=8
                           000006   228 	SAV_ACC16=6
                           000004   229 	R_Y=4
                           000002   230 	R_X=2
                           000001   231 	R_A=1
                           00000B   232 	VSIZE=11
      0004F3                        233 cmd_itf:
      0004F3 8A               [ 1]  234 	push cc 
      0004F4                        235 	_vars VSIZE
      0004F4 52 0B            [ 2]    1     sub sp,#VSIZE 
      0004F6 6B 01            [ 1]  236 	ld (R_A,sp),a
      0004F8 C6 00 03         [ 1]  237 	ld a,count 
      0004FB 6B 0A            [ 1]  238 	ld (SAV_COUNT,sp),a 
      0004FD C6 00 01         [ 1]  239 	ld a,in 
      000500 6B 09            [ 1]  240 	ld (SAV_IN,sp),a  
      000502 1F 02            [ 2]  241 	ldw (R_X,sp),x 
      000504 17 04            [ 2]  242 	ldw (R_Y,sp),y
      000506 C6 00 0C         [ 1]  243 	ld a,acc24 
      000509 CE 00 0D         [ 2]  244 	ldw x,acc16 
      00050C 6B 08            [ 1]  245 	ld (SAV_ACC24,sp),a 
      00050E 1F 06            [ 2]  246 	ldw (SAV_ACC16,sp),x 
      000510 72 5F 00 18      [ 1]  247 	clr farptr 
      000514 72 5F 00 19      [ 1]  248 	clr farptr+1 
      000518 72 5F 00 1A      [ 1]  249 	clr farptr+2  
      00051C                        250 repl:
      00051C A6 0D            [ 1]  251 	ld a,#CR 
      00051E CD 08 DE         [ 4]  252 	call putc 
      000521 A6 3F            [ 1]  253 	ld a,#'? 
      000523 CD 08 DE         [ 4]  254 	call putc
      000526 72 5F 00 00      [ 1]  255 	clr in.w 
      00052A 72 5F 00 01      [ 1]  256 	clr in 
      00052E CD 0A 40         [ 4]  257 	call readln
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000531 90 AE 16 90      [ 2]  258 	ldw y,#tib  
      000535 90 F6            [ 1]  259 	ld a,(y)
      000537 27 E3            [ 1]  260 	jreq repl  
      000539 72 5C 00 01      [ 1]  261 	inc in 
      00053D CD 18 7B         [ 4]  262 	call to_upper 
      000540 A1 51            [ 1]  263 	cp a,#'Q 
      000542 26 26            [ 1]  264 	jrne test_p
      000544                        265 repl_exit:
                                    266 ; restore original context 
      000544 7B 08            [ 1]  267 	ld a,(SAV_ACC24,sp)
      000546 1E 06            [ 2]  268 	ldw x,(SAV_ACC16,sp)
      000548 C7 00 0C         [ 1]  269 	ld acc24,a 
      00054B CF 00 0D         [ 2]  270 	ldw acc16,x
      00054E 7B 0A            [ 1]  271 	ld a,(SAV_COUNT,sp)
      000550 C7 00 03         [ 1]  272 	ld count,a 
      000553 7B 09            [ 1]  273 	ld a,(SAV_IN,sp)
      000555 C7 00 01         [ 1]  274 	ld in,a 
      000558 16 04            [ 2]  275 	ldw y,(R_Y,sp)
      00055A 1E 02            [ 2]  276 	ldw x,(R_X,sp)
      00055C 7B 01            [ 1]  277 	ld a,(R_A,sp)
      00055E                        278 	_drop VSIZE
      00055E 5B 0B            [ 2]    1     addw sp,#VSIZE 
      000560 86               [ 1]  279 	pop cc 
      000561 81               [ 4]  280 	ret  
      000562                        281 invalid:
      000562 AE 05 D0         [ 2]  282 	ldw x,#invalid_cmd 
      000565 CD 09 3B         [ 4]  283 	call puts 
      000568 20 B2            [ 2]  284 	jra repl 
      00056A                        285 test_p:	
      00056A A1 50            [ 1]  286     cp a,#'P 
      00056C 27 10            [ 1]  287 	jreq mem_peek
      00056E A1 53            [ 1]  288     cp a,#'S 
      000570 26 F0            [ 1]  289 	jrne invalid 
      000572                        290 print_string:
      000572 CD 04 DD         [ 4]  291 	call parse_addr 	
      000575 CE 00 0D         [ 2]  292 	ldw x,acc16
      000578 CD 09 3B         [ 4]  293 	call puts
      00057B CC 05 1C         [ 2]  294 	jp repl 	
      00057E                        295 mem_peek:
      00057E CD 04 DD         [ 4]  296 	call parse_addr 
      000581 C6 00 0C         [ 1]  297 	ld a, acc24 
      000584 CA 00 0D         [ 1]  298 	or a,acc16 
      000587 CA 00 0E         [ 1]  299 	or a,acc8 
      00058A 26 02            [ 1]  300 	jrne 1$ 
      00058C 20 0C            [ 2]  301 	jra peek_byte  
      00058E CE 00 0C         [ 2]  302 1$:	ldw x,acc24 
      000591 CF 00 18         [ 2]  303 	ldw farptr,x 
      000594 C6 00 0E         [ 1]  304 	ld a,acc8 
      000597 C7 00 1A         [ 1]  305 	ld farptr+2,a 
      00059A                        306 peek_byte:
      00059A CD 05 DF         [ 4]  307 	call print_farptr 
      00059D A6 08            [ 1]  308 	ld a,#8 
      00059F 6B 0B            [ 1]  309 	ld (PSIZE,sp),a 
      0005A1 5F               [ 1]  310 	clrw x 
      0005A2 CD 05 FA         [ 4]  311 1$:	call fetchc  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005A5 89               [ 2]  312 	pushw x 
      0005A6 C7 00 0E         [ 1]  313 	ld acc8,a 
      0005A9 5F               [ 1]  314 	clrw x 
      0005AA CF 00 0C         [ 2]  315 	ldw acc24,x 
      0005AD A6 90            [ 1]  316 	ld a,#16+128
      0005AF CD 17 FC         [ 4]  317 	call prt_acc24
      0005B2 85               [ 2]  318 	popw x 
      0005B3 0A 0B            [ 1]  319 	dec (PSIZE,sp)
      0005B5 26 EB            [ 1]  320 	jrne 1$ 
      0005B7 A6 08            [ 1]  321 	ld a,#8 
      0005B9 CB 00 1A         [ 1]  322 	add a,farptr+2 
      0005BC C7 00 1A         [ 1]  323 	ld farptr+2,a
      0005BF 4F               [ 1]  324 	clr a 
      0005C0 C9 00 19         [ 1]  325 	adc a,farptr+1 
      0005C3 C7 00 19         [ 1]  326 	ld farptr+1,a 
      0005C6 4F               [ 1]  327 	clr a 
      0005C7 C9 00 18         [ 1]  328 	adc a,farptr 
      0005CA C7 00 18         [ 1]  329 	ld farptr,a 
      0005CD CC 05 1C         [ 2]  330 	jp repl  
                                    331 
      0005D0 6E 6F 74 20 61 20 63   332 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    333 
                                    334 ;----------------------------
                                    335 ; display farptr address
                                    336 ;----------------------------
      0005DF                        337 print_farptr:
      0005DF C6 00 1A         [ 1]  338 	ld a ,farptr+2 
      0005E2 C7 00 0E         [ 1]  339 	ld acc8,a 
      0005E5 CE 00 18         [ 2]  340 	ldw x,farptr 
      0005E8 CF 00 0C         [ 2]  341 	ldw acc24,x 
      0005EB 5F               [ 1]  342 	clrw x 
      0005EC A6 10            [ 1]  343 	ld a,#16 
      0005EE CD 17 FC         [ 4]  344 	call prt_acc24
      0005F1 A6 20            [ 1]  345 	ld a,#SPACE 
      0005F3 CD 08 DE         [ 4]  346 	call putc 
      0005F6 CD 08 DE         [ 4]  347 	call putc 
      0005F9 81               [ 4]  348 	ret
                                    349 
                                    350 ;------------------------------------
                                    351 ; get byte at address farptr[X]
                                    352 ; input:
                                    353 ;	 farptr   address to peek
                                    354 ;    X		  farptr index 	
                                    355 ; output:
                                    356 ;	 A 		  byte from memory  
                                    357 ;    x		  incremented by 1
                                    358 ;------------------------------------
      0005FA                        359 fetchc: ; @C
      0005FA 92 AF 00 18      [ 5]  360 	ldf a,([farptr],x)
      0005FE 5C               [ 1]  361 	incw x
      0005FF 81               [ 4]  362 	ret
                                    363 
                                    364 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    365 ;------------------------------------
                                    366 ; expect a number from command line 
                                    367 ; next argument
                                    368 ;  input:
                                    369 ;	  none
                                    370 ;  output:
                                    371 ;    acc24   int24_t 
                                    372 ;------------------------------------
      000600                        373 number:
      000600 CD 0E B5         [ 4]  374 	call get_token
      000603 A1 84            [ 1]  375 	cp a,#TK_INTGR
      000605 27 03            [ 1]  376 	jreq 1$
      000607 CC 16 39         [ 2]  377 	jp syntax_error
      00060A 81               [ 4]  378 1$:	ret
                                    379 
                                    380 
                                    381 ;---------------------
                                    382 ; display n bytes row 
                                    383 ; from memory.
                                    384 ; input:
                                    385 ;   A   bytes to print 
                                    386 ;	X   start address 
                                    387 ; output:
                                    388 ;   X   address after last shown  
                                    389 ;---------------------
                           000001   390 	CNT=1 
                           000002   391 	ADR=2 
                           000003   392 	VSIZE=3 
      00060B                        393 show_row:
      00060B 4D               [ 1]  394 	tnz a 
      00060C 26 01            [ 1]  395 	jrne 1$
      00060E 81               [ 4]  396 	ret 
      00060F                        397 1$:	
      00060F 89               [ 2]  398 	pushw x  
      000610 88               [ 1]  399 	push a 
      000611 35 04 00 23      [ 1]  400 	mov tab_width,#4 
      000615 CD 17 E5         [ 4]  401 	call prt_i16 
      000618 A6 20            [ 1]  402 	ld a,#SPACE  
      00061A CD 08 DE         [ 4]  403 	call putc
      00061D                        404 row_loop:
      00061D 1E 02            [ 2]  405 	ldw x,(ADR,sp)
      00061F F6               [ 1]  406 	ld a,(x)
      000620 5F               [ 1]  407 	clrw x 
      000621 97               [ 1]  408 	ld xl,a 
      000622 CD 17 E5         [ 4]  409 	call prt_i16 
      000625 1E 02            [ 2]  410 	ldw x,(ADR,sp)
      000627 5C               [ 1]  411 	incw x 
      000628 1F 02            [ 2]  412 	ldw (ADR,sp),x 
      00062A 0A 01            [ 1]  413 	dec (CNT,sp)
      00062C 26 EF            [ 1]  414 	jrne row_loop
      00062E                        415 	_drop VSIZE  		
      00062E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000630 35 04 00 23      [ 1]  416 	mov tab_width,#4
      000634 A6 0D            [ 1]  417 	ld a,#CR 
      000636 CD 08 DE         [ 4]  418 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000639 81               [ 4]  419 	ret 
                                    420 
                                    421 ;--------------------------
                                    422 ; print memory content 
                                    423 ; in hexadecimal format
                                    424 ;  input:
                                    425 ;    X    start address 
                                    426 ;    Y    count 
                                    427 ;--------------------------
                           000001   428 	BCNT=1
                           000003   429 	BASE=3
                           000004   430 	TABW=4
                           000004   431 	VSIZE=4   
      00063A                        432 hex_dump:
      00063A 88               [ 1]  433 	push a 
      00063B                        434 	_vars VSIZE
      00063B 52 04            [ 2]    1     sub sp,#VSIZE 
      00063D C6 00 0A         [ 1]  435 	ld a,base
      000640 6B 03            [ 1]  436 	ld (BASE,sp),a 
      000642 35 10 00 0A      [ 1]  437 	mov base,#16
      000646 C6 00 23         [ 1]  438 	ld a,tab_width 
      000649 6B 04            [ 1]  439 	ld (TABW,sp),a
      00064B A6 0D            [ 1]  440 	ld a,#CR 
      00064D CD 08 DE         [ 4]  441 	call putc 
      000650 17 01            [ 2]  442 1$: ldw (BCNT,sp),y
      000652 A6 10            [ 1]  443 	ld a,#16
      000654 90 A3 00 10      [ 2]  444 	cpw y,#16
      000658 2A 02            [ 1]  445 	jrpl 2$
      00065A 90 9F            [ 1]  446 	ld a,yl
      00065C                        447 2$: 	
      00065C CD 06 0B         [ 4]  448 	call show_row 
      00065F 16 01            [ 2]  449 	ldw y,(BCNT,sp) 
      000661 72 A2 00 10      [ 2]  450 	subw y,#16 
      000665 90 A3 00 01      [ 2]  451 	cpw y,#1
      000669 2A E5            [ 1]  452 	jrpl 1$
      00066B 7B 03            [ 1]  453 	ld a,(BASE,sp)
      00066D C7 00 0A         [ 1]  454 	ld base,a
      000670 7B 04            [ 1]  455 	ld a,(TABW,sp)
      000672 C7 00 23         [ 1]  456 	ld tab_width,a 
      000675                        457 	_drop VSIZE
      000675 5B 04            [ 2]    1     addw sp,#VSIZE 
      000677 84               [ 1]  458 	pop a 
      000678 81               [ 4]  459 	ret 
                                    460 
                                    461 .endif ; DEBUG 
                                    462 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000679                         45 unlock_eeprom:
      000679 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      00067E 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      000682 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000686 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      00068A 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      00068E 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000693 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      000694                         62 unlock_flash:
      000694 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      000699 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      00069D 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006A1 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006A5 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006A9 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006AE 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006AF                         76 row_erase:
      0006AF 88               [ 1]   77 	push a 
      0006B0 90 89            [ 2]   78 	pushw y 
      0006B2 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006B6 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006BA 4F               [ 1]   81 	clr a 
      0006BB 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0006BD 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006C1 90 5C            [ 1]   84     incw y
      0006C3 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006C7 90 5C            [ 1]   86     incw y
      0006C9 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006CD 90 5C            [ 1]   88     incw y
      0006CF 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006D3 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006D8 90 85            [ 2]   91 	popw y 
      0006DA 84               [ 1]   92 	pop a 
      0006DB 81               [ 4]   93 	ret
      0006DC                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006DC                         97 move_erase_to_ram:
      0006DC 89               [ 2]   98 	pushw x 
      0006DD 90 89            [ 2]   99 	pushw y 
      0006DF AE 06 DC         [ 2]  100 	ldw x,#row_erase_end 
      0006E2 1D 06 AF         [ 2]  101 	subw x,#row_erase
      0006E5 CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006E8 AE 16 90         [ 2]  103 	ldw x,#tib 
      0006EB 90 AE 06 AF      [ 2]  104 	ldw y,#row_erase 
      0006EF CD 13 85         [ 4]  105 	call move
      0006F2 90 85            [ 2]  106 	popw y
      0006F4 85               [ 2]  107 	popw x
      0006F5 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      0006F6                        123 program_row:
      0006F6 88               [ 1]  124 	push a 
      0006F7 90 89            [ 2]  125 	pushw y 
      0006F9 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      0006FB 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      0006FF 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000703 90 5F            [ 1]  130 	clrw y 
      000705 F6               [ 1]  131 1$:	ld a,(x)
      000706 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      00070A 5C               [ 1]  133 	incw x 
      00070B 90 5C            [ 1]  134 	incw y 
      00070D 0A 01            [ 1]  135 	dec (BCNT,sp)
      00070F 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      000711 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000716                        139 	_drop 1 
      000716 5B 01            [ 2]    1     addw sp,#1 
      000718 90 85            [ 2]  140 	popw y 
      00071A 84               [ 1]  141 	pop a 
      00071B 81               [ 4]  142 	ret 
      00071C                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      00071C                        149 move_prg_to_ram:
      00071C 89               [ 2]  150 	pushw x 
      00071D 90 89            [ 2]  151 	pushw y 
      00071F AE 07 1C         [ 2]  152 	ldw x,#program_row_end 
      000722 1D 06 F6         [ 2]  153 	subw x,#program_row 
      000725 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000728 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      00072B 90 AE 06 F6      [ 2]  156 	ldw y,#program_row ; source address 
      00072F CD 13 85         [ 4]  157 	call move
      000732 90 85            [ 2]  158 	popw y 
      000734 85               [ 2]  159 	popw x  
      000735 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000736                        169 write_buffer:
      000736 89               [ 2]  170 	pushw x 
      000737 72 5D 00 18      [ 1]  171 	tnz farptr 
      00073B 26 0D            [ 1]  172 	jrne to_flash 
      00073D CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000740 A3 36 00         [ 2]  174 	cpw x,#app_space  
      000743 24 05            [ 1]  175 	jruge to_flash 
      000745                        176 to_eeprom:
      000745 CD 06 79         [ 4]  177 	call unlock_eeprom
      000748 20 03            [ 2]  178 	jra do_programming
      00074A                        179 to_flash:
      00074A CD 06 94         [ 4]  180 	call unlock_flash
      00074D                        181 do_programming:
      00074D 85               [ 2]  182 	popw x 
      00074E CD 16 90         [ 4]  183 	call tib
      000751 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000755 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000759 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00075A                        197 block_erase:
      00075A 89               [ 2]  198 	pushw x 
      00075B C6 00 18         [ 1]  199 	ld a,farptr 
      00075E 26 14            [ 1]  200 	jrne erase_flash
      000760 CE 00 19         [ 2]  201 	ldw x,farptr+1
      000763 A3 36 00         [ 2]  202 	cpw x,#app_space 
      000766 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000768 CD 06 79         [ 4]  205 	call unlock_eeprom 
      00076B CD 16 90         [ 4]  206 	call tib 
      00076E 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000772 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      000774                        210 erase_flash:
      000774 CD 06 94         [ 4]  211 	call unlock_flash 
      000777 CD 16 90         [ 4]  212 	call tib 
      00077A 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00077E                        214 erase_exit: 
      00077E 85               [ 2]  215 	popw x 
      00077F 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      000780                        232 write_byte:
      000780 90 89            [ 2]  233 	pushw y
      000782                        234 	_vars VSIZE
      000782 52 02            [ 2]    1     sub sp,#VSIZE 
      000784 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      000786 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000788 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      00078C 72 5D 00 18      [ 1]  240 	tnz farptr 
      000790 26 14            [ 1]  241 	jrne write_flash
      000792 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      000796 24 0E            [ 1]  243     jruge write_flash
      000798 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      00079C 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00079E 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007A2 22 51            [ 1]  247 	jrugt write_exit
      0007A4 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007A6                        250 write_flash:
      0007A6 CD 06 94         [ 4]  251 	call unlock_flash 
      0007A9 9B               [ 1]  252 1$:	sim 
      0007AA 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007AC 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007B0 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007B5 9A               [ 1]  256     rim 
      0007B6 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007BA 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007BC                        260 write_eeprom:
      0007BC CD 06 79         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007BF 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007C3 2B 08            [ 1]  264 	jrmi 1$
      0007C5 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007C9 2A 02            [ 1]  266 	jrpl 1$
      0007CB 03 02            [ 1]  267 	cpl (OPT,sp)
      0007CD                        268 1$: 
      0007CD 0D 02            [ 1]  269     tnz (OPT,sp)
      0007CF 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007D1 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007D5 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007D9                        274 2$: 
      0007D9 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007DB 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007DF 0D 02            [ 1]  277     tnz (OPT,sp)
      0007E1 27 08            [ 1]  278     jreq 3$
      0007E3 5C               [ 1]  279     incw x
      0007E4 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007E6 43               [ 1]  281     cpl a
      0007E7 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007EB 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007F0 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      0007F5                        285 write_exit:
      0007F5                        286 	_drop VSIZE 
      0007F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0007F7 90 85            [ 2]  287 	popw y
      0007F9 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      0007FA                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      0007FA                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      0007FA                        309 write_block::
      0007FA 88               [ 1]  310 	push a 
      0007FB                        311 	_vars VSIZE
      0007FB 52 02            [ 2]    1     sub sp,#VSIZE 
      0007FD 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      0007FF 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000801 27 13            [ 1]  314 	jreq 9$
      000803 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      000805 90 F6            [ 1]  316 	ld a,(y)
      000807 CD 07 80         [ 4]  317 	call write_byte 
      00080A 5C               [ 1]  318 	incw x 
      00080B 90 5C            [ 1]  319 	incw y 
      00080D 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      00080F 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000811 5A               [ 2]  322 	decw x
      000812 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      000814 26 ED            [ 1]  324 	jrne 1$
      000816                        325 9$:
      000816 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      000818 CD 08 50         [ 4]  327 	call incr_farptr
      00081B                        328 	_drop VSIZE
      00081B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00081D 84               [ 1]  329 	pop a 
      00081E 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      00081F                        347 write_nbytes:
      00081F 90 89            [ 2]  348 	pushw y
      000821 88               [ 1]  349 	push a 
      000822 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      000824 5F               [ 1]  351 	clrw x 
      000825                        352 1$:  
      000825 90 F6            [ 1]  353 	ld a,(y)
      000827 90 5C            [ 1]  354 	incw y
      000829 CD 07 80         [ 4]  355 	call write_byte 
      00082C 5C               [ 1]  356 	incw x 
      00082D 0A 01            [ 1]  357 	dec (1,sp)  
      00082F 26 F4            [ 1]  358 	jrne 1$ 
      000831 84               [ 1]  359 9$: pop a 
      000832 90 85            [ 2]  360 	popw y 
      000834 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      000835                        370 row_align:
      000835 A6 7F            [ 1]  371 	ld a,#0x7f 
      000837 C4 00 1A         [ 1]  372 	and a,farptr+2 
      00083A 27 13            [ 1]  373 	jreq 1$ 
      00083C CE 00 19         [ 2]  374 	ldw x,farptr+1 
      00083F 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      000842 24 04            [ 1]  376 	jrnc 0$
      000844 72 5C 00 18      [ 1]  377 	inc farptr 
      000848 9F               [ 1]  378 0$: ld a,xl 
      000849 A4 80            [ 1]  379 	and a,#0x80
      00084B 97               [ 1]  380 	ld xl,a
      00084C CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      00084F 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      000850                        390 incr_farptr:
      000850 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      000854 24 04            [ 1]  392 	jrnc 1$
      000856 72 5C 00 18      [ 1]  393 	inc farptr 
      00085A CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      00085D 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      00085E                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00085E 5F               [ 1]  406 	clrw x 
      00085F 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      000863 26 06            [ 1]  408 	jrne 2$
      000865 5C               [ 1]  409 	incw x 
      000866 A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      000869 25 F4            [ 1]  411 	jrult 1$ 
      00086B 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00086C                         66 Uart1RxHandler: ; console receive char 
      00086C 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000871 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000874 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000876 26 06            [ 1]   70 	jrne 2$
      000878 CD 08 DE         [ 4]   71 	call putc 
      00087B CC 00 4C         [ 2]   72 	jp user_interrupted
      00087E                         73 2$:
      00087E A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000880 26 03            [ 1]   75 	jrne 3$
      000882 CC 00 B8         [ 2]   76 	jp cold_start 	
      000885 88               [ 1]   77 3$:	push a 
      000886 A6 26            [ 1]   78 	ld a,#rx1_queue 
      000888 CB 00 2F         [ 1]   79 	add a,rx1_tail 
      00088B 5F               [ 1]   80 	clrw x 
      00088C 97               [ 1]   81 	ld xl,a 
      00088D 84               [ 1]   82 	pop a 
      00088E F7               [ 1]   83 	ld (x),a 
      00088F C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      000892 4C               [ 1]   85 	inc a 
      000893 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      000895 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      000898 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      000899                         97 uart1_init:
      000899 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      00089D 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008A1 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008A5 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008A9                        103 uart1_set_baud: 
      0008A9 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008AA A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008AC C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008AF 27 0A            [ 1]  109 	jreq 2$ 
      0008B1                        110 1$: ; 8 Mhz 	
      0008B1 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008B5 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008B9 20 08            [ 2]  113 	jra 3$
      0008BB                        114 2$: ; 16 Mhz 	
      0008BB 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008BF 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008C3                        117 3$:
      0008C3 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008C7 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008CB 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008CF 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0008D4 72 5F 00 2E      [ 1]  122     clr rx1_head 
      0008D8 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      0008DC 84               [ 1]  124 	pop a  
      0008DD 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0008DE                        133 putc:: ; console output always on UART1
      0008DE                        134 uart1_putc:: 
      0008DE 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0008E3 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0008E6 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0008E7                        148 qgetc::
      0008E7                        149 uart1_qgetc::
      0008E7 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      0008EA C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      0008ED 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      0008EE                        161 getc:: ;console input
      0008EE                        162 uart1_getc::
      0008EE CD 08 E7         [ 4]  163 	call uart1_qgetc
      0008F1 27 FB            [ 1]  164 	jreq uart1_getc 
      0008F3 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      0008F4 A6 26            [ 1]  167 	ld a,#rx1_queue
      0008F6 CB 00 2E         [ 1]  168 	add a,rx1_head 
      0008F9 5F               [ 1]  169 	clrw x  
      0008FA 97               [ 1]  170 	ld xl,a 
      0008FB F6               [ 1]  171 	ld a,(x)
      0008FC 88               [ 1]  172 	push a
      0008FD C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000900 4C               [ 1]  174 	inc a 
      000901 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000903 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000906 84               [ 1]  177 	pop a  
      000907 85               [ 2]  178 	popw x
      000908 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000909 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000915                        207 get_escape:
      000915 CD 08 EE         [ 4]  208     call getc 
      000918 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      00091A 27 02            [ 1]  210     jreq 1$
      00091C 4F               [ 1]  211     clr a
      00091D 81               [ 4]  212     ret
      00091E CD 08 EE         [ 4]  213 1$: call getc 
      000921 AE 09 09         [ 2]  214     ldw x,#convert_table
      000924                        215 2$:
      000924 F1               [ 1]  216     cp a,(x)
      000925 27 08            [ 1]  217     jreq 4$
      000927 1C 00 02         [ 2]  218     addw x,#2
      00092A 7D               [ 1]  219     tnz (x)
      00092B 26 F7            [ 1]  220     jrne 2$
      00092D 4F               [ 1]  221     clr a
      00092E 81               [ 4]  222     ret 
      00092F 5C               [ 1]  223 4$: incw x 
      000930 F6               [ 1]  224     ld a,(x)
      000931 A1 84            [ 1]  225     cp a,#SUP
      000933 26 05            [ 1]  226     jrne 5$
      000935 88               [ 1]  227     push a 
      000936 CD 08 EE         [ 4]  228     call getc
      000939 84               [ 1]  229     pop a 
      00093A                        230 5$:
      00093A 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00093B                        241 puts::
      00093B F6               [ 1]  242     ld a,(x)
      00093C 27 06            [ 1]  243 	jreq 1$
      00093E CD 08 DE         [ 4]  244 	call putc 
      000941 5C               [ 1]  245 	incw x 
      000942 20 F7            [ 2]  246 	jra puts 
      000944 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000945                        258 bksp:
      000945 A6 08            [ 1]  259 	ld a,#BS 
      000947 CD 08 DE         [ 4]  260 	call putc 
      00094A A6 20            [ 1]  261 	ld a,#SPACE 
      00094C CD 08 DE         [ 4]  262 	call putc 
      00094F A6 08            [ 1]  263 	ld a,#BS 
      000951 CD 08 DE         [ 4]  264 	call putc 
      000954 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000955                        274 delete_nchar:
      000955 88               [ 1]  275 	push a 
      000956 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000958 27 07            [ 1]  277 	jreq 1$
      00095A CD 09 45         [ 4]  278 	call bksp 
      00095D 0A 01            [ 1]  279 	dec (1,sp)
      00095F 20 F5            [ 2]  280 	jra 0$
      000961 84               [ 1]  281 1$:	pop a 
      000962 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000963                        290 send_escape:
      000963 A6 1B            [ 1]  291 	ld a,#ESC 
      000965 CD 08 DE         [ 4]  292 	call putc 
      000968 A6 5B            [ 1]  293 	ld a,#'[
      00096A CD 08 DE         [ 4]  294 	call putc 
      00096D 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00096E                        311 send_parameter:
      00096E 89               [ 2]  312 	pushw x 
      00096F 5F               [ 1]  313 	clrw x 
      000970 97               [ 1]  314 	ld xl,a 
      000971 A6 0A            [ 1]  315 	ld a,#10 
      000973 62               [ 2]  316 	div x,a 
      000974 95               [ 1]  317 	ld xh,a 
      000975 9F               [ 1]  318 	ld a,xl
      000976 4D               [ 1]  319     tnz a 
      000977 27 0B            [ 1]  320     jreq 2$
      000979 A1 09            [ 1]  321 	cp a,#9 
      00097B 23 02            [ 2]  322 	jrule 1$
      00097D A6 09            [ 1]  323 	ld a,#9
      00097F                        324 1$:
      00097F AB 30            [ 1]  325 	add a,#'0 
      000981 CD 08 DE         [ 4]  326 	call putc
      000984 9E               [ 1]  327 2$:	ld a,xh 
      000985 AB 30            [ 1]  328 	add a,#'0
      000987 CD 08 DE         [ 4]  329 	call putc 
      00098A 85               [ 2]  330 	popw x 
      00098B 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      00098C                        344 move_left:
      00098C 88               [ 1]  345 	push a 
      00098D CD 09 63         [ 4]  346 	call send_escape
      000990 84               [ 1]  347     pop a
      000991 CD 09 6E         [ 4]  348 	call send_parameter 
      000994 A6 44            [ 1]  349 	ld a,#'D 
      000996 CD 08 DE         [ 4]  350 	call putc 
      000999 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00099A                        362 move_right:
      00099A 88               [ 1]  363 	push a 
      00099B CD 09 63         [ 4]  364 	call send_escape
      00099E 84               [ 1]  365     pop a
      00099F CD 09 6E         [ 4]  366 	call send_parameter 
      0009A2 A6 43            [ 1]  367 	ld a,#'C 
      0009A4 CD 08 DE         [ 4]  368 	call putc 
      0009A7 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009A8                        379 spaces::
      0009A8 A6 20            [ 1]  380 	ld a,#SPACE 
      0009AA 5D               [ 2]  381 1$:	tnzw x
      0009AB 27 06            [ 1]  382 	jreq 9$
      0009AD CD 08 DE         [ 4]  383 	call putc 
      0009B0 5A               [ 2]  384 	decw x
      0009B1 20 F7            [ 2]  385 	jra 1$
      0009B3                        386 9$: 
      0009B3 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009B4                        405 insert_char: 
      0009B4                        406 	_vars VSIZE 
      0009B4 52 03            [ 2]    1     sub sp,#VSIZE 
      0009B6 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009B8 9E               [ 1]  408     ld a,xh 
      0009B9 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009BB 9F               [ 1]  410     ld a,xl 
      0009BC 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009BE 93               [ 1]  412     ldw x,y
      0009BF 5C               [ 1]  413     incw x 
      0009C0 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009C2 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0009C4 4C               [ 1]  416     inc a 
      0009C5 C7 00 0E         [ 1]  417     ld acc8,a 
      0009C8 72 5F 00 0D      [ 1]  418     clr acc16
      0009CC CD 13 85         [ 4]  419     call move
      0009CF 90 AE 16 90      [ 2]  420     ldw y,#tib 
      0009D3 7B 01            [ 1]  421     ld a,(IPOS,sp)
      0009D5 C7 00 0E         [ 1]  422     ld acc8,a 
      0009D8 72 B9 00 0D      [ 2]  423     addw y,acc16 
      0009DC 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      0009DE 90 F7            [ 1]  425     ld (y),a
      0009E0 90 5C            [ 1]  426     incw y  
      0009E2 7B 01            [ 1]  427     ld a,(IPOS,sp)
      0009E4 CD 09 8C         [ 4]  428     call move_left
      0009E7 AE 16 90         [ 2]  429     ldw x,#tib 
      0009EA CD 09 3B         [ 4]  430     call puts 
      0009ED 7B 03            [ 1]  431     ld a,(LLEN,sp)
      0009EF 10 01            [ 1]  432     sub a,(IPOS,sp) 
      0009F1 CD 09 8C         [ 4]  433     call move_left 
      0009F4                        434 	_drop VSIZE 
      0009F4 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009F6 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      0009F7                        448 delete_under:
      0009F7                        449 	_vars VSIZE 
      0009F7 52 02            [ 2]    1     sub sp,#VSIZE 
      0009F9 6B 02            [ 1]  450     ld (LLEN,sp),a 
      0009FB 9F               [ 1]  451     ld a,xl 
      0009FC 6B 01            [ 1]  452     ld (CPOS,sp),a 
      0009FE 93               [ 1]  453     ldw x,y ; move destination
      0009FF 90 5C            [ 1]  454     incw y  ; move source 
      000A01 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A03 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A05 4C               [ 1]  457     inc a ; move including zero at end.
      000A06 C7 00 0E         [ 1]  458     ld acc8,a 
      000A09 72 5F 00 0D      [ 1]  459     clr acc16 
      000A0D CD 13 85         [ 4]  460 	call move 
      000A10 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A14 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A16 C7 00 0E         [ 1]  463     ld acc8,a 
      000A19 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A1D 93               [ 1]  465     ldw x,y 
      000A1E CD 09 3B         [ 4]  466     call puts 
      000A21 A6 20            [ 1]  467     ld a,#SPACE  
      000A23 CD 08 DE         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000A26 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A28 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A2A CD 09 8C         [ 4]  471     call move_left 
      000A2D 0A 02            [ 1]  472     dec (LLEN,sp)
      000A2F                        473 	_drop VSIZE 
      000A2F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A31 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A32                        486 delete_line:
      000A32 CD 09 63         [ 4]  487     call send_escape
      000A35 A6 32            [ 1]  488 	ld a,#'2
      000A37 CD 08 DE         [ 4]  489 	call putc 
      000A3A A6 4B            [ 1]  490 	ld a,#'K 
      000A3C CD 08 DE         [ 4]  491 	call putc 
      000A3F 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A40                        524 readln::
      000A40 90 89            [ 2]  525 	pushw y 
      000A42                        526 	_vars VSIZE 
      000A42 52 04            [ 2]    1     sub sp,#VSIZE 
      000A44 5F               [ 1]  527 	clrw x 
      000A45 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A47 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A49 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A4B 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A4F                        532 readln_loop:
      000A4F CD 08 EE         [ 4]  533 	call getc
      000A52 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A54 A1 1B            [ 1]  535     cp a,#ESC 
      000A56 26 05            [ 1]  536     jrne 0$
      000A58 CD 09 15         [ 4]  537     call get_escape 
      000A5B 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A5D A1 0D            [ 1]  539 0$:	cp a,#CR
      000A5F 26 03            [ 1]  540 	jrne 1$
      000A61 CC 0B DC         [ 2]  541 	jp readln_quit
      000A64 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A66 26 03            [ 1]  543 	jrne 2$ 
      000A68 CC 0B DC         [ 2]  544 	jp readln_quit
      000A6B                        545 2$:
      000A6B A1 08            [ 1]  546 	cp a,#BS
      000A6D 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A6F 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A71 27 DC            [ 1]  550     jreq readln_loop 
      000A73 A6 01            [ 1]  551     ld a,#1 
      000A75 CD 09 8C         [ 4]  552     call move_left
      000A78 0A 03            [ 1]  553     dec (CPOS,sp)
      000A7A 90 5A            [ 2]  554     decw y 
      000A7C 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000A7E CC 0B 88         [ 2]  556     jp 12$
      000A81                        557 3$:
      000A81 A1 04            [ 1]  558 	cp a,#CTRL_D
      000A83 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000A85 CD 0A 32         [ 4]  561 	call delete_line 
      000A88 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000A8A 4C               [ 1]  563     inc a 
      000A8B CD 09 8C         [ 4]  564     call move_left 
      000A8E A6 3E            [ 1]  565 	ld a,#'> 
      000A90 CD 08 DE         [ 4]  566 	call putc 
      000A93 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000A97 90 7F            [ 1]  568 	clr (y)
      000A99 0F 02            [ 1]  569 	clr (LL,sp)
      000A9B 0F 03            [ 1]  570 	clr (CPOS,sp)
      000A9D 20 B0            [ 2]  571 	jra readln_loop
      000A9F                        572 4$:
      000A9F A1 12            [ 1]  573 	cp a,#CTRL_R 
      000AA1 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000AA3 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AA5 26 A8            [ 1]  577 	jrne readln_loop
      000AA7 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AAB 93               [ 1]  579 	ldw x,y
      000AAC CD 13 59         [ 4]  580 	call strlen
      000AAF 4D               [ 1]  581 	tnz a  
      000AB0 27 9D            [ 1]  582 	jreq readln_loop
      000AB2 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AB4 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AB6 93               [ 1]  585 	ldw x,y  
      000AB7 CD 09 3B         [ 4]  586 	call puts
      000ABA 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000ABC 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000ABF 20 8E            [ 2]  589 	jra readln_loop 
      000AC1                        590 5$:
      000AC1 A1 05            [ 1]  591 	cp a,#CTRL_E 
      000AC3 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AC5 AE 16 90         [ 2]  594 	ldw x,#tib 
      000AC8 CD 18 87         [ 4]  595 	call atoi24
      000ACB CE 00 0D         [ 2]  596 	ldw x,acc16
      000ACE CD 0C 18         [ 4]  597 	call search_lineno
      000AD1 5D               [ 2]  598 	tnzw x 
      000AD2 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000AD4 CC 0B DC         [ 2]  603 	jp readln_quit  
      000AD7                        604 51$:
      000AD7 CF 00 04         [ 2]  605 	ldw basicptr,x
      000ADA E6 02            [ 1]  606 	ld a,(2,x)
      000ADC C7 00 03         [ 1]  607 	ld count,a 
      000ADF 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000AE3 CD 11 75         [ 4]  609 	call decompile 
      000AE6 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000AE8 A6 0D            [ 1]  611 	ld a,#CR 
      000AEA CD 08 DE         [ 4]  612 	call putc 
      000AED A6 3E            [ 1]  613 	ld a,#'>
      000AEF CD 08 DE         [ 4]  614 	call putc
      000AF2 AE 16 90         [ 2]  615     ldw x,#tib  
      000AF5 CD 13 59         [ 4]  616 	call strlen 
      000AF8 6B 02            [ 1]  617 	ld (LL,sp),a 
      000AFA CD 09 3B         [ 4]  618 	call puts 
      000AFD 90 93            [ 1]  619 	ldw y,x
      000AFF 7B 02            [ 1]  620     ld a,(LL,sp)
      000B01 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B03 CC 0A 4F         [ 2]  622 	jp readln_loop
      000B06                        623 6$:
      000B06 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B08 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B0A 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B0C 11 02            [ 1]  628     cp a,(LL,sp)
      000B0E 2B 03            [ 1]  629     jrmi 61$
      000B10 CC 0A 4F         [ 2]  630     jp readln_loop 
      000B13                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B13 A6 01            [ 1]  632     ld a,#1 
      000B15 CD 09 9A         [ 4]  633 	call move_right 
      000B18 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B1A 90 5C            [ 1]  635     incw y 
      000B1C CC 0A 4F         [ 2]  636     jp readln_loop 
      000B1F A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B21 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B23 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B25 26 03            [ 1]  641 	jrne 71$
      000B27 CC 0A 4F         [ 2]  642 	jp readln_loop
      000B2A                        643 71$:
      000B2A A6 01            [ 1]  644     ld a,#1 
      000B2C CD 09 8C         [ 4]  645 	call move_left 
      000B2F 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B31 90 5A            [ 2]  647     decw y 
      000B33 CC 0A 4F         [ 2]  648 	jp readln_loop 
      000B36 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B38 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B3A 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B3C CD 09 8C         [ 4]  653     call move_left 
      000B3F 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B41 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B45 CC 0A 4F         [ 2]  656 	jp readln_loop  
      000B48 A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B4A 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B4C 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B4E 11 02            [ 1]  661 	cp a,(LL,sp)
      000B50 26 03            [ 1]  662 	jrne 91$
      000B52 CC 0A 4F         [ 2]  663 	jp readln_loop 
      000B55                        664 91$:
      000B55 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B57 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B59 CD 09 9A         [ 4]  667 	call move_right 
      000B5C 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B5E 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B60 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B64 72 5F 00 0D      [ 1]  671     clr acc16 
      000B68 C7 00 0E         [ 1]  672     ld acc8,a 
      000B6B 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B6F CC 0A 4F         [ 2]  674 	jp readln_loop 
      000B72 A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000B74 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000B76 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000B78 CD 25 A6         [ 4]  679 	call beep_1khz
      000B7B CC 0A 4F         [ 2]  680 	jp readln_loop 
      000B7E A1 84            [ 1]  681 11$: cp a,#SUP 
      000B80 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000B82 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000B84 11 02            [ 1]  685     cp a,(LL,sp)
      000B86 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000B88                        687 12$:
      000B88 97               [ 1]  688     ld xl,a    ; cursor position 
      000B89 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000B8B CD 09 F7         [ 4]  690     call delete_under
      000B8E 0A 02            [ 1]  691     dec (LLEN,sp)
      000B90                        692 13$:
      000B90 CC 0A 4F         [ 2]  693     jp readln_loop 
      000B93                        694 final_test:
      000B93 A1 20            [ 1]  695 	cp a,#SPACE
      000B95 2A 03            [ 1]  696 	jrpl accept_char
      000B97 CC 0A 4F         [ 2]  697 	jp readln_loop
      000B9A                        698 accept_char:
      000B9A A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000B9C 11 02            [ 1]  700 	cp a, (LL,sp)
      000B9E 2A 03            [ 1]  701 	jrpl 1$
      000BA0 CC 0A 4F         [ 2]  702 	jp readln_loop
      000BA3 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BA5 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BA7 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BA9 11 02            [ 1]  707     cp a,(LL,sp)
      000BAB 27 12            [ 1]  708     jreq overwrite
      000BAD 7B 02            [ 1]  709     ld a,(LL,sp)
      000BAF 97               [ 1]  710     ld xl,a 
      000BB0 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BB2 95               [ 1]  712     ld xh,a
      000BB3 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BB5 CD 09 B4         [ 4]  714     call insert_char
      000BB8 0C 02            [ 1]  715     inc (LLEN,sp)
      000BBA 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BBC CC 0A 4F         [ 2]  717     jp readln_loop 
      000BBF                        718 overwrite:
      000BBF 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BC1 90 F7            [ 1]  720 	ld (y),a
      000BC3 90 5C            [ 1]  721     incw y
      000BC5 CD 08 DE         [ 4]  722     call putc 
      000BC8 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BCA 11 02            [ 1]  724 	cp a,(LL,sp)
      000BCC 2B 09            [ 1]  725 	jrmi 1$
      000BCE 90 7F            [ 1]  726 	clr (y)
      000BD0 0C 02            [ 1]  727 	inc (LL,sp)
      000BD2 0C 03            [ 1]  728     inc (CPOS,sp)
      000BD4 CC 0A 4F         [ 2]  729 	jp readln_loop 
      000BD7                        730 1$:	
      000BD7 0C 03            [ 1]  731 	inc (CPOS,sp)
      000BD9 CC 0A 4F         [ 2]  732 	jp readln_loop 
      000BDC                        733 readln_quit:
      000BDC 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000BE0 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000BE2 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000BE5 90 7F            [ 1]  737     clr (y)
      000BE7 7B 02            [ 1]  738 	ld a,(LL,sp)
      000BE9 C7 00 03         [ 1]  739 	ld count,a 
      000BEC A6 0D            [ 1]  740 	ld a,#CR
      000BEE CD 08 DE         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000BF1                        742 	_drop VSIZE 
      000BF1 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BF3 90 85            [ 2]  743 	popw y 
      000BF5 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000BF6                        752 print_hex::
      000BF6 88               [ 1]  753 	push a 
      000BF7 4E               [ 1]  754 	swap a 
      000BF8 CD 0C 0D         [ 4]  755 	call to_hex_char 
      000BFB CD 08 DE         [ 4]  756 	call putc 
      000BFE 7B 01            [ 1]  757     ld a,(1,sp) 
      000C00 CD 0C 0D         [ 4]  758 	call to_hex_char
      000C03 CD 08 DE         [ 4]  759 	call putc
      000C06 A6 20            [ 1]  760 	ld a,#SPACE 
      000C08 CD 08 DE         [ 4]  761 	call putc 
      000C0B 84               [ 1]  762 	pop a 
      000C0C 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C0D                        772 to_hex_char::
      000C0D A4 0F            [ 1]  773 	and a,#15 
      000C0F A1 09            [ 1]  774 	cp a,#9 
      000C11 23 02            [ 2]  775 	jrule 1$ 
      000C13 AB 07            [ 1]  776 	add a,#7
      000C15 AB 30            [ 1]  777 1$: add a,#'0 
      000C17 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C18                         51 search_lineno::
      000C18                         52 	_vars VSIZE
      000C18 52 02            [ 2]    1     sub sp,#VSIZE 
      000C1A 0F 01            [ 1]   53 	clr (LL,sp)
      000C1C 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C20 4D               [ 1]   55 	tnz a 
      000C21 27 04            [ 1]   56 	jreq search_ln_loop
      000C23 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C27                         58 search_ln_loop:
      000C27 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C2B 2A 10            [ 1]   60 	jrpl 8$
      000C2D 90 F3            [ 1]   61 	cpw x,(y)
      000C2F 27 0E            [ 1]   62 	jreq 9$
      000C31 2B 0A            [ 1]   63 	jrmi 8$ 
      000C33 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C36 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C38 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C3B 20 EA            [ 2]   67 	jra search_ln_loop 
      000C3D                         68 8$: 
      000C3D 5F               [ 1]   69 	clrw x 	
      000C3E 51               [ 1]   70 	exgw x,y 
      000C3F                         71 9$: _drop VSIZE
      000C3F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C41 51               [ 1]   72 	exgw x,y   
      000C42 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C43                         83 del_line: 
      000C43                         84 	_vars VSIZE 
      000C43 52 04            [ 2]    1     sub sp,#VSIZE 
      000C45 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C47 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C49 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C4B 90 93            [ 1]   88 	ldw y,x  
      000C4D 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C50 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C52 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C56 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C59 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C5D 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C5F CD 13 85         [ 4]   95 	call move
      000C62 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C66 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C69 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C6D                         99 	_drop VSIZE     
      000C6D 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C6F 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C70                        115 create_gap:
      000C70                        116 	_vars VSIZE
      000C70 52 06            [ 2]    1     sub sp,#VSIZE 
      000C72 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000C74 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000C76 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000C7A 90 93            [ 1]  120 	ldw y,x ; SRC
      000C7C 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000C80 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000C82 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000C85 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000C88 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000C8B 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000C8D CD 13 85         [ 4]  128 	call move
      000C90 CE 00 1D         [ 2]  129 	ldw x,txtend
      000C93 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000C96 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000C99                        132 9$:	_drop VSIZE 
      000C99 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C9B 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000C9C                        150 insert_line:
      000C9C                        151 	_vars VSIZE 
      000C9C 52 08            [ 2]    1     sub sp,#VSIZE 
      000C9E CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CA1 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CA4 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CA6 AE 00 02         [ 2]  156 	ldw x,#2 
      000CA9 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CAD A1 03            [ 1]  158 	cp a,#3
      000CAF 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CB1 5F               [ 1]  160 	clrw x 
      000CB2 97               [ 1]  161 	ld xl,a
      000CB3 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CB5 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CB8 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CBA CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CBD 20 38            [ 2]  166 	jra 4$
      000CBF 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CC3 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CC5 AE 00 02         [ 2]  170 	ldw x,#2 
      000CC8 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CCC 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CCD 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CCF 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CD1 4F               [ 1]  177 	clr a 
      000CD2 CD 0C 18         [ 4]  178 	call search_lineno 
      000CD5 5D               [ 2]  179 	tnzw x 
      000CD6 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000CD8 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000CDA 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000CDC 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000CDE CD 0C 43         [ 4]  188 	call del_line
      000CE1                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000CE1 A6 03            [ 1]  192 	ld a,#3
      000CE3 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000CE5 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000CE7 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000CE9 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000CEC 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000CEE 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000CF0 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000CF2 CD 0C 70         [ 4]  204 	call create_gap
      000CF5 20 06            [ 2]  205 	jra 5$
      000CF7                        206 4$: 
      000CF7 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000CFA CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000CFD 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000CFF CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D02 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D06 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D08 CD 13 85         [ 4]  214 	call move 
      000D0B                        215 insert_ln_exit:	
      000D0B                        216 	_drop VSIZE
      000D0B 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D0D 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D0E                        233 parse_quote: 
      000D0E                        234 	_vars VSIZE 
      000D0E 52 02            [ 2]    1     sub sp,#VSIZE 
      000D10 4F               [ 1]  235 	clr a
      000D11 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D13                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D13 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D16 27 24            [ 1]  239 	jreq 6$
      000D18 72 5C 00 01      [ 1]  240 	inc in 
      000D1C 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D1E A6 5C            [ 1]  242 	ld a,#'\
      000D20 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D22 26 0A            [ 1]  244 	jrne 3$
      000D24 0F 01            [ 1]  245 	clr (PREV,sp)
      000D26 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D28 AD 1C            [ 4]  247 	callr convert_escape
      000D2A F7               [ 1]  248 	ld (x),a 
      000D2B 5C               [ 1]  249 	incw x 
      000D2C 20 E5            [ 2]  250 	jra 2$
      000D2E                        251 3$:
      000D2E 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D30 A1 5C            [ 1]  253 	cp a,#'\'
      000D32 27 DD            [ 1]  254 	jreq 1$
      000D34 A1 22            [ 1]  255 	cp a,#'"
      000D36 27 04            [ 1]  256 	jreq 6$ 
      000D38 F7               [ 1]  257 	ld (x),a 
      000D39 5C               [ 1]  258 	incw x 
      000D3A 20 D7            [ 2]  259 	jra 2$
      000D3C                        260 6$:
      000D3C 7F               [ 1]  261 	clr (x)
      000D3D 5C               [ 1]  262 	incw x 
      000D3E 90 93            [ 1]  263 	ldw y,x 
      000D40 5F               [ 1]  264 	clrw x 
      000D41 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D43                        266 	_drop VSIZE
      000D43 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D45 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D46                        278 convert_escape:
      000D46 89               [ 2]  279 	pushw x 
      000D47 AE 0D 5B         [ 2]  280 	ldw x,#escaped 
      000D4A F1               [ 1]  281 1$:	cp a,(x)
      000D4B 27 06            [ 1]  282 	jreq 2$
      000D4D 7D               [ 1]  283 	tnz (x)
      000D4E 27 09            [ 1]  284 	jreq 3$
      000D50 5C               [ 1]  285 	incw x 
      000D51 20 F7            [ 2]  286 	jra 1$
      000D53 1D 0D 5B         [ 2]  287 2$: subw x,#escaped 
      000D56 9F               [ 1]  288 	ld a,xl 
      000D57 AB 07            [ 1]  289 	add a,#7
      000D59 85               [ 2]  290 3$:	popw x 
      000D5A 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    292 
      000D5B 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D63                        310 parse_integer: ; { -- n }
      000D63 89               [ 2]  311 	pushw x 	
      000D64 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D66 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D68 A1 24            [ 1]  314 	cp a,#'$
      000D6A 26 04            [ 1]  315 	jrne 2$ 
      000D6C                        316     _drop #1
      000D6C 5B 01            [ 2]    1     addw sp,##1 
      000D6E 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D70 F7               [ 1]  318 2$:	ld (x),a 
      000D71 5C               [ 1]  319 	incw x 
      000D72 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000D75 72 5C 00 01      [ 1]  321 	inc in 
      000D79 CD 18 7B         [ 4]  322 	call to_upper 
      000D7C 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000D7E CD 0E 00         [ 4]  324 	call is_digit 
      000D81 25 ED            [ 1]  325 	jrc 2$
      000D83 A6 10            [ 1]  326 	ld a,#16 
      000D85 11 01            [ 1]  327 	cp a,(BASE,sp)
      000D87 26 0A            [ 1]  328 	jrne 3$ 
      000D89 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000D8B A1 41            [ 1]  330 	cp a,#'A 
      000D8D 2B 04            [ 1]  331 	jrmi 3$ 
      000D8F A1 47            [ 1]  332 	cp a,#'G 
      000D91 2B DD            [ 1]  333 	jrmi 2$ 
      000D93 72 5A 00 01      [ 1]  334 3$: dec in 	
      000D97 7F               [ 1]  335     clr (x)
      000D98 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000D9A CD 18 87         [ 4]  337 	call atoi24
      000D9D 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000D9F C6 00 0C         [ 1]  339 	ld a,acc24 
      000DA2 90 F7            [ 1]  340 	ld (y),a 
      000DA4 90 5C            [ 1]  341 	incw y  
      000DA6 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DA9 90 FF            [ 2]  343 	ldw (y),x 
      000DAB 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000DAF A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DB1                        346 	_drop VSIZE  
      000DB1 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DB3 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DB4                        364 parse_binary: ; { -- n }
      000DB4 4B 00            [ 1]  365 	push #0
      000DB6 4B 00            [ 1]  366 	push #0
      000DB8 4B 00            [ 1]  367 	push #0
      000DBA                        368 2$:	
      000DBA 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DBD 72 5C 00 01      [ 1]  370 	inc in 
      000DC1 A1 30            [ 1]  371 	cp a,#'0 
      000DC3 27 06            [ 1]  372 	jreq 3$
      000DC5 A1 31            [ 1]  373 	cp a,#'1 
      000DC7 27 02            [ 1]  374 	jreq 3$ 
      000DC9 20 0B            [ 2]  375 	jra bin_exit 
      000DCB A0 30            [ 1]  376 3$: sub a,#'0 
      000DCD 46               [ 1]  377 	rrc a
      000DCE 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DD0 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DD2 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000DD4 20 E4            [ 2]  381 	jra 2$  
      000DD6                        382 bin_exit:
      000DD6 72 5A 00 01      [ 1]  383 	dec in 
      000DDA 90 93            [ 1]  384 	ldw y,x
      000DDC 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000DDE 90 F7            [ 1]  386 	ld (y),a 
      000DE0 90 5C            [ 1]  387 	incw y 
      000DE2 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000DE4 90 FF            [ 2]  389 	ldw (y),x 
      000DE6 72 A9 00 02      [ 2]  390 	addw y,#2  
      000DEA A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000DEC                        392 	_drop VSIZE 
      000DEC 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DEE 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000DEF                        402 is_alpha::
      000DEF A1 41            [ 1]  403 	cp a,#'A 
      000DF1 8C               [ 1]  404 	ccf 
      000DF2 24 0B            [ 1]  405 	jrnc 9$ 
      000DF4 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000DF6 25 07            [ 1]  407 	jrc 9$ 
      000DF8 A1 61            [ 1]  408 	cp a,#'a 
      000DFA 8C               [ 1]  409 	ccf 
      000DFB 24 02            [ 1]  410 	jrnc 9$
      000DFD A1 7B            [ 1]  411 	cp a,#'z+1
      000DFF 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E00                        421 is_digit::
      000E00 A1 30            [ 1]  422 	cp a,#'0
      000E02 25 03            [ 1]  423 	jrc 1$
      000E04 A1 3A            [ 1]  424     cp a,#'9+1
      000E06 8C               [ 1]  425 	ccf 
      000E07 8C               [ 1]  426 1$:	ccf 
      000E08 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E09                        438 is_alnum::
      000E09 CD 0E 00         [ 4]  439 	call is_digit
      000E0C 25 03            [ 1]  440 	jrc 1$ 
      000E0E CD 0D EF         [ 4]  441 	call is_alpha
      000E11 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000E12                        453 is_symbol_char: 
      000E12 A1 5F            [ 1]  454 	cp a,#'_ 
      000E14 26 03            [ 1]  455 	jrne 1$
      000E16 99               [ 1]  456 	scf 
      000E17 20 03            [ 2]  457 	jra 9$ 
      000E19 CD 0E 09         [ 4]  458 1$:	call is_alnum 
      000E1C 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E1D                        473 parse_symbol:
      000E1D 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E1E                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E1E CD 18 7B         [ 4]  477 	call to_upper  
      000E21 F7               [ 1]  478 	ld (x), a 
      000E22 5C               [ 1]  479 	incw x
      000E23 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E26 72 5C 00 01      [ 1]  481 	inc in 
      000E2A CD 0E 12         [ 4]  482 	call is_symbol_char 
      000E2D 25 EF            [ 1]  483 	jrc symb_loop 
      000E2F 7F               [ 1]  484 	clr (x)
      000E30 72 5A 00 01      [ 1]  485 	dec in  
      000E34 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E35                        502 parse_keyword: 
      000E35 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E36 CD 0E 1D         [ 4]  504 	call parse_symbol
      000E39 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E3B E6 02            [ 1]  506 	ld a,(2,x)
      000E3D 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E3F E6 01            [ 1]  509 	ld a,(1,x) 
      000E41 A0 41            [ 1]  510 	sub a,#'A 
      000E43 AE 00 03         [ 2]  511 	ldw x,#3 
      000E46 42               [ 4]  512 	mul x,a 
      000E47 1C 00 34         [ 2]  513 	addw x,#vars 
      000E4A A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E4C 20 36            [ 2]  515 	jra 4$ 
      000E4E                        516 2$: ; check for keyword, otherwise syntax error.
      000E4E                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E4E AE 34 22         [ 2]    1     ldw x,#kword_dict+2
      000E51 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E53 90 5C            [ 1]  519 	incw y 
      000E55 CD 19 08         [ 4]  520 	call search_dict
      000E58 4D               [ 1]  521 	tnz a
      000E59 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E5B 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E5D A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E5F 90 F7            [ 1]  527 	ld (y),a 
      000E61 90 5C            [ 1]  528 	incw y
      000E63 93               [ 1]  529 	ldw x,y 
      000E64 CD 13 59         [ 4]  530 	call strlen
      000E67 A1 0F            [ 1]  531 	cp a,#NAME_MAX_LEN 
      000E69 23 02            [ 2]  532 	jrule 22$ 
      000E6B A6 0F            [ 1]  533 	ld a,#NAME_MAX_LEN 
      000E6D                        534 22$:	
      000E6D 88               [ 1]  535 	push a 
      000E6E                        536 24$:
      000E6E 90 F6            [ 1]  537     ld a,(y)
      000E70 27 09            [ 1]  538 	jreq 3$
      000E72 90 5C            [ 1]  539 	incw y
      000E74 0A 01            [ 1]  540 	dec (1,sp) 
      000E76 26 F6            [ 1]  541 	jrne 24$
      000E78 4F               [ 1]  542 	clr a 
      000E79 90 F7            [ 1]  543 	ld (y),a 
      000E7B 90 5C            [ 1]  544 3$: incw y 
      000E7D                        545 	_drop 1 
      000E7D 5B 01            [ 2]    1     addw sp,#1 
      000E7F A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000E81 5F               [ 1]  547 	clrw x 
      000E82 20 1B            [ 2]  548 	jra 5$ 
      000E84                        549 4$:	
      000E84 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000E86 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000E88 2B 06            [ 1]  552 	jrmi 41$
      000E8A 90 F7            [ 1]  553 	ld (y),a 
      000E8C 90 5C            [ 1]  554 	incw y 
      000E8E 20 0F            [ 2]  555 	jra 5$ 
      000E90                        556 41$:	
      000E90 A3 1C 81         [ 2]  557 	cpw x,#let  
      000E93 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000E95 90 F7            [ 1]  559 	ld (y),a 
      000E97 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000E99 90 FF            [ 2]  561 	ldw (y),x
      000E9B 72 A9 00 02      [ 2]  562 	addw y,#2  
      000E9F                        563 5$:	_drop VSIZE 
      000E9F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EA1 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000EA2                        575 skip:
      000EA2 88               [ 1]  576 	push a
      000EA3 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000EA6 27 0A            [ 1]  578 	jreq 2$
      000EA8 11 01            [ 1]  579 	cp a,(C,sp)
      000EAA 26 06            [ 1]  580 	jrne 2$
      000EAC 72 5C 00 01      [ 1]  581 	inc in
      000EB0 20 F1            [ 2]  582 	jra 1$
      000EB2                        583 2$: _drop 1 
      000EB2 5B 01            [ 2]    1     addw sp,#1 
      000EB4 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EB5                        609 get_token:: 
      000EB5                        610 	_vars VSIZE
      000EB5 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EB7                        616 0$: 
      000EB7 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EBB A6 20            [ 1]  618 	ld a,#SPACE
      000EBD CD 0E A2         [ 4]  619 	call skip
      000EC0 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EC5 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EC8 26 05            [ 1]  622 	jrne 1$
      000ECA 90 93            [ 1]  623 	ldw y,x 
      000ECC CC 10 66         [ 2]  624 	jp token_exit ; end of line 
      000ECF 72 5C 00 01      [ 1]  625 1$:	inc in 
      000ED3 CD 18 7B         [ 4]  626 	call to_upper 
      000ED6 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000ED8                        629 str_tst:  	
      000ED8                        630 	_case '"' nbr_tst
      000ED8 A6 22            [ 1]    1 	ld a,#'"' 
      000EDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EDC 26 0A            [ 1]    3 	jrne nbr_tst
      000EDE A6 02            [ 1]  631 	ld a,#TK_QSTR
      000EE0 F7               [ 1]  632 	ld (x),a 
      000EE1 5C               [ 1]  633 	incw x 
      000EE2 CD 0D 0E         [ 4]  634 	call parse_quote
      000EE5 CC 10 66         [ 2]  635 	jp token_exit
      000EE8                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000EE8 A6 24            [ 1]  638 	ld a,#'$'
      000EEA 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000EEC 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000EEE A6 26            [ 1]  642 	ld a,#'&
      000EF0 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000EF2 26 0A            [ 1]  644 	jrne 0$
      000EF4 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000EF6 F7               [ 1]  646 	ld (x),a 
      000EF7 5C               [ 1]  647 	incw x 
      000EF8 CD 0D B4         [ 4]  648 	call parse_binary ; expect binary integer 
      000EFB CC 10 66         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000EFE 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F00 CD 0E 00         [ 4]  652 	call is_digit
      000F03 24 0C            [ 1]  653 	jrnc 3$
      000F05 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F07 F7               [ 1]  655 	ld (x),a 
      000F08 5C               [ 1]  656 	incw x 
      000F09 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F0B CD 0D 63         [ 4]  658 	call parse_integer 
      000F0E CC 10 66         [ 2]  659 	jp token_exit 
      000F11                        660 3$: 
      000F11                        661 	_case '(' bkslsh_tst 
      000F11 A6 28            [ 1]    1 	ld a,#'(' 
      000F13 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F15 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F17 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F19 CC 10 62         [ 2]  663 	jp token_char   	
      000F1C                        664 bkslsh_tst: ; character token 
      000F1C                        665 	_case '\',rparnt_tst
      000F1C A6 5C            [ 1]    1 	ld a,#'\' 
      000F1E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F20 26 16            [ 1]    3 	jrne rparnt_tst
      000F22 A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F24 F7               [ 1]  667 	ld (x),a 
      000F25 5C               [ 1]  668 	incw x 
      000F26 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F29 F7               [ 1]  670 	ld (x),a 
      000F2A 5C               [ 1]  671 	incw x
      000F2B 90 93            [ 1]  672 	ldw y,x 	 
      000F2D 72 5C 00 01      [ 1]  673 	inc in  
      000F31 5F               [ 1]  674 	clrw x 
      000F32 97               [ 1]  675 	ld xl,a 
      000F33 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F35 CC 10 66         [ 2]  677 	jp token_exit 
      000F38                        678 rparnt_tst:		
      000F38                        679 	_case ')' colon_tst 
      000F38 A6 29            [ 1]    1 	ld a,#')' 
      000F3A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F3C 26 05            [ 1]    3 	jrne colon_tst
      000F3E A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F40 CC 10 62         [ 2]  681 	jp token_char
      000F43                        682 colon_tst:
      000F43                        683 	_case ':' comma_tst 
      000F43 A6 3A            [ 1]    1 	ld a,#':' 
      000F45 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F47 26 05            [ 1]    3 	jrne comma_tst
      000F49 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F4B CC 10 62         [ 2]  685 	jp token_char  
      000F4E                        686 comma_tst:
      000F4E                        687 	_case COMMA sharp_tst 
      000F4E A6 2C            [ 1]    1 	ld a,#COMMA 
      000F50 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F52 26 05            [ 1]    3 	jrne sharp_tst
      000F54 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F56 CC 10 62         [ 2]  689 	jp token_char
      000F59                        690 sharp_tst:
      000F59                        691 	_case SHARP dash_tst 
      000F59 A6 23            [ 1]    1 	ld a,#SHARP 
      000F5B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F5D 26 05            [ 1]    3 	jrne dash_tst
      000F5F A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F61 CC 10 62         [ 2]  693 	jp token_char  	 	 
      000F64                        694 dash_tst: 	
      000F64                        695 	_case '-' at_tst 
      000F64 A6 2D            [ 1]    1 	ld a,#'-' 
      000F66 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F68 26 05            [ 1]    3 	jrne at_tst
      000F6A A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F6C CC 10 62         [ 2]  697 	jp token_char 
      000F6F                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000F6F                        699 	_case '@' qmark_tst 
      000F6F A6 40            [ 1]    1 	ld a,#'@' 
      000F71 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F73 26 05            [ 1]    3 	jrne qmark_tst
      000F75 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000F77 CC 10 62         [ 2]  701 	jp token_char
      000F7A                        702 qmark_tst:
      000F7A                        703 	_case '?' tick_tst 
      000F7A A6 3F            [ 1]    1 	ld a,#'?' 
      000F7C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7E 26 12            [ 1]    3 	jrne tick_tst
      000F80 A6 80            [ 1]  704 	ld a,#TK_CMD  
      000F82 F7               [ 1]  705 	ld (x),a 
      000F83 5C               [ 1]  706 	incw x 
      000F84 90 93            [ 1]  707 	ldw y,x 
      000F86 AE 1F F9         [ 2]  708 	ldw x,#print
      000F89 90 FF            [ 2]  709 	ldw (y),x 
      000F8B 72 A9 00 02      [ 2]  710 	addw y,#2
      000F8F CC 10 66         [ 2]  711 	jp token_exit
      000F92                        712 tick_tst: ; comment 
      000F92                        713 	_case TICK plus_tst 
      000F92 A6 27            [ 1]    1 	ld a,#TICK 
      000F94 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F96 26 2B            [ 1]    3 	jrne plus_tst
      000F98 A6 80            [ 1]  714 	ld a,#TK_CMD
      000F9A F7               [ 1]  715 	ld (x),a 
      000F9B 5C               [ 1]  716 	incw x
      000F9C 90 AE 21 41      [ 2]  717 	ldw y,#remark 
      000FA0 FF               [ 2]  718 	ldw (x),y 
      000FA1 1C 00 02         [ 2]  719 	addw x,#2  
      000FA4                        720 copy_comment:
      000FA4 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FA8 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FAC 90 89            [ 2]  723 	pushw y 
      000FAE CD 13 75         [ 4]  724 	call strcpy
      000FB1 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FB4 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FB6 17 01            [ 2]  727 	ldw (1,sp),y 
      000FB8 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FBB                        729 	_drop 2 
      000FBB 5B 02            [ 2]    1     addw sp,#2 
      000FBD 4F               [ 1]  730 	clr a 
      000FBE 90 93            [ 1]  731 	ldw y,x 
      000FC0 CC 10 66         [ 2]  732 	jp token_exit 
      000FC3                        733 plus_tst:
      000FC3                        734 	_case '+' star_tst 
      000FC3 A6 2B            [ 1]    1 	ld a,#'+' 
      000FC5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC7 26 05            [ 1]    3 	jrne star_tst
      000FC9 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FCB CC 10 62         [ 2]  736 	jp token_char 
      000FCE                        737 star_tst:
      000FCE                        738 	_case '*' slash_tst 
      000FCE A6 2A            [ 1]    1 	ld a,#'*' 
      000FD0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000FD2 26 05            [ 1]    3 	jrne slash_tst
      000FD4 A6 20            [ 1]  739 	ld a,#TK_MULT 
      000FD6 CC 10 62         [ 2]  740 	jp token_char 
      000FD9                        741 slash_tst: 
      000FD9                        742 	_case '/' prcnt_tst 
      000FD9 A6 2F            [ 1]    1 	ld a,#'/' 
      000FDB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDD 26 05            [ 1]    3 	jrne prcnt_tst
      000FDF A6 21            [ 1]  743 	ld a,#TK_DIV 
      000FE1 CC 10 62         [ 2]  744 	jp token_char 
      000FE4                        745 prcnt_tst:
      000FE4                        746 	_case '%' eql_tst 
      000FE4 A6 25            [ 1]    1 	ld a,#'%' 
      000FE6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE8 26 05            [ 1]    3 	jrne eql_tst
      000FEA A6 22            [ 1]  747 	ld a,#TK_MOD
      000FEC CC 10 62         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      000FEF                        750 eql_tst:
      000FEF                        751 	_case '=' gt_tst 		
      000FEF A6 3D            [ 1]    1 	ld a,#'=' 
      000FF1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF3 26 05            [ 1]    3 	jrne gt_tst
      000FF5 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      000FF7 CC 10 62         [ 2]  753 	jp token_char 
      000FFA                        754 gt_tst:
      000FFA                        755 	_case '>' lt_tst 
      000FFA A6 3E            [ 1]    1 	ld a,#'>' 
      000FFC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FFE 26 23            [ 1]    3 	jrne lt_tst
      001000 A6 31            [ 1]  756 	ld a,#TK_GT 
      001002 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001004 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001007 72 5C 00 01      [ 1]  759 	inc in 
      00100B A1 3D            [ 1]  760 	cp a,#'=
      00100D 26 04            [ 1]  761 	jrne 1$
      00100F A6 33            [ 1]  762 	ld a,#TK_GE 
      001011 20 4F            [ 2]  763 	jra token_char  
      001013 A1 3C            [ 1]  764 1$: cp a,#'<
      001015 26 04            [ 1]  765 	jrne 2$
      001017 A6 35            [ 1]  766 	ld a,#TK_NE 
      001019 20 47            [ 2]  767 	jra token_char 
      00101B 72 5A 00 01      [ 1]  768 2$: dec in
      00101F 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      001021 20 3F            [ 2]  770 	jra token_char 	 
      001023                        771 lt_tst:
      001023                        772 	_case '<' other
      001023 A6 3C            [ 1]    1 	ld a,#'<' 
      001025 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001027 26 23            [ 1]    3 	jrne other
      001029 A6 34            [ 1]  773 	ld a,#TK_LT 
      00102B 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00102D 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      001030 72 5C 00 01      [ 1]  776 	inc in 
      001034 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001036 26 04            [ 1]  778 	jrne 1$
      001038 A6 36            [ 1]  779 	ld a,#TK_LE 
      00103A 20 26            [ 2]  780 	jra token_char 
      00103C A1 3E            [ 1]  781 1$: cp a,#'>
      00103E 26 04            [ 1]  782 	jrne 2$
      001040 A6 35            [ 1]  783 	ld a,#TK_NE 
      001042 20 1E            [ 2]  784 	jra token_char 
      001044 72 5A 00 01      [ 1]  785 2$: dec in 
      001048 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      00104A 20 16            [ 2]  787 	jra token_char 	
      00104C                        788 other: ; not a special character 	 
      00104C 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00104E CD 0D EF         [ 4]  790 	call is_alpha 
      001051 25 03            [ 1]  791 	jrc 30$ 
      001053 CC 16 39         [ 2]  792 	jp syntax_error 
      001056                        793 30$: 
      001056 CD 0E 35         [ 4]  794 	call parse_keyword
      001059 A3 21 41         [ 2]  795 	cpw x,#remark 
      00105C 26 08            [ 1]  796 	jrne token_exit 
      00105E 93               [ 1]  797 	ldw x,y 
      00105F CC 0F A4         [ 2]  798 	jp copy_comment 
      001062                        799 token_char:
      001062 F7               [ 1]  800 	ld (x),a 
      001063 5C               [ 1]  801 	incw x
      001064 90 93            [ 1]  802 	ldw y,x 
      001066                        803 token_exit:
      001066                        804 	_drop VSIZE 
      001066 5B 02            [ 2]    1     addw sp,#VSIZE 
      001068 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001069                        825 compile::
      001069 90 89            [ 2]  826 	pushw y 
      00106B                        827 	_vars VSIZE 
      00106B 52 02            [ 2]    1     sub sp,#VSIZE 
      00106D 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      001072 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      001076 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001078 AE 00 00         [ 2]  831 	ldw x,#0
      00107B CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      00107E C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      001081 AE 16 E3         [ 2]  834 	ldw x,#pad+3
      001084 72 5F 00 01      [ 1]  835 	clr in 
      001088 CD 0E B5         [ 4]  836 	call get_token
      00108B A1 84            [ 1]  837 	cp a,#TK_INTGR
      00108D 26 11            [ 1]  838 	jrne 2$
      00108F A3 00 01         [ 2]  839 	cpw x,#1 
      001092 2A 05            [ 1]  840 	jrpl 1$
      001094 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      001096 CC 16 3B         [ 2]  842 	jp tb_error
      001099 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      00109C 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      0010A0 90 A3 17 60      [ 2]  845 2$:	cpw y,#xstack_full 
      0010A4 25 05            [ 1]  846 	jrult 3$
      0010A6 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010A8 CC 16 3B         [ 2]  848 	jp tb_error 
      0010AB                        849 3$:	
      0010AB 93               [ 1]  850 	ldw x,y 
      0010AC CD 0E B5         [ 4]  851 	call get_token 
      0010AF A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010B1 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010B3 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010B7 90 9F            [ 1]  856     ld a,yl
      0010B9 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010BC CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010BF E7 02            [ 1]  859 	ld (2,x),a 
      0010C1 FE               [ 2]  860 	ldw x,(x)
      0010C2 27 09            [ 1]  861 	jreq 10$
      0010C4 CD 0C 9C         [ 4]  862 	call insert_line
      0010C7 72 5F 00 03      [ 1]  863 	clr  count 
      0010CB 20 0F            [ 2]  864 	jra  11$ 
      0010CD                        865 10$: ; line# is zero 
      0010CD CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010D0 CF 00 04         [ 2]  867 	ldw basicptr,x 
      0010D3 E6 02            [ 1]  868 	ld a,(2,x)
      0010D5 C7 00 03         [ 1]  869 	ld count,a 
      0010D8 35 03 00 01      [ 1]  870 	mov in,#3 
      0010DC                        871 11$:
      0010DC                        872 	_drop VSIZE 
      0010DC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010DE 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      0010E2 90 85            [ 2]  874 	popw y 
      0010E4 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      0010E5                         48 cpy_cmd_name:
      0010E5 5D               [ 2]   49 	tnzw x 
      0010E6 27 14            [ 1]   50 	jreq 10$
      0010E8 F6               [ 1]   51 	ld a,(x)
      0010E9 5C               [ 1]   52 	incw x
      0010EA A4 0F            [ 1]   53 	and a,#15  
      0010EC 88               [ 1]   54 	push a 
      0010ED 0D 01            [ 1]   55     tnz (1,sp) 
      0010EF 27 0A            [ 1]   56 	jreq 9$
      0010F1 F6               [ 1]   57 1$:	ld a,(x)
      0010F2 90 F7            [ 1]   58 	ld (y),a  
      0010F4 5C               [ 1]   59 	incw x
      0010F5 90 5C            [ 1]   60 	incw y 
      0010F7 0A 01            [ 1]   61 	dec (1,sp)	 
      0010F9 26 F6            [ 1]   62 	jrne 1$
      0010FB 84               [ 1]   63 9$: pop a 
      0010FC                         64 10$: 
      0010FC 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      0010FD                         75 add_space:
      0010FD 90 5A            [ 2]   76 	decw y 
      0010FF 90 F6            [ 1]   77 	ld a,(y)
      001101 90 5C            [ 1]   78 	incw y
      001103 A1 29            [ 1]   79 	cp a,#') 
      001105 27 05            [ 1]   80 	jreq 0$
      001107 CD 0E 09         [ 4]   81 	call is_alnum 
      00110A 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00110C                         83 0$: 
      00110C A6 20            [ 1]   84 	ld a,#SPACE 
      00110E 90 F7            [ 1]   85 	ld (y),a 
      001110 90 5C            [ 1]   86 	incw y 
      001112 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001113                         99 right_align::
      001113 88               [ 1]  100 	push a 
      001114 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001116 C1 00 23         [ 1]  102 	cp a,tab_width 
      001119 2A 08            [ 1]  103 	jrpl 1$
      00111B A6 20            [ 1]  104 	ld a,#SPACE 
      00111D 5A               [ 2]  105 	decw x
      00111E F7               [ 1]  106 	ld (x),a  
      00111F 0C 01            [ 1]  107 	inc (1,sp)
      001121 20 F1            [ 2]  108 	jra 0$ 
      001123 84               [ 1]  109 1$: pop a 	
      001124 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001125                        123 cpy_quote:
      001125 A6 22            [ 1]  124 	ld a,#'"
      001127 90 F7            [ 1]  125 	ld (y),a 
      001129 90 5C            [ 1]  126 	incw y 
      00112B 89               [ 2]  127 	pushw x 
      00112C CD 17 B6         [ 4]  128 	call skip_string 
      00112F 85               [ 2]  129 	popw x 
      001130 F6               [ 1]  130 1$:	ld a,(x)
      001131 27 30            [ 1]  131 	jreq 9$
      001133 5C               [ 1]  132 	incw x 
      001134 A1 20            [ 1]  133 	cp a,#SPACE 
      001136 25 0E            [ 1]  134 	jrult 3$
      001138 90 F7            [ 1]  135 	ld (y),a
      00113A 90 5C            [ 1]  136 	incw y 
      00113C A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00113E 26 F0            [ 1]  138 	jrne 1$ 
      001140                        139 2$:
      001140 90 F7            [ 1]  140 	ld (y),a
      001142 90 5C            [ 1]  141 	incw y  
      001144 20 EA            [ 2]  142 	jra 1$
      001146 88               [ 1]  143 3$: push a 
      001147 A6 5C            [ 1]  144 	ld a,#'\
      001149 90 F7            [ 1]  145 	ld (y),a 
      00114B 90 5C            [ 1]  146 	incw y  
      00114D 84               [ 1]  147 	pop a 
      00114E A0 07            [ 1]  148 	sub a,#7
      001150 C7 00 0E         [ 1]  149 	ld acc8,a 
      001153 72 5F 00 0D      [ 1]  150 	clr acc16
      001157 89               [ 2]  151 	pushw x
      001158 AE 0D 5B         [ 2]  152 	ldw x,#escaped 
      00115B 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00115F F6               [ 1]  154 	ld a,(x)
      001160 85               [ 2]  155 	popw x
      001161 20 DD            [ 2]  156 	jra 2$
      001163 A6 22            [ 1]  157 9$: ld a,#'"
      001165 90 F7            [ 1]  158 	ld (y),a 
      001167 90 5C            [ 1]  159 	incw y  
      001169 5C               [ 1]  160 	incw x 
      00116A 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      00116B                        171 var_name::
      00116B 1D 00 34         [ 2]  172 		subw x,#vars 
      00116E A6 03            [ 1]  173 		ld a,#3
      001170 62               [ 2]  174 		div x,a 
      001171 9F               [ 1]  175 		ld a,xl 
      001172 AB 41            [ 1]  176 		add a,#'A 
      001174 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      001175                        195 decompile::
      001175                        196 	_vars VSIZE
      001175 52 04            [ 2]    1     sub sp,#VSIZE 
      001177 C6 00 0A         [ 1]  197 	ld a,base
      00117A 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      00117C C6 00 23         [ 1]  199 	ld a,tab_width 
      00117F 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      001181 17 03            [ 2]  201 	ldw (STR,sp),y   
      001183 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      001187 35 0A 00 0A      [ 1]  203 	mov base,#10
      00118B 35 05 00 23      [ 1]  204 	mov tab_width,#5
      00118F 72 5F 00 0C      [ 1]  205 	clr acc24 
      001193 CF 00 0D         [ 2]  206 	ldw acc16,x
      001196 4F               [ 1]  207 	clr a ; unsigned conversion 
      001197 CD 18 22         [ 4]  208 	call itoa  
      00119A CD 11 13         [ 4]  209 	call right_align 
      00119D 88               [ 1]  210 	push a 
      00119E 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011A0 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011A2 CD 13 75         [ 4]  213 	call strcpy 
      0011A5 90 5F            [ 1]  214 	clrw y 
      0011A7 84               [ 1]  215 	pop a 
      0011A8 90 97            [ 1]  216 	ld yl,a 
      0011AA 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011AD A6 20            [ 1]  218 	ld a,#SPACE 
      0011AF 90 F7            [ 1]  219 	ld (y),a 
      0011B1 90 5C            [ 1]  220 	incw y 
      0011B3 72 5F 00 23      [ 1]  221 	clr tab_width
      0011B7 AE 00 03         [ 2]  222 	ldw x,#3
      0011BA CF 00 00         [ 2]  223 	ldw in.w,x 
      0011BD                        224 decomp_loop:
      0011BD 90 89            [ 2]  225 	pushw y
      0011BF CD 17 9D         [ 4]  226 	call next_token 
      0011C2 90 85            [ 2]  227 	popw y 
      0011C4 4D               [ 1]  228 	tnz a  
      0011C5 26 03            [ 1]  229 	jrne 1$
      0011C7 CC 12 EA         [ 2]  230 	jp 20$
      0011CA 2B 03            [ 1]  231 1$:	jrmi 2$
      0011CC CC 12 5B         [ 2]  232 	jp 6$
      0011CF                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011CF A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011D1 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      0011D3 CD 10 FD         [ 4]  237 	call add_space
      0011D6 CD 17 C5         [ 4]  238 	call get_addr   
      0011D9 CD 11 6B         [ 4]  239 	call var_name
      0011DC 90 F7            [ 1]  240 	ld (y),a 
      0011DE 90 5C            [ 1]  241 	incw y  
      0011E0 20 DB            [ 2]  242 	jra decomp_loop
      0011E2                        243 3$:
      0011E2 A1 84            [ 1]  244 	cp a,#TK_INTGR
      0011E4 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0011E6 CD 17 CF         [ 4]  247 	call get_int24 
      0011E9 C7 00 0C         [ 1]  248 	ld acc24,a 
      0011EC CF 00 0D         [ 2]  249 	ldw acc16,x 
      0011EF CD 10 FD         [ 4]  250 	call add_space
      0011F2 90 89            [ 2]  251 	pushw y 
      0011F4 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      0011F6 CD 18 22         [ 4]  253 	call itoa  
      0011F9 16 01            [ 2]  254 	ldw y,(1,sp) 
      0011FB 88               [ 1]  255 	push a 
      0011FC 51               [ 1]  256 	exgw x,y 
      0011FD CD 13 75         [ 4]  257 	call strcpy 
      001200 90 5F            [ 1]  258 	clrw y
      001202 84               [ 1]  259 	pop a  
      001203 90 97            [ 1]  260 	ld yl,a 
      001205 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001208                        262 	_drop 2 
      001208 5B 02            [ 2]    1     addw sp,#2 
      00120A 20 B1            [ 2]  263 	jra decomp_loop
      00120C                        264 4$: ; dictionary keyword
      00120C A1 87            [ 1]  265 	cp a,#TK_NOT 
      00120E 24 39            [ 1]  266 	jruge 50$ 
      001210 FE               [ 2]  267 	ldw x,(x)
      001211 72 5C 00 01      [ 1]  268 	inc in 
      001215 72 5C 00 01      [ 1]  269 	inc in 
      001219 A3 21 41         [ 2]  270 	cpw x,#remark 
      00121C 26 23            [ 1]  271 	jrne 5$
      00121E CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      001221 CD 10 FD         [ 4]  274 	call add_space
      001224 A6 27            [ 1]  275 	ld a,#''
      001226 90 F7            [ 1]  276 	ld (y),a 
      001228 90 5C            [ 1]  277 	incw y 
      00122A                        278 46$:
      00122A 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00122E 72 5C 00 01      [ 1]  280 	inc in  
      001232 90 F7            [ 1]  281 	ld (y),a 
      001234 90 5C            [ 1]  282 	incw y 
      001236 C6 00 01         [ 1]  283 	ld a,in 
      001239 C1 00 03         [ 1]  284 	cp a,count 
      00123C 2B EC            [ 1]  285 	jrmi 46$
      00123E CC 12 EA         [ 2]  286 	jp 20$  
      001241 A3 1C 81         [ 2]  287 5$: cpw x,#let  
      001244 26 05            [ 1]  288 	jrne 54$
      001246 CC 11 BD         [ 2]  289 	jp decomp_loop ; down display LET
      001249                        290 50$:
      001249 5F               [ 1]  291 	clrw x 
      00124A 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      00124B                        297 54$: ; insert command name 
      00124B CD 10 FD         [ 4]  298 	call add_space  
      00124E 90 89            [ 2]  299 	pushw y
      001250 CD 13 25         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001253 90 85            [ 2]  301 	popw y 
      001255 CD 10 E5         [ 4]  302 	call cpy_cmd_name
      001258 CC 11 BD         [ 2]  303 	jp decomp_loop 
      00125B                        304 6$:
                                    305 ; label?
      00125B A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00125D 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00125F A6 20            [ 1]  309 	ld a,#32 
      001261 90 F7            [ 1]  310 	ld (y),a 
      001263 90 5C            [ 1]  311 	incw y 
      001265                        312 61$:
      001265 89               [ 2]  313 	pushw x 
      001266 CD 17 B6         [ 4]  314 	call skip_string 
      001269 85               [ 2]  315 	popw x 
      00126A                        316 62$:	
      00126A F6               [ 1]  317 	ld a,(x)
      00126B 27 07            [ 1]  318 	jreq 63$ 
      00126D 5C               [ 1]  319 	incw x  
      00126E 90 F7            [ 1]  320 	ld (y),a 
      001270 90 5C            [ 1]  321 	incw y 
      001272 20 F6            [ 2]  322 	jra 62$ 
      001274                        323 63$: 
      001274 A6 20            [ 1]  324 	ld a,#32 
      001276 90 F7            [ 1]  325 	ld (y),a 
      001278 90 5C            [ 1]  326 	incw y 
      00127A CC 11 BD         [ 2]  327 	jp decomp_loop
      00127D                        328 64$:
      00127D A1 02            [ 1]  329 	cp a,#TK_QSTR 
      00127F 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      001281 CD 10 FD         [ 4]  332 	call add_space
      001284 CD 11 25         [ 4]  333 	call cpy_quote  
      001287 CC 11 BD         [ 2]  334 	jp decomp_loop
      00128A                        335 7$:
      00128A A1 04            [ 1]  336 	cp a,#TK_CHAR 
      00128C 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      00128E CD 10 FD         [ 4]  339 	call add_space 
      001291 A6 5C            [ 1]  340 	ld a,#'\ 
      001293 90 F7            [ 1]  341 	ld (y),a 
      001295 90 5C            [ 1]  342 	incw y
      001297 F6               [ 1]  343 	ld a,(x)
      001298 72 5C 00 01      [ 1]  344 	inc in  
      00129C 20 06            [ 2]  345 	jra 81$
      00129E A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012A0 26 09            [ 1]  347 	jrne 9$
      0012A2 A6 3A            [ 1]  348 	ld a,#':
      0012A4                        349 81$:
      0012A4 90 F7            [ 1]  350 	ld (y),a 
      0012A6 90 5C            [ 1]  351 	incw y 
      0012A8                        352 82$:
      0012A8 CC 11 BD         [ 2]  353 	jp decomp_loop
      0012AB                        354 9$: 
      0012AB A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0012AD 22 0A            [ 1]  356 	jrugt 10$ 
      0012AF A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012B1 5F               [ 1]  358 	clrw x 
      0012B2 97               [ 1]  359 	ld xl,a
      0012B3 1C 13 00         [ 2]  360 	addw x,#single_char 
      0012B6 F6               [ 1]  361 	ld a,(x)
      0012B7 20 EB            [ 2]  362 	jra 81$ 
      0012B9                        363 10$: 
      0012B9 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012BB 22 0A            [ 1]  365 	jrugt 11$
      0012BD A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012BF 5F               [ 1]  367 	clrw x 
      0012C0 97               [ 1]  368 	ld xl,a 
      0012C1 1C 13 05         [ 2]  369 	addw x,#add_char 
      0012C4 F6               [ 1]  370 	ld a,(x)
      0012C5 20 DD            [ 2]  371 	jra 81$
      0012C7                        372 11$:
      0012C7 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012C9 22 0A            [ 1]  374 	jrugt 12$
      0012CB A0 20            [ 1]  375 	sub a,#TK_MULT
      0012CD 5F               [ 1]  376 	clrw x 
      0012CE 97               [ 1]  377 	ld xl,a 
      0012CF 1C 13 07         [ 2]  378 	addw x,#mul_char
      0012D2 F6               [ 1]  379 	ld a,(x)
      0012D3 20 CF            [ 2]  380 	jra 81$
      0012D5                        381 12$:
      0012D5 A0 31            [ 1]  382 	sub a,#TK_GT  
      0012D7 48               [ 1]  383 	sll a 
      0012D8 5F               [ 1]  384 	clrw x 
      0012D9 97               [ 1]  385 	ld xl,a 
      0012DA 1C 13 0A         [ 2]  386 	addw x,#relop_str 
      0012DD FE               [ 2]  387 	ldw x,(x)
      0012DE F6               [ 1]  388 	ld a,(x)
      0012DF 5C               [ 1]  389 	incw x 
      0012E0 90 F7            [ 1]  390 	ld (y),a
      0012E2 90 5C            [ 1]  391 	incw y 
      0012E4 F6               [ 1]  392 	ld a,(x)
      0012E5 26 BD            [ 1]  393 	jrne 81$
      0012E7 CC 11 BD         [ 2]  394 	jp decomp_loop 
      0012EA                        395 20$: 
      0012EA 90 7F            [ 1]  396 	clr (y)
      0012EC 1E 03            [ 2]  397 	ldw x,(STR,sp)
      0012EE 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      0012F0 C7 00 0A         [ 1]  399 	ld base,a 
      0012F3 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      0012F5 C7 00 23         [ 1]  401 	ld tab_width,a
      0012F8 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      0012FB 90 9F            [ 1]  403 	ld a,yl 
      0012FD                        404 	_drop VSIZE 
      0012FD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0012FF 81               [ 4]  405 	ret 
                                    406 
      001300 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001305 2B 2D                  408 add_char: .byte '+','-'
      001307 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00130A 13 16 13 18 13 1A 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             1D 13 22 13 1F
      001316 3E 00                  411 gt: .asciz ">"
      001318 3D 00                  412 equal: .asciz "="
      00131A 3E 3D 00               413 ge: .asciz ">="
      00131D 3C 00                  414 lt: .asciz "<"
      00131F 3C 3D 00               415 le: .asciz "<="
      001322 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001325                        429 cmd_name:
      001325                        430 	_vars VSIZE 
      001325 52 04            [ 2]    1     sub sp,#VSIZE 
      001327 72 5F 00 0D      [ 1]  431 	clr acc16 
      00132B 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00132D AE 34 20         [ 2]  433 	ldw x,#kword_dict	
      001330 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      001332 E6 02            [ 1]  435 	ld a,(2,x)
      001334 A4 0F            [ 1]  436 	and a,#15 
      001336 C7 00 0E         [ 1]  437 	ld acc8,a 
      001339 1C 00 03         [ 2]  438 	addw x,#3
      00133C 72 BB 00 0D      [ 2]  439 	addw x,acc16
      001340 FE               [ 2]  440 	ldw x,(x) ; code address   
      001341 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001343 27 0C            [ 1]  442 	jreq 2$
      001345 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001347 FE               [ 2]  444 	ldw x,(x) 
      001348 1D 00 02         [ 2]  445 	subw x,#2  
      00134B 26 E3            [ 1]  446 	jrne 1$
      00134D 4F               [ 1]  447 	clr a 
      00134E 5F               [ 1]  448 	clrw x 
      00134F 20 05            [ 2]  449 	jra 9$
      001351 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001353 1C 00 02         [ 2]  451 	addw x,#2 	
      001356                        452 9$:	_drop VSIZE
      001356 5B 04            [ 2]    1     addw sp,#VSIZE 
      001358 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001359                        118 strlen::
      001359 89               [ 2]  119 	pushw x 
      00135A 4F               [ 1]  120 	clr a
      00135B 7D               [ 1]  121 1$:	tnz (x) 
      00135C 27 04            [ 1]  122 	jreq 9$ 
      00135E 4C               [ 1]  123 	inc a 
      00135F 5C               [ 1]  124 	incw x 
      001360 20 F9            [ 2]  125 	jra 1$ 
      001362 85               [ 2]  126 9$:	popw x 
      001363 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      001364                        137 strcmp:
      001364 F6               [ 1]  138 	ld a,(x)
      001365 27 0B            [ 1]  139 	jreq 5$ 
      001367 90 F1            [ 1]  140 	cp a,(y) 
      001369 26 05            [ 1]  141 	jrne 4$ 
      00136B 5C               [ 1]  142 	incw x 
      00136C 90 5C            [ 1]  143 	incw y 
      00136E 20 F4            [ 2]  144 	jra strcmp 
      001370                        145 4$: ; not same  
      001370 4F               [ 1]  146 	clr a 
      001371 81               [ 4]  147 	ret 
      001372                        148 5$: ; same 
      001372 A6 01            [ 1]  149 	ld a,#1 
      001374 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      001375                        161 strcpy::
      001375 88               [ 1]  162 	push a 
      001376 89               [ 2]  163 	pushw x 
      001377 90 F6            [ 1]  164 1$: ld a,(y)
      001379 27 06            [ 1]  165 	jreq 9$ 
      00137B F7               [ 1]  166 	ld (x),a 
      00137C 5C               [ 1]  167 	incw x 
      00137D 90 5C            [ 1]  168 	incw y 
      00137F 20 F6            [ 2]  169 	jra 1$ 
      001381 7F               [ 1]  170 9$:	clr (x)
      001382 85               [ 2]  171 	popw x 
      001383 84               [ 1]  172 	pop a 
      001384 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      001385                        187 move::
      001385 88               [ 1]  188 	push a 
      001386                        189 	_vars VSIZE 
      001386 52 02            [ 2]    1     sub sp,#VSIZE 
      001388 0F 01            [ 1]  190 	clr (INCR,sp)
      00138A 0F 02            [ 1]  191 	clr (LB,sp)
      00138C 90 89            [ 2]  192 	pushw y 
      00138E 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      001390 90 85            [ 2]  194 	popw y 
      001392 27 31            [ 1]  195 	jreq move_exit ; x==y 
      001394 2B 0E            [ 1]  196 	jrmi move_down
      001396                        197 move_up: ; start from top address with incr=-1
      001396 72 BB 00 0D      [ 2]  198 	addw x,acc16
      00139A 72 B9 00 0D      [ 2]  199 	addw y,acc16
      00139E 03 01            [ 1]  200 	cpl (INCR,sp)
      0013A0 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      0013A2 20 05            [ 2]  202 	jra move_loop  
      0013A4                        203 move_down: ; start from bottom address with incr=1 
      0013A4 5A               [ 2]  204     decw x 
      0013A5 90 5A            [ 2]  205 	decw y
      0013A7 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013A9                        207 move_loop:	
      0013A9 C6 00 0D         [ 1]  208     ld a, acc16 
      0013AC CA 00 0E         [ 1]  209 	or a, acc8
      0013AF 27 14            [ 1]  210 	jreq move_exit 
      0013B1 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013B4 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013B7 90 F6            [ 1]  213 	ld a,(y)
      0013B9 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0013BA 89               [ 2]  215 	pushw x 
      0013BB CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013BE 5A               [ 2]  217 	decw x 
      0013BF CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013C2 85               [ 2]  219 	popw x 
      0013C3 20 E4            [ 2]  220 	jra move_loop
      0013C5                        221 move_exit:
      0013C5                        222 	_drop VSIZE
      0013C5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013C7 84               [ 1]  223 	pop a 
      0013C8 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013C9                        233 clear_vars:
      0013C9 89               [ 2]  234 	pushw x 
      0013CA 88               [ 1]  235 	push a  
      0013CB AE 00 34         [ 2]  236 	ldw x,#vars 
      0013CE A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013D0 7F               [ 1]  238 1$:	clr (x)
      0013D1 5C               [ 1]  239 	incw x 
      0013D2 4A               [ 1]  240 	dec a 
      0013D3 26 FB            [ 1]  241 	jrne 1$
      0013D5 84               [ 1]  242 	pop a 
      0013D6 85               [ 2]  243 	popw x 
      0013D7 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      0013D8 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      00141E                        255 system_information:
      00141E AE 13 D8         [ 2]  256 	ldw x,#software 
      001421 CD 09 3B         [ 4]  257 	call puts 
      001424 A6 02            [ 1]  258 	ld a,#MAJOR 
      001426 C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001429 5F               [ 1]  260 	clrw x 
      00142A CF 00 0C         [ 2]  261 	ldw acc24,x
      00142D 72 5F 00 23      [ 1]  262 	clr tab_width  
      001431 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001435 CD 17 FC         [ 4]  264 	call prt_acc24 
      001438 A6 2E            [ 1]  265 	ld a,#'.
      00143A CD 08 DE         [ 4]  266 	call putc 
      00143D A6 00            [ 1]  267 	ld a,#MINOR 
      00143F C7 00 0E         [ 1]  268 	ld acc8,a 
      001442 5F               [ 1]  269 	clrw x 
      001443 CF 00 0C         [ 2]  270 	ldw acc24,x 
      001446 CD 17 FC         [ 4]  271 	call prt_acc24
      001449 A6 0D            [ 1]  272 	ld a,#CR 
      00144B CD 08 DE         [ 4]  273 	call putc
                                    274 ;call test 
      00144E 81               [ 4]  275 	ret
                                    276 
      00144F                        277 warm_init:
      00144F 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      001453 72 5F 00 22      [ 1]  279 	clr flags 
      001457 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      00145B 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      00145F 35 0A 00 0A      [ 1]  282 	mov base,#10 
      001463 AE 00 00         [ 2]  283 	ldw x,#0 
      001466 CF 00 04         [ 2]  284 	ldw basicptr,x 
      001469 CF 00 00         [ 2]  285 	ldw in.w,x 
      00146C 72 5F 00 03      [ 1]  286 	clr count
      001470 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      001471                        293 clear_basic:
      001471 89               [ 2]  294 	pushw x 
      001472 72 5F 00 03      [ 1]  295 	clr count
      001476 72 5F 00 01      [ 1]  296 	clr in  
      00147A AE 00 90         [ 2]  297 	ldw x,#free_ram 
      00147D CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      001480 CF 00 1D         [ 2]  299 	ldw txtend,x 
      001483 CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      001486 CF 00 32         [ 2]  301 	ldw dvar_end,x 
      001489 CD 13 C9         [ 4]  302 	call clear_vars 
      00148C 85               [ 2]  303 	popw x
      00148D 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00148E                        309 err_msg:
      00148E 00 00 14 B2 14 BF 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             CD 14 E6 14 F5
      00149A 15 0B 15 21 15 3B 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             4C 15 5D
      0014A4 15 69 15 9C 15 AC 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



             C0 15 D3
      0014AE 15 E0 15 EA            313 	.word err_overflow,err_read_only  
                                    314 
      0014B2 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014BF 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014CD 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0014E6 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      0014F5 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00150B 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001521 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00153B 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00154C 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      00155D 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001569 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00159C 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015AC 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015C0 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015D3 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      0015E0 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0015EA 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
                                    332 
      001606 0A 72 75 6E 20 74 69   333 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001618 0A 63 6F 6D 70 69 6C   334 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001629 6C 61 73 74 20 74 6F   335 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    336 
      001639                        337 syntax_error::
      001639 A6 02            [ 1]  338 	ld a,#ERR_SYNTAX 
                                    339 
      00163B                        340 tb_error::
      00163B 72 0A 00 22 4C   [ 2]  341 	btjt flags,#FCOMP,1$
      001640 88               [ 1]  342 	push a 
      001641 AE 16 06         [ 2]  343 	ldw x, #rt_msg 
      001644 CD 09 3B         [ 4]  344 	call puts 
      001647 84               [ 1]  345 	pop a 
      001648 AE 14 8E         [ 2]  346 	ldw x, #err_msg 
      00164B 72 5F 00 0D      [ 1]  347 	clr acc16 
      00164F 48               [ 1]  348 	sll a
      001650 72 59 00 0D      [ 1]  349 	rlc acc16  
      001654 C7 00 0E         [ 1]  350 	ld acc8, a 
      001657 72 BB 00 0D      [ 2]  351 	addw x,acc16 
      00165B FE               [ 2]  352 	ldw x,(x)
      00165C CD 09 3B         [ 4]  353 	call puts
      00165F CE 00 04         [ 2]  354 	ldw x,basicptr 
                           000001   355 .if DEBUG 
      001662 C6 00 03         [ 1]  356 ld a,count 
      001665 90 5F            [ 1]  357 clrw y 
      001667 90 02            [ 1]  358 rlwa y  
      001669 CD 06 3A         [ 4]  359 call hex_dump
      00166C CE 00 04         [ 2]  360 ldw x,basicptr
                                    361 .endif 
      00166F C6 00 01         [ 1]  362 	ld a,in 
      001672 CD 1F D5         [ 4]  363 	call prt_basic_line
      001675 AE 16 29         [ 2]  364 	ldw x,#tk_id 
      001678 CD 09 3B         [ 4]  365 	call puts 
      00167B C6 00 02         [ 1]  366 	ld a,in.saved 
      00167E 5F               [ 1]  367 	clrw x 
      00167F 97               [ 1]  368 	ld xl,a 
      001680 72 BB 00 04      [ 2]  369 	addw x,basicptr 
      001684 F6               [ 1]  370 	ld a,(x)
      001685 5F               [ 1]  371 	clrw x 
      001686 97               [ 1]  372 	ld xl,a 
      001687 CD 17 E5         [ 4]  373 	call prt_i16
      00168A 20 35            [ 2]  374 	jra 6$
      00168C                        375 1$:	
      00168C 88               [ 1]  376 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      00168D AE 16 18         [ 2]  377 	ldw x,#comp_msg
      001690 CD 09 3B         [ 4]  378 	call puts 
      001693 84               [ 1]  379 	pop a 
      001694 AE 14 8E         [ 2]  380 	ldw x, #err_msg 
      001697 72 5F 00 0D      [ 1]  381 	clr acc16 
      00169B 48               [ 1]  382 	sll a
      00169C 72 59 00 0D      [ 1]  383 	rlc acc16  
      0016A0 C7 00 0E         [ 1]  384 	ld acc8, a 
      0016A3 72 BB 00 0D      [ 2]  385 	addw x,acc16 
      0016A7 FE               [ 2]  386 	ldw x,(x)
      0016A8 CD 09 3B         [ 4]  387 	call puts
      0016AB AE 16 90         [ 2]  388 	ldw x,#tib
      0016AE CD 09 3B         [ 4]  389 	call puts 
      0016B1 A6 0D            [ 1]  390 	ld a,#CR 
      0016B3 CD 08 DE         [ 4]  391 	call putc
      0016B6 CE 00 00         [ 2]  392 	ldw x,in.w
      0016B9 CD 09 A8         [ 4]  393 	call spaces
      0016BC A6 5E            [ 1]  394 	ld a,#'^
      0016BE CD 08 DE         [ 4]  395 	call putc 
      0016C1 AE 17 FF         [ 2]  396 6$: ldw x,#STACK_EMPTY 
      0016C4 94               [ 1]  397     ldw sp,x
                                    398 
      0016C5                        399 warm_start:
      0016C5 CD 14 4F         [ 4]  400 	call warm_init
                                    401 ;----------------------------
                                    402 ;   BASIC interpreter
                                    403 ;----------------------------
      0016C8                        404 cmd_line: ; user interface 
      0016C8 A6 0D            [ 1]  405 	ld a,#CR 
      0016CA CD 08 DE         [ 4]  406 	call putc 
      0016CD A6 3E            [ 1]  407 	ld a,#'> 
      0016CF CD 08 DE         [ 4]  408 	call putc
      0016D2 CD 0A 40         [ 4]  409 	call readln
      0016D5 72 5D 00 03      [ 1]  410 	tnz count 
      0016D9 27 ED            [ 1]  411 	jreq cmd_line
      0016DB CD 10 69         [ 4]  412 	call compile
                                    413 ;;;;;;;;;;;;;;;;;;;;;;	
                                    414 ;pushw y 
                                    415 ;ldw x,txtbgn  
                                    416 ;ldw y,txtend
                                    417 ;ldw acc16,x   
                                    418 ;subw y,acc16 
                                    419 ;call hex_dump
                                    420 ;popw y 
                                    421 ;;;;;;;;;;;;;;;;;;;;;;
                                    422 
                                    423 ; if text begin with a line number
                                    424 ; the compiler set count to zero    
                                    425 ; so code is not interpreted
      0016DE 72 5D 00 03      [ 1]  426 	tnz count 
      0016E2 27 E4            [ 1]  427 	jreq cmd_line
                                    428 	
                                    429 ; if direct command 
                                    430 ; it's ready to interpret 
                                    431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    432 ;; This is the interpreter loop
                                    433 ;; for each BASIC code line. 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016E4                        435 interpreter: 
      0016E4 C6 00 01         [ 1]  436 	ld a,in 
      0016E7 C1 00 03         [ 1]  437 	cp a,count 
      0016EA 2B 1D            [ 1]  438 	jrmi interp_loop
      0016EC                        439 next_line:
      0016EC 72 01 00 22 D7   [ 2]  440 	btjf flags, #FRUN, cmd_line
      0016F1 CE 00 04         [ 2]  441 	ldw x,basicptr
      0016F4 72 BB 00 00      [ 2]  442 	addw x,in.w 
      0016F8 C3 00 1D         [ 2]  443 	cpw x,txtend 
      0016FB 2A C8            [ 1]  444 	jrpl warm_start
      0016FD CF 00 04         [ 2]  445 	ldw basicptr,x ; start of next line  
      001700 E6 02            [ 1]  446 	ld a,(2,x)
      001702 C7 00 03         [ 1]  447 	ld count,a 
      001705 35 03 00 01      [ 1]  448 	mov in,#3 ; skip first 3 bytes of line 
      001709                        449 interp_loop:
      001709 CD 17 9D         [ 4]  450 	call next_token
      00170C A1 00            [ 1]  451 	cp a,#TK_NONE 
      00170E 27 DC            [ 1]  452 	jreq next_line 
      001710 A1 80            [ 1]  453 	cp a,#TK_CMD
      001712 26 0C            [ 1]  454 	jrne 1$
      001714                        455 	_get_code_addr
      001714 FE               [ 2]    1         ldw x,(x)
      001715 72 5C 00 01      [ 1]    2         inc in 
      001719 72 5C 00 01      [ 1]    3         inc in 
      00171D FD               [ 4]  456 	call(x)
      00171E 20 E9            [ 2]  457 	jra interp_loop 
      001720                        458 1$:	 
      001720 A1 85            [ 1]  459 	cp a,#TK_VAR
      001722 26 05            [ 1]  460 	jrne 2$
      001724 CD 1C 94         [ 4]  461 	call let_var  
      001727 20 E0            [ 2]  462 	jra interp_loop 
      001729                        463 2$:	
      001729 A1 05            [ 1]  464 	cp a,#TK_ARRAY 
      00172B 26 05            [ 1]  465 	jrne 3$
      00172D CD 1C 8F         [ 4]  466 	call let_array 
      001730 20 D7            [ 2]  467 	jra interp_loop
      001732                        468 3$:	
      001732 A1 03            [ 1]  469 	cp a,#TK_LABEL
      001734 26 05            [ 1]  470 	jrne 4$
      001736 CD 17 42         [ 4]  471 	call let_dvar  
      001739 20 CE            [ 2]  472 	jra interp_loop 
      00173B                        473 4$: 
      00173B A1 0A            [ 1]  474 	cp a,#TK_COLON 
      00173D 27 CA            [ 1]  475 	jreq interp_loop
      00173F CC 16 39         [ 2]  476 5$:	jp syntax_error 
                                    477 
                                    478 
                                    479 ;----------------------
                                    480 ; when a label is met 
                                    481 ; at interp_loop
                                    482 ; it may be a variable 
                                    483 ; assignement to DIM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    484 ; variable 
                                    485 ;----------------------
                           000001   486 	VAR_NAME=1 
                           000003   487 	REC_LEN=3
                           000004   488 	VSIZE=4 
      001742                        489 let_dvar:
      001742                        490 	_vars VSIZE 
      001742 52 04            [ 2]    1     sub sp,#VSIZE 
      001744 1F 01            [ 2]  491 	ldw (VAR_NAME,sp),x
      001746 0F 03            [ 1]  492 	clr (REC_LEN,sp) 
      001748 CD 17 B6         [ 4]  493 	call skip_string 
      00174B CE 00 04         [ 2]  494 	ldw x,basicptr 
      00174E 72 BB 00 00      [ 2]  495 	addw x,in.w 
      001752 F6               [ 1]  496 	ld a,(x)
      001753 A1 32            [ 1]  497 	cp a,#TK_EQUAL 
      001755 26 43            [ 1]  498 	jrne 9$ 
                                    499 ; dvar assignment 
      001757 72 5C 00 01      [ 1]  500 	inc in  
      00175B CD 1B C2         [ 4]  501 	call condition  
      00175E A1 84            [ 1]  502 	cp a,#TK_INTGR 
      001760 27 03            [ 1]  503 	jreq 1$ 
      001762 CC 16 39         [ 2]  504 0$:	jp syntax_error 
      001765                        505 1$: 
      001765 1E 01            [ 2]  506 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      001767 CD 13 59         [ 4]  507 	call strlen 
      00176A AB 05            [ 1]  508 	add a,#REC_XTRA_BYTES
      00176C 6B 04            [ 1]  509 	ld (REC_LEN+1,sp),a 
      00176E CD 1D 6A         [ 4]  510 	call search_name 
      001771 5D               [ 2]  511 	tnzw x 
      001772 27 EE            [ 1]  512 	jreq 0$ 
      001774 F6               [ 1]  513 	ld a,(x)
      001775 2A 05            [ 1]  514 	jrpl 2$
      001777 A6 11            [ 1]  515 	ld a,#ERR_RD_ONLY 
      001779 CC 16 3B         [ 2]  516 	jp tb_error 
      00177C                        517 2$:
      00177C 72 FB 03         [ 2]  518 	addw x,(REC_LEN,sp)
      00177F 1D 00 03         [ 2]  519 	subw x,#CELL_SIZE 
      001782 CF 00 19         [ 2]  520 	ldw ptr16,x
      001785                        521 	_xpop 
      001785 90 F6            [ 1]    1     ld a,(y)
      001787 93               [ 1]    2     ldw x,y 
      001788 EE 01            [ 2]    3     ldw x,(1,x)
      00178A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00178E 72 C7 00 19      [ 4]  522 	ld [ptr16],a 
      001792 72 5C 00 1A      [ 1]  523 	inc ptr8 
      001796 72 CF 00 19      [ 5]  524 	ldw [ptr16],x 
      00179A                        525 9$: _drop VSIZE 	
      00179A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00179C 81               [ 4]  526 	ret 
                                    527 
                                    528 
                                    529 ;--------------------------
                                    530 ; extract next token from
                                    531 ; token list 
                                    532 ; basicptr -> base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    533 ; in  -> offset in list array 
                                    534 ; output:
                                    535 ;   A 		token attribute
                                    536 ;   X 		*token_value 
                                    537 ;----------------------------------------
      00179D                        538 next_token::
                                    539 ;	clrw x 
      00179D C6 00 01         [ 1]  540 	ld a,in 
      0017A0 C7 00 02         [ 1]  541 	ld in.saved,a ; in case "_unget_token" needed 
                                    542 ; don't replace sub by "cp a,count" 
                                    543 ; if end of line must return with A=0   	
      0017A3 C0 00 03         [ 1]  544 	sub a,count 
      0017A6 27 0D            [ 1]  545 	jreq 9$ ; end of line 
      0017A8                        546 0$: 
      0017A8 CE 00 04         [ 2]  547 	ldw x,basicptr 
      0017AB 72 BB 00 00      [ 2]  548 	addw x,in.w 
      0017AF F6               [ 1]  549 	ld a,(x)
      0017B0 5C               [ 1]  550 	incw x
      0017B1 72 5C 00 01      [ 1]  551 	inc in   
      0017B5 81               [ 4]  552 9$: ret 
                                    553 
                                    554 ;-------------------------
                                    555 ;  skip .asciz in BASIC line 
                                    556 ;  name 
                                    557 ;  input:
                                    558 ;     x		* string 
                                    559 ;  output:
                                    560 ;     none 
                                    561 ;-------------------------
      0017B6                        562 skip_string:
      0017B6 F6               [ 1]  563 	ld a,(x)
      0017B7 27 03            [ 1]  564 	jreq 1$
      0017B9 5C               [ 1]  565 	incw x 
      0017BA 20 FA            [ 2]  566 	jra skip_string 
      0017BC 5C               [ 1]  567 1$: incw x 	
      0017BD 72 B0 00 04      [ 2]  568 	subw x,basicptr 
      0017C1 CF 00 00         [ 2]  569 	ldw in.w,x 
      0017C4 81               [ 4]  570 	ret 
                                    571 
                                    572 ;---------------------
                                    573 ; extract 16 bits  
                                    574 ; address from BASIC
                                    575 ; code 
                                    576 ; input:
                                    577 ;    X    *address
                                    578 ; output:
                                    579 ;    X    address 
                                    580 ;-------------------- 
      0017C5                        581 get_addr:
      0017C5 FE               [ 2]  582 	ldw x,(x)
      0017C6 72 5C 00 01      [ 1]  583 	inc in 
      0017CA 72 5C 00 01      [ 1]  584 	inc in 
      0017CE 81               [ 4]  585 	ret 
                                    586 
                                    587 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    588 ; extract int24_t  
                                    589 ; value from BASIC 
                                    590 ; code 
                                    591 ; input:
                                    592 ;    X   *integer 
                                    593 ; output:
                                    594 ;    A:X   int24  
                                    595 ;--------------------
      0017CF                        596 get_int24:
      0017CF F6               [ 1]  597 	ld a,(x)
      0017D0 EE 01            [ 2]  598 	ldw x,(1,x)
                                    599 ; skip 3 bytes 
      0017D2 72 5C 00 01      [ 1]  600 	inc in 
      0017D6 72 5C 00 01      [ 1]  601 	inc in 
      0017DA 72 5C 00 01      [ 1]  602 	inc in 
      0017DE 81               [ 4]  603 	ret 
                                    604 
                                    605 ;-------------------------
                                    606 ; get character from 
                                    607 ; BASIC code 
                                    608 ; input:
                                    609 ;    X   *char 
                                    610 ; output:
                                    611 ;    A    char 
                                    612 ;-------------------------
      0017DF                        613 get_char:
      0017DF F6               [ 1]  614 	ld a,(x)
      0017E0 72 5C 00 01      [ 1]  615 	inc in  
      0017E4 81               [ 4]  616     ret 
                                    617 
                                    618 ;-----------------------------------
                                    619 ; print a 16 bit integer 
                                    620 ; using variable 'base' as conversion
                                    621 ; format.
                                    622 ; input:
                                    623 ;    X       integer to print 
                                    624 ;   'base'    conversion base 
                                    625 ; output:
                                    626 ;   terminal  
                                    627 ;-----------------------------------
      0017E5                        628 prt_i16:
      0017E5 72 5F 00 0C      [ 1]  629 	clr acc24 
      0017E9 CF 00 0D         [ 2]  630 	ldw acc16,x 
      0017EC A6 10            [ 1]  631 	ld a,#16
      0017EE C1 00 0A         [ 1]  632 	cp a,base
      0017F1 27 09            [ 1]  633 	jreq prt_acc24  
      0017F3 72 0F 00 0D 04   [ 2]  634 	btjf acc16,#7,prt_acc24
      0017F8 72 53 00 0C      [ 1]  635 	cpl acc24 ; sign extend 
                                    636 	
                                    637 ;------------------------------------
                                    638 ; print integer in acc24 
                                    639 ; input:
                                    640 ;	acc24 		integer to print 
                                    641 ;	'base' 		numerical base for conversion 
                                    642 ;   'tab_width' field width 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    643 ;    A 			signed||unsigned conversion
                                    644 ;  output:
                                    645 ;    A          string length
                                    646 ;------------------------------------
      0017FC                        647 prt_acc24:
      0017FC A6 FF            [ 1]  648 	ld a,#255  ; signed conversion  
      0017FE CD 18 22         [ 4]  649     call itoa  ; conversion entier en  .asciz
      001801 CD 11 13         [ 4]  650 	call right_align  
      001804 88               [ 1]  651 	push a 
      001805 CD 09 3B         [ 4]  652 	call puts
      001808 84               [ 1]  653 	pop a 
      001809 81               [ 4]  654     ret	
                                    655 
                                    656 ;---------------------------------------
                                    657 ;  print value at xstack top 
                                    658 ;---------------------------------------
      00180A                        659 print_top: 
      00180A                        660 	_xpop 
      00180A 90 F6            [ 1]    1     ld a,(y)
      00180C 93               [ 1]    2     ldw x,y 
      00180D EE 01            [ 2]    3     ldw x,(1,x)
      00180F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001813 C7 00 0C         [ 1]  661 	ld acc24,a 
      001816 CF 00 0D         [ 2]  662 	ldw acc16,x 
      001819 CD 17 FC         [ 4]  663 	call prt_acc24 
      00181C A6 20            [ 1]  664 	ld a,#SPACE
      00181E CD 08 DE         [ 4]  665 	call putc 
      001821 81               [ 4]  666 	ret 
                                    667 
                                    668 ;------------------------------------
                                    669 ; convert integer in acc24 to string
                                    670 ; input:
                                    671 ;   'base'	conversion base 
                                    672 ;	acc24	integer to convert
                                    673 ;   A       0=unsigned, else signed 
                                    674 ; output:
                                    675 ;   X  		pointer to first char of string
                                    676 ;   A       string length
                                    677 ;------------------------------------
                           000001   678 	SIGN=1  ; integer sign 
                           000002   679 	LEN=2 
                           000003   680 	PSTR=3
                           000004   681 	VSIZE=4 ;locals size
      001822                        682 itoa::
      001822                        683 	_vars VSIZE
      001822 52 04            [ 2]    1     sub sp,#VSIZE 
      001824 0F 02            [ 1]  684 	clr (LEN,sp) ; string length  
      001826 0F 01            [ 1]  685 	clr (SIGN,sp)    ; sign
      001828 4D               [ 1]  686 	tnz A
      001829 27 11            [ 1]  687 	jreq 1$ ; unsigned conversion  
      00182B C6 00 0A         [ 1]  688 	ld a,base 
      00182E A1 0A            [ 1]  689 	cp a,#10
      001830 26 0A            [ 1]  690 	jrne 1$
                                    691 	; base 10 string display with negative sign if bit 23==1
      001832 72 0F 00 0C 05   [ 2]  692 	btjf acc24,#7,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001837 03 01            [ 1]  693 	cpl (SIGN,sp)
      001839 CD 02 0D         [ 4]  694 	call neg_acc24
      00183C                        695 1$:
                                    696 ; initialize string pointer 
      00183C AE 16 90         [ 2]  697 	ldw x,#tib 
      00183F 1C 00 50         [ 2]  698 	addw x,#TIB_SIZE
      001842 5A               [ 2]  699 	decw x 
      001843 7F               [ 1]  700 	clr (x)
      001844                        701 itoa_loop:
      001844 C6 00 0A         [ 1]  702     ld a,base
      001847 CD 02 D9         [ 4]  703     call divu24_8 ; acc24/A 
      00184A AB 30            [ 1]  704     add a,#'0  ; remainder of division
      00184C A1 3A            [ 1]  705     cp a,#'9+1
      00184E 2B 02            [ 1]  706     jrmi 2$
      001850 AB 07            [ 1]  707     add a,#7 
      001852                        708 2$:	
      001852 5A               [ 2]  709 	decw x
      001853 F7               [ 1]  710     ld (x),a
      001854 0C 02            [ 1]  711 	inc (LEN,sp)
                                    712 	; if acc24==0 conversion done
      001856 C6 00 0C         [ 1]  713 	ld a,acc24
      001859 CA 00 0D         [ 1]  714 	or a,acc16
      00185C CA 00 0E         [ 1]  715 	or a,acc8
      00185F 26 E3            [ 1]  716     jrne itoa_loop
                                    717 	;conversion done, next add '$' or '-' as required
      001861 C6 00 0A         [ 1]  718 	ld a,base 
      001864 A1 10            [ 1]  719 	cp a,#16
      001866 27 08            [ 1]  720 	jreq 8$
      001868 7B 01            [ 1]  721 	ld a,(SIGN,sp)
      00186A 27 0A            [ 1]  722     jreq 10$
      00186C A6 2D            [ 1]  723     ld a,#'-
      00186E 20 02            [ 2]  724 	jra 9$ 
      001870                        725 8$:	
      001870 A6 24            [ 1]  726 	ld a,#'$ 
      001872 5A               [ 2]  727 9$: decw x
      001873 F7               [ 1]  728     ld (x),a
      001874 0C 02            [ 1]  729 	inc (LEN,sp)
      001876                        730 10$:
      001876 7B 02            [ 1]  731 	ld a,(LEN,sp)
      001878                        732 	_drop VSIZE
      001878 5B 04            [ 2]    1     addw sp,#VSIZE 
      00187A 81               [ 4]  733 	ret
                                    734 
                                    735 ;------------------------------------
                                    736 ; convert alpha to uppercase
                                    737 ; input:
                                    738 ;    a  character to convert
                                    739 ; output:
                                    740 ;    a  uppercase character
                                    741 ;------------------------------------
      00187B                        742 to_upper::
      00187B A1 61            [ 1]  743 	cp a,#'a
      00187D 2A 01            [ 1]  744 	jrpl 1$
      00187F 81               [ 4]  745 0$:	ret
      001880 A1 7A            [ 1]  746 1$: cp a,#'z	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      001882 22 FB            [ 1]  747 	jrugt 0$
      001884 A0 20            [ 1]  748 	sub a,#32
      001886 81               [ 4]  749 	ret
                                    750 	
                                    751 ;------------------------------------
                                    752 ; convert pad content in integer
                                    753 ; input:
                                    754 ;    x		* .asciz to convert
                                    755 ; output:
                                    756 ;    acc24      int24_t
                                    757 ;------------------------------------
                                    758 	; local variables
                           000001   759 	SIGN=1 ; 1 byte, 
                           000002   760 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   761 	TEMP=3 ; 1 byte, temporary storage
                           000004   762 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   763 	VSIZE=5 ; 5 bytes reserved for local storage
      001887                        764 atoi24::
      001887                        765 	_vars VSIZE
      001887 52 05            [ 2]    1     sub sp,#VSIZE 
      001889 1F 04            [ 2]  766 	ldw (XTEMP,sp),x 
                                    767 ; conversion made on xstack 
      00188B 4F               [ 1]  768 	clr a 
      00188C 5F               [ 1]  769 	clrw x 
      00188D                        770 	_xpush 
      00188D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001891 90 F7            [ 1]    2     ld (y),a 
      001893 90 EF 01         [ 2]    3     ldw (1,y),x 
      001896 0F 01            [ 1]  771 	clr (SIGN,sp)
      001898 A6 0A            [ 1]  772 	ld a,#10
      00189A 6B 02            [ 1]  773 	ld (BASE,sp),a ; default base decimal
      00189C 1E 04            [ 2]  774 	ldw x,(XTEMP,sp)
      00189E F6               [ 1]  775 	ld a,(x)
      00189F 27 4E            [ 1]  776 	jreq 9$  ; completed if 0
      0018A1 A1 2D            [ 1]  777 	cp a,#'-
      0018A3 26 04            [ 1]  778 	jrne 1$
      0018A5 03 01            [ 1]  779 	cpl (SIGN,sp)
      0018A7 20 08            [ 2]  780 	jra 2$
      0018A9 A1 24            [ 1]  781 1$: cp a,#'$
      0018AB 26 08            [ 1]  782 	jrne 3$
      0018AD A6 10            [ 1]  783 	ld a,#16
      0018AF 6B 02            [ 1]  784 	ld (BASE,sp),a
      0018B1 5C               [ 1]  785 2$:	incw x
      0018B2 1F 04            [ 2]  786 	ldw (XTEMP,sp),x 
      0018B4 F6               [ 1]  787 	ld a,(x)
      0018B5                        788 3$:	; char to digit 
      0018B5 A1 61            [ 1]  789 	cp a,#'a
      0018B7 2B 02            [ 1]  790 	jrmi 4$
      0018B9 A0 20            [ 1]  791 	sub a,#32
      0018BB A1 30            [ 1]  792 4$:	cp a,#'0
      0018BD 2B 30            [ 1]  793 	jrmi 9$
      0018BF A0 30            [ 1]  794 	sub a,#'0
      0018C1 A1 0A            [ 1]  795 	cp a,#10
      0018C3 2B 06            [ 1]  796 	jrmi 5$
      0018C5 A0 07            [ 1]  797 	sub a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0018C7 11 02            [ 1]  798 	cp a,(BASE,sp)
      0018C9 2A 24            [ 1]  799 	jrpl 9$
      0018CB 6B 03            [ 1]  800 5$:	ld (TEMP,sp),a
      0018CD 7B 02            [ 1]  801 	ld a,(BASE,sp)
      0018CF CD 02 2A         [ 4]  802 	call mulu24_8
      0018D2                        803 	_xpush 
      0018D2 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018D6 90 F7            [ 1]    2     ld (y),a 
      0018D8 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018DB 5F               [ 1]  804 	clrw x 
      0018DC 7B 03            [ 1]  805 	ld a,(TEMP,sp)
      0018DE 02               [ 1]  806 	rlwa x 
      0018DF                        807 	_xpush 
      0018DF 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018E3 90 F7            [ 1]    2     ld (y),a 
      0018E5 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018E8 CD 01 6E         [ 4]  808 	call add24 
      0018EB 1E 04            [ 2]  809 	ldw x,(XTEMP,sp)
      0018ED 20 C2            [ 2]  810 	jra 2$
      0018EF 0D 01            [ 1]  811 9$:	tnz (SIGN,sp)
      0018F1 27 03            [ 1]  812     jreq atoi_exit
      0018F3 CD 01 F3         [ 4]  813     call neg24
      0018F6                        814 atoi_exit:
      0018F6                        815 	_xpop 
      0018F6 90 F6            [ 1]    1     ld a,(y)
      0018F8 93               [ 1]    2     ldw x,y 
      0018F9 EE 01            [ 2]    3     ldw x,(1,x)
      0018FB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018FF C7 00 0C         [ 1]  816 	ld acc24,a 
      001902 CF 00 0D         [ 2]  817 	ldw acc16,x  
      001905                        818 	_drop VSIZE
      001905 5B 05            [ 2]    1     addw sp,#VSIZE 
      001907 81               [ 4]  819 	ret
                                    820 
                                    821 
                                    822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    823 ;;   TINY BASIC  operators,
                                    824 ;;   commands and functions 
                                    825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    826 
                                    827 ;---------------------------------
                                    828 ; dictionary search 
                                    829 ; input:
                                    830 ;	X 		dictionary entry point, name field  
                                    831 ;   y		.asciz name to search 
                                    832 ; output:
                                    833 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    834 ;  X		routine address|TK_OP 
                                    835 ;---------------------------------
                           000001   836 	NLEN=1 ; cmd length 
                           000002   837 	XSAVE=2
                           000004   838 	YSAVE=4
                           000005   839 	VSIZE=5 
      001908                        840 search_dict::
      001908                        841 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001908 52 05            [ 2]    1     sub sp,#VSIZE 
      00190A 17 04            [ 2]  842 	ldw (YSAVE,sp),y 
      00190C                        843 search_next:
      00190C 1F 02            [ 2]  844 	ldw (XSAVE,sp),x 
                                    845 ; get name length in dictionary	
      00190E F6               [ 1]  846 	ld a,(x)
      00190F A4 0F            [ 1]  847 	and a,#0xf 
      001911 6B 01            [ 1]  848 	ld (NLEN,sp),a  
      001913 16 04            [ 2]  849 	ldw y,(YSAVE,sp) ; name pointer 
      001915 5C               [ 1]  850 	incw x 
      001916                        851 cp_loop:
      001916 90 F6            [ 1]  852 	ld a,(y)
      001918 27 1B            [ 1]  853 	jreq str_match 
      00191A 0D 01            [ 1]  854 	tnz (NLEN,sp)
      00191C 27 0A            [ 1]  855 	jreq no_match  
      00191E F1               [ 1]  856 	cp a,(x)
      00191F 26 07            [ 1]  857 	jrne no_match 
      001921 90 5C            [ 1]  858 	incw y 
      001923 5C               [ 1]  859 	incw x
      001924 0A 01            [ 1]  860 	dec (NLEN,sp)
      001926 20 EE            [ 2]  861 	jra cp_loop 
      001928                        862 no_match:
      001928 1E 02            [ 2]  863 	ldw x,(XSAVE,sp) 
      00192A 1D 00 02         [ 2]  864 	subw x,#2 ; move X to link field
      00192D 4B 00            [ 1]  865 	push #TK_NONE 
      00192F FE               [ 2]  866 	ldw x,(x) ; next word link 
      001930 84               [ 1]  867 	pop a ; TK_NONE 
      001931 27 1D            [ 1]  868 	jreq search_exit  ; not found  
                                    869 ;try next 
      001933 20 D7            [ 2]  870 	jra search_next
      001935                        871 str_match:
      001935 1E 02            [ 2]  872 	ldw x,(XSAVE,sp)
      001937 F6               [ 1]  873 	ld a,(X)
      001938 6B 01            [ 1]  874 	ld (NLEN,sp),a ; needed to test keyword type  
      00193A A4 0F            [ 1]  875 	and a,#NLEN_MASK 
                                    876 ; move x to procedure address field 	
      00193C 4C               [ 1]  877 	inc a 
      00193D C7 00 0E         [ 1]  878 	ld acc8,a 
      001940 72 5F 00 0D      [ 1]  879 	clr acc16 
      001944 72 BB 00 0D      [ 2]  880 	addw x,acc16 
      001948 FE               [ 2]  881 	ldw x,(x) ; routine address  
                                    882 ;determine keyword type bits 7:4 
      001949 7B 01            [ 1]  883 	ld a,(NLEN,sp)
      00194B A4 F0            [ 1]  884 	and a,#KW_TYPE_MASK 
      00194D 4E               [ 1]  885 	swap a 
      00194E AB 80            [ 1]  886 	add a,#128
      001950                        887 search_exit: 
      001950                        888 	_drop VSIZE 
      001950 5B 05            [ 2]    1     addw sp,#VSIZE 
      001952 81               [ 4]  889 	ret 
                                    890 
                                    891 ;---------------------
                                    892 ; check if next token
                                    893 ;  is of expected type 
                                    894 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    895 ;   A 		 expected token attribute
                                    896 ;  ouput:
                                    897 ;   none     if fail call syntax_error 
                                    898 ;--------------------
      001953                        899 expect:
      001953 88               [ 1]  900 	push a 
      001954 CD 17 9D         [ 4]  901 	call next_token 
      001957 11 01            [ 1]  902 	cp a,(1,sp)
      001959 27 03            [ 1]  903 	jreq 1$
      00195B CC 16 39         [ 2]  904 	jp syntax_error
      00195E 84               [ 1]  905 1$: pop a 
      00195F 81               [ 4]  906 	ret 
                                    907 
                                    908 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    909 ; parse arguments list 
                                    910 ; between ()
                                    911 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001960                        912 func_args:
      001960 A6 06            [ 1]  913 	ld a,#TK_LPAREN 
      001962 CD 19 53         [ 4]  914 	call expect 
                                    915 ; expected to continue in arg_list 
                                    916 ; caller must check for TK_RPAREN 
                                    917 
                                    918 ;-------------------------------
                                    919 ; parse embedded BASIC routines 
                                    920 ; arguments list.
                                    921 ; arg_list::=  expr[','expr]*
                                    922 ; all arguments are of int24_t type
                                    923 ; and pushed on stack 
                                    924 ; input:
                                    925 ;   none
                                    926 ; output:
                                    927 ;   xstack{n}   arguments pushed on xstack
                                    928 ;   A 	number of arguments pushed on xstack  
                                    929 ;--------------------------------
      001965                        930 arg_list:
      001965 4B 00            [ 1]  931 	push #0
      001967 CD 1B C2         [ 4]  932 1$:	call condition 
      00196A 4D               [ 1]  933 	tnz a 
      00196B 27 12            [ 1]  934 	jreq 7$  
      00196D 0C 01            [ 1]  935 	inc (1,sp)
      00196F CD 17 9D         [ 4]  936 	call next_token 
      001972 A1 08            [ 1]  937 	cp a,#TK_COMMA 
      001974 27 F1            [ 1]  938 	jreq 1$ 
      001976 A1 07            [ 1]  939 	cp a,#TK_RPAREN
      001978 27 05            [ 1]  940 	jreq 7$
      00197A                        941 	_unget_token 
      00197A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00197F 84               [ 1]  942 7$:	pop a  
      001980 81               [ 4]  943 	ret 
                                    944 
                                    945 ;--------------------------------
                                    946 ;   BASIC commnands 
                                    947 ;--------------------------------
                                    948 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                    949 ;--------------------------------
                                    950 ;  arithmetic and relational 
                                    951 ;  routines
                                    952 ;  operators precedence
                                    953 ;  highest to lowest
                                    954 ;  operators on same row have 
                                    955 ;  same precedence and are executed
                                    956 ;  from left to right.
                                    957 ;	'*','/','%'
                                    958 ;   '-','+'
                                    959 ;   '=','>','<','>=','<=','<>','><'
                                    960 ;   '<>' and '><' are equivalent for not equal.
                                    961 ;--------------------------------
                                    962 
                                    963 ;---------------------
                                    964 ; return array element
                                    965 ; address from @(expr)
                                    966 ; input:
                                    967 ;   A 		TK_ARRAY
                                    968 ; output:
                                    969 ;	X 		element address 
                                    970 ;----------------------
      001981                        971 get_array_element:
      001981 CD 19 60         [ 4]  972 	call func_args 
      001984 A1 01            [ 1]  973 	cp a,#1
      001986 27 03            [ 1]  974 	jreq 1$
      001988 CC 16 39         [ 2]  975 	jp syntax_error
      00198B                        976 1$: _xpop 
      00198B 90 F6            [ 1]    1     ld a,(y)
      00198D 93               [ 1]    2     ldw x,y 
      00198E EE 01            [ 2]    3     ldw x,(1,x)
      001990 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    977     ; ignore A, index < 65536 in any case 
                                    978 	; check for bounds 
      001994 C3 00 20         [ 2]  979 	cpw x,array_size 
      001997 23 05            [ 2]  980 	jrule 3$
                                    981 ; bounds {1..array_size}	
      001999 A6 0A            [ 1]  982 2$: ld a,#ERR_BAD_VALUE 
      00199B CC 16 3B         [ 2]  983 	jp tb_error 
      00199E 5D               [ 2]  984 3$: tnzw  x
      00199F 27 F8            [ 1]  985 	jreq 2$ 
      0019A1 89               [ 2]  986 	pushw x 
      0019A2 58               [ 2]  987 	sllw x 
      0019A3 72 FB 01         [ 2]  988 	addw x,(1,sp) ; index*size_of(int24)
      0019A6 1F 01            [ 2]  989 	ldw (1,sp),x  
      0019A8 AE 16 90         [ 2]  990 	ldw x,#tib ; array is below tib 
      0019AB 72 F0 01         [ 2]  991 	subw x,(1,sp)
      0019AE                        992 	_drop 2   
      0019AE 5B 02            [ 2]    1     addw sp,#2 
      0019B0 81               [ 4]  993 	ret 
                                    994 
                                    995 
                                    996 ;***********************************
                                    997 ;   expression parse,execute 
                                    998 ;***********************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    999 ;-----------------------------------
                                   1000 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1001 ;			 integer | function |
                                   1002 ;			 '('relation')' 
                                   1003 ; output:
                                   1004 ;   A       token attribute 
                                   1005 ;   xstack  value  
                                   1006 ; ---------------------------------
                           000001  1007 	NEG=1
                           000001  1008 	VSIZE=1
      0019B1                       1009 factor:
      0019B1                       1010 	_vars VSIZE 
      0019B1 52 01            [ 2]    1     sub sp,#VSIZE 
      0019B3 0F 01            [ 1] 1011 	clr (NEG,sp)
      0019B5 CD 17 9D         [ 4] 1012 	call next_token
      0019B8 4D               [ 1] 1013 	tnz a 
      0019B9 26 03            [ 1] 1014 	jrne 1$ 
      0019BB CC 1A 63         [ 2] 1015 	jp 22$ 
      0019BE A1 10            [ 1] 1016 1$:	cp a,#TK_PLUS 
      0019C0 27 06            [ 1] 1017 	jreq 2$
      0019C2 A1 11            [ 1] 1018 	cp a,#TK_MINUS 
      0019C4 26 05            [ 1] 1019 	jrne 4$ 
      0019C6 03 01            [ 1] 1020 	cpl (NEG,sp)
      0019C8                       1021 2$:	
      0019C8 CD 17 9D         [ 4] 1022 	call next_token
      0019CB                       1023 4$:
      0019CB 4D               [ 1] 1024 	tnz a 
      0019CC 26 03            [ 1] 1025 	jrne 41$ 
      0019CE CC 16 39         [ 2] 1026 	jp syntax_error  
      0019D1                       1027 41$:	
      0019D1 A1 81            [ 1] 1028 	cp a,#TK_IFUNC 
      0019D3 26 0C            [ 1] 1029 	jrne 5$ 
      0019D5                       1030 	_get_code_addr 
      0019D5 FE               [ 2]    1         ldw x,(x)
      0019D6 72 5C 00 01      [ 1]    2         inc in 
      0019DA 72 5C 00 01      [ 1]    3         inc in 
      0019DE FD               [ 4] 1031 	call (x); result in A:X  
      0019DF 20 70            [ 2] 1032 	jra 18$ 
      0019E1                       1033 5$:
      0019E1 A1 84            [ 1] 1034 	cp a,#TK_INTGR
      0019E3 26 05            [ 1] 1035 	jrne 6$
      0019E5 CD 17 CF         [ 4] 1036 	call get_int24 ; A:X
      0019E8 20 67            [ 2] 1037 	jra 18$
      0019EA                       1038 6$:
      0019EA A1 05            [ 1] 1039 	cp a,#TK_ARRAY
      0019EC 26 05            [ 1] 1040 	jrne 7$
      0019EE CD 19 81         [ 4] 1041 	call get_array_element
      0019F1 20 07            [ 2] 1042     jra 71$
      0019F3                       1043 7$:
      0019F3 A1 85            [ 1] 1044 	cp a,#TK_VAR 
      0019F5 26 08            [ 1] 1045 	jrne 8$
      0019F7 CD 17 C5         [ 4] 1046 	call get_addr 
      0019FA                       1047 71$: ; put value in A:X
      0019FA F6               [ 1] 1048 	ld a,(x)
      0019FB EE 01            [ 2] 1049 	ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0019FD 20 52            [ 2] 1050 	jra 18$
      0019FF                       1051 8$:
      0019FF A1 03            [ 1] 1052 	cp a,#TK_LABEL 
      001A01 26 1D            [ 1] 1053 	jrne 9$
      001A03 90 89            [ 2] 1054 	pushw y  
      001A05 89               [ 2] 1055 	pushw x 
      001A06 CD 17 B6         [ 4] 1056 	call skip_string
      001A09 85               [ 2] 1057 	popw x  
      001A0A CD 13 59         [ 4] 1058 	call strlen 
      001A0D AB 05            [ 1] 1059 	add a,#REC_XTRA_BYTES
      001A0F CD 1D 6A         [ 4] 1060 	call search_name
      001A12 5D               [ 2] 1061 	tnzw x 
      001A13 26 04            [ 1] 1062 	jrne 82$ 
      001A15 90 85            [ 2] 1063 	popw y 
      001A17 20 30            [ 2] 1064 	jra 16$
      001A19                       1065 82$:
      001A19 90 85            [ 2] 1066 	popw y   
      001A1B CD 1C C4         [ 4] 1067 	call get_value ; in A:X 
      001A1E 20 31            [ 2] 1068 	jra 18$
      001A20                       1069 9$: 
      001A20 A1 82            [ 1] 1070 	cp a,#TK_CFUNC 
      001A22 26 0E            [ 1] 1071 	jrne 12$
      001A24                       1072 	_get_code_addr 
      001A24 FE               [ 2]    1         ldw x,(x)
      001A25 72 5C 00 01      [ 1]    2         inc in 
      001A29 72 5C 00 01      [ 1]    3         inc in 
      001A2D FD               [ 4] 1073 	call(x)
      001A2E 5F               [ 1] 1074 	clrw x 
      001A2F 02               [ 1] 1075 	rlwa x  ; char>int24 in A:X 
      001A30 20 1F            [ 2] 1076 	jra 18$ 	 
      001A32                       1077 12$:			
      001A32 A1 06            [ 1] 1078 	cp a,#TK_LPAREN
      001A34 26 13            [ 1] 1079 	jrne 16$
      001A36 CD 1A A9         [ 4] 1080 	call expression
      001A39 A6 07            [ 1] 1081 	ld a,#TK_RPAREN 
      001A3B CD 19 53         [ 4] 1082 	call expect
      001A3E                       1083 	_xpop 
      001A3E 90 F6            [ 1]    1     ld a,(y)
      001A40 93               [ 1]    2     ldw x,y 
      001A41 EE 01            [ 2]    3     ldw x,(1,x)
      001A43 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A47 20 08            [ 2] 1084 	jra 18$	
      001A49                       1085 16$:
      001A49                       1086 	_unget_token 
      001A49 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A4E 4F               [ 1] 1087 	clr a 
      001A4F 20 12            [ 2] 1088 	jra 22$ 
      001A51                       1089 18$: 
      001A51 0D 01            [ 1] 1090 	tnz (NEG,sp)
      001A53 27 03            [ 1] 1091 	jreq 20$
      001A55 CD 02 05         [ 4] 1092 	call neg_ax   
      001A58                       1093 20$:
      001A58                       1094 	_xpush 
      001A58 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A5C 90 F7            [ 1]    2     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001A5E 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A61 A6 84            [ 1] 1095 	ld a,#TK_INTGR
      001A63                       1096 22$:
      001A63                       1097 	_drop VSIZE
      001A63 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A65 81               [ 4] 1098 	ret
                                   1099 
                                   1100 
                                   1101 ;-----------------------------------
                                   1102 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1103 ; output:
                                   1104 ;   A    	token attribute 
                                   1105 ;	xstack		value 
                                   1106 ;-----------------------------------
                           000001  1107 	MULOP=1
                           000001  1108 	VSIZE=1
      001A66                       1109 term:
      001A66                       1110 	_vars VSIZE
      001A66 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1111 ; first factor 	
      001A68 CD 19 B1         [ 4] 1112 	call factor
      001A6B 4D               [ 1] 1113 	tnz a 
      001A6C 27 38            [ 1] 1114 	jreq term_exit  
      001A6E                       1115 term01:	 ; check for  operator '*'|'/'|'%' 
      001A6E CD 17 9D         [ 4] 1116 	call next_token
      001A71 6B 01            [ 1] 1117 	ld (MULOP,sp),a
      001A73 A4 30            [ 1] 1118 	and a,#TK_GRP_MASK
      001A75 A1 20            [ 1] 1119 	cp a,#TK_GRP_MULT
      001A77 27 09            [ 1] 1120 	jreq 1$
      001A79 A6 84            [ 1] 1121 	ld a,#TK_INTGR
      001A7B                       1122 	_unget_token 
      001A7B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A80 20 24            [ 2] 1123 	jra term_exit 
      001A82                       1124 1$:	; got *|/|%
                                   1125 ;second factor
      001A82 CD 19 B1         [ 4] 1126 	call factor
      001A85 4D               [ 1] 1127 	tnz a 
      001A86 26 03            [ 1] 1128 	jrne 2$ 
      001A88 CC 16 39         [ 2] 1129 	jp syntax_error 
      001A8B                       1130 2$: ; select operation 	
      001A8B 7B 01            [ 1] 1131 	ld a,(MULOP,sp) 
      001A8D A1 20            [ 1] 1132 	cp a,#TK_MULT 
      001A8F 26 05            [ 1] 1133 	jrne 3$
                                   1134 ; '*' operator
      001A91 CD 02 69         [ 4] 1135 	call mul24 
      001A94 20 D8            [ 2] 1136 	jra term01
      001A96 A1 21            [ 1] 1137 3$: cp a,#TK_DIV 
      001A98 26 05            [ 1] 1138 	jrne 4$ 
                                   1139 ; '/' operator	
      001A9A CD 02 F7         [ 4] 1140 	call div24 
      001A9D 20 CF            [ 2] 1141 	jra term01 
      001A9F                       1142 4$: ; '%' operator
      001A9F CD 03 91         [ 4] 1143 	call mod24
      001AA2 20 CA            [ 2] 1144 	jra term01 
      001AA4                       1145 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001AA4 A6 84            [ 1] 1146 	ld a,#TK_INTGR
      001AA6                       1147 term_exit:
      001AA6                       1148 	_drop VSIZE 
      001AA6 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AA8 81               [ 4] 1149 	ret 
                                   1150 
                                   1151 ;-------------------------------
                                   1152 ;  expr ::= term [['+'|'-'] term]*
                                   1153 ;  result range {-32768..32767}
                                   1154 ;  output:
                                   1155 ;   A    token attribute 
                                   1156 ;   xstack	 result    
                                   1157 ;-------------------------------
                           000001  1158 	OP=1 
                           000001  1159 	VSIZE=1 
      001AA9                       1160 expression:
      001AA9                       1161 	_vars VSIZE 
      001AA9 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1162 ; first term 	
      001AAB CD 1A 66         [ 4] 1163 	call term
      001AAE 4D               [ 1] 1164 	tnz a 
      001AAF 27 2D            [ 1] 1165 	jreq 9$
      001AB1                       1166 1$:	; operator '+'|'-'
      001AB1 CD 17 9D         [ 4] 1167 	call next_token
      001AB4 6B 01            [ 1] 1168 	ld (OP,sp),a 
      001AB6 A4 30            [ 1] 1169 	and a,#TK_GRP_MASK
      001AB8 A1 10            [ 1] 1170 	cp a,#TK_GRP_ADD 
      001ABA 27 09            [ 1] 1171 	jreq 2$ 
      001ABC                       1172 	_unget_token 
      001ABC 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AC1 A6 84            [ 1] 1173 	ld a,#TK_INTGR
      001AC3 20 19            [ 2] 1174 	jra 9$ 
      001AC5                       1175 2$: ; second term 
      001AC5 CD 1A 66         [ 4] 1176 	call term
      001AC8 4D               [ 1] 1177 	tnz a 
      001AC9 26 03            [ 1] 1178 	jrne 3$
      001ACB CC 16 39         [ 2] 1179 	jp syntax_error
      001ACE                       1180 3$:
      001ACE 7B 01            [ 1] 1181 	ld a,(OP,sp)
      001AD0 A1 10            [ 1] 1182 	cp a,#TK_PLUS 
      001AD2 26 05            [ 1] 1183 	jrne 4$
                                   1184 ; '+' operator	
      001AD4 CD 01 6E         [ 4] 1185 	call add24
      001AD7 20 D8            [ 2] 1186 	jra 1$ 
      001AD9                       1187 4$:	; '-' operator 
      001AD9 CD 01 8B         [ 4] 1188 	call sub24
      001ADC 20 D3            [ 2] 1189 	jra 1$
      001ADE                       1190 9$:
      001ADE                       1191 	_drop VSIZE 
      001ADE 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AE0 81               [ 4] 1192 	ret 
                                   1193 
                                   1194 ;---------------------------------------------
                                   1195 ; rel ::= expr rel_op expr
                                   1196 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



                                   1197 ;  relation return  integer , zero is false 
                                   1198 ;  output:
                                   1199 ;	 xstack		value  
                                   1200 ;---------------------------------------------
                           000001  1201 	RELOP=1
                           000001  1202 	VSIZE=1 
      001AE1                       1203 relation: 
      001AE1                       1204 	_vars VSIZE
      001AE1 52 01            [ 2]    1     sub sp,#VSIZE 
      001AE3 CD 1A A9         [ 4] 1205 	call expression
      001AE6 4D               [ 1] 1206 	tnz a 
      001AE7 27 54            [ 1] 1207 	jreq 9$ 
                                   1208 ; expect rel_op or leave 
      001AE9 CD 17 9D         [ 4] 1209 	call next_token 
      001AEC 6B 01            [ 1] 1210 	ld (RELOP,sp),a 
      001AEE A4 30            [ 1] 1211 	and a,#TK_GRP_MASK
      001AF0 A1 30            [ 1] 1212 	cp a,#TK_GRP_RELOP 
      001AF2 27 09            [ 1] 1213 	jreq 2$
      001AF4 A6 84            [ 1] 1214 	ld a,#TK_INTGR 
      001AF6                       1215 	_unget_token 
      001AF6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AFB 20 40            [ 2] 1216 	jra 9$ 
      001AFD                       1217 2$:	; expect another expression
      001AFD CD 1A A9         [ 4] 1218 	call expression
      001B00 4D               [ 1] 1219 	tnz a 
      001B01 26 03            [ 1] 1220 	jrne 3$
      001B03 CC 16 39         [ 2] 1221 	jp syntax_error 
      001B06                       1222 3$: 
      001B06 CD 01 A8         [ 4] 1223 	call cp24 
      001B09                       1224 	_xpop  
      001B09 90 F6            [ 1]    1     ld a,(y)
      001B0B 93               [ 1]    2     ldw x,y 
      001B0C EE 01            [ 2]    3     ldw x,(1,x)
      001B0E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B12 4D               [ 1] 1225 	tnz a 
      001B13 2B 08            [ 1] 1226 	jrmi 4$
      001B15 26 0C            [ 1] 1227 	jrne 5$
      001B17 35 02 00 0E      [ 1] 1228 	mov acc8,#2 ; i1==i2
      001B1B 20 0A            [ 2] 1229 	jra 6$ 
      001B1D                       1230 4$: ; i1<i2
      001B1D 35 04 00 0E      [ 1] 1231 	mov acc8,#4 
      001B21 20 04            [ 2] 1232 	jra 6$
      001B23                       1233 5$: ; i1>i2
      001B23 35 01 00 0E      [ 1] 1234 	mov acc8,#1  
      001B27                       1235 6$: ; 0=false, -1=true 
      001B27 5F               [ 1] 1236 	clrw x 
      001B28 C6 00 0E         [ 1] 1237 	ld a, acc8  
      001B2B 14 01            [ 1] 1238 	and a,(RELOP,sp)
      001B2D 27 03            [ 1] 1239 	jreq 7$
      001B2F 53               [ 2] 1240 	cplw x 
      001B30 A6 FF            [ 1] 1241 	ld a,#255 
      001B32                       1242 7$:	_xpush 
      001B32 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B36 90 F7            [ 1]    2     ld (y),a 
      001B38 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B3B A6 84            [ 1] 1243 	ld a,#TK_INTGR
      001B3D                       1244 9$: 
      001B3D                       1245 	_drop VSIZE
      001B3D 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B3F 81               [ 4] 1246 	ret 
                                   1247 
                                   1248 ;-------------------------------------------
                                   1249 ;  AND factor:  [NOT] relation | (condition)
                                   1250 ;  output:
                                   1251 ;     A      TK_INTGR|0
                                   1252 ;-------------------------------------------
                           000001  1253 	NOT_OP=1
      001B40                       1254 and_factor:
      001B40 4B 00            [ 1] 1255 	push #0 
      001B42 CD 17 9D         [ 4] 1256 0$:	call next_token  
      001B45 4D               [ 1] 1257 	tnz a 
      001B46 27 25            [ 1] 1258 	jreq 8$ 
      001B48 A1 87            [ 1] 1259 	cp a,#TK_NOT 
      001B4A 26 04            [ 1] 1260 	jrne 1$ 
      001B4C 03 01            [ 1] 1261 	cpl (NOT_OP,sp)
      001B4E 20 F2            [ 2] 1262 	jra 0$ 
      001B50                       1263 1$:	
      001B50 A1 06            [ 1] 1264 	cp a,#TK_LPAREN 
      001B52 26 0A            [ 1] 1265 	jrne 2$
      001B54 CD 1B C2         [ 4] 1266 	call condition
      001B57 A6 07            [ 1] 1267 	ld a,#TK_RPAREN 
      001B59 CD 19 53         [ 4] 1268 	call expect
      001B5C 20 08            [ 2] 1269 	jra 3$
      001B5E                       1270 2$: _unget_token 
      001B5E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B63 CD 1A E1         [ 4] 1271 	call relation
      001B66                       1272 3$:
      001B66 0D 01            [ 1] 1273 	tnz (NOT_OP,sp)
      001B68 27 03            [ 1] 1274 	jreq 8$ 
      001B6A CD 01 EA         [ 4] 1275 	call cpl24
      001B6D                       1276 8$:
      001B6D                       1277 	_drop 1  
      001B6D 5B 01            [ 2]    1     addw sp,#1 
      001B6F 81               [ 4] 1278     ret 
                                   1279 
                                   1280 
                                   1281 ;--------------------------------------------
                                   1282 ;  AND operator as priority over OR||XOR 
                                   1283 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1284 ;          
                                   1285 ;  output:
                                   1286 ;     A     TK_INTGR|0
                                   1287 ;    xtack   value 
                                   1288 ;--------------------------------------------
      001B70                       1289 and_cond:
      001B70 CD 1B 40         [ 4] 1290 	call and_factor
      001B73 4D               [ 1] 1291 	tnz a 
      001B74 27 4B            [ 1] 1292 	jreq 9$  
      001B76 CD 17 9D         [ 4] 1293 1$: call next_token 
      001B79 4D               [ 1] 1294 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001B7A 27 43            [ 1] 1295 	jreq 6$ 
      001B7C A1 88            [ 1] 1296 	cp a,#TK_AND 
      001B7E 27 07            [ 1] 1297 	jreq 3$
      001B80                       1298 	_unget_token 
      001B80 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B85 20 38            [ 2] 1299 	jra 6$ 
      001B87 CD 1B 40         [ 4] 1300 3$:	call and_factor  
      001B8A 4D               [ 1] 1301 	tnz a 
      001B8B 26 03            [ 1] 1302 	jrne 4$
      001B8D CC 16 39         [ 2] 1303 	jp syntax_error 
      001B90                       1304 4$:	
      001B90                       1305 	_xpop 
      001B90 90 F6            [ 1]    1     ld a,(y)
      001B92 93               [ 1]    2     ldw x,y 
      001B93 EE 01            [ 2]    3     ldw x,(1,x)
      001B95 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B99 C7 00 0C         [ 1] 1306 	ld acc24,a 
      001B9C CF 00 0D         [ 2] 1307 	ldw acc16,x
      001B9F                       1308 	_xpop 
      001B9F 90 F6            [ 1]    1     ld a,(y)
      001BA1 93               [ 1]    2     ldw x,y 
      001BA2 EE 01            [ 2]    3     ldw x,(1,x)
      001BA4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BA8 C4 00 0C         [ 1] 1309 	and a,acc24 
      001BAB 02               [ 1] 1310 	rlwa x 
      001BAC C4 00 0D         [ 1] 1311 	and a,acc16 
      001BAF 02               [ 1] 1312 	rlwa x 
      001BB0 C4 00 0E         [ 1] 1313 	and a,acc8 
      001BB3 02               [ 1] 1314 	rlwa x
      001BB4                       1315 	_xpush
      001BB4 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BB8 90 F7            [ 1]    2     ld (y),a 
      001BBA 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BBD 20 B7            [ 2] 1316 	jra 1$  
      001BBF A6 84            [ 1] 1317 6$: ld a,#TK_INTGR 
      001BC1 81               [ 4] 1318 9$:	ret 	 
                                   1319 
                                   1320 
                                   1321 ;--------------------------------------------
                                   1322 ; condition for IF and UNTIL 
                                   1323 ; operators: OR,XOR 
                                   1324 ; format:  and_cond [ OP and_cond ]* 
                                   1325 ; output:
                                   1326 ;    A        INTGR|0 
                                   1327 ;    xstack   value 
                                   1328 ;--------------------------------------------
                           000001  1329 	ATMP=1
                           000002  1330 	OP=2
                           000002  1331 	VSIZE=2 
      001BC2                       1332 condition:
      001BC2                       1333 	_vars VSIZE 
      001BC2 52 02            [ 2]    1     sub sp,#VSIZE 
      001BC4 CD 1B 70         [ 4] 1334 	call and_cond
      001BC7 4D               [ 1] 1335 	tnz a 
      001BC8 27 69            [ 1] 1336 	jreq 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001BCA CD 17 9D         [ 4] 1337 1$:	call next_token 
      001BCD A1 89            [ 1] 1338 	cp a,#TK_OR 
      001BCF 27 0B            [ 1] 1339 	jreq 2$
      001BD1 A1 8A            [ 1] 1340 	cp a,#TK_XOR
      001BD3 27 07            [ 1] 1341 	jreq 2$ 
      001BD5                       1342 	_unget_token 
      001BD5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BDA 20 55            [ 2] 1343 	jra 8$ 
      001BDC 6B 02            [ 1] 1344 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BDE CD 1B 70         [ 4] 1345 	call and_cond
      001BE1 A1 84            [ 1] 1346 	cp a,#TK_INTGR 
      001BE3 27 03            [ 1] 1347 	jreq 3$
      001BE5 CC 16 39         [ 2] 1348 	jp syntax_error 
      001BE8                       1349 3$:	 
      001BE8                       1350 	_xpop  ; rigth arg 
      001BE8 90 F6            [ 1]    1     ld a,(y)
      001BEA 93               [ 1]    2     ldw x,y 
      001BEB EE 01            [ 2]    3     ldw x,(1,x)
      001BED 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BF1 C7 00 0C         [ 1] 1351 	ld acc24,a 
      001BF4 CF 00 0D         [ 2] 1352 	ldw acc16,x 
      001BF7                       1353 	_xpop  ; left arg  
      001BF7 90 F6            [ 1]    1     ld a,(y)
      001BF9 93               [ 1]    2     ldw x,y 
      001BFA EE 01            [ 2]    3     ldw x,(1,x)
      001BFC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C00 6B 01            [ 1] 1354 	ld (ATMP,sp),a 
      001C02 7B 02            [ 1] 1355 	ld a,(OP,sp)
      001C04 A1 8A            [ 1] 1356 	cp a,#TK_XOR 
      001C06 27 10            [ 1] 1357 	jreq 5$ 
      001C08                       1358 4$: ; A:X OR acc24   
      001C08 7B 01            [ 1] 1359 	ld a,(ATMP,sp)
      001C0A CA 00 0C         [ 1] 1360 	or a,acc24 
      001C0D 02               [ 1] 1361 	rlwa x 
      001C0E CA 00 0D         [ 1] 1362 	or a,acc16 
      001C11 02               [ 1] 1363 	rlwa x 
      001C12 CA 00 0E         [ 1] 1364 	or a,acc8 
      001C15 02               [ 1] 1365 	rlwa x 
      001C16 20 0E            [ 2] 1366 	jra 6$  
      001C18                       1367 5$: ; A:X XOR acc24 
      001C18 7B 01            [ 1] 1368 	ld a,(ATMP,sp)
      001C1A C8 00 0C         [ 1] 1369 	xor a,acc24 
      001C1D 02               [ 1] 1370 	rlwa x 
      001C1E C8 00 0D         [ 1] 1371 	xor a,acc16 
      001C21 02               [ 1] 1372 	rlwa x 
      001C22 C8 00 0E         [ 1] 1373 	xor a,acc8 
      001C25 02               [ 1] 1374 	rlwa x 
      001C26                       1375 6$: _xpush
      001C26 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C2A 90 F7            [ 1]    2     ld (y),a 
      001C2C 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C2F 20 99            [ 2] 1376 	jra 1$ 
      001C31 A6 84            [ 1] 1377 8$:	ld a,#TK_INTGR 
      001C33                       1378 9$:	_drop VSIZE 
      001C33 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C35 81               [ 4] 1379 	ret 
                                   1380 
                                   1381 
                                   1382 ;--------------------------------------------
                                   1383 ; BASIC: HEX 
                                   1384 ; select hexadecimal base for integer print
                                   1385 ;---------------------------------------------
      001C36                       1386 hex_base:
      001C36 35 10 00 0A      [ 1] 1387 	mov base,#16 
      001C3A 81               [ 4] 1388 	ret 
                                   1389 
                                   1390 ;--------------------------------------------
                                   1391 ; BASIC: DEC 
                                   1392 ; select decimal base for integer print
                                   1393 ;---------------------------------------------
      001C3B                       1394 dec_base:
      001C3B 35 0A 00 0A      [ 1] 1395 	mov base,#10
      001C3F 81               [ 4] 1396 	ret 
                                   1397 
                                   1398 ;------------------------
                                   1399 ; BASIC: FREE 
                                   1400 ; return free size in RAM 
                                   1401 ; output:
                                   1402 ;   A:x		size 
                                   1403 ;--------------------------
      001C40                       1404 free:
      001C40 4F               [ 1] 1405 	clr a 
      001C41 AE 16 90         [ 2] 1406 	ldw x,#tib 
      001C44 72 B0 00 32      [ 2] 1407 	subw x,dvar_end 
      001C48 81               [ 4] 1408 	ret 
                                   1409 
                                   1410 ;------------------------------
                                   1411 ; BASIC: SIZE 
                                   1412 ; command that print 
                                   1413 ; program start addres and size 
                                   1414 ;------------------------------
      001C49                       1415 cmd_size:
      001C49 3B 00 0A         [ 1] 1416 	push base 
      001C4C AE 1E A2         [ 2] 1417 	ldw x,#PROG_ADDR 
      001C4F CD 09 3B         [ 4] 1418 	call puts 
      001C52 CE 00 1B         [ 2] 1419 	ldw x,txtbgn     
      001C55 35 10 00 0A      [ 1] 1420 	mov base,#16 
      001C59 CD 17 E5         [ 4] 1421 	call prt_i16
      001C5C 32 00 0A         [ 1] 1422 	pop base 
      001C5F AE 1E B4         [ 2] 1423 	ldw x,#PROG_SIZE 
      001C62 CD 09 3B         [ 4] 1424 	call puts 
      001C65 CE 00 1D         [ 2] 1425 	ldw x,txtend 
      001C68 72 B0 00 1B      [ 2] 1426 	subw x,txtbgn 
      001C6C CD 17 E5         [ 4] 1427 	call prt_i16
      001C6F AE 1E C5         [ 2] 1428 	ldw x,#STR_BYTES 
      001C72 CD 09 3B         [ 4] 1429 	call puts  
      001C75 81               [ 4] 1430 	ret 
                                   1431 
                                   1432 
                                   1433 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1434 ; BASIC: UBOUND  
                                   1435 ; return array variable size 
                                   1436 ; and set 'array_size' variable 
                                   1437 ; output:
                                   1438 ;   A:X 	array_size
                                   1439 ;--------------------------
      001C76                       1440 ubound:
      001C76 CD 1C 40         [ 4] 1441 	call free 
      001C79 A6 03            [ 1] 1442 	ld a,#CELL_SIZE 
      001C7B 62               [ 2] 1443 	div x,a 
      001C7C CF 00 20         [ 2] 1444 	ldw array_size,x
      001C7F 4F               [ 1] 1445 	clr a 
      001C80 81               [ 4] 1446 	ret 
                                   1447 
                                   1448 ;-----------------------------
                                   1449 ; BASIC: LET var=expr 
                                   1450 ; variable assignement 
                                   1451 ; output:
                                   1452 ;   A 		TK_NONE 
                                   1453 ;-----------------------------
      001C81                       1454 let::
      001C81 CD 17 9D         [ 4] 1455 	call next_token 
      001C84 A1 85            [ 1] 1456 	cp a,#TK_VAR 
      001C86 27 0C            [ 1] 1457 	jreq let_var
      001C88 A1 05            [ 1] 1458 	cp a,#TK_ARRAY 
      001C8A 27 03            [ 1] 1459 	jreq  let_array
      001C8C CC 16 39         [ 2] 1460 	jp syntax_error
      001C8F                       1461 let_array:
      001C8F CD 19 81         [ 4] 1462 	call get_array_element
      001C92 20 03            [ 2] 1463 	jra let_eval 
      001C94                       1464 let_var:
      001C94 CD 17 C5         [ 4] 1465 	call get_addr
      001C97                       1466 let_eval:
      001C97 CF 00 19         [ 2] 1467 	ldw ptr16,x  ; variable address 
      001C9A CD 17 9D         [ 4] 1468 	call next_token 
      001C9D A1 32            [ 1] 1469 	cp a,#TK_EQUAL
      001C9F 27 03            [ 1] 1470 	jreq 1$
      001CA1 CC 16 39         [ 2] 1471 	jp syntax_error
      001CA4                       1472 1$:	
      001CA4 CD 1B C2         [ 4] 1473 	call condition   
      001CA7 A1 84            [ 1] 1474 	cp a,#TK_INTGR 
      001CA9 27 03            [ 1] 1475 	jreq 2$
      001CAB CC 16 39         [ 2] 1476 	jp syntax_error
      001CAE                       1477 2$:	
      001CAE                       1478 	_xpop ; value 
      001CAE 90 F6            [ 1]    1     ld a,(y)
      001CB0 93               [ 1]    2     ldw x,y 
      001CB1 EE 01            [ 2]    3     ldw x,(1,x)
      001CB3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CB7                       1479 3$:
      001CB7 72 C7 00 19      [ 4] 1480 	ld [ptr16],a
      001CBB 72 5C 00 1A      [ 1] 1481 	inc ptr8  
      001CBF 72 CF 00 19      [ 5] 1482 	ldw [ptr16],x 
      001CC3 81               [ 4] 1483 	ret 
                                   1484 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                   1485 
                                   1486 ;--------------------------
                                   1487 ; return constant/dvar value 
                                   1488 ; from it's record address
                                   1489 ; input:
                                   1490 ;	X	*const record 
                                   1491 ; output:
                                   1492 ;   A:X   const  value
                                   1493 ;--------------------------
      001CC4                       1494 get_value: ; -- i 
      001CC4 F6               [ 1] 1495 	ld a,(x) ; record size 
      001CC5 A4 0F            [ 1] 1496 	and a,#NAME_MAX_LEN
      001CC7 A0 03            [ 1] 1497 	sub a,#CELL_SIZE ; * value 
      001CC9 88               [ 1] 1498 	push a 
      001CCA 4B 00            [ 1] 1499 	push #0 
      001CCC 72 FB 01         [ 2] 1500 	addw x,(1,sp)
      001CCF F6               [ 1] 1501 	ld a,(x)
      001CD0 EE 01            [ 2] 1502 	ldw x,(1,x)
      001CD2                       1503 	_drop 2
      001CD2 5B 02            [ 2]    1     addw sp,#2 
      001CD4 81               [ 4] 1504 	ret 
                                   1505 
                                   1506 
                                   1507 ;--------------------------
                                   1508 ; list constants in EEPROM 
                                   1509 ; call when using LIST \C 
                                   1510 ;-------------------------
                           000001  1511 	COUNT=1
                           000003  1512 	YTEMP=3
                           000004  1513 	VSIZE=4 
      001CD5                       1514 list_const:
      001CD5 90 89            [ 2] 1515 	pushw y 
      001CD7                       1516 	_vars 4 
      001CD7 52 04            [ 2]    1     sub sp,#4 
      001CD9 5F               [ 1] 1517 	clrw x 
      001CDA 1F 01            [ 2] 1518 	ldw (COUNT,sp),x  
      001CDC 90 AE 40 00      [ 2] 1519 	ldw Y,#EEPROM_BASE 
      001CE0 90 C3 00 24      [ 2] 1520 1$:	cpw y,free_eeprom 
      001CE4 24 35            [ 1] 1521 	jruge 9$
      001CE6 17 03            [ 2] 1522     ldw (YTEMP,sp),y 
      001CE8 93               [ 1] 1523 	ldw x,y
      001CE9 5C               [ 1] 1524 	incw x 
      001CEA CD 09 3B         [ 4] 1525 	call puts  
      001CED A6 3D            [ 1] 1526 	ld a,#'= 
      001CEF CD 08 DE         [ 4] 1527 	call putc 
      001CF2 1E 03            [ 2] 1528 	ldw x,(YTEMP,sp)
      001CF4 CD 1C C4         [ 4] 1529 	call get_value 
      001CF7 C7 00 0C         [ 1] 1530 	ld acc24,a 
      001CFA CF 00 0D         [ 2] 1531 	ldw acc16,x 
      001CFD CD 17 FC         [ 4] 1532 	call prt_acc24
      001D00 A6 0D            [ 1] 1533 	ld a,#CR 
      001D02 CD 08 DE         [ 4] 1534 	call putc 
      001D05 1E 01            [ 2] 1535 	ldw x,(COUNT,sp)
      001D07 5C               [ 1] 1536 	incw x 
      001D08 1F 01            [ 2] 1537 	ldw (COUNT,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D0A 72 5F 00 0D      [ 1] 1538 	clr acc16 
      001D0E 16 03            [ 2] 1539 	ldw y,(YTEMP,sp)
      001D10 90 F6            [ 1] 1540 	ld a,(y)
      001D12 C7 00 0E         [ 1] 1541 	ld acc8,a
      001D15 72 B9 00 0D      [ 2] 1542 	addw y,acc16 
      001D19 20 C5            [ 2] 1543 	jra 1$ 
      001D1B                       1544 9$:	
      001D1B 1E 01            [ 2] 1545 	ldw x,(COUNT,sp)
      001D1D CD 17 E5         [ 4] 1546 	call prt_i16 
      001D20 AE 1D 2B         [ 2] 1547 	ldw x,#CONST_COUNT 
      001D23 CD 09 3B         [ 4] 1548 	call puts 
      001D26                       1549 	_drop VSIZE 
      001D26 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D28 90 85            [ 2] 1550 	popw y 
      001D2A 81               [ 4] 1551 	ret 
                                   1552 
      001D2B 20 63 6F 6E 73 74 61  1553 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1554 
                                   1555 
                                   1556 ;--------------------------
                                   1557 ; BASIC: EEFREE 
                                   1558 ; eeprom_free 
                                   1559 ; search end of data  
                                   1560 ; in EEPROM 
                                   1561 ; input:
                                   1562 ;    none 
                                   1563 ; output:
                                   1564 ;    A:X     address free
                                   1565 ;-------------------------
      001D41                       1566 func_eefree:
      001D41 AE 40 00         [ 2] 1567 	ldw x,#EEPROM_BASE 
      001D44 35 08 00 0E      [ 1] 1568 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D48 A3 47 F8         [ 2] 1569     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D4B 24 17            [ 1] 1570 	jruge 8$ ; no free space 
      001D4D F6               [ 1] 1571 2$: ld a,(x)
      001D4E 26 0C            [ 1] 1572 	jrne 3$
      001D50 5C               [ 1] 1573 	incw x 
      001D51 72 5A 00 0E      [ 1] 1574 	dec acc8 
      001D55 26 F6            [ 1] 1575 	jrne 2$
      001D57 1D 00 08         [ 2] 1576 	subw x,#8 
      001D5A 20 09            [ 2] 1577 	jra 9$  
      001D5C F6               [ 1] 1578 3$: ld a,(x)
      001D5D 5C               [ 1] 1579 	incw x
      001D5E 4D               [ 1] 1580 	tnz a  
      001D5F 26 FB            [ 1] 1581 	jrne 3$
      001D61 5A               [ 2] 1582 	decw x   
      001D62 20 E0            [ 2] 1583 	jra 1$ 
      001D64 5F               [ 1] 1584 8$: clrw x ; no free space 
      001D65 4F               [ 1] 1585 9$: clr a 
      001D66 CF 00 24         [ 2] 1586 	ldw free_eeprom,x ; save in system variable 
      001D69 81               [ 4] 1587 	ret 
                                   1588 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



                           000005  1589 REC_XTRA_BYTES=5 
                                   1590 ;--------------------------
                                   1591 ; search constant/dim_var name 
                                   1592 ; format of record  
                                   1593 ;   .byte record length 
                                   1594 ;         = strlen(name)+5 
                                   1595 ;   .asciz name (variable length)
                                   1596 ;   .int24 value (3 bytes )
                                   1597 ; a constant record use 7+ bytes
                                   1598 ; constants are saved in EEPROM  
                                   1599 ; input:
                                   1600 ;    A     record_len 
                                   1601 ;    X     *name
                                   1602 ; output:
                                   1603 ;    X     address|0
                                   1604 ; use:
                                   1605 ;   A,Y, acc16 
                                   1606 ;-------------------------
                           000001  1607 	NAMEPTR=1 ; target name pointer 
                           000003  1608 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1609 	RECLEN=5  ; record length of target
                           000007  1610 	LIMIT=7   ; search area limit 
                           000008  1611 	VSIZE=8  
      001D6A                       1612 search_name:
      001D6A 90 89            [ 2] 1613 	pushw y 
      001D6C                       1614 	_vars VSIZE
      001D6C 52 08            [ 2]    1     sub sp,#VSIZE 
      001D6E 72 5F 00 0D      [ 1] 1615 	clr acc16 
      001D72 6B 05            [ 1] 1616 	ld (RECLEN,sp),a    
      001D74 1F 01            [ 2] 1617 	ldw (NAMEPTR,sp),x
      001D76 CE 00 32         [ 2] 1618 	ldw x,dvar_end 
      001D79 1F 07            [ 2] 1619 	ldw (LIMIT,sp),x 
      001D7B 90 CE 00 30      [ 2] 1620 	ldw y,dvar_bgn
      001D7F 17 03            [ 2] 1621 1$:	ldw (WLKPTR,sp),y
      001D81 93               [ 1] 1622 	ldw x,y 
      001D82 13 07            [ 2] 1623 	cpw x, (LIMIT,sp) 
      001D84 24 20            [ 1] 1624 	jruge 7$ ; no match found 
      001D86 90 F6            [ 1] 1625 	ld a,(y)
      001D88 A4 0F            [ 1] 1626 	and a,#NAME_MAX_LEN
      001D8A 11 05            [ 1] 1627 	cp a,(RECLEN,sp)
      001D8C 26 09            [ 1] 1628 	jrne 2$ 
      001D8E 90 5C            [ 1] 1629 	incw y 
      001D90 1E 01            [ 2] 1630 	ldw x,(NAMEPTR,sp)
      001D92 CD 13 64         [ 4] 1631 	call strcmp
      001D95 26 13            [ 1] 1632 	jrne 8$ ; match found 
      001D97                       1633 2$: ; skip this one 	
      001D97 16 03            [ 2] 1634 	ldW Y,(WLKPTR,sp)
      001D99 90 F6            [ 1] 1635 	ld a,(y)
      001D9B A4 0F            [ 1] 1636 	and a,#NAME_MAX_LEN 
      001D9D C7 00 0E         [ 1] 1637 	ld acc8,a 
      001DA0 72 B9 00 0D      [ 2] 1638 	addw y,acc16 
      001DA4 20 D9            [ 2] 1639 	jra 1$  
      001DA6                       1640 7$: ; no match found 
      001DA6 0F 03            [ 1] 1641 	clr (WLKPTR,sp)
      001DA8 0F 04            [ 1] 1642 	clr (WLKPTR+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001DAA                       1643 8$: ; match found 
      001DAA 1E 03            [ 2] 1644 	ldw x,(WLKPTR,sp) ; record address 
      001DAC                       1645 9$:	_DROP VSIZE
      001DAC 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DAE 90 85            [ 2] 1646 	popw y 
      001DB0 81               [ 4] 1647 	 ret 
                                   1648 
                                   1649 ;--------------------------------------------
                                   1650 ; BASIC: CONST name=value [, name=value]*
                                   1651 ; define constant(s) saved in EEPROM
                                   1652 ; share most of his code with cmd_dim 
                                   1653 ;--------------------------------------------
                           000001  1654 	VAR_NAME=1 
                           000003  1655 	REC_LEN=3
                           000005  1656 	RONLY=5
                           000005  1657 	VSIZE=5
      001DB1                       1658 cmd_const:
      001DB1 72 00 00 22 05   [ 2] 1659 	btjt flags,#FRUN,0$
      001DB6 A6 06            [ 1] 1660 	ld a,#ERR_RUN_ONLY
      001DB8 CC 16 3B         [ 2] 1661 	jp tb_error 
      001DBB                       1662 0$: 
      001DBB                       1663 	_vars VSIZE 
      001DBB 52 05            [ 2]    1     sub sp,#VSIZE 
      001DBD A6 80            [ 1] 1664 	ld a,#128 
      001DBF 6B 05            [ 1] 1665 	ld (RONLY,sp),a 
      001DC1 0F 03            [ 1] 1666 	clr (REC_LEN,sp)
      001DC3 20 10            [ 2] 1667 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1668 
                                   1669 ;---------------------------------
                                   1670 ; BASIC: DIM var_name [var_name]* 
                                   1671 ; create named variables at end 
                                   1672 ; of BASIC program. 
                                   1673 ; These variables are initialized 
                                   1674 ; to 0. 
                                   1675 ; record format same ast CONST 
                                   1676 ; but r/w because stored in RAM 
                                   1677 ;---------------------------------
      001DC5                       1678 cmd_dim:
      001DC5 72 00 00 22 05   [ 2] 1679 	btjt flags,#FRUN,cmd_dim1
      001DCA A6 06            [ 1] 1680 	ld a,#ERR_RUN_ONLY
      001DCC CC 16 3B         [ 2] 1681 	jp tb_error 
      001DCF                       1682 cmd_dim1:	
      001DCF                       1683 	_vars VSIZE
      001DCF 52 05            [ 2]    1     sub sp,#VSIZE 
      001DD1 0F 03            [ 1] 1684 	clr (REC_LEN,sp )
      001DD3 0F 05            [ 1] 1685 	clr (RONLY,sp)
      001DD5                       1686 cmd_dim2: 
      001DD5 CD 17 9D         [ 4] 1687 0$:	call next_token 
      001DD8 A1 03            [ 1] 1688 	cp a,#TK_LABEL  
      001DDA 27 03            [ 1] 1689 	jreq 1$ 
      001DDC CC 16 39         [ 2] 1690 	jp syntax_error 
      001DDF 1F 01            [ 2] 1691 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001DE1 CD 13 59         [ 4] 1692 	call strlen
      001DE4 AB 05            [ 1] 1693 	add a,#REC_XTRA_BYTES
      001DE6 6B 04            [ 1] 1694 	ld (REC_LEN+1,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001DE8 CD 17 B6         [ 4] 1695 	call skip_string 
      001DEB 7B 04            [ 1] 1696 	ld a,(REC_LEN+1,sp)
      001DED 1E 01            [ 2] 1697 	ldw x,(VAR_NAME,sp) 
      001DEF CD 1D 6A         [ 4] 1698 	call search_name  
      001DF2 5D               [ 2] 1699 	tnzw x 
      001DF3 27 05            [ 1] 1700 	jreq 2$
      001DF5 A6 08            [ 1] 1701 	ld a,#ERR_DUPLICATE
      001DF7 CC 16 3B         [ 2] 1702 	jp tb_error  
      001DFA CE 00 32         [ 2] 1703 2$:	ldw x,dvar_end 
      001DFD 7B 04            [ 1] 1704 	ld a,(REC_LEN+1,sp)
      001DFF 1A 05            [ 1] 1705 	or a,(RONLY,sp)
      001E01 F7               [ 1] 1706 	ld (x),a 
      001E02 5C               [ 1] 1707 	incw x 
      001E03 90 89            [ 2] 1708 	pushw y 
      001E05 16 03            [ 2] 1709 	ldw y,(VAR_NAME+2,sp)
      001E07 CD 13 75         [ 4] 1710 	call strcpy
      001E0A 90 85            [ 2] 1711 	popw y 
      001E0C 5A               [ 2] 1712 	decw x
      001E0D 72 FB 03         [ 2] 1713 	addw x,(REC_LEN,sp)
      001E10 CF 00 32         [ 2] 1714 	ldw dvar_end,x 
      001E13 1D 00 03         [ 2] 1715 	subw x,#CELL_SIZE  
      001E16 7F               [ 1] 1716 	clr (x)
      001E17 6F 01            [ 1] 1717 	clr (1,x)  
      001E19 6F 02            [ 1] 1718 	clr (2,x)
      001E1B CD 17 9D         [ 4] 1719 4$: call next_token 
      001E1E A1 08            [ 1] 1720 	cp a,#TK_COMMA 
      001E20 27 B3            [ 1] 1721 	jreq 0$ 
      001E22 A1 32            [ 1] 1722 	cp a,#TK_EQUAL 
      001E24 26 2A            [ 1] 1723 	jrne 8$
                                   1724 ; initialize variable 
      001E26 CD 1B C2         [ 4] 1725 	call condition 
      001E29 A1 84            [ 1] 1726 	cp a,#TK_INTGR
      001E2B 27 03            [ 1] 1727 	jreq 5$
      001E2D CC 16 39         [ 2] 1728 	jp syntax_error
      001E30 CE 00 32         [ 2] 1729 5$: ldw x,dvar_end 
      001E33 1D 00 03         [ 2] 1730 	subw x,#CELL_SIZE 
      001E36 CF 00 19         [ 2] 1731 	ldw ptr16,x 
      001E39                       1732 	_xpop 
      001E39 90 F6            [ 1]    1     ld a,(y)
      001E3B 93               [ 1]    2     ldw x,y 
      001E3C EE 01            [ 2]    3     ldw x,(1,x)
      001E3E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E42 72 C7 00 19      [ 4] 1733 	ld [ptr16],a 
      001E46 72 5C 00 1A      [ 1] 1734 	inc ptr8 
      001E4A 72 CF 00 19      [ 5] 1735 	ldw [ptr16],x 
      001E4E 20 CB            [ 2] 1736 	jra 4$ 
      001E50                       1737 8$:	
      001E50                       1738 	_unget_token 	
      001E50 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E55                       1739 	_drop VSIZE 
      001E55 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E57 CD 1C 76         [ 4] 1740 	call ubound 
      001E5A 81               [ 4] 1741 	ret 
                                   1742 
                                   1743 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



                                   1744 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1745 ; return program size 
                                   1746 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E5B                       1747 prog_size:
      001E5B CE 00 1D         [ 2] 1748 	ldw x,txtend 
      001E5E 72 B0 00 1B      [ 2] 1749 	subw x,txtbgn 
      001E62 81               [ 4] 1750 	ret 
                                   1751 
                                   1752 ;----------------------------
                                   1753 ; print program information 
                                   1754 ;---------------------------
      001E63                       1755 program_info: 
      001E63 AE 1E A2         [ 2] 1756 	ldw x,#PROG_ADDR 
      001E66 CD 09 3B         [ 4] 1757 	call puts 
      001E69 CE 00 1B         [ 2] 1758 	ldw x,txtbgn 
      001E6C 35 10 00 0A      [ 1] 1759 	mov base,#16 
      001E70 CD 17 E5         [ 4] 1760 	call prt_i16
      001E73 35 0A 00 0A      [ 1] 1761 	mov base,#10  
      001E77 AE 1E B4         [ 2] 1762 	ldw x,#PROG_SIZE
      001E7A CD 09 3B         [ 4] 1763 	call puts 
      001E7D CD 1E 5B         [ 4] 1764 	call prog_size 
      001E80 CD 17 E5         [ 4] 1765 	call prt_i16 
      001E83 AE 1E C5         [ 2] 1766 	ldw x,#STR_BYTES 
      001E86 CD 09 3B         [ 4] 1767 	call puts
      001E89 CE 00 1B         [ 2] 1768 	ldw x,txtbgn
      001E8C A3 36 04         [ 2] 1769 	cpw x,#app 
      001E8F 25 05            [ 1] 1770 	jrult 2$
      001E91 AE 1E CC         [ 2] 1771 	ldw x,#FLASH_MEM 
      001E94 20 03            [ 2] 1772 	jra 3$
      001E96 AE 1E DD         [ 2] 1773 2$: ldw x,#RAM_MEM 	 
      001E99 CD 09 3B         [ 4] 1774 3$:	call puts 
      001E9C A6 0D            [ 1] 1775 	ld a,#CR 
      001E9E CD 08 DE         [ 4] 1776 	call putc
      001EA1 81               [ 4] 1777 	ret 
                                   1778 
      001EA2 70 72 6F 67 72 61 6D  1779 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EB4 2C 20 70 72 6F 67 72  1780 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EC5 20 62 79 74 65 73 00  1781 STR_BYTES: .asciz " bytes" 
      001ECC 20 69 6E 20 46 4C 41  1782 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001EDD 20 69 6E 20 52 41 4D  1783 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1784 
                                   1785 
                                   1786 ;----------------------------
                                   1787 ; BASIC: LIST [[start][,end]]
                                   1788 ; list program lines 
                                   1789 ; form start to end 
                                   1790 ; if empty argument list then 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1791 ; list all.
                                   1792 ;----------------------------
                           000001  1793 	FIRST=1
                           000003  1794 	LAST=3 
                           000005  1795 	LN_PTR=5
                           000006  1796 	VSIZE=6 
      001EEC                       1797 list:
      001EEC 72 01 00 22 05   [ 2] 1798 	btjf flags,#FRUN,0$
      001EF1 A6 07            [ 1] 1799 	ld a,#ERR_CMD_ONLY
      001EF3 CC 16 3B         [ 2] 1800 	jp tb_error
      001EF6                       1801 0$:	 
      001EF6 CD 17 9D         [ 4] 1802 	call next_token 
      001EF9 A1 04            [ 1] 1803 	cp a,#TK_CHAR 
      001EFB 26 10            [ 1] 1804 	jrne 2$
      001EFD CD 17 DF         [ 4] 1805 	call get_char 
      001F00 A4 DF            [ 1] 1806 	and a,#0xDF 
      001F02 A1 43            [ 1] 1807 	cp a,#'C 
      001F04 26 04            [ 1] 1808 	jrne 1$
      001F06 CD 1C D5         [ 4] 1809 	call list_const
      001F09 81               [ 4] 1810 	ret 
      001F0A CC 16 39         [ 2] 1811 1$: jp syntax_error 
      001F0D                       1812 2$:	_unget_token 
      001F0D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F12 CD 1E 5B         [ 4] 1813 	call prog_size 
      001F15 22 01            [ 1] 1814 	jrugt 3$
      001F17 81               [ 4] 1815 	ret 
      001F18                       1816 3$: _vars VSIZE
      001F18 52 06            [ 2]    1     sub sp,#VSIZE 
      001F1A CE 00 1B         [ 2] 1817 	ldw x,txtbgn 
      001F1D 1F 05            [ 2] 1818 	ldw (LN_PTR,sp),x 
      001F1F FE               [ 2] 1819 	ldw x,(x) 
      001F20 1F 01            [ 2] 1820 	ldw (FIRST,sp),x ; list from first line 
      001F22 AE 7F FF         [ 2] 1821 	ldw x,#MAX_LINENO ; biggest line number 
      001F25 1F 03            [ 2] 1822 	ldw (LAST,sp),x 
      001F27 CD 19 65         [ 4] 1823 	call arg_list
      001F2A 4D               [ 1] 1824 	tnz a
      001F2B 27 31            [ 1] 1825 	jreq list_loop 
      001F2D A1 02            [ 1] 1826 	cp a,#2 
      001F2F 27 07            [ 1] 1827 	jreq 4$
      001F31 A1 01            [ 1] 1828 	cp a,#1 
      001F33 27 06            [ 1] 1829 	jreq first_line 
      001F35 CC 16 39         [ 2] 1830 	jp syntax_error 
      001F38 85               [ 2] 1831 4$:	popw x 
      001F39 1F 05            [ 2] 1832 	ldw (LAST+2,sp),x 
      001F3B                       1833 first_line:
      001F3B 85               [ 2] 1834 	popw x
      001F3C 1F 01            [ 2] 1835 	ldw (FIRST,sp),x 
      001F3E                       1836 lines_skip:
      001F3E CE 00 1B         [ 2] 1837 	ldw x,txtbgn
      001F41 1F 05            [ 2] 1838 2$:	ldw (LN_PTR,sp),x 
      001F43 C3 00 1D         [ 2] 1839 	cpw x,txtend 
      001F46 2A 38            [ 1] 1840 	jrpl list_exit 
      001F48 FE               [ 2] 1841 	ldw x,(x) ;line# 
      001F49 13 01            [ 2] 1842 	cpw x,(FIRST,sp)
      001F4B 2A 11            [ 1] 1843 	jrpl list_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F4D 1E 05            [ 2] 1844 	ldw x,(LN_PTR,sp) 
      001F4F E6 02            [ 1] 1845 	ld a,(2,x)
      001F51 C7 00 0E         [ 1] 1846 	ld acc8,a 
      001F54 72 5F 00 0D      [ 1] 1847 	clr acc16 
      001F58 72 BB 00 0D      [ 2] 1848 	addw x,acc16
      001F5C 20 E3            [ 2] 1849 	jra 2$ 
                                   1850 ; print loop
      001F5E                       1851 list_loop:
      001F5E 1E 05            [ 2] 1852 	ldw x,(LN_PTR,sp)
      001F60 E6 02            [ 1] 1853 	ld a,(2,x) 
      001F62 CD 1F D5         [ 4] 1854 	call prt_basic_line
      001F65 1E 05            [ 2] 1855 	ldw x,(LN_PTR,sp)
      001F67 E6 02            [ 1] 1856 	ld a,(2,x)
      001F69 C7 00 0E         [ 1] 1857 	ld acc8,a 
      001F6C 72 5F 00 0D      [ 1] 1858 	clr acc16 
      001F70 72 BB 00 0D      [ 2] 1859 	addw x,acc16
      001F74 C3 00 1D         [ 2] 1860 	cpw x,txtend 
      001F77 2A 07            [ 1] 1861 	jrpl list_exit
      001F79 1F 05            [ 2] 1862 	ldw (LN_PTR,sp),x
      001F7B FE               [ 2] 1863 	ldw x,(x)
      001F7C 13 03            [ 2] 1864 	cpw x,(LAST,sp)  
      001F7E 2F DE            [ 1] 1865 	jrslt list_loop
      001F80                       1866 list_exit:
      001F80 55 00 03 00 01   [ 1] 1867 	mov in,count 
      001F85 AE 16 E0         [ 2] 1868 	ldw x,#pad 
      001F88 CF 00 04         [ 2] 1869 	ldw basicptr,x 
      001F8B                       1870 	_drop VSIZE 
      001F8B 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F8D CD 1E 63         [ 4] 1871 	call program_info 
      001F90 81               [ 4] 1872 	ret
                                   1873 
                                   1874 
                                   1875 ;--------------------------
                                   1876 ; BASIC: EDIT 
                                   1877 ;  copy program in FLASH 
                                   1878 ;  to RAM for edition 
                                   1879 ;-------------------------
      001F91                       1880 edit:
      001F91 CD 27 E1         [ 4] 1881 	call qsign 
      001F94 27 07            [ 1] 1882 	jreq 1$ 
      001F96 AE 1F BE         [ 2] 1883 	ldw x,#NOT_SAVED 
      001F99 CD 09 3B         [ 4] 1884 	call puts 
      001F9C 81               [ 4] 1885 	ret 
      001F9D                       1886 1$: 
      001F9D 90 AE 36 00      [ 2] 1887 	ldw y,#app_sign ; source address 
      001FA1 CE 36 02         [ 2] 1888     ldw x,app_size  
      001FA4 1C 00 04         [ 2] 1889 	addw x,#4 
      001FA7 CF 00 0D         [ 2] 1890 	ldw acc16,x  ; bytes to copy 
      001FAA AE 00 8C         [ 2] 1891 	ldw x,#rsign ; destination address 
      001FAD CD 13 85         [ 4] 1892 	call move  
      001FB0 AE 00 90         [ 2] 1893 	ldw x,#free_ram 
      001FB3 CF 00 1B         [ 2] 1894 	ldw txtbgn,x 
      001FB6 72 BB 00 8E      [ 2] 1895 	addw x,rsize  
      001FBA CF 00 1D         [ 2] 1896 	ldw txtend,x 
      001FBD 81               [ 4] 1897 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1898 
      001FBE 4E 6F 20 61 70 70 6C  1899 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1900 
                                   1901 
                                   1902 ;--------------------------
                                   1903 ; decompile line from token list
                                   1904 ; and print it. 
                                   1905 ; input:
                                   1906 ;   A       stop at this position 
                                   1907 ;   X 		pointer at line
                                   1908 ; output:
                                   1909 ;   none 
                                   1910 ;--------------------------	
      001FD5                       1911 prt_basic_line:
      001FD5 90 89            [ 2] 1912 	pushw y 
      001FD7 C7 00 03         [ 1] 1913 	ld count,a 
      001FDA E6 02            [ 1] 1914 	ld a,(2,x)
      001FDC C1 00 03         [ 1] 1915 	cp a,count 
      001FDF 2A 03            [ 1] 1916 	jrpl 1$ 
      001FE1 C7 00 03         [ 1] 1917 	ld count,a 
      001FE4 CF 00 04         [ 2] 1918 1$:	ldw basicptr,x 
      001FE7 90 AE 16 90      [ 2] 1919 	ldw y,#tib  
      001FEB CD 11 75         [ 4] 1920 	call decompile 
      001FEE CD 09 3B         [ 4] 1921 	call puts 
      001FF1 A6 0D            [ 1] 1922 	ld a,#CR 
      001FF3 CD 08 DE         [ 4] 1923 	call putc 
      001FF6 90 85            [ 2] 1924 	popw y 
      001FF8 81               [ 4] 1925 	ret 
                                   1926 
                                   1927 
                                   1928 ;---------------------------------
                                   1929 ; BASIC: PRINT|? arg_list 
                                   1930 ; print values from argument list
                                   1931 ;----------------------------------
                           000001  1932 	CCOMMA=1
                           000001  1933 	VSIZE=1
      001FF9                       1934 print:
      001FF9                       1935 	_vars VSIZE 
      001FF9 52 01            [ 2]    1     sub sp,#VSIZE 
      001FFB                       1936 reset_comma:
      001FFB 0F 01            [ 1] 1937 	clr (CCOMMA,sp)
      001FFD                       1938 prt_loop:
      001FFD CD 17 9D         [ 4] 1939 	call next_token
      002000 A1 02            [ 1] 1940 	cp a,#CMD_END 
      002002 25 08            [ 1] 1941 	jrult 0$
      002004 A1 0A            [ 1] 1942 	cp a,#TK_COLON 
      002006 27 04            [ 1] 1943 	jreq 0$
      002008 A1 80            [ 1] 1944 	cp a,#TK_CMD
      00200A 26 07            [ 1] 1945 	jrne 10$
      00200C                       1946 0$:
      00200C                       1947 	_unget_token 
      00200C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002011 20 63            [ 2] 1948 	jra 8$ 
      002013                       1949 10$:	
      002013 A1 02            [ 1] 1950 	cp a,#TK_QSTR
      002015 27 12            [ 1] 1951 	jreq 1$
      002017 A1 04            [ 1] 1952 	cp a,#TK_CHAR 
      002019 27 1B            [ 1] 1953 	jreq 2$ 
      00201B A1 82            [ 1] 1954 	cp a,#TK_CFUNC 
      00201D 27 1F            [ 1] 1955 	jreq 3$
      00201F A1 08            [ 1] 1956 	cp a,#TK_COMMA 
      002021 27 2A            [ 1] 1957 	jreq 4$
      002023 A1 09            [ 1] 1958 	cp a,#TK_SHARP 
      002025 27 2A            [ 1] 1959 	jreq 5$
      002027 20 3D            [ 2] 1960 	jra 7$ 
      002029                       1961 1$:	; print string 
      002029 CD 09 3B         [ 4] 1962 	call puts
      00202C 5C               [ 1] 1963 	incw x
      00202D 72 B0 00 04      [ 2] 1964 	subw x,basicptr 
      002031 CF 00 00         [ 2] 1965 	ldw in.w,x  
      002034 20 C5            [ 2] 1966 	jra reset_comma
      002036                       1967 2$:	; print character 
      002036 CD 17 DF         [ 4] 1968 	call get_char 
      002039 CD 08 DE         [ 4] 1969 	call putc 
      00203C 20 BD            [ 2] 1970 	jra reset_comma 
      00203E                       1971 3$: ; print character function value  	
      00203E                       1972 	_get_code_addr 
      00203E FE               [ 2]    1         ldw x,(x)
      00203F 72 5C 00 01      [ 1]    2         inc in 
      002043 72 5C 00 01      [ 1]    3         inc in 
      002047 FD               [ 4] 1973 	call (x)
      002048 CD 08 DE         [ 4] 1974 	call putc
      00204B 20 AE            [ 2] 1975 	jra reset_comma 
      00204D                       1976 4$: ; set comma state 
      00204D 03 01            [ 1] 1977 	cpl (CCOMMA,sp)
      00204F 20 AC            [ 2] 1978 	jra prt_loop   
      002051                       1979 5$: ; # character must be followed by an integer   
      002051 CD 17 9D         [ 4] 1980 	call next_token
      002054 A1 84            [ 1] 1981 	cp a,#TK_INTGR 
      002056 27 03            [ 1] 1982 	jreq 6$
      002058 CC 16 39         [ 2] 1983 	jp syntax_error 
      00205B                       1984 6$: ; set tab width
      00205B CD 17 CF         [ 4] 1985 	call get_int24 
      00205E 9F               [ 1] 1986 	ld a,xl 
      00205F A4 0F            [ 1] 1987 	and a,#15 
      002061 C7 00 23         [ 1] 1988 	ld tab_width,a 
      002064 20 95            [ 2] 1989 	jra reset_comma 
      002066                       1990 7$:	
      002066                       1991 	_unget_token 
      002066 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00206B CD 1B C2         [ 4] 1992 	call condition
      00206E 4D               [ 1] 1993 	tnz a 
      00206F 27 05            [ 1] 1994 	jreq 8$    
      002071 CD 18 0A         [ 4] 1995     call print_top
      002074 20 85            [ 2] 1996 	jra reset_comma 
      002076                       1997 8$:
      002076 0D 01            [ 1] 1998 	tnz (CCOMMA,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002078 26 05            [ 1] 1999 	jrne 9$
      00207A A6 0D            [ 1] 2000 	ld a,#CR 
      00207C CD 08 DE         [ 4] 2001     call putc 
      00207F                       2002 9$:	_drop VSIZE 
      00207F 5B 01            [ 2]    1     addw sp,#VSIZE 
      002081 81               [ 4] 2003 	ret 
                                   2004 
                                   2005 ;----------------------
                                   2006 ; 'save_context' and
                                   2007 ; 'rest_context' must be 
                                   2008 ; called at the same 
                                   2009 ; call stack depth 
                                   2010 ; i.e. SP must have the 
                                   2011 ; save value at  
                                   2012 ; entry point of both 
                                   2013 ; routine. 
                                   2014 ;---------------------
                           000004  2015 	CTXT_SIZE=4 ; size of saved data 
                                   2016 ;--------------------
                                   2017 ; save current BASIC
                                   2018 ; interpreter context 
                                   2019 ; on stack 
                                   2020 ;--------------------
      002082                       2021 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      002082                       2022 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      002082                       2023 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      002082                       2024 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      002082                       2025 save_context:
      002082 CE 00 04         [ 2] 2026 	ldw x,basicptr 
      002085 1F 03            [ 2] 2027 	ldw (BPTR,sp),x
      002087 C6 00 01         [ 1] 2028 	ld a,in 
      00208A 6B 05            [ 1] 2029 	ld (IN,sp),a
      00208C C6 00 03         [ 1] 2030 	ld a,count 
      00208F 6B 06            [ 1] 2031 	ld (CNT,sp),a  
      002091 81               [ 4] 2032 	ret
                                   2033 
                                   2034 ;-----------------------
                                   2035 ; restore previously saved 
                                   2036 ; BASIC interpreter context 
                                   2037 ; from stack 
                                   2038 ;-------------------------
      002092                       2039 rest_context:
      002092 1E 03            [ 2] 2040 	ldw x,(BPTR,sp)
      002094 CF 00 04         [ 2] 2041 	ldw basicptr,x 
      002097 7B 05            [ 1] 2042 	ld a,(IN,sp)
      002099 C7 00 01         [ 1] 2043 	ld in,a
      00209C 7B 06            [ 1] 2044 	ld a,(CNT,sp)
      00209E C7 00 03         [ 1] 2045 	ld count,a  
      0020A1 81               [ 4] 2046 	ret
                                   2047 
                                   2048 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   2049 
                                   2050 ;------------------------------------------
                                   2051 ; BASIC: INPUT [string]var[,[string]var]
                                   2052 ; input value in variables 
                                   2053 ; [string] optionally can be used as prompt 
                                   2054 ;-----------------------------------------
                           000001  2055 	CX_BPTR=1
                           000003  2056 	CX_IN=3
                           000004  2057 	CX_CNT=4
                           000005  2058 	SKIP=5
                           000005  2059 	VSIZE=5
      0020A2                       2060 input_var:
      0020A2 90 89            [ 2] 2061 	pushw y 
      0020A4                       2062 	_vars VSIZE 
      0020A4 52 05            [ 2]    1     sub sp,#VSIZE 
      0020A6                       2063 input_loop:
      0020A6 0F 05            [ 1] 2064 	clr (SKIP,sp)
      0020A8 CD 17 9D         [ 4] 2065 	call next_token 
      0020AB A1 02            [ 1] 2066 	cp a,#TK_QSTR 
      0020AD 26 10            [ 1] 2067 	jrne 1$ 
      0020AF CD 09 3B         [ 4] 2068 	call puts 
      0020B2 5C               [ 1] 2069 	incw x 
      0020B3 72 B0 00 04      [ 2] 2070 	subw x,basicptr 
      0020B7 CF 00 00         [ 2] 2071 	ldw in.w,x 
      0020BA 03 05            [ 1] 2072 	cpl (SKIP,sp)
      0020BC CD 17 9D         [ 4] 2073 	call next_token 
      0020BF A1 85            [ 1] 2074 1$: cp a,#TK_VAR  
      0020C1 27 03            [ 1] 2075 	jreq 2$ 
      0020C3 CC 16 39         [ 2] 2076 	jp syntax_error
      0020C6 CD 17 C5         [ 4] 2077 2$:	call get_addr
      0020C9 CF 00 19         [ 2] 2078 	ldw ptr16,x 
      0020CC 0D 05            [ 1] 2079 	tnz (SKIP,sp)
      0020CE 26 06            [ 1] 2080 	jrne 21$ 
      0020D0 CD 11 6B         [ 4] 2081 	call var_name 
      0020D3 CD 08 DE         [ 4] 2082 	call putc   
      0020D6                       2083 21$:
      0020D6 A6 3A            [ 1] 2084 	ld a,#':
      0020D8 CD 08 DE         [ 4] 2085 	call putc 
      0020DB CD 20 82         [ 4] 2086 	call save_context 
      0020DE 72 5F 00 03      [ 1] 2087 	clr count  
      0020E2 CD 0A 40         [ 4] 2088 	call readln 
      0020E5 AE 16 90         [ 2] 2089 	ldw x,#tib 
      0020E8 3B 00 03         [ 1] 2090 	push count
      0020EB 4B 00            [ 1] 2091 	push #0 
      0020ED 72 FB 01         [ 2] 2092 	addw x,(1,sp)
      0020F0 5C               [ 1] 2093 	incw x 
      0020F1                       2094 	_drop 2 
      0020F1 5B 02            [ 2]    1     addw sp,#2 
      0020F3 72 5F 00 01      [ 1] 2095 	clr in 
      0020F7 CD 0E B5         [ 4] 2096 	call get_token
      0020FA A1 84            [ 1] 2097 	cp a,#TK_INTGR
      0020FC 27 14            [ 1] 2098 	jreq 3$ 
      0020FE A1 11            [ 1] 2099 	cp a,#TK_MINUS
      002100 26 07            [ 1] 2100 	jrne 22$
      002102 CD 0E B5         [ 4] 2101 	call get_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002105 A1 84            [ 1] 2102 	cp a,#TK_INTGR 
      002107 27 06            [ 1] 2103 	jreq 23$
      002109                       2104 22$:
      002109 CD 20 92         [ 4] 2105 	call rest_context 
      00210C CC 16 39         [ 2] 2106 	jp syntax_error
      00210F                       2107 23$:
      00210F CD 02 0D         [ 4] 2108 	call neg_acc24	
      002112                       2109 3$: 
      002112 C6 00 0C         [ 1] 2110 	ld a,acc24 
      002115 CE 00 0D         [ 2] 2111 	ldw x,acc16 
      002118 72 C7 00 19      [ 4] 2112 	ld [ptr16],a
      00211C 72 5C 00 1A      [ 1] 2113 	inc ptr8  
      002120 72 CF 00 19      [ 5] 2114 	ldw [ptr16],x 
      002124 CD 20 92         [ 4] 2115 	call rest_context
      002127 CD 17 9D         [ 4] 2116 	call next_token 
      00212A A1 08            [ 1] 2117 	cp a,#TK_COMMA
      00212C 26 03            [ 1] 2118 	jrne 4$ 
      00212E CC 20 A6         [ 2] 2119 	jp input_loop
      002131                       2120 4$:
      002131 A1 00            [ 1] 2121 	cp a,#TK_NONE 
      002133 27 07            [ 1] 2122 	jreq input_exit  
      002135 A1 0A            [ 1] 2123 	cp a,#TK_COLON 
      002137 27 03            [ 1] 2124     jreq input_exit 
      002139 CC 16 39         [ 2] 2125 	jp syntax_error 
      00213C                       2126 input_exit:
      00213C                       2127 	_drop VSIZE 
      00213C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00213E 90 85            [ 2] 2128 	popw y 
      002140 81               [ 4] 2129 	ret 
                                   2130 
                                   2131 
                                   2132 ;---------------------
                                   2133 ; BASIC: REM | ' 
                                   2134 ; skip comment to end of line 
                                   2135 ;---------------------- 
      002141                       2136 remark::
      002141 55 00 03 00 01   [ 1] 2137 	mov in,count 
      002146 81               [ 4] 2138  	ret 
                                   2139 
                                   2140 
                                   2141 ;---------------------
                                   2142 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2143 ; read in loop 'addr'  
                                   2144 ; apply & 'mask' to value 
                                   2145 ; loop while result==0.  
                                   2146 ; 'xor_mask' is used to 
                                   2147 ; invert the wait logic.
                                   2148 ; i.e. loop while not 0.
                                   2149 ;---------------------
                           000001  2150 	XMASK=1 
                           000002  2151 	MASK=2
                           000003  2152 	ADDR=3
                           000004  2153 	VSIZE=4
      002147                       2154 wait: 
      002147                       2155 	_vars VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002147 52 04            [ 2]    1     sub sp,#VSIZE 
      002149 0F 01            [ 1] 2156 	clr (XMASK,sp) 
      00214B CD 19 65         [ 4] 2157 	call arg_list 
      00214E A1 02            [ 1] 2158 	cp a,#2
      002150 24 03            [ 1] 2159 	jruge 0$
      002152 CC 16 39         [ 2] 2160 	jp syntax_error 
      002155 A1 03            [ 1] 2161 0$:	cp a,#3
      002157 25 0C            [ 1] 2162 	jrult 1$
      002159                       2163 	_xpop  ; xor mask 
      002159 90 F6            [ 1]    1     ld a,(y)
      00215B 93               [ 1]    2     ldw x,y 
      00215C EE 01            [ 2]    3     ldw x,(1,x)
      00215E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002162 9F               [ 1] 2164 	ld a,xl 
      002163 6B 01            [ 1] 2165 	ld (XMASK,sp),a 
      002165                       2166 1$: _xpop ; mask
      002165 90 F6            [ 1]    1     ld a,(y)
      002167 93               [ 1]    2     ldw x,y 
      002168 EE 01            [ 2]    3     ldw x,(1,x)
      00216A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00216E 9F               [ 1] 2167     ld a,xl  
      00216F 6B 02            [ 1] 2168 	ld (MASK,sp),a 
      002171                       2169 	_xpop ; address 
      002171 90 F6            [ 1]    1     ld a,(y)
      002173 93               [ 1]    2     ldw x,y 
      002174 EE 01            [ 2]    3     ldw x,(1,x)
      002176 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00217A F6               [ 1] 2170 2$:	ld a,(x)
      00217B 14 02            [ 1] 2171 	and a,(MASK,sp)
      00217D 18 01            [ 1] 2172 	xor a,(XMASK,sp)
      00217F 27 F9            [ 1] 2173 	jreq 2$ 
      002181                       2174 	_drop VSIZE 
      002181 5B 04            [ 2]    1     addw sp,#VSIZE 
      002183 81               [ 4] 2175 	ret 
                                   2176 
                                   2177 ;---------------------
                                   2178 ; BASIC: BSET addr,mask
                                   2179 ; set bits at 'addr' corresponding 
                                   2180 ; to those of 'mask' that are at 1.
                                   2181 ; arguments:
                                   2182 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2183 ;   mask        mask|addr
                                   2184 ; output:
                                   2185 ;	none 
                                   2186 ;--------------------------
      002184                       2187 bit_set:
      002184 CD 19 65         [ 4] 2188 	call arg_list 
      002187 A1 02            [ 1] 2189 	cp a,#2	 
      002189 27 03            [ 1] 2190 	jreq 1$ 
      00218B CC 16 39         [ 2] 2191 	jp syntax_error
      00218E                       2192 1$: 
      00218E                       2193 	_xpop ; mask 
      00218E 90 F6            [ 1]    1     ld a,(y)
      002190 93               [ 1]    2     ldw x,y 
      002191 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002193 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002197 9F               [ 1] 2194 	ld a,xl
      002198 88               [ 1] 2195 	push a  
      002199                       2196 	_xpop ; addr  
      002199 90 F6            [ 1]    1     ld a,(y)
      00219B 93               [ 1]    2     ldw x,y 
      00219C EE 01            [ 2]    3     ldw x,(1,x)
      00219E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A2 84               [ 1] 2197 	pop a 
      0021A3 FA               [ 1] 2198 	or a,(x)
      0021A4 F7               [ 1] 2199 	ld (x),a
      0021A5 81               [ 4] 2200 	ret 
                                   2201 
                                   2202 ;---------------------
                                   2203 ; BASIC: BRES addr,mask
                                   2204 ; reset bits at 'addr' corresponding 
                                   2205 ; to those of 'mask' that are at 1.
                                   2206 ; arguments:
                                   2207 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2208 ;   mask	    ~mask&*addr  
                                   2209 ; output:
                                   2210 ;	none 
                                   2211 ;--------------------------
      0021A6                       2212 bit_reset:
      0021A6 CD 19 65         [ 4] 2213 	call arg_list 
      0021A9 A1 02            [ 1] 2214 	cp a,#2  
      0021AB 27 03            [ 1] 2215 	jreq 1$ 
      0021AD CC 16 39         [ 2] 2216 	jp syntax_error
      0021B0                       2217 1$: 
      0021B0                       2218 	_xpop ; mask 
      0021B0 90 F6            [ 1]    1     ld a,(y)
      0021B2 93               [ 1]    2     ldw x,y 
      0021B3 EE 01            [ 2]    3     ldw x,(1,x)
      0021B5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B9 9F               [ 1] 2219 	ld a,xl 
      0021BA 43               [ 1] 2220 	cpl a
      0021BB 88               [ 1] 2221 	push a  
      0021BC                       2222 	_xpop ; addr  
      0021BC 90 F6            [ 1]    1     ld a,(y)
      0021BE 93               [ 1]    2     ldw x,y 
      0021BF EE 01            [ 2]    3     ldw x,(1,x)
      0021C1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C5 84               [ 1] 2223 	pop a 
      0021C6 F4               [ 1] 2224 	and a,(x)
      0021C7 F7               [ 1] 2225 	ld (x),a 
      0021C8 81               [ 4] 2226 	ret 
                                   2227 
                                   2228 ;---------------------
                                   2229 ; BASIC: BTOGL addr,mask
                                   2230 ; toggle bits at 'addr' corresponding 
                                   2231 ; to those of 'mask' that are at 1.
                                   2232 ; arguments:
                                   2233 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2234 ;   mask	    mask^*addr  
                                   2235 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2236 ;	none 
                                   2237 ;--------------------------
      0021C9                       2238 bit_toggle:
      0021C9 CD 19 65         [ 4] 2239 	call arg_list 
      0021CC A1 02            [ 1] 2240 	cp a,#2 
      0021CE 27 03            [ 1] 2241 	jreq 1$ 
      0021D0 CC 16 39         [ 2] 2242 	jp syntax_error
      0021D3                       2243 1$: _xpop ; mask 
      0021D3 90 F6            [ 1]    1     ld a,(y)
      0021D5 93               [ 1]    2     ldw x,y 
      0021D6 EE 01            [ 2]    3     ldw x,(1,x)
      0021D8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021DC 9F               [ 1] 2244 	ld a,xl
      0021DD 88               [ 1] 2245 	push a 
      0021DE                       2246 	_xpop  ; addr  
      0021DE 90 F6            [ 1]    1     ld a,(y)
      0021E0 93               [ 1]    2     ldw x,y 
      0021E1 EE 01            [ 2]    3     ldw x,(1,x)
      0021E3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E7 84               [ 1] 2247 	pop a 
      0021E8 F8               [ 1] 2248 	xor a,(x)
      0021E9 F7               [ 1] 2249 	ld (x),a 
      0021EA 81               [ 4] 2250 	ret 
                                   2251 
                                   2252 
                                   2253 ;---------------------
                                   2254 ; BASIC: BTEST(addr,bit)
                                   2255 ; return bit value at 'addr' 
                                   2256 ; bit is in range {0..7}.
                                   2257 ; arguments:
                                   2258 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2259 ;   bit 	    bit position {0..7}  
                                   2260 ; output:
                                   2261 ;	A:X       bit value  
                                   2262 ;--------------------------
      0021EB                       2263 bit_test:
      0021EB CD 19 60         [ 4] 2264 	call func_args 
      0021EE A1 02            [ 1] 2265 	cp a,#2
      0021F0 27 03            [ 1] 2266 	jreq 0$
      0021F2 CC 16 39         [ 2] 2267 	jp syntax_error
      0021F5                       2268 0$:	
      0021F5                       2269 	_xpop 
      0021F5 90 F6            [ 1]    1     ld a,(y)
      0021F7 93               [ 1]    2     ldw x,y 
      0021F8 EE 01            [ 2]    3     ldw x,(1,x)
      0021FA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021FE 9F               [ 1] 2270 	ld a,xl 
      0021FF A4 07            [ 1] 2271 	and a,#7
      002201 88               [ 1] 2272 	push a   
      002202 A6 01            [ 1] 2273 	ld a,#1 
      002204 0D 01            [ 1] 2274 1$: tnz (1,sp)
      002206 27 05            [ 1] 2275 	jreq 2$
      002208 48               [ 1] 2276 	sll a 
      002209 0A 01            [ 1] 2277 	dec (1,sp)
      00220B 20 F7            [ 2] 2278 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00220D 6B 01            [ 1] 2279 2$: ld (1,sp),a  
      00220F                       2280 	_xpop ; address  
      00220F 90 F6            [ 1]    1     ld a,(y)
      002211 93               [ 1]    2     ldw x,y 
      002212 EE 01            [ 2]    3     ldw x,(1,x)
      002214 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002218 84               [ 1] 2281 	pop a 
      002219 F4               [ 1] 2282 	and a,(x)
      00221A 27 02            [ 1] 2283 	jreq 3$
      00221C A6 01            [ 1] 2284 	ld a,#1 
      00221E 5F               [ 1] 2285 3$:	clrw x 
      00221F 97               [ 1] 2286 	ld xl,a
      002220 4F               [ 1] 2287 	clr a  
      002221 81               [ 4] 2288 	ret
                                   2289 
                                   2290 ;--------------------
                                   2291 ; BASIC: POKE addr,byte
                                   2292 ; put a byte at addr 
                                   2293 ;--------------------
      002222                       2294 poke:
      002222 CD 19 65         [ 4] 2295 	call arg_list 
      002225 A1 02            [ 1] 2296 	cp a,#2
      002227 27 03            [ 1] 2297 	jreq 1$
      002229 CC 16 39         [ 2] 2298 	jp syntax_error
      00222C                       2299 1$:	
      00222C                       2300 	_xpop ; byte   
      00222C 90 F6            [ 1]    1     ld a,(y)
      00222E 93               [ 1]    2     ldw x,y 
      00222F EE 01            [ 2]    3     ldw x,(1,x)
      002231 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002235 9F               [ 1] 2301     ld a,xl 
      002236 88               [ 1] 2302 	push a 
      002237                       2303 	_xpop ; address 
      002237 90 F6            [ 1]    1     ld a,(y)
      002239 93               [ 1]    2     ldw x,y 
      00223A EE 01            [ 2]    3     ldw x,(1,x)
      00223C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002240 84               [ 1] 2304 	pop a 
      002241 F7               [ 1] 2305 	ld (x),a 
      002242 81               [ 4] 2306 	ret 
                                   2307 
                                   2308 ;-----------------------
                                   2309 ; BASIC: PEEK(addr)
                                   2310 ; get the byte at addr 
                                   2311 ; input:
                                   2312 ;	none 
                                   2313 ; output:
                                   2314 ;	X 		value 
                                   2315 ;-----------------------
      002243                       2316 peek:
      002243 CD 19 60         [ 4] 2317 	call func_args
      002246 A1 01            [ 1] 2318 	cp a,#1 
      002248 27 03            [ 1] 2319 	jreq 1$
      00224A CC 16 39         [ 2] 2320 	jp syntax_error
      00224D                       2321 1$: _xpop ; address  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      00224D 90 F6            [ 1]    1     ld a,(y)
      00224F 93               [ 1]    2     ldw x,y 
      002250 EE 01            [ 2]    3     ldw x,(1,x)
      002252 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002256 C7 00 18         [ 1] 2322 	ld farptr,a 
      002259 CF 00 19         [ 2] 2323 	ldw ptr16,x 
      00225C 92 BC 00 18      [ 5] 2324 	ldf a,[farptr]
      002260 5F               [ 1] 2325 	clrw x 
      002261 97               [ 1] 2326 	ld xl,a 
      002262 4F               [ 1] 2327 	clr a 
      002263 81               [ 4] 2328 	ret 
                                   2329 
                                   2330 ;---------------------------
                                   2331 ; BASIC IF expr : instructions
                                   2332 ; evaluate expr and if true 
                                   2333 ; execute instructions on same line. 
                                   2334 ;----------------------------
      002264                       2335 if: 
      002264 CD 1B C2         [ 4] 2336 	call condition  
      002267                       2337 	_xpop 
      002267 90 F6            [ 1]    1     ld a,(y)
      002269 93               [ 1]    2     ldw x,y 
      00226A EE 01            [ 2]    3     ldw x,(1,x)
      00226C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002270 4D               [ 1] 2338 	tnz  a  
      002271 26 0D            [ 1] 2339 	jrne 9$
      002273 5D               [ 2] 2340 	tnzw x 
      002274 26 0A            [ 1] 2341 	jrne 9$  
                                   2342 ;skip to next line
      002276 55 00 03 00 01   [ 1] 2343 	mov in,count
      00227B                       2344 	_drop 2 
      00227B 5B 02            [ 2]    1     addw sp,#2 
      00227D CC 16 EC         [ 2] 2345 	jp next_line
      002280 81               [ 4] 2346 9$:	ret 
                                   2347 
                                   2348 ;------------------------
                                   2349 ; BASIC: FOR var=expr 
                                   2350 ; set variable to expression 
                                   2351 ; leave variable address 
                                   2352 ; on stack and set
                                   2353 ; FLOOP bit in 'flags'
                                   2354 ;-----------------
                           000001  2355 	RETL1=1 ; return address  
                           000003  2356 	FSTEP=3  ; variable increment int24
                           000006  2357 	LIMIT=6 ; loop limit, int24  
                           000009  2358 	CVAR=9   ; control variable 
                           00000B  2359 	INW=11   ;  in.w saved
                           00000D  2360 	BPTR=13 ; baseptr saved
                           00000D  2361 	VSIZE=13  
      002281                       2362 for: ; { -- var_addr }
      002281 85               [ 2] 2363 	popw x ; call return address 
      002282                       2364 	_vars VSIZE 
      002282 52 0D            [ 2]    1     sub sp,#VSIZE 
      002284 89               [ 2] 2365 	pushw x  ; RETL1 
      002285 A6 85            [ 1] 2366 	ld a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002287 CD 19 53         [ 4] 2367 	call expect
      00228A CD 17 C5         [ 4] 2368 	call get_addr
      00228D 1F 09            [ 2] 2369 	ldw (CVAR,sp),x  ; control variable 
      00228F CD 1C 97         [ 4] 2370 	call let_eval 
      002292 72 14 00 22      [ 1] 2371 	bset flags,#FLOOP 
      002296 CD 17 9D         [ 4] 2372 	call next_token 
      002299 A1 80            [ 1] 2373 	cp a,#TK_CMD 
      00229B 27 03            [ 1] 2374 	jreq 1$
      00229D CC 16 39         [ 2] 2375 	jp syntax_error
      0022A0                       2376 1$:  
      0022A0                       2377 	_get_code_addr
      0022A0 FE               [ 2]    1         ldw x,(x)
      0022A1 72 5C 00 01      [ 1]    2         inc in 
      0022A5 72 5C 00 01      [ 1]    3         inc in 
      0022A9 A3 22 B1         [ 2] 2378 	cpw x,#to   
      0022AC 27 03            [ 1] 2379 	jreq to
      0022AE CC 16 39         [ 2] 2380 	jp syntax_error 
                                   2381 
                                   2382 ;-----------------------------------
                                   2383 ; BASIC: TO expr 
                                   2384 ; second part of FOR loop initilization
                                   2385 ; leave limit on stack and set 
                                   2386 ; FTO bit in 'flags'
                                   2387 ;-----------------------------------
      0022B1                       2388 to: ; { var_addr -- var_addr limit step }
      0022B1 72 04 00 22 03   [ 2] 2389 	btjt flags,#FLOOP,1$
      0022B6 CC 16 39         [ 2] 2390 	jp syntax_error
      0022B9 CD 1A A9         [ 4] 2391 1$: call expression   
      0022BC A1 84            [ 1] 2392 	cp a,#TK_INTGR 
      0022BE 27 03            [ 1] 2393 	jreq 2$ 
      0022C0 CC 16 39         [ 2] 2394 	jp syntax_error
      0022C3                       2395 2$: _xpop
      0022C3 90 F6            [ 1]    1     ld a,(y)
      0022C5 93               [ 1]    2     ldw x,y 
      0022C6 EE 01            [ 2]    3     ldw x,(1,x)
      0022C8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022CC 6B 06            [ 1] 2396 	ld (LIMIT,sp),a 
      0022CE 1F 07            [ 2] 2397 	ldw (LIMIT+1,sp),x
      0022D0 CD 17 9D         [ 4] 2398 	call next_token
      0022D3 A1 00            [ 1] 2399 	cp a,#TK_NONE  
      0022D5 27 17            [ 1] 2400 	jreq 4$ 
      0022D7 A1 80            [ 1] 2401 	cp a,#TK_CMD
      0022D9 26 0E            [ 1] 2402 	jrne 3$
      0022DB                       2403 	_get_code_addr
      0022DB FE               [ 2]    1         ldw x,(x)
      0022DC 72 5C 00 01      [ 1]    2         inc in 
      0022E0 72 5C 00 01      [ 1]    3         inc in 
      0022E4 A3 22 F7         [ 2] 2404 	cpw x,#step 
      0022E7 27 0E            [ 1] 2405 	jreq step
      0022E9                       2406 3$:	
      0022E9                       2407 	_unget_token   	 
      0022E9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022EE                       2408 4$:	
      0022EE 0F 03            [ 1] 2409 	clr (FSTEP,sp) 
      0022F0 AE 00 01         [ 2] 2410 	ldw x,#1   ; default step  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      0022F3 1F 04            [ 2] 2411 	ldw (FSTEP+1,sp),x 
      0022F5 20 2F            [ 2] 2412 	jra store_loop_addr 
                                   2413 
                                   2414 
                                   2415 ;----------------------------------
                                   2416 ; BASIC: STEP expr 
                                   2417 ; optional third par of FOR loop
                                   2418 ; initialization. 	
                                   2419 ;------------------------------------
      0022F7                       2420 step: ; {var limit -- var limit step}
      0022F7 72 04 00 22 03   [ 2] 2421 	btjt flags,#FLOOP,1$
      0022FC CC 16 39         [ 2] 2422 	jp syntax_error
      0022FF CD 1A A9         [ 4] 2423 1$: call expression 
      002302 A1 84            [ 1] 2424 	cp a,#TK_INTGR
      002304 27 03            [ 1] 2425 	jreq 2$
      002306 CC 16 39         [ 2] 2426 	jp syntax_error
      002309                       2427 2$:	
      002309                       2428 	_xpop 
      002309 90 F6            [ 1]    1     ld a,(y)
      00230B 93               [ 1]    2     ldw x,y 
      00230C EE 01            [ 2]    3     ldw x,(1,x)
      00230E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002312 6B 03            [ 1] 2429 	ld (FSTEP,sp),a 
      002314 1F 04            [ 2] 2430 	ldw (FSTEP+1,sp),x ; step
                                   2431 ; if step < 0 decrement LIMIT 
      002316 4D               [ 1] 2432 	tnz a
      002317 2A 0D            [ 1] 2433 	jrpl store_loop_addr 
      002319 7B 06            [ 1] 2434 	ld a,(LIMIT,sp)
      00231B 1E 07            [ 2] 2435 	ldw x,(LIMIT+1,sp)
      00231D 1D 00 01         [ 2] 2436 	subw x,#1 
      002320 A2 00            [ 1] 2437 	sbc a,#0 
      002322 6B 06            [ 1] 2438 	ld (LIMIT,sp),a 
      002324 1F 07            [ 2] 2439 	ldw (LIMIT+1,sp),x 
                                   2440 ; leave loop back entry point on cstack 
                                   2441 ; cstack is 1 call deep from interpreter
      002326                       2442 store_loop_addr:
      002326 CE 00 04         [ 2] 2443 	ldw x,basicptr
      002329 1F 0D            [ 2] 2444 	ldw (BPTR,sp),x 
      00232B CE 00 00         [ 2] 2445 	ldw x,in.w 
      00232E 1F 0B            [ 2] 2446 	ldw (INW,sp),x   
      002330 72 15 00 22      [ 1] 2447 	bres flags,#FLOOP 
      002334 72 5C 00 1F      [ 1] 2448 	inc loop_depth  
      002338 81               [ 4] 2449 	ret 
                                   2450 
                                   2451 ;--------------------------------
                                   2452 ; BASIC: NEXT var 
                                   2453 ; FOR loop control 
                                   2454 ; increment variable with step 
                                   2455 ; and compare with limit 
                                   2456 ; loop if threshold not crossed.
                                   2457 ; else stack. 
                                   2458 ; and decrement 'loop_depth' 
                                   2459 ;--------------------------------
      002339                       2460 next: ; {var limit step retl1 -- [var limit step ] }
      002339 72 5D 00 1F      [ 1] 2461 	tnz loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      00233D 26 03            [ 1] 2462 	jrne 1$ 
      00233F CC 16 39         [ 2] 2463 	jp syntax_error 
      002342                       2464 1$: 
      002342 A6 85            [ 1] 2465 	ld a,#TK_VAR 
      002344 CD 19 53         [ 4] 2466 	call expect
      002347 CD 17 C5         [ 4] 2467 	call get_addr 
                                   2468 ; check for good variable after NEXT 	 
      00234A 13 09            [ 2] 2469 	cpw x,(CVAR,sp)
      00234C 27 03            [ 1] 2470 	jreq 2$  
      00234E CC 16 39         [ 2] 2471 	jp syntax_error ; not the good one 
      002351                       2472 2$: 
      002351 CF 00 19         [ 2] 2473 	ldw ptr16,x 
                                   2474 	; increment variable 
      002354 F6               [ 1] 2475 	ld a,(x)
      002355 EE 01            [ 2] 2476 	ldw x,(1,x)  ; get var value 
      002357 72 FB 04         [ 2] 2477 	addw x,(FSTEP+1,sp) ; var+step 
      00235A 19 03            [ 1] 2478 	adc a,(FSTEP,sp)
      00235C 72 C7 00 19      [ 4] 2479 	ld [ptr16],a
      002360 72 5C 00 1A      [ 1] 2480 	inc ptr8  
      002364 72 CF 00 19      [ 5] 2481 	ldw [ptr16],x 
      002368 C7 00 0C         [ 1] 2482 	ld acc24,a 
      00236B CF 00 0D         [ 2] 2483 	ldw acc16,x 
      00236E 7B 06            [ 1] 2484 	ld a,(LIMIT,sp)
      002370 1E 07            [ 2] 2485 	ldw x,(LIMIT+1,sp)
      002372 72 B0 00 0D      [ 2] 2486 	subw x,acc16 
      002376 C2 00 0C         [ 1] 2487 	sbc a,acc24
      002379 18 03            [ 1] 2488 	xor a,(FSTEP,sp)
      00237B A8 80            [ 1] 2489 	xor a,#0x80
      00237D 2B 12            [ 1] 2490 	jrmi loop_back  
      00237F 20 25            [ 2] 2491 	jra loop_done   
                                   2492 ; check sign of STEP  
      002381 7B 03            [ 1] 2493 	ld a,(FSTEP,sp)
      002383 2A 07            [ 1] 2494 	jrpl 4$
                                   2495 ;negative step
      002385 C6 00 0E         [ 1] 2496     ld a,acc8 
      002388 2F 07            [ 1] 2497 	jrslt loop_back   
      00238A 20 1A            [ 2] 2498 	jra loop_done  
      00238C                       2499 4$: ; positive step
      00238C 72 0E 00 0E 15   [ 2] 2500 	btjt acc8,#7,loop_done 
      002391                       2501 loop_back:
      002391 1E 0D            [ 2] 2502 	ldw x,(BPTR,sp)
      002393 CF 00 04         [ 2] 2503 	ldw basicptr,x 
      002396 72 01 00 22 05   [ 2] 2504 	btjf flags,#FRUN,1$ 
      00239B E6 02            [ 1] 2505 	ld a,(2,x)
      00239D C7 00 03         [ 1] 2506 	ld count,a
      0023A0 1E 0B            [ 2] 2507 1$:	ldw x,(INW,sp)
      0023A2 CF 00 00         [ 2] 2508 	ldw in.w,x 
      0023A5 81               [ 4] 2509 	ret 
      0023A6                       2510 loop_done:
                                   2511 	; remove loop data from stack  
      0023A6 85               [ 2] 2512 	popw x
      0023A7                       2513 	_drop VSIZE 
      0023A7 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0023A9 72 5A 00 1F      [ 1] 2514 	dec loop_depth 
      0023AD FC               [ 2] 2515 	jp (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                   2516 
                                   2517 ;----------------------------
                                   2518 ; called by goto/gosub
                                   2519 ; to get target line number 
                                   2520 ; output:
                                   2521 ;    x    line address 
                                   2522 ;---------------------------
      0023AE                       2523 get_target_line:
      0023AE CD 17 9D         [ 4] 2524 	call next_token  
      0023B1 A1 84            [ 1] 2525 	cp a,#TK_INTGR
      0023B3 27 07            [ 1] 2526 	jreq get_target_line_addr 
      0023B5 A1 03            [ 1] 2527 	cp a,#TK_LABEL 
      0023B7 27 26            [ 1] 2528 	jreq look_target_symbol 
      0023B9 CC 16 39         [ 2] 2529 	jp syntax_error
                                   2530 ; the target is a line number 
                                   2531 ; search it. 
      0023BC                       2532 get_target_line_addr:
      0023BC 90 89            [ 2] 2533 	pushw y 
      0023BE CD 17 CF         [ 4] 2534 	call get_int24 ; line # 
      0023C1 4F               [ 1] 2535 	clr a
      0023C2 90 CE 00 04      [ 2] 2536 	ldw y,basicptr 
      0023C6 90 FE            [ 2] 2537 	ldw y,(y)
      0023C8 90 89            [ 2] 2538 	pushw y 
      0023CA 13 01            [ 2] 2539 	cpw x,(1,sp)
      0023CC                       2540 	_drop 2  
      0023CC 5B 02            [ 2]    1     addw sp,#2 
      0023CE 25 01            [ 1] 2541 	jrult 11$
      0023D0 4C               [ 1] 2542 	inc a 
      0023D1                       2543 11$: ; scan program for this line# 	
      0023D1 CD 0C 18         [ 4] 2544 	call search_lineno  
      0023D4 5D               [ 2] 2545 	tnzw x ; 0| line# address 
      0023D5 26 05            [ 1] 2546 	jrne 2$ 
      0023D7 A6 05            [ 1] 2547 	ld a,#ERR_NO_LINE 
      0023D9 CC 16 3B         [ 2] 2548 	jp tb_error 
      0023DC 90 85            [ 2] 2549 2$:	popw y  
      0023DE 81               [ 4] 2550 	ret 
                                   2551 
                                   2552 ; the GOTO|GOSUB target is a symbol.
                                   2553 ; output:
                                   2554 ;    X    line address|0 
      0023DF                       2555 look_target_symbol:
      0023DF 90 89            [ 2] 2556 	pushw y 
      0023E1 89               [ 2] 2557 	pushw x 
      0023E2 CD 17 B6         [ 4] 2558 	call skip_string 
      0023E5 72 5F 00 0D      [ 1] 2559 	clr acc16 
      0023E9 90 CE 00 1B      [ 2] 2560 	ldw y,txtbgn 
      0023ED 90 E6 03         [ 1] 2561 1$:	ld a,(3,y) ; first TK_ID on line 
      0023F0 A1 03            [ 1] 2562 	cp a,#TK_LABEL 
      0023F2 27 15            [ 1] 2563 	jreq 3$ 
      0023F4 90 E6 02         [ 1] 2564 2$:	ld a,(2,y); line length 
      0023F7 C7 00 0E         [ 1] 2565 	ld acc8,a 
      0023FA 72 B9 00 0D      [ 2] 2566 	addw y,acc16 ;point to next line 
      0023FE 90 C3 00 1D      [ 2] 2567 	cpw y,txtend 
      002402 25 E9            [ 1] 2568 	jrult 1$
      002404 A6 0A            [ 1] 2569 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002406 CC 16 3B         [ 2] 2570 	jp tb_error 
      002409                       2571 3$: ; found a TK_LABEL 
                                   2572 	; compare with GOTO|GOSUB target 
      002409 90 89            [ 2] 2573 	pushw y ; line address 
      00240B 72 A9 00 04      [ 2] 2574 	addw y,#4 ; label string 
      00240F 1E 03            [ 2] 2575 	ldw x,(3,sp) ; target string 
      002411 CD 13 64         [ 4] 2576 	call strcmp
      002414 26 04            [ 1] 2577 	jrne 4$
      002416 90 85            [ 2] 2578 	popw y 
      002418 20 DA            [ 2] 2579 	jra 2$ 
      00241A                       2580 4$: ; target found 
      00241A 85               [ 2] 2581 	popw x ;  address line target  
      00241B                       2582 	_drop 2 ; target string 
      00241B 5B 02            [ 2]    1     addw sp,#2 
      00241D 90 85            [ 2] 2583 	popw y 
      00241F 81               [ 4] 2584 	ret
                                   2585 
                                   2586 
                                   2587 ;--------------------------------
                                   2588 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2589 ; selective goto or gosub 
                                   2590 ;--------------------------------
      002420                       2591 cmd_on:
      002420 72 00 00 22 05   [ 2] 2592 	btjt flags,#FRUN,0$ 
      002425 A6 06            [ 1] 2593 	ld a,#ERR_RUN_ONLY
      002427 CC 16 3B         [ 2] 2594 	jp tb_error 
      00242A CD 1A A9         [ 4] 2595 0$:	call expression 
      00242D A1 84            [ 1] 2596 	cp a,#TK_INTGR
      00242F 27 03            [ 1] 2597 	jreq 1$
      002431 CC 16 39         [ 2] 2598 	jp syntax_error
      002434                       2599 1$: _xpop
      002434 90 F6            [ 1]    1     ld a,(y)
      002436 93               [ 1]    2     ldw x,y 
      002437 EE 01            [ 2]    3     ldw x,(1,x)
      002439 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2600 ; the selector is the element indice 
                                   2601 ; in the list of arguments. {1..#elements} 
      00243D 9F               [ 1] 2602 	ld a,xl ; keep only bits 7..0
      00243E 27 68            [ 1] 2603 	jreq 9$ ; element # begin at 1. 
      002440 88               [ 1] 2604 	push a  ; selector  
      002441 CD 17 9D         [ 4] 2605 	call next_token
      002444 A1 80            [ 1] 2606 	cp a,#TK_CMD 
      002446 27 03            [ 1] 2607 	jreq 2$ 
      002448 CC 16 39         [ 2] 2608 	jp syntax_error 
      00244B                       2609 2$: _get_code_addr
      00244B FE               [ 2]    1         ldw x,(x)
      00244C 72 5C 00 01      [ 1]    2         inc in 
      002450 72 5C 00 01      [ 1]    3         inc in 
                                   2610 ;; must be a GOTO or GOSUB 
      002454 A3 24 B2         [ 2] 2611 	cpw x,#goto 
      002457 27 08            [ 1] 2612 	jreq 4$
      002459 A3 24 CC         [ 2] 2613 	cpw x,#gosub 
      00245C 27 03            [ 1] 2614 	jreq 4$ 
      00245E CC 16 39         [ 2] 2615 	jp syntax_error 
      002461                       2616 4$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002461 84               [ 1] 2617 	pop a 
      002462 89               [ 2] 2618 	pushw x ; save routine address 	
      002463 88               [ 1] 2619 	push a  ; selector  
      002464                       2620 5$: ; skip elements in list until selector==0 
      002464 0A 01            [ 1] 2621 	dec (1,sp)
      002466 27 26            [ 1] 2622 	jreq 6$ 
                                   2623 ; can be a line# or a label 
      002468 CD 17 9D         [ 4] 2624 	call next_token 
      00246B A1 84            [ 1] 2625 	cp a,#TK_INTGR 
      00246D 27 07            [ 1] 2626 	jreq 52$
      00246F A1 03            [ 1] 2627 	cp a,#TK_LABEL 
      002471 27 0D            [ 1] 2628 	jreq 54$
      002473 CC 16 39         [ 2] 2629 	jp syntax_error 
      002476                       2630 52$: ; got a line number 
      002476 C6 00 01         [ 1] 2631 	ld a,in ; skip over int24 value 
      002479 AB 03            [ 1] 2632 	add a,#CELL_SIZE ; integer size  
      00247B C7 00 01         [ 1] 2633 	ld in,a 
      00247E 20 03            [ 2] 2634 	jra 56$
      002480 CD 17 B6         [ 4] 2635 54$: call skip_string ; skip over label 	
      002483                       2636 56$: ; if another element comma present 
      002483 CD 17 9D         [ 4] 2637 	call next_token
      002486 A1 08            [ 1] 2638 	cp a,#TK_COMMA 
      002488 27 DA            [ 1] 2639 	jreq 5$ 
                                   2640 ; arg list exhausted, selector to big 
                                   2641 ; continue execution on next line 
      00248A                       2642 	_drop 3 ; drop selector and GOTO|GOSUB address 
      00248A 5B 03            [ 2]    1     addw sp,#3 
      00248C 20 1A            [ 2] 2643 	jra 9$
      00248E                       2644 6$: ;at selected position  
      00248E                       2645 	_drop 1 ; discard selector
      00248E 5B 01            [ 2]    1     addw sp,#1 
                                   2646 ; here only the routine address 
                                   2647 ; of GOTO|GOSUB is on stack 
      002490 CD 23 AE         [ 4] 2648     call get_target_line
      002493 CF 00 19         [ 2] 2649 	ldw ptr16,x 	
      002496 55 00 03 00 01   [ 1] 2650 	mov in,count ; move to end of line  
      00249B 85               [ 2] 2651 	popw x ; cmd address, GOTO||GOSUB 
      00249C A3 24 B2         [ 2] 2652 	cpw x,#goto 
      00249F 26 05            [ 1] 2653 	jrne 7$ 
      0024A1 CE 00 19         [ 2] 2654 	ldw x,ptr16 
      0024A4 20 19            [ 2] 2655 	jra jp_to_target
      0024A6                       2656 7$: 
      0024A6 20 35            [ 2] 2657 	jra gosub_2 ; target in ptr16 
      0024A8                       2658 9$: ; expr out of range skip to end of line
                                   2659     ; this will force a fall to next line  
      0024A8 55 00 03 00 01   [ 1] 2660 	mov in,count
      0024AD                       2661 	_drop 2
      0024AD 5B 02            [ 2]    1     addw sp,#2 
      0024AF CC 16 EC         [ 2] 2662 	jp next_line  
                                   2663 
                                   2664 
                                   2665 ;------------------------
                                   2666 ; BASIC: GOTO line# 
                                   2667 ; jump to line# 
                                   2668 ; here cstack is 2 call deep from interpreter 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2669 ;------------------------
      0024B2                       2670 goto:
      0024B2 72 00 00 22 05   [ 2] 2671 	btjt flags,#FRUN,goto_1  
      0024B7 A6 06            [ 1] 2672 	ld a,#ERR_RUN_ONLY
      0024B9 CC 16 3B         [ 2] 2673 	jp tb_error 
      0024BC                       2674 goto_1:
      0024BC CD 23 AE         [ 4] 2675 	call get_target_line
      0024BF                       2676 jp_to_target:
      0024BF CF 00 04         [ 2] 2677 	ldw basicptr,x 
      0024C2 E6 02            [ 1] 2678 	ld a,(2,x)
      0024C4 C7 00 03         [ 1] 2679 	ld count,a 
      0024C7 35 03 00 01      [ 1] 2680 	mov in,#3 
      0024CB 81               [ 4] 2681 	ret 
                                   2682 
                                   2683 
                                   2684 ;--------------------
                                   2685 ; BASIC: GOSUB line#
                                   2686 ; basic subroutine call
                                   2687 ; actual line# and basicptr 
                                   2688 ; are saved on cstack
                                   2689 ; here cstack is 2 call deep from interpreter 
                                   2690 ;--------------------
                           000001  2691 	RET_ADDR=1 ; subroutine return address 
                           000003  2692 	RET_BPTR=3 ; basicptr return point 
                           000005  2693 	RET_INW=5  ; in.w return point 
                           000004  2694 	VSIZE=4 
      0024CC                       2695 gosub:
      0024CC 72 00 00 22 06   [ 2] 2696 	btjt flags,#FRUN,gosub_1 
      0024D1 A6 06            [ 1] 2697 	ld a,#ERR_RUN_ONLY
      0024D3 CC 16 3B         [ 2] 2698 	jp tb_error 
      0024D6 81               [ 4] 2699 	ret 
      0024D7                       2700 gosub_1:
      0024D7 CD 23 AE         [ 4] 2701 	call get_target_line 
      0024DA CF 00 19         [ 2] 2702 	ldw ptr16,x
      0024DD                       2703 gosub_2: 
      0024DD 85               [ 2] 2704 	popw x 
      0024DE                       2705 	_vars VSIZE  
      0024DE 52 04            [ 2]    1     sub sp,#VSIZE 
      0024E0 89               [ 2] 2706 	pushw x ; RET_ADDR 
                                   2707 ; save BASIC subroutine return point.   
      0024E1 CE 00 04         [ 2] 2708 	ldw x,basicptr
      0024E4 1F 03            [ 2] 2709 	ldw (RET_BPTR,sp),x 
      0024E6 CE 00 00         [ 2] 2710 	ldw x,in.w 
      0024E9 1F 05            [ 2] 2711 	ldw (RET_INW,sp),x
      0024EB CE 00 19         [ 2] 2712 	ldw x,ptr16  
      0024EE 20 CF            [ 2] 2713 	jra jp_to_target
                                   2714 
                                   2715 ;------------------------
                                   2716 ; BASIC: RETURN 
                                   2717 ; exit from BASIC subroutine 
                                   2718 ;------------------------
      0024F0                       2719 return:
      0024F0 72 00 00 22 05   [ 2] 2720 	btjt flags,#FRUN,0$ 
      0024F5 A6 06            [ 1] 2721 	ld a,#ERR_RUN_ONLY
      0024F7 CC 16 3B         [ 2] 2722 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0024FA                       2723 0$:	
      0024FA 1E 03            [ 2] 2724 	ldw x,(RET_BPTR,sp) 
      0024FC CF 00 04         [ 2] 2725 	ldw basicptr,x
      0024FF E6 02            [ 1] 2726 	ld a,(2,x)
      002501 C7 00 03         [ 1] 2727 	ld count,a  
      002504 1E 05            [ 2] 2728 	ldw x,(RET_INW,sp)
      002506 CF 00 00         [ 2] 2729 	ldw in.w,x 
      002509 85               [ 2] 2730 	popw x 
      00250A                       2731 	_drop VSIZE 
      00250A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00250C FC               [ 2] 2732 	jp (x)
                                   2733 
                                   2734 
                                   2735 ;----------------------------------
                                   2736 ; BASIC: RUN
                                   2737 ; run BASIC program in RAM
                                   2738 ;----------------------------------- 
      00250D                       2739 run: 
      00250D 72 01 00 22 02   [ 2] 2740 	btjf flags,#FRUN,0$  
      002512 4F               [ 1] 2741 	clr a 
      002513 81               [ 4] 2742 	ret
      002514                       2743 0$: 
      002514 72 09 00 22 12   [ 2] 2744 	btjf flags,#FBREAK,1$
      002519                       2745 	_drop 2 
      002519 5B 02            [ 2]    1     addw sp,#2 
      00251B CD 20 92         [ 4] 2746 	call rest_context
      00251E                       2747 	_drop CTXT_SIZE 
      00251E 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002520 72 19 00 22      [ 1] 2748 	bres flags,#FBREAK 
      002524 72 10 00 22      [ 1] 2749 	bset flags,#FRUN 
      002528 CC 16 E4         [ 2] 2750 	jp interpreter 
      00252B CE 00 1B         [ 2] 2751 1$:	ldw x,txtbgn
      00252E C3 00 1D         [ 2] 2752 	cpw x,txtend 
      002531 2B 0C            [ 1] 2753 	jrmi run_it 
      002533 AE 15 AC         [ 2] 2754 	ldw x,#err_no_prog
      002536 CD 09 3B         [ 4] 2755 	call puts 
      002539 55 00 03 00 01   [ 1] 2756 	mov in,count
      00253E 81               [ 4] 2757 	ret 
      00253F                       2758 run_it:	 
      00253F                       2759 	_drop 2 ; drop return address 
      00253F 5B 02            [ 2]    1     addw sp,#2 
      002541                       2760 run_it_02: 
      002541 CD 1C 76         [ 4] 2761     call ubound 
      002544 CD 13 C9         [ 4] 2762 	call clear_vars
                                   2763 ; initialize DIM variables pointers 
      002547 CE 00 1D         [ 2] 2764 	ldw x,txtend 
      00254A CF 00 30         [ 2] 2765 	ldw dvar_bgn,x 
      00254D CF 00 32         [ 2] 2766 	ldw dvar_end,x 	 
                                   2767 ; clear data pointer 
      002550 5F               [ 1] 2768 	clrw x 
      002551 CF 00 06         [ 2] 2769 	ldw data_ptr,x 
      002554 72 5F 00 08      [ 1] 2770 	clr data_ofs 
      002558 72 5F 00 09      [ 1] 2771 	clr data_len 
                                   2772 ; initialize BASIC pointer 
      00255C CE 00 1B         [ 2] 2773 	ldw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00255F CF 00 04         [ 2] 2774 	ldw basicptr,x 
      002562 E6 02            [ 1] 2775 	ld a,(2,x)
      002564 C7 00 03         [ 1] 2776 	ld count,a
      002567 35 03 00 01      [ 1] 2777 	mov in,#3	
      00256B 72 10 00 22      [ 1] 2778 	bset flags,#FRUN 
      00256F CC 16 E4         [ 2] 2779 	jp interpreter 
                                   2780 
                                   2781 
                                   2782 ;----------------------
                                   2783 ; BASIC: END
                                   2784 ; end running program
                                   2785 ;---------------------- 
      002572                       2786 cmd_end: 
                                   2787 ; clean stack 
      002572 AE 17 FF         [ 2] 2788 	ldw x,#STACK_EMPTY
      002575 94               [ 1] 2789 	ldw sp,x 
      002576 CC 16 C5         [ 2] 2790 	jp warm_start
                                   2791 
                                   2792 ;---------------------------
                                   2793 ; BASIC: GET var 
                                   2794 ; receive a key in variable 
                                   2795 ; don't wait 
                                   2796 ;---------------------------
      002579                       2797 cmd_get:
      002579 CD 17 9D         [ 4] 2798 	call next_token 
      00257C A1 85            [ 1] 2799 	cp a,#TK_VAR 
      00257E 27 03            [ 1] 2800 	jreq 0$
      002580 CC 16 39         [ 2] 2801 	jp syntax_error 
      002583 CD 17 C5         [ 4] 2802 0$: call get_addr 
      002586 CF 00 19         [ 2] 2803 	ldw ptr16,x 
      002589 CD 08 E7         [ 4] 2804 	call qgetc 
      00258C 27 03            [ 1] 2805 	jreq 2$
      00258E CD 08 EE         [ 4] 2806 	call getc  
      002591 72 3F 00 19      [ 4] 2807 2$: clr [ptr16]
      002595 72 5C 00 1A      [ 1] 2808 	inc ptr8 
      002599 72 3F 00 19      [ 4] 2809 	clr [ptr16]
      00259D 72 5C 00 1A      [ 1] 2810 	inc ptr8 
      0025A1 72 C7 00 19      [ 4] 2811 	ld [ptr16],a 
      0025A5 81               [ 4] 2812 	ret 
                                   2813 
                                   2814 
                                   2815 ;-----------------
                                   2816 ; 1 Khz beep 
                                   2817 ;-----------------
      0025A6                       2818 beep_1khz:: 
      0025A6 90 89            [ 2] 2819 	pushw y 
      0025A8 AE 00 64         [ 2] 2820 	ldw x,#100
      0025AB 90 AE 03 E8      [ 2] 2821 	ldw y,#1000
      0025AF 20 22            [ 2] 2822 	jra beep
                                   2823 
                                   2824 ;-----------------------
                                   2825 ; BASIC: TONE expr1,expr2
                                   2826 ; used TIMER2 channel 1
                                   2827 ; to produce a tone 
                                   2828 ; arguments:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                   2829 ;    expr1   frequency 
                                   2830 ;    expr2   duration msec.
                                   2831 ;---------------------------
      0025B1                       2832 tone:
      0025B1 90 89            [ 2] 2833 	pushw y 
      0025B3 CD 19 65         [ 4] 2834 	call arg_list 
      0025B6 A1 02            [ 1] 2835 	cp a,#2 
      0025B8 27 03            [ 1] 2836 	jreq 1$
      0025BA CC 16 39         [ 2] 2837 	jp syntax_error 
      0025BD                       2838 1$: 
      0025BD                       2839 	_xpop 
      0025BD 90 F6            [ 1]    1     ld a,(y)
      0025BF 93               [ 1]    2     ldw x,y 
      0025C0 EE 01            [ 2]    3     ldw x,(1,x)
      0025C2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025C6 89               [ 2] 2840 	pushw x ; duration 
      0025C7                       2841 	_xpop ; frequency
      0025C7 90 F6            [ 1]    1     ld a,(y)
      0025C9 93               [ 1]    2     ldw x,y 
      0025CA EE 01            [ 2]    3     ldw x,(1,x)
      0025CC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025D0 90 93            [ 1] 2842 	ldw y,x ; frequency 
      0025D2 85               [ 2] 2843 	popw x  ; duration 
      0025D3                       2844 beep:  
      0025D3 89               [ 2] 2845 	pushw x 
      0025D4 AE F4 24         [ 2] 2846 	ldw x,#TIM2_CLK_FREQ
      0025D7 65               [ 2] 2847 	divw x,y ; cntr=Fclk/freq 
                                   2848 ; round to nearest integer 
      0025D8 90 A3 7A 12      [ 2] 2849 	cpw y,#TIM2_CLK_FREQ/2
      0025DC 2B 01            [ 1] 2850 	jrmi 2$
      0025DE 5C               [ 1] 2851 	incw x 
      0025DF                       2852 2$:	 
      0025DF 9E               [ 1] 2853 	ld a,xh 
      0025E0 C7 53 0D         [ 1] 2854 	ld TIM2_ARRH,a 
      0025E3 9F               [ 1] 2855 	ld a,xl 
      0025E4 C7 53 0E         [ 1] 2856 	ld TIM2_ARRL,a 
                                   2857 ; 50% duty cycle 
      0025E7 8C               [ 1] 2858 	ccf 
      0025E8 56               [ 2] 2859 	rrcw x 
      0025E9 9E               [ 1] 2860 	ld a,xh 
      0025EA C7 53 0F         [ 1] 2861 	ld TIM2_CCR1H,a 
      0025ED 9F               [ 1] 2862 	ld a,xl
      0025EE C7 53 10         [ 1] 2863 	ld TIM2_CCR1L,a
      0025F1 72 10 53 08      [ 1] 2864 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025F5 72 10 53 00      [ 1] 2865 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025F9 72 10 53 04      [ 1] 2866 	bset TIM2_EGR,#TIM2_EGR_UG
      0025FD 85               [ 2] 2867 	popw x 
      0025FE CD 2A 3F         [ 4] 2868 	call pause02
      002601 72 11 53 08      [ 1] 2869 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002605 72 11 53 00      [ 1] 2870 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002609 90 85            [ 2] 2871 	popw y 
      00260B 81               [ 4] 2872 	ret 
                                   2873 
                                   2874 ;-------------------------------
                                   2875 ; BASIC: ADCON 0|1 [,divisor]  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



                                   2876 ; disable/enanble ADC 
                                   2877 ;-------------------------------
                           000003  2878 	ONOFF=3 
                           000001  2879 	DIVSOR=1
                           000004  2880 	VSIZE=4 
      00260C                       2881 power_adc:
      00260C CD 19 65         [ 4] 2882 	call arg_list 
      00260F A1 02            [ 1] 2883 	cp a,#2	
      002611 27 12            [ 1] 2884 	jreq 1$
      002613 A1 01            [ 1] 2885 	cp a,#1 
      002615 27 03            [ 1] 2886 	jreq 0$ 
      002617 CC 16 39         [ 2] 2887 	jp syntax_error 
      00261A 4F               [ 1] 2888 0$:	clr a 
      00261B 5F               [ 1] 2889 	clrw x
      00261C                       2890 	_xpush   ; divisor  
      00261C 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002620 90 F7            [ 1]    2     ld (y),a 
      002622 90 EF 01         [ 2]    3     ldw (1,y),x 
      002625                       2891 1$: _at_next 
      002625 90 E6 03         [ 1]    1     ld a,(3,y)
      002628 93               [ 1]    2     ldw x,y 
      002629 EE 04            [ 2]    3     ldw x,(4,x)
      00262B 5D               [ 2] 2892 	tnzw x 
      00262C 27 25            [ 1] 2893 	jreq 2$ 
      00262E                       2894 	_xpop
      00262E 90 F6            [ 1]    1     ld a,(y)
      002630 93               [ 1]    2     ldw x,y 
      002631 EE 01            [ 2]    3     ldw x,(1,x)
      002633 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002637                       2895 	_xdrop  
      002637 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      00263B 9F               [ 1] 2896 	ld a,xl
      00263C A4 07            [ 1] 2897 	and a,#7
      00263E 4E               [ 1] 2898 	swap a 
      00263F C7 54 01         [ 1] 2899 	ld ADC_CR1,a
      002642 72 16 50 CA      [ 1] 2900 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002646 72 10 54 01      [ 1] 2901 	bset ADC_CR1,#ADC_CR1_ADON 
      00264A                       2902 	_usec_dly 7 
      00264A AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00264D 5A               [ 2]    2     decw x
      00264E 9D               [ 1]    3     nop 
      00264F 26 FA            [ 1]    4     jrne .-4
      002651 20 08            [ 2] 2903 	jra 3$
      002653 72 11 54 01      [ 1] 2904 2$: bres ADC_CR1,#ADC_CR1_ADON
      002657 72 17 50 CA      [ 1] 2905 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00265B                       2906 3$:	
      00265B 81               [ 4] 2907 	ret
                                   2908 
                                   2909 ;-----------------------------
                                   2910 ; BASIC: ADCREAD (channel)
                                   2911 ; read adc channel {0..5}
                                   2912 ; output:
                                   2913 ;   A 		TK_INTGR 
                                   2914 ;   X 		value 
                                   2915 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00265C                       2916 analog_read:
      00265C CD 19 60         [ 4] 2917 	call func_args 
      00265F A1 01            [ 1] 2918 	cp a,#1 
      002661 27 03            [ 1] 2919 	jreq 1$
      002663 CC 16 39         [ 2] 2920 	jp syntax_error
      002666                       2921 1$: _xpop 
      002666 90 F6            [ 1]    1     ld a,(y)
      002668 93               [ 1]    2     ldw x,y 
      002669 EE 01            [ 2]    3     ldw x,(1,x)
      00266B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00266F A3 00 05         [ 2] 2922 	cpw x,#5 
      002672 23 05            [ 2] 2923 	jrule 2$
      002674 A6 0A            [ 1] 2924 	ld a,#ERR_BAD_VALUE
      002676 CC 16 3B         [ 2] 2925 	jp tb_error 
      002679 9F               [ 1] 2926 2$: ld a,xl
      00267A C7 00 0E         [ 1] 2927 	ld acc8,a 
      00267D A6 05            [ 1] 2928 	ld a,#5
      00267F C0 00 0E         [ 1] 2929 	sub a,acc8 
      002682 C7 54 00         [ 1] 2930 	ld ADC_CSR,a
      002685 72 16 54 02      [ 1] 2931 	bset ADC_CR2,#ADC_CR2_ALIGN
      002689 72 10 54 01      [ 1] 2932 	bset ADC_CR1,#ADC_CR1_ADON
      00268D 72 0F 54 00 FB   [ 2] 2933 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002692 CE 54 04         [ 2] 2934 	ldw x,ADC_DRH
      002695 A6 84            [ 1] 2935 	ld a,#TK_INTGR
      002697 81               [ 4] 2936 	ret 
                                   2937 
                                   2938 ;-----------------------
                                   2939 ; BASIC: DREAD(pin)
                                   2940 ; Arduino pins 
                                   2941 ; read state of a digital pin 
                                   2942 ; pin# {0..15}
                                   2943 ; output:
                                   2944 ;    A 		TK_INTGR
                                   2945 ;    X      0|1 
                                   2946 ;-------------------------
                           000001  2947 	PINNO=1
                           000001  2948 	VSIZE=1
      002698                       2949 digital_read:
      002698                       2950 	_vars VSIZE 
      002698 52 01            [ 2]    1     sub sp,#VSIZE 
      00269A CD 19 60         [ 4] 2951 	call func_args
      00269D A1 01            [ 1] 2952 	cp a,#1
      00269F 27 03            [ 1] 2953 	jreq 1$
      0026A1 CC 16 39         [ 2] 2954 	jp syntax_error
      0026A4                       2955 1$: _xpop 
      0026A4 90 F6            [ 1]    1     ld a,(y)
      0026A6 93               [ 1]    2     ldw x,y 
      0026A7 EE 01            [ 2]    3     ldw x,(1,x)
      0026A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026AD A3 00 0F         [ 2] 2956 	cpw x,#15 
      0026B0 23 05            [ 2] 2957 	jrule 2$
      0026B2 A6 0A            [ 1] 2958 	ld a,#ERR_BAD_VALUE
      0026B4 CC 16 3B         [ 2] 2959 	jp tb_error 
      0026B7 CD 2B 82         [ 4] 2960 2$:	call select_pin 
      0026BA 6B 01            [ 1] 2961 	ld (PINNO,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0026BC E6 01            [ 1] 2962 	ld a,(GPIO_IDR,x)
      0026BE 0D 01            [ 1] 2963 	tnz (PINNO,sp)
      0026C0 27 05            [ 1] 2964 	jreq 8$
      0026C2 44               [ 1] 2965 3$: srl a 
      0026C3 0A 01            [ 1] 2966 	dec (PINNO,sp)
      0026C5 26 FB            [ 1] 2967 	jrne 3$ 
      0026C7 A4 01            [ 1] 2968 8$: and a,#1 
      0026C9 5F               [ 1] 2969 	clrw x 
      0026CA 97               [ 1] 2970 	ld xl,a 
      0026CB 4F               [ 1] 2971 	clr a 
      0026CC                       2972 	_drop VSIZE
      0026CC 5B 01            [ 2]    1     addw sp,#VSIZE 
      0026CE 81               [ 4] 2973 	ret
                                   2974 
                                   2975 
                                   2976 ;-----------------------
                                   2977 ; BASIC: DWRITE pin,0|1
                                   2978 ; Arduino pins 
                                   2979 ; write to a digital pin 
                                   2980 ; pin# {0..15}
                                   2981 ; output:
                                   2982 ;    A 		TK_INTGR
                                   2983 ;    X      0|1 
                                   2984 ;-------------------------
                           000001  2985 	PINNO=1
                           000002  2986 	PINVAL=2
                           000002  2987 	VSIZE=2
      0026CF                       2988 digital_write:
      0026CF                       2989 	_vars VSIZE 
      0026CF 52 02            [ 2]    1     sub sp,#VSIZE 
      0026D1 CD 19 65         [ 4] 2990 	call arg_list  
      0026D4 A1 02            [ 1] 2991 	cp a,#2 
      0026D6 27 03            [ 1] 2992 	jreq 1$
      0026D8 CC 16 39         [ 2] 2993 	jp syntax_error
      0026DB                       2994 1$: _xpop 
      0026DB 90 F6            [ 1]    1     ld a,(y)
      0026DD 93               [ 1]    2     ldw x,y 
      0026DE EE 01            [ 2]    3     ldw x,(1,x)
      0026E0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026E4 9F               [ 1] 2995 	ld a,xl 
      0026E5 6B 02            [ 1] 2996 	ld (PINVAL,sp),a
      0026E7                       2997 	_xpop 
      0026E7 90 F6            [ 1]    1     ld a,(y)
      0026E9 93               [ 1]    2     ldw x,y 
      0026EA EE 01            [ 2]    3     ldw x,(1,x)
      0026EC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026F0 A3 00 0F         [ 2] 2998 	cpw x,#15 
      0026F3 23 05            [ 2] 2999 	jrule 2$
      0026F5 A6 0A            [ 1] 3000 	ld a,#ERR_BAD_VALUE
      0026F7 CC 16 3B         [ 2] 3001 	jp tb_error 
      0026FA CD 2B 82         [ 4] 3002 2$:	call select_pin 
      0026FD 6B 01            [ 1] 3003 	ld (PINNO,sp),a 
      0026FF A6 01            [ 1] 3004 	ld a,#1
      002701 0D 01            [ 1] 3005 	tnz (PINNO,sp)
      002703 27 05            [ 1] 3006 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002705 48               [ 1] 3007 3$: sll a
      002706 0A 01            [ 1] 3008 	dec (PINNO,sp)
      002708 26 FB            [ 1] 3009 	jrne 3$
      00270A 0D 02            [ 1] 3010 4$: tnz (PINVAL,sp)
      00270C 26 05            [ 1] 3011 	jrne 5$
      00270E 43               [ 1] 3012 	cpl a 
      00270F E4 00            [ 1] 3013 	and a,(GPIO_ODR,x)
      002711 20 02            [ 2] 3014 	jra 8$
      002713 EA 00            [ 1] 3015 5$: or a,(GPIO_ODR,x)
      002715 E7 00            [ 1] 3016 8$: ld (GPIO_ODR,x),a 
      002717                       3017 	_drop VSIZE 
      002717 5B 02            [ 2]    1     addw sp,#VSIZE 
      002719 81               [ 4] 3018 	ret
                                   3019 
                                   3020 
                                   3021 ;-----------------------
                                   3022 ; BASIC: STOP
                                   3023 ; stop progam execution  
                                   3024 ; without resetting pointers 
                                   3025 ; the program is resumed
                                   3026 ; with RUN 
                                   3027 ;-------------------------
      00271A                       3028 stop:
      00271A 72 00 00 22 02   [ 2] 3029 	btjt flags,#FRUN,2$
      00271F 4F               [ 1] 3030 	clr a
      002720 81               [ 4] 3031 	ret 
      002721                       3032 2$:	 
                                   3033 ; create space on cstack to save context 
      002721 AE 27 48         [ 2] 3034 	ldw x,#break_point 
      002724 CD 09 3B         [ 4] 3035 	call puts 
      002727                       3036 	_drop 2 ;drop return address 
      002727 5B 02            [ 2]    1     addw sp,#2 
      002729                       3037 	_vars CTXT_SIZE ; context size 
      002729 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00272B CD 20 82         [ 4] 3038 	call save_context 
      00272E AE 16 90         [ 2] 3039 	ldw x,#tib 
      002731 CF 00 04         [ 2] 3040 	ldw basicptr,x
      002734 7F               [ 1] 3041 	clr (x)
      002735 72 5F 00 03      [ 1] 3042 	clr count  
      002739 5F               [ 1] 3043 	clrw x 
      00273A CF 00 00         [ 2] 3044 	ldw in.w,x
      00273D 72 11 00 22      [ 1] 3045 	bres flags,#FRUN 
      002741 72 18 00 22      [ 1] 3046 	bset flags,#FBREAK
      002745 CC 16 E4         [ 2] 3047 	jp interpreter 
      002748 0A 62 72 65 61 6B 20  3048 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3049 
                                   3050 ;-----------------------
                                   3051 ; BASIC: NEW
                                   3052 ; from command line only 
                                   3053 ; free program memory
                                   3054 ; and clear variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   3055 ;------------------------
      002766                       3056 new: 
      002766 72 01 00 22 01   [ 2] 3057 	btjf flags,#FRUN,0$ 
      00276B 81               [ 4] 3058 	ret 
      00276C                       3059 0$:	
      00276C CD 14 71         [ 4] 3060 	call clear_basic 
      00276F 81               [ 4] 3061 	ret 
                                   3062 
                                   3063 ;-----------------------------------
                                   3064 ; BASIC: ERASE \E | \F 
                                   3065 ; erase all block in range from 
                                   3066 ;  'app_space' to FLASH end (0x20000)
                                   3067 ;  or all EEPROM 
                                   3068 ; that contains a non zero byte.  
                                   3069 ;-----------------------------------
                           000001  3070 	LIMIT=1 
                           000003  3071 	VSIZE = 3 
      002770                       3072 erase:
      002770 72 5F 00 18      [ 1] 3073 	clr farptr 
      002774                       3074 	_vars VSIZE 
      002774 52 03            [ 2]    1     sub sp,#VSIZE 
      002776 CD 17 9D         [ 4] 3075 	call next_token 
      002779 A1 04            [ 1] 3076 	cp a,#TK_CHAR 
      00277B 27 03            [ 1] 3077 	jreq 0$ 
      00277D CC 16 39         [ 2] 3078 	jp syntax_error
      002780 CD 17 DF         [ 4] 3079 0$: call get_char 
      002783 A4 DF            [ 1] 3080 	and a,#0XDF 
      002785 A1 45            [ 1] 3081 	cp a,#'E
      002787 26 0C            [ 1] 3082 	jrne 1$
      002789 AE 40 00         [ 2] 3083 	ldw x,#EEPROM_BASE 
      00278C CF 00 19         [ 2] 3084 	ldw farptr+1,x 
      00278F AE 47 FF         [ 2] 3085 	ldw x,#EEPROM_END
      002792 4F               [ 1] 3086 	clr a 
      002793 20 15            [ 2] 3087 	jra 3$ 
      002795 A1 46            [ 1] 3088 1$: cp a,#'F 
      002797 27 06            [ 1] 3089 	jreq 2$
      002799 AE 15 5D         [ 2] 3090 	ldw x,#err_bad_value
      00279C CC 16 3B         [ 2] 3091 	jp tb_error
      00279F                       3092 2$:
      00279F AE 36 00         [ 2] 3093 	ldw x,#app_space  
      0027A2 CF 00 19         [ 2] 3094 	ldw farptr+1,x 
      0027A5 A6 02            [ 1] 3095 	ld a,#(FLASH_END>>16)&0XFF 
      0027A7 AE 7F FF         [ 2] 3096 	ldw x,#FLASH_END&0xffff
      0027AA                       3097 3$:
      0027AA 6B 01            [ 1] 3098 	ld (LIMIT,sp),a 
      0027AC 1F 02            [ 2] 3099 	ldw (LIMIT+1,sp),x 
                                   3100  ; operation done from RAM
                                   3101  ; copy code to RAM in tib   
      0027AE CD 06 DC         [ 4] 3102 	call move_erase_to_ram
      0027B1                       3103 4$:	 
      0027B1 CD 08 5E         [ 4] 3104     call scan_block 
      0027B4 27 08            [ 1] 3105 	jreq 5$  ; block already erased 
      0027B6 A6 45            [ 1] 3106     ld a,#'E 
      0027B8 CD 08 DE         [ 4] 3107     call putc 
      0027BB CD 07 5A         [ 4] 3108 	call block_erase   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



                                   3109 ; this block is clean, next  
      0027BE AE 00 80         [ 2] 3110 5$:	ldw x,#BLOCK_SIZE
      0027C1 CD 08 50         [ 4] 3111 	call incr_farptr
                                   3112 ; check limit, 24 bit substraction  	
      0027C4 7B 01            [ 1] 3113 	ld a,(LIMIT,sp)
      0027C6 1E 02            [ 2] 3114 	ldw x,(LIMIT+1,sp)
      0027C8 72 B0 00 19      [ 2] 3115 	subw x,farptr+1
      0027CC C2 00 18         [ 1] 3116 	sbc a,farptr 
      0027CF 22 E0            [ 1] 3117 	jrugt 4$ 
      0027D1 CD 14 71         [ 4] 3118 9$: call clear_basic
      0027D4 1E 02            [ 2] 3119 	ldw x,(LIMIT+1,sp)
      0027D6 A3 47 FF         [ 2] 3120 	cpw x,#EEPROM_END
      0027D9 26 03            [ 1] 3121 	jrne 10$
      0027DB CD 1D 41         [ 4] 3122 	call func_eefree 
      0027DE                       3123 10$:
      0027DE                       3124 	_drop VSIZE 
      0027DE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0027E0 81               [ 4] 3125 	ret 
                                   3126 	
                                   3127 
                                   3128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3129 ;  check for application signature 
                                   3130 ; output:
                                   3131 ;   Carry    0 app present 
                                   3132 ;            1 no app installed  
                                   3133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E1                       3134 qsign: 
      0027E1 CE 36 00         [ 2] 3135 	ldw x,app_sign 
      0027E4 C3 28 A1         [ 2] 3136 	cpw x,SIGNATURE ; "TB" 
      0027E7 81               [ 4] 3137 	ret 
                                   3138 
                                   3139 ;--------------------------------------
                                   3140 ;  fill write buffer 
                                   3141 ;  input:
                                   3142 ;    y  point to output buffer 
                                   3143 ;    x  point to source 
                                   3144 ;    a  bytes to write in buffer 
                                   3145 ;  output:
                                   3146 ;    y   += A 
                                   3147 ;    X   += A 
                                   3148 ;    A   0 
                                   3149 ;---------------------------------------
      0027E8                       3150 fill_write_buffer:
      0027E8 88               [ 1] 3151 	push a 
      0027E9 4D               [ 1] 3152 	tnz a 
      0027EA 27 0A            [ 1] 3153 	jreq 9$ 
      0027EC F6               [ 1] 3154 1$: ld a,(x)
      0027ED 5C               [ 1] 3155 	incw x 
      0027EE 90 F7            [ 1] 3156 	ld (y),a 
      0027F0 90 5C            [ 1] 3157 	incw y 
      0027F2 0A 01            [ 1] 3158 	dec (1,sp) 
      0027F4 26 F6            [ 1] 3159 	jrne 1$ 
      0027F6 84               [ 1] 3160 9$:	pop a 
      0027F7 81               [ 4] 3161     ret 	
                                   3162 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   3163 ;--------------------------------------
                                   3164 ;  fill pad buffer with zero 
                                   3165 ;  input:
                                   3166 ;	none 
                                   3167 ;  output:
                                   3168 ;    y     buffer address  
                                   3169 ;--------------------------------------
      0027F8                       3170 clear_block_buffer:
      0027F8 88               [ 1] 3171 	push a 
      0027F9 90 AE 16 E0      [ 2] 3172 	ldw y,#block_buffer 
      0027FD 90 89            [ 2] 3173 	pushw y
      0027FF A6 80            [ 1] 3174 	ld a,#BLOCK_SIZE   
      002801 90 7F            [ 1] 3175 1$:	clr (y)
      002803 90 5C            [ 1] 3176 	incw y
      002805 4A               [ 1] 3177 	dec a  
      002806 26 F9            [ 1] 3178 	jrne 1$ 	
      002808 90 85            [ 2] 3179 9$: popw y 
      00280A 84               [ 1] 3180 	pop a 			
      00280B 81               [ 4] 3181 	ret 
                                   3182 
                                   3183 
                                   3184 ;---------------------------------------
                                   3185 ; BASIC: SAVE
                                   3186 ; write application from RAM to FLASH
                                   3187 ; at UFLASH address
                                   3188 ;--------------------------------------
                           000001  3189 	XTEMP=1
                           000003  3190 	COUNT=3  ; last count bytes written 
                           000004  3191 	CNT_LO=4 ; count low byte 
                           000005  3192 	TOWRITE=5 ; how bytes left to write  
                           000006  3193 	VSIZE=6 
      00280C                       3194 save_app:
      00280C 89               [ 2] 3195 	pushw x 
      00280D 90 89            [ 2] 3196 	pushw y 
      00280F                       3197 	_vars VSIZE
      00280F 52 06            [ 2]    1     sub sp,#VSIZE 
      002811 CD 27 E1         [ 4] 3198 	call qsign 
      002814 26 09            [ 1] 3199 	jrne 1$
      002816 AE 28 A3         [ 2] 3200 	ldw x,#CANT_DO 
      002819 CD 09 3B         [ 4] 3201 	call puts 
      00281C CC 28 9B         [ 2] 3202 	jp 9$
      00281F                       3203 1$: 
      00281F CE 00 1B         [ 2] 3204 	ldw x,txtbgn
      002822 C3 00 1D         [ 2] 3205 	cpw x,txtend 
      002825 25 09            [ 1] 3206 	jrult 2$ 
      002827 AE 28 E5         [ 2] 3207 	ldw x,#NO_APP
      00282A CD 09 3B         [ 4] 3208 	call puts 
      00282D CC 28 9B         [ 2] 3209 	jp 9$
      002830                       3210 2$: 
                                   3211 ; block programming flash
                                   3212 ; must be done from RAM
                                   3213 ; moved in tib  
      002830 CD 07 1C         [ 4] 3214 	call move_prg_to_ram
                                   3215 ; initialize farptr 
                                   3216 ; to app_sign address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002833 72 5F 00 18      [ 1] 3217 	clr farptr 
      002837 AE 36 00         [ 2] 3218 	ldw x,#app_sign 
      00283A CF 00 19         [ 2] 3219 	ldw farptr+1,x
                                   3220 ; initialize local variables 
      00283D CD 1E 5B         [ 4] 3221 	call prog_size
      002840 1F 05            [ 2] 3222 	ldw (TOWRITE,sp),x
      002842 0F 03            [ 1] 3223 	clr (COUNT,sp)
                                   3224 ; first bock 
                                   3225 ; containt signature 2 bytes 
                                   3226 ; and size 	2 bytes 
                                   3227 ; use Y as pointer to block_buffer
      002844 CD 27 F8         [ 4] 3228 	call clear_block_buffer ; -- y=*block_buffer	
                                   3229 ; write signature
      002847 CE 28 A1         [ 2] 3230 	ldw x,SIGNATURE ; "BC" 
      00284A 90 FF            [ 2] 3231 	ldw (y),x 
      00284C 72 A9 00 02      [ 2] 3232 	addw y,#2
      002850 1E 05            [ 2] 3233 	ldw x,(TOWRITE,sp)
      002852 90 FF            [ 2] 3234 	ldw (y),x
      002854 72 A9 00 02      [ 2] 3235 	addw y,#2   
      002858 A6 7C            [ 1] 3236 	ld a,#(BLOCK_SIZE-4)
      00285A 6B 04            [ 1] 3237 	ld (CNT_LO,sp),a 
      00285C A3 00 7C         [ 2] 3238 	cpw x,#(BLOCK_SIZE-4) 
      00285F 22 01            [ 1] 3239 	jrugt 3$
      002861 9F               [ 1] 3240 	ld a,xl 
      002862 6B 04            [ 1] 3241 3$:	ld (CNT_LO,sp),a   
      002864 CE 00 1B         [ 2] 3242 	ldw x,txtbgn 
      002867 1F 01            [ 2] 3243 	ldw (XTEMP,sp),x 
      002869                       3244 32$: 
      002869 1E 01            [ 2] 3245 	ldw x,(XTEMP,sp)
      00286B 7B 04            [ 1] 3246 	ld a,(CNT_LO,sp)
      00286D CD 27 E8         [ 4] 3247 	call fill_write_buffer 
      002870 1F 01            [ 2] 3248 	ldw (XTEMP,sp),x 
      002872 AE 16 E0         [ 2] 3249 	ldw x,#block_buffer
      002875 CD 07 36         [ 4] 3250 	call write_buffer
      002878 AE 00 80         [ 2] 3251 	ldw x,#BLOCK_SIZE 
      00287B CD 08 50         [ 4] 3252 	call incr_farptr  
                                   3253 ; following blocks 
      00287E 1E 01            [ 2] 3254 	ldw x,(XTEMP,sp)
      002880 C3 00 1D         [ 2] 3255 	cpw x,txtend 
      002883 24 16            [ 1] 3256 	jruge 9$ 
      002885 1E 05            [ 2] 3257 	ldw x,(TOWRITE,sp)
      002887 72 F0 03         [ 2] 3258 	subw x,(COUNT,sp)
      00288A 1F 05            [ 2] 3259 	ldw (TOWRITE,sp),x 
      00288C A6 80            [ 1] 3260 	ld a,#BLOCK_SIZE 
      00288E A3 00 80         [ 2] 3261 	cpw x,#BLOCK_SIZE 
      002891 24 01            [ 1] 3262 	jruge 4$ 
      002893 9F               [ 1] 3263 	ld a,xl 
      002894 6B 04            [ 1] 3264 4$:	ld (CNT_LO,sp),a 
      002896 CD 27 F8         [ 4] 3265 	call clear_block_buffer 
      002899 20 CE            [ 2] 3266 	jra 32$ 
      00289B                       3267 9$:	_drop VSIZE 
      00289B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00289D 90 85            [ 2] 3268     popw y 
      00289F 85               [ 2] 3269 	popw x 
      0028A0 81               [ 4] 3270 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3271 
                                   3272 
      0028A1 54 42                 3273 SIGNATURE: .ascii "TB"
      0028A3 43 61 6E 27 74 20 66  3274 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0028E5 4E 6F 20 61 70 70 6C  3275 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3276 
                                   3277 ;---------------------
                                   3278 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3279 ; write 1 or more byte to FLASH or EEPROM
                                   3280 ; starting at address  
                                   3281 ; input:
                                   3282 ;   expr1  	is address 
                                   3283 ;   expr2,...,exprn   are bytes to write
                                   3284 ; output:
                                   3285 ;   none 
                                   3286 ;---------------------
      0028FB                       3287 write:
      0028FB CD 1A A9         [ 4] 3288 	call expression
      0028FE A1 84            [ 1] 3289 	cp a,#TK_INTGR 
      002900 27 03            [ 1] 3290 	jreq 0$
      002902 CC 16 39         [ 2] 3291 	jp syntax_error
      002905                       3292 0$: _xpop 
      002905 90 F6            [ 1]    1     ld a,(y)
      002907 93               [ 1]    2     ldw x,y 
      002908 EE 01            [ 2]    3     ldw x,(1,x)
      00290A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00290E C7 00 18         [ 1] 3293 	ld farptr,a 
      002911 CF 00 19         [ 2] 3294 	ldw ptr16,x 
      002914                       3295 1$:	
      002914 CD 17 9D         [ 4] 3296 	call next_token 
      002917 A1 08            [ 1] 3297 	cp a,#TK_COMMA 
      002919 27 02            [ 1] 3298 	jreq 2$ 
      00291B 20 20            [ 2] 3299 	jra 9$ ; no more data 
      00291D CD 1A A9         [ 4] 3300 2$:	call expression
      002920 A1 84            [ 1] 3301 	cp a,#TK_INTGR
      002922 27 03            [ 1] 3302 	jreq 3$
      002924 CC 16 39         [ 2] 3303 	jp syntax_error
      002927                       3304 3$:	_xpop 
      002927 90 F6            [ 1]    1     ld a,(y)
      002929 93               [ 1]    2     ldw x,y 
      00292A EE 01            [ 2]    3     ldw x,(1,x)
      00292C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002930 9F               [ 1] 3305 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      002931 5F               [ 1] 3306 	clrw x 
      002932 CD 07 80         [ 4] 3307 	call write_byte
      002935 AE 00 01         [ 2] 3308 	ldw x,#1 
      002938 CD 08 50         [ 4] 3309 	call incr_farptr 
      00293B 20 D7            [ 2] 3310 	jra 1$ 
      00293D                       3311 9$:
      00293D 81               [ 4] 3312 	ret 
                                   3313 
                                   3314 
                                   3315 ;---------------------
                                   3316 ;BASIC: CHAR(expr)
                                   3317 ; évaluate expression 
                                   3318 ; and take the 7 least 
                                   3319 ; bits as ASCII character
                                   3320 ; output: 
                                   3321 ; 	A char 
                                   3322 ;---------------------
      00293E                       3323 func_char:
      00293E CD 19 60         [ 4] 3324 	call func_args 
      002941 A1 01            [ 1] 3325 	cp a,#1
      002943 27 03            [ 1] 3326 	jreq 1$
      002945 CC 16 39         [ 2] 3327 	jp syntax_error
      002948                       3328 1$:	_xpop
      002948 90 F6            [ 1]    1     ld a,(y)
      00294A 93               [ 1]    2     ldw x,y 
      00294B EE 01            [ 2]    3     ldw x,(1,x)
      00294D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002951 9F               [ 1] 3329 	ld a,xl
      002952 A4 7F            [ 1] 3330 	and a,#0x7f 
      002954 81               [ 4] 3331 	ret
                                   3332 
                                   3333 ;---------------------
                                   3334 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3335 ; extract first character 
                                   3336 ; of string argument 
                                   3337 ; output:
                                   3338 ;    A:X    int24 
                                   3339 ;---------------------
      002955                       3340 ascii:
      002955 A6 06            [ 1] 3341 	ld a,#TK_LPAREN
      002957 CD 19 53         [ 4] 3342 	call expect 
      00295A CD 17 9D         [ 4] 3343 	call next_token 
      00295D A1 02            [ 1] 3344 	cp a,#TK_QSTR 
      00295F 27 0E            [ 1] 3345 	jreq 1$
      002961 A1 04            [ 1] 3346 	cp a,#TK_CHAR 
      002963 27 12            [ 1] 3347 	jreq 2$ 
      002965 A1 82            [ 1] 3348 	cp a,#TK_CFUNC 
      002967 27 03            [ 1] 3349 	jreq 0$
      002969 CC 16 39         [ 2] 3350 	jp syntax_error
      00296C                       3351 0$: ; cfunc 
      00296C FD               [ 4] 3352 	call (x)
      00296D 20 0B            [ 2] 3353 	jra 3$
      00296F                       3354 1$: ; quoted string 
      00296F F6               [ 1] 3355 	ld a,(x)
      002970 88               [ 1] 3356 	push a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002971 CD 17 B6         [ 4] 3357 	call skip_string
      002974 84               [ 1] 3358 	pop a  	
      002975 20 03            [ 2] 3359 	jra 3$ 
      002977                       3360 2$: ; character 
      002977 CD 17 DF         [ 4] 3361 	call get_char 
      00297A 5F               [ 1] 3362 3$:	clrw x 
      00297B 02               [ 1] 3363 	rlwa x   
      00297C                       3364 4$:	_xpush  
      00297C 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002980 90 F7            [ 1]    2     ld (y),a 
      002982 90 EF 01         [ 2]    3     ldw (1,y),x 
      002985 A6 07            [ 1] 3365 	ld a,#TK_RPAREN 
      002987 CD 19 53         [ 4] 3366 	call expect
      00298A                       3367 9$:	
      00298A                       3368 	_xpop  
      00298A 90 F6            [ 1]    1     ld a,(y)
      00298C 93               [ 1]    2     ldw x,y 
      00298D EE 01            [ 2]    3     ldw x,(1,x)
      00298F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002993 81               [ 4] 3369 	ret 
                                   3370 
                                   3371 ;---------------------
                                   3372 ;BASIC: KEY
                                   3373 ; wait for a character 
                                   3374 ; received from STDIN 
                                   3375 ; input:
                                   3376 ;	none 
                                   3377 ; output:
                                   3378 ;	a	 character 
                                   3379 ;---------------------
      002994                       3380 key:
      002994 CD 08 EE         [ 4] 3381 	call getc 
      002997 81               [ 4] 3382 	ret
                                   3383 
                                   3384 ;----------------------
                                   3385 ; BASIC: QKEY
                                   3386 ; Return true if there 
                                   3387 ; is a character in 
                                   3388 ; waiting in STDIN 
                                   3389 ; input:
                                   3390 ;  none 
                                   3391 ; output:
                                   3392 ;   A     0|-1
                                   3393 ;-----------------------
      002998                       3394 qkey:: 
      002998 5F               [ 1] 3395 	clrw x 
      002999 C6 00 2E         [ 1] 3396 	ld a,rx1_head
      00299C C0 00 2F         [ 1] 3397 	sub a,rx1_tail 
      00299F 27 03            [ 1] 3398 	jreq 9$ 
      0029A1 53               [ 2] 3399 	cplw x
      0029A2 A6 FF            [ 1] 3400 	ld a,#255    
      0029A4                       3401 9$: 
      0029A4 81               [ 4] 3402 	ret 
                                   3403 
                                   3404 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3405 ; BASIC: GPIO(port,reg)
                                   3406 ; return gpio register address 
                                   3407 ; expr {PORTA..PORTI}
                                   3408 ; input:
                                   3409 ;   none 
                                   3410 ; output:
                                   3411 ;   A:X 	gpio register address
                                   3412 ;----------------------------
                                   3413 ;	N=PORT
                                   3414 ;	T=REG 
      0029A5                       3415 gpio:
      0029A5 CD 19 60         [ 4] 3416 	call func_args 
      0029A8 A1 02            [ 1] 3417 	cp a,#2
      0029AA 27 03            [ 1] 3418 	jreq 1$
      0029AC CC 16 39         [ 2] 3419 	jp syntax_error  
      0029AF                       3420 1$:	_at_next 
      0029AF 90 E6 03         [ 1]    1     ld a,(3,y)
      0029B2 93               [ 1]    2     ldw x,y 
      0029B3 EE 04            [ 2]    3     ldw x,(4,x)
      0029B5 A3 50 00         [ 2] 3421 	cpw x,#PA_BASE 
      0029B8 2B 16            [ 1] 3422 	jrmi bad_port
      0029BA A3 50 29         [ 2] 3423 	cpw x,#PI_BASE+1 
      0029BD 2A 11            [ 1] 3424 	jrpl bad_port
      0029BF 89               [ 2] 3425 	pushw x 
      0029C0                       3426 	_xpop
      0029C0 90 F6            [ 1]    1     ld a,(y)
      0029C2 93               [ 1]    2     ldw x,y 
      0029C3 EE 01            [ 2]    3     ldw x,(1,x)
      0029C5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C9 72 FB 01         [ 2] 3427 	addw x,(1,sp)
      0029CC                       3428 	_drop 2 
      0029CC 5B 02            [ 2]    1     addw sp,#2 
      0029CE 4F               [ 1] 3429 	clr a 
      0029CF 81               [ 4] 3430 	ret
      0029D0                       3431 bad_port:
      0029D0 A6 0A            [ 1] 3432 	ld a,#ERR_BAD_VALUE
      0029D2 CC 16 3B         [ 2] 3433 	jp tb_error
                                   3434 
                                   3435 
                                   3436 ;-------------------------
                                   3437 ; BASIC: UFLASH 
                                   3438 ; return free flash address
                                   3439 ; align to BLOCK address 
                                   3440 ; input:
                                   3441 ;  none 
                                   3442 ; output:
                                   3443 ;	A		TK_INTGR
                                   3444 ;   xstack	free address 
                                   3445 ;---------------------------
      0029D5                       3446 uflash:
      0029D5 CD 27 E1         [ 4] 3447 	call qsign 
      0029D8 26 13            [ 1] 3448 	jrne 1$
      0029DA AE 36 00         [ 2] 3449 	ldw x,#app_space 
      0029DD 72 BB 36 02      [ 2] 3450 	addw x,app_size 
      0029E1 1C 00 04         [ 2] 3451 	addw x,#4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3452 ; align on 128 bytes block 
      0029E4 1C 00 80         [ 2] 3453 	addw x,#BLOCK_SIZE 
      0029E7 9F               [ 1] 3454 	ld a,xl 
      0029E8 A4 80            [ 1] 3455 	and a,#0x80 
      0029EA 97               [ 1] 3456 	ld xl,a 
      0029EB 20 03            [ 2] 3457 	jra 2$
      0029ED AE 36 00         [ 2] 3458 1$:	ldw x,#app_space 
      0029F0                       3459 2$:
      0029F0 4F               [ 1] 3460 	clr a 
      0029F1 81               [ 4] 3461 	ret 
                                   3462 
                                   3463 
                                   3464 ;---------------------
                                   3465 ; BASIC: USR(addr,arg)
                                   3466 ; execute a function written 
                                   3467 ; in binary code.
                                   3468 ; input:
                                   3469 ;   addr	routine address 
                                   3470 ;   arg 	is an argument
                                   3471 ;           it can be ignore 
                                   3472 ;           by cally. 
                                   3473 ; output:
                                   3474 ;   xstack 	value returned by cally  
                                   3475 ;---------------------
      0029F2                       3476 usr:
      0029F2 CD 19 60         [ 4] 3477 	call func_args 
      0029F5 A1 02            [ 1] 3478 	cp a,#2
      0029F7 27 03            [ 1] 3479 	jreq 1$  
      0029F9 CC 16 39         [ 2] 3480 	jp syntax_error 
      0029FC                       3481 1$: 
      0029FC                       3482 	_at_next ; A:X addr 
      0029FC 90 E6 03         [ 1]    1     ld a,(3,y)
      0029FF 93               [ 1]    2     ldw x,y 
      002A00 EE 04            [ 2]    3     ldw x,(4,x)
      002A02 CF 00 19         [ 2] 3483 	ldw ptr16,X 
      002A05                       3484 	_xpop  ; arg 
      002A05 90 F6            [ 1]    1     ld a,(y)
      002A07 93               [ 1]    2     ldw x,y 
      002A08 EE 01            [ 2]    3     ldw x,(1,x)
      002A0A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A0E                       3485 	_store_top ; overwrite addr 
      002A0E 90 F7            [ 1]    1     ld (y),a 
      002A10 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A13 72 CD 00 19      [ 6] 3486     call [ptr16]
      002A17 81               [ 4] 3487 	ret 
                                   3488 
                                   3489 
                                   3490 ;------------------------------
                                   3491 ; BASIC: BYE 
                                   3492 ; halt mcu in its lowest power mode 
                                   3493 ; wait for reset or external interrupt
                                   3494 ; do a cold start on wakeup.
                                   3495 ;------------------------------
      002A18                       3496 bye:
      002A18 72 0D 52 30 FB   [ 2] 3497 	btjf UART1_SR,#UART_SR_TC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002A1D 8E               [10] 3498 	halt
      002A1E CC 00 B8         [ 2] 3499 	jp cold_start  
                                   3500 
                                   3501 ;----------------------------------
                                   3502 ; BASIC: SLEEP 
                                   3503 ; halt mcu until reset or external
                                   3504 ; interrupt.
                                   3505 ; Resume progam after SLEEP command
                                   3506 ;----------------------------------
      002A21                       3507 sleep:
      002A21 72 0D 52 30 FB   [ 2] 3508 	btjf UART1_SR,#UART_SR_TC,.
      002A26 72 16 00 22      [ 1] 3509 	bset flags,#FSLEEP
      002A2A 8E               [10] 3510 	halt 
      002A2B 81               [ 4] 3511 	ret 
                                   3512 
                                   3513 ;-------------------------------
                                   3514 ; BASIC: PAUSE expr 
                                   3515 ; suspend execution for n msec.
                                   3516 ; input:
                                   3517 ;	none
                                   3518 ; output:
                                   3519 ;	none 
                                   3520 ;------------------------------
      002A2C                       3521 pause:
      002A2C CD 1A A9         [ 4] 3522 	call expression
      002A2F A1 84            [ 1] 3523 	cp a,#TK_INTGR
      002A31 27 03            [ 1] 3524 	jreq 1$ 
      002A33 CC 16 39         [ 2] 3525 	jp syntax_error
      002A36                       3526 1$: _xpop 
      002A36 90 F6            [ 1]    1     ld a,(y)
      002A38 93               [ 1]    2     ldw x,y 
      002A39 EE 01            [ 2]    3     ldw x,(1,x)
      002A3B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A3F                       3527 pause02:
      002A3F CF 00 12         [ 2] 3528 	ldw timer,x 
      002A42 CE 00 12         [ 2] 3529 1$: ldw x,timer 
      002A45 5D               [ 2] 3530 	tnzw x 
      002A46 27 03            [ 1] 3531 	jreq 2$
      002A48 8F               [10] 3532 	wfi 
      002A49 26 F7            [ 1] 3533 	jrne 1$
      002A4B                       3534 2$:	
      002A4B 81               [ 4] 3535 	ret 
                                   3536 
                                   3537 ;------------------------------
                                   3538 ; BASIC: AWU expr
                                   3539 ; halt mcu for 'expr' milliseconds
                                   3540 ; use Auto wakeup peripheral
                                   3541 ; all oscillators stopped except LSI
                                   3542 ; range: 1ms - 511ms
                                   3543 ; input:
                                   3544 ;  none
                                   3545 ; output:
                                   3546 ;  none:
                                   3547 ;------------------------------
      002A4C                       3548 awu:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002A4C CD 1A A9         [ 4] 3549   call expression
      002A4F A1 84            [ 1] 3550   cp a,#TK_INTGR
      002A51 27 03            [ 1] 3551   jreq 1$
      002A53 CC 16 39         [ 2] 3552   jp syntax_error
      002A56                       3553 1$: _xpop 
      002A56 90 F6            [ 1]    1     ld a,(y)
      002A58 93               [ 1]    2     ldw x,y 
      002A59 EE 01            [ 2]    3     ldw x,(1,x)
      002A5B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A5F                       3554 awu02:
      002A5F A3 14 00         [ 2] 3555   cpw x,#5120
      002A62 2B 0C            [ 1] 3556   jrmi 1$ 
      002A64 35 0F 50 F2      [ 1] 3557   mov AWU_TBR,#15 
      002A68 A6 1E            [ 1] 3558   ld a,#30
      002A6A 62               [ 2] 3559   div x,a
      002A6B A6 10            [ 1] 3560   ld a,#16
      002A6D 62               [ 2] 3561   div x,a 
      002A6E 20 1E            [ 2] 3562   jra 4$
      002A70                       3563 1$: 
      002A70 A3 08 00         [ 2] 3564   cpw x,#2048
      002A73 2B 09            [ 1] 3565   jrmi 2$ 
      002A75 35 0E 50 F2      [ 1] 3566   mov AWU_TBR,#14
      002A79 A6 50            [ 1] 3567   ld a,#80
      002A7B 62               [ 2] 3568   div x,a 
      002A7C 20 10            [ 2] 3569   jra 4$   
      002A7E                       3570 2$:
      002A7E 35 07 50 F2      [ 1] 3571   mov AWU_TBR,#7
      002A82                       3572 3$:  
                                   3573 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A82 A3 00 40         [ 2] 3574   cpw x,#64 
      002A85 23 07            [ 2] 3575   jrule 4$ 
      002A87 72 5C 50 F2      [ 1] 3576   inc AWU_TBR 
      002A8B 54               [ 2] 3577   srlw x 
      002A8C 20 F4            [ 2] 3578   jra 3$ 
      002A8E                       3579 4$:
      002A8E 9F               [ 1] 3580   ld a, xl
      002A8F 4A               [ 1] 3581   dec a 
      002A90 27 01            [ 1] 3582   jreq 5$
      002A92 4A               [ 1] 3583   dec a 	
      002A93                       3584 5$: 
      002A93 A4 3E            [ 1] 3585   and a,#0x3e 
      002A95 C7 50 F1         [ 1] 3586   ld AWU_APR,a 
      002A98 72 18 50 F0      [ 1] 3587   bset AWU_CSR,#AWU_CSR_AWUEN
      002A9C 8E               [10] 3588   halt 
                                   3589 
      002A9D 81               [ 4] 3590   ret 
                                   3591 
                                   3592 ;------------------------------
                                   3593 ; BASIC: TICKS
                                   3594 ; return msec ticks counter value 
                                   3595 ; input:
                                   3596 ; 	none 
                                   3597 ; output:
                                   3598 ;	X 		TK_INTGR
                                   3599 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002A9E                       3600 get_ticks:
      002A9E C6 00 0F         [ 1] 3601 	ld a,ticks 
      002AA1 CE 00 10         [ 2] 3602 	ldw x,ticks+1 
      002AA4 81               [ 4] 3603 	ret 
                                   3604 
                                   3605 ;------------------------------
                                   3606 ; BASIC: ABS(expr)
                                   3607 ; return absolute value of expr.
                                   3608 ; input:
                                   3609 ;   none
                                   3610 ; output:
                                   3611 ;   xstack    positive int24 
                                   3612 ;-------------------------------
      002AA5                       3613 abs:
      002AA5 CD 19 60         [ 4] 3614 	call func_args 
      002AA8 A1 01            [ 1] 3615 	cp a,#1 
      002AAA 27 03            [ 1] 3616 	jreq 0$ 
      002AAC CC 16 39         [ 2] 3617 	jp syntax_error
      002AAF                       3618 0$:  
      002AAF CD 01 E3         [ 4] 3619 	call abs24 
      002AB2                       3620 	_xpop 
      002AB2 90 F6            [ 1]    1     ld a,(y)
      002AB4 93               [ 1]    2     ldw x,y 
      002AB5 EE 01            [ 2]    3     ldw x,(1,x)
      002AB7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ABB 81               [ 4] 3621 	ret 
                                   3622 
                                   3623 ;------------------------------
                                   3624 ; BASIC: LSHIFT(expr1,expr2)
                                   3625 ; logical shift left expr1 by 
                                   3626 ; expr2 bits 
                                   3627 ; output:
                                   3628 ; 	A:x 	result 
                                   3629 ;------------------------------
      002ABC                       3630 lshift:
      002ABC CD 19 60         [ 4] 3631 	call func_args
      002ABF A1 02            [ 1] 3632 	cp a,#2 
      002AC1 27 03            [ 1] 3633 	jreq 1$
      002AC3 CC 16 39         [ 2] 3634 	jp syntax_error
      002AC6                       3635 1$: _xpop 
      002AC6 90 F6            [ 1]    1     ld a,(y)
      002AC8 93               [ 1]    2     ldw x,y 
      002AC9 EE 01            [ 2]    3     ldw x,(1,x)
      002ACB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ACF 9F               [ 1] 3636 	ld a,xl 
      002AD0 88               [ 1] 3637 	push a      
      002AD1                       3638 	_xpop  ; T>A:X 
      002AD1 90 F6            [ 1]    1     ld a,(y)
      002AD3 93               [ 1]    2     ldw x,y 
      002AD4 EE 01            [ 2]    3     ldw x,(1,x)
      002AD6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ADA 0D 01            [ 1] 3639 	tnz (1,sp) 
      002ADC 27 07            [ 1] 3640 	jreq 4$
      002ADE 98               [ 1] 3641 2$:	rcf 
      002ADF 59               [ 2] 3642 	rlcw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002AE0 49               [ 1] 3643 	rlc a 
      002AE1 0A 01            [ 1] 3644 	dec (1,sp) 
      002AE3 26 F9            [ 1] 3645 	jrne 2$
      002AE5                       3646 4$: _drop 1 
      002AE5 5B 01            [ 2]    1     addw sp,#1 
      002AE7 81               [ 4] 3647 	ret
                                   3648 
                                   3649 ;------------------------------
                                   3650 ; BASIC: RSHIFT(expr1,expr2)
                                   3651 ; logical shift right expr1 by 
                                   3652 ; expr2 bits.
                                   3653 ; output:
                                   3654 ; 	A 		TK_INTGR
                                   3655 ;   X 		result 
                                   3656 ;------------------------------
      002AE8                       3657 rshift:
      002AE8 CD 19 60         [ 4] 3658 	call func_args
      002AEB A1 02            [ 1] 3659 	cp a,#2 
      002AED 27 03            [ 1] 3660 	jreq 1$
      002AEF CC 16 39         [ 2] 3661 	jp syntax_error
      002AF2                       3662 1$: _xpop ; T>A:X
      002AF2 90 F6            [ 1]    1     ld a,(y)
      002AF4 93               [ 1]    2     ldw x,y 
      002AF5 EE 01            [ 2]    3     ldw x,(1,x)
      002AF7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AFB 9F               [ 1] 3663     ld a,xl 
      002AFC 88               [ 1] 3664 	push a    
      002AFD                       3665 	_xpop  
      002AFD 90 F6            [ 1]    1     ld a,(y)
      002AFF 93               [ 1]    2     ldw x,y 
      002B00 EE 01            [ 2]    3     ldw x,(1,x)
      002B02 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B06 0D 01            [ 1] 3666 	tnz (1,sp)
      002B08 27 07            [ 1] 3667 	jreq 4$
      002B0A 98               [ 1] 3668 2$:	rcf 
      002B0B 46               [ 1] 3669 	rrc a 
      002B0C 56               [ 2] 3670 	rrcw x 
      002B0D 0A 01            [ 1] 3671 	dec (1,sp) 
      002B0F 26 F9            [ 1] 3672 	jrne 2$
      002B11                       3673 4$: _drop 1 
      002B11 5B 01            [ 2]    1     addw sp,#1 
      002B13 81               [ 4] 3674 	ret
                                   3675 
                                   3676 ;--------------------------
                                   3677 ; BASIC: FCPU integer
                                   3678 ; set CPU frequency 
                                   3679 ;-------------------------- 
                                   3680 
      002B14                       3681 fcpu:
      002B14 A6 84            [ 1] 3682 	ld a,#TK_INTGR
      002B16 CD 19 53         [ 4] 3683 	call expect 
      002B19 CD 17 CF         [ 4] 3684 	call get_int24 
      002B1C 9F               [ 1] 3685 	ld a,xl 
      002B1D A4 07            [ 1] 3686 	and a,#7 
      002B1F C7 50 C6         [ 1] 3687 	ld CLK_CKDIVR,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002B22 81               [ 4] 3688 	ret 
                                   3689 
                                   3690 ;------------------------------
                                   3691 ; BASIC: PMODE pin#, mode 
                                   3692 ; Arduino pin. 
                                   3693 ; define pin as input or output
                                   3694 ; pin#: {0..15}
                                   3695 ; mode: INPUT|OUTPUT  
                                   3696 ;------------------------------
                           000001  3697 	PINNO=1
                           000001  3698 	VSIZE=1
      002B23                       3699 pin_mode:
      002B23                       3700 	_vars VSIZE 
      002B23 52 01            [ 2]    1     sub sp,#VSIZE 
      002B25 CD 19 65         [ 4] 3701 	call arg_list 
      002B28 A1 02            [ 1] 3702 	cp a,#2 
      002B2A 27 03            [ 1] 3703 	jreq 1$
      002B2C CC 16 39         [ 2] 3704 	jp syntax_error 
      002B2F                       3705 1$: _xpop 
      002B2F 90 F6            [ 1]    1     ld a,(y)
      002B31 93               [ 1]    2     ldw x,y 
      002B32 EE 01            [ 2]    3     ldw x,(1,x)
      002B34 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B38 CF 00 19         [ 2] 3706 	ldw ptr16,x ; mode 
      002B3B                       3707 	_xpop ; Dx pin 
      002B3B 90 F6            [ 1]    1     ld a,(y)
      002B3D 93               [ 1]    2     ldw x,y 
      002B3E EE 01            [ 2]    3     ldw x,(1,x)
      002B40 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B44 CD 2B 82         [ 4] 3708 	call select_pin 
      002B47 6B 01            [ 1] 3709 	ld (PINNO,sp),a  
      002B49 A6 01            [ 1] 3710 	ld a,#1 
      002B4B 0D 01            [ 1] 3711 	tnz (PINNO,sp)
      002B4D 27 0D            [ 1] 3712 	jreq 4$
      002B4F 48               [ 1] 3713 2$:	sll a 
      002B50 0A 01            [ 1] 3714 	dec (PINNO,sp)
      002B52 26 FB            [ 1] 3715 	jrne 2$ 
      002B54 6B 01            [ 1] 3716 	ld (PINNO,sp),a
      002B56 7B 01            [ 1] 3717 	ld a,(PINNO,sp)
      002B58 EA 03            [ 1] 3718 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B5A E7 03            [ 1] 3719 	ld (GPIO_CR1,x),a 
      002B5C A6 01            [ 1] 3720 4$:	ld a,#OUTP
      002B5E C1 00 0E         [ 1] 3721 	cp a,acc8 
      002B61 27 10            [ 1] 3722 	jreq 6$
                                   3723 ; input mode
                                   3724 ; disable external interrupt 
      002B63 7B 01            [ 1] 3725 	ld a,(PINNO,sp)
      002B65 43               [ 1] 3726 	cpl a 
      002B66 E4 04            [ 1] 3727 	and a,(GPIO_CR2,x)
      002B68 E7 04            [ 1] 3728 	ld (GPIO_CR2,x),a 
                                   3729 ;clear bit in DDR for input mode 
      002B6A 7B 01            [ 1] 3730 	ld a,(PINNO,sp)
      002B6C 43               [ 1] 3731 	cpl a 
      002B6D E4 02            [ 1] 3732 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B6F E7 02            [ 1] 3733 	ld (GPIO_DDR,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002B71 20 0C            [ 2] 3734 	jra 9$
      002B73                       3735 6$: ;output mode  
      002B73 7B 01            [ 1] 3736 	ld a,(PINNO,sp)
      002B75 EA 02            [ 1] 3737 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B77 E7 02            [ 1] 3738 	ld (GPIO_DDR,x),a 
      002B79 7B 01            [ 1] 3739 	ld a,(PINNO,sp)
      002B7B EA 04            [ 1] 3740 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B7D E7 04            [ 1] 3741 	ld (GPIO_CR2,x),a 
      002B7F                       3742 9$:	
      002B7F                       3743 	_drop VSIZE 
      002B7F 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B81 81               [ 4] 3744 	ret
                                   3745 
                                   3746 ;------------------------
                                   3747 ; select Arduino pin 
                                   3748 ; input:
                                   3749 ;   X 	 {0..15} Arduino Dx 
                                   3750 ; output:
                                   3751 ;   A     stm8s208 pin 
                                   3752 ;   X     base address s208 GPIO port 
                                   3753 ;---------------------------
      002B82                       3754 select_pin:
      002B82 58               [ 2] 3755 	sllw x 
      002B83 1C 2B 92         [ 2] 3756 	addw x,#arduino_to_8s208 
      002B86 FE               [ 2] 3757 	ldw x,(x)
      002B87 9F               [ 1] 3758 	ld a,xl 
      002B88 88               [ 1] 3759 	push a 
      002B89 5E               [ 1] 3760 	swapw x 
      002B8A A6 05            [ 1] 3761 	ld a,#5 
      002B8C 42               [ 4] 3762 	mul x,a 
      002B8D 1C 50 00         [ 2] 3763 	addw x,#GPIO_BASE 
      002B90 84               [ 1] 3764 	pop a 
      002B91 81               [ 4] 3765 	ret 
                                   3766 ; translation from Arduino D0..D15 to stm8s208rb 
      002B92                       3767 arduino_to_8s208:
      002B92 03 06                 3768 .byte 3,6 ; D0 
      002B94 03 05                 3769 .byte 3,5 ; D1 
      002B96 04 00                 3770 .byte 4,0 ; D2 
      002B98 02 01                 3771 .byte 2,1 ; D3
      002B9A 06 00                 3772 .byte 6,0 ; D4
      002B9C 02 02                 3773 .byte 2,2 ; D5
      002B9E 02 03                 3774 .byte 2,3 ; D6
      002BA0 03 01                 3775 .byte 3,1 ; D7
      002BA2 03 03                 3776 .byte 3,3 ; D8
      002BA4 02 04                 3777 .byte 2,4 ; D9
      002BA6 04 05                 3778 .byte 4,5 ; D10
      002BA8 02 06                 3779 .byte 2,6 ; D11
      002BAA 02 07                 3780 .byte 2,7 ; D12
      002BAC 02 05                 3781 .byte 2,5 ; D13
      002BAE 04 02                 3782 .byte 4,2 ; D14
      002BB0 04 01                 3783 .byte 4,1 ; D15
                                   3784 
                                   3785 
                                   3786 ;------------------------------
                                   3787 ; BASIC: RND(expr)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3788 ; return random number 
                                   3789 ; between 1 and expr inclusive
                                   3790 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3791 ; input:
                                   3792 ; 	none 
                                   3793 ; output:
                                   3794 ;	xstack 	random positive integer 
                                   3795 ;------------------------------
      002BB2                       3796 random:
      002BB2 CD 19 60         [ 4] 3797 	call func_args 
      002BB5 A1 01            [ 1] 3798 	cp a,#1
      002BB7 27 03            [ 1] 3799 	jreq 1$
      002BB9 CC 16 39         [ 2] 3800 	jp syntax_error
      002BBC                       3801 1$:  
      002BBC                       3802 	_xpop   
      002BBC 90 F6            [ 1]    1     ld a,(y)
      002BBE 93               [ 1]    2     ldw x,y 
      002BBF EE 01            [ 2]    3     ldw x,(1,x)
      002BC1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BC5 89               [ 2] 3803 	pushw x 
      002BC6 88               [ 1] 3804 	push a  
      002BC7 A6 80            [ 1] 3805 	ld a,#0x80 
      002BC9 15 01            [ 1] 3806 	bcp a,(1,sp)
      002BCB 27 05            [ 1] 3807 	jreq 2$
      002BCD A6 0A            [ 1] 3808 	ld a,#ERR_BAD_VALUE
      002BCF CC 16 3B         [ 2] 3809 	jp tb_error
      002BD2                       3810 2$: 
                                   3811 ; acc16=(x<<5)^x 
      002BD2 CE 00 14         [ 2] 3812 	ldw x,seedx 
      002BD5 58               [ 2] 3813 	sllw x 
      002BD6 58               [ 2] 3814 	sllw x 
      002BD7 58               [ 2] 3815 	sllw x 
      002BD8 58               [ 2] 3816 	sllw x 
      002BD9 58               [ 2] 3817 	sllw x 
      002BDA 9E               [ 1] 3818 	ld a,xh 
      002BDB C8 00 14         [ 1] 3819 	xor a,seedx 
      002BDE C7 00 0D         [ 1] 3820 	ld acc16,a 
      002BE1 9F               [ 1] 3821 	ld a,xl 
      002BE2 C8 00 15         [ 1] 3822 	xor a,seedx+1 
      002BE5 C7 00 0E         [ 1] 3823 	ld acc8,a 
                                   3824 ; seedx=seedy 
      002BE8 CE 00 16         [ 2] 3825 	ldw x,seedy 
      002BEB CF 00 14         [ 2] 3826 	ldw seedx,x  
                                   3827 ; seedy=seedy^(seedy>>1)
      002BEE CE 00 16         [ 2] 3828 	ldw x,seedy 
      002BF1 54               [ 2] 3829 	srlw x 
      002BF2 9E               [ 1] 3830 	ld a,xh 
      002BF3 C8 00 16         [ 1] 3831 	xor a,seedy 
      002BF6 C7 00 16         [ 1] 3832 	ld seedy,a  
      002BF9 9F               [ 1] 3833 	ld a,xl 
      002BFA C8 00 17         [ 1] 3834 	xor a,seedy+1 
      002BFD C7 00 17         [ 1] 3835 	ld seedy+1,a 
                                   3836 ; acc16>>3 
      002C00 CE 00 0D         [ 2] 3837 	ldw x,acc16 
      002C03 54               [ 2] 3838 	srlw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002C04 54               [ 2] 3839 	srlw x 
      002C05 54               [ 2] 3840 	srlw x 
                                   3841 ; x=acc16^x 
      002C06 9E               [ 1] 3842 	ld a,xh 
      002C07 C8 00 0D         [ 1] 3843 	xor a,acc16 
      002C0A C7 00 0D         [ 1] 3844 	ld acc16,a 
      002C0D 9F               [ 1] 3845 	ld a,xl 
      002C0E C8 00 0E         [ 1] 3846 	xor a,acc8 
      002C11 C7 00 0E         [ 1] 3847 	ld acc8,a 
                                   3848 ; seedy=acc16^seedy 
      002C14 C8 00 17         [ 1] 3849 	xor a,seedy+1
      002C17 97               [ 1] 3850 	ld xl,a 
      002C18 C6 00 0D         [ 1] 3851 	ld a,acc16 
      002C1B C8 00 16         [ 1] 3852 	xor a,seedy
      002C1E 95               [ 1] 3853 	ld xh,a 
      002C1F CF 00 16         [ 2] 3854 	ldw seedy,x 
                                   3855 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002C22 C6 00 15         [ 1] 3856 	ld a,seedx+1
      002C25 A4 7F            [ 1] 3857 	and a,#127
      002C27                       3858 	_xpush 
      002C27 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C2B 90 F7            [ 1]    2     ld (y),a 
      002C2D 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C30 84               [ 1] 3859 	pop a 
      002C31 85               [ 2] 3860 	popw x 
      002C32                       3861 	_xpush 
      002C32 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C36 90 F7            [ 1]    2     ld (y),a 
      002C38 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C3B CD 03 91         [ 4] 3862 	call mod24 
      002C3E                       3863 	_xpop
      002C3E 90 F6            [ 1]    1     ld a,(y)
      002C40 93               [ 1]    2     ldw x,y 
      002C41 EE 01            [ 2]    3     ldw x,(1,x)
      002C43 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C47 1C 00 01         [ 2] 3864 	addw x,#1 
      002C4A A9 00            [ 1] 3865 	adc a,#0  
      002C4C 81               [ 4] 3866 	ret 
                                   3867 
                                   3868 ;---------------------------------
                                   3869 ; BASIC: WORDS 
                                   3870 ; affiche la listes des mots du
                                   3871 ; dictionnaire ainsi que le nombre
                                   3872 ; de mots.
                                   3873 ;---------------------------------
                           000001  3874 	WLEN=1 ; word length
                           000002  3875 	LLEN=2 ; character sent to console
                           000003  3876 	WCNT=3 ; count words printed 
                           000003  3877 	VSIZE=3 
      002C4D                       3878 words:
      002C4D 90 89            [ 2] 3879 	pushw y
      002C4F                       3880 	_vars VSIZE
      002C4F 52 03            [ 2]    1     sub sp,#VSIZE 
      002C51 0F 02            [ 1] 3881 	clr (LLEN,sp)
      002C53 0F 03            [ 1] 3882 	clr (WCNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002C55 90 AE 34 22      [ 2] 3883 	ldw y,#kword_dict+2
      002C59 93               [ 1] 3884 0$:	ldw x,y
      002C5A F6               [ 1] 3885 	ld a,(x)
      002C5B A4 0F            [ 1] 3886 	and a,#15 
      002C5D 6B 01            [ 1] 3887 	ld (WLEN,sp),a 
      002C5F 0C 03            [ 1] 3888 	inc (WCNT,sp)
      002C61 5C               [ 1] 3889 1$:	incw x 
      002C62 F6               [ 1] 3890 	ld a,(x)
      002C63 CD 08 DE         [ 4] 3891 	call putc 
      002C66 0C 02            [ 1] 3892 	inc (LLEN,sp)
      002C68 0A 01            [ 1] 3893 	dec (WLEN,sp)
      002C6A 26 F5            [ 1] 3894 	jrne 1$
      002C6C A6 46            [ 1] 3895 	ld a,#70
      002C6E 11 02            [ 1] 3896 	cp a,(LLEN,sp)
      002C70 2B 09            [ 1] 3897 	jrmi 2$   
      002C72 A6 20            [ 1] 3898 	ld a,#SPACE 
      002C74 CD 08 DE         [ 4] 3899 	call putc 
      002C77 0C 02            [ 1] 3900 	inc (LLEN,sp) 
      002C79 20 07            [ 2] 3901 	jra 3$
      002C7B A6 0D            [ 1] 3902 2$: ld a,#CR 
      002C7D CD 08 DE         [ 4] 3903 	call putc 
      002C80 0F 02            [ 1] 3904 	clr (LLEN,sp)
      002C82 72 A2 00 02      [ 2] 3905 3$:	subw y,#2 
      002C86 90 FE            [ 2] 3906 	ldw y,(y)
      002C88 26 CF            [ 1] 3907 	jrne 0$ 
      002C8A A6 0D            [ 1] 3908 	ld a,#CR 
      002C8C CD 08 DE         [ 4] 3909 	call putc  
      002C8F 5F               [ 1] 3910 	clrw x 
      002C90 7B 03            [ 1] 3911 	ld a,(WCNT,sp)
      002C92 97               [ 1] 3912 	ld xl,a 
      002C93 CD 17 E5         [ 4] 3913 	call prt_i16 
      002C96 AE 2C A1         [ 2] 3914 	ldw x,#words_count_msg
      002C99 CD 09 3B         [ 4] 3915 	call puts 
      002C9C                       3916 	_drop VSIZE 
      002C9C 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C9E 90 85            [ 2] 3917 	popw y 
      002CA0 81               [ 4] 3918 	ret 
      002CA1 20 77 6F 72 64 73 20  3919 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3920 
                                   3921 
                                   3922 ;-----------------------------
                                   3923 ; BASIC: TIMER expr 
                                   3924 ; initialize count down timer 
                                   3925 ;-----------------------------
      002CB7                       3926 set_timer:
      002CB7 CD 19 65         [ 4] 3927 	call arg_list
      002CBA A1 01            [ 1] 3928 	cp a,#1 
      002CBC 27 03            [ 1] 3929 	jreq 1$
      002CBE CC 16 39         [ 2] 3930 	jp syntax_error
      002CC1                       3931 1$: 
      002CC1                       3932 	_xpop  
      002CC1 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002CC3 93               [ 1]    2     ldw x,y 
      002CC4 EE 01            [ 2]    3     ldw x,(1,x)
      002CC6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CCA CF 00 12         [ 2] 3933 	ldw timer,x 
      002CCD 81               [ 4] 3934 	ret 
                                   3935 
                                   3936 ;------------------------------
                                   3937 ; BASIC: TIMEOUT 
                                   3938 ; return state of timer 
                                   3939 ; output:
                                   3940 ;   A:X     0 not timeout 
                                   3941 ;   A:X     -1 timeout 
                                   3942 ;------------------------------
      002CCE                       3943 timeout:
      002CCE 4F               [ 1] 3944 	clr a 
      002CCF CE 00 12         [ 2] 3945 	ldw x,timer 
      002CD2 27 02            [ 1] 3946 	jreq 1$
      002CD4 5F               [ 1] 3947 	clrw x
      002CD5 81               [ 4] 3948 	ret  
      002CD6 43               [ 1] 3949 1$:	cpl a
      002CD7 53               [ 2] 3950 	cplw x 
      002CD8 81               [ 4] 3951 	ret 
                                   3952  	
                                   3953 
                                   3954 
                                   3955 
                                   3956 ;-----------------------------------
                                   3957 ; BASIC: IWDGEN expr1 
                                   3958 ; enable independant watchdog timer
                                   3959 ; expr1 is delay in multiple of 62.5µsec
                                   3960 ; expr1 -> {1..16383}
                                   3961 ;-----------------------------------
      002CD9                       3962 enable_iwdg:
      002CD9 CD 19 65         [ 4] 3963 	call arg_list
      002CDC A1 01            [ 1] 3964 	cp a,#1 
      002CDE 27 03            [ 1] 3965 	jreq 1$
      002CE0 CC 16 39         [ 2] 3966 	jp syntax_error 
      002CE3                       3967 1$: _xpop  
      002CE3 90 F6            [ 1]    1     ld a,(y)
      002CE5 93               [ 1]    2     ldw x,y 
      002CE6 EE 01            [ 2]    3     ldw x,(1,x)
      002CE8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CEC 4B 00            [ 1] 3968 	push #0
      002CEE 35 CC 50 E0      [ 1] 3969 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CF2 9E               [ 1] 3970 	ld a,xh 
      002CF3 A4 3F            [ 1] 3971 	and a,#0x3f
      002CF5 95               [ 1] 3972 	ld xh,a  
      002CF6 A3 00 FF         [ 2] 3973 2$:	cpw x,#255
      002CF9 23 06            [ 2] 3974 	jrule 3$
      002CFB 0C 01            [ 1] 3975 	inc (1,sp)
      002CFD 98               [ 1] 3976 	rcf 
      002CFE 56               [ 2] 3977 	rrcw x 
      002CFF 20 F5            [ 2] 3978 	jra 2$
      002D01 35 55 50 E0      [ 1] 3979 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D05 84               [ 1] 3980 	pop a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002D06 C7 50 E1         [ 1] 3981 	ld IWDG_PR,a 
      002D09 9F               [ 1] 3982 	ld a,xl
      002D0A 4A               [ 1] 3983 	dec a 
      002D0B 35 55 50 E0      [ 1] 3984 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D0F C7 50 E2         [ 1] 3985 	ld IWDG_RLR,a 
      002D12 35 AA 50 E0      [ 1] 3986 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D16 81               [ 4] 3987 	ret 
                                   3988 
                                   3989 
                                   3990 ;-----------------------------------
                                   3991 ; BASIC: IWDGREF  
                                   3992 ; refresh independant watchdog count down 
                                   3993 ; timer before it reset MCU. 
                                   3994 ;-----------------------------------
      002D17                       3995 refresh_iwdg:
      002D17 35 AA 50 E0      [ 1] 3996 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D1B 81               [ 4] 3997 	ret 
                                   3998 
                                   3999 
                                   4000 ;-------------------------------------
                                   4001 ; BASIC: LOG2(expr)
                                   4002 ; return logarithm base 2 of expr 
                                   4003 ; this is the position of most significant
                                   4004 ; bit set. 
                                   4005 ; input: 
                                   4006 ; output:
                                   4007 ;   A     TK_INTGR 
                                   4008 ;   xstack log2 
                                   4009 ;*********************************
      002D1C                       4010 log2:
      002D1C CD 19 60         [ 4] 4011 	call func_args 
      002D1F A1 01            [ 1] 4012 	cp a,#1 
      002D21 27 03            [ 1] 4013 	jreq 1$
      002D23 CC 16 39         [ 2] 4014 	jp syntax_error 
      002D26                       4015 1$: 
      002D26                       4016 	_xpop    
      002D26 90 F6            [ 1]    1     ld a,(y)
      002D28 93               [ 1]    2     ldw x,y 
      002D29 EE 01            [ 2]    3     ldw x,(1,x)
      002D2B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D2F 4D               [ 1] 4017 	tnz a
      002D30 26 08            [ 1] 4018 	jrne 2$ 
      002D32 5D               [ 2] 4019 	tnzw x 
      002D33 26 05            [ 1] 4020 	jrne 2$
      002D35 A6 0A            [ 1] 4021 	ld a,#ERR_BAD_VALUE
      002D37 CC 16 3B         [ 2] 4022 	jp tb_error 
      002D3A 4B 18            [ 1] 4023 2$: push #24 
      002D3C 59               [ 2] 4024 3$: rlcw x 
      002D3D 49               [ 1] 4025     rlc a 
      002D3E 25 04            [ 1] 4026 	jrc 4$
      002D40 0A 01            [ 1] 4027 	dec (1,sp) 
      002D42 26 F8            [ 1] 4028 	jrne 3$
      002D44 5F               [ 1] 4029 4$: clrw x 
      002D45 84               [ 1] 4030     pop a 
      002D46 4A               [ 1] 4031 	dec a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002D47 02               [ 1] 4032 	rlwa x  
      002D48                       4033 9$:	
      002D48 81               [ 4] 4034 	ret 
                                   4035 
                                   4036 ;-----------------------------------
                                   4037 ; BASIC: BIT(expr) 
                                   4038 ; expr ->{0..23}
                                   4039 ; return 2^expr 
                                   4040 ; output:
                                   4041 ;    A:X    2^expr 
                                   4042 ;-----------------------------------
      002D49                       4043 bitmask:
      002D49 CD 19 60         [ 4] 4044     call func_args 
      002D4C A1 01            [ 1] 4045 	cp a,#1
      002D4E 27 03            [ 1] 4046 	jreq 1$
      002D50 CC 16 39         [ 2] 4047 	jp syntax_error 
      002D53                       4048 1$: _xpop 
      002D53 90 F6            [ 1]    1     ld a,(y)
      002D55 93               [ 1]    2     ldw x,y 
      002D56 EE 01            [ 2]    3     ldw x,(1,x)
      002D58 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D5C 9F               [ 1] 4049 	ld a,xl 
      002D5D AE 00 01         [ 2] 4050 	ldw x,#1 
      002D60 A4 17            [ 1] 4051 	and a,#23
      002D62 27 0A            [ 1] 4052 	jreq 9$
      002D64 88               [ 1] 4053 	push a 
      002D65 4F               [ 1] 4054 	clr a 
      002D66                       4055 2$: 
      002D66 58               [ 2] 4056 	slaw x 
      002D67 49               [ 1] 4057 	rlc a 	
      002D68 0A 01            [ 1] 4058 	dec (1,sp)
      002D6A 26 FA            [ 1] 4059 	jrne 2$ 
      002D6C                       4060 4$:
      002D6C                       4061     _drop 1 
      002D6C 5B 01            [ 2]    1     addw sp,#1 
      002D6E 81               [ 4] 4062 9$:	ret 
                                   4063 
                                   4064 ;------------------------------
                                   4065 ; BASIC: DO 
                                   4066 ; initiate a DO ... UNTIL loop 
                                   4067 ;------------------------------
                           000003  4068 	DOLP_ADR=3 
                           000005  4069 	DOLP_INW=5
                           000004  4070 	VSIZE=4 
      002D6F                       4071 do_loop:
      002D6F 85               [ 2] 4072 	popw x 
      002D70                       4073 	_vars VSIZE 
      002D70 52 04            [ 2]    1     sub sp,#VSIZE 
      002D72 89               [ 2] 4074 	pushw x 
      002D73 CE 00 04         [ 2] 4075 	ldw x,basicptr 
      002D76 1F 03            [ 2] 4076 	ldw (DOLP_ADR,sp),x
      002D78 CE 00 00         [ 2] 4077 	ldw x,in.w 
      002D7B 1F 05            [ 2] 4078 	ldw (DOLP_INW,sp),x
      002D7D 72 5C 00 1F      [ 1] 4079 	inc loop_depth 
      002D81 81               [ 4] 4080 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   4081 
                                   4082 ;--------------------------------
                                   4083 ; BASIC: UNTIL expr 
                                   4084 ; loop if exprssion is false 
                                   4085 ; else terminate loop
                                   4086 ;--------------------------------
      002D82                       4087 until: 
      002D82 72 5D 00 1F      [ 1] 4088 	tnz loop_depth 
      002D86 26 03            [ 1] 4089 	jrne 1$ 
      002D88 CC 16 39         [ 2] 4090 	jp syntax_error 
      002D8B                       4091 1$: 
      002D8B CD 1B C2         [ 4] 4092 	call condition  
      002D8E                       4093 	_xpop 
      002D8E 90 F6            [ 1]    1     ld a,(y)
      002D90 93               [ 1]    2     ldw x,y 
      002D91 EE 01            [ 2]    3     ldw x,(1,x)
      002D93 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D97 4D               [ 1] 4094 	tnz a 
      002D98 26 13            [ 1] 4095 	jrne 9$ 
      002D9A 5D               [ 2] 4096 	tnzw x 
      002D9B 26 10            [ 1] 4097 	jrne 9$ 
      002D9D 1E 03            [ 2] 4098 	ldw x,(DOLP_ADR,sp)
      002D9F CF 00 04         [ 2] 4099 	ldw basicptr,x 
      002DA2 E6 02            [ 1] 4100 	ld a,(2,x)
      002DA4 C7 00 03         [ 1] 4101 	ld count,a 
      002DA7 1E 05            [ 2] 4102 	ldw x,(DOLP_INW,sp)
      002DA9 CF 00 00         [ 2] 4103 	ldw in.w,x 
      002DAC 81               [ 4] 4104 	ret 
      002DAD                       4105 9$:	; remove loop data from stack  
      002DAD 85               [ 2] 4106 	popw x
      002DAE                       4107 	_drop VSIZE
      002DAE 5B 04            [ 2]    1     addw sp,#VSIZE 
      002DB0 72 5A 00 1F      [ 1] 4108 	dec loop_depth 
      002DB4 FC               [ 2] 4109 	jp (x)
                                   4110 
                                   4111 ;--------------------------
                                   4112 ; BASIC: PORTA...PORTI  
                                   4113 ;  return constant value 
                                   4114 ;  PORT  base address 
                                   4115 ;---------------------------
      002DB5                       4116 const_porta:
      002DB5 AE 50 00         [ 2] 4117 	ldw x,#PA_BASE 
      002DB8 4F               [ 1] 4118 	clr a 
      002DB9 81               [ 4] 4119 	ret 
      002DBA                       4120 const_portb:
      002DBA AE 50 05         [ 2] 4121 	ldw x,#PB_BASE 
      002DBD 4F               [ 1] 4122 	clr a 
      002DBE 81               [ 4] 4123 	ret 
      002DBF                       4124 const_portc:
      002DBF AE 50 0A         [ 2] 4125 	ldw x,#PC_BASE 
      002DC2 4F               [ 1] 4126 	clr a 
      002DC3 81               [ 4] 4127 	ret 
      002DC4                       4128 const_portd:
      002DC4 AE 50 0F         [ 2] 4129 	ldw x,#PD_BASE 
      002DC7 4F               [ 1] 4130 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002DC8 81               [ 4] 4131 	ret 
      002DC9                       4132 const_porte:
      002DC9 AE 50 14         [ 2] 4133 	ldw x,#PE_BASE 
      002DCC 4F               [ 1] 4134 	clr a 
      002DCD 81               [ 4] 4135 	ret 
      002DCE                       4136 const_portf:
      002DCE AE 50 19         [ 2] 4137 	ldw x,#PF_BASE 
      002DD1 4F               [ 1] 4138 	clr a 
      002DD2 81               [ 4] 4139 	ret 
      002DD3                       4140 const_portg:
      002DD3 AE 50 1E         [ 2] 4141 	ldw x,#PG_BASE 
      002DD6 4F               [ 1] 4142 	clr a 
      002DD7 81               [ 4] 4143 	ret 
      002DD8                       4144 const_porti:
      002DD8 AE 50 28         [ 2] 4145 	ldw x,#PI_BASE 
      002DDB 4F               [ 1] 4146 	clr a 
      002DDC 81               [ 4] 4147 	ret 
                                   4148 
                                   4149 ;-------------------------------
                                   4150 ; following return constant 
                                   4151 ; related to GPIO register offset 
                                   4152 ;---------------------------------
      002DDD                       4153 const_odr:
      002DDD 4F               [ 1] 4154 	clr a 
      002DDE AE 00 00         [ 2] 4155 	ldw x,#GPIO_ODR
      002DE1 81               [ 4] 4156 	ret 
      002DE2                       4157 const_idr:
      002DE2 4F               [ 1] 4158 	clr a 
      002DE3 AE 00 01         [ 2] 4159 	ldw x,#GPIO_IDR
      002DE6 81               [ 4] 4160 	ret 
      002DE7                       4161 const_ddr:
      002DE7 4F               [ 1] 4162 	clr a
      002DE8 AE 00 02         [ 2] 4163 	ldw x,#GPIO_DDR
      002DEB 81               [ 4] 4164 	ret 
      002DEC                       4165 const_cr1:
      002DEC 4F               [ 1] 4166 	clr a 
      002DED AE 00 03         [ 2] 4167 	ldw x,#GPIO_CR1
      002DF0 81               [ 4] 4168 	ret 
      002DF1                       4169 const_cr2:
      002DF1 4F               [ 1] 4170 	clr a
      002DF2 AE 00 04         [ 2] 4171 	ldw x,#GPIO_CR2
      002DF5 81               [ 4] 4172 	ret 
                                   4173 ;-------------------------
                                   4174 ; BASIC: POUT 
                                   4175 ;  constant for port mode
                                   4176 ;  used by PMODE 
                                   4177 ;  to set pin as output
                                   4178 ;------------------------
      002DF6                       4179 const_output:
      002DF6 4F               [ 1] 4180 	clr a 
      002DF7 AE 00 01         [ 2] 4181 	ldw x,#OUTP
      002DFA 81               [ 4] 4182 	ret 
                                   4183 
                                   4184 ;-------------------------
                                   4185 ; BASIC: PINP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4186 ;  constant for port mode
                                   4187 ;  used by PMODE 
                                   4188 ;  to set pin as input
                                   4189 ;------------------------
      002DFB                       4190 const_input:
      002DFB 4F               [ 1] 4191 	clr a  
      002DFC AE 00 00         [ 2] 4192 	ldw x,#INP 
      002DFF 81               [ 4] 4193 	ret 
                                   4194 	
                                   4195 ;-----------------------
                                   4196 ; memory area constants
                                   4197 ;-----------------------
      002E00                       4198 const_eeprom_base:
      002E00 4F               [ 1] 4199 	clr a  
      002E01 AE 40 00         [ 2] 4200 	ldw x,#EEPROM_BASE 
      002E04 81               [ 4] 4201 	ret 
                                   4202 
                                   4203 ;---------------------------
                                   4204 ; BASIC: DATA 
                                   4205 ; when the interpreter find 
                                   4206 ; a DATA line it skip it.
                                   4207 ;---------------------------
      002E05                       4208 data:
      002E05 55 00 03 00 01   [ 1] 4209 	mov in,count 
      002E0A 81               [ 4] 4210 	ret 
                                   4211 
                                   4212 ;------------------------------
                                   4213 ; check if it is a DATA line 
                                   4214 ; input: 
                                   4215 ;    X    line address 
                                   4216 ; output:
                                   4217 ;    Z    set if DATA line 
                                   4218 ;----------------------------
      002E0B                       4219 is_data_line:
      002E0B 89               [ 2] 4220 	pushw x 
      002E0C E6 03            [ 1] 4221 	ld a,(3,x)
      002E0E A1 80            [ 1] 4222 	cp a,#TK_CMD 
      002E10 26 05            [ 1] 4223 	jrne 9$
      002E12 EE 04            [ 2] 4224 	ldw x,(4,x)
      002E14 A3 2E 05         [ 2] 4225 	cpw x,#data  
      002E17 85               [ 2] 4226 9$: popw x 
      002E18 81               [ 4] 4227 	ret 
                                   4228 
                                   4229 ;---------------------------------
                                   4230 ; BASIC: RESTORE [line#]
                                   4231 ; set data_ptr to first data line
                                   4232 ; if no DATA found pointer set to
                                   4233 ; zero.
                                   4234 ; if a line# is given as argument 
                                   4235 ; a data line with that number 
                                   4236 ; is searched and the data pointer 
                                   4237 ; is set to it. If there is no 
                                   4238 ; data line with that number 
                                   4239 ; the program is interrupted. 
                                   4240 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002E19                       4241 restore:
      002E19 5F               [ 1] 4242 	clrw x 
      002E1A CF 00 06         [ 2] 4243 	ldw data_ptr,x 
      002E1D CF 00 08         [ 2] 4244 	ldw data_ofs,x 
      002E20 CE 00 1B         [ 2] 4245 	ldw x,txtbgn 
      002E23 CD 17 9D         [ 4] 4246 	call next_token 
      002E26 A1 84            [ 1] 4247 	cp a,#TK_INTGR
      002E28 26 10            [ 1] 4248 	jrne 0$
      002E2A CD 17 CF         [ 4] 4249 	call get_int24
      002E2D 90 89            [ 2] 4250 	pushw y 
      002E2F 4F               [ 1] 4251 	clr a 
      002E30 CD 0C 18         [ 4] 4252 	call search_lineno  
      002E33 90 85            [ 2] 4253 	popw y 
      002E35 5D               [ 2] 4254 	tnzw x 
      002E36 26 17            [ 1] 4255 	jrne set_data_pointer 
      002E38 20 44            [ 2] 4256 	jra data_error 
      002E3A                       4257 0$:
      002E3A                       4258 	_unget_token  
      002E3A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4259 ; search first DATA line 	
      002E3F C3 00 1D         [ 2] 4260 1$:	cpw x,txtend
      002E42 24 3A            [ 1] 4261 	jruge data_error 
      002E44                       4262 2$:	
      002E44 CD 2E 0B         [ 4] 4263 	call is_data_line 
      002E47 26 00            [ 1] 4264 	jrne 4$
      002E49 CD 2E 5C         [ 4] 4265 4$:	call try_next_line 
      002E4C 26 FB            [ 1] 4266 	jrne 4$ 
      002E4E 81               [ 4] 4267 	ret 
                                   4268 
                                   4269 ;---------------------
                                   4270 ; set data pointer 
                                   4271 ; variables at new line 
                                   4272 ; input:
                                   4273 ;    X    line address 
                                   4274 ;----------------------
      002E4F                       4275 set_data_pointer:
      002E4F CF 00 06         [ 2] 4276 	ldw data_ptr,x
      002E52 E6 02            [ 1] 4277 	ld a,(2,x)
      002E54 C7 00 09         [ 1] 4278 	ld data_len,a 
      002E57 35 06 00 08      [ 1] 4279 	mov data_ofs,#FIRST_DATA_ITEM
      002E5B 81               [ 4] 4280 	ret 
                                   4281 
                                   4282 
                                   4283 ;--------------------
                                   4284 ; at end of data line 
                                   4285 ; check if next line 
                                   4286 ; is a data line 
                                   4287 ; input:
                                   4288 ;    X   actual line address 
                                   4289 ;  
                                   4290 ;-------------------
      002E5C                       4291 try_next_line: 
      002E5C E6 02            [ 1] 4292 	ld a,(2,x)
      002E5E C7 00 0E         [ 1] 4293 	ld acc8,a 
      002E61 72 5F 00 0D      [ 1] 4294 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002E65 72 BB 00 0D      [ 2] 4295 	addw x,acc16 
      002E69 C3 00 1D         [ 2] 4296 	cpw x,txtend 
      002E6C 25 02            [ 1] 4297 	jrult 1$
      002E6E 20 0E            [ 2] 4298 	jra data_error 
      002E70                       4299 1$:	
      002E70 CD 2E 0B         [ 4] 4300 	call is_data_line 
      002E73 27 04            [ 1] 4301 	jreq 2$
      002E75 A6 01            [ 1] 4302 	ld a,#1  
      002E77 20 04            [ 2] 4303 	jra 9$
      002E79 CD 2E 4F         [ 4] 4304 2$:	call set_data_pointer
      002E7C 4F               [ 1] 4305 	clr a  
      002E7D 81               [ 4] 4306 9$:	ret 
      002E7E                       4307 data_error:	
      002E7E A6 0C            [ 1] 4308     ld a,#ERR_NO_DATA 
      002E80 CC 16 3B         [ 2] 4309 	jp tb_error 
                                   4310 
                                   4311 
                                   4312 ;---------------------------------
                                   4313 ; BASIC: READ 
                                   4314 ; return next data item | 0 
                                   4315 ;---------------------------------
                           000001  4316 	CTX_BPTR=1 
                           000003  4317 	CTX_IN=3 
                           000004  4318 	CTX_COUNT=4 
                           000005  4319 	INT24=5
                           000007  4320 	VSIZE=7 
      002E83                       4321 read:
      002E83                       4322 	_vars  VSIZE 
      002E83 52 07            [ 2]    1     sub sp,#VSIZE 
      002E85 CD 20 82         [ 4] 4323 	call save_context
      002E88                       4324 read01:	
      002E88 C6 00 08         [ 1] 4325 	ld a,data_ofs
      002E8B C1 00 09         [ 1] 4326 	cp a,data_len 
      002E8E 27 37            [ 1] 4327 	jreq 2$ ; end of line  
      002E90                       4328 0$:
      002E90 CE 00 06         [ 2] 4329 	ldw x,data_ptr 
      002E93 CF 00 04         [ 2] 4330 	ldw basicptr,x 
      002E96 55 00 08 00 01   [ 1] 4331 	mov in,data_ofs 
      002E9B 55 00 09 00 03   [ 1] 4332 	mov count,data_len  
      002EA0 CD 1A A9         [ 4] 4333 	call expression 
      002EA3 A1 84            [ 1] 4334 	cp a,#TK_INTGR 
      002EA5 27 03            [ 1] 4335 	jreq 1$ 
      002EA7 CC 16 39         [ 2] 4336 	jp syntax_error 
      002EAA                       4337 1$:
      002EAA CD 17 9D         [ 4] 4338 	call next_token ; skip comma
      002EAD CE 00 04         [ 2] 4339 	ldw x,basicptr 
      002EB0 CF 00 06         [ 2] 4340 	ldw data_ptr,x 
      002EB3 55 00 01 00 08   [ 1] 4341 	mov data_ofs,in 
      002EB8 CD 20 92         [ 4] 4342 	call rest_context
      002EBB                       4343 	_xpop 
      002EBB 90 F6            [ 1]    1     ld a,(y)
      002EBD 93               [ 1]    2     ldw x,y 
      002EBE EE 01            [ 2]    3     ldw x,(1,x)
      002EC0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EC4                       4344 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002EC4 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EC6 81               [ 4] 4345 	ret 
      002EC7                       4346 2$: ; end of line reached 
                                   4347 	; try next line 
      002EC7 CE 00 06         [ 2] 4348 	ldw x,data_ptr  
      002ECA CD 2E 5C         [ 4] 4349 	call try_next_line
      002ECD 27 C1            [ 1] 4350 	jreq 0$ 
      002ECF 20 AD            [ 2] 4351 	jra data_error 
                                   4352 
                                   4353 ;---------------------------------
                                   4354 ; BASIC: SPIEN clkdiv, 0|1  
                                   4355 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4356 ; if clkdiv==-1 disable SPI
                                   4357 ; 0|1 -> disable|enable  
                                   4358 ;--------------------------------- 
                           000005  4359 SPI_CS_BIT=5
      002ED1                       4360 spi_enable:
      002ED1 CD 19 65         [ 4] 4361 	call arg_list 
      002ED4 A1 02            [ 1] 4362 	cp a,#2
      002ED6 27 03            [ 1] 4363 	jreq 1$
      002ED8 CC 16 39         [ 2] 4364 	jp syntax_error 
      002EDB                       4365 1$: 
      002EDB 72 12 50 C7      [ 1] 4366 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EDF 85               [ 2] 4367 	popw x  
      002EE0 5D               [ 2] 4368 	tnzw x 
      002EE1 27 21            [ 1] 4369 	jreq spi_disable 
      002EE3 85               [ 2] 4370 	popw x 
      002EE4 A6 08            [ 1] 4371 	ld a,#(1<<SPI_CR1_BR)
      002EE6 42               [ 4] 4372 	mul x,a 
      002EE7 9F               [ 1] 4373 	ld a,xl 
      002EE8 C7 52 00         [ 1] 4374 	ld SPI_CR1,a 
                                   4375 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EEB 72 1A 50 14      [ 1] 4376 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EEF 72 1A 50 16      [ 1] 4377 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4378 ; configure SPI as master mode 0.	
      002EF3 72 14 52 00      [ 1] 4379 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4380 ; ~CS line controlled by sofware 	
      002EF7 72 12 52 01      [ 1] 4381 	bset SPI_CR2,#SPI_CR2_SSM 
      002EFB 72 10 52 01      [ 1] 4382     bset SPI_CR2,#SPI_CR2_SSI 
                                   4383 ; enable SPI
      002EFF 72 1C 52 00      [ 1] 4384 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F03 81               [ 4] 4385 	ret 
      002F04                       4386 spi_disable:
      002F04                       4387 	_drop #2; throw first argument.
      002F04 5B 02            [ 2]    1     addw sp,##2 
                                   4388 ; wait spi idle 
      002F06 A6 82            [ 1] 4389 1$:	ld a,#0x82 
      002F08 C4 52 03         [ 1] 4390 	and a,SPI_SR
      002F0B A1 02            [ 1] 4391 	cp a,#2 
      002F0D 26 F7            [ 1] 4392 	jrne 1$
      002F0F 72 1D 52 00      [ 1] 4393 	bres SPI_CR1,#SPI_CR1_SPE
      002F13 72 13 50 C7      [ 1] 4394 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F17 72 1B 50 16      [ 1] 4395 	bres PE_DDR,#SPI_CS_BIT 
      002F1B 81               [ 4] 4396 	ret 
                                   4397 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002F1C                       4398 spi_clear_error:
      002F1C A6 78            [ 1] 4399 	ld a,#0x78 
      002F1E C5 52 03         [ 1] 4400 	bcp a,SPI_SR 
      002F21 27 04            [ 1] 4401 	jreq 1$
      002F23 72 5F 52 03      [ 1] 4402 	clr SPI_SR 
      002F27 81               [ 4] 4403 1$: ret 
                                   4404 
      002F28                       4405 spi_send_byte:
      002F28 88               [ 1] 4406 	push a 
      002F29 CD 2F 1C         [ 4] 4407 	call spi_clear_error
      002F2C 84               [ 1] 4408 	pop a 
      002F2D 72 03 52 03 FB   [ 2] 4409 	btjf SPI_SR,#SPI_SR_TXE,.
      002F32 C7 52 04         [ 1] 4410 	ld SPI_DR,a
      002F35 72 01 52 03 FB   [ 2] 4411 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F3A C6 52 04         [ 1] 4412 	ld a,SPI_DR 
      002F3D 81               [ 4] 4413 	ret 
                                   4414 
      002F3E                       4415 spi_rcv_byte:
      002F3E A6 FF            [ 1] 4416 	ld a,#255
      002F40 72 01 52 03 E3   [ 2] 4417 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F45 C6 52 04         [ 1] 4418 	ld a,SPI_DR 
      002F48 81               [ 4] 4419 	ret
                                   4420 
                                   4421 ;------------------------------
                                   4422 ; BASIC: SPIWR byte [,byte]
                                   4423 ; write 1 or more byte
                                   4424 ;------------------------------
      002F49                       4425 spi_write:
      002F49 CD 1A A9         [ 4] 4426 	call expression
      002F4C A1 84            [ 1] 4427 	cp a,#TK_INTGR 
      002F4E 27 03            [ 1] 4428 	jreq 1$
      002F50 CC 16 39         [ 2] 4429 	jp syntax_error 
      002F53                       4430 1$:	
      002F53 9F               [ 1] 4431 	ld a,xl 
      002F54 CD 2F 28         [ 4] 4432 	call spi_send_byte 
      002F57 CD 17 9D         [ 4] 4433 	call next_token 
      002F5A A1 08            [ 1] 4434 	cp a,#TK_COMMA 
      002F5C 26 02            [ 1] 4435 	jrne 2$ 
      002F5E 20 E9            [ 2] 4436 	jra spi_write 
      002F60 4D               [ 1] 4437 2$:	tnz a 
      002F61 27 05            [ 1] 4438 	jreq 3$
      002F63                       4439 	_unget_token  
      002F63 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F68 81               [ 4] 4440 3$:	ret 
                                   4441 
                                   4442 
                                   4443 ;-------------------------------
                                   4444 ; BASIC: SPIRD 	
                                   4445 ; read one byte from SPI 
                                   4446 ;-------------------------------
      002F69                       4447 spi_read:
      002F69 CD 2F 3E         [ 4] 4448 	call spi_rcv_byte 
      002F6C 5F               [ 1] 4449 	clrw x 
      002F6D 97               [ 1] 4450 	ld xl,a 
      002F6E 4F               [ 1] 4451 	clr a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002F6F 81               [ 4] 4452 	ret 
                                   4453 
                                   4454 ;------------------------------
                                   4455 ; BASIC: SPISEL 0|1 
                                   4456 ; set state of ~CS line
                                   4457 ; 0|1 deselect|select  
                                   4458 ;------------------------------
      002F70                       4459 spi_select:
      002F70 CD 17 9D         [ 4] 4460 	call next_token 
      002F73 A1 84            [ 1] 4461 	cp a,#TK_INTGR 
      002F75 27 03            [ 1] 4462 	jreq 1$
      002F77 CC 16 39         [ 2] 4463 	jp syntax_error 
      002F7A 5D               [ 2] 4464 1$: tnzw x  
      002F7B 27 05            [ 1] 4465 	jreq cs_high 
      002F7D 72 1B 50 14      [ 1] 4466 	bres PE_ODR,#SPI_CS_BIT
      002F81 81               [ 4] 4467 	ret 
      002F82                       4468 cs_high: 
      002F82 72 1A 50 14      [ 1] 4469 	bset PE_ODR,#SPI_CS_BIT
      002F86 81               [ 4] 4470 	ret 
                                   4471 
                                   4472 ;-------------------------------
                                   4473 ; BASIC: PAD 
                                   4474 ; Return pad buffer address.
                                   4475 ;------------------------------
      002F87                       4476 pad_ref:
      002F87 AE 16 E0         [ 2] 4477 	ldw x,#pad 
      002F8A 4F               [ 1] 4478 	clr a
      002F8B 81               [ 4] 4479 	ret 
                                   4480 
                                   4481 ;****************************
                                   4482 ; expression stack 
                                   4483 ; manipulation routines
                                   4484 ;****************************
                                   4485 
                                   4486 ;-----------------------------
                                   4487 ; BASIC: PUSH expr|rel|cond 
                                   4488 ; push the result on xtack
                                   4489 ;-----------------------------
      002F8C                       4490 xpush:
      002F8C CD 1B C2         [ 4] 4491 	call condition 
      002F8F 81               [ 4] 4492 	ret 
                                   4493 
                                   4494 ;------------------------------
                                   4495 ; BASIC: POP 
                                   4496 ; pop top of xstack 
                                   4497 ;------------------------------
      002F90                       4498 xpop:
      002F90                       4499 	_xpop 
      002F90 90 F6            [ 1]    1     ld a,(y)
      002F92 93               [ 1]    2     ldw x,y 
      002F93 EE 01            [ 2]    3     ldw x,(1,x)
      002F95 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F99 81               [ 4] 4500 	ret 
                                   4501 
                                   4502 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



                                   4503 ;------------------------------
                                   4504 ; BASIC: ALLOC expr 
                                   4505 ; allocate expr element on xtack 
                                   4506 ;-------------------------------
      002F9A                       4507 xalloc: 
      002F9A CD 1A A9         [ 4] 4508 	call expression 
      002F9D A1 84            [ 1] 4509 	cp a,#TK_INTGR
      002F9F 27 03            [ 1] 4510 	jreq 1$ 
      002FA1 CC 16 39         [ 2] 4511 	jp syntax_error
      002FA4                       4512 1$: _xpop 
      002FA4 90 F6            [ 1]    1     ld a,(y)
      002FA6 93               [ 1]    2     ldw x,y 
      002FA7 EE 01            [ 2]    3     ldw x,(1,x)
      002FA9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FAD 4D               [ 1] 4513 	tnz a 
      002FAE 27 05            [ 1] 4514 	jreq 3$ 
      002FB0 A6 0A            [ 1] 4515 2$:	ld a,#ERR_BAD_VALUE
      002FB2 CC 16 3B         [ 2] 4516 	jp tb_error 
      002FB5 A3 00 14         [ 2] 4517 3$: cpw x,#XSTACK_SIZE 
      002FB8 22 F6            [ 1] 4518 	jrugt 2$
      002FBA A6 03            [ 1] 4519 	ld a,#CELL_SIZE 
      002FBC 42               [ 4] 4520 	mul x,a 
      002FBD CF 00 0D         [ 2] 4521 	ldw acc16,x 
      002FC0 72 B2 00 0D      [ 2] 4522 	subw y,acc16 
      002FC4 90 A3 17 60      [ 2] 4523 	cpw y,#xstack_full
      002FC8 22 05            [ 1] 4524 	jrugt 9$
      002FCA A6 01            [ 1] 4525 	ld a,#ERR_MEM_FULL
      002FCC CC 16 3B         [ 2] 4526 	jp tb_error 
      002FCF                       4527 9$:	 
      002FCF 81               [ 4] 4528 	ret 
                                   4529 
                                   4530 
                                   4531 ;------------------------------
                                   4532 ;  BASIC DROP expr 
                                   4533 ;  expr in range {0..XSTACK_SIZE}
                                   4534 ;  discard n elements from xtack
                                   4535 ;------------------------------
      002FD0                       4536 xdrop:
      002FD0 CD 1A A9         [ 4] 4537 	call expression 
      002FD3 A1 84            [ 1] 4538 	cp a,#TK_INTGR
      002FD5 27 03            [ 1] 4539 	jreq 1$ 
      002FD7 CC 16 39         [ 2] 4540 	jp syntax_error 
      002FDA                       4541 1$:	_xpop 
      002FDA 90 F6            [ 1]    1     ld a,(y)
      002FDC 93               [ 1]    2     ldw x,y 
      002FDD EE 01            [ 2]    3     ldw x,(1,x)
      002FDF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FE3 9F               [ 1] 4542 	ld a,xl 
      002FE4 A4 1F            [ 1] 4543 	and a,#0x1f 
      002FE6 5F               [ 1] 4544 	clrw x 
      002FE7 97               [ 1] 4545 	ld xl,a 
      002FE8 A6 03            [ 1] 4546 	ld a,#CELL_SIZE 
      002FEA 42               [ 4] 4547 	mul x,a 
      002FEB CF 00 0D         [ 2] 4548 	ldw acc16,x  
      002FEE 72 B9 00 0D      [ 2] 4549 	addw y,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002FF2 90 A3 17 73      [ 2] 4550 	cpw y,#XSTACK_EMPTY 
      002FF6 23 04            [ 2] 4551 	jrule 9$
      002FF8 90 AE 17 73      [ 2] 4552 	ldw y,#XSTACK_EMPTY 
      002FFC 81               [ 4] 4553 9$:	ret 
                                   4554 
                                   4555 ;-----------------------
                                   4556 ; check if value in A:X 
                                   4557 ; is inside xstack bound
                                   4558 ; output:
                                   4559 ;    X     slot address  
                                   4560 ;-----------------------
      002FFD                       4561 xstack_bound:
      002FFD 4D               [ 1] 4562 	tnz a 
      002FFE 26 16            [ 1] 4563 	jrne 8$ 
      003000 A3 00 14         [ 2] 4564 1$: cpw x,#XSTACK_SIZE 
      003003 22 11            [ 1] 4565 	jrugt 8$
      003005 A6 03            [ 1] 4566 	ld a,#CELL_SIZE 
      003007 42               [ 4] 4567 	mul x,a
      003008 CF 00 0D         [ 2] 4568 	ldw acc16,x 
      00300B 93               [ 1] 4569 	ldw x,y 
      00300C 72 BB 00 0D      [ 2] 4570 	addw x,acc16 
      003010 A3 17 73         [ 2] 4571 	cpw x,#XSTACK_EMPTY 
      003013 24 01            [ 1] 4572 	jruge 8$  
      003015 81               [ 4] 4573 	ret 
      003016 A6 0A            [ 1] 4574 8$: ld a,#ERR_BAD_VALUE
      003018 CC 16 3B         [ 2] 4575 	jp tb_error 
                                   4576 
                                   4577 ;-------------------------
                                   4578 ; BASIC: PUT expr, cond 
                                   4579 ; expr -> slot 
                                   4580 ; cond -> valut to put 
                                   4581 ; on xstack 
                                   4582 ;-------------------------
      00301B                       4583 xput:
      00301B CD 19 65         [ 4] 4584 	call arg_list 
      00301E A1 02            [ 1] 4585 	cp a,#2 
      003020 27 03            [ 1] 4586 	jreq 1$ 
      003022 CC 16 39         [ 2] 4587 0$:	jp syntax_error
      003025                       4588 1$: _xpop   ; value to put 
      003025 90 F6            [ 1]    1     ld a,(y)
      003027 93               [ 1]    2     ldw x,y 
      003028 EE 01            [ 2]    3     ldw x,(1,x)
      00302A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00302E 89               [ 2] 4589 	pushw x 
      00302F 88               [ 1] 4590 	push a 
      003030                       4591 	_xpop    ; slot 
      003030 90 F6            [ 1]    1     ld a,(y)
      003032 93               [ 1]    2     ldw x,y 
      003033 EE 01            [ 2]    3     ldw x,(1,x)
      003035 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003039 CD 2F FD         [ 4] 4592 	call xstack_bound
      00303C CF 00 19         [ 2] 4593     ldw ptr16,x 
      00303F 84               [ 1] 4594 	pop a 
      003040 85               [ 2] 4595 	popw x 
      003041 72 C7 00 19      [ 4] 4596 	ld [ptr16],a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      003045 72 5C 00 1A      [ 1] 4597 	inc ptr8 
      003049 72 CF 00 19      [ 5] 4598 	ldw [ptr16],x 
      00304D 81               [ 4] 4599 	ret 
                                   4600 
                                   4601 ;------------------------
                                   4602 ; BASIC: PICK expr 
                                   4603 ; get nième element on 
                                   4604 ; xtack. 
                                   4605 ;-----------------------
      00304E                       4606 xpick:
      00304E CD 19 60         [ 4] 4607 	call func_args 
      003051 A1 01            [ 1] 4608 	cp a,#1 
      003053 27 03            [ 1] 4609 	jreq 1$
      003055 CC 16 39         [ 2] 4610 	jp syntax_error 
      003058                       4611 1$: _xpop 
      003058 90 F6            [ 1]    1     ld a,(y)
      00305A 93               [ 1]    2     ldw x,y 
      00305B EE 01            [ 2]    3     ldw x,(1,x)
      00305D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003061 CD 2F FD         [ 4] 4612 	call xstack_bound
      003064 F6               [ 1] 4613     ld a,(x)
      003065 EE 01            [ 2] 4614 	ldw x,(1,x)				
      003067 81               [ 4] 4615 	ret 
                                   4616 
                                   4617 
                                   4618 
                                   4619 ;------------------------------
                                   4620 ;      dictionary 
                                   4621 ; format:
                                   4622 ;   link:   2 bytes 
                                   4623 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4624 ;   cmd_name: 16 byte max 
                                   4625 ;   code_addr: 2 bytes 
                                   4626 ;------------------------------
                                   4627 	.macro _dict_entry len,name,code_addr 
                                   4628 	.word LINK 
                                   4629 	LINK=.
                                   4630 name:
                                   4631 	.byte len   	
                                   4632 	.ascii "name"
                                   4633 	.word code_addr  
                                   4634 	.endm 
                                   4635 
                           000000  4636 	LINK=0
                                   4637 ; respect alphabetic order for BASIC names from Z-A
                                   4638 ; this sort order is for a cleaner WORDS cmd output. 	
      003068                       4639 kword_end:
      003068                       4640 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      003068 00 00                    1 	.word LINK 
                           00306A     2 	LINK=.
      00306A                          3 XOR:
      00306A A3                       4 	.byte 3+F_XOR   	
      00306B 58 4F 52                 5 	.ascii "XOR"
      00306E 00 8A                    6 	.word TK_XOR  
      003070                       4641 	_dict_entry,5,WRITE,write  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      003070 30 6A                    1 	.word LINK 
                           003072     2 	LINK=.
      003072                          3 WRITE:
      003072 05                       4 	.byte 5   	
      003073 57 52 49 54 45           5 	.ascii "WRITE"
      003078 28 FB                    6 	.word write  
      00307A                       4642 	_dict_entry,5,WORDS,words 
      00307A 30 72                    1 	.word LINK 
                           00307C     2 	LINK=.
      00307C                          3 WORDS:
      00307C 05                       4 	.byte 5   	
      00307D 57 4F 52 44 53           5 	.ascii "WORDS"
      003082 2C 4D                    6 	.word words  
      003084                       4643 	_dict_entry 4,WAIT,wait 
      003084 30 7C                    1 	.word LINK 
                           003086     2 	LINK=.
      003086                          3 WAIT:
      003086 04                       4 	.byte 4   	
      003087 57 41 49 54              5 	.ascii "WAIT"
      00308B 21 47                    6 	.word wait  
      00308D                       4644 	_dict_entry,3+F_IFUNC,USR,usr
      00308D 30 86                    1 	.word LINK 
                           00308F     2 	LINK=.
      00308F                          3 USR:
      00308F 13                       4 	.byte 3+F_IFUNC   	
      003090 55 53 52                 5 	.ascii "USR"
      003093 29 F2                    6 	.word usr  
      003095                       4645 	_dict_entry,5,UNTIL,until 
      003095 30 8F                    1 	.word LINK 
                           003097     2 	LINK=.
      003097                          3 UNTIL:
      003097 05                       4 	.byte 5   	
      003098 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00309D 2D 82                    6 	.word until  
      00309F                       4646 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00309F 30 97                    1 	.word LINK 
                           0030A1     2 	LINK=.
      0030A1                          3 UFLASH:
      0030A1 16                       4 	.byte 6+F_IFUNC   	
      0030A2 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0030A8 29 D5                    6 	.word uflash  
      0030AA                       4647 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      0030AA 30 A1                    1 	.word LINK 
                           0030AC     2 	LINK=.
      0030AC                          3 UBOUND:
      0030AC 16                       4 	.byte 6+F_IFUNC   	
      0030AD 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0030B3 1C 76                    6 	.word ubound  
      0030B5                       4648 	_dict_entry,4,TONE,tone  
      0030B5 30 AC                    1 	.word LINK 
                           0030B7     2 	LINK=.
      0030B7                          3 TONE:
      0030B7 04                       4 	.byte 4   	
      0030B8 54 4F 4E 45              5 	.ascii "TONE"
      0030BC 25 B1                    6 	.word tone  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      0030BE                       4649 	_dict_entry,2,TO,to
      0030BE 30 B7                    1 	.word LINK 
                           0030C0     2 	LINK=.
      0030C0                          3 TO:
      0030C0 02                       4 	.byte 2   	
      0030C1 54 4F                    5 	.ascii "TO"
      0030C3 22 B1                    6 	.word to  
      0030C5                       4650 	_dict_entry,5,TIMER,set_timer
      0030C5 30 C0                    1 	.word LINK 
                           0030C7     2 	LINK=.
      0030C7                          3 TIMER:
      0030C7 05                       4 	.byte 5   	
      0030C8 54 49 4D 45 52           5 	.ascii "TIMER"
      0030CD 2C B7                    6 	.word set_timer  
      0030CF                       4651 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      0030CF 30 C7                    1 	.word LINK 
                           0030D1     2 	LINK=.
      0030D1                          3 TIMEOUT:
      0030D1 17                       4 	.byte 7+F_IFUNC   	
      0030D2 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      0030D9 2C CE                    6 	.word timeout  
      0030DB                       4652 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      0030DB 30 D1                    1 	.word LINK 
                           0030DD     2 	LINK=.
      0030DD                          3 TICKS:
      0030DD 15                       4 	.byte 5+F_IFUNC   	
      0030DE 54 49 43 4B 53           5 	.ascii "TICKS"
      0030E3 2A 9E                    6 	.word get_ticks  
      0030E5                       4653 	_dict_entry,4,STOP,stop 
      0030E5 30 DD                    1 	.word LINK 
                           0030E7     2 	LINK=.
      0030E7                          3 STOP:
      0030E7 04                       4 	.byte 4   	
      0030E8 53 54 4F 50              5 	.ascii "STOP"
      0030EC 27 1A                    6 	.word stop  
      0030EE                       4654 	_dict_entry,4,STEP,step 
      0030EE 30 E7                    1 	.word LINK 
                           0030F0     2 	LINK=.
      0030F0                          3 STEP:
      0030F0 04                       4 	.byte 4   	
      0030F1 53 54 45 50              5 	.ascii "STEP"
      0030F5 22 F7                    6 	.word step  
      0030F7                       4655 	_dict_entry,5,SPIWR,spi_write
      0030F7 30 F0                    1 	.word LINK 
                           0030F9     2 	LINK=.
      0030F9                          3 SPIWR:
      0030F9 05                       4 	.byte 5   	
      0030FA 53 50 49 57 52           5 	.ascii "SPIWR"
      0030FF 2F 49                    6 	.word spi_write  
      003101                       4656 	_dict_entry,6,SPISEL,spi_select
      003101 30 F9                    1 	.word LINK 
                           003103     2 	LINK=.
      003103                          3 SPISEL:
      003103 06                       4 	.byte 6   	
      003104 53 50 49 53 45 4C        5 	.ascii "SPISEL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      00310A 2F 70                    6 	.word spi_select  
      00310C                       4657 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      00310C 31 03                    1 	.word LINK 
                           00310E     2 	LINK=.
      00310E                          3 SPIRD:
      00310E 15                       4 	.byte 5+F_IFUNC   	
      00310F 53 50 49 52 44           5 	.ascii "SPIRD"
      003114 2F 69                    6 	.word spi_read  
      003116                       4658 	_dict_entry,5,SPIEN,spi_enable 
      003116 31 0E                    1 	.word LINK 
                           003118     2 	LINK=.
      003118                          3 SPIEN:
      003118 05                       4 	.byte 5   	
      003119 53 50 49 45 4E           5 	.ascii "SPIEN"
      00311E 2E D1                    6 	.word spi_enable  
      003120                       4659 	_dict_entry,5,SLEEP,sleep 
      003120 31 18                    1 	.word LINK 
                           003122     2 	LINK=.
      003122                          3 SLEEP:
      003122 05                       4 	.byte 5   	
      003123 53 4C 45 45 50           5 	.ascii "SLEEP"
      003128 2A 21                    6 	.word sleep  
      00312A                       4660     _dict_entry,4,SIZE,cmd_size 
      00312A 31 22                    1 	.word LINK 
                           00312C     2 	LINK=.
      00312C                          3 SIZE:
      00312C 04                       4 	.byte 4   	
      00312D 53 49 5A 45              5 	.ascii "SIZE"
      003131 1C 49                    6 	.word cmd_size  
      003133                       4661 	_dict_entry,4,SAVE,save_app 
      003133 31 2C                    1 	.word LINK 
                           003135     2 	LINK=.
      003135                          3 SAVE:
      003135 04                       4 	.byte 4   	
      003136 53 41 56 45              5 	.ascii "SAVE"
      00313A 28 0C                    6 	.word save_app  
      00313C                       4662 	_dict_entry 3,RUN,run
      00313C 31 35                    1 	.word LINK 
                           00313E     2 	LINK=.
      00313E                          3 RUN:
      00313E 03                       4 	.byte 3   	
      00313F 52 55 4E                 5 	.ascii "RUN"
      003142 25 0D                    6 	.word run  
      003144                       4663 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003144 31 3E                    1 	.word LINK 
                           003146     2 	LINK=.
      003146                          3 RSHIFT:
      003146 16                       4 	.byte 6+F_IFUNC   	
      003147 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00314D 2A E8                    6 	.word rshift  
      00314F                       4664 	_dict_entry,3+F_IFUNC,RND,random 
      00314F 31 46                    1 	.word LINK 
                           003151     2 	LINK=.
      003151                          3 RND:
      003151 13                       4 	.byte 3+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003152 52 4E 44                 5 	.ascii "RND"
      003155 2B B2                    6 	.word random  
      003157                       4665 	_dict_entry,6,RETURN,return 
      003157 31 51                    1 	.word LINK 
                           003159     2 	LINK=.
      003159                          3 RETURN:
      003159 06                       4 	.byte 6   	
      00315A 52 45 54 55 52 4E        5 	.ascii "RETURN"
      003160 24 F0                    6 	.word return  
      003162                       4666 	_dict_entry,7,RESTORE,restore 
      003162 31 59                    1 	.word LINK 
                           003164     2 	LINK=.
      003164                          3 RESTORE:
      003164 07                       4 	.byte 7   	
      003165 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00316C 2E 19                    6 	.word restore  
      00316E                       4667 	_dict_entry 3,REM,remark 
      00316E 31 64                    1 	.word LINK 
                           003170     2 	LINK=.
      003170                          3 REM:
      003170 03                       4 	.byte 3   	
      003171 52 45 4D                 5 	.ascii "REM"
      003174 21 41                    6 	.word remark  
      003176                       4668 	_dict_entry,6,REBOOT,cold_start
      003176 31 70                    1 	.word LINK 
                           003178     2 	LINK=.
      003178                          3 REBOOT:
      003178 06                       4 	.byte 6   	
      003179 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00317F 00 B8                    6 	.word cold_start  
      003181                       4669 	_dict_entry,4+F_IFUNC,READ,read  
      003181 31 78                    1 	.word LINK 
                           003183     2 	LINK=.
      003183                          3 READ:
      003183 14                       4 	.byte 4+F_IFUNC   	
      003184 52 45 41 44              5 	.ascii "READ"
      003188 2E 83                    6 	.word read  
      00318A                       4670 	_dict_entry,4+F_IFUNC,QKEY,qkey
      00318A 31 83                    1 	.word LINK 
                           00318C     2 	LINK=.
      00318C                          3 QKEY:
      00318C 14                       4 	.byte 4+F_IFUNC   	
      00318D 51 4B 45 59              5 	.ascii "QKEY"
      003191 29 98                    6 	.word qkey  
      003193                       4671 	_dict_entry,3,PUT,xput 
      003193 31 8C                    1 	.word LINK 
                           003195     2 	LINK=.
      003195                          3 PUT:
      003195 03                       4 	.byte 3   	
      003196 50 55 54                 5 	.ascii "PUT"
      003199 30 1B                    6 	.word xput  
      00319B                       4672 	_dict_entry,4,PUSH,xpush   
      00319B 31 95                    1 	.word LINK 
                           00319D     2 	LINK=.
      00319D                          3 PUSH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00319D 04                       4 	.byte 4   	
      00319E 50 55 53 48              5 	.ascii "PUSH"
      0031A2 2F 8C                    6 	.word xpush  
      0031A4                       4673 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      0031A4 31 9D                    1 	.word LINK 
                           0031A6     2 	LINK=.
      0031A6                          3 PORTI:
      0031A6 15                       4 	.byte 5+F_IFUNC   	
      0031A7 50 4F 52 54 49           5 	.ascii "PORTI"
      0031AC 2D D8                    6 	.word const_porti  
      0031AE                       4674 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      0031AE 31 A6                    1 	.word LINK 
                           0031B0     2 	LINK=.
      0031B0                          3 PORTG:
      0031B0 15                       4 	.byte 5+F_IFUNC   	
      0031B1 50 4F 52 54 47           5 	.ascii "PORTG"
      0031B6 2D D3                    6 	.word const_portg  
      0031B8                       4675 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      0031B8 31 B0                    1 	.word LINK 
                           0031BA     2 	LINK=.
      0031BA                          3 PORTF:
      0031BA 15                       4 	.byte 5+F_IFUNC   	
      0031BB 50 4F 52 54 46           5 	.ascii "PORTF"
      0031C0 2D CE                    6 	.word const_portf  
      0031C2                       4676 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      0031C2 31 BA                    1 	.word LINK 
                           0031C4     2 	LINK=.
      0031C4                          3 PORTE:
      0031C4 15                       4 	.byte 5+F_IFUNC   	
      0031C5 50 4F 52 54 45           5 	.ascii "PORTE"
      0031CA 2D C9                    6 	.word const_porte  
      0031CC                       4677 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      0031CC 31 C4                    1 	.word LINK 
                           0031CE     2 	LINK=.
      0031CE                          3 PORTD:
      0031CE 15                       4 	.byte 5+F_IFUNC   	
      0031CF 50 4F 52 54 44           5 	.ascii "PORTD"
      0031D4 2D C4                    6 	.word const_portd  
      0031D6                       4678 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      0031D6 31 CE                    1 	.word LINK 
                           0031D8     2 	LINK=.
      0031D8                          3 PORTC:
      0031D8 15                       4 	.byte 5+F_IFUNC   	
      0031D9 50 4F 52 54 43           5 	.ascii "PORTC"
      0031DE 2D BF                    6 	.word const_portc  
      0031E0                       4679 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      0031E0 31 D8                    1 	.word LINK 
                           0031E2     2 	LINK=.
      0031E2                          3 PORTB:
      0031E2 15                       4 	.byte 5+F_IFUNC   	
      0031E3 50 4F 52 54 42           5 	.ascii "PORTB"
      0031E8 2D BA                    6 	.word const_portb  
      0031EA                       4680 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      0031EA 31 E2                    1 	.word LINK 
                           0031EC     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0031EC                          3 PORTA:
      0031EC 15                       4 	.byte 5+F_IFUNC   	
      0031ED 50 4F 52 54 41           5 	.ascii "PORTA"
      0031F2 2D B5                    6 	.word const_porta  
      0031F4                       4681 	_dict_entry 5,PRINT,print 
      0031F4 31 EC                    1 	.word LINK 
                           0031F6     2 	LINK=.
      0031F6                          3 PRINT:
      0031F6 05                       4 	.byte 5   	
      0031F7 50 52 49 4E 54           5 	.ascii "PRINT"
      0031FC 1F F9                    6 	.word print  
      0031FE                       4682 	_dict_entry,4+F_IFUNC,POUT,const_output
      0031FE 31 F6                    1 	.word LINK 
                           003200     2 	LINK=.
      003200                          3 POUT:
      003200 14                       4 	.byte 4+F_IFUNC   	
      003201 50 4F 55 54              5 	.ascii "POUT"
      003205 2D F6                    6 	.word const_output  
      003207                       4683 	_dict_entry,3+F_IFUNC,POP,xpop 
      003207 32 00                    1 	.word LINK 
                           003209     2 	LINK=.
      003209                          3 POP:
      003209 13                       4 	.byte 3+F_IFUNC   	
      00320A 50 4F 50                 5 	.ascii "POP"
      00320D 2F 90                    6 	.word xpop  
      00320F                       4684 	_dict_entry,4,POKE,poke 
      00320F 32 09                    1 	.word LINK 
                           003211     2 	LINK=.
      003211                          3 POKE:
      003211 04                       4 	.byte 4   	
      003212 50 4F 4B 45              5 	.ascii "POKE"
      003216 22 22                    6 	.word poke  
      003218                       4685 	_dict_entry,5,PMODE,pin_mode 
      003218 32 11                    1 	.word LINK 
                           00321A     2 	LINK=.
      00321A                          3 PMODE:
      00321A 05                       4 	.byte 5   	
      00321B 50 4D 4F 44 45           5 	.ascii "PMODE"
      003220 2B 23                    6 	.word pin_mode  
      003222                       4686 	_dict_entry,4+F_IFUNC,PINP,const_input
      003222 32 1A                    1 	.word LINK 
                           003224     2 	LINK=.
      003224                          3 PINP:
      003224 14                       4 	.byte 4+F_IFUNC   	
      003225 50 49 4E 50              5 	.ascii "PINP"
      003229 2D FB                    6 	.word const_input  
      00322B                       4687 	_dict_entry,4+F_IFUNC,PICK,xpick 
      00322B 32 24                    1 	.word LINK 
                           00322D     2 	LINK=.
      00322D                          3 PICK:
      00322D 14                       4 	.byte 4+F_IFUNC   	
      00322E 50 49 43 4B              5 	.ascii "PICK"
      003232 30 4E                    6 	.word xpick  
      003234                       4688 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003234 32 2D                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                           003236     2 	LINK=.
      003236                          3 PEEK:
      003236 14                       4 	.byte 4+F_IFUNC   	
      003237 50 45 45 4B              5 	.ascii "PEEK"
      00323B 22 43                    6 	.word peek  
      00323D                       4689 	_dict_entry,5,PAUSE,pause 
      00323D 32 36                    1 	.word LINK 
                           00323F     2 	LINK=.
      00323F                          3 PAUSE:
      00323F 05                       4 	.byte 5   	
      003240 50 41 55 53 45           5 	.ascii "PAUSE"
      003245 2A 2C                    6 	.word pause  
      003247                       4690 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      003247 32 3F                    1 	.word LINK 
                           003249     2 	LINK=.
      003249                          3 PAD:
      003249 13                       4 	.byte 3+F_IFUNC   	
      00324A 50 41 44                 5 	.ascii "PAD"
      00324D 2F 87                    6 	.word pad_ref  
      00324F                       4691 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      00324F 32 49                    1 	.word LINK 
                           003251     2 	LINK=.
      003251                          3 OR:
      003251 92                       4 	.byte 2+F_OR   	
      003252 4F 52                    5 	.ascii "OR"
      003254 00 89                    6 	.word TK_OR  
      003256                       4692 	_dict_entry,2,ON,cmd_on 
      003256 32 51                    1 	.word LINK 
                           003258     2 	LINK=.
      003258                          3 ON:
      003258 02                       4 	.byte 2   	
      003259 4F 4E                    5 	.ascii "ON"
      00325B 24 20                    6 	.word cmd_on  
      00325D                       4693 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00325D 32 58                    1 	.word LINK 
                           00325F     2 	LINK=.
      00325F                          3 ODR:
      00325F 13                       4 	.byte 3+F_IFUNC   	
      003260 4F 44 52                 5 	.ascii "ODR"
      003263 2D DD                    6 	.word const_odr  
      003265                       4694 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      003265 32 5F                    1 	.word LINK 
                           003267     2 	LINK=.
      003267                          3 NOT:
      003267 73                       4 	.byte 3+F_NOT   	
      003268 4E 4F 54                 5 	.ascii "NOT"
      00326B 00 87                    6 	.word TK_NOT  
      00326D                       4695 	_dict_entry,4,NEXT,next 
      00326D 32 67                    1 	.word LINK 
                           00326F     2 	LINK=.
      00326F                          3 NEXT:
      00326F 04                       4 	.byte 4   	
      003270 4E 45 58 54              5 	.ascii "NEXT"
      003274 23 39                    6 	.word next  
      003276                       4696 	_dict_entry,3,NEW,new
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003276 32 6F                    1 	.word LINK 
                           003278     2 	LINK=.
      003278                          3 NEW:
      003278 03                       4 	.byte 3   	
      003279 4E 45 57                 5 	.ascii "NEW"
      00327C 27 66                    6 	.word new  
      00327E                       4697 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00327E 32 78                    1 	.word LINK 
                           003280     2 	LINK=.
      003280                          3 LSHIFT:
      003280 16                       4 	.byte 6+F_IFUNC   	
      003281 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003287 2A BC                    6 	.word lshift  
      003289                       4698 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003289 32 80                    1 	.word LINK 
                           00328B     2 	LINK=.
      00328B                          3 LOG2:
      00328B 14                       4 	.byte 4+F_IFUNC   	
      00328C 4C 4F 47 32              5 	.ascii "LOG2"
      003290 2D 1C                    6 	.word log2  
      003292                       4699 	_dict_entry 4,LIST,list
      003292 32 8B                    1 	.word LINK 
                           003294     2 	LINK=.
      003294                          3 LIST:
      003294 04                       4 	.byte 4   	
      003295 4C 49 53 54              5 	.ascii "LIST"
      003299 1E EC                    6 	.word list  
      00329B                       4700 	_dict_entry 3,LET,let 
      00329B 32 94                    1 	.word LINK 
                           00329D     2 	LINK=.
      00329D                          3 LET:
      00329D 03                       4 	.byte 3   	
      00329E 4C 45 54                 5 	.ascii "LET"
      0032A1 1C 81                    6 	.word let  
      0032A3                       4701 	_dict_entry,3+F_CFUNC,KEY,key 
      0032A3 32 9D                    1 	.word LINK 
                           0032A5     2 	LINK=.
      0032A5                          3 KEY:
      0032A5 23                       4 	.byte 3+F_CFUNC   	
      0032A6 4B 45 59                 5 	.ascii "KEY"
      0032A9 29 94                    6 	.word key  
      0032AB                       4702 	_dict_entry,7,IWDGREF,refresh_iwdg
      0032AB 32 A5                    1 	.word LINK 
                           0032AD     2 	LINK=.
      0032AD                          3 IWDGREF:
      0032AD 07                       4 	.byte 7   	
      0032AE 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0032B5 2D 17                    6 	.word refresh_iwdg  
      0032B7                       4703 	_dict_entry,6,IWDGEN,enable_iwdg
      0032B7 32 AD                    1 	.word LINK 
                           0032B9     2 	LINK=.
      0032B9                          3 IWDGEN:
      0032B9 06                       4 	.byte 6   	
      0032BA 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0032C0 2C D9                    6 	.word enable_iwdg  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0032C2                       4704 	_dict_entry,5,INPUT,input_var  
      0032C2 32 B9                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 INPUT:
      0032C4 05                       4 	.byte 5   	
      0032C5 49 4E 50 55 54           5 	.ascii "INPUT"
      0032CA 20 A2                    6 	.word input_var  
      0032CC                       4705 	_dict_entry,2,IF,if 
      0032CC 32 C4                    1 	.word LINK 
                           0032CE     2 	LINK=.
      0032CE                          3 IF:
      0032CE 02                       4 	.byte 2   	
      0032CF 49 46                    5 	.ascii "IF"
      0032D1 22 64                    6 	.word if  
      0032D3                       4706 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      0032D3 32 CE                    1 	.word LINK 
                           0032D5     2 	LINK=.
      0032D5                          3 IDR:
      0032D5 13                       4 	.byte 3+F_IFUNC   	
      0032D6 49 44 52                 5 	.ascii "IDR"
      0032D9 2D E2                    6 	.word const_idr  
      0032DB                       4707 	_dict_entry,3,HEX,hex_base
      0032DB 32 D5                    1 	.word LINK 
                           0032DD     2 	LINK=.
      0032DD                          3 HEX:
      0032DD 03                       4 	.byte 3   	
      0032DE 48 45 58                 5 	.ascii "HEX"
      0032E1 1C 36                    6 	.word hex_base  
      0032E3                       4708 	_dict_entry,4,GOTO,goto 
      0032E3 32 DD                    1 	.word LINK 
                           0032E5     2 	LINK=.
      0032E5                          3 GOTO:
      0032E5 04                       4 	.byte 4   	
      0032E6 47 4F 54 4F              5 	.ascii "GOTO"
      0032EA 24 B2                    6 	.word goto  
      0032EC                       4709 	_dict_entry,5,GOSUB,gosub 
      0032EC 32 E5                    1 	.word LINK 
                           0032EE     2 	LINK=.
      0032EE                          3 GOSUB:
      0032EE 05                       4 	.byte 5   	
      0032EF 47 4F 53 55 42           5 	.ascii "GOSUB"
      0032F4 24 CC                    6 	.word gosub  
      0032F6                       4710 	_dict_entry,3,GET,cmd_get 
      0032F6 32 EE                    1 	.word LINK 
                           0032F8     2 	LINK=.
      0032F8                          3 GET:
      0032F8 03                       4 	.byte 3   	
      0032F9 47 45 54                 5 	.ascii "GET"
      0032FC 25 79                    6 	.word cmd_get  
      0032FE                       4711 	_dict_entry,4+F_IFUNC,FREE,free
      0032FE 32 F8                    1 	.word LINK 
                           003300     2 	LINK=.
      003300                          3 FREE:
      003300 14                       4 	.byte 4+F_IFUNC   	
      003301 46 52 45 45              5 	.ascii "FREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003305 1C 40                    6 	.word free  
      003307                       4712 	_dict_entry,3,FOR,for 
      003307 33 00                    1 	.word LINK 
                           003309     2 	LINK=.
      003309                          3 FOR:
      003309 03                       4 	.byte 3   	
      00330A 46 4F 52                 5 	.ascii "FOR"
      00330D 22 81                    6 	.word for  
      00330F                       4713 	_dict_entry,4,FCPU,fcpu 
      00330F 33 09                    1 	.word LINK 
                           003311     2 	LINK=.
      003311                          3 FCPU:
      003311 04                       4 	.byte 4   	
      003312 46 43 50 55              5 	.ascii "FCPU"
      003316 2B 14                    6 	.word fcpu  
      003318                       4714 	_dict_entry,5,ERASE,erase 
      003318 33 11                    1 	.word LINK 
                           00331A     2 	LINK=.
      00331A                          3 ERASE:
      00331A 05                       4 	.byte 5   	
      00331B 45 52 41 53 45           5 	.ascii "ERASE"
      003320 27 70                    6 	.word erase  
      003322                       4715 	_dict_entry,3,END,cmd_end  
      003322 33 1A                    1 	.word LINK 
                           003324     2 	LINK=.
      003324                          3 END:
      003324 03                       4 	.byte 3   	
      003325 45 4E 44                 5 	.ascii "END"
      003328 25 72                    6 	.word cmd_end  
      00332A                       4716 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      00332A 33 24                    1 	.word LINK 
                           00332C     2 	LINK=.
      00332C                          3 EEPROM:
      00332C 16                       4 	.byte 6+F_IFUNC   	
      00332D 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003333 2E 00                    6 	.word const_eeprom_base  
      003335                       4717 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003335 33 2C                    1 	.word LINK 
                           003337     2 	LINK=.
      003337                          3 EEFREE:
      003337 16                       4 	.byte 6+F_IFUNC   	
      003338 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00333E 1D 41                    6 	.word func_eefree  
      003340                       4718 	_dict_entry,4,EDIT,edit 
      003340 33 37                    1 	.word LINK 
                           003342     2 	LINK=.
      003342                          3 EDIT:
      003342 04                       4 	.byte 4   	
      003343 45 44 49 54              5 	.ascii "EDIT"
      003347 1F 91                    6 	.word edit  
      003349                       4719 	_dict_entry,6+F_CMD,DWRITE,digital_write
      003349 33 42                    1 	.word LINK 
                           00334B     2 	LINK=.
      00334B                          3 DWRITE:
      00334B 06                       4 	.byte 6+F_CMD   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00334C 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003352 26 CF                    6 	.word digital_write  
      003354                       4720 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      003354 33 4B                    1 	.word LINK 
                           003356     2 	LINK=.
      003356                          3 DROP:
      003356 04                       4 	.byte 4   	
      003357 44 52 4F 50              5 	.ascii "DROP"
      00335B 2F D0                    6 	.word xdrop  
      00335D                       4721 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00335D 33 56                    1 	.word LINK 
                           00335F     2 	LINK=.
      00335F                          3 DREAD:
      00335F 15                       4 	.byte 5+F_IFUNC   	
      003360 44 52 45 41 44           5 	.ascii "DREAD"
      003365 26 98                    6 	.word digital_read  
      003367                       4722 	_dict_entry,2,DO,do_loop
      003367 33 5F                    1 	.word LINK 
                           003369     2 	LINK=.
      003369                          3 DO:
      003369 02                       4 	.byte 2   	
      00336A 44 4F                    5 	.ascii "DO"
      00336C 2D 6F                    6 	.word do_loop  
      00336E                       4723 	_dict_entry,3,DIM,cmd_dim 
      00336E 33 69                    1 	.word LINK 
                           003370     2 	LINK=.
      003370                          3 DIM:
      003370 03                       4 	.byte 3   	
      003371 44 49 4D                 5 	.ascii "DIM"
      003374 1D C5                    6 	.word cmd_dim  
      003376                       4724 	_dict_entry,3,DEC,dec_base
      003376 33 70                    1 	.word LINK 
                           003378     2 	LINK=.
      003378                          3 DEC:
      003378 03                       4 	.byte 3   	
      003379 44 45 43                 5 	.ascii "DEC"
      00337C 1C 3B                    6 	.word dec_base  
      00337E                       4725 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      00337E 33 78                    1 	.word LINK 
                           003380     2 	LINK=.
      003380                          3 DDR:
      003380 13                       4 	.byte 3+F_IFUNC   	
      003381 44 44 52                 5 	.ascii "DDR"
      003384 2D E7                    6 	.word const_ddr  
      003386                       4726 	_dict_entry,4,DATA,data  
      003386 33 80                    1 	.word LINK 
                           003388     2 	LINK=.
      003388                          3 DATA:
      003388 04                       4 	.byte 4   	
      003389 44 41 54 41              5 	.ascii "DATA"
      00338D 2E 05                    6 	.word data  
      00338F                       4727 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      00338F 33 88                    1 	.word LINK 
                           003391     2 	LINK=.
      003391                          3 CR2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      003391 13                       4 	.byte 3+F_IFUNC   	
      003392 43 52 32                 5 	.ascii "CR2"
      003395 2D F1                    6 	.word const_cr2  
      003397                       4728 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      003397 33 91                    1 	.word LINK 
                           003399     2 	LINK=.
      003399                          3 CR1:
      003399 13                       4 	.byte 3+F_IFUNC   	
      00339A 43 52 31                 5 	.ascii "CR1"
      00339D 2D EC                    6 	.word const_cr1  
      00339F                       4729 	_dict_entry,5,CONST,cmd_const 
      00339F 33 99                    1 	.word LINK 
                           0033A1     2 	LINK=.
      0033A1                          3 CONST:
      0033A1 05                       4 	.byte 5   	
      0033A2 43 4F 4E 53 54           5 	.ascii "CONST"
      0033A7 1D B1                    6 	.word cmd_const  
      0033A9                       4730 	_dict_entry,4+F_CFUNC,CHAR,func_char
      0033A9 33 A1                    1 	.word LINK 
                           0033AB     2 	LINK=.
      0033AB                          3 CHAR:
      0033AB 24                       4 	.byte 4+F_CFUNC   	
      0033AC 43 48 41 52              5 	.ascii "CHAR"
      0033B0 29 3E                    6 	.word func_char  
      0033B2                       4731 	_dict_entry,3,BYE,bye 
      0033B2 33 AB                    1 	.word LINK 
                           0033B4     2 	LINK=.
      0033B4                          3 BYE:
      0033B4 03                       4 	.byte 3   	
      0033B5 42 59 45                 5 	.ascii "BYE"
      0033B8 2A 18                    6 	.word bye  
      0033BA                       4732 	_dict_entry,5,BTOGL,bit_toggle
      0033BA 33 B4                    1 	.word LINK 
                           0033BC     2 	LINK=.
      0033BC                          3 BTOGL:
      0033BC 05                       4 	.byte 5   	
      0033BD 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0033C2 21 C9                    6 	.word bit_toggle  
      0033C4                       4733 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0033C4 33 BC                    1 	.word LINK 
                           0033C6     2 	LINK=.
      0033C6                          3 BTEST:
      0033C6 15                       4 	.byte 5+F_IFUNC   	
      0033C7 42 54 45 53 54           5 	.ascii "BTEST"
      0033CC 21 EB                    6 	.word bit_test  
      0033CE                       4734 	_dict_entry,4,BSET,bit_set 
      0033CE 33 C6                    1 	.word LINK 
                           0033D0     2 	LINK=.
      0033D0                          3 BSET:
      0033D0 04                       4 	.byte 4   	
      0033D1 42 53 45 54              5 	.ascii "BSET"
      0033D5 21 84                    6 	.word bit_set  
      0033D7                       4735 	_dict_entry,4,BRES,bit_reset
      0033D7 33 D0                    1 	.word LINK 
                           0033D9     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0033D9                          3 BRES:
      0033D9 04                       4 	.byte 4   	
      0033DA 42 52 45 53              5 	.ascii "BRES"
      0033DE 21 A6                    6 	.word bit_reset  
      0033E0                       4736 	_dict_entry,3+F_IFUNC,BIT,bitmask
      0033E0 33 D9                    1 	.word LINK 
                           0033E2     2 	LINK=.
      0033E2                          3 BIT:
      0033E2 13                       4 	.byte 3+F_IFUNC   	
      0033E3 42 49 54                 5 	.ascii "BIT"
      0033E6 2D 49                    6 	.word bitmask  
      0033E8                       4737 	_dict_entry,3,AWU,awu 
      0033E8 33 E2                    1 	.word LINK 
                           0033EA     2 	LINK=.
      0033EA                          3 AWU:
      0033EA 03                       4 	.byte 3   	
      0033EB 41 57 55                 5 	.ascii "AWU"
      0033EE 2A 4C                    6 	.word awu  
      0033F0                       4738 	_dict_entry,3+F_IFUNC,ASC,ascii
      0033F0 33 EA                    1 	.word LINK 
                           0033F2     2 	LINK=.
      0033F2                          3 ASC:
      0033F2 13                       4 	.byte 3+F_IFUNC   	
      0033F3 41 53 43                 5 	.ascii "ASC"
      0033F6 29 55                    6 	.word ascii  
      0033F8                       4739 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0033F8 33 F2                    1 	.word LINK 
                           0033FA     2 	LINK=.
      0033FA                          3 AND:
      0033FA 83                       4 	.byte 3+F_AND   	
      0033FB 41 4E 44                 5 	.ascii "AND"
      0033FE 00 88                    6 	.word TK_AND  
      003400                       4740 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      003400 33 FA                    1 	.word LINK 
                           003402     2 	LINK=.
      003402                          3 ALLOC:
      003402 05                       4 	.byte 5   	
      003403 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      003408 2F 9A                    6 	.word xalloc  
      00340A                       4741 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00340A 34 02                    1 	.word LINK 
                           00340C     2 	LINK=.
      00340C                          3 ADCREAD:
      00340C 17                       4 	.byte 7+F_IFUNC   	
      00340D 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003414 26 5C                    6 	.word analog_read  
      003416                       4742 	_dict_entry,5,ADCON,power_adc 
      003416 34 0C                    1 	.word LINK 
                           003418     2 	LINK=.
      003418                          3 ADCON:
      003418 05                       4 	.byte 5   	
      003419 41 44 43 4F 4E           5 	.ascii "ADCON"
      00341E 26 0C                    6 	.word power_adc  
      003420                       4743 kword_dict::
      003420                       4744 	_dict_entry,3+F_IFUNC,ABS,abs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      003420 34 18                    1 	.word LINK 
                           003422     2 	LINK=.
      003422                          3 ABS:
      003422 13                       4 	.byte 3+F_IFUNC   	
      003423 41 42 53                 5 	.ascii "ABS"
      003426 2A A5                    6 	.word abs  
                                   4745 
                           000000  4746 INDIRECT=0 
                           000000  4747 .if INDIRECT 
                                   4748 ;comands and fonctions address table 	
                                   4749 code_addr::
                                   4750 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4751 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4752 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4753 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4754 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4755 	.word let,list,log2,lshift,next,new ; 40..47
                                   4756 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4757 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4758 	.word const_portf,const_portg,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4759 	.word restore,return, random,rshift,run,free ; 72..79
                                   4760 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4761 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4762 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4763 	.word func_eefree,0 
                                   4764 .endif 
                                   4765 
                                   4766 
                                   4767 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      003428                         30 test:
      003428                         31     _vars VSIZE 
      003428 52 08            [ 2]    1     sub sp,#VSIZE 
      00342A AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      00342D 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      00342F CE 00 0F         [ 2]   34     ldw x,ticks 
      003432 1F 01            [ 2]   35     ldw (T,sp),x
      003434                         36 1$: ; test add24 
      003434 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      003436 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      003439 C7 00 0C         [ 1]   39     ld acc24,a 
      00343C CF 00 0D         [ 2]   40     ldw acc24+1,x  
      00343F A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      003441 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003444 CD 01 6E         [ 4]   43     call add24 
      003447 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003449 1D 00 01         [ 2]   45     subw x,#1
      00344C 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      00344E 26 E4            [ 1]   47     jrne 1$
      003450 CD 17 FC         [ 4]   48     call prt_acc24
      003453 A6 20            [ 1]   49     ld a,#SPACE 
      003455 CD 08 DE         [ 4]   50     call putc 
      003458 CE 00 0F         [ 2]   51     ldw x,ticks 
      00345B 72 F0 01         [ 2]   52     subw x,(T,sp)
      00345E CD 17 E5         [ 4]   53     call prt_i16  
      003461 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      003463 CD 08 DE         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003466 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003469 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      00346B CE 00 0F         [ 2]   60     ldw x,ticks 
      00346E 1F 01            [ 2]   61     ldw (T,sp),x 
      003470                         62 2$: 
      003470 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      003472 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003475 C7 00 0C         [ 1]   65     ld acc24,a 
      003478 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      00347B A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      00347D AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003480 CD 02 69         [ 4]   69     call mul24 
      003483 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003485 1D 00 01         [ 2]   71     subw x,#1
      003488 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      00348A 26 E4            [ 1]   73     jrne 2$ 
      00348C CD 17 FC         [ 4]   74    call prt_acc24 
      00348F A6 20            [ 1]   75    ld a,#SPACE 
      003491 CD 08 DE         [ 4]   76    call putc 
      003494 CE 00 0F         [ 2]   77     ldw x,ticks 
      003497 72 F0 01         [ 2]   78     subw x,(T,sp)
      00349A CD 17 E5         [ 4]   79     call prt_i16 
      00349D A6 0D            [ 1]   80     ld a,#CR 
      00349F CD 08 DE         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      0034A2 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      0034A5 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      0034A7 CE 00 0F         [ 2]   85     ldw x,ticks 
      0034AA 1F 01            [ 2]   86     ldw (T,sp),x 
      0034AC                         87 3$: 
      0034AC A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      0034AE AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      0034B1 C7 00 0C         [ 1]   90     ld acc24,a 
      0034B4 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      0034B7 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      0034B9 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034BC CD 02 69         [ 4]   94     call mul24 
      0034BF 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034C1 1D 00 01         [ 2]   96     subw x,#1
      0034C4 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034C6 26 E4            [ 1]   98     jrne 3$ 
      0034C8 CD 17 FC         [ 4]   99     call prt_acc24    
      0034CB A6 20            [ 1]  100     ld a,#SPACE 
      0034CD CD 08 DE         [ 4]  101     call putc 
      0034D0 CE 00 0F         [ 2]  102     ldw x,ticks 
      0034D3 72 F0 01         [ 2]  103     subw x,(T,sp)
      0034D6 CD 17 E5         [ 4]  104     call prt_i16 
      0034D9 A6 0D            [ 1]  105     ld a,#CR 
      0034DB CD 08 DE         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      0034DE CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      0034E1 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      0034E3 CE 00 0F         [ 2]  110     ldw x,ticks 
      0034E6 1F 01            [ 2]  111     ldw (T,sp),x 
      0034E8                        112 4$:
      0034E8 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034EA AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0034ED C7 00 0C         [ 1]  115     ld acc24,a 
      0034F0 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0034F3 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0034F5 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0034F8 CD 02 69         [ 4]  119     call mul24 
      0034FB 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0034FD 1D 00 01         [ 2]  121     subw x,#1
      003500 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003502 26 E4            [ 1]  123     jrne 4$ 
      003504 CD 17 FC         [ 4]  124     call prt_acc24 
      003507 A6 20            [ 1]  125     ld a,#SPACE 
      003509 CD 08 DE         [ 4]  126     call putc 
      00350C CE 00 0F         [ 2]  127     ldw x,ticks 
      00350F 72 F0 01         [ 2]  128     subw x,(T,sp)
      003512 CD 17 E5         [ 4]  129     call prt_i16 
      003515 A6 0D            [ 1]  130     ld a,#CR 
      003517 CD 08 DE         [ 4]  131     call putc 
                                    132 ; test abs24 
      00351A CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      00351D 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      00351F CE 00 0F         [ 2]  135     ldw x,ticks 
      003522 1F 01            [ 2]  136     ldw (T,sp),x 
      003524                        137 5$: 
      003524 A6 FF            [ 1]  138     ld a,#0xff
      003526 AE FF FF         [ 2]  139     ldw x,#0xffff
      003529 CD 01 E3         [ 4]  140     call abs24 
      00352C C7 00 0C         [ 1]  141     ld acc24,a 
      00352F CF 00 0D         [ 2]  142     ldw acc24+1,x
      003532 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003534 1D 00 01         [ 2]  144     subw x,#1
      003537 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      003539 26 E9            [ 1]  146     jrne 5$ 
      00353B CD 17 FC         [ 4]  147     call prt_acc24 
      00353E A6 20            [ 1]  148     ld a,#SPACE 
      003540 CD 08 DE         [ 4]  149     call putc 
      003543 CE 00 0F         [ 2]  150     ldw x,ticks 
      003546 72 F0 01         [ 2]  151     subw x,(T,sp)
      003549 CD 17 E5         [ 4]  152     call prt_i16 
      00354C                        153 6$:
      00354C A6 0D            [ 1]  154     ld a,#CR 
      00354E CD 08 DE         [ 4]  155     call putc 
      003551 CD 35 97         [ 4]  156     call read_integer 
      003554 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003559 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      00355E 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003563 CD 35 97         [ 4]  160     call read_integer 
      003566 C6 00 0C         [ 1]  161     ld a,acc24 
      003569 CE 00 0D         [ 2]  162     ldw x,acc16 
      00356C 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      003571 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      003576 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      00357B CD 02 F7         [ 4]  166     call div24 
      00357E 88               [ 1]  167     push a 
      00357F 89               [ 2]  168     pushw x 
      003580 CD 17 FC         [ 4]  169     call prt_acc24 
      003583 A6 20            [ 1]  170     ld a,#SPACE 
      003585 CD 08 DE         [ 4]  171     call putc 
      003588 85               [ 2]  172     popw x
      003589 CF 00 0D         [ 2]  173     ldw acc16,x  
      00358C 32 00 0C         [ 1]  174     pop acc24 
      00358F CD 17 FC         [ 4]  175     call prt_acc24
      003592 20 B8            [ 2]  176     jra 6$
      003594                        177     _drop VSIZE 
      003594 5B 08            [ 2]    1     addw sp,#VSIZE 
      003596 81               [ 4]  178     ret 
                                    179 
                                    180 
      003597                        181 read_integer:
      003597 A6 3F            [ 1]  182     ld a,#'? 
      003599 CD 08 DE         [ 4]  183     call putc  
      00359C 72 5F 00 03      [ 1]  184 	clr count  
      0035A0 CD 0A 40         [ 4]  185 	call readln 
      0035A3 AE 16 90         [ 2]  186 	ldw x,#tib 
      0035A6 3B 00 03         [ 1]  187 	push count
      0035A9 4B 00            [ 1]  188 	push #0 
      0035AB 72 FB 01         [ 2]  189 	addw x,(1,sp)
      0035AE 5C               [ 1]  190 	incw x 
      0035AF                        191 	_drop 2 
      0035AF 5B 02            [ 2]    1     addw sp,#2 
      0035B1 72 5F 00 01      [ 1]  192 	clr in 
      0035B5 CD 0E B5         [ 4]  193 	call get_token
      0035B8 A1 84            [ 1]  194 	cp a,#TK_INTGR
      0035BA 27 0F            [ 1]  195 	jreq 3$ 
      0035BC A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035BE CD 0E B5         [ 4]  197 	call get_token 
      0035C1 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035C3 27 03            [ 1]  199 	jreq 2$
      0035C5 CC 16 39         [ 2]  200 	jp syntax_error
      0035C8                        201 2$:
      0035C8 CD 02 0D         [ 4]  202 	call neg_acc24  	
      0035CB                        203 3$: 
      0035CB 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        003422 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003418 R
    ADCON_ID=  000002     |   4 ADCREAD    00340C R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      003402 R   |   4 AND        0033FA R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        0033F2 R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   00014C R   |   4 AWU        0033EA R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        0033E2 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       0033D9 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       0033D0 R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      0033C6 R
    BTEST_ID=  000010     |   4 BTOGL      0033BC R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        0033B4 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    0028A3 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       0033AB R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000003     |     CNT_LO  =  000004 
    CODE_ADD=  000001     |     COMMA   =  00002C     |   4 CONST      0033A1 R
  4 CONST_CO   001D2B R   |     CONST_ID=  0000B6     |     COUNT   =  000003 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   4 CR1        003399 R   |     CR1_IDX =  00001A 
  4 CR2        003391 R   |     CR2_IDX =  000018     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000004     |     CTX_BPTR=  000001 
    CTX_COUN=  000004     |     CTX_IN  =  000003     |     CURR    =  000002 
    CVAR    =  000009     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   4 DATA       003388 R   |     DATA_IDX=  00001C 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        003380 R   |     DDR_IDX =  00001E 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        003378 R   |     DEC_IDX =  000020     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   4 DIM        003370 R
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         003369 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      00335F R   |     DREAD_ID=  000024     |   4 DROP       003356 R
  4 DWRITE     00334B R   |     DWRITE_I=  000026     |   4 DebugHan   000012 R
  4 EDIT       003342 R   |     EDIT_IDX=  000028     |   4 EEFREE     003337 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    EEFREE_I=  0000B8     |   4 EEPROM     00332C R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002A     |     EEPROM_S=  000800 
    EM      =  000019     |   4 END        003324 R   |     END_IDX =  00002C 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
  4 ERASE      00331A R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_OVER=  000010     |     ERR_RD_O=  000011 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       003311 R   |     FCPU_IDX=  000030     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001ECC R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        003309 R   |     FOR_IDX =  000034 
  4 FREE       003300 R   |     FREE_IDX=  000088     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        0032F8 R   |     GET_IDX =  0000B4     |   4 GOSUB      0032EE R
    GOSUB_ID=  000036     |   4 GOTO       0032E5 R   |     GOTO_IDX=  000038 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        0032DD R
    HEX_IDX =  00003A     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        0032D5 R   |     IDR_IDX =  00003C     |   4 IF         0032CE R
    IF_IDX  =  00003E     |     IN      =  000005     |     INCR    =  000001 
    INDIRECT=  000000     |     INP     =  000000     |   4 INPUT      0032C4 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000040     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  00000B     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   4 IWDGEN     0032B9 R
    IWDGEN_I=  000042     |   4 IWDGREF    0032AD R   |     IWDGREF_=  000044 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    KCHAR   =  000002     |   4 KEY        0032A5 R   |     KEY_END =  000083 
    KEY_IDX =  000046     |     KW_TYPE_=  0000F0     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        00329D R
    LET_IDX =  000048     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  003422 R   |   4 LIST       003294 R
    LIST_IDX=  00004A     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG2       00328B R
    LOG_IDX =  00004C     |     LOOP_CNT=  002710     |   4 LSHIFT     003280 R
    LSHIFT_I=  00004E     |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000005     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NAME_MAX=  00000F     |     NCLKOPT =  004808 
    NEG     =  000001     |   4 NEW        003278 R   |     NEW_IDX =  000052 
  4 NEXT       00326F R   |     NEXT_IDX=  000050     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NLEN_MAS=  00000F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   4 NOT        003267 R
    NOT_IDX =  0000F8     |     NOT_OP  =  000001     |   4 NOT_SAVE   001FBE R
  4 NO_APP     0028E5 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        00325F R
    ODR_IDX =  000054     |   4 ON         003258 R   |     ONOFF   =  000003 
    ON_IDX  =  0000B2     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         003251 R   |     OR_IDX  =  0000FC     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        003249 R   |     PAD_IDX =  000056     |     PAD_SIZE=  000080 
  4 PAUSE      00323F R   |     PAUSE_ID=  000058     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       003236 R   |     PEEK_IDX=  00005C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  4 PICK       00322D R   |     PINNO   =  000001     |   4 PINP       003224 R
    PINP_IDX=  00005E     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      00321A R
    PMODE_ID=  00005A     |   4 POKE       003211 R   |     POKE_IDX=  000060 
  4 POP        003209 R   |   4 PORTA      0031EC R   |   4 PORTB      0031E2 R
  4 PORTC      0031D8 R   |   4 PORTD      0031CE R   |   4 PORTE      0031C4 R
  4 PORTF      0031BA R   |   4 PORTG      0031B0 R   |   4 PORTI      0031A6 R
  4 POUT       003200 R   |     POUT_IDX=  000062     |     PREV    =  000001 
  4 PRINT      0031F6 R   |     PROD    =  000001     |     PROD_SIG=  000004 
  4 PROG_ADD   001EA2 R   |   4 PROG_SIZ   001EB4 R   |     PRTA_IDX=  000066 
    PRTB_IDX=  000068     |     PRTC_IDX=  00006A     |     PRTD_IDX=  00006C 
    PRTE_IDX=  00006E     |     PRTF_IDX=  000070     |     PRTG_IDX=  000072 
    PRTI_IDX=  000074     |     PRT_IDX =  000064     |     PSIZE   =  00000B 
    PSTR    =  000003     |   4 PUSH       00319D R   |   4 PUT        003195 R
  4 QKEY       00318C R   |     QKEY_IDX=  000076     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001EDD R
    RAM_SIZE=  001800     |     RBT_IDX =  00007A     |   4 READ       003183 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    READ_IDX=  000078     |   4 REBOOT     003178 R   |     RECLEN  =  000005 
    REC_LEN =  000003     |     REC_XTRA=  000005     |   4 REG_A      0004CF R
  4 REG_CC     0004D3 R   |   4 REG_EPC    0004C2 R   |   4 REG_SP     0004D8 R
  4 REG_X      0004CB R   |   4 REG_Y      0004C7 R   |     RELOP   =  000001 
  4 REM        003170 R   |     REM_IDX =  00007C     |   4 RESTORE    003164 R
    REST_IDX=  00007E     |     RETL1   =  000001     |   4 RETURN     003159 R
    RET_ADDR=  000001     |     RET_BPTR=  000003     |     RET_IDX =  000080 
    RET_INW =  000005     |   4 RND        003151 R   |     RND_IDX =  000082 
    RONLY   =  000005     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     003146 R   |     RSHIFT_I=  000084     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        00313E R   |     RUN_IDX =  000086 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000001 
    R_CC    =  000006     |     R_PC    =  00000D     |     R_PCE   =  00000C 
    R_X     =  000002     |     R_Y     =  000004     |   4 SAVE       003135 R
    SAVE_ACC=  000002     |     SAVE_ACC=  000001     |     SAVE_IDX=  000032 
    SAV_ACC1=  000006     |     SAV_ACC2=  000008     |     SAV_COUN=  00000A 
    SAV_IN  =  000009     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   0028A1 R   |   4 SIZE       00312C R
    SIZE_IDX=  0000B0     |     SKIP    =  000005     |   4 SLEEP      003122 R
    SLEEP_ID=  00008A     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      003118 R   |     SPIEN_ID=  00008E 
  4 SPIRD      00310E R   |     SPIRD_ID=  00008C     |   4 SPISEL     003103 R
    SPISEL_I=  000090     |   4 SPIWR      0030F9 R   |     SPIWR_ID=  000092 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     000486 R
  4 STEP       0030F0 R   |     STEP_IDX=  000094     |   4 STOP       0030E7 R
    STOP_IDX=  000096     |     STR     =  000003     |   4 STR_BYTE   001EC5 R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      0030DD R   |     TICKS_ID=  000098 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    0030D1 R   |   4 TIMER      0030C7 R
    TIMER_ID=  00009A     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_AND  =  000088     |     TK_ARRAY=  000005     |     TK_CFUNC=  000082 
    TK_CHAR =  000004     |     TK_CMD  =  000080     |     TK_COLON=  00000A 
    TK_COMMA=  000008     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FLOAT=  000086     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000006     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_NOT  =  000087 
    TK_OR   =  000089     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  00008A     |     TMROUT_I=  00009C     |   4 TO         0030C0 R
  4 TONE       0030B7 R   |     TONE_IDX=  0000A0     |     TOWRITE =  000005 
    TO_IDX  =  00009E     |   4 Timer4Up   000016 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     0030AC R   |     UBOUND_I=  0000A2     |   4 UBTN_Han   00005D R
  4 UFLASH     0030A1 R   |     UFLASH_I=  0000A4     |   4 UNTIL      003097 R
    UNTIL_ID=  0000A6     |     US      =  00001F     |   4 USER_ABO   000065 R
  4 USR        00308F R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000A8     |   4 Uart1RxH   00086C R
  4 UserButt   000039 R   |     VAL1    =  02FFFF     |     VAL2    =  00002A 
    VAL3    =  000003     |     VAL4    =  0005FF     |     VAL5    =  FFFFFFFD 
    VAR_NAME=  000001     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       003086 R   |     WAIT_IDX=  0000AA     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |     WLKPTR  =  000003     |   4 WORDS      00307C R
    WORDS_ID=  0000AC     |   4 WRITE      003072 R   |     WRITE_ID=  0000AE 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        00306A R   |     XOR_IDX =  0000FE     |     XSAVE   =  000002 
    XSTACK_E=  001773     |     XSTACK_S=  000014     |     XTEMP   =  000001 
    YSAVE   =  000004     |     YTEMP   =  000003     |   4 abs        002AA5 R
  4 abs24      0001E3 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   000B9A R
  4 add24      00016E R   |   4 add_char   001305 R   |   4 add_spac   0010FD R
  4 analog_r   00265C R   |   4 and_cond   001B70 R   |   4 and_fact   001B40 R
  4 app        003604 R   |   4 app_sign   003600 R   |   4 app_size   003602 R
  4 app_spac   003600 GR  |   4 arduino_   002B92 R   |   4 arg_list   001965 R
  5 array_si   000020 R   |   4 ascii      002955 R   |   4 at_tst     000F6F R
  4 atoi24     001887 GR  |   4 atoi_exi   0018F6 R   |   4 awu        002A4C R
  4 awu02      002A5F R   |   4 bad_port   0029D0 R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       0025D3 R   |   4 beep_1kh   0025A6 GR
  4 bin_exit   000DD6 R   |   4 bit_rese   0021A6 R   |   4 bit_set    002184 R
  4 bit_test   0021EB R   |   4 bit_togg   0021C9 R   |   4 bitmask    002D49 R
  4 bkslsh_t   000F1C R   |   4 bksp       000945 R   |   2 block_bu   0016E0 GR
  4 block_er   00075A R   |   4 break_po   002748 R   |   4 bye        002A18 R
  4 clear_ba   001471 R   |   4 clear_bl   0027F8 R   |   4 clear_va   0013C9 R
  4 clock_in   000080 R   |   4 cmd_cons   001DB1 R   |   4 cmd_dim    001DC5 R
  4 cmd_dim1   001DCF R   |   4 cmd_dim2   001DD5 R   |   4 cmd_end    002572 R
  4 cmd_get    002579 R   |   4 cmd_itf    0004F3 R   |   4 cmd_line   0016C8 R
  4 cmd_name   001325 R   |   4 cmd_on     002420 R   |   4 cmd_size   001C49 R
  4 cold_sta   0000B8 R   |   4 colon_ts   000F43 R   |   4 comma_ts   000F4E R
  4 comp_msg   001618 R   |   4 compile    001069 GR  |   4 conditio   001BC2 R
  4 const_cr   002DEC R   |   4 const_cr   002DF1 R   |   4 const_dd   002DE7 R
  4 const_ee   002E00 R   |   4 const_id   002DE2 R   |   4 const_in   002DFB R
  4 const_od   002DDD R   |   4 const_ou   002DF6 R   |   4 const_po   002DB5 R
  4 const_po   002DBA R   |   4 const_po   002DBF R   |   4 const_po   002DC4 R
  4 const_po   002DC9 R   |   4 const_po   002DCE R   |   4 const_po   002DD3 R
  4 const_po   002DD8 R   |   4 convert_   000D46 R   |   4 convert_   000909 R
  4 copy_com   000FA4 R   |   5 count      000003 GR  |   4 cp24       0001A8 R
  4 cp24_ax    0001DA R   |   4 cp_loop    001916 R   |   4 cpl24      0001EA R
  4 cpy_cmd_   0010E5 R   |   4 cpy_quot   001125 R   |   4 create_g   000C70 R
  4 cs_high    002F82 R   |   4 dash_tst   000F64 R   |   4 data       002E05 R
  4 data_err   002E7E R   |   5 data_len   000009 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 dec_base   001C3B R   |   4 decomp_l   0011BD R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 decompil   001175 GR  |   4 del_line   000C43 R   |   4 delete_l   000A32 R
  4 delete_n   000955 R   |   4 delete_u   0009F7 R   |   4 digital_   002698 R
  4 digital_   0026CF R   |   4 div24      0002F7 R   |   4 divu24_8   0002D9 R
  4 do_loop    002D6F R   |   4 do_progr   00074D R   |   4 dup24      00015F R
  5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR  |   4 edit       001F91 R
  4 enable_i   002CD9 R   |   4 eql_tst    000FEF R   |   4 equal      001318 R
  4 erase      002770 R   |   4 erase_ex   00077E R   |   4 erase_fl   000774 R
  4 err_bad_   00155D R   |   4 err_buf_   0015D3 R   |   4 err_cmd_   001521 R
  4 err_div0   0014E6 R   |   4 err_dupl   00153B R   |   4 err_math   0014CD R
  4 err_mem_   0014B2 R   |   4 err_msg    00148E R   |   4 err_no_a   001569 R
  4 err_no_d   00159C R   |   4 err_no_f   0015C0 R   |   4 err_no_l   0014F5 R
  4 err_no_p   0015AC R   |   4 err_not_   00154C R   |   4 err_over   0015E0 R
  4 err_read   0015EA R   |   4 err_run_   00150B R   |   4 err_synt   0014BF R
  4 escaped    000D5B GR  |   4 expect     001953 R   |   4 expressi   001AA9 R
  4 factor     0019B1 R   |   5 farptr     000018 R   |   4 fcpu       002B14 R
  4 fetchc     0005FA R   |   4 fill_wri   0027E8 R   |   4 final_te   000B93 R
  4 first_li   001F3B R   |   5 flags      000022 GR  |   4 for        002281 R
  4 free       001C40 R   |   5 free_eep   000024 R   |   7 free_ram   000090 R
  4 func_arg   001960 R   |   4 func_cha   00293E R   |   4 func_eef   001D41 R
  4 ge         00131A R   |   4 get_addr   0017C5 R   |   4 get_arra   001981 R
  4 get_char   0017DF R   |   4 get_esca   000915 R   |   4 get_int2   0017CF R
  4 get_targ   0023AE R   |   4 get_targ   0023BC R   |   4 get_tick   002A9E R
  4 get_toke   000EB5 GR  |   4 get_valu   001CC4 R   |   4 getc       0008EE GR
  4 gosub      0024CC R   |   4 gosub_1    0024D7 R   |   4 gosub_2    0024DD R
  4 goto       0024B2 R   |   4 goto_1     0024BC R   |   4 gpio       0029A5 R
  4 gt         001316 R   |   4 gt_tst     000FFA R   |   4 hex_base   001C36 R
  4 hex_dump   00063A R   |   4 if         002264 R   |   5 in         000001 GR
  5 in.saved   000002 GR  |   5 in.w       000000 GR  |   4 incr_far   000850 R
  4 input_ex   00213C R   |   4 input_lo   0020A6 R   |   4 input_va   0020A2 R
  4 insert_c   0009B4 R   |   4 insert_l   000C9C R   |   4 insert_l   000D0B R
  4 interp_l   001709 R   |   4 interpre   0016E4 R   |   4 invalid    000562 R
  4 invalid_   0005D0 R   |   4 is_alnum   000E09 GR  |   4 is_alpha   000DEF GR
  4 is_data_   002E0B R   |   4 is_digit   000E00 GR  |   4 is_symbo   000E12 R
  4 itoa       001822 GR  |   4 itoa_loo   001844 R   |   4 jp_to_ta   0024BF R
  4 key        002994 R   |   4 kword_di   003420 GR  |   4 kword_en   003068 R
  4 le         00131F R   |   4 ledoff     0003BD R   |   4 ledon      0003B8 R
  4 ledtoggl   0003C2 R   |   4 left_par   0003CB R   |   4 let        001C81 GR
  4 let_arra   001C8F R   |   4 let_dvar   001742 R   |   4 let_eval   001C97 R
  4 let_var    001C94 R   |   4 lines_sk   001F3E R   |   4 list       001EEC R
  4 list_con   001CD5 R   |   4 list_exi   001F80 R   |   4 list_loo   001F5E R
  4 log2       002D1C R   |   4 look_tar   0023DF R   |   4 loop_bac   002391 R
  5 loop_dep   00001F R   |   4 loop_don   0023A6 R   |   4 lshift     002ABC R
  4 lt         00131D R   |   4 lt_tst     001023 R   |   4 mem_peek   00057E R
  4 mod24      000391 R   |   4 move       001385 GR  |   4 move_dow   0013A4 R
  4 move_era   0006DC R   |   4 move_exi   0013C5 R   |   4 move_lef   00098C R
  4 move_loo   0013A9 R   |   4 move_prg   00071C R   |   4 move_rig   00099A R
  4 move_up    001396 R   |   4 mul24      000269 R   |   4 mul_char   001307 R
  4 mulu24_8   00022A R   |   4 nbr_tst    000EE8 R   |   4 ne         001322 R
  4 neg24      0001F3 R   |   4 neg_acc2   00020D R   |   4 neg_ax     000205 R
  4 new        002766 R   |   4 next       002339 R   |   4 next_lin   0016EC R
  4 next_tok   00179D GR  |   4 no_match   001928 R   |   4 number     000600 R
  4 other      00104C R   |   4 overwrit   000BBF R   |   2 pad        0016E0 GR
  4 pad_ref    002F87 R   |   4 parse_ad   0004DD R   |   4 parse_bi   000DB4 R
  4 parse_in   000D63 R   |   4 parse_ke   000E35 R   |   4 parse_qu   000D0E R
  4 parse_sy   000E1D R   |   4 pause      002A2C R   |   4 pause02    002A3F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

  4 peek       002243 R   |   4 peek_byt   00059A R   |   4 pin_mode   002B23 R
  4 plus_tst   000FC3 R   |   4 poke       002222 R   |   4 power_ad   00260C R
  4 prcnt_ts   000FE4 R   |   4 print      001FF9 R   |   4 print_fa   0005DF R
  4 print_he   000BF6 GR  |   4 print_re   000417 R   |   4 print_st   000572 R
  4 print_to   00180A R   |   4 prog_siz   001E5B R   |   4 program_   001E63 R
  4 program_   0006F6 R   |   4 program_   00071C R   |   4 prt_acc2   0017FC R
  4 prt_basi   001FD5 R   |   4 prt_i16    0017E5 R   |   4 prt_loop   001FFD R
  4 prt_peek   00039A GR  |   4 prt_reg1   0003F8 R   |   4 prt_reg8   0003D6 R
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       0008DE GR
  4 puts       00093B GR  |   4 qgetc      0008E7 GR  |   4 qkey       002998 GR
  4 qmark_ts   000F7A R   |   4 qsign      0027E1 R   |   4 random     002BB2 R
  4 read       002E83 R   |   4 read01     002E88 R   |   4 read_int   003597 R
  4 readln     000A40 GR  |   4 readln_l   000A4F R   |   4 readln_q   000BDC R
  4 refresh_   002D17 R   |   4 relation   001AE1 R   |   4 relop_st   00130A R
  4 remark     002141 GR  |   4 repl       00051C R   |   4 repl_exi   000544 R
  4 reset_co   001FFB R   |   4 rest_con   002092 R   |   4 restore    002E19 R
  4 return     0024F0 R   |   4 right_al   001113 GR  |   4 row_alig   000835 R
  4 row_eras   0006AF R   |   4 row_eras   0006DC R   |   4 row_loop   00061D R
  4 rparnt_t   000F38 R   |   4 rshift     002AE8 R   |   7 rsign      00008C R
  7 rsize      00008E R   |   4 rt_msg     001606 R   |   4 run        00250D R
  4 run_app    00012A R   |   4 run_it     00253F R   |   4 run_it_0   002541 R
  5 rx1_head   00002E R   |   5 rx1_queu   000026 R   |   5 rx1_tail   00002F R
  4 save_app   00280C R   |   4 save_con   002082 R   |   4 scan_blo   00085E R
  4 search_d   001908 GR  |   4 search_e   001950 R   |   4 search_l   000C18 GR
  4 search_l   000C27 R   |   4 search_n   001D6A R   |   4 search_n   00190C R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002B82 R
  4 send_esc   000963 R   |   4 send_par   00096E R   |   4 set_data   002E4F R
  4 set_time   002CB7 R   |   4 sharp_ts   000F59 R   |   4 show_row   00060B R
  4 single_c   001300 R   |   4 skip       000EA2 R   |   4 skip_str   0017B6 R
  4 slash_ts   000FD9 R   |   4 sleep      002A21 R   |   4 software   0013D8 R
  4 spaces     0009A8 GR  |   4 spi_clea   002F1C R   |   4 spi_disa   002F04 R
  4 spi_enab   002ED1 R   |   4 spi_rcv_   002F3E R   |   4 spi_read   002F69 R
  4 spi_sele   002F70 R   |   4 spi_send   002F28 R   |   4 spi_writ   002F49 R
  2 stack_fu   00179C GR  |   2 stack_un   001828 R   |   4 star_tst   000FCE R
  4 step       0022F7 R   |   4 stop       00271A R   |   4 store_lo   002326 R
  4 str_matc   001935 R   |   4 str_tst    000ED8 R   |   4 strcmp     001364 R
  4 strcpy     001375 GR  |   4 strlen     001359 GR  |   4 sub24      00018B R
  4 symb_loo   000E1E R   |   4 syntax_e   001639 GR  |   4 system_i   00141E R
  5 tab_widt   000023 GR  |   4 tb_error   00163B GR  |   4 term       001A66 R
  4 term01     001A6E R   |   4 term_exi   001AA6 R   |   4 test       003428 R
  4 test_p     00056A R   |   2 tib        001690 GR  |   4 tick_tst   000F92 R
  5 ticks      00000F R   |   4 timeout    002CCE R   |   5 timer      000012 GR
  4 timer2_i   000096 R   |   4 timer4_i   0000A3 R   |   4 tk_id      001629 R
  4 to         0022B1 R   |   4 to_eepro   000745 R   |   4 to_flash   00074A R
  4 to_hex_c   000C0D GR  |   4 to_upper   00187B GR  |   4 token_ch   001062 R
  4 token_ex   001066 R   |   4 tone       0025B1 R   |   4 try_next   002E5C R
  5 txtbgn     00001B GR  |   5 txtend     00001D GR  |   4 uart1_ge   0008EE GR
  4 uart1_in   000899 R   |   4 uart1_pu   0008DE GR  |   4 uart1_qg   0008E7 GR
  4 uart1_se   0008A9 R   |   4 ubound     001C76 R   |   4 uflash     0029D5 R
  4 unlock_e   000679 R   |   4 unlock_f   000694 R   |   4 until      002D82 R
  4 user_int   00004C R   |   4 usr        0029F2 R   |   4 var_name   00116B GR
  5 vars       000034 GR  |   4 wait       002147 R   |   4 warm_ini   00144F R
  4 warm_sta   0016C5 R   |   4 words      002C4D R   |   4 words_co   002CA1 R
  4 write      0028FB R   |   4 write_bl   0007FA GR  |   4 write_bu   000736 R
  4 write_by   000780 R   |   4 write_ee   0007BC R   |   4 write_ex   0007F5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

  4 write_fl   0007A6 R   |   4 write_nb   00081F R   |   4 xalloc     002F9A R
  4 xdrop      002FD0 R   |   4 xpick      00304E R   |   4 xpop       002F90 R
  4 xpush      002F8C R   |   4 xput       00301B R   |   4 xstack_b   002FFD R
  2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

