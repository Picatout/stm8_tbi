ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     35     .list 
                                     36 
                                     37 ;_dbg 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
                           0000A0    43 	STACK_SIZE=160
                           0017FF    44 	STACK_EMPTY=RAM_SIZE-1  
                           000000    45 	FRUN=0 ; flags run code in variable flags
                           000001    46 	FTRAP=1 ; inside trap handler 
                           000002    47 	FLOOP=2 ; FOR loop in preparation 
                           000003    48 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    49 	FBREAK=4 ; break point flag 
                           000005    50 	FCOMP=5  ; compiling flags 
                           000006    51 	FAUTORUN=6; auto start program running 
                                     52 
                           004000    53 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     54 
                           000006    55     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     56 
                           007FFF    57 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     58 
                           000008    59 	RX_QUEUE_SIZE=8 
                                     60 
                                     61 
      000000                         62 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         63 in:    .blkb 1 ; low byte of in.w 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000002                         64 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         65 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         66 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         67 data_ptr:  .blkw 1  ; point to DATA address
      000008                         68 data_ofs:  .blkb 1  ; index to next data item 
      000009                         69 data_len:  .blkb 1  ; length of data line 
      00000A                         70 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         71 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         72 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         73 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         74 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         75 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         76 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         77 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         78 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         79 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         80 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         81 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         82 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         83 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         84 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         85 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         86 flags: .blkb 1 ; various boolean flags
      000024                         87 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         88 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         89 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         90 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002F                         91 rx3_queue: .ds RX_QUEUE_SIZE ; UART3 receive circular queue
      000037                         92 rx3_head:  .blkb 1 ; rx3_queue head pointer 
      000038                         93 rx3_tail:  .blkb 1 ; rx3_queue tail pointer  
                                     94 
      000039                         95 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     96 ; keep 'free_ram' as last variable 
      00006D                         97 free_ram: ; from here RAM free for BASIC text 
                                     98 
                                     99 ;;-----------------------------------
                                    100     .area SSEG (ABS)
                                    101 ;; working buffers and stack at end of RAM. 	
                                    102 ;;-----------------------------------
      001690                        103     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                        104 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                        105 pad: .ds PAD_SIZE             ; working buffer
      001760                        106 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        107 stack_unf: ; stack underflow ; control_stack bottom 
                                    108 
                                    109 ;;--------------------------------------
                                    110     .area HOME 
                                    111 ;; interrupt vector table at 0x8000
                                    112 ;;--------------------------------------
      000000 82 00 06 78            113     int cold_start			; RESET vector 
                           000000   114 .if DEBUG
                                    115 	int TrapHandler 		;TRAP  software interrupt
                           000001   116 .else
      000004 82 00 00 00            117 	int NonHandledInterrupt ;TRAP  software interrupt
                                    118 .endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000008 82 00 00 00            119 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            120 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            121 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            122 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            123 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            124 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            125 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 8D            126 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            127 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            128 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            129 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            130 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            131 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            132 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            133 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            134 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            135 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            136 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            137 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            138 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            139 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 52            140 	int Uart3RxHandler      ;int21 UART3 RX full
      000060 82 00 00 00            141 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 78            142 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            143 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            144 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            145 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            146 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            147 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            148 	int NonHandledInterrupt ;int29  not used
                                    149 
                                    150 ;---------------------------------------
                                    151     .area CODE
                                    152 ;---------------------------------------
                           000000   153 .if DEBUG
                                    154 .asciz "STM8_TBI" ; I like to put module name here.
                                    155 .endif 
                                    156 
                                    157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    158 ; non handled interrupt 
                                    159 ; reset MCU
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        161 NonHandledInterrupt:
      000000 71                     162     .byte 0x71  ; invalid opcode reinitialize MCU
                                    163 
                                    164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    165 ; auto wakeup from halt
                                    166 ; at iret, program continue 
                                    167 ; after hatl instruction
                                    168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        169 AWUHandler:
      000001 72 19 50 F0      [ 1]  170 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  171 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  172 	clr AWU_TBR 
      00000E 80               [11]  173 	iret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    174 
                                    175 ;--------------------------
                                    176 ; UART1 receive character
                                    177 ; CTRL-C (ASCII 3)
                                    178 ; cancel program execution
                                    179 ; and fall back to command line
                                    180 ;--------------------------
      00000F                        181 Uart1RxHandler: ; console receive char 
      00000F                        182 	_led2_on 
      00000F 72 1A 50 0A      [ 1]    1     bset LED2_PORT,#LED2_BIT 
      000013 72 0B 52 30 35   [ 2]  183 	btjf UART1_SR,#UART_SR_RXNE,5$
      000018 C6 52 31         [ 1]  184 	ld a,UART1_DR 
      00001B A1 03            [ 1]  185 	cp a,#CTRL_C 
      00001D 26 06            [ 1]  186 	jrne 2$
      00001F CD 03 2B         [ 4]  187 	call putc 
      000022 CC 00 A0         [ 2]  188 	jp user_interrupted
      000025                        189 2$:
      000025 A1 18            [ 1]  190 	cp a,#CAN ; CTRL_X 
      000027 26 03            [ 1]  191 	jrne 3$
      000029 CC 06 78         [ 2]  192 	jp cold_start 	
      00002C                        193 3$: 
      00002C A1 1A            [ 1]  194 	cp a,#CTRL_Z
      00002E 26 06            [ 1]  195 	jrne 4$
      000030 CD 07 39         [ 4]  196 	call cancel_autorun 
      000033 CC 06 78         [ 2]  197 	jp cold_start
      000036 AE 00 25         [ 2]  198 4$:	ldw x,#rx1_queue  
      000039 88               [ 1]  199 	push a 
      00003A 9F               [ 1]  200 	ld a,xl 
      00003B CB 00 2E         [ 1]  201 	add a,rx1_tail 
      00003E 97               [ 1]  202 	ld xl,a
      00003F 84               [ 1]  203 	pop a  
      000040 F7               [ 1]  204 	ld (x),a
      000041 72 5C 00 2E      [ 1]  205 	inc rx1_tail 
      000045 A6 07            [ 1]  206 	ld a,#RX_QUEUE_SIZE-1
      000047 C4 00 2E         [ 1]  207 	and a,rx1_tail 
      00004A C7 00 2E         [ 1]  208 	ld rx1_tail,a  
      00004D                        209 5$:	_led2_off 	
      00004D 72 1B 50 0A      [ 1]    1     bres LED2_PORT,#LED2_BIT 
      000051 80               [11]  210 	iret 
                                    211 
                                    212 ;-----------------------------
                                    213 ; ISR for character reception
                                    214 ; on UART3
                                    215 ; raw data communication
                                    216 ;-----------------------------
      000052                        217 Uart3RxHandler:
      000052                        218 	_led2_on 
      000052 72 1A 50 0A      [ 1]    1     bset LED2_PORT,#LED2_BIT 
      000056 AE 00 2F         [ 2]  219 	ldw x,#rx3_queue 
      000059 9F               [ 1]  220 	ld a,xl 
      00005A CB 00 38         [ 1]  221 	add a,rx3_tail 
      00005D 97               [ 1]  222 	ld xl,a 
      00005E 72 0B 52 40 10   [ 2]  223 	btjf UART3_SR,#UART_SR_RXNE,9$
      000063 C6 52 41         [ 1]  224 	ld a,UART3_DR
      000066 F7               [ 1]  225 	ld (x),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000067 72 5C 00 38      [ 1]  226 	inc rx3_tail 
      00006B A6 07            [ 1]  227 	ld a,#RX_QUEUE_SIZE-1 
      00006D C4 00 38         [ 1]  228 	and a,rx3_tail 
      000070 C7 00 38         [ 1]  229 	ld rx3_tail,a 
      000073                        230 9$:	_led2_off 
      000073 72 1B 50 0A      [ 1]    1     bres LED2_PORT,#LED2_BIT 
      000077 80               [11]  231 	iret  
                                    232 
                                    233 
                                    234 ;------------------------------------
                                    235 ; software interrupt handler  
                                    236 ;------------------------------------
                           000000   237 .if DEBUG 
                                    238 TrapHandler:
                                    239 	bset flags,#FTRAP 
                                    240 	call print_registers
                                    241 	call cmd_itf
                                    242 	bres flags,#FTRAP 	
                                    243 	iret
                                    244 .endif 
                                    245 
                                    246 ;------------------------------
                                    247 ; TIMER 4 is used to maintain 
                                    248 ; a milliseconds 'ticks' counter
                                    249 ; and decrement 'timer' varaiable
                                    250 ;--------------------------------
      000078                        251 Timer4UpdateHandler:
      000078 72 5F 53 42      [ 1]  252 	clr TIM4_SR 
      00007C CE 00 0E         [ 2]  253 	ldw x,ticks
      00007F 5C               [ 1]  254 	incw x
      000080 CF 00 0E         [ 2]  255 	ldw ticks,x 
      000083 CE 00 10         [ 2]  256 	ldw x,timer
                                    257 ;	tnzw x 
      000086 27 04            [ 1]  258 	jreq 1$
      000088 5A               [ 2]  259 	decw x 
      000089 CF 00 10         [ 2]  260 	ldw timer,x 
      00008C                        261 1$:	
      00008C 80               [11]  262 	iret 
                                    263 
                                    264 
                                    265 ;------------------------------------
                                    266 ; Triggered by pressing USER UserButton 
                                    267 ; on NUCLEO card.
                                    268 ; This is used to abort a progam lock 
                                    269 ; in infinite loop. 
                                    270 ;------------------------------------
      00008D                        271 UserButtonHandler:
                                    272 ; wait button release
      00008D 5F               [ 1]  273 	clrw x
      00008E 5A               [ 2]  274 1$: decw x 
      00008F 26 FD            [ 1]  275 	jrne 1$
      000091 72 09 50 15 F8   [ 2]  276 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    277 ; if MCU suspended by SLEEP resume program
      000096 72 07 00 23 05   [ 2]  278     btjf flags,#FSLEEP,2$
      00009B 72 17 00 23      [ 1]  279 	bres flags,#FSLEEP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00009F 80               [11]  280 	iret
      0000A0                        281 2$:	
      0000A0                        282 user_interrupted:
      0000A0 72 00 00 23 02   [ 2]  283     btjt flags,#FRUN,4$
      0000A5 20 13            [ 2]  284 	jra UBTN_Handler_exit 
      0000A7                        285 4$:	; program interrupted by user 
      0000A7 72 11 00 23      [ 1]  286 	bres flags,#FRUN 
      0000AB AE 00 C2         [ 2]  287 	ldw x,#USER_ABORT
      0000AE CD 00 00         [ 4]  288 	call puts 
      0000B1 CE 00 04         [ 2]  289 	ldw x,basicptr 
      0000B4 C6 00 01         [ 1]  290 	ld a,in 
      0000B7 CD 15 C0         [ 4]  291 	call prt_basic_line
      0000BA                        292 UBTN_Handler_exit:
      0000BA AE 17 FF         [ 2]  293     ldw x,#STACK_EMPTY 
      0000BD 94               [ 1]  294     ldw sp,x
      0000BE 9A               [ 1]  295 	rim 
      0000BF CC 09 A3         [ 2]  296 	jp warm_start
                                    297 
      0000C2 0A 50 72 6F 67 72 61   298 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    299 
                                    300 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    301 ;    peripherals initialization
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 
                                    304 ;----------------------------------------
                                    305 ; inialize MCU clock 
                                    306 ; input:
                                    307 ;   A 		source  HSI | 1 HSE 
                                    308 ;   XL      CLK_CKDIVR , clock divisor 
                                    309 ; output:
                                    310 ;   none 
                                    311 ;----------------------------------------
      0000DD                        312 clock_init:	
      0000DD C1 50 C3         [ 1]  313 	cp a,CLK_CMSR 
      0000E0 27 0C            [ 1]  314 	jreq 2$ ; no switching required 
                                    315 ; select clock source 
      0000E2 72 12 50 C5      [ 1]  316 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000E6 C7 50 C4         [ 1]  317 	ld CLK_SWR,a
      0000E9 C1 50 C3         [ 1]  318 1$:	cp a,CLK_CMSR
      0000EC 26 FB            [ 1]  319 	jrne 1$
      0000EE                        320 2$: 	
                                    321 ; HSI and cpu clock divisor 
      0000EE 9F               [ 1]  322 	ld a,xl 
      0000EF C7 50 C6         [ 1]  323 	ld CLK_CKDIVR,a  
      0000F2 81               [ 4]  324 	ret
                                    325 
                                    326 ;----------------------------------
                                    327 ; TIMER2 used as audio tone output 
                                    328 ; on port D:5.
                                    329 ; channel 1 configured as PWM mode 1 
                                    330 ;-----------------------------------  
                           00F424   331 TIM2_CLK_FREQ=62500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0000F3                        332 timer2_init:
      0000F3 72 1A 50 C7      [ 1]  333 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000F7 35 60 53 05      [ 1]  334  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000FB 35 08 53 0C      [ 1]  335 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000FF 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------
                                    339 ; TIM4 is configured to generate an 
                                    340 ; interrupt every millisecond 
                                    341 ;----------------------------------
      000100                        342 timer4_init:
      000100 72 18 50 C7      [ 1]  343 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      000104 35 07 53 45      [ 1]  344 	mov TIM4_PSCR,#7 ; prescale 128  
      000108 35 7D 53 46      [ 1]  345 	mov TIM4_ARR,#125 ; set for 1msec.
      00010C 35 05 53 40      [ 1]  346 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000110 72 10 53 41      [ 1]  347 	bset TIM4_IER,#TIM4_IER_UIE
      000114 81               [ 4]  348 	ret
                                    349 
                                    350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    351 ;  routines to write to FLASH, EEPROM 
                                    352 ;  and OPTION 
                                    353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    354 
                                    355 ;----------------------------------
                                    356 ; unlock EEPROM/OPT for writing/erasing
                                    357 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    358 ; input:
                                    359 ;  none
                                    360 ; output:
                                    361 ;  none 
                                    362 ;----------------------------------
      000115                        363 unlock_eeprom:
      000115 35 00 50 5B      [ 1]  364 	mov FLASH_CR2,#0 
      000119 35 FF 50 5C      [ 1]  365 	mov FLASH_NCR2,#0xFF 
      00011D 35 AE 50 64      [ 1]  366 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000121 35 56 50 64      [ 1]  367     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000125 72 07 50 5F FB   [ 2]  368 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00012A 81               [ 4]  369 	ret
                                    370 
                                    371 ;----------------------------------
                                    372 ; unlock FLASH for writing/erasing
                                    373 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    374 ; input:
                                    375 ;  none
                                    376 ; output:
                                    377 ;  none
                                    378 ;----------------------------------
      00012B                        379 unlock_flash:
      00012B 35 00 50 5B      [ 1]  380 	mov FLASH_CR2,#0 
      00012F 35 FF 50 5C      [ 1]  381 	mov FLASH_NCR2,#0xFF 
      000133 35 56 50 62      [ 1]  382 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000137 35 AE 50 62      [ 1]  383 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00013B 72 03 50 5F FB   [ 2]  384 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000140 81               [ 4]  385 	ret
                                    386 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    387 ;----------------------------
                                    388 ; erase block code must be 
                                    389 ; executed from RAM
                                    390 ; input:
                                    391 ;-----------------------------
      000141                        392 row_erase:
      000141 35 20 50 5B      [ 1]  393 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000145 35 DF 50 5C      [ 1]  394 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000149 4F               [ 1]  395 	clr a 
      00014A 90 5F            [ 1]  396 	clrw y 
      00014C 91 A7 00 16      [ 1]  397 	ldf ([farptr],y),a
      000150 90 5C            [ 1]  398     incw y
      000152 91 A7 00 16      [ 1]  399 	ldf ([farptr],y),a
      000156 90 5C            [ 1]  400     incw y
      000158 91 A7 00 16      [ 1]  401 	ldf ([farptr],y),a
      00015C 90 5C            [ 1]  402     incw y
      00015E 91 A7 00 16      [ 1]  403 	ldf ([farptr],y),a
      000162 72 05 50 5F FB   [ 2]  404 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000167 81               [ 4]  405 	ret
      000168                        406 row_erase_end:
                                    407 
                                    408 ; copy erase_start in RAM 
      000168                        409 move_erase_to_ram:
      000168 AE 01 68         [ 2]  410 	ldw x,#row_erase_end 
      00016B 1D 01 41         [ 2]  411 	subw x,#row_erase
      00016E CF 00 0C         [ 2]  412 	ldw acc16,x 
      000171 AE 16 90         [ 2]  413 	ldw x,#tib 
      000174 90 AE 01 41      [ 2]  414 	ldw y,#row_erase 
      000178 CD 04 5E         [ 4]  415 	call move 
      00017B 81               [ 4]  416 	ret 
                                    417 
                                    418 ;-----------------------------------
                                    419 ; block programming must be 
                                    420 ; executed from RAM 
                                    421 ; initial contidions: 
                                    422 ; 	memory unlocked
                                    423 ;   bit PRG set in 
                                    424 ; input:
                                    425 ;   x        128 bytes row to program 
                                    426 ;   farptr   row address 
                                    427 ; output:
                                    428 ;   none 
                                    429 ;----------------------------------
                           000001   430 	BCNT=1 
      00017C                        431 program_row:
      00017C 4B 80            [ 1]  432 	push #BLOCK_SIZE  
                                    433 ;enable block programming 
      00017E 72 10 50 5B      [ 1]  434 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000182 72 11 50 5C      [ 1]  435 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000186 90 5F            [ 1]  436 	clrw y 
      000188 F6               [ 1]  437 1$:	ld a,(x)
      000189 91 A7 00 16      [ 1]  438 	ldf ([farptr],y),a
      00018D 5C               [ 1]  439 	incw x 
      00018E 90 5C            [ 1]  440 	incw y 
      000190 0A 01            [ 1]  441 	dec (BCNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000192 26 F4            [ 1]  442 	jrne 1$
                                    443 ; wait EOP bit 
      000194 72 05 50 5F FB   [ 2]  444 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000199                        445 	_drop 1 
      000199 5B 01            [ 2]    1     addw sp,#1 
      00019B 81               [ 4]  446 	ret 
      00019C                        447 program_row_end:
                                    448 
                                    449 ;-------------------------
                                    450 ; move program_row to RAM 
                                    451 ; at txtubound address 
                                    452 ;------------------------
      00019C                        453 move_prg_to_ram:
      00019C AE 01 9C         [ 2]  454 	ldw x,#program_row_end 
      00019F 1D 01 7C         [ 2]  455 	subw x,#program_row 
      0001A2 CF 00 0C         [ 2]  456 	ldw acc16,x 
      0001A5 AE 16 90         [ 2]  457 	ldw x,#tib 
      0001A8 90 AE 01 7C      [ 2]  458 	ldw y,#program_row 
      0001AC CD 04 5E         [ 4]  459 	call move 
      0001AF 81               [ 4]  460 	ret 
                                    461 
                                    462 
                                    463 ;-----------------------------
                                    464 ; write a row in FLASH/EEPROM 
                                    465 ; input:
                                    466 ;    farptr   destination address 
                                    467 ;    x        source address 
                                    468 ;-----------------------------
      0001B0                        469 write_row:
      0001B0 89               [ 2]  470 	pushw x 
      0001B1 72 5D 00 16      [ 1]  471 	tnz farptr 
      0001B5 26 1C            [ 1]  472 	jrne to_flash 
      0001B7 AE 80 00         [ 2]  473 	ldw x,#FLASH_BASE 
      0001BA C3 00 17         [ 2]  474 	cpw x,farptr+1 
      0001BD 24 14            [ 1]  475 	jruge to_flash 
      0001BF                        476 to_eeprom:
      0001BF AE 40 00         [ 2]  477 	ldw x,#EEPROM_BASE 
      0001C2 C3 00 17         [ 2]  478 	cpw x,farptr+1 
      0001C5 24 01            [ 1]  479 	jruge 1$
      0001C7 81               [ 4]  480 	ret ; bad address 
      0001C8 AE 47 FF         [ 2]  481 1$: ldw x,#EEPROM_END 
      0001CB 23 01            [ 2]  482 	jrule 2$ 
      0001CD 81               [ 4]  483 	ret ; bad address 
      0001CE CD 01 15         [ 4]  484 2$:	call unlock_eeprom
      0001D1 20 03            [ 2]  485 	jra do_programming
      0001D3                        486 to_flash:
      0001D3 CD 01 2B         [ 4]  487 	call unlock_flash 
      0001D6                        488 do_programming:
      0001D6 85               [ 2]  489 	popw x 
      0001D7 CD 16 90         [ 4]  490 	call tib
      0001DA 72 13 50 5F      [ 1]  491 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001DE 72 17 50 5F      [ 1]  492 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001E2 81               [ 4]  493 	ret 
                                    494 
                                    495 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    496 ;-----------------------------------
                                    497 ; erase flash or EEPROM block
                                    498 ; a blow is 128 bytes 
                                    499 ; input:
                                    500 ;   farptr  address row begin
                                    501 ; output:
                                    502 ;   none
                                    503 ;--------------------------------------
      0001E3                        504 block_erase:
      0001E3 CE 00 17         [ 2]  505 	ldw x,farptr+1
      0001E6 A3 29 80         [ 2]  506 	cpw x,#user_space 
      0001E9 2A 17            [ 1]  507 	jrpl erase_flash 
                                    508 ; erase eeprom block
      0001EB A3 40 00         [ 2]  509 	cpw x,#EEPROM_BASE 
      0001EE 24 01            [ 1]  510 	jruge 1$
      0001F0 81               [ 4]  511 	ret ; bad address 
      0001F1 AE 47 FF         [ 2]  512 1$: ldw x,#EEPROM_END 
      0001F4 23 01            [ 2]  513 	jrule 2$ 
      0001F6 81               [ 4]  514 	ret ; bad address 
      0001F7 CD 01 15         [ 4]  515 2$:	call unlock_eeprom 
      0001FA CD 16 90         [ 4]  516 	call tib 
      0001FD 72 17 50 5F      [ 1]  517 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000201 81               [ 4]  518 	ret 
                                    519 ; erase flash block:
      000202                        520 erase_flash:
      000202 CD 01 2B         [ 4]  521 	call unlock_flash 
      000205 CD 16 90         [ 4]  522 	call tib 
      000208 72 13 50 5F      [ 1]  523     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00020C 81               [ 4]  524 	ret 
                                    525 
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    528 ; write a byte to FLASH or EEPROM/OPTION  
                                    529 ; input:
                                    530 ;    a  		byte to write
                                    531 ;    farptr  	address
                                    532 ;    x          farptr[x]
                                    533 ; output:
                                    534 ;    none
                                    535 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    536 	; variables locales
                           000001   537 	BTW = 1   ; byte to write offset on stack
                           000002   538 	OPT = 2   ; OPTION flag offset on stack
                           000002   539 	VSIZE = 2
      00020D                        540 write_byte:
      00020D 90 89            [ 2]  541 	pushw y
      00020F                        542 	_vars VSIZE
      00020F 52 02            [ 2]    1     sub sp,#VSIZE 
      000211 6B 01            [ 1]  543 	ld (BTW,sp),a ; byte to write 
      000213 0F 02            [ 1]  544 	clr (OPT,sp)  ; OPTION flag
                                    545 ; put addr[15:0] in Y, for bounds check.
      000215 90 CE 00 17      [ 2]  546 	ldw y,farptr+1   ; Y=addr15:0
                                    547 ; check addr[23:16], if <> 0 then it is extened flash memory
      000219 72 5D 00 16      [ 1]  548 	tnz farptr 
      00021D 26 14            [ 1]  549 	jrne write_flash
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00021F 90 A3 29 80      [ 2]  550     cpw y,#user_space
      000223 24 0E            [ 1]  551     jruge write_flash
      000225 90 A3 40 00      [ 2]  552 	cpw y,#EEPROM_BASE  
      000229 25 52            [ 1]  553     jrult write_exit
      00022B 90 A3 48 7F      [ 2]  554 	cpw y,#OPTION_END 
      00022F 22 4C            [ 1]  555 	jrugt write_exit
      000231 20 16            [ 2]  556 	jra write_eeprom 
                                    557 ; write program memory
      000233                        558 write_flash:
      000233 CD 01 2B         [ 4]  559 	call unlock_flash 
      000236 9B               [ 1]  560 1$:	sim 
      000237 7B 01            [ 1]  561 	ld a,(BTW,sp)
      000239 92 A7 00 16      [ 4]  562 	ldf ([farptr],x),a ; farptr[x]=A
      00023D 72 05 50 5F FB   [ 2]  563 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000242 9A               [ 1]  564     rim 
      000243 72 13 50 5F      [ 1]  565     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000247 20 34            [ 2]  566     jra write_exit
                                    567 ; write eeprom and option
      000249                        568 write_eeprom:
      000249 CD 01 15         [ 4]  569 	call unlock_eeprom
                                    570 	; check for data eeprom or option eeprom
      00024C 90 A3 48 00      [ 2]  571 	cpw y,#OPTION_BASE
      000250 2B 08            [ 1]  572 	jrmi 1$
      000252 90 A3 48 80      [ 2]  573 	cpw y,#OPTION_END+1
      000256 2A 02            [ 1]  574 	jrpl 1$
      000258 03 02            [ 1]  575 	cpl (OPT,sp)
      00025A                        576 1$: 
      00025A 0D 02            [ 1]  577     tnz (OPT,sp)
      00025C 27 08            [ 1]  578     jreq 2$
                                    579 	; pour modifier une option il faut modifier ces 2 bits
      00025E 72 1E 50 5B      [ 1]  580     bset FLASH_CR2,#FLASH_CR2_OPT
      000262 72 1F 50 5C      [ 1]  581     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000266                        582 2$: 
      000266 7B 01            [ 1]  583     ld a,(BTW,sp)
      000268 92 A7 00 16      [ 4]  584     ldf ([farptr],x),a
      00026C 0D 02            [ 1]  585     tnz (OPT,sp)
      00026E 27 08            [ 1]  586     jreq 3$
      000270 5C               [ 1]  587     incw x
      000271 7B 01            [ 1]  588     ld a,(BTW,sp)
      000273 43               [ 1]  589     cpl a
      000274 92 A7 00 16      [ 4]  590     ldf ([farptr],x),a
      000278 72 05 50 5F FB   [ 2]  591 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00027D                        592 write_exit:
      00027D                        593 	_drop VSIZE 
      00027D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027F 90 85            [ 2]  594 	popw y
      000281 81               [ 4]  595     ret
                                    596 
                                    597 ;--------------------------------------------
                                    598 ; write a data block to eeprom or flash 
                                    599 ; input:
                                    600 ;   Y        source address   
                                    601 ;   X        array index  destination  farptr[x]
                                    602 ;   BSIZE    block size bytes 
                                    603 ;   farptr   write address , byte* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    604 ; output:
                                    605 ;	X 		after last byte written 
                                    606 ;   Y 		after last byte read 
                                    607 ;  farptr   point after block
                                    608 ;---------------------------------------------
      000282                        609 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000282                        610 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    611 	; local var 
                           000001   612 	XSAVE=1 
                           000002   613 	VSIZE=2 
      000282                        614 write_block:
      000282                        615 	_vars VSIZE
      000282 52 02            [ 2]    1     sub sp,#VSIZE 
      000284 1F 01            [ 2]  616 	ldw (XSAVE,sp),x 
      000286 1E 05            [ 2]  617 	ldw x,(BSIZE,sp) 
      000288 27 13            [ 1]  618 	jreq 9$
      00028A 1E 01            [ 2]  619 1$:	ldw x,(XSAVE,sp)
      00028C 90 F6            [ 1]  620 	ld a,(y)
      00028E CD 02 0D         [ 4]  621 	call write_byte 
      000291 5C               [ 1]  622 	incw x 
      000292 90 5C            [ 1]  623 	incw y 
      000294 1F 01            [ 2]  624 	ldw (XSAVE,sp),x
      000296 1E 05            [ 2]  625 	ldw x,(BSIZE,sp)
      000298 5A               [ 2]  626 	decw x
      000299 1F 05            [ 2]  627 	ldw (BSIZE,sp),x 
      00029B 26 ED            [ 1]  628 	jrne 1$
      00029D                        629 9$:
      00029D 1E 01            [ 2]  630 	ldw x,(XSAVE,sp)
      00029F CD 1A C6         [ 4]  631 	call incr_farptr
      0002A2                        632 	_drop VSIZE
      0002A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002A4 81               [ 4]  633 	ret 
                                    634 
                                    635 
                                    636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    637 ;;   UART1 subroutines
                                    638 ;;   used for user interface 
                                    639 ;;   communication channel.
                                    640 ;;   settings: 
                                    641 ;;		115200 8N1 no flow control
                                    642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    643 
                                    644 ;--------------------------------
                                    645 ; initialize UART3, 115200 8N1 
                                    646 ;--------------------------------
      0002A5                        647 uart3_init: 
      0002A5 72 1A 50 11      [ 1]  648 	bset PD_DDR,#UART3_TX_PIN
      0002A9 72 1A 50 12      [ 1]  649 	bset PD_CR1,#UART3_TX_PIN 
      0002AD 72 1A 50 13      [ 1]  650 	bset PD_CR2,#UART3_TX_PIN 
      0002B1 72 16 50 C7      [ 1]  651 	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
      0002B5                        652 uart3_set_baud: 
                                    653 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    654 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002B5 A6 E1            [ 1]  655 	ld a,#CLK_SWR_HSI
      0002B7 C1 50 C3         [ 1]  656 	cp a,CLK_CMSR 
      0002BA 27 0A            [ 1]  657 	jreq 2$ 
      0002BC                        658 1$: ; 8 Mhz 	
      0002BC 35 05 52 43      [ 1]  659 	mov UART3_BRR2,#0x05 ; must be loaded first
      0002C0 35 04 52 42      [ 1]  660 	mov UART3_BRR1,#0x4
      0002C4 20 08            [ 2]  661 	jra 3$
      0002C6                        662 2$: ; 16 Mhz 	
      0002C6 35 0B 52 43      [ 1]  663 	mov UART3_BRR2,#0x0b ; must be loaded first
      0002CA 35 08 52 42      [ 1]  664 	mov UART3_BRR1,#0x08
      0002CE                        665 3$:
      0002CE 72 5F 52 41      [ 1]  666     clr UART3_DR
      0002D2 35 2C 52 45      [ 1]  667 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002D6 72 10 52 45      [ 1]  668 	bset UART3_CR2,#UART_CR2_SBK
      0002DA 72 0D 52 40 FB   [ 2]  669     btjf UART3_SR,#UART_SR_TC,.
      0002DF 72 5F 00 38      [ 1]  670 	clr rx3_tail 
      0002E3 72 5F 00 37      [ 1]  671 	clr rx3_head 
      0002E7 81               [ 4]  672 	ret 
                                    673 
                                    674 ;---------------------------------------------
                                    675 ; initialize UART1, 115200 8N1
                                    676 ; input:
                                    677 ;	none
                                    678 ; output:
                                    679 ;   none
                                    680 ;---------------------------------------------
      0002E8                        681 uart1_init:
      0002E8 72 1A 50 02      [ 1]  682     bset PA_DDR,#UART1_TX_PIN
      0002EC 72 1A 50 03      [ 1]  683     bset PA_CR1,#UART1_TX_PIN 
      0002F0 72 1A 50 04      [ 1]  684     bset PA_CR2,#UART1_TX_PIN 
                                    685 ; enable UART1 clock
      0002F4 72 14 50 C7      [ 1]  686 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0002F8                        687 uart1_set_baud: 
                                    688 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    689 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002F8 A6 E1            [ 1]  690 	ld a,#CLK_SWR_HSI
      0002FA C1 50 C3         [ 1]  691 	cp a,CLK_CMSR 
      0002FD 27 0A            [ 1]  692 	jreq 2$ 
      0002FF                        693 1$: ; 8 Mhz 	
      0002FF 35 05 52 33      [ 1]  694 	mov UART1_BRR2,#0x05 ; must be loaded first
      000303 35 04 52 32      [ 1]  695 	mov UART1_BRR1,#0x4
      000307 20 08            [ 2]  696 	jra 3$
      000309                        697 2$: ; 16 Mhz 	
      000309 35 0B 52 33      [ 1]  698 	mov UART1_BRR2,#0x0b ; must be loaded first
      00030D 35 08 52 32      [ 1]  699 	mov UART1_BRR1,#0x08
      000311                        700 3$:
      000311 72 5F 52 31      [ 1]  701     clr UART1_DR
      000315 35 2C 52 35      [ 1]  702 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000319 72 10 52 35      [ 1]  703 	bset UART1_CR2,#UART_CR2_SBK
      00031D 72 0D 52 30 FB   [ 2]  704     btjf UART1_SR,#UART_SR_TC,.
      000322 72 5F 00 2D      [ 1]  705     clr rx1_head 
      000326 72 5F 00 2E      [ 1]  706 	clr rx1_tail 
      00032A 81               [ 4]  707 	ret
                                    708 
                                    709 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    710 ; uart1_putc
                                    711 ; send a character via UART1
                                    712 ; input:
                                    713 ;    A  	character to send
                                    714 ;---------------------------------
      00032B                        715 putc:: ; console output always on UART1
      00032B                        716 uart1_putc:: 
      00032B 72 0F 52 30 FB   [ 2]  717 	btjf UART1_SR,#UART_SR_TXE,.
      000330 C7 52 31         [ 1]  718 	ld UART1_DR,a 
      000333 81               [ 4]  719 	ret 
                                    720 
                                    721 ;---------------------------------
                                    722 ; uart3_putc 
                                    723 ; send a character via UART3 
                                    724 ; input:
                                    725 ;    A  	character to send
                                    726 ;---------------------------------
      000334                        727 uart3_putc::
      000334 72 0F 52 40 FB   [ 2]  728 	btjf UART3_SR,#UART_SR_TXE,.
      000339 C7 52 41         [ 1]  729 	ld UART3_DR,a 
      00033C 81               [ 4]  730 	ret 
                                    731 
                                    732 ;---------------------------------
                                    733 ; Query for character in rx1_queue
                                    734 ; input:
                                    735 ;   none 
                                    736 ; output:
                                    737 ;   A     0 no charcter available
                                    738 ;   Z     1 no character available
                                    739 ;---------------------------------
      00033D                        740 qgetc::
      00033D                        741 uart1_qgetc::
      00033D C6 00 2D         [ 1]  742 	ld a,rx1_head 
      000340 C0 00 2E         [ 1]  743 	sub a,rx1_tail 
      000343 81               [ 4]  744 	ret 
                                    745 
      000344                        746 uart3_qgetc::
      000344 C6 00 37         [ 1]  747 	ld a,rx3_head 
      000347 C0 00 38         [ 1]  748 	sub a,rx3_tail 
      00034A 81               [ 4]  749 	ret 
                                    750 
                                    751 ;---------------------------------
                                    752 ; wait character from UART1 
                                    753 ; input:
                                    754 ;   none
                                    755 ; output:
                                    756 ;   A 			char  
                                    757 ;--------------------------------	
      00034B                        758 getc:: ;console input
      00034B                        759 uart1_getc::
      00034B CD 03 3D         [ 4]  760 	call uart1_qgetc
      00034E 27 FB            [ 1]  761 	jreq uart1_getc 
      000350 89               [ 2]  762 	pushw x 
      000351 AE 00 25         [ 2]  763 	ldw x,#rx1_queue
      000354 9F               [ 1]  764 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000355 CB 00 2D         [ 1]  765 	add a,rx1_head 
      000358 97               [ 1]  766 	ld xl,a 
      000359 F6               [ 1]  767 	ld a,(x)
      00035A 85               [ 2]  768 	popw x
      00035B 88               [ 1]  769 	push a
      00035C 72 5C 00 2D      [ 1]  770 	inc rx1_head 
      000360 A6 07            [ 1]  771 	ld a,#RX_QUEUE_SIZE-1 
      000362 C4 00 2D         [ 1]  772 	and a,rx1_head 
      000365 C7 00 2D         [ 1]  773 	ld rx1_head,a 
      000368 84               [ 1]  774 	pop a  
      000369 81               [ 4]  775 	ret 
                                    776 
                                    777 ;----------------------------------
                                    778 ; wait character from UART3 
                                    779 ; output:
                                    780 ;   A       character received
                                    781 ;-----------------------------------
      00036A                        782 uart3_getc::
      00036A CD 03 44         [ 4]  783 	call uart3_qgetc
      00036D 27 FB            [ 1]  784 	jreq uart3_getc 
      00036F 89               [ 2]  785 	pushw x 
      000370 AE 00 2F         [ 2]  786 	ldw x,#rx3_queue
      000373 9F               [ 1]  787 	ld a,xl 
      000374 CB 00 37         [ 1]  788 	add a,rx3_head 
      000377 97               [ 1]  789 	ld xl,a 
      000378 F6               [ 1]  790 	ld a,(x)
      000379 85               [ 2]  791 	popw x
      00037A 88               [ 1]  792 	push a
      00037B 72 5C 00 37      [ 1]  793 	inc rx3_head 
      00037F A6 07            [ 1]  794 	ld a,#RX_QUEUE_SIZE-1 
      000381 C4 00 37         [ 1]  795 	and a,rx3_head 
      000384 C7 00 37         [ 1]  796 	ld rx3_head,a 
      000387 84               [ 1]  797 	pop a  
      000388 81               [ 4]  798 	ret 
                                    799 
                                    800 
                                    801 ;----------------------
                                    802 ; print token id && value
                                    803 ; input:
                                    804 ;   A     token id 
                                    805 ;   X     token value 
                                    806 ;---------------------
                           000001   807 	BSAVE=1
                           000002   808 	AREG=2
                           000003   809 	XREG=3
                           000004   810 	VSIZE=4
      000389                        811 prt_tok:
      000389                        812 	_vars VSIZE 
      000389 52 04            [ 2]    1     sub sp,#VSIZE 
      00038B 6B 02            [ 1]  813 	ld (AREG,sp),a 
      00038D 1F 03            [ 2]  814 	ldw (XREG,sp),x 
      00038F C6 00 0A         [ 1]  815 	ld a, base
      000392 6B 01            [ 1]  816 	ld (BSAVE,sp),a 
      000394 35 10 00 0A      [ 1]  817 	mov base,#16  
      000398 AE 03 C0         [ 2]  818 	ldw x,#token_msg
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00039B CD 00 00         [ 4]  819 	call puts 
      00039E 5F               [ 1]  820 	clrw x 
      00039F 7B 02            [ 1]  821 	ld a,(AREG,sp)
      0003A1 97               [ 1]  822 	ld xl,a 
      0003A2 CD 0A 6F         [ 4]  823 	call print_int 
      0003A5 A6 20            [ 1]  824 	ld a,#SPACE
      0003A7 CD 03 2B         [ 4]  825 	call putc 
      0003AA 1E 03            [ 2]  826 	ldw x,(XREG,sp)
      0003AC CD 0A 6F         [ 4]  827 	call print_int 
      0003AF A6 0D            [ 1]  828 	ld a,#CR 
      0003B1 CD 03 2B         [ 4]  829 	call putc 
      0003B4 7B 01            [ 1]  830 	ld a,(BSAVE,sp)
      0003B6 C7 00 0A         [ 1]  831 	ld base,a 
      0003B9 7B 02            [ 1]  832 	ld a,(AREG,sp)
      0003BB 1E 03            [ 2]  833 	ldw x,(XREG,sp)
      0003BD                        834 	_drop VSIZE 
      0003BD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0003BF 81               [ 4]  835 	ret 
      0003C0 74 6F 6B 65 6E 3A 20   836 token_msg: .asciz "token: "
             00
                                    837 
                                    838 
                                    839 ;---------------------
                                    840 ; display n bytes row 
                                    841 ; from memory.
                                    842 ; input:
                                    843 ;   A   bytes to print 
                                    844 ;	X   start address 
                                    845 ; output:
                                    846 ;   X   address after last shown  
                                    847 ;---------------------
                           000001   848 	CNT=1 
                           000002   849 	ADR=2 
                           000003   850 	VSIZE=3 
      0003C8                        851 show_row:
      0003C8 4D               [ 1]  852 	tnz a 
      0003C9 26 01            [ 1]  853 	jrne 1$
      0003CB 81               [ 4]  854 	ret 
      0003CC                        855 1$:	
      0003CC 89               [ 2]  856 	pushw x  
      0003CD 88               [ 1]  857 	push a 
      0003CE 35 04 00 24      [ 1]  858 	mov tab_width,#4 
      0003D2 CD 0A 6F         [ 4]  859 	call print_int 
      0003D5 A6 20            [ 1]  860 	ld a,#SPACE  
      0003D7 CD 03 2B         [ 4]  861 	call putc
      0003DA                        862 row_loop:
      0003DA 1E 02            [ 2]  863 	ldw x,(ADR,sp)
      0003DC F6               [ 1]  864 	ld a,(x)
      0003DD 5F               [ 1]  865 	clrw x 
      0003DE 97               [ 1]  866 	ld xl,a 
      0003DF CD 0A 6F         [ 4]  867 	call print_int 
      0003E2 1E 02            [ 2]  868 	ldw x,(ADR,sp)
      0003E4 5C               [ 1]  869 	incw x 
      0003E5 1F 02            [ 2]  870 	ldw (ADR,sp),x 
      0003E7 0A 01            [ 1]  871 	dec (CNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003E9 26 EF            [ 1]  872 	jrne row_loop
      0003EB                        873 	_drop VSIZE  		
      0003EB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0003ED 35 04 00 24      [ 1]  874 	mov tab_width,#4
      0003F1 A6 0D            [ 1]  875 	ld a,#CR 
      0003F3 CD 03 2B         [ 4]  876 	call putc 
      0003F6 81               [ 4]  877 	ret 
                                    878 
                                    879 ;--------------------------
                                    880 ; print memory content 
                                    881 ; in hexadecimal format
                                    882 ;  input:
                                    883 ;    X    start address 
                                    884 ;    Y    count 
                                    885 ;--------------------------
                           000001   886 	BCNT=1
                           000003   887 	BASE=3
                           000004   888 	TABW=4
                           000004   889 	VSIZE=4   
      0003F7                        890 hex_dump:
      0003F7                        891 	_vars VSIZE
      0003F7 52 04            [ 2]    1     sub sp,#VSIZE 
      0003F9 C6 00 0A         [ 1]  892 	ld a,base
      0003FC 6B 03            [ 1]  893 	ld (BASE,sp),a 
      0003FE 35 10 00 0A      [ 1]  894 	mov base,#16
      000402 C6 00 24         [ 1]  895 	ld a,tab_width 
      000405 6B 04            [ 1]  896 	ld (TABW,sp),a
      000407 A6 0D            [ 1]  897 	ld a,#CR 
      000409 CD 03 2B         [ 4]  898 	call putc 
      00040C 17 01            [ 2]  899 1$: ldw (BCNT,sp),y
      00040E A6 10            [ 1]  900 	ld a,#16
      000410 90 A3 00 10      [ 2]  901 	cpw y,#16
      000414 2A 02            [ 1]  902 	jrpl 2$
      000416 90 9F            [ 1]  903 	ld a,yl
      000418                        904 2$: 	
      000418 CD 03 C8         [ 4]  905 	call show_row 
      00041B 16 01            [ 2]  906 	ldw y,(BCNT,sp) 
      00041D 72 A2 00 10      [ 2]  907 	subw y,#16 
      000421 90 A3 00 01      [ 2]  908 	cpw y,#1
      000425 2A E5            [ 1]  909 	jrpl 1$
      000427 7B 03            [ 1]  910 	ld a,(BASE,sp)
      000429 C7 00 0A         [ 1]  911 	ld base,a
      00042C 7B 04            [ 1]  912 	ld a,(TABW,sp)
      00042E C7 00 24         [ 1]  913 	ld tab_width,a 
      000431                        914 	_drop VSIZE
      000431 5B 04            [ 2]    1     addw sp,#VSIZE 
      000433 81               [ 4]  915 	ret 
                                    916 
                                    917 ;-------------------------------------
                                    918 ; retrun string length
                                    919 ; input:
                                    920 ;   X         .asciz  pointer 
                                    921 ; output:
                                    922 ;   X         not affected 
                                    923 ;   A         length 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    924 ;-------------------------------------
      000434                        925 strlen::
      000434 89               [ 2]  926 	pushw x 
      000435 4F               [ 1]  927 	clr a
      000436 7D               [ 1]  928 1$:	tnz (x) 
      000437 27 04            [ 1]  929 	jreq 9$ 
      000439 4C               [ 1]  930 	inc a 
      00043A 5C               [ 1]  931 	incw x 
      00043B 20 F9            [ 2]  932 	jra 1$ 
      00043D 85               [ 2]  933 9$:	popw x 
      00043E 81               [ 4]  934 	ret 
                                    935 
                                    936 ;------------------------------------
                                    937 ; compare 2 strings
                                    938 ; input:
                                    939 ;   X 		char* first string 
                                    940 ;   Y       char* second string 
                                    941 ; output:
                                    942 ;   A 		0|1 
                                    943 ;-------------------------------------
      00043F                        944 strcmp:
      00043F F6               [ 1]  945 	ld a,(x)
      000440 27 0B            [ 1]  946 	jreq 5$ 
      000442 90 F1            [ 1]  947 	cp a,(y) 
      000444 26 05            [ 1]  948 	jrne 4$ 
      000446 5C               [ 1]  949 	incw x 
      000447 90 5C            [ 1]  950 	incw y 
      000449 20 F4            [ 2]  951 	jra strcmp 
      00044B                        952 4$: ; not same  
      00044B 4F               [ 1]  953 	clr a 
      00044C 81               [ 4]  954 	ret 
      00044D                        955 5$: ; same 
      00044D A6 01            [ 1]  956 	ld a,#1 
      00044F 81               [ 4]  957 	ret 
                                    958 
                                    959 
                                    960 ;---------------------------------------
                                    961 ;  copy src to dest 
                                    962 ; input:
                                    963 ;   X 		dest 
                                    964 ;   Y 		src 
                                    965 ; output: 
                                    966 ;   X 		dest 
                                    967 ;----------------------------------
      000450                        968 strcpy:
      000450 89               [ 2]  969 	pushw x 
      000451 90 F6            [ 1]  970 1$: ld a,(y)
      000453 27 06            [ 1]  971 	jreq 9$ 
      000455 F7               [ 1]  972 	ld (x),a 
      000456 5C               [ 1]  973 	incw x 
      000457 90 5C            [ 1]  974 	incw y 
      000459 20 F6            [ 2]  975 	jra 1$ 
      00045B 7F               [ 1]  976 9$:	clr (x)
      00045C 85               [ 2]  977 	popw x 
      00045D 81               [ 4]  978 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    979 
                                    980 ;---------------------------------------
                                    981 ; move memory block 
                                    982 ; input:
                                    983 ;   X 		destination 
                                    984 ;   Y 	    source 
                                    985 ;   acc16	bytes count 
                                    986 ; output:
                                    987 ;   none 
                                    988 ;--------------------------------------
                           000001   989 	INCR=1 ; increament high byte 
                           000002   990 	LB=2 ; increament low byte 
                           000002   991 	VSIZE=2
      00045E                        992 move::
      00045E                        993 	_vars VSIZE 
      00045E 52 02            [ 2]    1     sub sp,#VSIZE 
      000460 0F 01            [ 1]  994 	clr (INCR,sp)
      000462 0F 02            [ 1]  995 	clr (LB,sp)
      000464 90 89            [ 2]  996 	pushw y 
      000466 13 01            [ 2]  997 	cpw x,(1,sp) ; compare DEST to SRC 
      000468 90 85            [ 2]  998 	popw y 
      00046A 27 31            [ 1]  999 	jreq move_exit ; x==y 
      00046C 2B 0E            [ 1] 1000 	jrmi move_down
      00046E                       1001 move_up: ; start from top address with incr=-1
      00046E 72 BB 00 0C      [ 2] 1002 	addw x,acc16
      000472 72 B9 00 0C      [ 2] 1003 	addw y,acc16
      000476 03 01            [ 1] 1004 	cpl (INCR,sp)
      000478 03 02            [ 1] 1005 	cpl (LB,sp)   ; increment = -1 
      00047A 20 05            [ 2] 1006 	jra move_loop  
      00047C                       1007 move_down: ; start from bottom address with incr=1 
      00047C 5A               [ 2] 1008     decw x 
      00047D 90 5A            [ 2] 1009 	decw y
      00047F 0C 02            [ 1] 1010 	inc (LB,sp) ; incr=1 
      000481                       1011 move_loop:	
      000481 C6 00 0C         [ 1] 1012     ld a, acc16 
      000484 CA 00 0D         [ 1] 1013 	or a, acc8
      000487 27 14            [ 1] 1014 	jreq move_exit 
      000489 72 FB 01         [ 2] 1015 	addw x,(INCR,sp)
      00048C 72 F9 01         [ 2] 1016 	addw y,(INCR,sp) 
      00048F 90 F6            [ 1] 1017 	ld a,(y)
      000491 F7               [ 1] 1018 	ld (x),a 
      000492 89               [ 2] 1019 	pushw x 
      000493 CE 00 0C         [ 2] 1020 	ldw x,acc16 
      000496 5A               [ 2] 1021 	decw x 
      000497 CF 00 0C         [ 2] 1022 	ldw acc16,x 
      00049A 85               [ 2] 1023 	popw x 
      00049B 20 E4            [ 2] 1024 	jra move_loop
      00049D                       1025 move_exit:
      00049D                       1026 	_drop VSIZE
      00049D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00049F 81               [ 4] 1027 	ret 	
                                   1028 
                                   1029 ;-------------------------------------
                                   1030 ; search text area for a line#
                                   1031 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1032 ;	X 			line# 
                                   1033 ; output:
                                   1034 ;   X 			addr of line | 0 
                                   1035 ;   Y           line#|insert address if not found  
                                   1036 ;-------------------------------------
                           000001  1037 	LL=1 ; line length 
                           000002  1038 	LB=2 ; line length low byte 
                           000002  1039 	VSIZE=2 
      0004A0                       1040 search_lineno::
      0004A0                       1041 	_vars VSIZE
      0004A0 52 02            [ 2]    1     sub sp,#VSIZE 
      0004A2 0F 01            [ 1] 1042 	clr (LL,sp)
      0004A4 90 CE 00 1C      [ 2] 1043 	ldw y,txtbgn
      0004A8                       1044 search_ln_loop:
      0004A8 90 C3 00 1E      [ 2] 1045 	cpw y,txtend 
      0004AC 2A 10            [ 1] 1046 	jrpl 8$
      0004AE 90 F3            [ 1] 1047 	cpw x,(y)
      0004B0 27 0E            [ 1] 1048 	jreq 9$
      0004B2 2B 0A            [ 1] 1049 	jrmi 8$ 
      0004B4 90 E6 02         [ 1] 1050 	ld a,(2,y)
      0004B7 6B 02            [ 1] 1051 	ld (LB,sp),a 
      0004B9 72 F9 01         [ 2] 1052 	addw y,(LL,sp)
      0004BC 20 EA            [ 2] 1053 	jra search_ln_loop 
      0004BE                       1054 8$: 
      0004BE 5F               [ 1] 1055 	clrw x 	
      0004BF 51               [ 1] 1056 	exgw x,y 
      0004C0                       1057 9$: _drop VSIZE
      0004C0 5B 02            [ 2]    1     addw sp,#VSIZE 
      0004C2 51               [ 1] 1058 	exgw x,y   
      0004C3 81               [ 4] 1059 	ret 
                                   1060 
                                   1061 ;-------------------------------------
                                   1062 ; delete line at addr
                                   1063 ; input:
                                   1064 ;   X 		addr of line i.e DEST for move 
                                   1065 ;-------------------------------------
                           000001  1066 	LLEN=1
                           000003  1067 	SRC=3
                           000004  1068 	VSIZE=4
      0004C4                       1069 del_line: 
      0004C4                       1070 	_vars VSIZE 
      0004C4 52 04            [ 2]    1     sub sp,#VSIZE 
      0004C6 E6 02            [ 1] 1071 	ld a,(2,x) ; line length
      0004C8 6B 02            [ 1] 1072 	ld (LLEN+1,sp),a 
      0004CA 0F 01            [ 1] 1073 	clr (LLEN,sp)
      0004CC 90 93            [ 1] 1074 	ldw y,x  
      0004CE 72 F9 01         [ 2] 1075 	addw y,(LLEN,sp) ;SRC  
      0004D1 17 03            [ 2] 1076 	ldw (SRC,sp),y  ;save source 
      0004D3 90 CE 00 1E      [ 2] 1077 	ldw y,txtend 
      0004D7 72 F2 03         [ 2] 1078 	subw y,(SRC,sp) ; y=count 
      0004DA 90 CF 00 0C      [ 2] 1079 	ldw acc16,y 
      0004DE 16 03            [ 2] 1080 	ldw y,(SRC,sp)    ; source
      0004E0 CD 04 5E         [ 4] 1081 	call move
      0004E3 90 CE 00 1E      [ 2] 1082 	ldw y,txtend 
      0004E7 72 F2 01         [ 2] 1083 	subw y,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004EA 90 CF 00 1E      [ 2] 1084 	ldw txtend,y  
      0004EE                       1085 	_drop VSIZE     
      0004EE 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004F0 81               [ 4] 1086 	ret 
                                   1087 
                                   1088 ;---------------------------------------------
                                   1089 ; create a gap in text area to 
                                   1090 ; move new line in this gap
                                   1091 ; input:
                                   1092 ;    X 			addr gap start 
                                   1093 ;    Y 			gap length 
                                   1094 ; output:
                                   1095 ;    X 			addr gap start 
                                   1096 ;--------------------------------------------
                           000001  1097 	DEST=1
                           000003  1098 	SRC=3
                           000005  1099 	LEN=5
                           000006  1100 	VSIZE=6 
      0004F1                       1101 create_gap:
      0004F1                       1102 	_vars VSIZE
      0004F1 52 06            [ 2]    1     sub sp,#VSIZE 
      0004F3 1F 03            [ 2] 1103 	ldw (SRC,sp),x 
      0004F5 17 05            [ 2] 1104 	ldw (LEN,sp),y 
      0004F7 90 CF 00 0C      [ 2] 1105 	ldw acc16,y 
      0004FB 90 93            [ 1] 1106 	ldw y,x ; SRC
      0004FD 72 BB 00 0C      [ 2] 1107 	addw x,acc16  
      000501 1F 01            [ 2] 1108 	ldw (DEST,sp),x 
                                   1109 ;compute size to move 	
      000503 CE 00 1E         [ 2] 1110 	ldw x,txtend 
      000506 72 F0 03         [ 2] 1111 	subw x,(SRC,sp)
      000509 CF 00 0C         [ 2] 1112 	ldw acc16,x ; size to move
      00050C 1E 01            [ 2] 1113 	ldw x,(DEST,sp) 
      00050E CD 04 5E         [ 4] 1114 	call move
      000511 CE 00 1E         [ 2] 1115 	ldw x,txtend
      000514 72 FB 05         [ 2] 1116 	addw x,(LEN,sp)
      000517 CF 00 1E         [ 2] 1117 	ldw txtend,x
      00051A                       1118 9$:	_drop VSIZE 
      00051A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00051C 81               [ 4] 1119 	ret 
                                   1120 
                                   1121 ;--------------------------------------------
                                   1122 ; insert line in pad into text area 
                                   1123 ; first search for already existing 
                                   1124 ; replace existing 
                                   1125 ; if new line empty delete existing one. 
                                   1126 ; input:
                                   1127 ;   ptr16		pointer to tokenized line  
                                   1128 ; output:
                                   1129 ;   none
                                   1130 ;---------------------------------------------
                           000001  1131 	DEST=1  ; text area insertion address 
                           000003  1132 	SRC=3   ; str to insert address 
                           000005  1133 	LINENO=5 ; line number 
                           000007  1134 	LLEN=7 ; line length 
                           000008  1135 	VSIZE=8  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00051D                       1136 insert_line:
      00051D                       1137 	_vars VSIZE 
      00051D 52 08            [ 2]    1     sub sp,#VSIZE 
      00051F CE 00 1E         [ 2] 1138 	ldw x,txtend  
      000522 C3 00 1C         [ 2] 1139 	cpw x,txtbgn 
      000525 26 19            [ 1] 1140 	jrne 0$
                                   1141 ;first text line 
      000527 AE 00 02         [ 2] 1142 	ldw x,#2 
      00052A 72 D6 00 17      [ 4] 1143 	ld a,([ptr16],x)
      00052E A1 03            [ 1] 1144 	cp a,#3
      000530 27 59            [ 1] 1145 	jreq insert_ln_exit
      000532 5F               [ 1] 1146 	clrw x 
      000533 97               [ 1] 1147 	ld xl,a
      000534 1F 07            [ 2] 1148 	ldw (LLEN,sp),x 
      000536 CE 00 1C         [ 2] 1149 	ldw x,txtbgn
      000539 1F 01            [ 2] 1150 	ldw (DEST,sp),x 
      00053B CE 00 1E         [ 2] 1151 	ldw x,txtend 
      00053E 20 37            [ 2] 1152 	jra 4$
      000540 72 CE 00 17      [ 5] 1153 0$:	ldw x,[ptr16]
                                   1154 ; line number
      000544 1F 05            [ 2] 1155 	ldw (LINENO,sp),x 
      000546 AE 00 02         [ 2] 1156 	ldw x,#2 
      000549 72 D6 00 17      [ 4] 1157 	ld a,([ptr16],x)
      00054D 97               [ 1] 1158 	ld xl,a
                                   1159 ; line length
      00054E 1F 07            [ 2] 1160 	ldw (LLEN,sp),x
                                   1161 ; check if that line number already exit 	
      000550 1E 05            [ 2] 1162 	ldw x,(LINENO,sp)
      000552 CD 04 A0         [ 4] 1163 	call search_lineno 
      000555 5D               [ 2] 1164 	tnzw x 
      000556 26 04            [ 1] 1165 	jrne 2$
                                   1166 ; line doesn't exit
                                   1167 ; it will be inserted at this point.  	
      000558 17 01            [ 2] 1168 	ldw (DEST,sp),y 
      00055A 20 05            [ 2] 1169 	jra 3$
                                   1170 ; line exit delete it.
                                   1171 ; it will be replaced by new one 	
      00055C 1F 01            [ 2] 1172 2$: ldw (DEST,sp),x 
      00055E CD 04 C4         [ 4] 1173 	call del_line
      000561                       1174 3$: 
                                   1175 ; insert new line or leave if LLEN==3
                                   1176 ; LLEN==3 means empty line 
      000561 A6 03            [ 1] 1177 	ld a,#3
      000563 11 08            [ 1] 1178 	cp a,(LLEN+1,sp)
      000565 27 24            [ 1] 1179 	jreq insert_ln_exit ; empty line exit.
                                   1180 ; if insertion point at txtend 
                                   1181 ; move no need to create a gap 
      000567 1E 01            [ 2] 1182 	ldw x,(DEST,sp)
      000569 C3 00 1E         [ 2] 1183 	cpw x,txtend 
      00056C 27 09            [ 1] 1184 	jreq 4$ 
                                   1185 ; must create a gap
                                   1186 ; at insertion point  
      00056E 1E 01            [ 2] 1187 	ldw x,(DEST,sp)
      000570 16 07            [ 2] 1188 	ldw y,(LLEN,sp)
      000572 CD 04 F1         [ 4] 1189 	call create_gap
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000575 20 06            [ 2] 1190 	jra 5$
      000577                       1191 4$: 
      000577 72 FB 07         [ 2] 1192 	addw x,(LLEN,sp)
      00057A CF 00 1E         [ 2] 1193 	ldw txtend,x 	 
                                   1194 ; move new line in gap 
      00057D 1E 07            [ 2] 1195 5$:	ldw x,(LLEN,sp)
      00057F CF 00 0C         [ 2] 1196 	ldw acc16,x 
      000582 90 AE 16 E0      [ 2] 1197 	ldw y,#pad ;SRC 
      000586 1E 01            [ 2] 1198 	ldw x,(DEST,sp) ; dest address 
      000588 CD 04 5E         [ 4] 1199 	call move 
      00058B                       1200 insert_ln_exit:	
      00058B                       1201 	_drop VSIZE
      00058B 5B 08            [ 2]    1     addw sp,#VSIZE 
      00058D 81               [ 4] 1202 	ret
                                   1203 
                                   1204 ;-----------------------------------
                                   1205 ; create token list fromm text line 
                                   1206 ; save this list in pad buffer 
                                   1207 ;  compiled line format: 
                                   1208 ;    line_no  2 bytes {0...32767}
                                   1209 ;    count    1 byte  
                                   1210 ;    tokens   variable length 
                                   1211 ;   
                                   1212 ; input:
                                   1213 ;   none
                                   1214 ; modified variables:
                                   1215 ;   basicptr     token list buffer address 
                                   1216 ;   in.w  		 3|count, i.e. index in buffer
                                   1217 ;   count        length of line | 0  
                                   1218 ;-----------------------------------
                           000001  1219 	XSAVE=1
                           000002  1220 	VSIZE=2
      00058E                       1221 compile:
      00058E                       1222 	_vars VSIZE 
      00058E 52 02            [ 2]    1     sub sp,#VSIZE 
      000590 72 1A 00 23      [ 1] 1223 	bset flags,#FCOMP 
      000594 A6 00            [ 1] 1224 	ld a,#0
      000596 AE 00 00         [ 2] 1225 	ldw x,#0
      000599 CF 16 E0         [ 2] 1226 	ldw pad,x ; destination buffer 
      00059C C7 16 E2         [ 1] 1227 	ld pad+2,a ; count 
      00059F AE 16 E3         [ 2] 1228 	ldw x,#pad+3
      0005A2 72 5F 00 01      [ 1] 1229 	clr in 
      0005A6 CD 0C 9E         [ 4] 1230 	call get_token
      0005A9 A1 84            [ 1] 1231 	cp a,#TK_INTGR
      0005AB 26 11            [ 1] 1232 	jrne 2$
      0005AD A3 00 01         [ 2] 1233 	cpw x,#1 
      0005B0 2A 05            [ 1] 1234 	jrpl 1$
      0005B2 A6 0A            [ 1] 1235 	ld a,#ERR_BAD_VALUE
      0005B4 CC 09 1E         [ 2] 1236 	jp tb_error
      0005B7 CF 16 E0         [ 2] 1237 1$:	ldw pad,x 
      0005BA 90 AE 16 E3      [ 2] 1238 	ldw y,#pad+3 
      0005BE 90 A3 17 60      [ 2] 1239 2$:	cpw y,#stack_full 
      0005C2 25 05            [ 1] 1240 	jrult 3$
      0005C4 A6 0F            [ 1] 1241 	ld a,#ERR_BUF_FULL 
      0005C6 CC 09 1E         [ 2] 1242 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C9                       1243 3$:	
      0005C9 93               [ 1] 1244 	ldw x,y 
      0005CA CD 0C 9E         [ 4] 1245 	call get_token 
      0005CD A1 00            [ 1] 1246 	cp a,#TK_NONE 
      0005CF 26 ED            [ 1] 1247 	jrne 2$ 
                                   1248 ; compilation completed  
      0005D1 72 A2 16 E0      [ 2] 1249 	subw y,#pad
      0005D5 90 9F            [ 1] 1250     ld a,yl
      0005D7 AE 16 E0         [ 2] 1251 	ldw x,#pad 
      0005DA CF 00 17         [ 2] 1252 	ldw ptr16,x 
      0005DD E7 02            [ 1] 1253 	ld (2,x),a 
      0005DF FE               [ 2] 1254 	ldw x,(x)
      0005E0 27 09            [ 1] 1255 	jreq 10$
      0005E2 CD 05 1D         [ 4] 1256 	call insert_line
      0005E5 72 5F 00 03      [ 1] 1257 	clr  count 
      0005E9 20 0F            [ 2] 1258 	jra  11$ 
      0005EB                       1259 10$: ; line# is zero 
      0005EB CE 00 17         [ 2] 1260 	ldw x,ptr16  
      0005EE CF 00 04         [ 2] 1261 	ldw basicptr,x 
      0005F1 E6 02            [ 1] 1262 	ld a,(2,x)
      0005F3 C7 00 03         [ 1] 1263 	ld count,a 
      0005F6 35 03 00 01      [ 1] 1264 	mov in,#3 
      0005FA                       1265 11$:
      0005FA                       1266 	_drop VSIZE 
      0005FA 5B 02            [ 2]    1     addw sp,#VSIZE 
      0005FC 72 1B 00 23      [ 1] 1267 	bres flags,#FCOMP 
      000600 81               [ 4] 1268 	ret 
                                   1269 
                                   1270 ;------------------------------------
                                   1271 ;  set all variables to zero 
                                   1272 ; input:
                                   1273 ;   none 
                                   1274 ; output:
                                   1275 ;	none
                                   1276 ;------------------------------------
      000601                       1277 clear_vars:
      000601 AE 00 39         [ 2] 1278 	ldw x,#vars 
      000604 90 AE 00 34      [ 2] 1279 	ldw y,#2*26 
      000608 7F               [ 1] 1280 1$:	clr (x)
      000609 5C               [ 1] 1281 	incw x 
      00060A 90 5A            [ 2] 1282 	decw y 
      00060C 26 FA            [ 1] 1283 	jrne 1$
      00060E 81               [ 4] 1284 	ret 
                                   1285 
                                   1286 ;-------------------------------------
                                   1287 ; check if A is a letter 
                                   1288 ; input:
                                   1289 ;   A 			character to test 
                                   1290 ; output:
                                   1291 ;   C flag      1 true, 0 false 
                                   1292 ;-------------------------------------
      00060F                       1293 is_alpha:
      00060F A1 41            [ 1] 1294 	cp a,#'A 
      000611 8C               [ 1] 1295 	ccf 
      000612 24 0B            [ 1] 1296 	jrnc 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000614 A1 5B            [ 1] 1297 	cp a,#'Z+1 
      000616 25 07            [ 1] 1298 	jrc 9$ 
      000618 A1 61            [ 1] 1299 	cp a,#'a 
      00061A 8C               [ 1] 1300 	ccf 
      00061B 24 02            [ 1] 1301 	jrnc 9$
      00061D A1 7B            [ 1] 1302 	cp a,#'z+1
      00061F 81               [ 4] 1303 9$: ret 	
                                   1304 
                                   1305 ;------------------------------------
                                   1306 ; check if character in {'0'..'9'}
                                   1307 ; input:
                                   1308 ;    A  character to test
                                   1309 ; output:
                                   1310 ;    Carry  0 not digit | 1 digit
                                   1311 ;------------------------------------
      000620                       1312 is_digit:
      000620 A1 30            [ 1] 1313 	cp a,#'0
      000622 25 03            [ 1] 1314 	jrc 1$
      000624 A1 3A            [ 1] 1315     cp a,#'9+1
      000626 8C               [ 1] 1316 	ccf 
      000627 8C               [ 1] 1317 1$:	ccf 
      000628 81               [ 4] 1318     ret
                                   1319 
                                   1320 ;-------------------------------------
                                   1321 ; return true if character in  A 
                                   1322 ; is letter or digit.
                                   1323 ; input:
                                   1324 ;   A     ASCII character 
                                   1325 ; output:
                                   1326 ;   A     no change 
                                   1327 ;   Carry    0 false| 1 true 
                                   1328 ;--------------------------------------
      000629                       1329 is_alnum:
      000629 CD 06 20         [ 4] 1330 	call is_digit
      00062C 25 03            [ 1] 1331 	jrc 1$ 
      00062E CD 06 0F         [ 4] 1332 	call is_alpha
      000631 81               [ 4] 1333 1$:	ret 
                                   1334 
                                   1335 
                                   1336 ;-------------------------------------
                                   1337 ;  program initialization entry point 
                                   1338 ;-------------------------------------
                           000001  1339 	MAJOR=1
                           000000  1340 	MINOR=0
      000632 0A 0A 54 69 6E 79 20  1341 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000678                       1342 cold_start:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1343 ;set stack 
      000678 AE 17 FF         [ 2] 1344 	ldw x,#STACK_EMPTY
      00067B 94               [ 1] 1345 	ldw sp,x   
                                   1346 ; clear all ram 
      00067C 7F               [ 1] 1347 0$: clr (x)
      00067D 5A               [ 2] 1348 	decw x 
      00067E 26 FC            [ 1] 1349 	jrne 0$
                                   1350 ; activate pull up on all inputs 
      000680 A6 FF            [ 1] 1351 	ld a,#255 
      000682 C7 50 03         [ 1] 1352 	ld PA_CR1,a 
      000685 C7 50 08         [ 1] 1353 	ld PB_CR1,a 
      000688 C7 50 0D         [ 1] 1354 	ld PC_CR1,a 
      00068B C7 50 12         [ 1] 1355 	ld PD_CR1,a 
      00068E C7 50 17         [ 1] 1356 	ld PE_CR1,a 
      000691 C7 50 1C         [ 1] 1357 	ld PF_CR1,a 
      000694 C7 50 21         [ 1] 1358 	ld PG_CR1,a 
      000697 C7 50 2B         [ 1] 1359 	ld PI_CR1,a
                                   1360 ; set LD2 pin as output 
      00069A 72 1A 50 0D      [ 1] 1361     bset PC_CR1,#LED2_BIT
      00069E 72 1A 50 0E      [ 1] 1362     bset PC_CR2,#LED2_BIT
      0006A2 72 1A 50 0C      [ 1] 1363     bset PC_DDR,#LED2_BIT
      0006A6 72 1B 50 0A      [ 1] 1364 	bres PC_ODR,#LED2_BIT 
                                   1365 ; disable schmitt triggers on Arduino CN4 analog inputs
      0006AA 55 00 3F 54 07   [ 1] 1366 	mov ADC_TDRL,0x3f
                                   1367 ; disable peripherals clocks
                                   1368 ;	clr CLK_PCKENR1 
                                   1369 ;	clr CLK_PCKENR2
      0006AF 72 5F 50 F2      [ 1] 1370 	clr AWU_TBR 
      0006B3 72 14 50 CA      [ 1] 1371 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1372 ; select internal clock no divisor: 16 Mhz 	
      0006B7 A6 E1            [ 1] 1373 	ld a,#CLK_SWR_HSI 
      0006B9 5F               [ 1] 1374 	clrw x  
      0006BA CD 00 DD         [ 4] 1375     call clock_init 
      0006BD CD 01 00         [ 4] 1376 	call timer4_init
      0006C0 CD 00 F3         [ 4] 1377 	call timer2_init
                                   1378 ; UART1 at 115200 BAUD
      0006C3 CD 02 E8         [ 4] 1379 	call uart1_init
                                   1380 ; UART3 at 115200 BAUD 
      0006C6 CD 02 A5         [ 4] 1381 	call uart3_init	
                                   1382 ; activate PE_4 (user button interrupt)
      0006C9 72 18 50 18      [ 1] 1383     bset PE_CR2,#USR_BTN_BIT 
                                   1384 ; display system information
      0006CD AE 06 32         [ 2] 1385 	ldw x,#software 
      0006D0 CD 00 00         [ 4] 1386 	call puts 
      0006D3 A6 01            [ 1] 1387 	ld a,#MAJOR 
      0006D5 C7 00 0D         [ 1] 1388 	ld acc8,a 
      0006D8 5F               [ 1] 1389 	clrw x 
      0006D9 CF 00 0B         [ 2] 1390 	ldw acc24,x
      0006DC 72 5F 00 24      [ 1] 1391 	clr tab_width  
      0006E0 35 0A 00 0A      [ 1] 1392 	mov base, #10 
      0006E4 CD 0A 7F         [ 4] 1393 	call prti24 
      0006E7 A6 2E            [ 1] 1394 	ld a,#'.
      0006E9 CD 03 2B         [ 4] 1395 	call putc 
      0006EC A6 00            [ 1] 1396 	ld a,#MINOR 
      0006EE C7 00 0D         [ 1] 1397 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006F1 5F               [ 1] 1398 	clrw x 
      0006F2 CF 00 0B         [ 2] 1399 	ldw acc24,x 
      0006F5 CD 0A 7F         [ 4] 1400 	call prti24
      0006F8 A6 0D            [ 1] 1401 	ld a,#CR 
      0006FA CD 03 2B         [ 4] 1402 	call putc
      0006FD CD 1A D4         [ 4] 1403 	call seek_fdrive 
      000700 9A               [ 1] 1404 	rim 
      000701 72 5C 00 15      [ 1] 1405 	inc seedy+1 
      000705 72 5C 00 13      [ 1] 1406 	inc seedx+1 
      000709 CD 07 86         [ 4] 1407 	call clear_basic
      00070C CD 12 EC         [ 4] 1408 	call ubound 
      00070F CD 19 22         [ 4] 1409 	call beep_1khz  
      000712                       1410 2$:	
      000712 CD 07 1B         [ 4] 1411 	call warm_init
      000715 CD 07 48         [ 4] 1412 	call load_autorun
      000718 CC 09 A6         [ 2] 1413     jp cmd_line  
                                   1414 
      00071B                       1415 warm_init:
      00071B 72 5F 00 23      [ 1] 1416 	clr flags 
      00071F 72 5F 00 20      [ 1] 1417 	clr loop_depth 
      000723 35 04 00 24      [ 1] 1418 	mov tab_width,#TAB_WIDTH 
      000727 35 0A 00 0A      [ 1] 1419 	mov base,#10 
      00072B AE 00 00         [ 2] 1420 	ldw x,#0 
      00072E CF 00 04         [ 2] 1421 	ldw basicptr,x 
      000731 CF 00 00         [ 2] 1422 	ldw in.w,x 
      000734 72 5F 00 03      [ 1] 1423 	clr count
      000738 81               [ 4] 1424 	ret 
                                   1425 
                                   1426 ;--------------------------
                                   1427 ; called by tb_error when
                                   1428 ; flag FAUTORUN is set.
                                   1429 ; There is a bug in autorun 
                                   1430 ; program so cancel it.
                                   1431 ;---------------------------
      000739                       1432 cancel_autorun:
      000739 AE 40 00         [ 2] 1433 	ldw x,#AUTORUN_NAME 
      00073C CF 00 17         [ 2] 1434 	ldw farptr+1,x 
      00073F 4F               [ 1] 1435 	clr a
      000740 5F               [ 1] 1436 	clrw x  
      000741 C7 00 16         [ 1] 1437 	ld farptr,a 
      000744 CD 02 0D         [ 4] 1438 	call write_byte 
      000747 81               [ 4] 1439 	ret 
                                   1440 
                                   1441 
                                   1442 ;--------------------------
                                   1443 ; if autorun file defined 
                                   1444 ; in eeprom address AUTORUN_NAME 
                                   1445 ; load and run it.
                                   1446 ;-------------------------
      000748                       1447 load_autorun:
      000748 90 AE 40 00      [ 2] 1448 	ldw y,#AUTORUN_NAME
      00074C 90 F6            [ 1] 1449 	ld a,(y)
      00074E 27 20            [ 1] 1450 	jreq 9$
      000750 CD 1B 3A         [ 4] 1451 	call search_file
      000753 25 05            [ 1] 1452 	jrc 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1453 ; if file doesn't exit
      000755 CD 07 39         [ 4] 1454 	call cancel_autorun
      000758 20 16            [ 2] 1455 	jra 9$ 
      00075A CD 1C 53         [ 4] 1456 2$:	call load_file
      00075D AE 40 00         [ 2] 1457 	ldw x,#AUTORUN_NAME 
      000760 CD 00 00         [ 4] 1458 	call puts
      000763 AE 07 71         [ 2] 1459 	ldw x,#autorun_msg 
      000766 CD 00 00         [ 4] 1460 	call puts 
      000769 72 1C 00 23      [ 1] 1461 	bset flags,#FAUTORUN 
      00076D CC 18 F4         [ 2] 1462 	jp run_it    
      000770 81               [ 4] 1463 9$: ret 	
                                   1464 
      000771 20 6C 6F 61 64 65 64  1465 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1466 ;---------------------------
                                   1467 ; reset BASIC text variables 
                                   1468 ; and clear variables 
                                   1469 ;---------------------------
      000786                       1470 clear_basic:
      000786 72 5F 00 03      [ 1] 1471 	clr count
      00078A 72 5F 00 01      [ 1] 1472 	clr in  
      00078E AE 00 6D         [ 2] 1473 	ldw x,#free_ram 
      000791 CF 00 1C         [ 2] 1474 	ldw txtbgn,x 
      000794 CF 00 1E         [ 2] 1475 	ldw txtend,x 
      000797 CD 06 01         [ 4] 1476 	call clear_vars 
      00079A 81               [ 4] 1477 	ret 
                                   1478 
                                   1479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1480 ;;   Tiny BASIC error messages     ;;
                                   1481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00079B                       1482 err_msg:
      00079B 00 00 07 BB 07 C8 07  1483 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             D6 07 EF 07 FE
      0007A7 08 14 08 2A 08 44 08  1484 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             55 08 66
      0007B1 08 72 08 A5 08 B5 08  1485 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             C9 08 DC
                                   1486 
      0007BB 4D 65 6D 6F 72 79 20  1487 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0007C8 73 79 6E 74 61 78 20  1488 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0007D6 6D 61 74 68 20 6F 70  1489 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0007EF 64 69 76 69 73 69 6F  1490 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      0007FE 69 6E 76 61 6C 69 64  1491 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000814 72 75 6E 20 74 69 6D  1492 err_run_only: .asciz "run time only usage.\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00082A 63 6F 6D 6D 61 6E 64  1493 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      000844 64 75 70 6C 69 63 61  1494 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      000855 46 69 6C 65 20 6E 6F  1495 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000866 62 61 64 20 76 61 6C  1496 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      000872 46 69 6C 65 20 69 6E  1497 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0008A5 4E 6F 20 64 61 74 61  1498 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0008B5 4E 6F 20 70 72 6F 67  1499 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0008C9 46 69 6C 65 20 73 79  1500 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0008DC 42 75 66 66 65 72 20  1501 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1502 
      0008E9 0A 72 75 6E 20 74 69  1503 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      0008FB 0A 63 6F 6D 70 69 6C  1504 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      00090C 6C 61 73 74 20 74 6F  1505 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1506 
      00091C                       1507 syntax_error:
      00091C A6 02            [ 1] 1508 	ld a,#ERR_SYNTAX 
                                   1509 
      00091E                       1510 tb_error:
      00091E 72 0A 00 23 47   [ 2] 1511 	btjt flags,#FCOMP,1$
      000923 88               [ 1] 1512 	push a 
      000924 AE 08 E9         [ 2] 1513 	ldw x, #rt_msg 
      000927 CD 00 00         [ 4] 1514 	call puts 
      00092A 84               [ 1] 1515 	pop a 
      00092B AE 07 9B         [ 2] 1516 	ldw x, #err_msg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00092E 72 5F 00 0C      [ 1] 1517 	clr acc16 
      000932 48               [ 1] 1518 	sll a
      000933 72 59 00 0C      [ 1] 1519 	rlc acc16  
      000937 C7 00 0D         [ 1] 1520 	ld acc8, a 
      00093A 72 BB 00 0C      [ 2] 1521 	addw x,acc16 
      00093E FE               [ 2] 1522 	ldw x,(x)
      00093F CD 00 00         [ 4] 1523 	call puts
      000942 CE 00 04         [ 2] 1524 	ldw x,basicptr
      000945 C6 00 01         [ 1] 1525 	ld a,in 
      000948 CD 15 C0         [ 4] 1526 	call prt_basic_line
      00094B AE 09 0C         [ 2] 1527 	ldw x,#tk_id 
      00094E CD 00 00         [ 4] 1528 	call puts 
      000951 C6 00 02         [ 1] 1529 	ld a,in.saved 
      000954 5F               [ 1] 1530 	clrw x 
      000955 97               [ 1] 1531 	ld xl,a 
      000956 72 BB 00 04      [ 2] 1532 	addw x,basicptr 
      00095A F6               [ 1] 1533 	ld a,(x)
      00095B 5F               [ 1] 1534 	clrw x 
      00095C 97               [ 1] 1535 	ld xl,a 
      00095D CD 0A 6F         [ 4] 1536 	call print_int
      000960 72 0D 00 23 3A   [ 2] 1537 	btjf flags,#FAUTORUN ,6$
      000965 CD 07 39         [ 4] 1538 	call cancel_autorun  
      000968 20 35            [ 2] 1539 	jra 6$
      00096A                       1540 1$:	
      00096A 88               [ 1] 1541 	push a 
      00096B AE 08 FB         [ 2] 1542 	ldw x,#comp_msg
      00096E CD 00 00         [ 4] 1543 	call puts 
      000971 84               [ 1] 1544 	pop a 
      000972 AE 07 9B         [ 2] 1545 	ldw x, #err_msg 
      000975 72 5F 00 0C      [ 1] 1546 	clr acc16 
      000979 48               [ 1] 1547 	sll a
      00097A 72 59 00 0C      [ 1] 1548 	rlc acc16  
      00097E C7 00 0D         [ 1] 1549 	ld acc8, a 
      000981 72 BB 00 0C      [ 2] 1550 	addw x,acc16 
      000985 FE               [ 2] 1551 	ldw x,(x)
      000986 CD 00 00         [ 4] 1552 	call puts
      000989 AE 16 90         [ 2] 1553 	ldw x,#tib
      00098C CD 00 00         [ 4] 1554 	call puts 
      00098F A6 0D            [ 1] 1555 	ld a,#CR 
      000991 CD 03 2B         [ 4] 1556 	call putc
      000994 CE 00 00         [ 2] 1557 	ldw x,in.w
      000997 CD 00 00         [ 4] 1558 	call spaces
      00099A A6 5E            [ 1] 1559 	ld a,#'^
      00099C CD 03 2B         [ 4] 1560 	call putc 
      00099F AE 17 FF         [ 2] 1561 6$: ldw x,#STACK_EMPTY 
      0009A2 94               [ 1] 1562     ldw sp,x
      0009A3                       1563 warm_start:
      0009A3 CD 07 1B         [ 4] 1564 	call warm_init
                                   1565 ;----------------------------
                                   1566 ;   BASIC interpreter
                                   1567 ;----------------------------
      0009A6                       1568 cmd_line: ; user interface 
      0009A6 A6 0D            [ 1] 1569 	ld a,#CR 
      0009A8 CD 03 2B         [ 4] 1570 	call putc 
      0009AB A6 3E            [ 1] 1571 	ld a,#'> 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009AD CD 03 2B         [ 4] 1572 	call putc
      0009B0 CD 00 00         [ 4] 1573 	call readln
      0009B3 72 5D 00 03      [ 1] 1574 	tnz count 
      0009B7 27 ED            [ 1] 1575 	jreq cmd_line
      0009B9 CD 05 8E         [ 4] 1576 	call compile
                                   1577 ; if text begin with a line number
                                   1578 ; the compiler set count to zero    
                                   1579 ; so code is not interpreted
      0009BC 72 5D 00 03      [ 1] 1580 	tnz count 
      0009C0 27 E4            [ 1] 1581 	jreq cmd_line
                                   1582 
                                   1583 ; if direct command 
                                   1584 ; it's ready to interpret 
                                   1585 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1586 ;; This is the interpreter loop
                                   1587 ;; for each BASIC code line. 
                                   1588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0009C2                       1589 interpreter: 
      0009C2 C6 00 01         [ 1] 1590 	ld a,in 
      0009C5 C1 00 03         [ 1] 1591 	cp a,count 
      0009C8 2B 1D            [ 1] 1592 	jrmi interp_loop
      0009CA                       1593 next_line:
      0009CA 72 01 00 23 D7   [ 2] 1594 	btjf flags, #FRUN, cmd_line
      0009CF CE 00 04         [ 2] 1595 	ldw x,basicptr
      0009D2 72 BB 00 00      [ 2] 1596 	addw x,in.w 
      0009D6 C3 00 1E         [ 2] 1597 	cpw x,txtend 
      0009D9 2A C8            [ 1] 1598 	jrpl warm_start
      0009DB CF 00 04         [ 2] 1599 	ldw basicptr,x ; start of next line  
      0009DE E6 02            [ 1] 1600 	ld a,(2,x)
      0009E0 C7 00 03         [ 1] 1601 	ld count,a 
      0009E3 35 03 00 01      [ 1] 1602 	mov in,#3 ; skip first 3 bytes of line 
      0009E7                       1603 interp_loop: 
      0009E7 CD 0A 0E         [ 4] 1604 	call next_token
      0009EA A1 00            [ 1] 1605 	cp a,#TK_NONE 
      0009EC 27 DC            [ 1] 1606 	jreq next_line 
      0009EE A1 80            [ 1] 1607 	cp a,#TK_CMD
      0009F0 26 03            [ 1] 1608 	jrne 1$
      0009F2 FD               [ 4] 1609 	call (x) 
      0009F3 20 F2            [ 2] 1610 	jra interp_loop 
      0009F5                       1611 1$:	 
      0009F5 A1 85            [ 1] 1612 	cp a,#TK_VAR
      0009F7 26 05            [ 1] 1613 	jrne 2$
      0009F9 CD 13 1F         [ 4] 1614 	call let_var  
      0009FC 20 E9            [ 2] 1615 	jra interp_loop 
      0009FE                       1616 2$:	
      0009FE A1 06            [ 1] 1617 	cp a,#TK_ARRAY 
      000A00 26 05            [ 1] 1618 	jrne 3$
      000A02 CD 13 1C         [ 4] 1619 	call let_array 
      000A05 20 E0            [ 2] 1620 	jra interp_loop
      000A07                       1621 3$:	
      000A07 A1 01            [ 1] 1622 	cp a,#TK_COLON 
      000A09 27 DC            [ 1] 1623 	jreq interp_loop 
      000A0B CC 09 1C         [ 2] 1624 	jp syntax_error 
                                   1625 
                                   1626 		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1627 ;--------------------------
                                   1628 ; extract next token from
                                   1629 ; token list 
                                   1630 ; basicptr -> base address 
                                   1631 ; in  -> offset in list array 
                                   1632 ; output:
                                   1633 ;   A 		token attribute
                                   1634 ;   X 		token value if there is one
                                   1635 ;----------------------------------------
      000A0E                       1636 next_token:
      000A0E 5F               [ 1] 1637 	clrw x 
      000A0F C6 00 01         [ 1] 1638 	ld a,in 
      000A12 C0 00 03         [ 1] 1639 	sub a,count ; don't replace sub by cp!  
      000A15 2B 01            [ 1] 1640 	jrmi 0$
      000A17 81               [ 4] 1641 	ret  ; end of BASIC line 
      000A18                       1642 0$: 
      000A18 55 00 01 00 02   [ 1] 1643 	mov in.saved,in 
      000A1D 90 CE 00 04      [ 2] 1644 	ldw y,basicptr 
      000A21 91 D6 00         [ 4] 1645 	ld a,([in.w],y)
      000A24 72 5C 00 01      [ 1] 1646 	inc in  
      000A28 4D               [ 1] 1647 	tnz a 
      000A29 2B 2A            [ 1] 1648 	jrmi 6$
      000A2B A1 06            [ 1] 1649 	cp a,#TK_ARRAY
      000A2D 2A 3F            [ 1] 1650 	jrpl 9$  ; no attribute for these
      000A2F A1 01            [ 1] 1651 	cp a,#TK_COLON
      000A31 27 3B            [ 1] 1652 	jreq 9$  
      000A33                       1653 1$: ; 
      000A33 A1 03            [ 1] 1654 	cp a,#TK_CHAR
      000A35 26 0A            [ 1] 1655 	jrne 2$
      000A37 41               [ 1] 1656 	exg a,xl
      000A38 91 D6 00         [ 4] 1657 	ld a,([in.w],y)
      000A3B 72 5C 00 01      [ 1] 1658 	inc in 
      000A3F 41               [ 1] 1659 	exg a,xl  
      000A40 81               [ 4] 1660 	ret
      000A41 A1 02            [ 1] 1661 2$:	cp a,#TK_QSTR 
      000A43 26 29            [ 1] 1662 	jrne 9$
      000A45 93               [ 1] 1663 	ldw x,y 
      000A46 72 BB 00 00      [ 2] 1664 	addw x,in.w ; pointer to string 
                                   1665 ; move pointer after string 
      000A4A 91 6D 00         [ 4] 1666 3$:	tnz ([in.w],y)
      000A4D 27 1B            [ 1] 1667 	jreq 8$
      000A4F 72 5C 00 01      [ 1] 1668 	inc in 
      000A53 20 F5            [ 2] 1669 	jra 3$
      000A55                       1670 6$: 
      000A55 72 B9 00 00      [ 2] 1671 	addw y,in.w 
      000A59 90 FE            [ 2] 1672 	ldw y,(y)
      000A5B A1 84            [ 1] 1673 	cp a,#TK_INTGR
      000A5D 2A 06            [ 1] 1674 	jrpl 7$
      000A5F 72 A9 28 A4      [ 2] 1675 	addw y,#code_addr
      000A63 90 FE            [ 2] 1676 	ldw y,(y) 
      000A65 51               [ 1] 1677 7$:	exgw x,y 
      000A66 72 5C 00 01      [ 1] 1678 	inc in
      000A6A 72 5C 00 01      [ 1] 1679 8$:	inc in 
      000A6E                       1680 9$: 
      000A6E 81               [ 4] 1681 	ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1682 
                                   1683 ;-----------------------------------
                                   1684 ; print a 16 bit integer 
                                   1685 ; using variable 'base' as conversion
                                   1686 ; format.
                                   1687 ; input:
                                   1688 ;   X       integer to print 
                                   1689 ;   'base'    conversion base 
                                   1690 ; output:
                                   1691 ;   none 
                                   1692 ;-----------------------------------
      000A6F                       1693 print_int:
      000A6F 72 5F 00 0B      [ 1] 1694 	clr acc24 
      000A73 CF 00 0C         [ 2] 1695 	ldw acc16,x 
      000A76 72 0F 00 0C 04   [ 2] 1696 	btjf acc16,#7,prti24
      000A7B 72 53 00 0B      [ 1] 1697 	cpl acc24 
                                   1698 
                                   1699 ;------------------------------------
                                   1700 ; print integer in acc24 
                                   1701 ; input:
                                   1702 ;	acc24 		integer to print 
                                   1703 ;	'base' 		numerical base for conversion 
                                   1704 ;   'tab_width' field width 
                                   1705 ;  output:
                                   1706 ;    A          string length
                                   1707 ;------------------------------------
      000A7F                       1708 prti24:
      000A7F CD 0A 8B         [ 4] 1709     call itoa  ; conversion entier en  .asciz
      000A82 CD 13 DC         [ 4] 1710 	call right_align  
      000A85 88               [ 1] 1711 	push a 
      000A86 CD 00 00         [ 4] 1712 	call puts
      000A89 84               [ 1] 1713 	pop a 
      000A8A 81               [ 4] 1714     ret	
                                   1715 
                                   1716 ;------------------------------------
                                   1717 ; convert integer in acc24 to string
                                   1718 ; input:
                                   1719 ;   'base'	conversion base 
                                   1720 ;	acc24	integer to convert
                                   1721 ; output:
                                   1722 ;   X  		pointer to first char of string
                                   1723 ;   A       string length
                                   1724 ;------------------------------------
                           000001  1725 	SIGN=1  ; integer sign 
                           000002  1726 	LEN=2 
                           000003  1727 	PSTR=3
                           000004  1728 	VSIZE=4 ;locals size
      000A8B                       1729 itoa:
      000A8B                       1730 	_vars VSIZE
      000A8B 52 04            [ 2]    1     sub sp,#VSIZE 
      000A8D 0F 02            [ 1] 1731 	clr (LEN,sp) ; string length  
      000A8F 0F 01            [ 1] 1732 	clr (SIGN,sp)    ; sign
      000A91 C6 00 0A         [ 1] 1733 	ld a,base 
      000A94 A1 0A            [ 1] 1734 	cp a,#10
      000A96 26 0A            [ 1] 1735 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1736 	; base 10 string display with negative sign if bit 23==1
      000A98 72 0F 00 0B 05   [ 2] 1737 	btjf acc24,#7,1$
      000A9D 03 01            [ 1] 1738 	cpl (SIGN,sp)
      000A9F CD 0B 52         [ 4] 1739 	call neg_acc24
      000AA2                       1740 1$:
                                   1741 ; initialize string pointer 
      000AA2 AE 16 90         [ 2] 1742 	ldw x,#tib 
      000AA5 1C 00 50         [ 2] 1743 	addw x,#TIB_SIZE
      000AA8 5A               [ 2] 1744 	decw x 
      000AA9 7F               [ 1] 1745 	clr (x)
      000AAA                       1746 itoa_loop:
      000AAA C6 00 0A         [ 1] 1747     ld a,base
      000AAD 1F 03            [ 2] 1748 	ldw (PSTR,sp),x 
      000AAF CD 0A F0         [ 4] 1749     call divu24_8 ; acc24/A 
      000AB2 1E 03            [ 2] 1750 	ldw x,(PSTR,sp)
      000AB4 AB 30            [ 1] 1751     add a,#'0  ; remainder of division
      000AB6 A1 3A            [ 1] 1752     cp a,#'9+1
      000AB8 2B 02            [ 1] 1753     jrmi 2$
      000ABA AB 07            [ 1] 1754     add a,#7 
      000ABC                       1755 2$:	
      000ABC 5A               [ 2] 1756 	decw x
      000ABD F7               [ 1] 1757     ld (x),a
      000ABE 0C 02            [ 1] 1758 	inc (LEN,sp)
                                   1759 	; if acc24==0 conversion done
      000AC0 C6 00 0B         [ 1] 1760 	ld a,acc24
      000AC3 CA 00 0C         [ 1] 1761 	or a,acc16
      000AC6 CA 00 0D         [ 1] 1762 	or a,acc8
      000AC9 26 DF            [ 1] 1763     jrne itoa_loop
                                   1764 	;conversion done, next add '$' or '-' as required
      000ACB C6 00 0A         [ 1] 1765 	ld a,base 
      000ACE A1 10            [ 1] 1766 	cp a,#16
      000AD0 27 08            [ 1] 1767 	jreq 8$
      000AD2 7B 01            [ 1] 1768 	ld a,(SIGN,sp)
      000AD4 27 15            [ 1] 1769     jreq 10$
      000AD6 A6 2D            [ 1] 1770     ld a,#'-
      000AD8 20 0D            [ 2] 1771 	jra 9$ 
                                   1772 ; don't print more than 4 digits
                                   1773 ; in hexadecimal to avoid '-' sign 
                                   1774 ; extend display 	
      000ADA 7B 02            [ 1] 1775 8$: ld a,(LEN,sp) 
      000ADC A1 05            [ 1] 1776 	cp a,#5 
      000ADE 2B 05            [ 1] 1777 	jrmi 81$
      000AE0 5C               [ 1] 1778 	incw x
      000AE1 0A 02            [ 1] 1779 	dec (LEN,sp)
      000AE3 20 F5            [ 2] 1780 	jra 8$
      000AE5                       1781 81$:	
      000AE5 A6 24            [ 1] 1782 	ld a,#'$ 
      000AE7 5A               [ 2] 1783 9$: decw x
      000AE8 F7               [ 1] 1784     ld (x),a
      000AE9 0C 02            [ 1] 1785 	inc (LEN,sp)
      000AEB                       1786 10$:
      000AEB 7B 02            [ 1] 1787 	ld a,(LEN,sp)
      000AED                       1788 	_drop VSIZE
      000AED 5B 04            [ 2]    1     addw sp,#VSIZE 
      000AEF 81               [ 4] 1789 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1790 
                                   1791 ;-------------------------------------
                                   1792 ; divide uint24_t by uint8_t
                                   1793 ; used to convert uint24_t to string
                                   1794 ; input:
                                   1795 ;	acc24	dividend
                                   1796 ;   A 		divisor
                                   1797 ; output:
                                   1798 ;   acc24	quotient
                                   1799 ;   A		remainder
                                   1800 ;------------------------------------- 
                                   1801 ; offset  on sp of arguments and locals
                           000001  1802 	U8   = 1   ; divisor on stack
                           000001  1803 	VSIZE =1
      000AF0                       1804 divu24_8:
      000AF0 89               [ 2] 1805 	pushw x ; save x
      000AF1 88               [ 1] 1806 	push a 
                                   1807 	; ld dividend UU:MM bytes in X
      000AF2 C6 00 0B         [ 1] 1808 	ld a, acc24
      000AF5 95               [ 1] 1809 	ld xh,a
      000AF6 C6 00 0C         [ 1] 1810 	ld a,acc24+1
      000AF9 97               [ 1] 1811 	ld xl,a
      000AFA 7B 01            [ 1] 1812 	ld a,(U8,SP) ; divisor
      000AFC 62               [ 2] 1813 	div x,a ; UU:MM/U8
      000AFD 88               [ 1] 1814 	push a  ;save remainder
      000AFE 9E               [ 1] 1815 	ld a,xh
      000AFF C7 00 0B         [ 1] 1816 	ld acc24,a
      000B02 9F               [ 1] 1817 	ld a,xl
      000B03 C7 00 0C         [ 1] 1818 	ld acc24+1,a
      000B06 84               [ 1] 1819 	pop a
      000B07 95               [ 1] 1820 	ld xh,a
      000B08 C6 00 0D         [ 1] 1821 	ld a,acc24+2
      000B0B 97               [ 1] 1822 	ld xl,a
      000B0C 7B 01            [ 1] 1823 	ld a,(U8,sp) ; divisor
      000B0E 62               [ 2] 1824 	div x,a  ; R:LL/U8
      000B0F 6B 01            [ 1] 1825 	ld (U8,sp),a ; save remainder
      000B11 9F               [ 1] 1826 	ld a,xl
      000B12 C7 00 0D         [ 1] 1827 	ld acc24+2,a
      000B15 84               [ 1] 1828 	pop a
      000B16 85               [ 2] 1829 	popw x
      000B17 81               [ 4] 1830 	ret
                                   1831 
                                   1832 ;--------------------------------------
                                   1833 ; unsigned multiply uint24_t by uint8_t
                                   1834 ; use to convert numerical string to uint24_t
                                   1835 ; input:
                                   1836 ;	acc24	uint24_t 
                                   1837 ;   A		uint8_t
                                   1838 ; output:
                                   1839 ;   acc24   A*acc24
                                   1840 ;-------------------------------------
                                   1841 ; local variables offset  on sp
                           000003  1842 	U8   = 3   ; A pushed on stack
                           000002  1843 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1844 	OVFH = 1  ; multiplication overflow high byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                           000003  1845 	VSIZE = 3
      000B18                       1846 mulu24_8:
      000B18 89               [ 2] 1847 	pushw x    ; save X
                                   1848 	; local variables
      000B19 88               [ 1] 1849 	push a     ; U8
      000B1A 5F               [ 1] 1850 	clrw x     ; initialize overflow to 0
      000B1B 89               [ 2] 1851 	pushw x    ; multiplication overflow
                                   1852 ; multiply low byte.
      000B1C C6 00 0D         [ 1] 1853 	ld a,acc24+2
      000B1F 97               [ 1] 1854 	ld xl,a
      000B20 7B 03            [ 1] 1855 	ld a,(U8,sp)
      000B22 42               [ 4] 1856 	mul x,a
      000B23 9F               [ 1] 1857 	ld a,xl
      000B24 C7 00 0D         [ 1] 1858 	ld acc24+2,a
      000B27 9E               [ 1] 1859 	ld a, xh
      000B28 6B 02            [ 1] 1860 	ld (OVFL,sp),a
                                   1861 ; multipy middle byte
      000B2A C6 00 0C         [ 1] 1862 	ld a,acc24+1
      000B2D 97               [ 1] 1863 	ld xl,a
      000B2E 7B 03            [ 1] 1864 	ld a, (U8,sp)
      000B30 42               [ 4] 1865 	mul x,a
                                   1866 ; add overflow to this partial product
      000B31 72 FB 01         [ 2] 1867 	addw x,(OVFH,sp)
      000B34 9F               [ 1] 1868 	ld a,xl
      000B35 C7 00 0C         [ 1] 1869 	ld acc24+1,a
      000B38 4F               [ 1] 1870 	clr a
      000B39 A9 00            [ 1] 1871 	adc a,#0
      000B3B 6B 01            [ 1] 1872 	ld (OVFH,sp),a
      000B3D 9E               [ 1] 1873 	ld a,xh
      000B3E 6B 02            [ 1] 1874 	ld (OVFL,sp),a
                                   1875 ; multiply most signficant byte	
      000B40 C6 00 0B         [ 1] 1876 	ld a, acc24
      000B43 97               [ 1] 1877 	ld xl, a
      000B44 7B 03            [ 1] 1878 	ld a, (U8,sp)
      000B46 42               [ 4] 1879 	mul x,a
      000B47 72 FB 01         [ 2] 1880 	addw x, (OVFH,sp)
      000B4A 9F               [ 1] 1881 	ld a, xl
      000B4B C7 00 0B         [ 1] 1882 	ld acc24,a
      000B4E 5B 03            [ 2] 1883     addw sp,#VSIZE
      000B50 85               [ 2] 1884 	popw x
      000B51 81               [ 4] 1885 	ret
                                   1886 
                                   1887 ;------------------------------------
                                   1888 ;  two's complement acc24
                                   1889 ;  input:
                                   1890 ;		acc24 variable
                                   1891 ;  output:
                                   1892 ;		acc24 variable
                                   1893 ;-------------------------------------
      000B52                       1894 neg_acc24:
      000B52 72 53 00 0D      [ 1] 1895 	cpl acc24+2
      000B56 72 53 00 0C      [ 1] 1896 	cpl acc24+1
      000B5A 72 53 00 0B      [ 1] 1897 	cpl acc24
      000B5E A6 01            [ 1] 1898 	ld a,#1
      000B60 CB 00 0D         [ 1] 1899 	add a,acc24+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B63 C7 00 0D         [ 1] 1900 	ld acc24+2,a
      000B66 4F               [ 1] 1901 	clr a
      000B67 C9 00 0C         [ 1] 1902 	adc a,acc24+1
      000B6A C7 00 0C         [ 1] 1903 	ld acc24+1,a 
      000B6D 4F               [ 1] 1904 	clr a 
      000B6E C9 00 0B         [ 1] 1905 	adc a,acc24 
      000B71 C7 00 0B         [ 1] 1906 	ld acc24,a 
      000B74 81               [ 4] 1907 	ret
                                   1908 
                                   1909 
                                   1910 
                                   1911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1912 ;; compiler routines        ;;
                                   1913 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1914 ;------------------------------------
                                   1915 ; parse quoted string 
                                   1916 ; input:
                                   1917 ;   Y 	pointer to tib 
                                   1918 ;   X   pointer to output buffer 
                                   1919 ; output:
                                   1920 ;	buffer   parsed string
                                   1921 ;------------------------------------
                           000001  1922 	PREV = 1
                           000002  1923 	CURR =2
                           000002  1924 	VSIZE=2
      000B75                       1925 parse_quote: 
      000B75                       1926 	_vars VSIZE 
      000B75 52 02            [ 2]    1     sub sp,#VSIZE 
      000B77 4F               [ 1] 1927 	clr a
      000B78 6B 01            [ 1] 1928 1$:	ld (PREV,sp),a 
      000B7A                       1929 2$:	
      000B7A 91 D6 00         [ 4] 1930 	ld a,([in.w],y)
      000B7D 27 24            [ 1] 1931 	jreq 6$
      000B7F 72 5C 00 01      [ 1] 1932 	inc in 
      000B83 6B 02            [ 1] 1933 	ld (CURR,sp),a 
      000B85 A6 5C            [ 1] 1934 	ld a,#'\
      000B87 11 01            [ 1] 1935 	cp a, (PREV,sp)
      000B89 26 0A            [ 1] 1936 	jrne 3$
      000B8B 0F 01            [ 1] 1937 	clr (PREV,sp)
      000B8D 7B 02            [ 1] 1938 	ld a,(CURR,sp)
      000B8F AD 1C            [ 4] 1939 	callr convert_escape
      000B91 F7               [ 1] 1940 	ld (x),a 
      000B92 5C               [ 1] 1941 	incw x 
      000B93 20 E5            [ 2] 1942 	jra 2$
      000B95                       1943 3$:
      000B95 7B 02            [ 1] 1944 	ld a,(CURR,sp)
      000B97 A1 5C            [ 1] 1945 	cp a,#'\'
      000B99 27 DD            [ 1] 1946 	jreq 1$
      000B9B A1 22            [ 1] 1947 	cp a,#'"
      000B9D 27 04            [ 1] 1948 	jreq 6$ 
      000B9F F7               [ 1] 1949 	ld (x),a 
      000BA0 5C               [ 1] 1950 	incw x 
      000BA1 20 D7            [ 2] 1951 	jra 2$
      000BA3                       1952 6$:
      000BA3 7F               [ 1] 1953 	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BA4 5C               [ 1] 1954 	incw x 
      000BA5 90 93            [ 1] 1955 	ldw y,x 
      000BA7 5F               [ 1] 1956 	clrw x 
      000BA8 A6 02            [ 1] 1957 	ld a,#TK_QSTR  
      000BAA                       1958 	_drop VSIZE
      000BAA 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BAC 81               [ 4] 1959 	ret 
                                   1960 
                                   1961 ;---------------------------------------
                                   1962 ; called by parse_quote
                                   1963 ; subtitute escaped character 
                                   1964 ; by their ASCII value .
                                   1965 ; input:
                                   1966 ;   A  character following '\'
                                   1967 ; output:
                                   1968 ;   A  substitued char or same if not valid.
                                   1969 ;---------------------------------------
      000BAD                       1970 convert_escape:
      000BAD 89               [ 2] 1971 	pushw x 
      000BAE AE 0B C2         [ 2] 1972 	ldw x,#escaped 
      000BB1 F1               [ 1] 1973 1$:	cp a,(x)
      000BB2 27 06            [ 1] 1974 	jreq 2$
      000BB4 7D               [ 1] 1975 	tnz (x)
      000BB5 27 09            [ 1] 1976 	jreq 3$
      000BB7 5C               [ 1] 1977 	incw x 
      000BB8 20 F7            [ 2] 1978 	jra 1$
      000BBA 1D 0B C2         [ 2] 1979 2$: subw x,#escaped 
      000BBD 9F               [ 1] 1980 	ld a,xl 
      000BBE AB 07            [ 1] 1981 	add a,#7
      000BC0 85               [ 2] 1982 3$:	popw x 
      000BC1 81               [ 4] 1983 	ret 
                                   1984 
      000BC2 61 62 74 6E 76 66 72  1985 escaped: .asciz "abtnvfr"
             00
                                   1986 
                                   1987 ;-------------------------
                                   1988 ; integer parser 
                                   1989 ; input:
                                   1990 ;   X 		point to output buffer  
                                   1991 ;   Y 		point to tib 
                                   1992 ;   A 	    first digit|'$' 
                                   1993 ; output:  
                                   1994 ;   X 		integer 
                                   1995 ;   A 		TK_INTGR
                                   1996 ;   acc24   24 bits integer 
                                   1997 ;-------------------------
                           000001  1998 	BASE=1
                           000002  1999 	TCHAR=2 
                           000003  2000 	XSAVE=3
                           000004  2001 	VSIZE=4 
      000BCA                       2002 parse_integer: ; { -- n }
      000BCA 89               [ 2] 2003 	pushw x 	
      000BCB 4B 00            [ 1] 2004 	push #0 ; TCHAR
      000BCD 4B 0A            [ 1] 2005 	push #10 ; BASE=10
      000BCF A1 24            [ 1] 2006 	cp a,#'$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BD1 26 04            [ 1] 2007 	jrne 2$ 
      000BD3                       2008     _drop #1
      000BD3 5B 01            [ 2]    1     addw sp,##1 
      000BD5 4B 10            [ 1] 2009 	push #16  ; BASE=16
      000BD7 F7               [ 1] 2010 2$:	ld (x),a 
      000BD8 5C               [ 1] 2011 	incw x 
      000BD9 91 D6 00         [ 4] 2012 	ld a,([in.w],y)
      000BDC 72 5C 00 01      [ 1] 2013 	inc in 
      000BE0 CD 0E 5D         [ 4] 2014 	call to_upper 
      000BE3 6B 02            [ 1] 2015 	ld (TCHAR,sp),a 
      000BE5 CD 06 20         [ 4] 2016 	call is_digit 
      000BE8 25 ED            [ 1] 2017 	jrc 2$
      000BEA A6 10            [ 1] 2018 	ld a,#16 
      000BEC 11 01            [ 1] 2019 	cp a,(BASE,sp)
      000BEE 26 0A            [ 1] 2020 	jrne 3$ 
      000BF0 7B 02            [ 1] 2021 	ld a,(TCHAR,sp)
      000BF2 A1 41            [ 1] 2022 	cp a,#'A 
      000BF4 2B 04            [ 1] 2023 	jrmi 3$ 
      000BF6 A1 47            [ 1] 2024 	cp a,#'G 
      000BF8 2B DD            [ 1] 2025 	jrmi 2$ 
      000BFA 72 5A 00 01      [ 1] 2026 3$: dec in 	
      000BFE 7F               [ 1] 2027     clr (x)
      000BFF 1E 03            [ 2] 2028 	ldw x,(XSAVE,sp)
      000C01 CD 0E 69         [ 4] 2029 	call atoi24
      000C04 90 93            [ 1] 2030 	ldw y,x 
      000C06 CE 00 0C         [ 2] 2031 	ldw x,acc16 
      000C09 A6 84            [ 1] 2032 	ld a,#TK_INTGR
      000C0B 90 FF            [ 2] 2033 	ldw (y),x 
      000C0D 72 A9 00 02      [ 2] 2034 	addw y,#2
      000C11                       2035 	_drop VSIZE  
      000C11 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C13 81               [ 4] 2036 	ret 	
                                   2037 
                                   2038 ;-------------------------
                                   2039 ; binary integer parser
                                   2040 ; build integer in acc24  
                                   2041 ; input:
                                   2042 ;   X 		point to output buffer  
                                   2043 ;   Y 		point to tib 
                                   2044 ;   A 	    '&' 
                                   2045 ; output:  
                                   2046 ;   buffer  TK_INTGR integer  
                                   2047 ;   X 		int16 
                                   2048 ;   A 		TK_INTGR
                                   2049 ;   acc24    int24 
                                   2050 ;-------------------------
                           000001  2051 	BINARY=1 ; 24 bits integer 
                           000003  2052 	VSIZE=3
      000C14                       2053 parse_binary: ; { -- n }
      000C14 4B 00            [ 1] 2054 	push #0
      000C16 4B 00            [ 1] 2055 	push #0
      000C18 4B 00            [ 1] 2056 	push #0
      000C1A                       2057 2$:	
      000C1A 91 D6 00         [ 4] 2058 	ld a,([in.w],y)
      000C1D 72 5C 00 01      [ 1] 2059 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C21 A1 30            [ 1] 2060 	cp a,#'0 
      000C23 27 06            [ 1] 2061 	jreq 3$
      000C25 A1 31            [ 1] 2062 	cp a,#'1 
      000C27 27 02            [ 1] 2063 	jreq 3$ 
      000C29 20 0B            [ 2] 2064 	jra bin_exit 
      000C2B A0 30            [ 1] 2065 3$: sub a,#'0 
      000C2D 46               [ 1] 2066 	rrc a
      000C2E 09 03            [ 1] 2067 	rlc (BINARY+2,sp) 
      000C30 09 02            [ 1] 2068 	rlc (BINARY+1,sp)
      000C32 09 01            [ 1] 2069 	rlc (BINARY,sp) 
      000C34 20 E4            [ 2] 2070 	jra 2$  
      000C36                       2071 bin_exit:
      000C36 72 5A 00 01      [ 1] 2072 	dec in 
      000C3A 90 93            [ 1] 2073 	ldw y,x
      000C3C 7B 01            [ 1] 2074 	ld a,(BINARY,sp)
      000C3E C7 00 0B         [ 1] 2075 	ld acc24,a 
      000C41 1E 02            [ 2] 2076 	ldw x,(BINARY+1,sp)
      000C43 CF 00 0C         [ 2] 2077 	ldw acc16,x
      000C46 90 FF            [ 2] 2078 	ldw (y),x 
      000C48 72 A9 00 02      [ 2] 2079 	addw y,#2  
      000C4C A6 84            [ 1] 2080 	ld a,#TK_INTGR 	
      000C4E                       2081 	_drop VSIZE 
      000C4E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000C50 81               [ 4] 2082 	ret
                                   2083 
                                   2084 ;---------------------------
                                   2085 ;  token begin with a letter,
                                   2086 ;  is keyword or variable. 	
                                   2087 ; input:
                                   2088 ;   X 		point to pad 
                                   2089 ;   Y 		point to text
                                   2090 ;   A 	    first letter  
                                   2091 ; output:
                                   2092 ;   X		exec_addr|var_addr 
                                   2093 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   2094 ;   pad 	keyword|var_name  
                                   2095 ;--------------------------  
                           000001  2096 	XFIRST=1
                           000002  2097 	VSIZE=2
      000C51                       2098 parse_keyword: 
      000C51 89               [ 2] 2099 	pushw x 
      000C52                       2100 kw_loop:	
      000C52 CD 0E 5D         [ 4] 2101 	call to_upper 
      000C55 F7               [ 1] 2102 	ld (x),a 
      000C56 5C               [ 1] 2103 	incw x 
      000C57 91 D6 00         [ 4] 2104 	ld a,([in.w],y)
      000C5A 72 5C 00 01      [ 1] 2105 	inc in 
      000C5E CD 06 0F         [ 4] 2106 	call is_alpha 
      000C61 25 EF            [ 1] 2107 	jrc kw_loop
      000C63 72 5A 00 01      [ 1] 2108 	dec in   
      000C67 7F               [ 1] 2109 1$: clr (x)
      000C68 1E 01            [ 2] 2110 	ldw x,(XFIRST,sp) 
      000C6A E6 01            [ 1] 2111 	ld a,(1,x)
      000C6C 26 13            [ 1] 2112 	jrne 2$
                                   2113 ; one letter variable name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C6E F6               [ 1] 2114 	ld a,(x) 
      000C6F A0 41            [ 1] 2115 	sub a,#'A 
      000C71 48               [ 1] 2116 	sll a 
      000C72 88               [ 1] 2117 	push a 
      000C73 4B 00            [ 1] 2118 	push #0
      000C75 AE 00 39         [ 2] 2119 	ldw x,#vars 
      000C78 72 FB 01         [ 2] 2120 	addw x,(1,sp) ; X=var address 
      000C7B                       2121 	_drop 2 
      000C7B 5B 02            [ 2]    1     addw sp,#2 
      000C7D A6 85            [ 1] 2122 	ld a,#TK_VAR 
      000C7F 20 0E            [ 2] 2123 	jra 4$ 
      000C81                       2124 2$: ; check for keyword, otherwise syntax error.
      000C81                       2125 	_ldx_dict kword_dict ; dictionary entry point
      000C81 AE 28 9E         [ 2]    1     ldw x,#kword_dict+2
      000C84 16 01            [ 2] 2126 	ldw y,(XFIRST,sp) ; name to search for
      000C86 CD 10 95         [ 4] 2127 	call search_dict
      000C89 4D               [ 1] 2128 	tnz a
      000C8A 26 03            [ 1] 2129 	jrne 4$ 
      000C8C CC 09 1C         [ 2] 2130 	jp syntax_error
      000C8F                       2131 4$:	
      000C8F 16 01            [ 2] 2132 	ldw y,(XFIRST,sp)
      000C91 90 F7            [ 1] 2133 	ld (y),a 
      000C93 90 5C            [ 1] 2134 	incw y 
      000C95 90 FF            [ 2] 2135 	ldw (y),x
      000C97 72 A9 00 02      [ 2] 2136 	addw y,#2  
      000C9B                       2137 	_drop VSIZE 
      000C9B 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C9D 81               [ 4] 2138 	ret  	
                                   2139 
                                   2140 
                                   2141 ;------------------------------------
                                   2142 ; scan text for next token
                                   2143 ; input: 
                                   2144 ;	X 		pointer to buffer where 
                                   2145 ;	        token id and value are copied 
                                   2146 ; use:
                                   2147 ;	Y   pointer to text in tib 
                                   2148 ; output:
                                   2149 ;   A       token attribute 
                                   2150 ;   X 		token value
                                   2151 ;   Y       updated position in output buffer   
                                   2152 ;------------------------------------
                                   2153 	; use to check special character 
                                   2154 	.macro _case c t  
                                   2155 	ld a,#c 
                                   2156 	cp a,(TCHAR,sp) 
                                   2157 	jrne t
                                   2158 	.endm 
                                   2159 
                           000001  2160 	TCHAR=1
                           000002  2161 	ATTRIB=2
                           000002  2162 	VSIZE=2
      000C9E                       2163 get_token: 
      000C9E                       2164 	_vars VSIZE
      000C9E 52 02            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2165 ;	ld a,in 
                                   2166 ;	sub a,count
                                   2167 ;   jrmi 0$
                                   2168 ;	clr a 
                                   2169 ;	ret 
      000CA0                       2170 0$: 
      000CA0 90 AE 16 90      [ 2] 2171 	ldw y,#tib    	
      000CA4 A6 20            [ 1] 2172 	ld a,#SPACE
      000CA6 CD 0E D3         [ 4] 2173 	call skip
      000CA9 55 00 01 00 02   [ 1] 2174 	mov in.saved,in 
      000CAE 91 D6 00         [ 4] 2175 	ld a,([in.w],y)
      000CB1 26 05            [ 1] 2176 	jrne 1$
      000CB3 90 93            [ 1] 2177 	ldw y,x 
      000CB5 CC 0E 5A         [ 2] 2178 	jp token_exit ; end of line 
      000CB8 72 5C 00 01      [ 1] 2179 1$:	inc in 
      000CBC CD 0E 5D         [ 4] 2180 	call to_upper 
      000CBF 6B 01            [ 1] 2181 	ld (TCHAR,sp),a 
                                   2182 ; check for quoted string
      000CC1                       2183 str_tst:  	
      000CC1                       2184 	_case '"' nbr_tst
      000CC1 A6 22            [ 1]    1 	ld a,#'"' 
      000CC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC5 26 0A            [ 1]    3 	jrne nbr_tst
      000CC7 A6 02            [ 1] 2185 	ld a,#TK_QSTR
      000CC9 F7               [ 1] 2186 	ld (x),a 
      000CCA 5C               [ 1] 2187 	incw x 
      000CCB CD 0B 75         [ 4] 2188 	call parse_quote
      000CCE CC 0E 5A         [ 2] 2189 	jp token_exit
      000CD1                       2190 nbr_tst:
                                   2191 ; check for hexadecimal number 
      000CD1 A6 24            [ 1] 2192 	ld a,#'$'
      000CD3 11 01            [ 1] 2193 	cp a,(TCHAR,sp) 
      000CD5 27 17            [ 1] 2194 	jreq 1$
                                   2195 ;check for binary number 
      000CD7 A6 26            [ 1] 2196 	ld a,#'&
      000CD9 11 01            [ 1] 2197 	cp a,(TCHAR,sp)
      000CDB 26 0A            [ 1] 2198 	jrne 0$
      000CDD A6 84            [ 1] 2199 	ld a,#TK_INTGR
      000CDF F7               [ 1] 2200 	ld (x),a 
      000CE0 5C               [ 1] 2201 	incw x 
      000CE1 CD 0C 14         [ 4] 2202 	call parse_binary ; expect binary integer 
      000CE4 CC 0E 5A         [ 2] 2203 	jp token_exit 
                                   2204 ; check for decimal number 	
      000CE7 7B 01            [ 1] 2205 0$:	ld a,(TCHAR,sp)
      000CE9 CD 06 20         [ 4] 2206 	call is_digit
      000CEC 24 0C            [ 1] 2207 	jrnc 3$
      000CEE A6 84            [ 1] 2208 1$:	ld a,#TK_INTGR 
      000CF0 F7               [ 1] 2209 	ld (x),a 
      000CF1 5C               [ 1] 2210 	incw x 
      000CF2 7B 01            [ 1] 2211 	ld a,(TCHAR,sp)
      000CF4 CD 0B CA         [ 4] 2212 	call parse_integer 
      000CF7 CC 0E 5A         [ 2] 2213 	jp token_exit 
      000CFA                       2214 3$: 
      000CFA                       2215 	_case '(' bkslsh_tst 
      000CFA A6 28            [ 1]    1 	ld a,#'(' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000CFC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CFE 26 05            [ 1]    3 	jrne bkslsh_tst
      000D00 A6 07            [ 1] 2216 	ld a,#TK_LPAREN
      000D02 CC 0E 56         [ 2] 2217 	jp token_char   	
      000D05                       2218 bkslsh_tst: ; character token 
      000D05                       2219 	_case '\',rparnt_tst
      000D05 A6 5C            [ 1]    1 	ld a,#'\' 
      000D07 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D09 26 16            [ 1]    3 	jrne rparnt_tst
      000D0B A6 03            [ 1] 2220 	ld a,#TK_CHAR 
      000D0D F7               [ 1] 2221 	ld (x),a 
      000D0E 5C               [ 1] 2222 	incw x 
      000D0F 91 D6 00         [ 4] 2223 	ld a,([in.w],y)
      000D12 F7               [ 1] 2224 	ld (x),a 
      000D13 5C               [ 1] 2225 	incw x
      000D14 90 93            [ 1] 2226 	ldw y,x 	 
      000D16 72 5C 00 01      [ 1] 2227 	inc in  
      000D1A 5F               [ 1] 2228 	clrw x 
      000D1B 97               [ 1] 2229 	ld xl,a 
      000D1C A6 03            [ 1] 2230 	ld a,#TK_CHAR 
      000D1E CC 0E 5A         [ 2] 2231 	jp token_exit 
      000D21                       2232 rparnt_tst:		
      000D21                       2233 	_case ')' colon_tst 
      000D21 A6 29            [ 1]    1 	ld a,#')' 
      000D23 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D25 26 05            [ 1]    3 	jrne colon_tst
      000D27 A6 08            [ 1] 2234 	ld a,#TK_RPAREN 
      000D29 CC 0E 56         [ 2] 2235 	jp token_char
      000D2C                       2236 colon_tst:
      000D2C                       2237 	_case ':' comma_tst 
      000D2C A6 3A            [ 1]    1 	ld a,#':' 
      000D2E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D30 26 05            [ 1]    3 	jrne comma_tst
      000D32 A6 01            [ 1] 2238 	ld a,#TK_COLON 
      000D34 CC 0E 56         [ 2] 2239 	jp token_char  
      000D37                       2240 comma_tst:
      000D37                       2241 	_case COMMA sharp_tst 
      000D37 A6 2C            [ 1]    1 	ld a,#COMMA 
      000D39 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3B 26 05            [ 1]    3 	jrne sharp_tst
      000D3D A6 09            [ 1] 2242 	ld a,#TK_COMMA
      000D3F CC 0E 56         [ 2] 2243 	jp token_char
      000D42                       2244 sharp_tst:
      000D42                       2245 	_case SHARP dash_tst 
      000D42 A6 23            [ 1]    1 	ld a,#SHARP 
      000D44 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D46 26 05            [ 1]    3 	jrne dash_tst
      000D48 A6 0A            [ 1] 2246 	ld a,#TK_SHARP
      000D4A CC 0E 56         [ 2] 2247 	jp token_char  	 	 
      000D4D                       2248 dash_tst: 	
      000D4D                       2249 	_case '-' at_tst 
      000D4D A6 2D            [ 1]    1 	ld a,#'-' 
      000D4F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D51 26 05            [ 1]    3 	jrne at_tst
      000D53 A6 11            [ 1] 2250 	ld a,#TK_MINUS  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D55 CC 0E 56         [ 2] 2251 	jp token_char 
      000D58                       2252 at_tst:
      000D58                       2253 	_case '@' qmark_tst 
      000D58 A6 40            [ 1]    1 	ld a,#'@' 
      000D5A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5C 26 05            [ 1]    3 	jrne qmark_tst
      000D5E A6 06            [ 1] 2254 	ld a,#TK_ARRAY 
      000D60 CC 0E 56         [ 2] 2255 	jp token_char
      000D63                       2256 qmark_tst:
      000D63                       2257 	_case '?' tick_tst 
      000D63 A6 3F            [ 1]    1 	ld a,#'?' 
      000D65 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D67 26 12            [ 1]    3 	jrne tick_tst
      000D69 A6 80            [ 1] 2258 	ld a,#TK_CMD  
      000D6B F7               [ 1] 2259 	ld (x),a 
      000D6C 5C               [ 1] 2260 	incw x 
      000D6D 90 93            [ 1] 2261 	ldw y,x 
      000D6F AE 00 74         [ 2] 2262 	ldw x,#PRT_IDX 
      000D72 90 FF            [ 2] 2263 	ldw (y),x 
      000D74 72 A9 00 02      [ 2] 2264 	addw y,#2
      000D78 CC 0E 5A         [ 2] 2265 	jp token_exit
      000D7B                       2266 tick_tst: ; comment 
      000D7B                       2267 	_case TICK plus_tst 
      000D7B A6 27            [ 1]    1 	ld a,#TICK 
      000D7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7F 26 35            [ 1]    3 	jrne plus_tst
      000D81 A6 80            [ 1] 2268 	ld a,#TK_CMD
      000D83 F7               [ 1] 2269 	ld (x),a 
      000D84 5C               [ 1] 2270 	incw x
      000D85 90 AE 00 8E      [ 2] 2271 	ldw y,#REM_IDX
      000D89 FF               [ 2] 2272 	ldw (x),y 
      000D8A 1C 00 02         [ 2] 2273 	addw x,#2  
      000D8D                       2274 copy_comment:
      000D8D 90 AE 16 90      [ 2] 2275 	ldw y,#tib 
      000D91 72 B9 00 00      [ 2] 2276 	addw y,in.w
      000D95 90 89            [ 2] 2277 	pushw y
      000D97 CD 04 50         [ 4] 2278 	call strcpy
      000D9A 72 F2 01         [ 2] 2279     subw y,(1,sp)
      000D9D 90 9F            [ 1] 2280 	ld a,yl 
      000D9F CB 00 01         [ 1] 2281 	add a,in
      000DA2 C7 00 01         [ 1] 2282 	ld in,a 
      000DA5 1F 01            [ 2] 2283 	ldw (1,sp),x
      000DA7 72 F9 01         [ 2] 2284 	addw y,(1,sp)
      000DAA 90 5C            [ 1] 2285 	incw y 
      000DAC                       2286 	_drop 2 
      000DAC 5B 02            [ 2]    1     addw sp,#2 
      000DAE AE 00 8E         [ 2] 2287 	ldw x,#REM_IDX 
      000DB1 A6 80            [ 1] 2288 	ld a,#TK_CMD 
      000DB3 CC 0E 5A         [ 2] 2289 	jp token_exit 
      000DB6                       2290 plus_tst:
      000DB6                       2291 	_case '+' star_tst 
      000DB6 A6 2B            [ 1]    1 	ld a,#'+' 
      000DB8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DBA 26 05            [ 1]    3 	jrne star_tst
      000DBC A6 10            [ 1] 2292 	ld a,#TK_PLUS  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DBE CC 0E 56         [ 2] 2293 	jp token_char 
      000DC1                       2294 star_tst:
      000DC1                       2295 	_case '*' slash_tst 
      000DC1 A6 2A            [ 1]    1 	ld a,#'*' 
      000DC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC5 26 05            [ 1]    3 	jrne slash_tst
      000DC7 A6 20            [ 1] 2296 	ld a,#TK_MULT 
      000DC9 CC 0E 56         [ 2] 2297 	jp token_char 
      000DCC                       2298 slash_tst: 
      000DCC                       2299 	_case '/' prcnt_tst 
      000DCC A6 2F            [ 1]    1 	ld a,#'/' 
      000DCE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD0 26 05            [ 1]    3 	jrne prcnt_tst
      000DD2 A6 21            [ 1] 2300 	ld a,#TK_DIV 
      000DD4 CC 0E 56         [ 2] 2301 	jp token_char 
      000DD7                       2302 prcnt_tst:
      000DD7                       2303 	_case '%' eql_tst 
      000DD7 A6 25            [ 1]    1 	ld a,#'%' 
      000DD9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DDB 26 05            [ 1]    3 	jrne eql_tst
      000DDD A6 22            [ 1] 2304 	ld a,#TK_MOD
      000DDF CC 0E 56         [ 2] 2305 	jp token_char  
                                   2306 ; 1 or 2 character tokens 	
      000DE2                       2307 eql_tst:
      000DE2                       2308 	_case '=' gt_tst 		
      000DE2 A6 3D            [ 1]    1 	ld a,#'=' 
      000DE4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE6 26 05            [ 1]    3 	jrne gt_tst
      000DE8 A6 32            [ 1] 2309 	ld a,#TK_EQUAL
      000DEA CC 0E 56         [ 2] 2310 	jp token_char 
      000DED                       2311 gt_tst:
      000DED                       2312 	_case '>' lt_tst 
      000DED A6 3E            [ 1]    1 	ld a,#'>' 
      000DEF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF1 26 23            [ 1]    3 	jrne lt_tst
      000DF3 A6 31            [ 1] 2313 	ld a,#TK_GT 
      000DF5 6B 02            [ 1] 2314 	ld (ATTRIB,sp),a 
      000DF7 91 D6 00         [ 4] 2315 	ld a,([in.w],y)
      000DFA 72 5C 00 01      [ 1] 2316 	inc in 
      000DFE A1 3D            [ 1] 2317 	cp a,#'=
      000E00 26 04            [ 1] 2318 	jrne 1$
      000E02 A6 33            [ 1] 2319 	ld a,#TK_GE 
      000E04 20 50            [ 2] 2320 	jra token_char  
      000E06 A1 3C            [ 1] 2321 1$: cp a,#'<
      000E08 26 04            [ 1] 2322 	jrne 2$
      000E0A A6 35            [ 1] 2323 	ld a,#TK_NE 
      000E0C 20 48            [ 2] 2324 	jra token_char 
      000E0E 72 5A 00 01      [ 1] 2325 2$: dec in
      000E12 7B 02            [ 1] 2326 	ld a,(ATTRIB,sp)
      000E14 20 40            [ 2] 2327 	jra token_char 	 
      000E16                       2328 lt_tst:
      000E16                       2329 	_case '<' other
      000E16 A6 3C            [ 1]    1 	ld a,#'<' 
      000E18 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E1A 26 23            [ 1]    3 	jrne other
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E1C A6 34            [ 1] 2330 	ld a,#TK_LT 
      000E1E 6B 02            [ 1] 2331 	ld (ATTRIB,sp),a 
      000E20 91 D6 00         [ 4] 2332 	ld a,([in.w],y)
      000E23 72 5C 00 01      [ 1] 2333 	inc in 
      000E27 A1 3D            [ 1] 2334 	cp a,#'=
      000E29 26 04            [ 1] 2335 	jrne 1$
      000E2B A6 36            [ 1] 2336 	ld a,#TK_LE 
      000E2D 20 27            [ 2] 2337 	jra token_char 
      000E2F A1 3E            [ 1] 2338 1$: cp a,#'>
      000E31 26 04            [ 1] 2339 	jrne 2$
      000E33 A6 35            [ 1] 2340 	ld a,#TK_NE 
      000E35 20 1F            [ 2] 2341 	jra token_char 
      000E37 72 5A 00 01      [ 1] 2342 2$: dec in 
      000E3B 7B 02            [ 1] 2343 	ld a,(ATTRIB,sp)
      000E3D 20 17            [ 2] 2344 	jra token_char 	
      000E3F                       2345 other: ; not a special character 	 
      000E3F 7B 01            [ 1] 2346 	ld a,(TCHAR,sp)
      000E41 CD 06 0F         [ 4] 2347 	call is_alpha 
      000E44 25 03            [ 1] 2348 	jrc 30$ 
      000E46 CC 09 1C         [ 2] 2349 	jp syntax_error 
      000E49                       2350 30$: 
      000E49 CD 0C 51         [ 4] 2351 	call parse_keyword
      000E4C A3 16 D2         [ 2] 2352 	cpw x,#remark 
      000E4F 26 09            [ 1] 2353 	jrne token_exit 
      000E51 90 93            [ 1] 2354 	ldw y,x 
      000E53 CC 0D 8D         [ 2] 2355 	jp copy_comment 
      000E56                       2356 token_char:
      000E56 F7               [ 1] 2357 	ld (x),a 
      000E57 5C               [ 1] 2358 	incw x
      000E58 90 93            [ 1] 2359 	ldw y,x 
      000E5A                       2360 token_exit:
      000E5A                       2361 	_drop VSIZE 
      000E5A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E5C 81               [ 4] 2362 	ret
                                   2363 
                                   2364 
                                   2365 ;------------------------------------
                                   2366 ; convert alpha to uppercase
                                   2367 ; input:
                                   2368 ;    a  character to convert
                                   2369 ; output:
                                   2370 ;    a  uppercase character
                                   2371 ;------------------------------------
      000E5D                       2372 to_upper::
      000E5D A1 61            [ 1] 2373 	cp a,#'a
      000E5F 2A 01            [ 1] 2374 	jrpl 1$
      000E61 81               [ 4] 2375 0$:	ret
      000E62 A1 7A            [ 1] 2376 1$: cp a,#'z	
      000E64 22 FB            [ 1] 2377 	jrugt 0$
      000E66 A0 20            [ 1] 2378 	sub a,#32
      000E68 81               [ 4] 2379 	ret
                                   2380 	
                                   2381 ;------------------------------------
                                   2382 ; convert pad content in integer
                                   2383 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2384 ;    x		.asciz to convert
                                   2385 ; output:
                                   2386 ;    acc24      int24_t
                                   2387 ;------------------------------------
                                   2388 	; local variables
                           000001  2389 	SIGN=1 ; 1 byte, 
                           000002  2390 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2391 	TEMP=3 ; 1 byte, temporary storage
                           000003  2392 	VSIZE=3 ; 3 bytes reserved for local storage
      000E69                       2393 atoi24::
      000E69 89               [ 2] 2394 	pushw x 
      000E6A                       2395 	_vars VSIZE
      000E6A 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2396 	; acc24=0 
      000E6C 72 5F 00 0B      [ 1] 2397 	clr acc24    
      000E70 72 5F 00 0C      [ 1] 2398 	clr acc16
      000E74 72 5F 00 0D      [ 1] 2399 	clr acc8 
      000E78 0F 01            [ 1] 2400 	clr (SIGN,sp)
      000E7A A6 0A            [ 1] 2401 	ld a,#10
      000E7C 6B 02            [ 1] 2402 	ld (BASE,sp),a ; default base decimal
      000E7E F6               [ 1] 2403 	ld a,(x)
      000E7F 27 47            [ 1] 2404 	jreq 9$  ; completed if 0
      000E81 A1 2D            [ 1] 2405 	cp a,#'-
      000E83 26 04            [ 1] 2406 	jrne 1$
      000E85 03 01            [ 1] 2407 	cpl (SIGN,sp)
      000E87 20 08            [ 2] 2408 	jra 2$
      000E89 A1 24            [ 1] 2409 1$: cp a,#'$
      000E8B 26 06            [ 1] 2410 	jrne 3$
      000E8D A6 10            [ 1] 2411 	ld a,#16
      000E8F 6B 02            [ 1] 2412 	ld (BASE,sp),a
      000E91 5C               [ 1] 2413 2$:	incw x
      000E92 F6               [ 1] 2414 	ld a,(x)
      000E93                       2415 3$:	
      000E93 A1 61            [ 1] 2416 	cp a,#'a
      000E95 2B 02            [ 1] 2417 	jrmi 4$
      000E97 A0 20            [ 1] 2418 	sub a,#32
      000E99 A1 30            [ 1] 2419 4$:	cp a,#'0
      000E9B 2B 2B            [ 1] 2420 	jrmi 9$
      000E9D A0 30            [ 1] 2421 	sub a,#'0
      000E9F A1 0A            [ 1] 2422 	cp a,#10
      000EA1 2B 06            [ 1] 2423 	jrmi 5$
      000EA3 A0 07            [ 1] 2424 	sub a,#7
      000EA5 11 02            [ 1] 2425 	cp a,(BASE,sp)
      000EA7 2A 1F            [ 1] 2426 	jrpl 9$
      000EA9 6B 03            [ 1] 2427 5$:	ld (TEMP,sp),a
      000EAB 7B 02            [ 1] 2428 	ld a,(BASE,sp)
      000EAD CD 0B 18         [ 4] 2429 	call mulu24_8
      000EB0 7B 03            [ 1] 2430 	ld a,(TEMP,sp)
      000EB2 CB 00 0D         [ 1] 2431 	add a,acc24+2
      000EB5 C7 00 0D         [ 1] 2432 	ld acc24+2,a
      000EB8 4F               [ 1] 2433 	clr a
      000EB9 C9 00 0C         [ 1] 2434 	adc a,acc24+1
      000EBC C7 00 0C         [ 1] 2435 	ld acc24+1,a
      000EBF 4F               [ 1] 2436 	clr a
      000EC0 C9 00 0B         [ 1] 2437 	adc a,acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EC3 C7 00 0B         [ 1] 2438 	ld acc24,a
      000EC6 20 C9            [ 2] 2439 	jra 2$
      000EC8 0D 01            [ 1] 2440 9$:	tnz (SIGN,sp)
      000ECA 27 03            [ 1] 2441     jreq atoi_exit
      000ECC CD 0B 52         [ 4] 2442     call neg_acc24
      000ECF                       2443 atoi_exit: 
      000ECF                       2444 	_drop VSIZE
      000ECF 5B 03            [ 2]    1     addw sp,#VSIZE 
      000ED1 85               [ 2] 2445 	popw x ; restore x
      000ED2 81               [ 4] 2446 	ret
                                   2447 
                                   2448 
                                   2449 ;------------------------------------
                                   2450 ; skip character c in text starting from 'in'
                                   2451 ; input:
                                   2452 ;	 y 		point to text buffer
                                   2453 ;    a 		character to skip
                                   2454 ; output:  
                                   2455 ;	'in' ajusted to new position
                                   2456 ;------------------------------------
                           000001  2457 	C = 1 ; local var
      000ED3                       2458 skip:
      000ED3 88               [ 1] 2459 	push a
      000ED4 91 D6 00         [ 4] 2460 1$:	ld a,([in.w],y)
      000ED7 27 0A            [ 1] 2461 	jreq 2$
      000ED9 11 01            [ 1] 2462 	cp a,(C,sp)
      000EDB 26 06            [ 1] 2463 	jrne 2$
      000EDD 72 5C 00 01      [ 1] 2464 	inc in
      000EE1 20 F1            [ 2] 2465 	jra 1$
      000EE3                       2466 2$: _drop 1 
      000EE3 5B 01            [ 2]    1     addw sp,#1 
      000EE5 81               [ 4] 2467 	ret
                                   2468 	
                                   2469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2470 ;;   TINY BASIC  operators,
                                   2471 ;;   commands and functions 
                                   2472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2473 
                                   2474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2475 ;;  Arithmetic operators
                                   2476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2477 
                                   2478 ;debug support
                           000001  2479 DEBUG_PRT=1
                           000001  2480 .if DEBUG_PRT 
                           000001  2481 	REGA=1
                           000002  2482 	SAVEB=2
                           000003  2483 	REGX=3
                           000005  2484 	REGY=5
                           000007  2485 	ACC24=7
                           000009  2486 	VSIZE=9 
      000EE6                       2487 printxy:
      000EE6                       2488 	_vars VSIZE 
      000EE6 52 09            [ 2]    1     sub sp,#VSIZE 
      000EE8 6B 01            [ 1] 2489 	ld (REGA,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EEA C6 00 0A         [ 1] 2490 	ld a,base 
      000EED 6B 02            [ 1] 2491 	ld (SAVEB,sp),a
      000EEF 1F 03            [ 2] 2492 	ldw (REGX,sp),x
      000EF1 17 05            [ 2] 2493 	ldw (REGY,sp),y
      000EF3 CE 00 0B         [ 2] 2494 	ldw x,acc24 
      000EF6 C6 00 0D         [ 1] 2495 	ld a,acc8 
      000EF9 1F 07            [ 2] 2496 	ldw (ACC24,sp),x 
      000EFB 6B 09            [ 1] 2497 	ld (ACC24+2,sp),a 
      000EFD 35 10 00 0A      [ 1] 2498 	mov base,#16 
      000F01 5F               [ 1] 2499 	clrw x 
      000F02 7B 01            [ 1] 2500 	ld a,(REGA,sp)
      000F04 97               [ 1] 2501 	ld xl,a 
      000F05 CD 0A 6F         [ 4] 2502 	call print_int
      000F08 A6 20            [ 1] 2503 	ld a,#SPACE 
      000F0A CD 03 2B         [ 4] 2504 	call putc  
      000F0D 1E 03            [ 2] 2505 	ldw x,(REGX,sp)
      000F0F CD 0A 6F         [ 4] 2506 	call print_int 
      000F12 A6 20            [ 1] 2507 	ld a,#SPACE 
      000F14 CD 03 2B         [ 4] 2508 	call putc  
      000F17 1E 05            [ 2] 2509 	ldw x,(REGY,sp)
      000F19 CD 0A 6F         [ 4] 2510 	call print_int 
      000F1C A6 0D            [ 1] 2511 	ld a,#CR 
      000F1E CD 03 2B         [ 4] 2512 	call putc 
      000F21 7B 09            [ 1] 2513 	ld a,(ACC24+2,sp)
      000F23 1E 07            [ 2] 2514 	ldw x,(ACC24,sp)
      000F25 CF 00 0B         [ 2] 2515 	ldw acc24,x 
      000F28 C7 00 0D         [ 1] 2516 	ld acc8,a
      000F2B 7B 02            [ 1] 2517 	ld a,(SAVEB,sp)
      000F2D C7 00 0A         [ 1] 2518 	ld base,a 
      000F30 7B 01            [ 1] 2519 	ld a,(REGA,sp)
      000F32 1E 03            [ 2] 2520 	ldw x,(REGX,sp)
      000F34 16 05            [ 2] 2521 	ldw y,(REGY,sp)
      000F36                       2522 	_drop VSIZE 
      000F36 5B 09            [ 2]    1     addw sp,#VSIZE 
      000F38 81               [ 4] 2523 	ret 
                                   2524 .endif 
                                   2525 
                                   2526 
                                   2527 ;--------------------------------------
                                   2528 ;  multiply 2 uint16_t return uint32_t
                                   2529 ;  input:
                                   2530 ;     x       uint16_t 
                                   2531 ;     y       uint16_t 
                                   2532 ;  output:
                                   2533 ;     x       product bits 15..0
                                   2534 ;     y       product bits 31..16 
                                   2535 ;---------------------------------------
                           000001  2536 		U1=1  ; uint16_t 
                           000003  2537 		DBL=3 ; uint32_t
                           000006  2538 		VSIZE=6
      000F39                       2539 umstar:
      000F39                       2540 	_vars VSIZE 
      000F39 52 06            [ 2]    1     sub sp,#VSIZE 
      000F3B 1F 01            [ 2] 2541 	ldw (U1,sp),x 
                                   2542 ;initialize bits 31..16 of 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2543 ;product to zero 
      000F3D 0F 03            [ 1] 2544 	clr (DBL,sp)
      000F3F 0F 04            [ 1] 2545 	clr (DBL+1,sp)
                                   2546 ; produc U1L*U2L 
      000F41 90 9F            [ 1] 2547 	ld a,yl 
      000F43 42               [ 4] 2548 	mul x,a 
      000F44 1F 05            [ 2] 2549 	ldw (DBL+2,sp),x
                                   2550 ; product U1H*U2L 
      000F46 7B 01            [ 1] 2551 	ld a,(U1,sp) ; xh 
      000F48 93               [ 1] 2552 	ldw x,y
      000F49 42               [ 4] 2553 	mul x,a 
      000F4A 4F               [ 1] 2554 	clr a 
      000F4B 72 FB 04         [ 2] 2555 	addw x,(DBL+1,sp) 
      000F4E 4F               [ 1] 2556 	clr a 
      000F4F 19 03            [ 1] 2557 	adc a,(DBL,sp) 
      000F51 6B 03            [ 1] 2558 	ld (DBL,sp),a ; bits 23..17 
      000F53 1F 04            [ 2] 2559 	ldw (DBL+1,sp),x ; bits 15..0 
                                   2560 ; product U1L*U2H
      000F55 90 5E            [ 1] 2561 	swapw y 
      000F57 93               [ 1] 2562 	ldw x,y
      000F58 7B 02            [ 1] 2563 	ld a,(U1+1,sp)
      000F5A 42               [ 4] 2564 	mul x,a
      000F5B 72 FB 04         [ 2] 2565 	addw x,(DBL+1,sp)
      000F5E 4F               [ 1] 2566 	clr a 
      000F5F 19 03            [ 1] 2567 	adc a,(DBL,sp)
      000F61 6B 03            [ 1] 2568 	ld (DBL,sp),a 
      000F63 1F 04            [ 2] 2569 	ldw (DBL+1,sp),x 
                                   2570 ; product U1H*U2H 	
      000F65 7B 01            [ 1] 2571 	ld a,(U1,sp)
      000F67 93               [ 1] 2572 	ldw x,y  
      000F68 42               [ 4] 2573 	mul x,a 
      000F69 72 FB 03         [ 2] 2574 	addw x,(DBL,sp)
      000F6C 90 93            [ 1] 2575 	ldw y,x 
      000F6E 1E 05            [ 2] 2576 	ldw x,(DBL+2,sp)
      000F70                       2577 	_drop VSIZE 
      000F70 5B 06            [ 2]    1     addw sp,#VSIZE 
      000F72 81               [ 4] 2578 	ret
                                   2579 
                                   2580 
                                   2581 ;-------------------------------------
                                   2582 ; multiply 2 integers
                                   2583 ; input:
                                   2584 ;  	x       n1 
                                   2585 ;   y 		n2 
                                   2586 ; output:
                                   2587 ;	X        N1*N2 bits 15..0
                                   2588 ;   Y        N1*N2 bits 31..16 
                                   2589 ;-------------------------------------
                           000001  2590 	SIGN=1
                           000001  2591 	VSIZE=1
      000F73                       2592 multiply:
      000F73                       2593 	_vars VSIZE 
      000F73 52 01            [ 2]    1     sub sp,#VSIZE 
      000F75 0F 01            [ 1] 2594 	clr (SIGN,sp)
      000F77 9E               [ 1] 2595 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F78 A4 80            [ 1] 2596 	and a,#0x80
      000F7A 2A 03            [ 1] 2597 	jrpl 1$
      000F7C 03 01            [ 1] 2598 	cpl (SIGN,sp)
      000F7E 50               [ 2] 2599 	negw x 
      000F7F                       2600 1$:	
      000F7F 90 9E            [ 1] 2601 	ld a,yh
      000F81 A4 80            [ 1] 2602 	and a,#0x80  
      000F83 2A 04            [ 1] 2603 	jrpl 2$ 
      000F85 03 01            [ 1] 2604 	cpl (SIGN,sp)
      000F87 90 50            [ 2] 2605 	negw y 
      000F89                       2606 2$:	
      000F89 CD 0F 39         [ 4] 2607 	call umstar
      000F8C 7B 01            [ 1] 2608 	ld a,(SIGN,sp)
      000F8E 27 03            [ 1] 2609 	jreq 3$
      000F90 CD 0F C0         [ 4] 2610 	call dneg 
      000F93                       2611 3$:	
      000F93                       2612 	_drop VSIZE 
      000F93 5B 01            [ 2]    1     addw sp,#VSIZE 
      000F95 81               [ 4] 2613 	ret
                                   2614 
                                   2615 ;--------------------------------------
                                   2616 ; divide uint32_t/uint16_t
                                   2617 ; return:  quotient and remainder 
                                   2618 ; quotient expected to be uint16_t 
                                   2619 ; input:
                                   2620 ;   DBLDIVDND    on stack 
                                   2621 ;   X            divisor 
                                   2622 ; output:
                                   2623 ;   X            quotient 
                                   2624 ;   Y            remainder 
                                   2625 ;---------------------------------------
                           000003  2626 	VSIZE=3
      000F96                       2627 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000F96                       2628 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   2629 	; local variables 
                           000001  2630 	DIVISOR=1 
                           000003  2631 	CNTR=3 
      000F96                       2632 udiv32_16:
      000F96                       2633 	_vars VSIZE 
      000F96 52 03            [ 2]    1     sub sp,#VSIZE 
      000F98 1F 01            [ 2] 2634 	ldw (DIVISOR,sp),x	; save divisor 
      000F9A 1E 08            [ 2] 2635 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000F9C 16 06            [ 2] 2636 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000F9E 90 5D            [ 2] 2637 	tnzw y
      000FA0 26 06            [ 1] 2638 	jrne long_division 
      000FA2 16 01            [ 2] 2639 	ldw y,(DIVISOR,sp)
      000FA4 65               [ 2] 2640 	divw x,y
      000FA5                       2641 	_drop VSIZE 
      000FA5 5B 03            [ 2]    1     addw sp,#VSIZE 
      000FA7 81               [ 4] 2642 	ret
      000FA8                       2643 long_division:
      000FA8 51               [ 1] 2644 	exgw x,y ; hi in x, lo in y 
      000FA9 A6 11            [ 1] 2645 	ld a,#17 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FAB 6B 03            [ 1] 2646 	ld (CNTR,sp),a
      000FAD                       2647 1$:
      000FAD 13 01            [ 2] 2648 	cpw x,(DIVISOR,sp)
      000FAF 2B 03            [ 1] 2649 	jrmi 2$
      000FB1 72 F0 01         [ 2] 2650 	subw x,(DIVISOR,sp)
      000FB4 8C               [ 1] 2651 2$:	ccf 
      000FB5 90 59            [ 2] 2652 	rlcw y 
      000FB7 59               [ 2] 2653 	rlcw x 
      000FB8 0A 03            [ 1] 2654 	dec (CNTR,sp)
      000FBA 26 F1            [ 1] 2655 	jrne 1$
      000FBC 51               [ 1] 2656 	exgw x,y 
      000FBD                       2657 	_drop VSIZE 
      000FBD 5B 03            [ 2]    1     addw sp,#VSIZE 
      000FBF 81               [ 4] 2658 	ret
                                   2659 
                                   2660 ;-----------------------------
                                   2661 ; negate double int.
                                   2662 ; input:
                                   2663 ;   x     bits 15..0
                                   2664 ;   y     bits 31..16
                                   2665 ; output: 
                                   2666 ;   x     bits 15..0
                                   2667 ;   y     bits 31..16
                                   2668 ;-----------------------------
      000FC0                       2669 dneg:
      000FC0 53               [ 2] 2670 	cplw x 
      000FC1 90 53            [ 2] 2671 	cplw y 
      000FC3 1C 00 01         [ 2] 2672 	addw x,#1 
      000FC6 24 02            [ 1] 2673 	jrnc 1$
      000FC8 90 5C            [ 1] 2674 	incw y 
      000FCA 81               [ 4] 2675 1$: ret 
                                   2676 
                                   2677 
                                   2678 ;--------------------------------
                                   2679 ; sign extend single to double
                                   2680 ; input:
                                   2681 ;   x    int16_t
                                   2682 ; output:
                                   2683 ;   x    int32_t bits 15..0
                                   2684 ;   y    int32_t bits 31..16
                                   2685 ;--------------------------------
      000FCB                       2686 dbl_sign_extend:
      000FCB 90 5F            [ 1] 2687 	clrw y
      000FCD 9E               [ 1] 2688 	ld a,xh 
      000FCE A4 80            [ 1] 2689 	and a,#0x80 
      000FD0 27 02            [ 1] 2690 	jreq 1$
      000FD2 90 53            [ 2] 2691 	cplw y
      000FD4 81               [ 4] 2692 1$: ret 	
                                   2693 
                                   2694 
                                   2695 ;----------------------------------
                                   2696 ;  euclidian divide dbl/n1 
                                   2697 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   2698 ; input:
                                   2699 ;    dbl    int32_t on stack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2700 ;    x 		n1   int16_t  disivor  
                                   2701 ; output:
                                   2702 ;    X      dbl/x  int16_t 
                                   2703 ;    Y      remainder int16_t 
                                   2704 ;----------------------------------
                           000008  2705 	VSIZE=8
      000FD5                       2706 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000FD5                       2707 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000FD5                       2708 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   2709 	; local variables
                           000001  2710 	DBLHI=1
                           000003  2711 	DBLLO=3 
                           000005  2712 	SDIVSR=5 ; sign divisor
                           000006  2713 	SQUOT=6 ; sign dividend 
                           000007  2714 	DIVISR=7 ; divisor 
      000FD5                       2715 div32_16:
      000FD5                       2716 	_vars VSIZE 
      000FD5 52 08            [ 2]    1     sub sp,#VSIZE 
      000FD7 0F 05            [ 1] 2717 	clr (SDIVSR,sp)
      000FD9 0F 06            [ 1] 2718 	clr (SQUOT,sp)
                                   2719 ; copy arguments 
      000FDB 16 0B            [ 2] 2720 	ldw y,(DIVDNDHI,sp)
      000FDD 17 01            [ 2] 2721 	ldw (DBLHI,sp),y
      000FDF 16 0D            [ 2] 2722 	ldw y,(DIVDNDLO,sp)
      000FE1 17 03            [ 2] 2723 	ldw (DBLLO,sp),y 
                                   2724 ; check for 0 divisor
      000FE3 5D               [ 2] 2725 	tnzw x 
      000FE4 26 05            [ 1] 2726     jrne 0$
      000FE6 A6 04            [ 1] 2727 	ld a,#ERR_DIV0 
      000FE8 CC 09 1E         [ 2] 2728 	jp tb_error 
                                   2729 ; check divisor sign 	
      000FEB 9E               [ 1] 2730 0$:	ld a,xh 
      000FEC A4 80            [ 1] 2731 	and a,#0x80 
      000FEE 27 05            [ 1] 2732 	jreq 1$
      000FF0 03 05            [ 1] 2733 	cpl (SDIVSR,sp)
      000FF2 03 06            [ 1] 2734 	cpl (SQUOT,sp)
      000FF4 50               [ 2] 2735 	negw x
      000FF5 1F 07            [ 2] 2736 1$:	ldw (DIVISR,sp),x
                                   2737 ; check dividend sign 	 
      000FF7 7B 01            [ 1] 2738  	ld a,(DBLHI,sp) 
      000FF9 A4 80            [ 1] 2739 	and a,#0x80 
      000FFB 27 0D            [ 1] 2740 	jreq 2$ 
      000FFD 03 06            [ 1] 2741 	cpl (SQUOT,sp)
      000FFF 1E 03            [ 2] 2742 	ldw x,(DBLLO,sp)
      001001 16 01            [ 2] 2743 	ldw y,(DBLHI,sp)
      001003 CD 0F C0         [ 4] 2744 	call dneg 
      001006 1F 03            [ 2] 2745 	ldw (DBLLO,sp),x 
      001008 17 01            [ 2] 2746 	ldw (DBLHI,sp),y 
      00100A 1E 07            [ 2] 2747 2$:	ldw x,(DIVISR,sp)
      00100C CD 0F 96         [ 4] 2748 	call udiv32_16
      00100F 90 5D            [ 2] 2749 	tnzw y 
      001011 27 11            [ 1] 2750 	jreq 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2751 ; x=quotient 
                                   2752 ; y=remainder 
                                   2753 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      001013 7B 06            [ 1] 2754 	ld a,(SQUOT,sp)
      001015 18 05            [ 1] 2755 	xor a,(SDIVSR,sp)
      001017 27 0B            [ 1] 2756 	jreq 3$
      001019 5C               [ 1] 2757 	incw x 
      00101A 90 CF 00 0C      [ 2] 2758 	ldw acc16,y 
      00101E 16 07            [ 2] 2759 	ldw y,(DIVISR,sp)
      001020 72 B2 00 0C      [ 2] 2760 	subw y,acc16
                                   2761 ; sign quotient
      001024 7B 06            [ 1] 2762 3$:	ld a,(SQUOT,sp)
      001026 27 01            [ 1] 2763 	jreq 4$
      001028 50               [ 2] 2764 	negw x 
      001029                       2765 4$:	
      001029                       2766 	_drop VSIZE 
      001029 5B 08            [ 2]    1     addw sp,#VSIZE 
      00102B 81               [ 4] 2767 	ret 
                                   2768 
                                   2769 
                                   2770 
                                   2771 ;----------------------------------
                                   2772 ; division x/y 
                                   2773 ; input:
                                   2774 ;    X       dividend
                                   2775 ;    Y       divisor 
                                   2776 ; output:
                                   2777 ;    X       quotient
                                   2778 ;    Y       remainder 
                                   2779 ;-----------------------------------
                           000004  2780 	VSIZE=4 
                                   2781 	; local variables 
                           000001  2782 	DBLHI=1
                           000003  2783 	DBLLO=3
      00102C                       2784 divide: 
      00102C                       2785 	_vars VSIZE 
      00102C 52 04            [ 2]    1     sub sp,#VSIZE 
      00102E 90 CF 00 0C      [ 2] 2786 	ldw acc16,y
      001032 CD 0F CB         [ 4] 2787 	call dbl_sign_extend
      001035 1F 03            [ 2] 2788 	ldw (DBLLO,sp),x 
      001037 17 01            [ 2] 2789 	ldw (DBLHI,sp),y 
      001039 CE 00 0C         [ 2] 2790 	ldw x,acc16 
      00103C CD 0F D5         [ 4] 2791 	call div32_16 
      00103F                       2792 	_drop VSIZE 
      00103F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001041 81               [ 4] 2793 	ret
                                   2794 
                                   2795 
                                   2796 ;----------------------------------
                                   2797 ;  remainder resulting from euclidian 
                                   2798 ;  division of x/y 
                                   2799 ; input:
                                   2800 ;   x   	dividend int16_t 
                                   2801 ;   y 		divisor int16_t
                                   2802 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2803 ;   X       n1%n2 
                                   2804 ;----------------------------------
      001042                       2805 modulo:
      001042 CD 10 2C         [ 4] 2806 	call divide
      001045 93               [ 1] 2807 	ldw x,y 
      001046 81               [ 4] 2808 	ret 
                                   2809 
                                   2810 ;----------------------------------
                                   2811 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2812 ; return expr1*expr2/expr3 
                                   2813 ; product result is int32_t and 
                                   2814 ; divisiont is int32_t/int16_t
                                   2815 ;----------------------------------
                           000004  2816 	DBL_SIZE=4 
      001047                       2817 muldiv:
      001047 CD 10 EF         [ 4] 2818 	call func_args 
      00104A A1 03            [ 1] 2819 	cp a,#3 
      00104C 27 03            [ 1] 2820 	jreq 1$
      00104E CC 09 1C         [ 2] 2821 	jp syntax_error
      001051                       2822 1$: 
      001051 1E 05            [ 2] 2823 	ldw x,(5,sp) ; expr1
      001053 16 03            [ 2] 2824 	ldw y,(3,sp) ; expr2
      001055 CD 0F 73         [ 4] 2825 	call multiply 
      001058 1F 05            [ 2] 2826 	ldw (5,sp),x  ;int32_t 15..0
      00105A 17 03            [ 2] 2827 	ldw (3,sp),y  ;int32_t 31..16
      00105C 85               [ 2] 2828 	popw x        ; expr3 
      00105D CD 0F D5         [ 4] 2829 	call div32_16 ; int32_t/expr3 
      001060                       2830 	_drop DBL_SIZE
      001060 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      001062 81               [ 4] 2831 	ret 
                                   2832 
                                   2833 
                                   2834 ;----------------------------------
                                   2835 ; search in kword_dict name
                                   2836 ; from its execution address 
                                   2837 ; input:
                                   2838 ;   X       	cmd_index 
                                   2839 ; output:
                                   2840 ;   X 			cstr*  | 0 
                                   2841 ;--------------------------------
                           000001  2842 	CMDX=1 
                           000003  2843 	LINK=3 
                           000004  2844 	VSIZE=4
      001063                       2845 cmd_name:
      001063                       2846 	_vars VSIZE 
      001063 52 04            [ 2]    1     sub sp,#VSIZE 
      001065 72 5F 00 0C      [ 1] 2847 	clr acc16 
      001069 1F 01            [ 2] 2848 	ldw (CMDX,sp),x  
      00106B AE 28 9C         [ 2] 2849 	ldw x,#kword_dict	
      00106E 1F 03            [ 2] 2850 1$:	ldw (LINK,sp),x
      001070 E6 02            [ 1] 2851 	ld a,(2,x)
      001072 A4 0F            [ 1] 2852 	and a,#15 
      001074 C7 00 0D         [ 1] 2853 	ld acc8,a 
      001077 1C 00 03         [ 2] 2854 	addw x,#3
      00107A 72 BB 00 0C      [ 2] 2855 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00107E FE               [ 2] 2856 	ldw x,(x) ; command index  
      00107F 13 01            [ 2] 2857 	cpw x,(CMDX,sp)
      001081 27 0A            [ 1] 2858 	jreq 2$
      001083 1E 03            [ 2] 2859 	ldw x,(LINK,sp)
      001085 FE               [ 2] 2860 	ldw x,(x) 
      001086 1D 00 02         [ 2] 2861 	subw x,#2  
      001089 26 E3            [ 1] 2862 	jrne 1$
      00108B 20 05            [ 2] 2863 	jra 9$
      00108D 1E 03            [ 2] 2864 2$: ldw x,(LINK,sp)
      00108F 1C 00 02         [ 2] 2865 	addw x,#2 	
      001092                       2866 9$:	_drop VSIZE
      001092 5B 04            [ 2]    1     addw sp,#VSIZE 
      001094 81               [ 4] 2867 	ret
                                   2868 
                                   2869 
                                   2870 ;---------------------------------
                                   2871 ; dictionary search 
                                   2872 ; input:
                                   2873 ;	X 		dictionary entry point, name field  
                                   2874 ;   y		.asciz name to search 
                                   2875 ; output:
                                   2876 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2877 ;  X		cmd_index ; execution address | 0 
                                   2878 ;---------------------------------
                           000001  2879 	NLEN=1 ; cmd length 
                           000002  2880 	XSAVE=2
                           000004  2881 	YSAVE=4
                           000005  2882 	VSIZE=5 
      001095                       2883 search_dict:
      001095                       2884 	_vars VSIZE 
      001095 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2885 
      001097 17 04            [ 2] 2886 	ldw (YSAVE,sp),y 
      001099                       2887 search_next:
      001099 1F 02            [ 2] 2888 	ldw (XSAVE,sp),x 
                                   2889 ; get name length in dictionary	
      00109B F6               [ 1] 2890 	ld a,(x)
      00109C A4 0F            [ 1] 2891 	and a,#0xf 
      00109E 6B 01            [ 1] 2892 	ld (NLEN,sp),a  
      0010A0 16 04            [ 2] 2893 	ldw y,(YSAVE,sp) ; name pointer 
      0010A2 5C               [ 1] 2894 	incw x 
      0010A3                       2895 cp_loop:
      0010A3 90 F6            [ 1] 2896 	ld a,(y)
      0010A5 27 1B            [ 1] 2897 	jreq str_match 
      0010A7 0D 01            [ 1] 2898 	tnz (NLEN,sp)
      0010A9 27 0A            [ 1] 2899 	jreq no_match  
      0010AB F1               [ 1] 2900 	cp a,(x)
      0010AC 26 07            [ 1] 2901 	jrne no_match 
      0010AE 90 5C            [ 1] 2902 	incw y 
      0010B0 5C               [ 1] 2903 	incw x
      0010B1 0A 01            [ 1] 2904 	dec (NLEN,sp)
      0010B3 20 EE            [ 2] 2905 	jra cp_loop 
      0010B5                       2906 no_match:
      0010B5 1E 02            [ 2] 2907 	ldw x,(XSAVE,sp) 
      0010B7 1D 00 02         [ 2] 2908 	subw x,#2 ; move X to link field
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010BA 4B 00            [ 1] 2909 	push #TK_NONE 
      0010BC FE               [ 2] 2910 	ldw x,(x) ; next word link 
      0010BD 84               [ 1] 2911 	pop a ; TK_NONE 
      0010BE 27 1F            [ 1] 2912 	jreq search_exit  ; not found  
                                   2913 ;try next 
      0010C0 20 D7            [ 2] 2914 	jra search_next
      0010C2                       2915 str_match:
      0010C2 1E 02            [ 2] 2916 	ldw x,(XSAVE,sp)
      0010C4 F6               [ 1] 2917 	ld a,(X)
      0010C5 6B 01            [ 1] 2918 	ld (NLEN,sp),a ; needed to test keyword type  
      0010C7 A4 0F            [ 1] 2919 	and a,#0xf 
                                   2920 ; move x to procedure address field 	
      0010C9 4C               [ 1] 2921 	inc a 
      0010CA C7 00 0D         [ 1] 2922 	ld acc8,a 
      0010CD 72 5F 00 0C      [ 1] 2923 	clr acc16 
      0010D1 72 BB 00 0C      [ 2] 2924 	addw x,acc16 
      0010D5 FE               [ 2] 2925 	ldw x,(x) ; routine index  
                                   2926 ;determine keyword type bits 7:6 
      0010D6 7B 01            [ 1] 2927 	ld a,(NLEN,sp)
      0010D8 4E               [ 1] 2928 	swap a 
      0010D9 A4 0C            [ 1] 2929 	and a,#0xc
      0010DB 44               [ 1] 2930 	srl a
      0010DC 44               [ 1] 2931 	srl a 
      0010DD AB 80            [ 1] 2932 	add a,#128
      0010DF                       2933 search_exit: 
      0010DF                       2934 	_drop VSIZE 	 
      0010DF 5B 05            [ 2]    1     addw sp,#VSIZE 
      0010E1 81               [ 4] 2935 	ret 
                                   2936 
                                   2937 ;---------------------
                                   2938 ; check if next token
                                   2939 ;  is of expected type 
                                   2940 ; input:
                                   2941 ;   A 		 expected token attribute
                                   2942 ;  ouput:
                                   2943 ;   none     if fail call syntax_error 
                                   2944 ;--------------------
      0010E2                       2945 expect:
      0010E2 88               [ 1] 2946 	push a 
      0010E3 CD 0A 0E         [ 4] 2947 	call next_token 
      0010E6 11 01            [ 1] 2948 	cp a,(1,sp)
      0010E8 27 03            [ 1] 2949 	jreq 1$
      0010EA CC 09 1C         [ 2] 2950 	jp syntax_error
      0010ED 84               [ 1] 2951 1$: pop a 
      0010EE 81               [ 4] 2952 	ret 
                                   2953 
                                   2954 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2955 ; parse arguments list 
                                   2956 ; between ()
                                   2957 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010EF                       2958 func_args:
      0010EF A6 07            [ 1] 2959 	ld a,#TK_LPAREN 
      0010F1 CD 10 E2         [ 4] 2960 	call expect 
                                   2961 ; expected to continue in arg_list 
                                   2962 ; caller must check for TK_RPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2963 
                                   2964 ;-------------------------------
                                   2965 ; parse embedded BASIC routines 
                                   2966 ; arguments list.
                                   2967 ; arg_list::=  rel[','rel]*
                                   2968 ; all arguments are of integer type
                                   2969 ; and pushed on stack 
                                   2970 ; input:
                                   2971 ;   none
                                   2972 ; output:
                                   2973 ;   stack{n}   arguments pushed on stack
                                   2974 ;   A 	number of arguments pushed on stack  
                                   2975 ;--------------------------------
      0010F4                       2976 arg_list:
      0010F4 4B 00            [ 1] 2977 	push #0  
      0010F6 CD 12 3F         [ 4] 2978 1$: call relation
      0010F9 A1 00            [ 1] 2979 	cp a,#TK_NONE 
      0010FB 27 20            [ 1] 2980 	jreq 5$
      0010FD A1 84            [ 1] 2981 	cp a,#TK_INTGR
      0010FF 26 13            [ 1] 2982 	jrne 4$
      001101                       2983 3$: 
                                   2984 ; swap return address with argument
      001101 84               [ 1] 2985 	pop a ; arg_count
      001102 90 85            [ 2] 2986 	popw y ; return address 
      001104 89               [ 2] 2987 	pushw x ; new argument 
      001105 90 89            [ 2] 2988 	pushw y 
      001107 4C               [ 1] 2989     inc a
      001108 88               [ 1] 2990 	push a 
      001109 CD 0A 0E         [ 4] 2991 	call next_token 
      00110C A1 09            [ 1] 2992 	cp a,#TK_COMMA 
      00110E 27 E6            [ 1] 2993 	jreq 1$ 
      001110 A1 00            [ 1] 2994 	cp a,#TK_NONE 
      001112 27 09            [ 1] 2995 	jreq 5$ 
      001114 A1 08            [ 1] 2996 4$:	cp a,#TK_RPAREN 
      001116 27 05            [ 1] 2997 	jreq 5$
      001118                       2998 	_unget_token 
      001118 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00111D 84               [ 1] 2999 5$:	pop a  
      00111E 81               [ 4] 3000 	ret 
                                   3001 
                                   3002 ;--------------------------------
                                   3003 ;   BASIC commnands 
                                   3004 ;--------------------------------
                                   3005 
                                   3006 ;--------------------------------
                                   3007 ;  arithmetic and relational 
                                   3008 ;  routines
                                   3009 ;  operators precedence
                                   3010 ;  highest to lowest
                                   3011 ;  operators on same row have 
                                   3012 ;  same precedence and are executed
                                   3013 ;  from left to right.
                                   3014 ;	'*','/','%'
                                   3015 ;   '-','+'
                                   3016 ;   '=','>','<','>=','<=','<>','><'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3017 ;   '<>' and '><' are equivalent for not equal.
                                   3018 ;--------------------------------
                                   3019 
                                   3020 ;---------------------
                                   3021 ; return array element
                                   3022 ; address from @(expr)
                                   3023 ; input:
                                   3024 ;   A 		TK_ARRAY
                                   3025 ; output:
                                   3026 ;   A 		TK_INTGR
                                   3027 ;	X 		element address 
                                   3028 ;----------------------
      00111F                       3029 get_array_element:
      00111F CD 10 EF         [ 4] 3030 	call func_args 
      001122 A1 01            [ 1] 3031 	cp a,#1
      001124 27 03            [ 1] 3032 	jreq 1$
      001126 CC 09 1C         [ 2] 3033 	jp syntax_error
      001129 85               [ 2] 3034 1$: popw x 
                                   3035 	; check for bounds 
      00112A C3 00 21         [ 2] 3036 	cpw x,array_size 
      00112D 23 05            [ 2] 3037 	jrule 3$
                                   3038 ; bounds {1..array_size}	
      00112F A6 0A            [ 1] 3039 2$: ld a,#ERR_BAD_VALUE 
      001131 CC 09 1E         [ 2] 3040 	jp tb_error 
      001134 5D               [ 2] 3041 3$: tnzw  x
      001135 27 F8            [ 1] 3042 	jreq 2$ 
      001137 58               [ 2] 3043 	sllw x 
      001138 89               [ 2] 3044 	pushw x 
      001139 AE 16 90         [ 2] 3045 	ldw x,#tib
      00113C 72 F0 01         [ 2] 3046 	subw x,(1,sp)
      00113F                       3047 	_drop 2   
      00113F 5B 02            [ 2]    1     addw sp,#2 
      001141 A6 84            [ 1] 3048 	ld a,#TK_INTGR
      001143 81               [ 4] 3049 	ret 
                                   3050 
                                   3051 
                                   3052 ;***********************************
                                   3053 ;   expression parse,execute 
                                   3054 ;***********************************
                                   3055 ;-----------------------------------
                                   3056 ; factor ::= ['+'|'-'|e]  var | @ |
                                   3057 ;			 integer | function |
                                   3058 ;			 '('relation')' 
                                   3059 ; output:
                                   3060 ;   A    token attribute 
                                   3061 ;   X 	 integer
                                   3062 ; ---------------------------------
                           000001  3063 	NEG=1
                           000001  3064 	VSIZE=1
      001144                       3065 factor:
      001144                       3066 	_vars VSIZE 
      001144 52 01            [ 2]    1     sub sp,#VSIZE 
      001146 CD 0A 0E         [ 4] 3067 	call next_token
      001149 A1 02            [ 1] 3068 	cp a,#CMD_END  
      00114B 25 3D            [ 1] 3069 	jrult 16$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00114D 6B 01            [ 1] 3070 1$:	ld (NEG,sp),a 
      00114F A4 30            [ 1] 3071 	and a,#TK_GRP_MASK
      001151 A1 10            [ 1] 3072 	cp a,#TK_GRP_ADD 
      001153 27 04            [ 1] 3073 	jreq 2$
      001155 7B 01            [ 1] 3074 	ld a,(NEG,sp)
      001157 20 03            [ 2] 3075 	jra 4$  
      001159                       3076 2$:	
      001159 CD 0A 0E         [ 4] 3077 	call next_token 
      00115C                       3078 4$:	
      00115C A1 81            [ 1] 3079 	cp a,#TK_IFUNC 
      00115E 26 03            [ 1] 3080 	jrne 5$ 
      001160 FD               [ 4] 3081 	call (x) 
      001161 20 32            [ 2] 3082 	jra 18$ 
      001163                       3083 5$:
      001163 A1 84            [ 1] 3084 	cp a,#TK_INTGR
      001165 26 02            [ 1] 3085 	jrne 6$
      001167 20 2C            [ 2] 3086 	jra 18$
      001169                       3087 6$:
      001169 A1 06            [ 1] 3088 	cp a,#TK_ARRAY
      00116B 26 06            [ 1] 3089 	jrne 10$
      00116D CD 11 1F         [ 4] 3090 	call get_array_element
      001170 FE               [ 2] 3091 	ldw x,(x)
      001171 20 22            [ 2] 3092 	jra 18$ 
      001173                       3093 10$:
      001173 A1 85            [ 1] 3094 	cp a,#TK_VAR 
      001175 26 03            [ 1] 3095 	jrne 12$
      001177 FE               [ 2] 3096 	ldw x,(x)
      001178 20 1B            [ 2] 3097 	jra 18$
      00117A                       3098 12$:			
      00117A A1 07            [ 1] 3099 	cp a,#TK_LPAREN
      00117C 26 0C            [ 1] 3100 	jrne 16$
      00117E CD 12 3F         [ 4] 3101 	call relation
      001181 89               [ 2] 3102 	pushw x 
      001182 A6 08            [ 1] 3103 	ld a,#TK_RPAREN 
      001184 CD 10 E2         [ 4] 3104 	call expect
      001187 85               [ 2] 3105 	popw x 
      001188 20 0B            [ 2] 3106 	jra 18$	
      00118A                       3107 16$:
      00118A 4D               [ 1] 3108 	tnz a 
      00118B 27 11            [ 1] 3109 	jreq 20$ 
      00118D                       3110 	_unget_token
      00118D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001192 4F               [ 1] 3111 	clr a 
      001193 20 09            [ 2] 3112 	jra 20$ 
      001195                       3113 18$: 
      001195 A6 11            [ 1] 3114 	ld a,#TK_MINUS 
      001197 11 01            [ 1] 3115 	cp a,(NEG,sp)
      001199 26 01            [ 1] 3116 	jrne 19$
      00119B 50               [ 2] 3117 	negw x
      00119C                       3118 19$:
      00119C A6 84            [ 1] 3119 	ld a,#TK_INTGR
      00119E                       3120 20$:
      00119E                       3121 	_drop VSIZE
      00119E 5B 01            [ 2]    1     addw sp,#VSIZE 
      0011A0 81               [ 4] 3122 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3123 
                                   3124 ;-----------------------------------
                                   3125 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3126 ; output:
                                   3127 ;   A    	token attribute 
                                   3128 ;	X		integer
                                   3129 ;-----------------------------------
                           000001  3130 	N1=1   ; int16_t
                           000003  3131 	MULOP=3
                           000003  3132 	VSIZE=3
      0011A1                       3133 term:
      0011A1                       3134 	_vars VSIZE
      0011A1 52 03            [ 2]    1     sub sp,#VSIZE 
      0011A3 CD 11 44         [ 4] 3135 	call factor
      0011A6 4D               [ 1] 3136 	tnz a 
      0011A7 27 47            [ 1] 3137 	jreq term_exit 
      0011A9                       3138 term01:	 ; check for  operator 
      0011A9 1F 01            [ 2] 3139 	ldw (N1,sp),x  ; save first factor 
      0011AB CD 0A 0E         [ 4] 3140 	call next_token
      0011AE 6B 03            [ 1] 3141 	ld (MULOP,sp),a
      0011B0 A1 02            [ 1] 3142 	cp a,#CMD_END
      0011B2 25 2F            [ 1] 3143 	jrult 8$
      0011B4 A4 30            [ 1] 3144 	and a,#TK_GRP_MASK
      0011B6 A1 20            [ 1] 3145 	cp a,#TK_GRP_MULT
      0011B8 27 02            [ 1] 3146 	jreq 1$
      0011BA 20 27            [ 2] 3147 	jra 8$
      0011BC                       3148 1$:	; got *|/|%
      0011BC CD 11 44         [ 4] 3149 	call factor
      0011BF A1 84            [ 1] 3150 	cp a,#TK_INTGR
      0011C1 27 03            [ 1] 3151 	jreq 2$
      0011C3 CC 09 1C         [ 2] 3152 	jp syntax_error
      0011C6 90 93            [ 1] 3153 2$:	ldw y,x 
      0011C8 1E 01            [ 2] 3154 	ldw x,(N1,sp)
      0011CA 7B 03            [ 1] 3155 	ld a,(MULOP,sp) 
      0011CC A1 20            [ 1] 3156 	cp a,#TK_MULT 
      0011CE 26 05            [ 1] 3157 	jrne 3$
      0011D0 CD 0F 73         [ 4] 3158 	call multiply 
      0011D3 20 D4            [ 2] 3159 	jra term01
      0011D5 A1 21            [ 1] 3160 3$: cp a,#TK_DIV 
      0011D7 26 05            [ 1] 3161 	jrne 4$ 
      0011D9 CD 10 2C         [ 4] 3162 	call divide 
      0011DC 20 CB            [ 2] 3163 	jra term01 
      0011DE CD 10 42         [ 4] 3164 4$: call modulo
      0011E1 20 C6            [ 2] 3165 	jra term01 
      0011E3 7B 03            [ 1] 3166 8$: ld a,(MULOP,sp)
      0011E5 27 05            [ 1] 3167 	jreq 9$ 
      0011E7                       3168 	_unget_token
      0011E7 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0011EC 1E 01            [ 2] 3169 9$: ldw x,(N1,sp)
      0011EE A6 84            [ 1] 3170 	ld a,#TK_INTGR 	
      0011F0                       3171 term_exit:
      0011F0                       3172 	_drop VSIZE 
      0011F0 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011F2 81               [ 4] 3173 	ret 
                                   3174 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3175 ;-------------------------------
                                   3176 ;  expr ::= term [['+'|'-'] term]*
                                   3177 ;  result range {-32768..32767}
                                   3178 ;  output:
                                   3179 ;   A    token attribute 
                                   3180 ;   X	 integer   
                                   3181 ;-------------------------------
                           000001  3182 	N1=1 
                           000003  3183 	OP=3 
                           000003  3184 	VSIZE=3 
      0011F3                       3185 expression:
      0011F3                       3186 	_vars VSIZE 
      0011F3 52 03            [ 2]    1     sub sp,#VSIZE 
      0011F5 CD 11 A1         [ 4] 3187 	call term
      0011F8 4D               [ 1] 3188 	tnz a 
      0011F9 27 41            [ 1] 3189 	jreq expr_exit 
      0011FB 1F 01            [ 2] 3190 1$:	ldw (N1,sp),x 
      0011FD CD 0A 0E         [ 4] 3191 	call next_token
      001200 6B 03            [ 1] 3192 	ld (OP,sp),a 
      001202 A1 02            [ 1] 3193 	cp a,#CMD_END 
      001204 25 29            [ 1] 3194 	jrult 8$ 
      001206 A4 30            [ 1] 3195 	and a,#TK_GRP_MASK
      001208 A1 10            [ 1] 3196 	cp a,#TK_GRP_ADD 
      00120A 27 02            [ 1] 3197 	jreq 2$ 
      00120C 20 21            [ 2] 3198 	jra 8$
      00120E                       3199 2$: 
      00120E CD 11 A1         [ 4] 3200 	call term
      001211 A1 84            [ 1] 3201 	cp a,#TK_INTGR
      001213 27 03            [ 1] 3202 	jreq 3$
      001215 CC 09 1C         [ 2] 3203 	jp syntax_error
      001218 CF 00 0C         [ 2] 3204 3$:	ldw acc16,x 
      00121B 1E 01            [ 2] 3205 	ldw x,(N1,sp)
      00121D 7B 03            [ 1] 3206 	ld a,(OP,sp)
      00121F A1 10            [ 1] 3207 	cp a,#TK_PLUS 
      001221 26 06            [ 1] 3208 	jrne 4$
      001223 72 BB 00 0C      [ 2] 3209 	addw x,acc16
      001227 20 D2            [ 2] 3210 	jra 1$ 
      001229 72 B0 00 0C      [ 2] 3211 4$:	subw x,acc16
      00122D 20 CC            [ 2] 3212 	jra 1$
      00122F 7B 03            [ 1] 3213 8$: ld a,(OP,sp)
      001231 27 05            [ 1] 3214 	jreq 9$ 
      001233                       3215 	_unget_token	
      001233 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001238 1E 01            [ 2] 3216 9$: ldw x,(N1,sp)
      00123A A6 84            [ 1] 3217 	ld a,#TK_INTGR	
      00123C                       3218 expr_exit:
      00123C                       3219 	_drop VSIZE 
      00123C 5B 03            [ 2]    1     addw sp,#VSIZE 
      00123E 81               [ 4] 3220 	ret 
                                   3221 
                                   3222 ;---------------------------------------------
                                   3223 ; rel ::= expr rel_op expr
                                   3224 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3225 ;  relation return  integer , zero is false 
                                   3226 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3227 ;    A 		token attribute  
                                   3228 ;	 X		integer 
                                   3229 ;---------------------------------------------
                           000001  3230 	N1=1
                           000003  3231 	RELOP=3
                           000003  3232 	VSIZE=3 
      00123F                       3233 relation: 
      00123F                       3234 	_vars VSIZE
      00123F 52 03            [ 2]    1     sub sp,#VSIZE 
      001241 CD 11 F3         [ 4] 3235 	call expression
      001244 4D               [ 1] 3236 	tnz a 
      001245 27 4D            [ 1] 3237 	jreq rel_exit
      001247 1F 01            [ 2] 3238 	ldw (N1,sp),x 
                                   3239 ; expect rel_op or leave 
      001249 CD 0A 0E         [ 4] 3240 	call next_token 
      00124C 6B 03            [ 1] 3241 	ld (RELOP,sp),a 
      00124E A4 30            [ 1] 3242 	and a,#TK_GRP_MASK
      001250 A1 30            [ 1] 3243 	cp a,#TK_GRP_RELOP 
      001252 26 33            [ 1] 3244 	jrne 8$
      001254                       3245 2$:	; expect another expression
      001254 CD 11 F3         [ 4] 3246 	call expression
      001257 A1 84            [ 1] 3247 	cp a,#TK_INTGR
      001259 27 03            [ 1] 3248 	jreq 3$
      00125B CC 09 1C         [ 2] 3249 	jp syntax_error 
      00125E CF 00 0C         [ 2] 3250 3$:	ldw acc16,x 
      001261 1E 01            [ 2] 3251 	ldw x,(N1,sp) 
      001263 72 B0 00 0C      [ 2] 3252 	subw x,acc16
      001267 26 06            [ 1] 3253 	jrne 4$
      001269 35 02 00 0D      [ 1] 3254 	mov acc8,#2 ; n1==n2
      00126D 20 0C            [ 2] 3255 	jra 6$ 
      00126F                       3256 4$: 
      00126F 2C 06            [ 1] 3257 	jrsgt 5$  
      001271 35 04 00 0D      [ 1] 3258 	mov acc8,#4 ; n1<2 
      001275 20 04            [ 2] 3259 	jra 6$
      001277                       3260 5$:
      001277 35 01 00 0D      [ 1] 3261 	mov acc8,#1 ; n1>n2 
      00127B                       3262 6$:
      00127B 5F               [ 1] 3263 	clrw x 
      00127C C6 00 0D         [ 1] 3264 	ld a, acc8  
      00127F 14 03            [ 1] 3265 	and a,(RELOP,sp)
      001281 4D               [ 1] 3266 	tnz a 
      001282 27 0E            [ 1] 3267 	jreq 10$
      001284 5C               [ 1] 3268 	incw x 
      001285 20 0B            [ 2] 3269 	jra 10$  	
      001287 7B 03            [ 1] 3270 8$: ld a,(RELOP,sp)
      001289 27 05            [ 1] 3271 	jreq 9$
      00128B                       3272 	_unget_token
      00128B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001290                       3273 9$: 
      001290 1E 01            [ 2] 3274 	ldw x,(N1,sp)
      001292                       3275 10$:
      001292 A6 84            [ 1] 3276 	ld a,#TK_INTGR
      001294                       3277 rel_exit:
      001294                       3278 	_drop VSIZE
      001294 5B 03            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001296 81               [ 4] 3279 	ret 
                                   3280 
                                   3281 ;--------------------------------
                                   3282 ; BASIC: SHOW 
                                   3283 ; print stack content in hexadecimal bytes 
                                   3284 ; 16 bytes per row 
                                   3285 ;--------------------------------
      001297                       3286 show:
      001297 AE 12 B1         [ 2] 3287 	ldw x,#cstk_prompt
      00129A CD 00 00         [ 4] 3288 	call puts 
      00129D 96               [ 1] 3289 	ldw x,sp 
      00129E 1C 00 03         [ 2] 3290 	addw x,#3 ; ignore return address
      0012A1 90 AE 18 00      [ 2] 3291 	ldw y,#RAM_SIZE  
      0012A5 CF 00 0C         [ 2] 3292 	ldw acc16,x 
      0012A8 72 B2 00 0C      [ 2] 3293 	subw y,acc16
      0012AC CD 03 F7         [ 4] 3294 	call hex_dump
      0012AF 4F               [ 1] 3295 	clr a 
      0012B0 81               [ 4] 3296 	ret
                                   3297 
      0012B1 0A 63 6F 6E 74 65 6E  3298 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3299 
                                   3300 
                                   3301 ;--------------------------------------------
                                   3302 ; BASIC: HEX 
                                   3303 ; select hexadecimal base for integer print
                                   3304 ;---------------------------------------------
      0012D8                       3305 hex_base:
      0012D8 35 10 00 0A      [ 1] 3306 	mov base,#16 
      0012DC 81               [ 4] 3307 	ret 
                                   3308 
                                   3309 ;--------------------------------------------
                                   3310 ; BASIC: DEC 
                                   3311 ; select decimal base for integer print
                                   3312 ;---------------------------------------------
      0012DD                       3313 dec_base:
      0012DD 35 0A 00 0A      [ 1] 3314 	mov base,#10
      0012E1 81               [ 4] 3315 	ret 
                                   3316 
                                   3317 ;------------------------
                                   3318 ; BASIC: SIZE 
                                   3319 ; return free size in text area
                                   3320 ; output:
                                   3321 ;   A 		TK_INTGR
                                   3322 ;   X 	    size integer
                                   3323 ;--------------------------
      0012E2                       3324 size:
      0012E2 AE 16 90         [ 2] 3325 	ldw x,#tib 
      0012E5 72 B0 00 1E      [ 2] 3326 	subw x,txtend 
      0012E9 A6 84            [ 1] 3327 	ld a,#TK_INTGR
      0012EB 81               [ 4] 3328 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3329 
                                   3330 
                                   3331 ;------------------------
                                   3332 ; BASIC: UBOUND  
                                   3333 ; return array variable size 
                                   3334 ; output:
                                   3335 ;   A 		TK_INTGR
                                   3336 ;   X 	    array size 
                                   3337 ;--------------------------
      0012EC                       3338 ubound:
      0012EC AE 16 90         [ 2] 3339 	ldw x,#tib
      0012EF 72 B0 00 1E      [ 2] 3340 	subw x,txtend 
      0012F3 90 CE 00 04      [ 2] 3341 	ldw y,basicptr 
      0012F7 90 C3 00 1E      [ 2] 3342 	cpw y,txtend 
      0012FB 25 0A            [ 1] 3343 	jrult 1$
      0012FD 3B 00 03         [ 1] 3344 	push count 
      001300 4B 00            [ 1] 3345 	push #0 
      001302 72 F0 01         [ 2] 3346 	subw x,(1,sp)
      001305                       3347 	_drop 2 
      001305 5B 02            [ 2]    1     addw sp,#2 
      001307 54               [ 2] 3348 1$:	srlw x 
      001308 CF 00 21         [ 2] 3349 	ldw array_size,x
      00130B A6 84            [ 1] 3350 	ld a,#TK_INTGR
      00130D 81               [ 4] 3351 	ret 
                                   3352 
                                   3353 ;-----------------------------
                                   3354 ; BASIC: LET var=expr 
                                   3355 ; variable assignement 
                                   3356 ; output:
                                   3357 ;   A 		TK_NONE 
                                   3358 ;-----------------------------
      00130E                       3359 let:
      00130E CD 0A 0E         [ 4] 3360 	call next_token 
      001311 A1 85            [ 1] 3361 	cp a,#TK_VAR 
      001313 27 0A            [ 1] 3362 	jreq let_var
      001315 A1 06            [ 1] 3363 	cp a,#TK_ARRAY 
      001317 27 03            [ 1] 3364 	jreq  let_array
      001319 CC 09 1C         [ 2] 3365 	jp syntax_error
      00131C                       3366 let_array:
      00131C CD 11 1F         [ 4] 3367 	call get_array_element
      00131F                       3368 let_var:
      00131F 89               [ 2] 3369 	pushw x  
      001320 CD 0A 0E         [ 4] 3370 	call next_token 
      001323 A1 32            [ 1] 3371 	cp a,#TK_EQUAL
      001325 27 03            [ 1] 3372 	jreq 1$
      001327 CC 09 1C         [ 2] 3373 	jp syntax_error
      00132A                       3374 1$:	
      00132A CD 12 3F         [ 4] 3375 	call relation   
      00132D A1 84            [ 1] 3376 	cp a,#TK_INTGR 
      00132F 27 03            [ 1] 3377 	jreq 2$
      001331 CC 09 1C         [ 2] 3378 	jp syntax_error
      001334                       3379 2$:	
      001334 90 93            [ 1] 3380 	ldw y,x 
      001336 85               [ 2] 3381 	popw x   
      001337 FF               [ 2] 3382 	ldw (x),y   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001338 81               [ 4] 3383 	ret 
                                   3384 
                                   3385 ;----------------------------
                                   3386 ; BASIC: LIST [[start][,end]]
                                   3387 ; list program lines 
                                   3388 ; form start to end 
                                   3389 ; if empty argument list then 
                                   3390 ; list all.
                                   3391 ;----------------------------
                           000001  3392 	FIRST=1
                           000003  3393 	LAST=3 
                           000005  3394 	LN_PTR=5
                           000006  3395 	VSIZE=6 
      001339                       3396 list:
      001339 CE 00 1C         [ 2] 3397 	ldw x,txtbgn 
      00133C C3 00 1E         [ 2] 3398 	cpw x,txtend 
      00133F 2B 01            [ 1] 3399 	jrmi 1$
      001341 81               [ 4] 3400 	ret 
      001342                       3401 1$:	
      001342                       3402 	_vars VSIZE
      001342 52 06            [ 2]    1     sub sp,#VSIZE 
      001344 1F 05            [ 2] 3403 	ldw (LN_PTR,sp),x 
      001346 FE               [ 2] 3404 	ldw x,(x) 
      001347 1F 01            [ 2] 3405 	ldw (FIRST,sp),x ; list from first line 
      001349 AE 7F FF         [ 2] 3406 	ldw x,#MAX_LINENO ; biggest line number 
      00134C 1F 03            [ 2] 3407 	ldw (LAST,sp),x 
      00134E CD 10 F4         [ 4] 3408 	call arg_list
      001351 4D               [ 1] 3409 	tnz a
      001352 27 31            [ 1] 3410 	jreq list_loop 
      001354 A1 02            [ 1] 3411 	cp a,#2 
      001356 27 07            [ 1] 3412 	jreq 4$
      001358 A1 01            [ 1] 3413 	cp a,#1 
      00135A 27 06            [ 1] 3414 	jreq first_line 
      00135C CC 09 1C         [ 2] 3415 	jp syntax_error 
      00135F 85               [ 2] 3416 4$:	popw x 
      001360 1F 05            [ 2] 3417 	ldw (LAST+2,sp),x 
      001362                       3418 first_line:
      001362 85               [ 2] 3419 	popw x
      001363 1F 01            [ 2] 3420 	ldw (FIRST,sp),x 
      001365                       3421 lines_skip:
      001365 CE 00 1C         [ 2] 3422 	ldw x,txtbgn
      001368 1F 05            [ 2] 3423 2$:	ldw (LN_PTR,sp),x 
      00136A C3 00 1E         [ 2] 3424 	cpw x,txtend 
      00136D 2A 38            [ 1] 3425 	jrpl list_exit 
      00136F FE               [ 2] 3426 	ldw x,(x) ;line# 
      001370 13 01            [ 2] 3427 	cpw x,(FIRST,sp)
      001372 2A 11            [ 1] 3428 	jrpl list_loop 
      001374 1E 05            [ 2] 3429 	ldw x,(LN_PTR,sp) 
      001376 E6 02            [ 1] 3430 	ld a,(2,x)
      001378 C7 00 0D         [ 1] 3431 	ld acc8,a 
      00137B 72 5F 00 0C      [ 1] 3432 	clr acc16 
      00137F 72 BB 00 0C      [ 2] 3433 	addw x,acc16
      001383 20 E3            [ 2] 3434 	jra 2$ 
                                   3435 ; print loop
      001385                       3436 list_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001385 1E 05            [ 2] 3437 	ldw x,(LN_PTR,sp)
      001387 E6 02            [ 1] 3438 	ld a,(2,x) 
      001389 CD 15 C0         [ 4] 3439 	call prt_basic_line
      00138C 1E 05            [ 2] 3440 	ldw x,(LN_PTR,sp)
      00138E E6 02            [ 1] 3441 	ld a,(2,x)
      001390 C7 00 0D         [ 1] 3442 	ld acc8,a 
      001393 72 5F 00 0C      [ 1] 3443 	clr acc16 
      001397 72 BB 00 0C      [ 2] 3444 	addw x,acc16
      00139B C3 00 1E         [ 2] 3445 	cpw x,txtend 
      00139E 2A 07            [ 1] 3446 	jrpl list_exit
      0013A0 1F 05            [ 2] 3447 	ldw (LN_PTR,sp),x
      0013A2 FE               [ 2] 3448 	ldw x,(x)
      0013A3 13 03            [ 2] 3449 	cpw x,(LAST,sp)  
      0013A5 2F DE            [ 1] 3450 	jrslt list_loop
      0013A7                       3451 list_exit:
      0013A7 55 00 03 00 01   [ 1] 3452 	mov in,count 
      0013AC AE 16 E0         [ 2] 3453 	ldw x,#pad 
      0013AF CF 00 04         [ 2] 3454 	ldw basicptr,x 
      0013B2                       3455 	_drop VSIZE 
      0013B2 5B 06            [ 2]    1     addw sp,#VSIZE 
      0013B4 81               [ 4] 3456 	ret
                                   3457 
                                   3458 ;-------------------------
                                   3459 ; copy command name to buffer  
                                   3460 ; input:
                                   3461 ;   X 	name address 
                                   3462 ;   Y   destination buffer 
                                   3463 ; output:
                                   3464 ;   Y   point after name  
                                   3465 ;--------------------------
      0013B5                       3466 cpy_cmd_name:
      0013B5 F6               [ 1] 3467 	ld a,(x)
      0013B6 5C               [ 1] 3468 	incw x
      0013B7 A4 0F            [ 1] 3469 	and a,#15  
      0013B9 88               [ 1] 3470 	push a 
      0013BA 0D 01            [ 1] 3471     tnz (1,sp) 
      0013BC 27 0A            [ 1] 3472 	jreq 9$
      0013BE F6               [ 1] 3473 1$:	ld a,(x)
      0013BF 90 F7            [ 1] 3474 	ld (y),a  
      0013C1 5C               [ 1] 3475 	incw x
      0013C2 90 5C            [ 1] 3476 	incw y 
      0013C4 0A 01            [ 1] 3477 	dec (1,sp)	 
      0013C6 26 F6            [ 1] 3478 	jrne 1$
      0013C8 84               [ 1] 3479 9$: pop a 
      0013C9 81               [ 4] 3480 	ret	
                                   3481 
                                   3482 ;--------------------------
                                   3483 ; add a space after letter or 
                                   3484 ; digit.
                                   3485 ; input:
                                   3486 ;   Y     pointer to buffer 
                                   3487 ; output:
                                   3488 ;   Y    moved to end 
                                   3489 ;--------------------------
      0013CA                       3490 add_space:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013CA 90 5A            [ 2] 3491 	decw y 
      0013CC 90 F6            [ 1] 3492 	ld a,(y)
      0013CE 90 5C            [ 1] 3493 	incw y
      0013D0 CD 06 29         [ 4] 3494 	call is_alnum 
      0013D3 24 06            [ 1] 3495 	jrnc 1$
      0013D5 A6 20            [ 1] 3496 	ld a,#SPACE 
      0013D7 90 F7            [ 1] 3497 	ld (y),a 
      0013D9 90 5C            [ 1] 3498 	incw y 
      0013DB 81               [ 4] 3499 1$: ret 
                                   3500 
                                   3501 ;--------------------------
                                   3502 ;  align text in buffer 
                                   3503 ;  to tab_width padding 
                                   3504 ;  left with  SPACE 
                                   3505 ; input:
                                   3506 ;   X      str*
                                   3507 ;   A      str_length 
                                   3508 ; output:
                                   3509 ;   X      ajusted
                                   3510 ;--------------------------
      0013DC                       3511 right_align:
      0013DC 88               [ 1] 3512 	push a 
      0013DD 7B 01            [ 1] 3513 0$: ld a,(1,sp)
      0013DF C1 00 24         [ 1] 3514 	cp a,tab_width 
      0013E2 2A 08            [ 1] 3515 	jrpl 1$
      0013E4 A6 20            [ 1] 3516 	ld a,#SPACE 
      0013E6 5A               [ 2] 3517 	decw x
      0013E7 F7               [ 1] 3518 	ld (x),a  
      0013E8 0C 01            [ 1] 3519 	inc (1,sp)
      0013EA 20 F1            [ 2] 3520 	jra 0$ 
      0013EC 84               [ 1] 3521 1$: pop a 	
      0013ED 81               [ 4] 3522 	ret 
                                   3523 
                                   3524 ;--------------------------
                                   3525 ; print TK_QSTR
                                   3526 ; converting control character
                                   3527 ; to backslash sequence
                                   3528 ; input:
                                   3529 ;   X        char *
                                   3530 ;   Y        dest. buffer 
                                   3531 ; output:
                                   3532 ;   X        moved forward 
                                   3533 ;   Y        moved forward 
                                   3534 ;-----------------------------
      0013EE                       3535 cpy_quote:
      0013EE A6 22            [ 1] 3536 	ld a,#'"
      0013F0 90 F7            [ 1] 3537 	ld (y),a 
      0013F2 90 5C            [ 1] 3538 	incw y 
      0013F4 F6               [ 1] 3539 1$:	ld a,(x)
      0013F5 27 30            [ 1] 3540 	jreq 9$
      0013F7 5C               [ 1] 3541 	incw x 
      0013F8 A1 20            [ 1] 3542 	cp a,#SPACE 
      0013FA 25 0E            [ 1] 3543 	jrult 3$
      0013FC 90 F7            [ 1] 3544 	ld (y),a
      0013FE 90 5C            [ 1] 3545 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001400 A1 5C            [ 1] 3546 	cp a,#'\ 
      001402 26 F0            [ 1] 3547 	jrne 1$ 
      001404                       3548 2$:
      001404 90 F7            [ 1] 3549 	ld (y),a
      001406 90 5C            [ 1] 3550 	incw y  
      001408 20 EA            [ 2] 3551 	jra 1$
      00140A 88               [ 1] 3552 3$: push a 
      00140B A6 5C            [ 1] 3553 	ld a,#'\
      00140D 90 F7            [ 1] 3554 	ld (y),a 
      00140F 90 5C            [ 1] 3555 	incw y  
      001411 84               [ 1] 3556 	pop a 
      001412 A0 07            [ 1] 3557 	sub a,#7
      001414 C7 00 0D         [ 1] 3558 	ld acc8,a 
      001417 72 5F 00 0C      [ 1] 3559 	clr acc16
      00141B 89               [ 2] 3560 	pushw x
      00141C AE 0B C2         [ 2] 3561 	ldw x,#escaped 
      00141F 72 BB 00 0C      [ 2] 3562 	addw x,acc16 
      001423 F6               [ 1] 3563 	ld a,(x)
      001424 85               [ 2] 3564 	popw x
      001425 20 DD            [ 2] 3565 	jra 2$
      001427 A6 22            [ 1] 3566 9$: ld a,#'"
      001429 90 F7            [ 1] 3567 	ld (y),a 
      00142B 90 5C            [ 1] 3568 	incw y  
      00142D 5C               [ 1] 3569 	incw x 
      00142E 81               [ 4] 3570 	ret
                                   3571 
                                   3572 ;--------------------------
                                   3573 ; return variable name 
                                   3574 ; from its address.
                                   3575 ; input:
                                   3576 ;   X    variable address
                                   3577 ; output:
                                   3578 ;   A     variable letter
                                   3579 ;--------------------------
      00142F                       3580 var_name:
      00142F 1D 00 39         [ 2] 3581 		subw x,#vars 
      001432 9F               [ 1] 3582 		ld a,xl 
      001433 44               [ 1] 3583 		srl a 
      001434 AB 41            [ 1] 3584 		add a,#'A 
      001436 81               [ 4] 3585 		ret 
                                   3586 
                                   3587 ;-----------------------------
                                   3588 ; return cmd  idx from its 
                                   3589 ; code address 
                                   3590 ; input:
                                   3591 ;   X      code address 
                                   3592 ; output:
                                   3593 ;   X      cmd_idx
                                   3594 ;-----------------------------
      001437                       3595 get_cmd_idx:
      001437 90 89            [ 2] 3596 	pushw y
      001439 90 AE 28 A4      [ 2] 3597 	ldw y,#code_addr 
      00143D 90 CF 00 17      [ 2] 3598 	ldw ptr16,y 
      001441 90 5F            [ 1] 3599 	clrw y 
      001443 91 D3 17         [ 5] 3600 1$:	cpw x,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001446 27 0C            [ 1] 3601 	jreq 3$ 
      001448 90 5C            [ 1] 3602 	incw y 
      00144A 91 D6 17         [ 4] 3603 	ld a,([ptr16],y)
      00144D 90 5C            [ 1] 3604 	incw y
      00144F 91 DA 17         [ 4] 3605 	or a,([ptr16],y)	
      001452 26 EF            [ 1] 3606 	jrne 1$
      001454 93               [ 1] 3607 3$: ldw x,y 
      001455 90 85            [ 2] 3608 	popw y 
      001457 81               [ 4] 3609 	ret
                                   3610 
                                   3611 ;-------------------------------------
                                   3612 ; decompile tokens list 
                                   3613 ; to original text line 
                                   3614 ; input:
                                   3615 ;   [basicptr]  pointer at line 
                                   3616 ;   Y           destination buffer
                                   3617 ; output:
                                   3618 ;   A           length 
                                   3619 ;   Y           after string  
                                   3620 ;------------------------------------
                           000001  3621 	BASE_SAV=1
                           000002  3622 	WIDTH_SAV=2
                           000003  3623 	STR=3
                           000004  3624 	VSIZE=4 
      001458                       3625 decompile::
      001458                       3626 	_vars VSIZE
      001458 52 04            [ 2]    1     sub sp,#VSIZE 
      00145A C6 00 0A         [ 1] 3627 	ld a,base
      00145D 6B 01            [ 1] 3628 	ld (BASE_SAV,sp),a  
      00145F C6 00 24         [ 1] 3629 	ld a,tab_width 
      001462 6B 02            [ 1] 3630 	ld (WIDTH_SAV,sp),a 
      001464 17 03            [ 2] 3631 	ldw (STR,sp),y   
      001466 72 CE 00 04      [ 5] 3632 	ldw x,[basicptr] ; line number 
      00146A 35 0A 00 0A      [ 1] 3633 	mov base,#10
      00146E 35 05 00 24      [ 1] 3634 	mov tab_width,#5
      001472 72 5F 00 0B      [ 1] 3635 	clr acc24 
      001476 CF 00 0C         [ 2] 3636 	ldw acc16,x
      001479 CD 0A 8B         [ 4] 3637 	call itoa  
      00147C CD 13 DC         [ 4] 3638 	call right_align 
      00147F 88               [ 1] 3639 	push a 
      001480 90 93            [ 1] 3640 1$:	ldw y,x ; source
      001482 1E 04            [ 2] 3641 	ldw x,(STR+1,sp) ; destination
      001484 CD 04 50         [ 4] 3642 	call strcpy 
      001487 90 5F            [ 1] 3643 	clrw y 
      001489 84               [ 1] 3644 	pop a 
      00148A 90 97            [ 1] 3645 	ld yl,a 
      00148C 72 F9 03         [ 2] 3646 	addw y,(STR,sp)
      00148F A6 20            [ 1] 3647 	ld a,#SPACE 
      001491 90 F7            [ 1] 3648 	ld (y),a 
      001493 90 5C            [ 1] 3649 	incw y 
      001495 72 5F 00 24      [ 1] 3650 	clr tab_width
      001499 AE 00 03         [ 2] 3651 	ldw x,#3
      00149C CF 00 00         [ 2] 3652 	ldw in.w,x 
      00149F                       3653 decomp_loop:
      00149F 90 89            [ 2] 3654 	pushw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014A1 CD 0A 0E         [ 4] 3655 	call next_token 
      0014A4 90 85            [ 2] 3656 	popw y 
      0014A6 4D               [ 1] 3657 	tnz a  
      0014A7 26 03            [ 1] 3658 	jrne 1$
      0014A9 CC 15 85         [ 2] 3659 	jp 20$
      0014AC 2A 6F            [ 1] 3660 1$:	jrpl 6$
                                   3661 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      0014AE A1 85            [ 1] 3662 	cp a,#TK_VAR 
      0014B0 26 0C            [ 1] 3663 	jrne 3$
                                   3664 ;; TK_VAR 
      0014B2 CD 13 CA         [ 4] 3665 	call add_space  
      0014B5 CD 14 2F         [ 4] 3666 	call var_name
      0014B8 90 F7            [ 1] 3667 	ld (y),a 
      0014BA 90 5C            [ 1] 3668 	incw y  
      0014BC 20 E1            [ 2] 3669 	jra decomp_loop
      0014BE                       3670 3$:
      0014BE A1 84            [ 1] 3671 	cp a,#TK_INTGR
      0014C0 26 22            [ 1] 3672 	jrne 4$
                                   3673 ;; TK_INTGR
      0014C2 CD 13 CA         [ 4] 3674 	call add_space
      0014C5 72 5F 00 0B      [ 1] 3675 	clr acc24 
      0014C9 CF 00 0C         [ 2] 3676 	ldw acc16,x 
      0014CC 90 89            [ 2] 3677 	pushw y 
      0014CE CD 0A 8B         [ 4] 3678 	call itoa  
      0014D1 16 01            [ 2] 3679 	ldw y,(1,sp) 
      0014D3 88               [ 1] 3680 	push a 
      0014D4 51               [ 1] 3681 	exgw x,y 
      0014D5 CD 04 50         [ 4] 3682 	call strcpy 
      0014D8 90 5F            [ 1] 3683 	clrw y
      0014DA 84               [ 1] 3684 	pop a  
      0014DB 90 97            [ 1] 3685 	ld yl,a 
      0014DD 72 F9 01         [ 2] 3686 	addw y,(1,sp)
      0014E0                       3687 	_drop 2 
      0014E0 5B 02            [ 2]    1     addw sp,#2 
      0014E2 20 BB            [ 2] 3688 	jra decomp_loop
                                   3689 ;; dictionary keyword 
      0014E4                       3690 4$:	
      0014E4 CD 14 37         [ 4] 3691 	call get_cmd_idx 
      0014E7 A3 00 8E         [ 2] 3692 	cpw x,#REM_IDX
      0014EA 26 22            [ 1] 3693 	jrne 5$
      0014EC CE 00 04         [ 2] 3694 	ldw x,basicptr 
                                   3695 ; copy comment to buffer 
      0014EF CD 13 CA         [ 4] 3696 	call add_space
      0014F2 A6 27            [ 1] 3697 	ld a,#''
      0014F4 90 F7            [ 1] 3698 	ld (y),a 
      0014F6 90 5C            [ 1] 3699 	incw y 
      0014F8                       3700 41$:
      0014F8 72 D6 00 00      [ 4] 3701 	ld a,([in.w],x)
      0014FC 72 5C 00 01      [ 1] 3702 	inc in  
      001500 90 F7            [ 1] 3703 	ld (y),a 
      001502 90 5C            [ 1] 3704 	incw y 
      001504 C6 00 01         [ 1] 3705 	ld a,in 
      001507 C1 00 03         [ 1] 3706 	cp a,count 
      00150A 2B EC            [ 1] 3707 	jrmi 41$
      00150C 20 77            [ 2] 3708 	jra 20$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3709 ; insert command name 
      00150E                       3710 5$:
      00150E CD 13 CA         [ 4] 3711 	call add_space  
      001511 90 89            [ 2] 3712 	pushw y
      001513 CD 10 63         [ 4] 3713 	call cmd_name
      001516 90 85            [ 2] 3714 	popw y 
      001518 CD 13 B5         [ 4] 3715 	call cpy_cmd_name
      00151B 20 82            [ 2] 3716 	jra decomp_loop 
      00151D                       3717 6$:
      00151D A1 02            [ 1] 3718 	cp a,#TK_QSTR 
      00151F 26 06            [ 1] 3719 	jrne 7$
                                   3720 ;; TK_QSTR
      001521 CD 13 EE         [ 4] 3721 	call cpy_quote  
      001524 CC 14 9F         [ 2] 3722 	jp decomp_loop
      001527                       3723 7$:
      001527 A1 03            [ 1] 3724 	cp a,#TK_CHAR 
      001529 26 0E            [ 1] 3725 	jrne 8$
                                   3726 ;; TK_CHAR 
      00152B A6 5C            [ 1] 3727 	ld a,#'\ 
      00152D 90 F7            [ 1] 3728 	ld (y),a 
      00152F 90 5C            [ 1] 3729 	incw y 
      001531 9F               [ 1] 3730 	ld a,xl 
      001532 90 F7            [ 1] 3731 	ld (y),a 
      001534 90 5C            [ 1] 3732 	incw y 
      001536 CC 14 9F         [ 2] 3733 	jp decomp_loop
      001539 A1 01            [ 1] 3734 8$: cp a,#TK_COLON 
      00153B 26 09            [ 1] 3735 	jrne 9$
      00153D A6 3A            [ 1] 3736 	ld a,#':
      00153F                       3737 81$:
      00153F 90 F7            [ 1] 3738 	ld (y),a 
      001541 90 5C            [ 1] 3739 	incw y 
      001543                       3740 82$:
      001543 CC 14 9F         [ 2] 3741 	jp decomp_loop
      001546                       3742 9$: 
      001546 A1 0A            [ 1] 3743 	cp a,#TK_SHARP
      001548 22 0A            [ 1] 3744 	jrugt 10$ 
      00154A A0 06            [ 1] 3745 	sub a,#TK_ARRAY 
      00154C 5F               [ 1] 3746 	clrw x 
      00154D 97               [ 1] 3747 	ld xl,a
      00154E 1C 15 9B         [ 2] 3748 	addw x,#single_char 
      001551 F6               [ 1] 3749 	ld a,(x)
      001552 20 EB            [ 2] 3750 	jra 81$ 
      001554                       3751 10$: 
      001554 A1 11            [ 1] 3752 	cp a,#TK_MINUS 
      001556 22 0A            [ 1] 3753 	jrugt 11$
      001558 A0 10            [ 1] 3754 	sub a,#TK_PLUS 
      00155A 5F               [ 1] 3755 	clrw x 
      00155B 97               [ 1] 3756 	ld xl,a 
      00155C 1C 15 A0         [ 2] 3757 	addw x,#add_char 
      00155F F6               [ 1] 3758 	ld a,(x)
      001560 20 DD            [ 2] 3759 	jra 81$
      001562                       3760 11$:
      001562 A1 22            [ 1] 3761     cp a,#TK_MOD 
      001564 22 0A            [ 1] 3762 	jrugt 12$
      001566 A0 20            [ 1] 3763 	sub a,#TK_MULT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001568 5F               [ 1] 3764 	clrw x 
      001569 97               [ 1] 3765 	ld xl,a 
      00156A 1C 15 A2         [ 2] 3766 	addw x,#mul_char
      00156D F6               [ 1] 3767 	ld a,(x)
      00156E 20 CF            [ 2] 3768 	jra 81$
      001570                       3769 12$:
      001570 A0 31            [ 1] 3770 	sub a,#TK_GT  
      001572 48               [ 1] 3771 	sll a 
      001573 5F               [ 1] 3772 	clrw x 
      001574 97               [ 1] 3773 	ld xl,a 
      001575 1C 15 A5         [ 2] 3774 	addw x,#relop_str 
      001578 FE               [ 2] 3775 	ldw x,(x)
      001579 F6               [ 1] 3776 	ld a,(x)
      00157A 5C               [ 1] 3777 	incw x 
      00157B 90 F7            [ 1] 3778 	ld (y),a
      00157D 90 5C            [ 1] 3779 	incw y 
      00157F F6               [ 1] 3780 	ld a,(x)
      001580 26 BD            [ 1] 3781 	jrne 81$
      001582 CC 14 9F         [ 2] 3782 	jp decomp_loop 
      001585                       3783 20$: 
      001585 90 7F            [ 1] 3784 	clr (y)
      001587 1E 03            [ 2] 3785 	ldw x,(STR,sp)
      001589 7B 01            [ 1] 3786 	ld a,(BASE_SAV,sp)
      00158B C7 00 0A         [ 1] 3787 	ld base,a 
      00158E 7B 02            [ 1] 3788 	ld a,(WIDTH_SAV,sp)
      001590 C7 00 24         [ 1] 3789 	ld tab_width,a
      001593 72 F2 03         [ 2] 3790 	subw y,(STR,sp) 
      001596 90 9F            [ 1] 3791 	ld a,yl 
      001598                       3792 	_drop VSIZE 
      001598 5B 04            [ 2]    1     addw sp,#VSIZE 
      00159A 81               [ 4] 3793 	ret 
                                   3794 
      00159B 40 28 29 2C 23        3795 single_char: .byte '@','(',')',',','#'
      0015A0 2B 2D                 3796 add_char: .byte '+','-'
      0015A2 2A 2F 25              3797 mul_char: .byte '*','/','%'
      0015A5 15 B1 15 B3 15 B5 15  3798 relop_str: .word gt,equal,ge,lt,le,ne 
             B8 15 BA 15 BD
      0015B1 3E 00                 3799 gt: .asciz ">"
      0015B3 3D 00                 3800 equal: .asciz "="
      0015B5 3E 3D 00              3801 ge: .asciz ">="
      0015B8 3C 00                 3802 lt: .asciz "<"
      0015BA 3C 3D 00              3803 le: .asciz "<="
      0015BD 3C 3E 00              3804 ne:  .asciz "<>"
                                   3805 
                                   3806 
                                   3807 ;--------------------------
                                   3808 ; decompile line from token list
                                   3809 ; and print it. 
                                   3810 ; input:
                                   3811 ;   A       stop at this position 
                                   3812 ;   X 		pointer at line
                                   3813 ; output:
                                   3814 ;   none 
                                   3815 ;--------------------------	
      0015C0                       3816 prt_basic_line:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015C0 C7 00 03         [ 1] 3817 	ld count,a 
      0015C3 E6 02            [ 1] 3818 	ld a,(2,x)
      0015C5 C1 00 03         [ 1] 3819 	cp a,count 
      0015C8 2A 03            [ 1] 3820 	jrpl 1$ 
      0015CA C7 00 03         [ 1] 3821 	ld count,a 
      0015CD CF 00 04         [ 2] 3822 1$:	ldw basicptr,x 
      0015D0 90 AE 16 90      [ 2] 3823 	ldw y,#tib  
      0015D4 CD 14 58         [ 4] 3824 	call decompile 
      0015D7 CD 00 00         [ 4] 3825 	call puts 
      0015DA A6 0D            [ 1] 3826 	ld a,#CR 
      0015DC CD 03 2B         [ 4] 3827 	call putc 
      0015DF 81               [ 4] 3828 	ret 
                                   3829 
                                   3830 
                                   3831 
                                   3832 ;---------------------------------
                                   3833 ; BASIC: PRINT|? arg_list 
                                   3834 ; print values from argument list
                                   3835 ;----------------------------------
                           000001  3836 	COMMA=1
                           000001  3837 	VSIZE=1
      0015E0                       3838 print:
      0015E0                       3839 	_vars VSIZE 
      0015E0 52 01            [ 2]    1     sub sp,#VSIZE 
      0015E2                       3840 reset_comma:
      0015E2 0F 01            [ 1] 3841 	clr (COMMA,sp)
      0015E4                       3842 prt_loop:
      0015E4 CD 0A 0E         [ 4] 3843 	call next_token
      0015E7 A1 02            [ 1] 3844 	cp a,#CMD_END 
      0015E9 25 4F            [ 1] 3845 	jrult print_exit ; colon or end of line 
      0015EB A1 02            [ 1] 3846 	cp a,#TK_QSTR
      0015ED 27 12            [ 1] 3847 	jreq 1$
      0015EF A1 03            [ 1] 3848 	cp a,#TK_CHAR 
      0015F1 27 13            [ 1] 3849 	jreq 2$ 
      0015F3 A1 82            [ 1] 3850 	cp a,#TK_CFUNC 
      0015F5 27 15            [ 1] 3851 	jreq 3$
      0015F7 A1 09            [ 1] 3852 	cp a,#TK_COMMA 
      0015F9 27 18            [ 1] 3853 	jreq 4$
      0015FB A1 0A            [ 1] 3854 	cp a,#TK_SHARP 
      0015FD 27 18            [ 1] 3855 	jreq 5$
      0015FF 20 28            [ 2] 3856 	jra 7$ 
      001601                       3857 1$:	; print string 
      001601 CD 00 00         [ 4] 3858 	call puts
      001604 20 DC            [ 2] 3859 	jra reset_comma
      001606                       3860 2$:	; print character 
      001606 9F               [ 1] 3861 	ld a,xl 
      001607 CD 03 2B         [ 4] 3862 	call putc 
      00160A 20 D6            [ 2] 3863 	jra reset_comma 
      00160C                       3864 3$: ; print character function value  	
      00160C FD               [ 4] 3865 	call (x)
      00160D 9F               [ 1] 3866 	ld a,xl 
      00160E CD 03 2B         [ 4] 3867 	call putc
      001611 20 CF            [ 2] 3868 	jra reset_comma 
      001613                       3869 4$: ; set comma state 
      001613 03 01            [ 1] 3870 	cpl (COMMA,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001615 20 CD            [ 2] 3871 	jra prt_loop   
      001617                       3872 5$: ; # character must be followed by an integer   
      001617 CD 0A 0E         [ 4] 3873 	call next_token
      00161A A1 84            [ 1] 3874 	cp a,#TK_INTGR 
      00161C 27 03            [ 1] 3875 	jreq 6$
      00161E CC 09 1C         [ 2] 3876 	jp syntax_error 
      001621                       3877 6$: ; set tab width
      001621 9F               [ 1] 3878 	ld a,xl 
      001622 A4 0F            [ 1] 3879 	and a,#15 
      001624 C7 00 24         [ 1] 3880 	ld tab_width,a 
      001627 20 B9            [ 2] 3881 	jra reset_comma 
      001629                       3882 7$:	
      001629                       3883 	_unget_token 
      001629 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00162E CD 12 3F         [ 4] 3884 	call relation 
      001631 A1 84            [ 1] 3885 	cp a,#TK_INTGR 
      001633 26 05            [ 1] 3886 	jrne print_exit 
      001635 CD 0A 6F         [ 4] 3887     call print_int 
      001638 20 A8            [ 2] 3888 	jra reset_comma 
      00163A                       3889 print_exit:
      00163A 0D 01            [ 1] 3890 	tnz (COMMA,sp)
      00163C 26 05            [ 1] 3891 	jrne 9$
      00163E A6 0D            [ 1] 3892 	ld a,#CR 
      001640 CD 03 2B         [ 4] 3893     call putc 
      001643                       3894 9$:	_drop VSIZE 
      001643 5B 01            [ 2]    1     addw sp,#VSIZE 
      001645 81               [ 4] 3895 	ret 
                                   3896 
                                   3897 ;----------------------
                                   3898 ; 'save_context' and
                                   3899 ; 'rest_context' must be 
                                   3900 ; called at the same 
                                   3901 ; call stack depth 
                                   3902 ; i.e. SP must have the 
                                   3903 ; save value at  
                                   3904 ; entry point of both 
                                   3905 ; routine. 
                                   3906 ;---------------------
                           000004  3907 	CTXT_SIZE=4 ; size of saved data 
                                   3908 ;--------------------
                                   3909 ; save current BASIC
                                   3910 ; interpreter context 
                                   3911 ; on stack 
                                   3912 ;--------------------
      001646                       3913 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001646                       3914 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001646                       3915 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001646                       3916 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001646                       3917 save_context:
      001646 CE 00 04         [ 2] 3918 	ldw x,basicptr 
      001649 1F 03            [ 2] 3919 	ldw (BPTR,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00164B C6 00 01         [ 1] 3920 	ld a,in 
      00164E 6B 05            [ 1] 3921 	ld (IN,sp),a
      001650 C6 00 03         [ 1] 3922 	ld a,count 
      001653 6B 06            [ 1] 3923 	ld (CNT,sp),a  
      001655 81               [ 4] 3924 	ret
                                   3925 
                                   3926 ;-----------------------
                                   3927 ; restore previously saved 
                                   3928 ; BASIC interpreter context 
                                   3929 ; from stack 
                                   3930 ;-------------------------
      001656                       3931 rest_context:
      001656 1E 03            [ 2] 3932 	ldw x,(BPTR,sp)
      001658 CF 00 04         [ 2] 3933 	ldw basicptr,x 
      00165B 7B 05            [ 1] 3934 	ld a,(IN,sp)
      00165D C7 00 01         [ 1] 3935 	ld in,a
      001660 7B 06            [ 1] 3936 	ld a,(CNT,sp)
      001662 C7 00 03         [ 1] 3937 	ld count,a  
      001665 81               [ 4] 3938 	ret
                                   3939 
                                   3940 
                                   3941 
                                   3942 ;------------------------------------------
                                   3943 ; BASIC: INPUT [string]var[,[string]var]
                                   3944 ; input value in variables 
                                   3945 ; [string] optionally can be used as prompt 
                                   3946 ;-----------------------------------------
                           000001  3947 	CX_BPTR=1
                           000003  3948 	CX_IN=3
                           000004  3949 	CX_CNT=4
                           000005  3950 	SKIP=5
                           000006  3951 	VAR_ADDR=6
                           000007  3952 	VSIZE=7
      001666                       3953 input_var:
      001666                       3954 	_vars VSIZE 
      001666 52 07            [ 2]    1     sub sp,#VSIZE 
      001668                       3955 input_loop:
      001668 0F 05            [ 1] 3956 	clr (SKIP,sp)
      00166A CD 0A 0E         [ 4] 3957 	call next_token 
      00166D A1 02            [ 1] 3958 	cp a,#TK_QSTR 
      00166F 26 08            [ 1] 3959 	jrne 1$ 
      001671 CD 00 00         [ 4] 3960 	call puts 
      001674 03 05            [ 1] 3961 	cpl (SKIP,sp)
      001676 CD 0A 0E         [ 4] 3962 	call next_token 
      001679 A1 85            [ 1] 3963 1$: cp a,#TK_VAR  
      00167B 27 03            [ 1] 3964 	jreq 2$ 
      00167D CC 09 1C         [ 2] 3965 	jp syntax_error
      001680 1F 06            [ 2] 3966 2$:	ldw (VAR_ADDR,sp),x 
      001682 0D 05            [ 1] 3967 	tnz (SKIP,sp)
      001684 26 06            [ 1] 3968 	jrne 21$ 
      001686 CD 14 2F         [ 4] 3969 	call var_name 
      001689 CD 03 2B         [ 4] 3970 	call putc   
      00168C                       3971 21$:
      00168C A6 3A            [ 1] 3972 	ld a,#':
      00168E CD 03 2B         [ 4] 3973 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001691 CD 16 46         [ 4] 3974 	call save_context 
      001694 72 5F 00 03      [ 1] 3975 	clr count  
      001698 CD 00 00         [ 4] 3976 	call readln 
      00169B AE 16 90         [ 2] 3977 	ldw x,#tib 
      00169E 3B 00 03         [ 1] 3978 	push count
      0016A1 4B 00            [ 1] 3979 	push #0 
      0016A3 72 FB 01         [ 2] 3980 	addw x,(1,sp)
      0016A6 5C               [ 1] 3981 	incw x 
      0016A7                       3982 	_drop 2 
      0016A7 5B 02            [ 2]    1     addw sp,#2 
      0016A9 72 5F 00 01      [ 1] 3983 	clr in 
      0016AD CD 0C 9E         [ 4] 3984 	call get_token
      0016B0 A1 84            [ 1] 3985 	cp a,#TK_INTGR
      0016B2 27 06            [ 1] 3986 	jreq 3$ 
      0016B4 CD 16 56         [ 4] 3987 	call rest_context 
      0016B7 CC 09 1C         [ 2] 3988 	jp syntax_error
      0016BA 16 06            [ 2] 3989 3$: ldw y,(VAR_ADDR,sp) 
      0016BC 90 FF            [ 2] 3990 	ldw (y),x 
      0016BE CD 16 56         [ 4] 3991 	call rest_context
      0016C1 CD 0A 0E         [ 4] 3992 	call next_token 
      0016C4 A1 09            [ 1] 3993 	cp a,#TK_COMMA 
      0016C6 27 A0            [ 1] 3994 	jreq input_loop 
      0016C8 A1 01            [ 1] 3995 	cp a,#TK_COLON 
      0016CA 23 03            [ 2] 3996     jrule input_exit 
      0016CC CC 09 1C         [ 2] 3997 	jp syntax_error 
      0016CF                       3998 input_exit:
      0016CF                       3999 	_drop VSIZE 
      0016CF 5B 07            [ 2]    1     addw sp,#VSIZE 
      0016D1 81               [ 4] 4000 	ret 
                                   4001 
                                   4002 
                                   4003 ;---------------------
                                   4004 ; BASIC: REMARK | ' 
                                   4005 ; skip comment to end of line 
                                   4006 ;---------------------- 
      0016D2                       4007 remark:
      0016D2 55 00 03 00 01   [ 1] 4008 	mov in,count 
      0016D7 81               [ 4] 4009  	ret 
                                   4010 
                                   4011 
                                   4012 ;---------------------
                                   4013 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4014 ; read in loop 'addr'  
                                   4015 ; apply & 'mask' to value 
                                   4016 ; loop while result==0.  
                                   4017 ; 'xor_mask' is used to 
                                   4018 ; invert the wait logic.
                                   4019 ; i.e. loop while not 0.
                                   4020 ;---------------------
                           000001  4021 	XMASK=1 
                           000002  4022 	MASK=2
                           000003  4023 	ADDR=3
                           000004  4024 	VSIZE=4
      0016D8                       4025 wait: 
      0016D8                       4026 	_vars VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016D8 52 04            [ 2]    1     sub sp,#VSIZE 
      0016DA 0F 01            [ 1] 4027 	clr (XMASK,sp) 
      0016DC CD 10 F4         [ 4] 4028 	call arg_list 
      0016DF A1 02            [ 1] 4029 	cp a,#2
      0016E1 24 03            [ 1] 4030 	jruge 0$
      0016E3 CC 09 1C         [ 2] 4031 	jp syntax_error 
      0016E6 A1 03            [ 1] 4032 0$:	cp a,#3
      0016E8 25 04            [ 1] 4033 	jrult 1$
      0016EA 85               [ 2] 4034 	popw x 
      0016EB 9F               [ 1] 4035 	ld a,xl
      0016EC 6B 01            [ 1] 4036 	ld (XMASK,sp),a 
      0016EE 85               [ 2] 4037 1$: popw x ; mask 
      0016EF 9F               [ 1] 4038 	ld a,xl 
      0016F0 6B 02            [ 1] 4039 	ld (MASK,sp),a 
      0016F2 85               [ 2] 4040 	popw x ; address 
      0016F3 F6               [ 1] 4041 2$:	ld a,(x)
      0016F4 14 02            [ 1] 4042 	and a,(MASK,sp)
      0016F6 18 01            [ 1] 4043 	xor a,(XMASK,sp)
      0016F8 27 F9            [ 1] 4044 	jreq 2$ 
      0016FA                       4045 	_drop VSIZE 
      0016FA 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016FC 81               [ 4] 4046 	ret 
                                   4047 
                                   4048 ;---------------------
                                   4049 ; BASIC: BSET addr,mask
                                   4050 ; set bits at 'addr' corresponding 
                                   4051 ; to those of 'mask' that are at 1.
                                   4052 ; arguments:
                                   4053 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4054 ;   mask        mask|addr
                                   4055 ; output:
                                   4056 ;	none 
                                   4057 ;--------------------------
      0016FD                       4058 bit_set:
      0016FD CD 10 F4         [ 4] 4059 	call arg_list 
      001700 A1 02            [ 1] 4060 	cp a,#2	 
      001702 27 03            [ 1] 4061 	jreq 1$ 
      001704 CC 09 1C         [ 2] 4062 	jp syntax_error
      001707                       4063 1$: 
      001707 85               [ 2] 4064 	popw x ; mask 
      001708 9F               [ 1] 4065 	ld a,xl 
      001709 85               [ 2] 4066 	popw x ; addr  
      00170A FA               [ 1] 4067 	or a,(x)
      00170B F7               [ 1] 4068 	ld (x),a
      00170C 81               [ 4] 4069 	ret 
                                   4070 
                                   4071 ;---------------------
                                   4072 ; BASIC: BRES addr,mask
                                   4073 ; reset bits at 'addr' corresponding 
                                   4074 ; to those of 'mask' that are at 1.
                                   4075 ; arguments:
                                   4076 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4077 ;   mask	    ~mask&*addr  
                                   4078 ; output:
                                   4079 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4080 ;--------------------------
      00170D                       4081 bit_reset:
      00170D CD 10 F4         [ 4] 4082 	call arg_list 
      001710 A1 02            [ 1] 4083 	cp a,#2  
      001712 27 03            [ 1] 4084 	jreq 1$ 
      001714 CC 09 1C         [ 2] 4085 	jp syntax_error
      001717                       4086 1$: 
      001717 85               [ 2] 4087 	popw x ; mask 
      001718 9F               [ 1] 4088 	ld a,xl 
      001719 43               [ 1] 4089 	cpl a 
      00171A 85               [ 2] 4090 	popw x ; addr  
      00171B F4               [ 1] 4091 	and a,(x)
      00171C F7               [ 1] 4092 	ld (x),a 
      00171D 81               [ 4] 4093 	ret 
                                   4094 
                                   4095 ;---------------------
                                   4096 ; BASIC: BTOGL addr,mask
                                   4097 ; toggle bits at 'addr' corresponding 
                                   4098 ; to those of 'mask' that are at 1.
                                   4099 ; arguments:
                                   4100 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4101 ;   mask	    mask^*addr  
                                   4102 ; output:
                                   4103 ;	none 
                                   4104 ;--------------------------
      00171E                       4105 bit_toggle:
      00171E CD 10 F4         [ 4] 4106 	call arg_list 
      001721 A1 02            [ 1] 4107 	cp a,#2 
      001723 27 03            [ 1] 4108 	jreq 1$ 
      001725 CC 09 1C         [ 2] 4109 	jp syntax_error
      001728 85               [ 2] 4110 1$: popw x ; mask 
      001729 9F               [ 1] 4111 	ld a,xl 
      00172A 85               [ 2] 4112 	popw x ; addr  
      00172B F8               [ 1] 4113 	xor a,(x)
      00172C F7               [ 1] 4114 	ld (x),a 
      00172D 81               [ 4] 4115 	ret 
                                   4116 
                                   4117 
                                   4118 ;---------------------
                                   4119 ; BASIC: BTEST(addr,bit)
                                   4120 ; return bit value at 'addr' 
                                   4121 ; bit is in range {0..7}.
                                   4122 ; arguments:
                                   4123 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4124 ;   bit 	    bit position {0..7}  
                                   4125 ; output:
                                   4126 ;	none 
                                   4127 ;--------------------------
      00172E                       4128 bit_test:
      00172E CD 10 EF         [ 4] 4129 	call func_args 
      001731 A1 02            [ 1] 4130 	cp a,#2
      001733 27 03            [ 1] 4131 	jreq 0$
      001735 CC 09 1C         [ 2] 4132 	jp syntax_error
      001738                       4133 0$:	
      001738 85               [ 2] 4134 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001739 9F               [ 1] 4135 	ld a,xl 
      00173A A4 07            [ 1] 4136 	and a,#7
      00173C 88               [ 1] 4137 	push a   
      00173D A6 01            [ 1] 4138 	ld a,#1 
      00173F 0D 01            [ 1] 4139 1$: tnz (1,sp)
      001741 27 05            [ 1] 4140 	jreq 2$
      001743 48               [ 1] 4141 	sll a 
      001744 0A 01            [ 1] 4142 	dec (1,sp)
      001746 20 F7            [ 2] 4143 	jra 1$
      001748                       4144 2$: _drop 1 
      001748 5B 01            [ 2]    1     addw sp,#1 
      00174A 85               [ 2] 4145 	popw x 
      00174B F4               [ 1] 4146 	and a,(x)
      00174C 27 02            [ 1] 4147 	jreq 3$
      00174E A6 01            [ 1] 4148 	ld a,#1 
      001750 5F               [ 1] 4149 3$:	clrw x 
      001751 97               [ 1] 4150 	ld xl,a 
      001752 A6 84            [ 1] 4151 	ld a,#TK_INTGR
      001754 81               [ 4] 4152 	ret
                                   4153 
                                   4154 
                                   4155 ;--------------------
                                   4156 ; BASIC: POKE addr,byte
                                   4157 ; put a byte at addr 
                                   4158 ;--------------------
      001755                       4159 poke:
      001755 CD 10 F4         [ 4] 4160 	call arg_list 
      001758 A1 02            [ 1] 4161 	cp a,#2
      00175A 27 03            [ 1] 4162 	jreq 1$
      00175C CC 09 1C         [ 2] 4163 	jp syntax_error
      00175F                       4164 1$:	
      00175F 85               [ 2] 4165 	popw x  
      001760 9F               [ 1] 4166     ld a,xl 
      001761 85               [ 2] 4167 	popw x 
      001762 F7               [ 1] 4168 	ld (x),a 
      001763 81               [ 4] 4169 	ret 
                                   4170 
                                   4171 ;-----------------------
                                   4172 ; BASIC: PEEK(addr)
                                   4173 ; get the byte at addr 
                                   4174 ; input:
                                   4175 ;	none 
                                   4176 ; output:
                                   4177 ;	X 		value 
                                   4178 ;-----------------------
      001764                       4179 peek:
      001764 CD 10 EF         [ 4] 4180 	call func_args
      001767 A1 01            [ 1] 4181 	cp a,#1 
      001769 27 03            [ 1] 4182 	jreq 1$
      00176B CC 09 1C         [ 2] 4183 	jp syntax_error
      00176E 85               [ 2] 4184 1$: popw x 
      00176F F6               [ 1] 4185 	ld a,(x)
      001770 5F               [ 1] 4186 	clrw x 
      001771 97               [ 1] 4187 	ld xl,a 
      001772 A6 84            [ 1] 4188 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001774 81               [ 4] 4189 	ret 
                                   4190 
                                   4191 ;---------------------------
                                   4192 ; BASIC IF expr : instructions
                                   4193 ; evaluate expr and if true 
                                   4194 ; execute instructions on same line. 
                                   4195 ;----------------------------
      001775                       4196 if: 
      001775 CD 12 3F         [ 4] 4197 	call relation 
      001778 A1 84            [ 1] 4198 	cp a,#TK_INTGR
      00177A 27 03            [ 1] 4199 	jreq 1$ 
      00177C CC 09 1C         [ 2] 4200 	jp syntax_error
      00177F 4F               [ 1] 4201 1$:	clr a 
      001780 5D               [ 2] 4202 	tnzw x 
      001781 26 05            [ 1] 4203 	jrne 9$  
                                   4204 ;skip to next line
      001783 55 00 03 00 01   [ 1] 4205 	mov in,count
      001788 81               [ 4] 4206 9$:	ret 
                                   4207 
                                   4208 ;------------------------
                                   4209 ; BASIC: FOR var=expr 
                                   4210 ; set variable to expression 
                                   4211 ; leave variable address 
                                   4212 ; on stack and set
                                   4213 ; FLOOP bit in 'flags'
                                   4214 ;-----------------
                           000001  4215 	RETL1=1 ; return address  
                           000003  4216 	FSTEP=3  ; variable increment
                           000005  4217 	LIMIT=5 ; loop limit 
                           000007  4218 	CVAR=7   ; control variable 
                           000009  4219 	INW=9   ;  in.w saved
                           00000B  4220 	BPTR=11 ; baseptr saved
                           00000A  4221 	VSIZE=10  
      001789                       4222 for: ; { -- var_addr }
      001789 85               [ 2] 4223 	popw x ; call return address 
      00178A                       4224 	_vars VSIZE 
      00178A 52 0A            [ 2]    1     sub sp,#VSIZE 
      00178C 89               [ 2] 4225 	pushw x  ; RETL1 
      00178D A6 85            [ 1] 4226 	ld a,#TK_VAR 
      00178F CD 10 E2         [ 4] 4227 	call expect
      001792 1F 07            [ 2] 4228 	ldw (CVAR,sp),x  ; control variable 
      001794 CD 13 1F         [ 4] 4229 	call let_var 
      001797 72 14 00 23      [ 1] 4230 	bset flags,#FLOOP 
                                   4231 ; open space on stack for loop data 
      00179B 5F               [ 1] 4232 	clrw x 
      00179C 1F 0B            [ 2] 4233 	ldw (BPTR,sp),x 
      00179E 1F 09            [ 2] 4234 	ldw (INW,sp),x 
      0017A0 CD 0A 0E         [ 4] 4235 	call next_token 
      0017A3 A1 80            [ 1] 4236 	cp a,#TK_CMD 
      0017A5 27 03            [ 1] 4237 	jreq 1$
      0017A7 CC 09 1C         [ 2] 4238 	jp syntax_error
      0017AA                       4239 1$:  
      0017AA A3 17 B2         [ 2] 4240 	cpw x,#to 
      0017AD 27 03            [ 1] 4241 	jreq to
      0017AF CC 09 1C         [ 2] 4242 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4243 
                                   4244 ;-----------------------------------
                                   4245 ; BASIC: TO expr 
                                   4246 ; second part of FOR loop initilization
                                   4247 ; leave limit on stack and set 
                                   4248 ; FTO bit in 'flags'
                                   4249 ;-----------------------------------
      0017B2                       4250 to: ; { var_addr -- var_addr limit step }
      0017B2 72 04 00 23 03   [ 2] 4251 	btjt flags,#FLOOP,1$
      0017B7 CC 09 1C         [ 2] 4252 	jp syntax_error
      0017BA CD 12 3F         [ 4] 4253 1$: call relation  
      0017BD A1 84            [ 1] 4254 	cp a,#TK_INTGR 
      0017BF 27 03            [ 1] 4255 	jreq 2$ 
      0017C1 CC 09 1C         [ 2] 4256 	jp syntax_error
      0017C4 1F 05            [ 2] 4257 2$: ldw (LIMIT,sp),x
                                   4258 ;	ldw x,in.w 
      0017C6 CD 0A 0E         [ 4] 4259 	call next_token
      0017C9 A1 00            [ 1] 4260 	cp a,#TK_NONE  
      0017CB 27 0E            [ 1] 4261 	jreq 4$ 
      0017CD A1 80            [ 1] 4262 	cp a,#TK_CMD
      0017CF 26 05            [ 1] 4263 	jrne 3$
      0017D1 A3 17 E2         [ 2] 4264 	cpw x,#step 
      0017D4 27 0C            [ 1] 4265 	jreq step
      0017D6                       4266 3$:	
      0017D6                       4267 	_unget_token   	 
      0017D6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0017DB                       4268 4$:	
      0017DB AE 00 01         [ 2] 4269 	ldw x,#1   ; default step  
      0017DE 1F 03            [ 2] 4270 	ldw (FSTEP,sp),x 
      0017E0 20 14            [ 2] 4271 	jra store_loop_addr 
                                   4272 
                                   4273 
                                   4274 ;----------------------------------
                                   4275 ; BASIC: STEP expr 
                                   4276 ; optional third par of FOR loop
                                   4277 ; initialization. 	
                                   4278 ;------------------------------------
      0017E2                       4279 step: ; {var limit -- var limit step}
      0017E2 72 04 00 23 03   [ 2] 4280 	btjt flags,#FLOOP,1$
      0017E7 CC 09 1C         [ 2] 4281 	jp syntax_error
      0017EA CD 12 3F         [ 4] 4282 1$: call relation
      0017ED A1 84            [ 1] 4283 	cp a,#TK_INTGR
      0017EF 27 03            [ 1] 4284 	jreq 2$
      0017F1 CC 09 1C         [ 2] 4285 	jp syntax_error
      0017F4 1F 03            [ 2] 4286 2$:	ldw (FSTEP,sp),x ; step
                                   4287 ; leave loop back entry point on cstack 
                                   4288 ; cstack is 1 call deep from interpreter
      0017F6                       4289 store_loop_addr:
      0017F6 CE 00 04         [ 2] 4290 	ldw x,basicptr  
      0017F9 1F 0B            [ 2] 4291 	ldw (BPTR,sp),x 
      0017FB CE 00 00         [ 2] 4292 	ldw x,in.w 
      0017FE 1F 09            [ 2] 4293 	ldw (INW,sp),x   
      001800 72 15 00 23      [ 1] 4294 	bres flags,#FLOOP 
      001804 72 5C 00 20      [ 1] 4295 	inc loop_depth  
      001808 81               [ 4] 4296 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4297 
                                   4298 ;--------------------------------
                                   4299 ; BASIC: NEXT var 
                                   4300 ; FOR loop control 
                                   4301 ; increment variable with step 
                                   4302 ; and compare with limit 
                                   4303 ; loop if threshold not crossed.
                                   4304 ; else stack. 
                                   4305 ; and decrement 'loop_depth' 
                                   4306 ;--------------------------------
      001809                       4307 next: ; {var limit step retl1 -- [var limit step ] }
      001809 72 5D 00 20      [ 1] 4308 	tnz loop_depth 
      00180D 26 03            [ 1] 4309 	jrne 1$ 
      00180F CC 09 1C         [ 2] 4310 	jp syntax_error 
      001812                       4311 1$: 
      001812 A6 85            [ 1] 4312 	ld a,#TK_VAR 
      001814 CD 10 E2         [ 4] 4313 	call expect
                                   4314 ; check for good variable after NEXT 	 
      001817 13 07            [ 2] 4315 	cpw x,(CVAR,sp)
      001819 27 03            [ 1] 4316 	jreq 2$  
      00181B CC 09 1C         [ 2] 4317 	jp syntax_error ; not the good one 
      00181E                       4318 2$: ; increment variable 
      00181E FE               [ 2] 4319 	ldw x,(x)  ; get var value 
      00181F 72 FB 03         [ 2] 4320 	addw x,(FSTEP,sp) ; var+step 
      001822 16 07            [ 2] 4321 	ldw y,(CVAR,sp)
      001824 90 FF            [ 2] 4322 	ldw (y),x ; save var new value 
                                   4323 ; check sign of STEP  
      001826 A6 80            [ 1] 4324 	ld a,#0x80
      001828 15 03            [ 1] 4325 	bcp a,(FSTEP,sp)
      00182A 2A 06            [ 1] 4326 	jrpl 4$
                                   4327 ;negative step 
      00182C 13 05            [ 2] 4328 	cpw x,(LIMIT,sp)
      00182E 2F 1B            [ 1] 4329 	jrslt loop_done
      001830 20 04            [ 2] 4330 	jra loop_back 
      001832                       4331 4$: ; positive step
      001832 13 05            [ 2] 4332 	cpw x,(LIMIT,sp)
      001834 2C 15            [ 1] 4333 	jrsgt loop_done
      001836                       4334 loop_back:
      001836 1E 0B            [ 2] 4335 	ldw x,(BPTR,sp)
      001838 CF 00 04         [ 2] 4336 	ldw basicptr,x 
      00183B 72 01 00 23 05   [ 2] 4337 	btjf flags,#FRUN,1$ 
      001840 E6 02            [ 1] 4338 	ld a,(2,x)
      001842 C7 00 03         [ 1] 4339 	ld count,a
      001845 1E 09            [ 2] 4340 1$:	ldw x,(INW,sp)
      001847 CF 00 00         [ 2] 4341 	ldw in.w,x 
      00184A 81               [ 4] 4342 	ret 
      00184B                       4343 loop_done:
                                   4344 	; remove loop data from stack  
      00184B 85               [ 2] 4345 	popw x
      00184C                       4346 	_drop VSIZE 
      00184C 5B 0A            [ 2]    1     addw sp,#VSIZE 
      00184E 72 5A 00 20      [ 1] 4347 	dec loop_depth 
                                   4348 ;	pushw x 
                                   4349 ;	ret 
      001852 FC               [ 2] 4350 	jp (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4351 
                                   4352 ;----------------------------
                                   4353 ; called by goto/gosub
                                   4354 ; to get target line number 
                                   4355 ;---------------------------
      001853                       4356 get_target_line:
      001853 CD 12 3F         [ 4] 4357 	call relation 
      001856 A1 84            [ 1] 4358 	cp a,#TK_INTGR
      001858 27 03            [ 1] 4359 	jreq 1$
      00185A CC 09 1C         [ 2] 4360 	jp syntax_error
      00185D CD 04 A0         [ 4] 4361 1$:	call search_lineno  
      001860 5D               [ 2] 4362 	tnzw x 
      001861 26 05            [ 1] 4363 	jrne 2$ 
      001863 A6 05            [ 1] 4364 	ld a,#ERR_NO_LINE 
      001865 CC 09 1E         [ 2] 4365 	jp tb_error 
      001868 81               [ 4] 4366 2$:	ret 
                                   4367 
                                   4368 ;------------------------
                                   4369 ; BASIC: GOTO line# 
                                   4370 ; jump to line# 
                                   4371 ; here cstack is 2 call deep from interpreter 
                                   4372 ;------------------------
      001869                       4373 goto:
      001869 72 00 00 23 06   [ 2] 4374 	btjt flags,#FRUN,0$ 
      00186E A6 06            [ 1] 4375 	ld a,#ERR_RUN_ONLY
      001870 CC 09 1E         [ 2] 4376 	jp tb_error 
      001873 81               [ 4] 4377 	ret 
      001874 CD 18 53         [ 4] 4378 0$:	call get_target_line
      001877                       4379 jp_to_target:
      001877 CF 00 04         [ 2] 4380 	ldw basicptr,x 
      00187A E6 02            [ 1] 4381 	ld a,(2,x)
      00187C C7 00 03         [ 1] 4382 	ld count,a 
      00187F 35 03 00 01      [ 1] 4383 	mov in,#3 
      001883 81               [ 4] 4384 	ret 
                                   4385 
                                   4386 
                                   4387 ;--------------------
                                   4388 ; BASIC: GOSUB line#
                                   4389 ; basic subroutine call
                                   4390 ; actual line# and basicptr 
                                   4391 ; are saved on cstack
                                   4392 ; here cstack is 2 call deep from interpreter 
                                   4393 ;--------------------
                           000003  4394 	RET_ADDR=3
                           000005  4395 	RET_INW=5
                           000004  4396 	VSIZE=4  
      001884                       4397 gosub:
      001884 72 00 00 23 06   [ 2] 4398 	btjt flags,#FRUN,0$ 
      001889 A6 06            [ 1] 4399 	ld a,#ERR_RUN_ONLY
      00188B CC 09 1E         [ 2] 4400 	jp tb_error 
      00188E 81               [ 4] 4401 	ret 
      00188F 85               [ 2] 4402 0$:	popw x 
      001890                       4403 	_vars VSIZE  
      001890 52 04            [ 2]    1     sub sp,#VSIZE 
      001892 89               [ 2] 4404 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001893 CE 00 04         [ 2] 4405 	ldw x,basicptr
      001896 1F 03            [ 2] 4406 	ldw (RET_ADDR,sp),x 
      001898 CD 18 53         [ 4] 4407 	call get_target_line  
      00189B 89               [ 2] 4408 	pushw x 
      00189C CE 00 00         [ 2] 4409 	ldw x,in.w 
      00189F 1F 07            [ 2] 4410 	ldw (RET_INW+2,sp),x
      0018A1 85               [ 2] 4411 	popw x 
      0018A2 20 D3            [ 2] 4412 	jra jp_to_target
                                   4413 
                                   4414 ;------------------------
                                   4415 ; BASIC: RETURN 
                                   4416 ; exit from a subroutine 
                                   4417 ; 
                                   4418 ;------------------------
      0018A4                       4419 return:
      0018A4 72 00 00 23 05   [ 2] 4420 	btjt flags,#FRUN,0$ 
      0018A9 A6 06            [ 1] 4421 	ld a,#ERR_RUN_ONLY
      0018AB CC 09 1E         [ 2] 4422 	jp tb_error 
      0018AE                       4423 0$:	
      0018AE 1E 03            [ 2] 4424 	ldw x,(RET_ADDR,sp) 
      0018B0 CF 00 04         [ 2] 4425 	ldw basicptr,x
      0018B3 E6 02            [ 1] 4426 	ld a,(2,x)
      0018B5 C7 00 03         [ 1] 4427 	ld count,a  
      0018B8 1E 05            [ 2] 4428 	ldw x,(RET_INW,sp)
      0018BA CF 00 00         [ 2] 4429 	ldw in.w,x 
      0018BD 85               [ 2] 4430 	popw x 
      0018BE                       4431 	_drop VSIZE 
      0018BE 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018C0 89               [ 2] 4432 	pushw x
      0018C1 81               [ 4] 4433 	ret  
                                   4434 
                                   4435 
                                   4436 ;----------------------------------
                                   4437 ; BASIC: RUN
                                   4438 ; run BASIC program in RAM
                                   4439 ;----------------------------------- 
      0018C2                       4440 run: 
      0018C2 72 01 00 23 02   [ 2] 4441 	btjf flags,#FRUN,0$  
      0018C7 4F               [ 1] 4442 	clr a 
      0018C8 81               [ 4] 4443 	ret
      0018C9                       4444 0$: 
      0018C9 72 09 00 23 12   [ 2] 4445 	btjf flags,#FBREAK,1$
      0018CE                       4446 	_drop 2 
      0018CE 5B 02            [ 2]    1     addw sp,#2 
      0018D0 CD 16 56         [ 4] 4447 	call rest_context
      0018D3                       4448 	_drop CTXT_SIZE 
      0018D3 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0018D5 72 19 00 23      [ 1] 4449 	bres flags,#FBREAK 
      0018D9 72 10 00 23      [ 1] 4450 	bset flags,#FRUN 
      0018DD CC 09 C2         [ 2] 4451 	jp interpreter 
      0018E0 CE 00 1C         [ 2] 4452 1$:	ldw x,txtbgn
      0018E3 C3 00 1E         [ 2] 4453 	cpw x,txtend 
      0018E6 2B 0C            [ 1] 4454 	jrmi run_it 
      0018E8 AE 08 B5         [ 2] 4455 	ldw x,#err_no_prog
      0018EB CD 00 00         [ 4] 4456 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018EE 55 00 03 00 01   [ 1] 4457 	mov in,count
      0018F3 81               [ 4] 4458 	ret 
      0018F4                       4459 run_it:	 
      0018F4 CD 12 EC         [ 4] 4460     call ubound 
      0018F7                       4461 	_drop 2 ; drop return address 
      0018F7 5B 02            [ 2]    1     addw sp,#2 
                                   4462 ; clear data pointer 
      0018F9 5F               [ 1] 4463 	clrw x 
      0018FA CF 00 06         [ 2] 4464 	ldw data_ptr,x 
      0018FD 72 5F 00 08      [ 1] 4465 	clr data_ofs 
      001901 72 5F 00 09      [ 1] 4466 	clr data_len 
                                   4467 ; initialize BASIC pointer 
      001905 CE 00 1C         [ 2] 4468 	ldw x,txtbgn 
      001908 CF 00 04         [ 2] 4469 	ldw basicptr,x 
      00190B E6 02            [ 1] 4470 	ld a,(2,x)
      00190D C7 00 03         [ 1] 4471 	ld count,a
      001910 35 03 00 01      [ 1] 4472 	mov in,#3	
      001914 72 10 00 23      [ 1] 4473 	bset flags,#FRUN 
      001918 CC 09 C2         [ 2] 4474 	jp interpreter 
                                   4475 
                                   4476 
                                   4477 ;----------------------
                                   4478 ; BASIC: END
                                   4479 ; end running program
                                   4480 ;---------------------- 
      00191B                       4481 cmd_end: 
                                   4482 ; clean stack 
      00191B AE 17 FF         [ 2] 4483 	ldw x,#STACK_EMPTY
      00191E 94               [ 1] 4484 	ldw sp,x 
      00191F CC 09 A3         [ 2] 4485 	jp warm_start
                                   4486 
                                   4487 ;-----------------
                                   4488 ; 1 Khz beep 
                                   4489 ;-----------------
      001922                       4490 beep_1khz:: 
      001922 AE 00 64         [ 2] 4491 	ldw x,#100
      001925 90 AE 03 E8      [ 2] 4492 	ldw y,#1000
      001929 20 0D            [ 2] 4493 	jra beep
                                   4494 
                                   4495 ;-----------------------
                                   4496 ; BASIC: TONE expr1,expr2
                                   4497 ; used TIMER2 channel 1
                                   4498 ; to produce a tone 
                                   4499 ; arguments:
                                   4500 ;    expr1   frequency 
                                   4501 ;    expr2   duration msec.
                                   4502 ;---------------------------
      00192B                       4503 tone:
      00192B CD 10 F4         [ 4] 4504 	call arg_list 
      00192E A1 02            [ 1] 4505 	cp a,#2 
      001930 27 03            [ 1] 4506 	jreq 1$
      001932 CC 09 1C         [ 2] 4507 	jp syntax_error 
      001935                       4508 1$: 
      001935 85               [ 2] 4509 	popw x ; duration
      001936 90 85            [ 2] 4510 	popw y ; frequency 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001938                       4511 beep:  
      001938 89               [ 2] 4512 	pushw x 
      001939 AE F4 24         [ 2] 4513 	ldw x,#TIM2_CLK_FREQ
      00193C 65               [ 2] 4514 	divw x,y 
                                   4515 ; round to nearest integer 
      00193D 90 A3 7A 12      [ 2] 4516 	cpw y,#TIM2_CLK_FREQ/2
      001941 2B 01            [ 1] 4517 	jrmi 2$
      001943 5C               [ 1] 4518 	incw x 
      001944                       4519 2$:	 
      001944 9E               [ 1] 4520 	ld a,xh 
      001945 C7 53 0D         [ 1] 4521 	ld TIM2_ARRH,a 
      001948 9F               [ 1] 4522 	ld a,xl 
      001949 C7 53 0E         [ 1] 4523 	ld TIM2_ARRL,a 
                                   4524 ; 50% duty cycle 
      00194C 8C               [ 1] 4525 	ccf 
      00194D 56               [ 2] 4526 	rrcw x 
      00194E 9E               [ 1] 4527 	ld a,xh 
      00194F C7 53 0F         [ 1] 4528 	ld TIM2_CCR1H,a 
      001952 9F               [ 1] 4529 	ld a,xl
      001953 C7 53 10         [ 1] 4530 	ld TIM2_CCR1L,a
      001956 72 10 53 08      [ 1] 4531 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      00195A 72 10 53 00      [ 1] 4532 	bset TIM2_CR1,#TIM2_CR1_CEN
      00195E 72 10 53 04      [ 1] 4533 	bset TIM2_EGR,#TIM2_EGR_UG
      001962 85               [ 2] 4534 	popw x 
      001963 CD 1E E8         [ 4] 4535 	call pause02
      001966 72 11 53 08      [ 1] 4536 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00196A 72 11 53 00      [ 1] 4537 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00196E 81               [ 4] 4538 	ret 
                                   4539 
                                   4540 ;-------------------------------
                                   4541 ; BASIC: ADCON 0|1 [,divisor]  
                                   4542 ; disable/enanble ADC 
                                   4543 ;-------------------------------
                           000003  4544 	ONOFF=3 
                           000001  4545 	DIVSOR=1
                           000004  4546 	VSIZE=4 
      00196F                       4547 power_adc:
      00196F CD 10 F4         [ 4] 4548 	call arg_list 
      001972 A1 02            [ 1] 4549 	cp a,#2	
      001974 27 0B            [ 1] 4550 	jreq 1$
      001976 A1 01            [ 1] 4551 	cp a,#1 
      001978 27 03            [ 1] 4552 	jreq 0$ 
      00197A CC 09 1C         [ 2] 4553 	jp syntax_error 
      00197D AE 00 00         [ 2] 4554 0$: ldw x,#0
      001980 89               [ 2] 4555 	pushw x  ; divisor 
      001981 1E 03            [ 2] 4556 1$: ldw x,(ONOFF,sp)
      001983 5D               [ 2] 4557 	tnzw x 
      001984 27 1A            [ 1] 4558 	jreq 2$ 
      001986 1E 01            [ 2] 4559 	ldw x,(DIVSOR,sp) ; divisor 
      001988 9F               [ 1] 4560 	ld a,xl
      001989 A4 07            [ 1] 4561 	and a,#7
      00198B 4E               [ 1] 4562 	swap a 
      00198C C7 54 01         [ 1] 4563 	ld ADC_CR1,a
      00198F 72 16 50 CA      [ 1] 4564 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001993 72 10 54 01      [ 1] 4565 	bset ADC_CR1,#ADC_CR1_ADON 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001997                       4566 	_usec_dly 7 
      001997 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00199A 5A               [ 2]    2     decw x
      00199B 9D               [ 1]    3     nop 
      00199C 26 FA            [ 1]    4     jrne .-4
      00199E 20 08            [ 2] 4567 	jra 3$
      0019A0 72 11 54 01      [ 1] 4568 2$: bres ADC_CR1,#ADC_CR1_ADON
      0019A4 72 17 50 CA      [ 1] 4569 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0019A8                       4570 3$:	_drop VSIZE 
      0019A8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0019AA 81               [ 4] 4571 	ret
                                   4572 
                                   4573 ;-----------------------------
                                   4574 ; BASIC: ADCREAD (channel)
                                   4575 ; read adc channel {0..5}
                                   4576 ; output:
                                   4577 ;   A 		TK_INTGR 
                                   4578 ;   X 		value 
                                   4579 ;-----------------------------
      0019AB                       4580 analog_read:
      0019AB CD 10 EF         [ 4] 4581 	call func_args 
      0019AE A1 01            [ 1] 4582 	cp a,#1 
      0019B0 27 03            [ 1] 4583 	jreq 1$
      0019B2 CC 09 1C         [ 2] 4584 	jp syntax_error
      0019B5 85               [ 2] 4585 1$: popw x 
      0019B6 A3 00 05         [ 2] 4586 	cpw x,#5 
      0019B9 23 05            [ 2] 4587 	jrule 2$
      0019BB A6 0A            [ 1] 4588 	ld a,#ERR_BAD_VALUE
      0019BD CC 09 1E         [ 2] 4589 	jp tb_error 
      0019C0 9F               [ 1] 4590 2$: ld a,xl
      0019C1 C7 00 0D         [ 1] 4591 	ld acc8,a 
      0019C4 A6 05            [ 1] 4592 	ld a,#5
      0019C6 C0 00 0D         [ 1] 4593 	sub a,acc8 
      0019C9 C7 54 00         [ 1] 4594 	ld ADC_CSR,a
      0019CC 72 16 54 02      [ 1] 4595 	bset ADC_CR2,#ADC_CR2_ALIGN
      0019D0 72 10 54 01      [ 1] 4596 	bset ADC_CR1,#ADC_CR1_ADON
      0019D4 72 0F 54 00 FB   [ 2] 4597 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0019D9 CE 54 04         [ 2] 4598 	ldw x,ADC_DRH
      0019DC A6 84            [ 1] 4599 	ld a,#TK_INTGR
      0019DE 81               [ 4] 4600 	ret 
                                   4601 
                                   4602 ;-----------------------
                                   4603 ; BASIC: DREAD(pin)
                                   4604 ; Arduino pins 
                                   4605 ; read state of a digital pin 
                                   4606 ; pin# {0..15}
                                   4607 ; output:
                                   4608 ;    A 		TK_INTGR
                                   4609 ;    X      0|1 
                                   4610 ;-------------------------
                           000001  4611 	PINNO=1
                           000001  4612 	VSIZE=1
      0019DF                       4613 digital_read:
      0019DF                       4614 	_vars VSIZE 
      0019DF 52 01            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0019E1 CD 10 EF         [ 4] 4615 	call func_args
      0019E4 A1 01            [ 1] 4616 	cp a,#1
      0019E6 27 03            [ 1] 4617 	jreq 1$
      0019E8 CC 09 1C         [ 2] 4618 	jp syntax_error
      0019EB 85               [ 2] 4619 1$: popw x 
      0019EC A3 00 0F         [ 2] 4620 	cpw x,#15 
      0019EF 23 05            [ 2] 4621 	jrule 2$
      0019F1 A6 0A            [ 1] 4622 	ld a,#ERR_BAD_VALUE
      0019F3 CC 09 1E         [ 2] 4623 	jp tb_error 
      0019F6 CD 20 26         [ 4] 4624 2$:	call select_pin 
      0019F9 6B 01            [ 1] 4625 	ld (PINNO,sp),a
      0019FB E6 01            [ 1] 4626 	ld a,(GPIO_IDR,x)
      0019FD 0D 01            [ 1] 4627 	tnz (PINNO,sp)
      0019FF 27 05            [ 1] 4628 	jreq 8$
      001A01 44               [ 1] 4629 3$: srl a 
      001A02 0A 01            [ 1] 4630 	dec (PINNO,sp)
      001A04 26 FB            [ 1] 4631 	jrne 3$ 
      001A06 A4 01            [ 1] 4632 8$: and a,#1 
      001A08 5F               [ 1] 4633 	clrw x 
      001A09 97               [ 1] 4634 	ld xl,a 
      001A0A A6 84            [ 1] 4635 	ld a,#TK_INTGR
      001A0C                       4636 	_drop VSIZE
      001A0C 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A0E 81               [ 4] 4637 	ret
                                   4638 
                                   4639 ;-----------------------
                                   4640 ; BASIC: DWRITE pin,0|1
                                   4641 ; Arduino pins 
                                   4642 ; write to a digital pin 
                                   4643 ; pin# {0..15}
                                   4644 ; output:
                                   4645 ;    A 		TK_INTGR
                                   4646 ;    X      0|1 
                                   4647 ;-------------------------
                           000001  4648 	PINNO=1
                           000002  4649 	PINVAL=2
                           000002  4650 	VSIZE=2
      001A0F                       4651 digital_write:
      001A0F                       4652 	_vars VSIZE 
      001A0F 52 02            [ 2]    1     sub sp,#VSIZE 
      001A11 CD 10 F4         [ 4] 4653 	call arg_list  
      001A14 A1 02            [ 1] 4654 	cp a,#2 
      001A16 27 03            [ 1] 4655 	jreq 1$
      001A18 CC 09 1C         [ 2] 4656 	jp syntax_error
      001A1B 85               [ 2] 4657 1$: popw x 
      001A1C 9F               [ 1] 4658 	ld a,xl 
      001A1D 6B 02            [ 1] 4659 	ld (PINVAL,sp),a
      001A1F 85               [ 2] 4660 	popw x 
      001A20 A3 00 0F         [ 2] 4661 	cpw x,#15 
      001A23 23 05            [ 2] 4662 	jrule 2$
      001A25 A6 0A            [ 1] 4663 	ld a,#ERR_BAD_VALUE
      001A27 CC 09 1E         [ 2] 4664 	jp tb_error 
      001A2A CD 20 26         [ 4] 4665 2$:	call select_pin 
      001A2D 6B 01            [ 1] 4666 	ld (PINNO,sp),a 
      001A2F A6 01            [ 1] 4667 	ld a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A31 0D 01            [ 1] 4668 	tnz (PINNO,sp)
      001A33 27 05            [ 1] 4669 	jreq 4$
      001A35 48               [ 1] 4670 3$: sll a
      001A36 0A 01            [ 1] 4671 	dec (PINNO,sp)
      001A38 26 FB            [ 1] 4672 	jrne 3$
      001A3A 0D 02            [ 1] 4673 4$: tnz (PINVAL,sp)
      001A3C 26 05            [ 1] 4674 	jrne 5$
      001A3E 43               [ 1] 4675 	cpl a 
      001A3F E4 00            [ 1] 4676 	and a,(GPIO_ODR,x)
      001A41 20 02            [ 2] 4677 	jra 8$
      001A43 EA 00            [ 1] 4678 5$: or a,(GPIO_ODR,x)
      001A45 E7 00            [ 1] 4679 8$: ld (GPIO_ODR,x),a 
      001A47                       4680 	_drop VSIZE 
      001A47 5B 02            [ 2]    1     addw sp,#VSIZE 
      001A49 81               [ 4] 4681 	ret
                                   4682 
                                   4683 
                                   4684 ;-----------------------
                                   4685 ; BASIC: STOP
                                   4686 ; stop progam execution  
                                   4687 ; without resetting pointers 
                                   4688 ; the program is resumed
                                   4689 ; with RUN 
                                   4690 ;-------------------------
      001A4A                       4691 stop:
      001A4A 72 00 00 23 02   [ 2] 4692 	btjt flags,#FRUN,2$
      001A4F 4F               [ 1] 4693 	clr a
      001A50 81               [ 4] 4694 	ret 
      001A51                       4695 2$:	 
                                   4696 ; create space on cstack to save context 
      001A51 AE 1A 78         [ 2] 4697 	ldw x,#break_point 
      001A54 CD 00 00         [ 4] 4698 	call puts 
      001A57                       4699 	_drop 2 ;drop return address 
      001A57 5B 02            [ 2]    1     addw sp,#2 
      001A59                       4700 	_vars CTXT_SIZE ; context size 
      001A59 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001A5B CD 16 46         [ 4] 4701 	call save_context 
      001A5E AE 16 90         [ 2] 4702 	ldw x,#tib 
      001A61 CF 00 04         [ 2] 4703 	ldw basicptr,x
      001A64 7F               [ 1] 4704 	clr (x)
      001A65 72 5F 00 03      [ 1] 4705 	clr count  
      001A69 5F               [ 1] 4706 	clrw x 
      001A6A CF 00 00         [ 2] 4707 	ldw in.w,x
      001A6D 72 11 00 23      [ 1] 4708 	bres flags,#FRUN 
      001A71 72 18 00 23      [ 1] 4709 	bset flags,#FBREAK
      001A75 CC 09 C2         [ 2] 4710 	jp interpreter 
      001A78 0A 62 72 65 61 6B 20  4711 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4712 
                                   4713 ;-----------------------
                                   4714 ; BASIC: NEW
                                   4715 ; from command line only 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4716 ; free program memory
                                   4717 ; and clear variables 
                                   4718 ;------------------------
      001A96                       4719 new: 
      001A96 72 01 00 23 01   [ 2] 4720 	btjf flags,#FRUN,0$ 
      001A9B 81               [ 4] 4721 	ret 
      001A9C                       4722 0$:	
      001A9C CD 07 86         [ 4] 4723 	call clear_basic 
      001A9F 81               [ 4] 4724 	ret 
                                   4725 	 
                                   4726 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4727 ;  file system routines
                                   4728 ;  MCU flash memory from
                                   4729 ;  0x10000-0x27fff is 
                                   4730 ;  used to store BASIC 
                                   4731 ;  program files. 
                                   4732 ;  use 128 bytes sectors
                                   4733 ;  because this is the MCU 
                                   4734 ;  row size.
                                   4735 ;  file entry aligned to row
                                   4736 ;  	name  variable length
                                   4737 ;  	size  2 bytes  
                                   4738 ; 	data  variable length 
                                   4739 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4740 
                                   4741 ;---------------------------
                                   4742 ; fill pad with zeros 
                                   4743 ;--------------------------
      001AA0                       4744 zero_pad:
      001AA0 AE 16 E0         [ 2] 4745 	ldw x,#pad 
      001AA3 A6 80            [ 1] 4746 	ld a,#PAD_SIZE 
      001AA5 7F               [ 1] 4747 1$:	clr (x)
      001AA6 5C               [ 1] 4748 	incw x 
      001AA7 4A               [ 1] 4749 	dec a 
      001AA8 26 FB            [ 1] 4750 	jrne 1$
      001AAA 81               [ 4] 4751 	ret 
                                   4752 
                                   4753 ;--------------------------
                                   4754 ; align farptr to BLOCK_SIZE 
                                   4755 ;---------------------------
      001AAB                       4756 row_align:
      001AAB A6 7F            [ 1] 4757 	ld a,#0x7f 
      001AAD C4 00 18         [ 1] 4758 	and a,farptr+2 
      001AB0 27 13            [ 1] 4759 	jreq 1$ 
      001AB2 CE 00 17         [ 2] 4760 	ldw x,farptr+1 
      001AB5 1C 00 80         [ 2] 4761 	addw x,#BLOCK_SIZE 
      001AB8 24 04            [ 1] 4762 	jrnc 0$
      001ABA 72 5C 00 16      [ 1] 4763 	inc farptr 
      001ABE 9F               [ 1] 4764 0$: ld a,xl 
      001ABF A4 80            [ 1] 4765 	and a,#0x80
      001AC1 97               [ 1] 4766 	ld xl,a
      001AC2 CF 00 17         [ 2] 4767 	ldw farptr+1,x  	
      001AC5 81               [ 4] 4768 1$:	ret
                                   4769 
                                   4770 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4771 ; input:
                                   4772 ;   X     increment 
                                   4773 ; output:
                                   4774 ;   farptr  incremented 
                                   4775 ;---------------------
      001AC6                       4776 incr_farptr:
      001AC6 72 BB 00 17      [ 2] 4777 	addw x,farptr+1 
      001ACA 24 04            [ 1] 4778 	jrnc 1$
      001ACC 72 5C 00 16      [ 1] 4779 	inc farptr 
      001AD0 CF 00 17         [ 2] 4780 1$:	ldw farptr+1,x  
      001AD3 81               [ 4] 4781 	ret 
                                   4782 
                                   4783 ;------------------------------
                                   4784 ; extended flash memory used as FLASH_DRIVE 
                                   4785 ; seek end of used flash drive   
                                   4786 ; starting at 0x10000 address.
                                   4787 ; 4 consecutives 0 bytes signal free space. 
                                   4788 ; input:
                                   4789 ;	none
                                   4790 ; output:
                                   4791 ;   ffree     free_addr| 0 if memory full.
                                   4792 ;------------------------------
      001AD4                       4793 seek_fdrive:
                                   4794 ; start scan at 0x10000 address 
      001AD4 A6 01            [ 1] 4795 	ld a,#1
      001AD6 C7 00 16         [ 1] 4796 	ld farptr,a 
      001AD9 5F               [ 1] 4797 	clrw x 
      001ADA CF 00 17         [ 2] 4798 	ldw farptr+1,x 
      001ADD                       4799 1$:
      001ADD AE 00 03         [ 2] 4800 	ldw x,#3  
      001AE0 92 AF 00 16      [ 5] 4801 2$:	ldf a,([farptr],x) 
      001AE4 26 05            [ 1] 4802 	jrne 3$
      001AE6 5A               [ 2] 4803 	decw x
      001AE7 2A F7            [ 1] 4804 	jrpl 2$
      001AE9 20 0E            [ 2] 4805 	jra 4$ 
      001AEB AE 00 80         [ 2] 4806 3$:	ldw x,#BLOCK_SIZE 
      001AEE CD 1A C6         [ 4] 4807 	call incr_farptr
      001AF1 AE 02 80         [ 2] 4808 	ldw x,#0x280  
      001AF4 C3 00 16         [ 2] 4809 	cpw x,farptr
      001AF7 2B E4            [ 1] 4810 	jrmi 1$
      001AF9                       4811 4$: ; copy farptr to ffree	 
      001AF9 CE 00 16         [ 2] 4812 	ldw x,farptr 
      001AFC C6 00 18         [ 1] 4813 	ld a,farptr+2 
      001AFF CF 00 19         [ 2] 4814 	ldw ffree,x 
      001B02 C7 00 1B         [ 1] 4815 	ld ffree+2,a  
      001B05 81               [ 4] 4816 	ret 
                                   4817 
                                   4818 ;-----------------------
                                   4819 ; return amount of free 
                                   4820 ; space on flash drive
                                   4821 ; input:
                                   4822 ;   none
                                   4823 ; output:
                                   4824 ;   acc24   free space 
                                   4825 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B06                       4826 disk_free:
      001B06 AE 80 00         [ 2] 4827 	ldw x,#0x8000
      001B09 72 B0 00 1A      [ 2] 4828 	subw x,ffree+1
      001B0D A6 02            [ 1] 4829 	ld a,#2
      001B0F C2 00 19         [ 1] 4830 	sbc a,ffree 
      001B12 C7 00 0B         [ 1] 4831 	ld acc24,a 
      001B15 CF 00 0C         [ 2] 4832 	ldw acc16,x 
      001B18 81               [ 4] 4833 	ret 
                                   4834 
                                   4835 ;-----------------------
                                   4836 ; compare file name 
                                   4837 ; with name pointed by Y  
                                   4838 ; input:
                                   4839 ;   farptr   file name 
                                   4840 ;   Y        target name 
                                   4841 ; output:
                                   4842 ;   farptr 	 at file_name
                                   4843 ;   X 		 farptr[x] point at size field  
                                   4844 ;   Carry    0|1 no match|match  
                                   4845 ;----------------------
      001B19                       4846 cmp_name:
      001B19 5F               [ 1] 4847 	clrw x
      001B1A 92 AF 00 16      [ 5] 4848 1$:	ldf a,([farptr],x)
      001B1E 90 F1            [ 1] 4849 	cp a,(y)
      001B20 26 08            [ 1] 4850 	jrne 4$
      001B22 4D               [ 1] 4851 	tnz a 
      001B23 27 12            [ 1] 4852 	jreq 9$ 
      001B25 5C               [ 1] 4853     incw x 
      001B26 90 5C            [ 1] 4854 	incw y 
      001B28 20 F0            [ 2] 4855 	jra 1$
      001B2A                       4856 4$: ;no match 
      001B2A 4D               [ 1] 4857 	tnz a 
      001B2B 27 07            [ 1] 4858 	jreq 5$
      001B2D 5C               [ 1] 4859 	incw x 
      001B2E 92 AF 00 16      [ 5] 4860 	ldf a,([farptr],x)
      001B32 20 F6            [ 2] 4861 	jra 4$  
      001B34 5C               [ 1] 4862 5$:	incw x ; farptr[x] point at 'size' field 
      001B35 98               [ 1] 4863 	rcf 
      001B36 81               [ 4] 4864 	ret
      001B37                       4865 9$: ; match  
      001B37 5C               [ 1] 4866 	incw x  ; farptr[x] at 'size' field 
      001B38 99               [ 1] 4867 	scf 
      001B39 81               [ 4] 4868 	ret 
                                   4869 
                                   4870 ;-----------------------
                                   4871 ; search file in 
                                   4872 ; flash memory 
                                   4873 ; input:
                                   4874 ;   Y       file name  
                                   4875 ; output:
                                   4876 ;   farptr  addr at name|0
                                   4877 ;   X       offset to size field
                                   4878 ;-----------------------
                           000001  4879 	FSIZE=1
                           000003  4880 	YSAVE=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                           000004  4881 	VSIZE=4 
      001B3A                       4882 search_file: 
      001B3A                       4883 	_vars VSIZE
      001B3A 52 04            [ 2]    1     sub sp,#VSIZE 
      001B3C 17 03            [ 2] 4884 	ldw (YSAVE,sp),y  
      001B3E 5F               [ 1] 4885 	clrw x 
      001B3F CF 00 17         [ 2] 4886 	ldw farptr+1,x 
      001B42 35 01 00 16      [ 1] 4887 	mov farptr,#1
      001B46                       4888 1$:	
                                   4889 ; check if farptr is after any file 
                                   4890 ; if  0 then so.
      001B46 92 BC 00 16      [ 5] 4891 	ldf a,[farptr]
      001B4A 27 27            [ 1] 4892 	jreq 6$
      001B4C 5F               [ 1] 4893 2$: clrw x 	
      001B4D 16 03            [ 2] 4894 	ldw y,(YSAVE,sp) 
      001B4F CD 1B 19         [ 4] 4895 	call cmp_name
      001B52 25 2F            [ 1] 4896 	jrc 9$
      001B54 92 AF 00 16      [ 5] 4897 	ldf a,([farptr],x)
      001B58 6B 01            [ 1] 4898 	ld (FSIZE,sp),a 
      001B5A 5C               [ 1] 4899 	incw x 
      001B5B 92 AF 00 16      [ 5] 4900 	ldf a,([farptr],x)
      001B5F 6B 02            [ 1] 4901 	ld (FSIZE+1,sp),a 
      001B61 5C               [ 1] 4902 	incw x 
      001B62 72 FB 01         [ 2] 4903 	addw x,(FSIZE,sp) ; skip over file data
      001B65 CD 1A C6         [ 4] 4904 	call incr_farptr
      001B68 CD 1A AB         [ 4] 4905 	call row_align  
      001B6B AE 02 80         [ 2] 4906 	ldw x,#0x280
      001B6E C3 00 16         [ 2] 4907 	cpw x,farptr 
      001B71 2A D3            [ 1] 4908 	jrpl 1$
      001B73                       4909 6$: ; file not found 
      001B73 72 5F 00 16      [ 1] 4910 	clr farptr
      001B77 72 5F 00 17      [ 1] 4911 	clr farptr+1 
      001B7B 72 5F 00 18      [ 1] 4912 	clr farptr+2 
      001B7F                       4913 	_drop VSIZE 
      001B7F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B81 98               [ 1] 4914 	rcf
      001B82 81               [ 4] 4915 	ret
      001B83                       4916 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B83                       4917 	_drop VSIZE 
      001B83 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B85 99               [ 1] 4918 	scf 	
      001B86 81               [ 4] 4919 	ret
                                   4920 
                                   4921 ;--------------------------------
                                   4922 ; BASIC: SAVE "name" 
                                   4923 ; save text program in 
                                   4924 ; flash memory used as permanent
                                   4925 ; storage from address 0x10000-0x27fff 
                                   4926 ;--------------------------------
                           000001  4927 	BSIZE=1
                           000003  4928 	NAMEPTR=3
                           000005  4929 	XSAVE=5
                           000007  4930 	YSAVE=7
                           000008  4931 	VSIZE=8 
      001B87                       4932 save:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001B87 72 01 00 23 05   [ 2] 4933 	btjf flags,#FRUN,0$ 
      001B8C A6 07            [ 1] 4934 	ld a,#ERR_CMD_ONLY 
      001B8E CC 09 1E         [ 2] 4935 	jp tb_error
      001B91                       4936 0$:	 
      001B91 CE 00 1E         [ 2] 4937 	ldw x,txtend 
      001B94 72 B0 00 1C      [ 2] 4938 	subw x,txtbgn
      001B98 26 0C            [ 1] 4939 	jrne 1$
                                   4940 ; nothing to save 
      001B9A AE 08 B5         [ 2] 4941 	ldw x,#err_no_prog 
      001B9D CD 00 00         [ 4] 4942 	call puts 
      001BA0 55 00 03 00 01   [ 1] 4943 	mov in,count 
      001BA5 81               [ 4] 4944 	ret  	
      001BA6                       4945 1$:	
      001BA6                       4946 	_vars VSIZE 
      001BA6 52 08            [ 2]    1     sub sp,#VSIZE 
      001BA8 1F 01            [ 2] 4947 	ldw (BSIZE,sp),x 
      001BAA CD 0A 0E         [ 4] 4948 	call next_token	
      001BAD A1 02            [ 1] 4949 	cp a,#TK_QSTR
      001BAF 27 03            [ 1] 4950 	jreq 2$
      001BB1 CC 09 1C         [ 2] 4951 	jp syntax_error
      001BB4                       4952 2$: 
      001BB4 1F 03            [ 2] 4953 	ldw (NAMEPTR,sp),x  
      001BB6 CD 01 9C         [ 4] 4954 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   4955 ; check if enough free space 
      001BB9 CD 04 34         [ 4] 4956 	call strlen 
      001BBC AB 03            [ 1] 4957 	add a,#3
      001BBE 5F               [ 1] 4958 	clrw x 
      001BBF 97               [ 1] 4959 	ld xl,a 
      001BC0 72 FB 01         [ 2] 4960 	addw x,(BSIZE,sp)
      001BC3 4F               [ 1] 4961 	clr a 
      001BC4 72 BB 00 1A      [ 2] 4962 	addw x,ffree+1 
      001BC8 C9 00 19         [ 1] 4963 	adc a,ffree 
      001BCB A1 02            [ 1] 4964 	cp a,#2
      001BCD 2B 0A            [ 1] 4965 	jrmi 21$
      001BCF A3 80 00         [ 2] 4966 	cpw x,#0x8000
      001BD2 2B 05            [ 1] 4967 	jrmi 21$
      001BD4 A6 0E            [ 1] 4968 	ld a,#ERR_NO_FSPACE  
      001BD6 CC 09 1E         [ 2] 4969 	jp tb_error
      001BD9                       4970 21$: 
                                   4971 ; check for existing file of that name 
      001BD9 16 03            [ 2] 4972 	ldw y,(NAMEPTR,sp)	
      001BDB CD 1B 3A         [ 4] 4973 	call search_file 
      001BDE 24 05            [ 1] 4974 	jrnc 3$ 
      001BE0 A6 08            [ 1] 4975 	ld a,#ERR_DUPLICATE 
      001BE2 CC 09 1E         [ 2] 4976 	jp tb_error 
      001BE5                       4977 3$:	; initialize farptr 
      001BE5 CE 00 19         [ 2] 4978 	ldw x,ffree 
      001BE8 C6 00 1B         [ 1] 4979 	ld a,ffree+2 
      001BEB CF 00 16         [ 2] 4980 	ldw farptr,x 
      001BEE C7 00 18         [ 1] 4981 	ld farptr+2,a 
                                   4982 ;** write file name to row buffer **	
      001BF1 16 03            [ 2] 4983 	ldw y,(NAMEPTR,sp)  
      001BF3 AE 16 E0         [ 2] 4984 	ldw x,#pad 
      001BF6 CD 04 50         [ 4] 4985 	call strcpy
      001BF9 CD 04 34         [ 4] 4986 	call strlen 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001BFC 5F               [ 1] 4987 	clrw x 
      001BFD 97               [ 1] 4988 	ld xl,a 
      001BFE 5C               [ 1] 4989 	incw  x
      001BFF 1C 16 E0         [ 2] 4990 	addw x,#pad 
                                   4991 ; ** write file size to row buffer 
      001C02 16 01            [ 2] 4992 	ldw y,(BSIZE,sp)
      001C04 FF               [ 2] 4993 	ldw (x),y 
      001C05 1C 00 02         [ 2] 4994 	addw x,#2 
                                   4995 ; ** write file data to row buffer 
      001C08 90 CE 00 1C      [ 2] 4996 	ldw y,txtbgn 
      001C0C 90 F6            [ 1] 4997 6$:	ld a,(y)
      001C0E 90 5C            [ 1] 4998 	incw y
      001C10 F7               [ 1] 4999 	ld (x),a 
      001C11 5C               [ 1] 5000 	incw x
      001C12 90 C3 00 1E      [ 2] 5001 	cpw y,txtend 
      001C16 27 05            [ 1] 5002 	jreq 12$
      001C18 A3 17 60         [ 2] 5003 	cpw x,#stack_full 
      001C1B 2B EF            [ 1] 5004 	jrmi 6$
      001C1D                       5005 12$:
      001C1D 17 07            [ 2] 5006 	ldw (YSAVE,sp),y 
      001C1F                       5007 14$: ; zero buffer end 
      001C1F A3 17 60         [ 2] 5008 	cpw x,#stack_full
      001C22 27 04            [ 1] 5009 	jreq 16$
      001C24 7F               [ 1] 5010 	clr (x)
      001C25 5C               [ 1] 5011 	incw x 
      001C26 20 F7            [ 2] 5012 	jra 14$
      001C28                       5013 16$:
      001C28 AE 16 E0         [ 2] 5014 	ldw x,#pad 
      001C2B CD 01 B0         [ 4] 5015 	call write_row 
      001C2E AE 00 80         [ 2] 5016 	ldw x,#BLOCK_SIZE 
      001C31 CD 1A C6         [ 4] 5017 	call incr_farptr
      001C34 AE 16 E0         [ 2] 5018 	ldw x,#pad 
      001C37 16 07            [ 2] 5019 	ldw y,(YSAVE,sp)
      001C39 90 C3 00 1E      [ 2] 5020 	cpw y,txtend 
      001C3D 2B CD            [ 1] 5021 	jrmi 6$
                                   5022 ; save farptr in ffree
      001C3F CE 00 16         [ 2] 5023 	ldw x,farptr 
      001C42 C6 00 18         [ 1] 5024 	ld a,farptr+2 
      001C45 CF 00 19         [ 2] 5025 	ldw ffree,x 
      001C48 C7 00 1B         [ 1] 5026 	ld ffree+2,a
                                   5027 ; print file size 	
      001C4B 1E 01            [ 2] 5028 	ldw x,(BSIZE,sp) 
      001C4D CD 0A 6F         [ 4] 5029 	call print_int 
      001C50                       5030 	_drop VSIZE 
      001C50 5B 08            [ 2]    1     addw sp,#VSIZE 
      001C52 81               [ 4] 5031 	ret 
                                   5032 
                                   5033 ;----------------------
                                   5034 ; load file in RAM memory
                                   5035 ; input:
                                   5036 ;    farptr point at file size 
                                   5037 ; output:
                                   5038 ;   y point after BASIC program in RAM.
                                   5039 ;------------------------
      001C53                       5040 load_file:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C53 CD 1A C6         [ 4] 5041 	call incr_farptr  
      001C56 CD 07 86         [ 4] 5042 	call clear_basic  
      001C59 5F               [ 1] 5043 	clrw x
      001C5A 92 AF 00 16      [ 5] 5044 	ldf a,([farptr],x)
      001C5E 90 95            [ 1] 5045 	ld yh,a 
      001C60 5C               [ 1] 5046 	incw x  
      001C61 92 AF 00 16      [ 5] 5047 	ldf a,([farptr],x)
      001C65 5C               [ 1] 5048 	incw x 
      001C66 90 97            [ 1] 5049 	ld yl,a 
      001C68 72 B9 00 1C      [ 2] 5050 	addw y,txtbgn
      001C6C 90 CF 00 1E      [ 2] 5051 	ldw txtend,y
      001C70 90 CE 00 1C      [ 2] 5052 	ldw y,txtbgn
      001C74                       5053 3$:	; load BASIC text 	
      001C74 92 AF 00 16      [ 5] 5054 	ldf a,([farptr],x)
      001C78 90 F7            [ 1] 5055 	ld (y),a 
      001C7A 5C               [ 1] 5056 	incw x 
      001C7B 90 5C            [ 1] 5057 	incw y 
      001C7D 90 C3 00 1E      [ 2] 5058 	cpw y,txtend 
      001C81 2B F1            [ 1] 5059 	jrmi 3$
      001C83 81               [ 4] 5060 	ret 
                                   5061 
                                   5062 ;------------------------
                                   5063 ; BASIC: LOAD "file" 
                                   5064 ; load file to RAM 
                                   5065 ; for execution 
                                   5066 ;------------------------
      001C84                       5067 load:
      001C84 72 01 00 23 07   [ 2] 5068 	btjf flags,#FRUN,0$ 
      001C89 27 05            [ 1] 5069 	jreq 0$ 
      001C8B A6 07            [ 1] 5070 	ld a,#ERR_CMD_ONLY 
      001C8D CC 09 1E         [ 2] 5071 	jp tb_error 
      001C90                       5072 0$:	
      001C90 CD 0A 0E         [ 4] 5073 	call next_token 
      001C93 A1 02            [ 1] 5074 	cp a,#TK_QSTR
      001C95 27 03            [ 1] 5075 	jreq 1$
      001C97 CC 09 1C         [ 2] 5076 	jp syntax_error 
      001C9A 90 93            [ 1] 5077 1$:	ldw y,x 
      001C9C CD 1B 3A         [ 4] 5078 	call search_file 
      001C9F 25 05            [ 1] 5079 	jrc 2$ 
      001CA1 A6 09            [ 1] 5080 	ld a,#ERR_NOT_FILE
      001CA3 CC 09 1E         [ 2] 5081 	jp tb_error  
      001CA6                       5082 2$:
      001CA6 CD 1C 53         [ 4] 5083 	call load_file
                                   5084 ; print loaded size 	 
      001CA9 CE 00 1E         [ 2] 5085 	ldw x,txtend 
      001CAC 72 B0 00 1C      [ 2] 5086 	subw x,txtbgn
      001CB0 CD 0A 6F         [ 4] 5087 	call print_int 
      001CB3 81               [ 4] 5088 	ret 
                                   5089 
                                   5090 ;-----------------------------------
                                   5091 ; BASIC: FORGET ["file_name"] 
                                   5092 ; erase file_name and all others 
                                   5093 ; after it. 
                                   5094 ; without argument erase all files 
                                   5095 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           000001  5096 	NEW_FREE=1 
                           000003  5097 	VSIZE=3 
      001CB4                       5098 forget:
      001CB4                       5099 	_vars VSIZE 
      001CB4 52 03            [ 2]    1     sub sp,#VSIZE 
      001CB6 CD 0A 0E         [ 4] 5100 	call next_token 
      001CB9 A1 00            [ 1] 5101 	cp a,#TK_NONE 
      001CBB 27 20            [ 1] 5102 	jreq 3$ 
      001CBD A1 02            [ 1] 5103 	cp a,#TK_QSTR
      001CBF 27 03            [ 1] 5104 	jreq 1$
      001CC1 CC 09 1C         [ 2] 5105 	jp syntax_error
      001CC4 90 93            [ 1] 5106 1$: ldw y,x 
      001CC6 55 00 03 00 01   [ 1] 5107 	mov in,count 
      001CCB CD 1B 3A         [ 4] 5108 	call search_file
      001CCE 25 05            [ 1] 5109 	jrc 2$
      001CD0 A6 09            [ 1] 5110 	ld a,#ERR_NOT_FILE 
      001CD2 CC 09 1E         [ 2] 5111 	jp tb_error 
      001CD5                       5112 2$: 
      001CD5 CE 00 16         [ 2] 5113 	ldw x,farptr
      001CD8 C6 00 18         [ 1] 5114 	ld a,farptr+2
      001CDB 20 0A            [ 2] 5115 	jra 4$ 
      001CDD                       5116 3$: ; forget all files 
      001CDD AE 01 00         [ 2] 5117 	ldw x,#0x100
      001CE0 4F               [ 1] 5118 	clr a 
      001CE1 CF 00 16         [ 2] 5119 	ldw farptr,x 
      001CE4 C7 00 18         [ 1] 5120 	ld farptr+2,a 
      001CE7                       5121 4$:	; save new free address 
      001CE7 1F 01            [ 2] 5122 	ldw (NEW_FREE,sp),x
      001CE9 6B 03            [ 1] 5123 	ld (NEW_FREE+2,sp),a 
      001CEB CD 01 68         [ 4] 5124 	call move_erase_to_ram
      001CEE CD 01 E3         [ 4] 5125 5$: call block_erase 
      001CF1 AE 00 80         [ 2] 5126 	ldw x,#BLOCK_SIZE 
      001CF4 CD 1A C6         [ 4] 5127 	call incr_farptr 
      001CF7 CD 1A AB         [ 4] 5128 	call row_align 
                                   5129 ; check if all blocks erased
      001CFA C6 00 18         [ 1] 5130 	ld a,farptr+2  
      001CFD C0 00 1B         [ 1] 5131 	sub a,ffree+2
      001D00 C6 00 17         [ 1] 5132 	ld a,farptr+1 
      001D03 C2 00 1A         [ 1] 5133 	sbc a,ffree+1 
      001D06 C6 00 16         [ 1] 5134 	ld a,farptr 
      001D09 C2 00 19         [ 1] 5135 	sbc a,ffree 
      001D0C 2B E0            [ 1] 5136 	jrmi 5$ 
      001D0E 7B 03            [ 1] 5137 	ld a,(NEW_FREE+2,sp)
      001D10 1E 01            [ 2] 5138 	ldw x,(NEW_FREE,sp)
      001D12 C7 00 1B         [ 1] 5139 	ld ffree+2,a 
      001D15 CF 00 19         [ 2] 5140 	ldw ffree,x 
      001D18                       5141 	_drop VSIZE 
      001D18 5B 03            [ 2]    1     addw sp,#VSIZE 
      001D1A 81               [ 4] 5142 	ret 
                                   5143 
                                   5144 ;----------------------
                                   5145 ; BASIC: DIR 
                                   5146 ; list saved files 
                                   5147 ;----------------------
                           000001  5148 	COUNT=1 ; files counter 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                           000002  5149 	VSIZE=2 
      001D1B                       5150 directory:
      001D1B                       5151 	_vars VSIZE 
      001D1B 52 02            [ 2]    1     sub sp,#VSIZE 
      001D1D 5F               [ 1] 5152 	clrw x 
      001D1E 1F 01            [ 2] 5153 	ldw (COUNT,sp),x 
      001D20 CF 00 17         [ 2] 5154 	ldw farptr+1,x 
      001D23 35 01 00 16      [ 1] 5155 	mov farptr,#1 
      001D27                       5156 dir_loop:
      001D27 5F               [ 1] 5157 	clrw x 
      001D28 92 AF 00 16      [ 5] 5158 	ldf a,([farptr],x)
      001D2C 27 3B            [ 1] 5159 	jreq 8$ 
      001D2E                       5160 1$: ;name loop 	
      001D2E 92 AF 00 16      [ 5] 5161 	ldf a,([farptr],x)
      001D32 27 06            [ 1] 5162 	jreq 2$ 
      001D34 CD 03 2B         [ 4] 5163 	call putc 
      001D37 5C               [ 1] 5164 	incw x 
      001D38 20 F4            [ 2] 5165 	jra 1$
      001D3A 5C               [ 1] 5166 2$: incw x ; skip ending 0. 
      001D3B A6 20            [ 1] 5167 	ld a,#SPACE 
      001D3D CD 03 2B         [ 4] 5168 	call putc 
                                   5169 ; get file size 	
      001D40 92 AF 00 16      [ 5] 5170 	ldf a,([farptr],x)
      001D44 90 95            [ 1] 5171 	ld yh,a 
      001D46 5C               [ 1] 5172 	incw x 
      001D47 92 AF 00 16      [ 5] 5173 	ldf a,([farptr],x)
      001D4B 5C               [ 1] 5174 	incw x 
      001D4C 90 97            [ 1] 5175 	ld yl,a 
      001D4E 90 89            [ 2] 5176 	pushw y 
      001D50 72 FB 01         [ 2] 5177 	addw x,(1,sp)
                                   5178 ; skip to next file 
      001D53 CD 1A C6         [ 4] 5179 	call incr_farptr
      001D56 CD 1A AB         [ 4] 5180 	call row_align
                                   5181 ; print file size 
      001D59 85               [ 2] 5182 	popw x ; file size 
      001D5A CD 0A 6F         [ 4] 5183 	call print_int 
      001D5D A6 0D            [ 1] 5184 	ld a,#CR 
      001D5F CD 03 2B         [ 4] 5185 	call putc
      001D62 1E 01            [ 2] 5186 	ldw x,(COUNT,sp)
      001D64 5C               [ 1] 5187 	incw x
      001D65 1F 01            [ 2] 5188 	ldw (COUNT,sp),x  
      001D67 20 BE            [ 2] 5189 	jra dir_loop
      001D69                       5190 8$: ; print number of files 
      001D69 1E 01            [ 2] 5191 	ldw x,(COUNT,sp)
      001D6B CD 0A 6F         [ 4] 5192 	call print_int 
      001D6E AE 1D 88         [ 2] 5193 	ldw x,#file_count 
      001D71 CD 00 00         [ 4] 5194 	call puts  
                                   5195 ; print drive free space 	
      001D74 CD 1B 06         [ 4] 5196 	call disk_free
      001D77 5F               [ 1] 5197 	clrw x  
      001D78 35 0A 00 0A      [ 1] 5198 	mov base,#10 
      001D7C CD 0A 7F         [ 4] 5199 	call prti24 
      001D7F AE 1D 90         [ 2] 5200 	ldw x,#drive_free
      001D82 CD 00 00         [ 4] 5201 	call puts 
      001D85                       5202 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D85 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D87 81               [ 4] 5203 	ret
      001D88 20 66 69 6C 65 73 0A  5204 file_count: .asciz " files\n"
             00
      001D90 20 62 79 74 65 73 20  5205 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5206 
                                   5207 ;---------------------
                                   5208 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5209 ; write 1 or more byte to FLASH or EEPROM
                                   5210 ; starting at address  
                                   5211 ; input:
                                   5212 ;   expr1  	is address 
                                   5213 ;   expr2,...,exprn   are bytes to write
                                   5214 ; output:
                                   5215 ;   none 
                                   5216 ;---------------------
                           000001  5217 	ADDR=1
                           000002  5218 	VSIZ=2 
      001D9D                       5219 write:
      001D9D                       5220 	_vars VSIZE 
      001D9D 52 02            [ 2]    1     sub sp,#VSIZE 
      001D9F 72 5F 00 16      [ 1] 5221 	clr farptr ; expect 16 bits address 
      001DA3 CD 11 F3         [ 4] 5222 	call expression
      001DA6 A1 84            [ 1] 5223 	cp a,#TK_INTGR 
      001DA8 27 03            [ 1] 5224 	jreq 0$
      001DAA CC 09 1C         [ 2] 5225 	jp syntax_error
      001DAD 1F 01            [ 2] 5226 0$: ldw (ADDR,sp),x 
      001DAF CD 0A 0E         [ 4] 5227 	call next_token 
      001DB2 A1 09            [ 1] 5228 	cp a,#TK_COMMA 
      001DB4 27 02            [ 1] 5229 	jreq 1$ 
      001DB6 20 19            [ 2] 5230 	jra 9$ 
      001DB8 CD 11 F3         [ 4] 5231 1$:	call expression
      001DBB A1 84            [ 1] 5232 	cp a,#TK_INTGR
      001DBD 27 03            [ 1] 5233 	jreq 2$
      001DBF CC 09 1C         [ 2] 5234 	jp syntax_error
      001DC2 9F               [ 1] 5235 2$:	ld a,xl 
      001DC3 1E 01            [ 2] 5236 	ldw x,(ADDR,sp) 
      001DC5 CF 00 17         [ 2] 5237 	ldw farptr+1,x 
      001DC8 5F               [ 1] 5238 	clrw x 
      001DC9 CD 02 0D         [ 4] 5239 	call write_byte
      001DCC 1E 01            [ 2] 5240 	ldw x,(ADDR,sp)
      001DCE 5C               [ 1] 5241 	incw x 
      001DCF 20 DC            [ 2] 5242 	jra 0$ 
      001DD1                       5243 9$:
      001DD1                       5244 	_drop VSIZE
      001DD1 5B 02            [ 2]    1     addw sp,#VSIZE 
      001DD3 81               [ 4] 5245 	ret 
                                   5246 
                                   5247 
                                   5248 ;---------------------
                                   5249 ;BASIC: CHAR(expr)
                                   5250 ; évaluate expression 
                                   5251 ; and take the 7 least 
                                   5252 ; bits as ASCII character
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   5253 ; return a TK_CHAR 
                                   5254 ;---------------------
      001DD4                       5255 char:
      001DD4 CD 10 EF         [ 4] 5256 	call func_args 
      001DD7 A1 01            [ 1] 5257 	cp a,#1
      001DD9 27 03            [ 1] 5258 	jreq 1$
      001DDB CC 09 1C         [ 2] 5259 	jp syntax_error
      001DDE 85               [ 2] 5260 1$:	popw x 
      001DDF 9F               [ 1] 5261 	ld a,xl 
      001DE0 A4 7F            [ 1] 5262 	and a,#0x7f 
      001DE2 97               [ 1] 5263 	ld xl,a
      001DE3 A6 03            [ 1] 5264 	ld a,#TK_CHAR
      001DE5 81               [ 4] 5265 	ret
                                   5266 
                                   5267 ;---------------------
                                   5268 ; BASIC: ASC(string|char|TK_CFUNC)
                                   5269 ; extract first character 
                                   5270 ; of string argument 
                                   5271 ; return it as TK_INTGR 
                                   5272 ;---------------------
      001DE6                       5273 ascii:
      001DE6 A6 07            [ 1] 5274 	ld a,#TK_LPAREN
      001DE8 CD 10 E2         [ 4] 5275 	call expect 
      001DEB CD 0A 0E         [ 4] 5276 	call next_token 
      001DEE A1 02            [ 1] 5277 	cp a,#TK_QSTR 
      001DF0 27 0E            [ 1] 5278 	jreq 1$
      001DF2 A1 03            [ 1] 5279 	cp a,#TK_CHAR 
      001DF4 27 0D            [ 1] 5280 	jreq 2$ 
      001DF6 A1 82            [ 1] 5281 	cp a,#TK_CFUNC 
      001DF8 27 03            [ 1] 5282 	jreq 0$
      001DFA CC 09 1C         [ 2] 5283 	jp syntax_error
      001DFD FD               [ 4] 5284 0$: call (x)
      001DFE 20 03            [ 2] 5285 	jra 2$
      001E00                       5286 1$: 
      001E00 F6               [ 1] 5287 	ld a,(x) 
      001E01 5F               [ 1] 5288 	clrw x
      001E02 97               [ 1] 5289 	ld xl,a 
      001E03                       5290 2$: 
      001E03 89               [ 2] 5291 	pushw x 
      001E04 A6 08            [ 1] 5292 	ld a,#TK_RPAREN 
      001E06 CD 10 E2         [ 4] 5293 	call expect
      001E09 85               [ 2] 5294 	popw x 
      001E0A A6 84            [ 1] 5295 	ld a,#TK_INTGR 
      001E0C 81               [ 4] 5296 	ret 
                                   5297 
                                   5298 ;---------------------
                                   5299 ;BASIC: KEY
                                   5300 ; wait for a character 
                                   5301 ; received from STDIN 
                                   5302 ; input:
                                   5303 ;	none 
                                   5304 ; output:
                                   5305 ;	X 		ASCII character 
                                   5306 ;---------------------
      001E0D                       5307 key:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E0D CD 03 4B         [ 4] 5308 	call getc 
      001E10 5F               [ 1] 5309 	clrw x 
      001E11 97               [ 1] 5310 	ld xl,a 
      001E12 A6 84            [ 1] 5311 	ld a,#TK_INTGR
      001E14 81               [ 4] 5312 	ret
                                   5313 
                                   5314 ;----------------------
                                   5315 ; BASIC: QKEY
                                   5316 ; Return true if there 
                                   5317 ; is a character in 
                                   5318 ; waiting in STDIN 
                                   5319 ; input:
                                   5320 ;  none 
                                   5321 ; output:
                                   5322 ;   X 		0|-1 
                                   5323 ;-----------------------
      001E15                       5324 qkey:: 
      001E15 5F               [ 1] 5325 	clrw x 
      001E16 C6 00 2D         [ 1] 5326 	ld a,rx1_head
      001E19 C1 00 2E         [ 1] 5327 	cp a,rx1_tail 
      001E1C 27 01            [ 1] 5328 	jreq 9$ 
      001E1E 53               [ 2] 5329 	cplw x 
      001E1F A6 84            [ 1] 5330 9$: ld a,#TK_INTGR
      001E21 81               [ 4] 5331 	ret 
                                   5332 
                                   5333 ;---------------------
                                   5334 ; BASIC: GPIO(expr,reg)
                                   5335 ; return gpio address 
                                   5336 ; expr {0..8}
                                   5337 ; input:
                                   5338 ;   none 
                                   5339 ; output:
                                   5340 ;   X 		gpio register address
                                   5341 ;----------------------------
                           000003  5342 	PORT=3
                           000001  5343 	REG=1 
                           000004  5344 	VSIZE=4 
      001E22                       5345 gpio:
      001E22 CD 10 EF         [ 4] 5346 	call func_args 
      001E25 A1 02            [ 1] 5347 	cp a,#2
      001E27 27 03            [ 1] 5348 	jreq 1$
      001E29 CC 09 1C         [ 2] 5349 	jp syntax_error  
      001E2C                       5350 1$:	
      001E2C 1E 03            [ 2] 5351 	ldw x,(PORT,sp)
      001E2E 2B 17            [ 1] 5352 	jrmi bad_port
      001E30 A3 00 09         [ 2] 5353 	cpw x,#9
      001E33 2A 12            [ 1] 5354 	jrpl bad_port
      001E35 A6 05            [ 1] 5355 	ld a,#5
      001E37 42               [ 4] 5356 	mul x,a
      001E38 1C 50 00         [ 2] 5357 	addw x,#GPIO_BASE 
      001E3B 1F 03            [ 2] 5358 	ldw (PORT,sp),x  
      001E3D 1E 01            [ 2] 5359 	ldw x,(REG,sp) 
      001E3F 72 FB 03         [ 2] 5360 	addw x,(PORT,sp)
      001E42 A6 84            [ 1] 5361 	ld a,#TK_INTGR
      001E44                       5362 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001E44 5B 04            [ 2]    1     addw sp,#VSIZE 
      001E46 81               [ 4] 5363 	ret
      001E47                       5364 bad_port:
      001E47 A6 0A            [ 1] 5365 	ld a,#ERR_BAD_VALUE
      001E49 CC 09 1E         [ 2] 5366 	jp tb_error
                                   5367 
                                   5368 
                                   5369 ;-------------------------
                                   5370 ; BASIC: UFLASH 
                                   5371 ; return user flash address
                                   5372 ; input:
                                   5373 ;  none 
                                   5374 ; output:
                                   5375 ;	A		TK_INTGR
                                   5376 ;   X 		user address 
                                   5377 ;---------------------------
      001E4C                       5378 uflash:
      001E4C AE 29 80         [ 2] 5379 	ldw x,#user_space 
      001E4F A6 84            [ 1] 5380 	ld a,#TK_INTGR 
      001E51 81               [ 4] 5381 	ret 
                                   5382 
                                   5383 
                                   5384 ;---------------------
                                   5385 ; BASIC: USR(addr[,arg])
                                   5386 ; execute a function written 
                                   5387 ; in binary code.
                                   5388 ; binary fonction should 
                                   5389 ; return token attribute in A 
                                   5390 ; and value in X. 
                                   5391 ; input:
                                   5392 ;   addr	routine address 
                                   5393 ;   arg 	is an optional argument 
                                   5394 ; output:
                                   5395 ;   A 		token attribute 
                                   5396 ;   X       returned value 
                                   5397 ;---------------------
      001E52                       5398 usr:
      001E52 90 89            [ 2] 5399 	pushw y 	
      001E54 CD 10 EF         [ 4] 5400 	call func_args 
      001E57 A1 01            [ 1] 5401 	cp a,#1 
      001E59 27 07            [ 1] 5402 	jreq 2$
      001E5B A1 02            [ 1] 5403 	cp a,#2
      001E5D 27 03            [ 1] 5404 	jreq 2$  
      001E5F CC 09 1C         [ 2] 5405 	jp syntax_error 
      001E62 90 85            [ 2] 5406 2$: popw y  ; arg|addr 
      001E64 A1 01            [ 1] 5407 	cp a,#1
      001E66 27 02            [ 1] 5408 	jreq 3$
      001E68 85               [ 2] 5409 	popw x ; addr
      001E69 51               [ 1] 5410 	exgw x,y 
      001E6A 90 FD            [ 4] 5411 3$: call (y)
      001E6C 90 85            [ 2] 5412 	popw y 
      001E6E 81               [ 4] 5413 	ret 
                                   5414 
                                   5415 ;------------------------------
                                   5416 ; BASIC: BYE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5417 ; halt mcu in its lowest power mode 
                                   5418 ; wait for reset or external interrupt
                                   5419 ; do a cold start on wakeup.
                                   5420 ;------------------------------
      001E6F                       5421 bye:
      001E6F 72 0D 52 30 FB   [ 2] 5422 	btjf UART1_SR,#UART_SR_TC,.
      001E74 8E               [10] 5423 	halt
      001E75 CC 06 78         [ 2] 5424 	jp cold_start  
                                   5425 
                                   5426 ;----------------------------------
                                   5427 ; BASIC: AUTORUN ["file_name"] 
                                   5428 ; record in eeprom at adrress AUTORUN_NAME
                                   5429 ; the name of file to load and execute
                                   5430 ; at startup. 
                                   5431 ; empty string delete autorun name 
                                   5432 ; no argument display autorun name  
                                   5433 ; input:
                                   5434 ;   file_name   file to execute 
                                   5435 ; output:
                                   5436 ;   none
                                   5437 ;-----------------------------------
      001E78                       5438 autorun: 
      001E78 72 01 00 23 07   [ 2] 5439 	btjf flags,#FRUN,0$ 
      001E7D 27 05            [ 1] 5440 	jreq 0$ 
      001E7F A6 07            [ 1] 5441 	ld a,#ERR_CMD_ONLY 
      001E81 CC 09 1E         [ 2] 5442 	jp tb_error 
      001E84                       5443 0$:	
      001E84 CD 0A 0E         [ 4] 5444 	call next_token
      001E87 4D               [ 1] 5445 	tnz a 
      001E88 26 08            [ 1] 5446 	jrne 1$
      001E8A AE 40 00         [ 2] 5447 	ldw x,#AUTORUN_NAME
      001E8D CD 00 00         [ 4] 5448 	call puts 
      001E90 4F               [ 1] 5449 	clr a 
      001E91 81               [ 4] 5450 	ret 
      001E92                       5451 1$:
      001E92 A1 02            [ 1] 5452 	cp a,#TK_QSTR
      001E94 27 03            [ 1] 5453 	jreq 2$
      001E96 CC 09 1C         [ 2] 5454 	jp syntax_error 
      001E99                       5455 2$:	
      001E99 7D               [ 1] 5456 	tnz (x) 
      001E9A 26 09            [ 1] 5457 	jrne 3$
                                   5458 ; empty string, delete autorun 	
      001E9C CD 07 39         [ 4] 5459 	call cancel_autorun
      001E9F 55 00 03 00 01   [ 1] 5460 	mov in,count 
      001EA4 81               [ 4] 5461 	ret 
      001EA5 89               [ 2] 5462 3$:	pushw x 
      001EA6 90 93            [ 1] 5463 	ldw y,x  
      001EA8 CD 1B 3A         [ 4] 5464 	call search_file 
      001EAB 25 05            [ 1] 5465 	jrc 4$ 
      001EAD A6 09            [ 1] 5466 	ld a,#ERR_NOT_FILE
      001EAF CC 09 1E         [ 2] 5467 	jp tb_error  
      001EB2                       5468 4$: 
      001EB2 55 00 03 00 01   [ 1] 5469 	mov in,count 
      001EB7 72 5F 00 16      [ 1] 5470 	clr farptr 
      001EBB AE 40 00         [ 2] 5471 	ldw x,#AUTORUN_NAME
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001EBE CF 00 17         [ 2] 5472 	ldw farptr+1,x 
      001EC1 1E 01            [ 2] 5473 	ldw x,(1,sp)  
      001EC3 CD 04 34         [ 4] 5474 	call strlen  ; return length in A 
      001EC6 5F               [ 1] 5475 	clrw x 
      001EC7 97               [ 1] 5476 	ld xl,a 
      001EC8 5C               [ 1] 5477 	incw x 
      001EC9 90 85            [ 2] 5478 	popw y 
      001ECB 89               [ 2] 5479 	pushw x 
      001ECC 5F               [ 1] 5480 	clrw x 
      001ECD CD 02 82         [ 4] 5481 	call write_block 
      001ED0                       5482 	_drop 2 
      001ED0 5B 02            [ 2]    1     addw sp,#2 
      001ED2 81               [ 4] 5483 	ret 
                                   5484 
                                   5485 ;----------------------------------
                                   5486 ; BASIC: SLEEP 
                                   5487 ; halt mcu until reset or external
                                   5488 ; interrupt.
                                   5489 ; Resume progam after SLEEP command
                                   5490 ;----------------------------------
      001ED3                       5491 sleep:
      001ED3 72 0D 52 30 FB   [ 2] 5492 	btjf UART1_SR,#UART_SR_TC,.
      001ED8 72 16 00 23      [ 1] 5493 	bset flags,#FSLEEP
      001EDC 8E               [10] 5494 	halt 
      001EDD 81               [ 4] 5495 	ret 
                                   5496 
                                   5497 ;-------------------------------
                                   5498 ; BASIC: PAUSE expr 
                                   5499 ; suspend execution for n msec.
                                   5500 ; input:
                                   5501 ;	none
                                   5502 ; output:
                                   5503 ;	none 
                                   5504 ;------------------------------
      001EDE                       5505 pause:
      001EDE CD 11 F3         [ 4] 5506 	call expression
      001EE1 A1 84            [ 1] 5507 	cp a,#TK_INTGR
      001EE3 27 03            [ 1] 5508 	jreq pause02 
      001EE5 CC 09 1C         [ 2] 5509 	jp syntax_error
      001EE8                       5510 pause02: 
      001EE8 5D               [ 2] 5511 1$: tnzw x 
      001EE9 27 04            [ 1] 5512 	jreq 2$
      001EEB 8F               [10] 5513 	wfi 
      001EEC 5A               [ 2] 5514 	decw x 
      001EED 26 F9            [ 1] 5515 	jrne 1$
      001EEF 4F               [ 1] 5516 2$:	clr a 
      001EF0 81               [ 4] 5517 	ret 
                                   5518 
                                   5519 ;------------------------------
                                   5520 ; BASIC: AWU expr
                                   5521 ; halt mcu for 'expr' milliseconds
                                   5522 ; use Auto wakeup peripheral
                                   5523 ; all oscillators stopped except LSI
                                   5524 ; range: 1ms - 511ms
                                   5525 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   5526 ;  none
                                   5527 ; output:
                                   5528 ;  none:
                                   5529 ;------------------------------
      001EF1                       5530 awu:
      001EF1 CD 11 F3         [ 4] 5531   call expression
      001EF4 A1 84            [ 1] 5532   cp a,#TK_INTGR
      001EF6 27 03            [ 1] 5533   jreq awu02
      001EF8 CC 09 1C         [ 2] 5534   jp syntax_error
      001EFB                       5535 awu02:
      001EFB A3 14 00         [ 2] 5536   cpw x,#5120
      001EFE 2B 0C            [ 1] 5537   jrmi 1$ 
      001F00 35 0F 50 F2      [ 1] 5538   mov AWU_TBR,#15 
      001F04 A6 1E            [ 1] 5539   ld a,#30
      001F06 62               [ 2] 5540   div x,a
      001F07 A6 10            [ 1] 5541   ld a,#16
      001F09 62               [ 2] 5542   div x,a 
      001F0A 20 1E            [ 2] 5543   jra 4$
      001F0C                       5544 1$: 
      001F0C A3 08 00         [ 2] 5545   cpw x,#2048
      001F0F 2B 09            [ 1] 5546   jrmi 2$ 
      001F11 35 0E 50 F2      [ 1] 5547   mov AWU_TBR,#14
      001F15 A6 50            [ 1] 5548   ld a,#80
      001F17 62               [ 2] 5549   div x,a 
      001F18 20 10            [ 2] 5550   jra 4$   
      001F1A                       5551 2$:
      001F1A 35 07 50 F2      [ 1] 5552   mov AWU_TBR,#7
      001F1E                       5553 3$:  
                                   5554 ; while X > 64  divide by 2 and increment AWU_TBR 
      001F1E A3 00 40         [ 2] 5555   cpw x,#64 
      001F21 23 07            [ 2] 5556   jrule 4$ 
      001F23 72 5C 50 F2      [ 1] 5557   inc AWU_TBR 
      001F27 54               [ 2] 5558   srlw x 
      001F28 20 F4            [ 2] 5559   jra 3$ 
      001F2A                       5560 4$:
      001F2A 9F               [ 1] 5561   ld a, xl
      001F2B 4A               [ 1] 5562   dec a 
      001F2C 27 01            [ 1] 5563   jreq 5$
      001F2E 4A               [ 1] 5564   dec a 	
      001F2F                       5565 5$: 
      001F2F A4 3E            [ 1] 5566   and a,#0x3e 
      001F31 C7 50 F1         [ 1] 5567   ld AWU_APR,a 
      001F34 72 18 50 F0      [ 1] 5568   bset AWU_CSR,#AWU_CSR_AWUEN
      001F38 8E               [10] 5569   halt 
                                   5570 
      001F39 81               [ 4] 5571   ret 
                                   5572 
                                   5573 ;------------------------------
                                   5574 ; BASIC: TICKS
                                   5575 ; return msec ticks counter value 
                                   5576 ; input:
                                   5577 ; 	none 
                                   5578 ; output:
                                   5579 ;	X 		TK_INTGR
                                   5580 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001F3A                       5581 get_ticks:
      001F3A CE 00 0E         [ 2] 5582 	ldw x,ticks 
      001F3D A6 84            [ 1] 5583 	ld a,#TK_INTGR
      001F3F 81               [ 4] 5584 	ret 
                                   5585 
                                   5586 
                                   5587 
                                   5588 ;------------------------------
                                   5589 ; BASIC: ABS(expr)
                                   5590 ; return absolute value of expr.
                                   5591 ; input:
                                   5592 ;   none
                                   5593 ; output:
                                   5594 ;   X     	positive integer
                                   5595 ;-------------------------------
      001F40                       5596 abs:
      001F40 CD 10 EF         [ 4] 5597 	call func_args 
      001F43 A1 01            [ 1] 5598 	cp a,#1 
      001F45 27 03            [ 1] 5599 	jreq 0$ 
      001F47 CC 09 1C         [ 2] 5600 	jp syntax_error
      001F4A                       5601 0$:  
      001F4A 85               [ 2] 5602     popw x   
      001F4B 9E               [ 1] 5603 	ld a,xh 
      001F4C A5 80            [ 1] 5604 	bcp a,#0x80 
      001F4E 27 01            [ 1] 5605 	jreq 2$ 
      001F50 50               [ 2] 5606 	negw x 
      001F51 A6 84            [ 1] 5607 2$: ld a,#TK_INTGR 
      001F53 81               [ 4] 5608 	ret 
                                   5609 
                                   5610 ;------------------------------
                                   5611 ; BASIC: AND(expr1,expr2)
                                   5612 ; Apply bit AND relation between
                                   5613 ; the 2 arguments, i.e expr1 & expr2 
                                   5614 ; output:
                                   5615 ; 	A 		TK_INTGR
                                   5616 ;   X 		result 
                                   5617 ;------------------------------
      001F54                       5618 bit_and:
      001F54 CD 10 EF         [ 4] 5619 	call func_args 
      001F57 A1 02            [ 1] 5620 	cp a,#2
      001F59 27 03            [ 1] 5621 	jreq 1$
      001F5B CC 09 1C         [ 2] 5622 	jp syntax_error 
      001F5E 85               [ 2] 5623 1$:	popw x 
      001F5F 9E               [ 1] 5624 	ld a,xh 
      001F60 14 01            [ 1] 5625 	and a,(1,sp)
      001F62 95               [ 1] 5626 	ld xh,a 
      001F63 9F               [ 1] 5627 	ld a,xl
      001F64 14 02            [ 1] 5628 	and a,(2,sp)
      001F66 97               [ 1] 5629 	ld xl,a 
      001F67                       5630 	_drop 2 
      001F67 5B 02            [ 2]    1     addw sp,#2 
      001F69 A6 84            [ 1] 5631 	ld a,#TK_INTGR
      001F6B 81               [ 4] 5632 	ret
                                   5633 
                                   5634 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   5635 ; BASIC: OR(expr1,expr2)
                                   5636 ; Apply bit OR relation between
                                   5637 ; the 2 arguments, i.e expr1 | expr2 
                                   5638 ; output:
                                   5639 ; 	A 		TK_INTGR
                                   5640 ;   X 		result 
                                   5641 ;------------------------------
      001F6C                       5642 bit_or:
      001F6C CD 10 EF         [ 4] 5643 	call func_args 
      001F6F A1 02            [ 1] 5644 	cp a,#2
      001F71 27 03            [ 1] 5645 	jreq 1$
      001F73 CC 09 1C         [ 2] 5646 	jp syntax_error 
      001F76                       5647 1$: 
      001F76 85               [ 2] 5648 	popw x 
      001F77 9E               [ 1] 5649 	ld a,xh 
      001F78 1A 01            [ 1] 5650 	or a,(1,sp)
      001F7A 95               [ 1] 5651 	ld xh,a 
      001F7B 9F               [ 1] 5652 	ld a,xl 
      001F7C 1A 02            [ 1] 5653 	or a,(2,sp)
      001F7E 97               [ 1] 5654 	ld xl,a 
      001F7F                       5655 	_drop 2 
      001F7F 5B 02            [ 2]    1     addw sp,#2 
      001F81 A6 84            [ 1] 5656 	ld a,#TK_INTGR 
      001F83 81               [ 4] 5657 	ret
                                   5658 
                                   5659 ;------------------------------
                                   5660 ; BASIC: XOR(expr1,expr2)
                                   5661 ; Apply bit XOR relation between
                                   5662 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5663 ; output:
                                   5664 ; 	A 		TK_INTGR
                                   5665 ;   X 		result 
                                   5666 ;------------------------------
      001F84                       5667 bit_xor:
      001F84 CD 10 EF         [ 4] 5668 	call func_args 
      001F87 A1 02            [ 1] 5669 	cp a,#2
      001F89 27 03            [ 1] 5670 	jreq 1$
      001F8B CC 09 1C         [ 2] 5671 	jp syntax_error 
      001F8E                       5672 1$: 
      001F8E 85               [ 2] 5673 	popw x 
      001F8F 9E               [ 1] 5674 	ld a,xh 
      001F90 18 01            [ 1] 5675 	xor a,(1,sp)
      001F92 95               [ 1] 5676 	ld xh,a 
      001F93 9F               [ 1] 5677 	ld a,xl 
      001F94 18 02            [ 1] 5678 	xor a,(2,sp)
      001F96 97               [ 1] 5679 	ld xl,a 
      001F97                       5680 	_drop 2 
      001F97 5B 02            [ 2]    1     addw sp,#2 
      001F99 A6 84            [ 1] 5681 	ld a,#TK_INTGR 
      001F9B 81               [ 4] 5682 	ret 
                                   5683 
                                   5684 ;------------------------------
                                   5685 ; BASIC: LSHIFT(expr1,expr2)
                                   5686 ; logical shift left expr1 by 
                                   5687 ; expr2 bits 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   5688 ; output:
                                   5689 ; 	A 		TK_INTGR
                                   5690 ;   X 		result 
                                   5691 ;------------------------------
      001F9C                       5692 lshift:
      001F9C CD 10 EF         [ 4] 5693 	call func_args
      001F9F A1 02            [ 1] 5694 	cp a,#2 
      001FA1 27 03            [ 1] 5695 	jreq 1$
      001FA3 CC 09 1C         [ 2] 5696 	jp syntax_error
      001FA6 90 85            [ 2] 5697 1$: popw y   
      001FA8 85               [ 2] 5698 	popw x 
      001FA9 90 5D            [ 2] 5699 	tnzw y 
      001FAB 27 05            [ 1] 5700 	jreq 4$
      001FAD 58               [ 2] 5701 2$:	sllw x 
      001FAE 90 5A            [ 2] 5702 	decw y 
      001FB0 26 FB            [ 1] 5703 	jrne 2$
      001FB2                       5704 4$:  
      001FB2 A6 84            [ 1] 5705 	ld a,#TK_INTGR
      001FB4 81               [ 4] 5706 	ret
                                   5707 
                                   5708 ;------------------------------
                                   5709 ; BASIC: RSHIFT(expr1,expr2)
                                   5710 ; logical shift right expr1 by 
                                   5711 ; expr2 bits.
                                   5712 ; output:
                                   5713 ; 	A 		TK_INTGR
                                   5714 ;   X 		result 
                                   5715 ;------------------------------
      001FB5                       5716 rshift:
      001FB5 CD 10 EF         [ 4] 5717 	call func_args
      001FB8 A1 02            [ 1] 5718 	cp a,#2 
      001FBA 27 03            [ 1] 5719 	jreq 1$
      001FBC CC 09 1C         [ 2] 5720 	jp syntax_error
      001FBF 90 85            [ 2] 5721 1$: popw y  
      001FC1 85               [ 2] 5722 	popw x
      001FC2 90 5D            [ 2] 5723 	tnzw y 
      001FC4 27 05            [ 1] 5724 	jreq 4$
      001FC6 54               [ 2] 5725 2$:	srlw x 
      001FC7 90 5A            [ 2] 5726 	decw y 
      001FC9 26 FB            [ 1] 5727 	jrne 2$
      001FCB                       5728 4$:  
      001FCB A6 84            [ 1] 5729 	ld a,#TK_INTGR
      001FCD 81               [ 4] 5730 	ret
                                   5731 
                                   5732 ;--------------------------
                                   5733 ; BASIC: FCPU integer
                                   5734 ; set CPU frequency 
                                   5735 ;-------------------------- 
                                   5736 
      001FCE                       5737 fcpu:
      001FCE A6 84            [ 1] 5738 	ld a,#TK_INTGR
      001FD0 CD 10 E2         [ 4] 5739 	call expect 
      001FD3 9F               [ 1] 5740 	ld a,xl 
      001FD4 A4 07            [ 1] 5741 	and a,#7 
      001FD6 C7 50 C6         [ 1] 5742 	ld CLK_CKDIVR,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001FD9 81               [ 4] 5743 	ret 
                                   5744 
                                   5745 ;------------------------------
                                   5746 ; BASIC: PMODE pin#, mode 
                                   5747 ; Arduino pin. 
                                   5748 ; define pin as input or output
                                   5749 ; pin#: {0..15}
                                   5750 ; mode: INPUT|OUTPUT  
                                   5751 ;------------------------------
                           000001  5752 	PINNO=1
                           000001  5753 	VSIZE=1
      001FDA                       5754 pin_mode:
      001FDA                       5755 	_vars VSIZE 
      001FDA 52 01            [ 2]    1     sub sp,#VSIZE 
      001FDC CD 10 F4         [ 4] 5756 	call arg_list 
      001FDF A1 02            [ 1] 5757 	cp a,#2 
      001FE1 27 03            [ 1] 5758 	jreq 1$
      001FE3 CC 09 1C         [ 2] 5759 	jp syntax_error 
      001FE6 90 85            [ 2] 5760 1$: popw y ; mode 
      001FE8 85               [ 2] 5761 	popw x ; Dx pin 
      001FE9 CD 20 26         [ 4] 5762 	call select_pin 
      001FEC 6B 01            [ 1] 5763 	ld (PINNO,sp),a  
      001FEE A6 01            [ 1] 5764 	ld a,#1 
      001FF0 0D 01            [ 1] 5765 	tnz (PINNO,sp)
      001FF2 27 0D            [ 1] 5766 	jreq 4$
      001FF4 48               [ 1] 5767 2$:	sll a 
      001FF5 0A 01            [ 1] 5768 	dec (PINNO,sp)
      001FF7 26 FB            [ 1] 5769 	jrne 2$ 
      001FF9 6B 01            [ 1] 5770 	ld (PINNO,sp),a
      001FFB 7B 01            [ 1] 5771 	ld a,(PINNO,sp)
      001FFD EA 03            [ 1] 5772 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001FFF E7 03            [ 1] 5773 	ld (GPIO_CR1,x),a 
      002001 90 A3 00 01      [ 2] 5774 4$:	cpw y,#OUTP 
      002005 27 10            [ 1] 5775 	jreq 6$
                                   5776 ; input mode
                                   5777 ; disable external interrupt 
      002007 7B 01            [ 1] 5778 	ld a,(PINNO,sp)
      002009 43               [ 1] 5779 	cpl a 
      00200A E4 04            [ 1] 5780 	and a,(GPIO_CR2,x)
      00200C E7 04            [ 1] 5781 	ld (GPIO_CR2,x),a 
                                   5782 ;clear bit in DDR for input mode 
      00200E 7B 01            [ 1] 5783 	ld a,(PINNO,sp)
      002010 43               [ 1] 5784 	cpl a 
      002011 E4 02            [ 1] 5785 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002013 E7 02            [ 1] 5786 	ld (GPIO_DDR,x),a 
      002015 20 0C            [ 2] 5787 	jra 9$
      002017                       5788 6$: ;output mode  
      002017 7B 01            [ 1] 5789 	ld a,(PINNO,sp)
      002019 EA 02            [ 1] 5790 	or a,(GPIO_DDR,x) ; bit==1 for output 
      00201B E7 02            [ 1] 5791 	ld (GPIO_DDR,x),a 
      00201D 7B 01            [ 1] 5792 	ld a,(PINNO,sp)
      00201F EA 04            [ 1] 5793 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002021 E7 04            [ 1] 5794 	ld (GPIO_CR2,x),a 
      002023                       5795 9$:	
      002023                       5796 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      002023 5B 01            [ 2]    1     addw sp,#VSIZE 
      002025 81               [ 4] 5797 	ret
                                   5798 
                                   5799 ;------------------------
                                   5800 ; select Arduino pin 
                                   5801 ; input:
                                   5802 ;   X 	 {0..15} Arduino Dx 
                                   5803 ; output:
                                   5804 ;   A     stm8s208 pin 
                                   5805 ;   X     base address s208 GPIO port 
                                   5806 ;---------------------------
      002026                       5807 select_pin:
      002026 58               [ 2] 5808 	sllw x 
      002027 1C 20 36         [ 2] 5809 	addw x,#arduino_to_8s208 
      00202A FE               [ 2] 5810 	ldw x,(x)
      00202B 9F               [ 1] 5811 	ld a,xl 
      00202C 88               [ 1] 5812 	push a 
      00202D 5E               [ 1] 5813 	swapw x 
      00202E A6 05            [ 1] 5814 	ld a,#5 
      002030 42               [ 4] 5815 	mul x,a 
      002031 1C 50 00         [ 2] 5816 	addw x,#GPIO_BASE 
      002034 84               [ 1] 5817 	pop a 
      002035 81               [ 4] 5818 	ret 
                                   5819 ; translation from Arduino D0..D15 to stm8s208rb 
      002036                       5820 arduino_to_8s208:
      002036 03 06                 5821 .byte 3,6 ; D0 
      002038 03 05                 5822 .byte 3,5 ; D1 
      00203A 04 00                 5823 .byte 4,0 ; D2 
      00203C 02 01                 5824 .byte 2,1 ; D3
      00203E 06 00                 5825 .byte 6,0 ; D4
      002040 02 02                 5826 .byte 2,2 ; D5
      002042 02 03                 5827 .byte 2,3 ; D6
      002044 03 01                 5828 .byte 3,1 ; D7
      002046 03 03                 5829 .byte 3,3 ; D8
      002048 02 04                 5830 .byte 2,4 ; D9
      00204A 04 05                 5831 .byte 4,5 ; D10
      00204C 02 06                 5832 .byte 2,6 ; D11
      00204E 02 07                 5833 .byte 2,7 ; D12
      002050 02 05                 5834 .byte 2,5 ; D13
      002052 04 02                 5835 .byte 4,2 ; D14
      002054 04 01                 5836 .byte 4,1 ; D15
                                   5837 
                                   5838 
                                   5839 ;------------------------------
                                   5840 ; BASIC: RND(expr)
                                   5841 ; return random number 
                                   5842 ; between 1 and expr inclusive
                                   5843 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5844 ; input:
                                   5845 ; 	none 
                                   5846 ; output:
                                   5847 ;	X 		random positive integer 
                                   5848 ;------------------------------
      002056                       5849 random:
      002056 CD 10 EF         [ 4] 5850 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002059 A1 01            [ 1] 5851 	cp a,#1
      00205B 27 03            [ 1] 5852 	jreq 1$
      00205D CC 09 1C         [ 2] 5853 	jp syntax_error
      002060                       5854 1$:  
      002060 A6 80            [ 1] 5855 	ld a,#0x80 
      002062 15 01            [ 1] 5856 	bcp a,(1,sp)
      002064 27 05            [ 1] 5857 	jreq 2$
      002066 A6 0A            [ 1] 5858 	ld a,#ERR_BAD_VALUE
      002068 CC 09 1E         [ 2] 5859 	jp tb_error
      00206B                       5860 2$: 
                                   5861 ; acc16=(x<<5)^x 
      00206B CE 00 12         [ 2] 5862 	ldw x,seedx 
      00206E 58               [ 2] 5863 	sllw x 
      00206F 58               [ 2] 5864 	sllw x 
      002070 58               [ 2] 5865 	sllw x 
      002071 58               [ 2] 5866 	sllw x 
      002072 58               [ 2] 5867 	sllw x 
      002073 9E               [ 1] 5868 	ld a,xh 
      002074 C8 00 12         [ 1] 5869 	xor a,seedx 
      002077 C7 00 0C         [ 1] 5870 	ld acc16,a 
      00207A 9F               [ 1] 5871 	ld a,xl 
      00207B C8 00 13         [ 1] 5872 	xor a,seedx+1 
      00207E C7 00 0D         [ 1] 5873 	ld acc8,a 
                                   5874 ; seedx=seedy 
      002081 CE 00 14         [ 2] 5875 	ldw x,seedy 
      002084 CF 00 12         [ 2] 5876 	ldw seedx,x  
                                   5877 ; seedy=seedy^(seedy>>1)
      002087 90 54            [ 2] 5878 	srlw y 
      002089 90 9E            [ 1] 5879 	ld a,yh 
      00208B C8 00 14         [ 1] 5880 	xor a,seedy 
      00208E C7 00 14         [ 1] 5881 	ld seedy,a  
      002091 90 9F            [ 1] 5882 	ld a,yl 
      002093 C8 00 15         [ 1] 5883 	xor a,seedy+1 
      002096 C7 00 15         [ 1] 5884 	ld seedy+1,a 
                                   5885 ; acc16>>3 
      002099 CE 00 0C         [ 2] 5886 	ldw x,acc16 
      00209C 54               [ 2] 5887 	srlw x 
      00209D 54               [ 2] 5888 	srlw x 
      00209E 54               [ 2] 5889 	srlw x 
                                   5890 ; x=acc16^x 
      00209F 9E               [ 1] 5891 	ld a,xh 
      0020A0 C8 00 0C         [ 1] 5892 	xor a,acc16 
      0020A3 95               [ 1] 5893 	ld xh,a 
      0020A4 9F               [ 1] 5894 	ld a,xl 
      0020A5 C8 00 0D         [ 1] 5895 	xor a,acc8 
      0020A8 97               [ 1] 5896 	ld xl,a 
                                   5897 ; seedy=x^seedy 
      0020A9 C8 00 15         [ 1] 5898 	xor a,seedy+1
      0020AC 97               [ 1] 5899 	ld xl,a 
      0020AD 9E               [ 1] 5900 	ld a,xh 
      0020AE C8 00 14         [ 1] 5901 	xor a,seedy
      0020B1 95               [ 1] 5902 	ld xh,a 
      0020B2 CF 00 14         [ 2] 5903 	ldw seedy,x 
                                   5904 ; return seedy modulo expr + 1 
      0020B5 90 85            [ 2] 5905 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0020B7 65               [ 2] 5906 	divw x,y 
      0020B8 93               [ 1] 5907 	ldw x,y 
      0020B9 5C               [ 1] 5908 	incw x 
      0020BA                       5909 10$:
      0020BA A6 84            [ 1] 5910 	ld a,#TK_INTGR
      0020BC 81               [ 4] 5911 	ret 
                                   5912 
                                   5913 ;---------------------------------
                                   5914 ; BASIC: WORDS 
                                   5915 ; affiche la listes des mots du
                                   5916 ; dictionnaire ainsi que le nombre
                                   5917 ; de mots.
                                   5918 ;---------------------------------
                           000001  5919 	WLEN=1 ; word length
                           000002  5920 	LLEN=2 ; character sent to console
                           000003  5921 	WCNT=3 ; count words printed 
                           000003  5922 	VSIZE=3 
      0020BD                       5923 words:
      0020BD                       5924 	_vars VSIZE
      0020BD 52 03            [ 2]    1     sub sp,#VSIZE 
      0020BF 0F 02            [ 1] 5925 	clr (LLEN,sp)
      0020C1 0F 03            [ 1] 5926 	clr (WCNT,sp)
      0020C3 90 AE 28 9E      [ 2] 5927 	ldw y,#kword_dict+2
      0020C7 93               [ 1] 5928 0$:	ldw x,y
      0020C8 F6               [ 1] 5929 	ld a,(x)
      0020C9 A4 0F            [ 1] 5930 	and a,#15 
      0020CB 6B 01            [ 1] 5931 	ld (WLEN,sp),a 
      0020CD 0C 03            [ 1] 5932 	inc (WCNT,sp)
      0020CF 5C               [ 1] 5933 1$:	incw x 
      0020D0 F6               [ 1] 5934 	ld a,(x)
      0020D1 CD 03 2B         [ 4] 5935 	call putc 
      0020D4 0C 02            [ 1] 5936 	inc (LLEN,sp)
      0020D6 0A 01            [ 1] 5937 	dec (WLEN,sp)
      0020D8 26 F5            [ 1] 5938 	jrne 1$
      0020DA A6 46            [ 1] 5939 	ld a,#70
      0020DC 11 02            [ 1] 5940 	cp a,(LLEN,sp)
      0020DE 2B 09            [ 1] 5941 	jrmi 2$   
      0020E0 A6 20            [ 1] 5942 	ld a,#SPACE 
      0020E2 CD 03 2B         [ 4] 5943 	call putc 
      0020E5 0C 02            [ 1] 5944 	inc (LLEN,sp) 
      0020E7 20 07            [ 2] 5945 	jra 3$
      0020E9 A6 0D            [ 1] 5946 2$: ld a,#CR 
      0020EB CD 03 2B         [ 4] 5947 	call putc 
      0020EE 0F 02            [ 1] 5948 	clr (LLEN,sp)
      0020F0 72 A2 00 02      [ 2] 5949 3$:	subw y,#2 
      0020F4 90 FE            [ 2] 5950 	ldw y,(y)
      0020F6 26 CF            [ 1] 5951 	jrne 0$ 
      0020F8 A6 0D            [ 1] 5952 	ld a,#CR 
      0020FA CD 03 2B         [ 4] 5953 	call putc  
      0020FD 5F               [ 1] 5954 	clrw x 
      0020FE 7B 03            [ 1] 5955 	ld a,(WCNT,sp)
      002100 97               [ 1] 5956 	ld xl,a 
      002101 CD 0A 6F         [ 4] 5957 	call print_int 
      002104 AE 21 0D         [ 2] 5958 	ldw x,#words_count_msg
      002107 CD 00 00         [ 4] 5959 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00210A                       5960 	_drop VSIZE 
      00210A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00210C 81               [ 4] 5961 	ret 
      00210D 20 77 6F 72 64 73 20  5962 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5963 
                                   5964 
                                   5965 ;-----------------------------
                                   5966 ; BASIC: TIMER expr 
                                   5967 ; initialize count down timer 
                                   5968 ;-----------------------------
      002123                       5969 set_timer:
      002123 CD 10 F4         [ 4] 5970 	call arg_list
      002126 A1 01            [ 1] 5971 	cp a,#1 
      002128 27 03            [ 1] 5972 	jreq 1$
      00212A CC 09 1C         [ 2] 5973 	jp syntax_error
      00212D                       5974 1$: 
      00212D 85               [ 2] 5975 	popw x 
      00212E CF 00 10         [ 2] 5976 	ldw timer,x 
      002131 81               [ 4] 5977 	ret 
                                   5978 
                                   5979 ;------------------------------
                                   5980 ; BASIC: TIMEOUT 
                                   5981 ; return state of timer 
                                   5982 ;------------------------------
      002132                       5983 timeout:
      002132 CE 00 10         [ 2] 5984 	ldw x,timer 
      002135                       5985 logical_complement:
      002135 53               [ 2] 5986 	cplw x 
      002136 A3 FF FF         [ 2] 5987 	cpw x,#-1
      002139 27 01            [ 1] 5988 	jreq 2$
      00213B 5F               [ 1] 5989 	clrw x 
      00213C A6 84            [ 1] 5990 2$:	ld a,#TK_INTGR
      00213E 81               [ 4] 5991 	ret 
                                   5992 
                                   5993 ;--------------------------------
                                   5994 ; BASIC NOT(expr) 
                                   5995 ; return logical complement of expr
                                   5996 ;--------------------------------
      00213F                       5997 func_not:
      00213F CD 10 EF         [ 4] 5998 	call func_args  
      002142 A1 01            [ 1] 5999 	cp a,#1
      002144 27 03            [ 1] 6000 	jreq 1$
      002146 CC 09 1C         [ 2] 6001 	jp syntax_error
      002149 85               [ 2] 6002 1$:	popw x 
      00214A 20 E9            [ 2] 6003 	jra logical_complement
                                   6004 
                                   6005 
                                   6006 
                                   6007 ;-----------------------------------
                                   6008 ; BASIC: IWDGEN expr1 
                                   6009 ; enable independant watchdog timer
                                   6010 ; expr1 is delay in multiple of 62.5µsec
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6011 ; expr1 -> {1..16383}
                                   6012 ;-----------------------------------
      00214C                       6013 enable_iwdg:
      00214C CD 10 F4         [ 4] 6014 	call arg_list
      00214F A1 01            [ 1] 6015 	cp a,#1 
      002151 27 03            [ 1] 6016 	jreq 1$
      002153 CC 09 1C         [ 2] 6017 	jp syntax_error 
      002156 85               [ 2] 6018 1$: popw x 
      002157 4B 00            [ 1] 6019 	push #0
      002159 35 CC 50 E0      [ 1] 6020 	mov IWDG_KR,#IWDG_KEY_ENABLE
      00215D 9E               [ 1] 6021 	ld a,xh 
      00215E A4 3F            [ 1] 6022 	and a,#0x3f
      002160 95               [ 1] 6023 	ld xh,a  
      002161 A3 00 FF         [ 2] 6024 2$:	cpw x,#255
      002164 23 06            [ 2] 6025 	jrule 3$
      002166 0C 01            [ 1] 6026 	inc (1,sp)
      002168 98               [ 1] 6027 	rcf 
      002169 56               [ 2] 6028 	rrcw x 
      00216A 20 F5            [ 2] 6029 	jra 2$
      00216C 35 55 50 E0      [ 1] 6030 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002170 84               [ 1] 6031 	pop a  
      002171 C7 50 E1         [ 1] 6032 	ld IWDG_PR,a 
      002174 9F               [ 1] 6033 	ld a,xl
      002175 4A               [ 1] 6034 	dec a 
      002176 35 55 50 E0      [ 1] 6035 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      00217A C7 50 E2         [ 1] 6036 	ld IWDG_RLR,a 
      00217D 35 AA 50 E0      [ 1] 6037 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002181 81               [ 4] 6038 	ret 
                                   6039 
                                   6040 
                                   6041 ;-----------------------------------
                                   6042 ; BASIC: IWDGREF  
                                   6043 ; refresh independant watchdog count down 
                                   6044 ; timer before it reset MCU. 
                                   6045 ;-----------------------------------
      002182                       6046 refresh_iwdg:
      002182 35 AA 50 E0      [ 1] 6047 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002186 81               [ 4] 6048 	ret 
                                   6049 
                                   6050 
                                   6051 ;-------------------------------------
                                   6052 ; BASIC: LOG(expr)
                                   6053 ; return logarithm base 2 of expr 
                                   6054 ; this is the position of most significant
                                   6055 ; bit set. 
                                   6056 ; input: 
                                   6057 ; output:
                                   6058 ;   X     log2 
                                   6059 ;   A     TK_INTGR 
                                   6060 ;*********************************
      002187                       6061 log2:
      002187 CD 10 EF         [ 4] 6062 	call func_args 
      00218A A1 01            [ 1] 6063 	cp a,#1 
      00218C 27 03            [ 1] 6064 	jreq 1$
      00218E CC 09 1C         [ 2] 6065 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002191 85               [ 2] 6066 1$: popw x 
      002192                       6067 leading_one:
      002192 5D               [ 2] 6068 	tnzw x 
      002193 27 0A            [ 1] 6069 	jreq 4$
      002195 A6 0F            [ 1] 6070 	ld a,#15 
      002197 59               [ 2] 6071 2$: rlcw x 
      002198 25 03            [ 1] 6072     jrc 3$
      00219A 4A               [ 1] 6073 	dec a 
      00219B 20 FA            [ 2] 6074 	jra 2$
      00219D 5F               [ 1] 6075 3$: clrw x 
      00219E 97               [ 1] 6076     ld xl,a
      00219F A6 84            [ 1] 6077 4$:	ld a,#TK_INTGR
      0021A1 81               [ 4] 6078 	ret 
                                   6079 
                                   6080 ;-----------------------------------
                                   6081 ; BASIC: BIT(expr) 
                                   6082 ; expr ->{0..15}
                                   6083 ; return 2^expr 
                                   6084 ; output:
                                   6085 ;    x    2^expr 
                                   6086 ;-----------------------------------
      0021A2                       6087 bitmask:
      0021A2 CD 10 EF         [ 4] 6088     call func_args 
      0021A5 A1 01            [ 1] 6089 	cp a,#1
      0021A7 27 03            [ 1] 6090 	jreq 1$
      0021A9 CC 09 1C         [ 2] 6091 	jp syntax_error 
      0021AC 85               [ 2] 6092 1$: popw x 
      0021AD 9F               [ 1] 6093 	ld a,xl 
      0021AE A4 0F            [ 1] 6094 	and a,#15
      0021B0 5F               [ 1] 6095 	clrw x 
      0021B1 5C               [ 1] 6096 	incw x 
      0021B2 4D               [ 1] 6097 2$: tnz a 
      0021B3 27 04            [ 1] 6098 	jreq 3$
      0021B5 58               [ 2] 6099 	slaw x 
      0021B6 4A               [ 1] 6100 	dec a 
      0021B7 20 F9            [ 2] 6101 	jra 2$ 
      0021B9 A6 84            [ 1] 6102 3$: ld a,#TK_INTGR
      0021BB 81               [ 4] 6103 	ret 
                                   6104 
                                   6105 ;------------------------------
                                   6106 ; BASIC: INVERT(expr)
                                   6107 ; 1's complement 
                                   6108 ;--------------------------------
      0021BC                       6109 invert:
      0021BC CD 10 EF         [ 4] 6110 	call func_args
      0021BF A1 01            [ 1] 6111 	cp a,#1 
      0021C1 27 03            [ 1] 6112 	jreq 1$
      0021C3 CC 09 1C         [ 2] 6113 	jp syntax_error
      0021C6 85               [ 2] 6114 1$: popw x  
      0021C7 53               [ 2] 6115 	cplw x 
      0021C8 A6 84            [ 1] 6116 	ld a,#TK_INTGR 
      0021CA 81               [ 4] 6117 	ret 
                                   6118 
                                   6119 ;------------------------------
                                   6120 ; BASIC: DO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   6121 ; initiate a DO ... UNTIL loop 
                                   6122 ;------------------------------
                           000003  6123 	DOLP_ADR=3 
                           000005  6124 	DOLP_INW=5
                           000004  6125 	VSIZE=4 
      0021CB                       6126 do_loop:
      0021CB 85               [ 2] 6127 	popw x 
      0021CC                       6128 	_vars VSIZE 
      0021CC 52 04            [ 2]    1     sub sp,#VSIZE 
      0021CE 89               [ 2] 6129 	pushw x 
      0021CF 90 CE 00 04      [ 2] 6130 	ldw y,basicptr 
      0021D3 17 03            [ 2] 6131 	ldw (DOLP_ADR,sp),y
      0021D5 90 CE 00 00      [ 2] 6132 	ldw y,in.w 
      0021D9 17 05            [ 2] 6133 	ldw (DOLP_INW,sp),y
      0021DB 72 5C 00 20      [ 1] 6134 	inc loop_depth 
      0021DF 81               [ 4] 6135 	ret 
                                   6136 
                                   6137 ;--------------------------------
                                   6138 ; BASIC: UNTIL expr 
                                   6139 ; loop if exprssion is false 
                                   6140 ; else terminate loop
                                   6141 ;--------------------------------
      0021E0                       6142 until: 
      0021E0 72 5D 00 20      [ 1] 6143 	tnz loop_depth 
      0021E4 26 03            [ 1] 6144 	jrne 1$ 
      0021E6 CC 09 1C         [ 2] 6145 	jp syntax_error 
      0021E9                       6146 1$: 
      0021E9 CD 12 3F         [ 4] 6147 	call relation 
      0021EC A1 84            [ 1] 6148 	cp a,#TK_INTGR
      0021EE 27 03            [ 1] 6149 	jreq 2$
      0021F0 CC 09 1C         [ 2] 6150 	jp syntax_error
      0021F3                       6151 2$: 
      0021F3 5D               [ 2] 6152 	tnzw x 
      0021F4 26 10            [ 1] 6153 	jrne 9$
      0021F6 1E 03            [ 2] 6154 	ldw x,(DOLP_ADR,sp)
      0021F8 CF 00 04         [ 2] 6155 	ldw basicptr,x 
      0021FB E6 02            [ 1] 6156 	ld a,(2,x)
      0021FD C7 00 03         [ 1] 6157 	ld count,a 
      002200 1E 05            [ 2] 6158 	ldw x,(DOLP_INW,sp)
      002202 CF 00 00         [ 2] 6159 	ldw in.w,x 
      002205 81               [ 4] 6160 	ret 
      002206                       6161 9$:	; remove loop data from stack  
      002206 85               [ 2] 6162 	popw x
      002207                       6163 	_drop VSIZE
      002207 5B 04            [ 2]    1     addw sp,#VSIZE 
      002209 72 5A 00 20      [ 1] 6164 	dec loop_depth 
      00220D FC               [ 2] 6165 	jp (x)
                                   6166 
                                   6167 ;--------------------------
                                   6168 ; BASIC: PRTA...PRTI  
                                   6169 ;  return constant value 
                                   6170 ;  PORT  offset in GPIO
                                   6171 ;  array
                                   6172 ;---------------------------
      00220E                       6173 const_porta:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00220E AE 00 00         [ 2] 6174 	ldw x,#0
      002211 A6 84            [ 1] 6175 	ld a,#TK_INTGR 
      002213 81               [ 4] 6176 	ret 
      002214                       6177 const_portb:
      002214 AE 00 01         [ 2] 6178 	ldw x,#1
      002217 A6 84            [ 1] 6179 	ld a,#TK_INTGR 
      002219 81               [ 4] 6180 	ret 
      00221A                       6181 const_portc:
      00221A AE 00 02         [ 2] 6182 	ldw x,#2
      00221D A6 84            [ 1] 6183 	ld a,#TK_INTGR 
      00221F 81               [ 4] 6184 	ret 
      002220                       6185 const_portd:
      002220 AE 00 03         [ 2] 6186 	ldw x,#3
      002223 A6 84            [ 1] 6187 	ld a,#TK_INTGR 
      002225 81               [ 4] 6188 	ret 
      002226                       6189 const_porte:
      002226 AE 00 04         [ 2] 6190 	ldw x,#4
      002229 A6 84            [ 1] 6191 	ld a,#TK_INTGR 
      00222B 81               [ 4] 6192 	ret 
      00222C                       6193 const_portf:
      00222C AE 00 05         [ 2] 6194 	ldw x,#5
      00222F A6 84            [ 1] 6195 	ld a,#TK_INTGR 
      002231 81               [ 4] 6196 	ret 
      002232                       6197 const_portg:
      002232 AE 00 06         [ 2] 6198 	ldw x,#6
      002235 A6 84            [ 1] 6199 	ld a,#TK_INTGR 
      002237 81               [ 4] 6200 	ret 
      002238                       6201 const_porth:
      002238 AE 00 07         [ 2] 6202 	ldw x,#7
      00223B A6 84            [ 1] 6203 	ld a,#TK_INTGR 
      00223D 81               [ 4] 6204 	ret 
      00223E                       6205 const_porti:
      00223E AE 00 08         [ 2] 6206 	ldw x,#8
      002241 A6 84            [ 1] 6207 	ld a,#TK_INTGR 
      002243 81               [ 4] 6208 	ret 
                                   6209 
                                   6210 ;-------------------------------
                                   6211 ; following return constant 
                                   6212 ; related to GPIO register offset 
                                   6213 ;---------------------------------
      002244                       6214 const_odr:
      002244 A6 84            [ 1] 6215 	ld a,#TK_INTGR 
      002246 AE 00 00         [ 2] 6216 	ldw x,#GPIO_ODR
      002249 81               [ 4] 6217 	ret 
      00224A                       6218 const_idr:
      00224A A6 84            [ 1] 6219 	ld a,#TK_INTGR 
      00224C AE 00 01         [ 2] 6220 	ldw x,#GPIO_IDR
      00224F 81               [ 4] 6221 	ret 
      002250                       6222 const_ddr:
      002250 A6 84            [ 1] 6223 	ld a,#TK_INTGR 
      002252 AE 00 02         [ 2] 6224 	ldw x,#GPIO_DDR
      002255 81               [ 4] 6225 	ret 
      002256                       6226 const_cr1:
      002256 A6 84            [ 1] 6227 	ld a,#TK_INTGR 
      002258 AE 00 03         [ 2] 6228 	ldw x,#GPIO_CR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      00225B 81               [ 4] 6229 	ret 
      00225C                       6230 const_cr2:
      00225C A6 84            [ 1] 6231 	ld a,#TK_INTGR 
      00225E AE 00 04         [ 2] 6232 	ldw x,#GPIO_CR2
      002261 81               [ 4] 6233 	ret 
                                   6234 ;-------------------------
                                   6235 ;  constant for port mode
                                   6236 ;  used by PMODE 
                                   6237 ;  input or output
                                   6238 ;------------------------
      002262                       6239 const_output:
      002262 A6 84            [ 1] 6240 	ld a,#TK_INTGR 
      002264 AE 00 01         [ 2] 6241 	ldw x,#OUTP
      002267 81               [ 4] 6242 	ret 
      002268                       6243 const_input:
      002268 A6 84            [ 1] 6244 	ld a,#TK_INTGR 
      00226A AE 00 00         [ 2] 6245 	ldw x,#INP 
      00226D 81               [ 4] 6246 	ret 
                                   6247 ;-----------------------
                                   6248 ; memory area constants
                                   6249 ;-----------------------
      00226E                       6250 const_eeprom_base:
      00226E A6 84            [ 1] 6251 	ld a,#TK_INTGR 
      002270 AE 40 00         [ 2] 6252 	ldw x,#EEPROM_BASE 
      002273 81               [ 4] 6253 	ret 
                                   6254 
                                   6255 ;---------------------------
                                   6256 ; BASIC: DATA 
                                   6257 ; when the interpreter find 
                                   6258 ; a DATA line it skip it.
                                   6259 ;---------------------------
      002274                       6260 data:
      002274 55 00 03 00 01   [ 1] 6261 	mov in,count 
      002279 81               [ 4] 6262 	ret 
                                   6263 
                                   6264 ;---------------------------
                                   6265 ; BASIC: DATLN  *expr*
                                   6266 ; set DATA pointer at line# 
                                   6267 ; specified by *expr* 
                                   6268 ;---------------------------
      00227A                       6269 data_line:
      00227A CD 11 F3         [ 4] 6270 	call expression
      00227D A1 84            [ 1] 6271 	cp a,#TK_INTGR
      00227F 27 03            [ 1] 6272 	jreq 1$
      002281 CC 09 1C         [ 2] 6273 	jp syntax_error 
      002284 CD 04 A0         [ 4] 6274 1$: call search_lineno
      002287 5D               [ 2] 6275 	tnzw x 
      002288 26 05            [ 1] 6276 	jrne 3$
      00228A A6 05            [ 1] 6277 2$:	ld a,#ERR_NO_LINE 
      00228C CC 09 1E         [ 2] 6278 	jp tb_error
      00228F                       6279 3$: ; check if valid data line 
      00228F 90 93            [ 1] 6280     ldw y,x 
      002291 EE 04            [ 2] 6281 	ldw x,(4,x)
      002293 A3 22 74         [ 2] 6282 	cpw x,#data 
      002296 26 F2            [ 1] 6283 	jrne 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      002298 90 CF 00 06      [ 2] 6284 	ldw data_ptr,y
      00229C 90 E6 02         [ 1] 6285 	ld a,(2,y)
      00229F C7 00 09         [ 1] 6286 	ld data_len,a 
      0022A2 35 06 00 08      [ 1] 6287 	mov data_ofs,#FIRST_DATA_ITEM 
      0022A6 81               [ 4] 6288 	ret
                                   6289 
                                   6290 ;---------------------------------
                                   6291 ; BASIC: RESTORE 
                                   6292 ; set data_ptr to first data line
                                   6293 ; if not DATA found pointer set to
                                   6294 ; zero 
                                   6295 ;---------------------------------
      0022A7                       6296 restore:
      0022A7 72 5F 00 06      [ 1] 6297 	clr data_ptr 
      0022AB 72 5F 00 07      [ 1] 6298 	clr data_ptr+1
      0022AF 72 5F 00 08      [ 1] 6299 	clr data_ofs 
      0022B3 72 5F 00 09      [ 1] 6300 	clr data_len
      0022B7 CE 00 1C         [ 2] 6301 	ldw x,txtbgn
      0022BA                       6302 data_search_loop: 	
      0022BA C3 00 1E         [ 2] 6303 	cpw x,txtend
      0022BD 24 1B            [ 1] 6304 	jruge 9$
      0022BF 90 93            [ 1] 6305 	ldw y,x 
      0022C1 EE 04            [ 2] 6306 	ldw x,(4,x)
      0022C3 1C 28 A4         [ 2] 6307 	addw x,#code_addr
      0022C6 FE               [ 2] 6308 	ldw x,(x)
      0022C7 A3 22 74         [ 2] 6309 	cpw x,#data 
      0022CA 26 1A            [ 1] 6310 	jrne try_next_line 
      0022CC 90 CF 00 06      [ 2] 6311 	ldw data_ptr,y 
      0022D0 90 E6 02         [ 1] 6312 	ld a,(2,y)
      0022D3 C7 00 09         [ 1] 6313 	ld data_len,a 
      0022D6 35 06 00 08      [ 1] 6314 	mov data_ofs,#FIRST_DATA_ITEM
      0022DA 72 5D 00 09      [ 1] 6315 9$:	tnz data_len 
      0022DE 26 05            [ 1] 6316     jrne 10$
      0022E0 A6 0C            [ 1] 6317 	ld a,#ERR_NO_DATA 
      0022E2 CC 09 1E         [ 2] 6318 	jp tb_error 
      0022E5 81               [ 4] 6319 10$:ret
      0022E6                       6320 try_next_line:
      0022E6 93               [ 1] 6321 	ldw x,y 
      0022E7 E6 02            [ 1] 6322 	ld a,(2,x)
      0022E9 C7 00 0D         [ 1] 6323 	ld acc8,a 
      0022EC 72 5F 00 0C      [ 1] 6324 	clr acc16 
      0022F0 72 BB 00 0C      [ 2] 6325 	addw x,acc16 
      0022F4 20 C4            [ 2] 6326 	jra data_search_loop
                                   6327 
                                   6328 
                                   6329 ;---------------------------------
                                   6330 ; BASIC: READ 
                                   6331 ; return next data item | 0 
                                   6332 ;---------------------------------
                           000001  6333 	CTX_BPTR=1 
                           000003  6334 	CTX_IN=3 
                           000004  6335 	CTX_COUNT=4 
                           000005  6336 	XSAVE=5
                           000006  6337 	VSIZE=6
      0022F6                       6338 read:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0022F6                       6339 	_vars  VSIZE 
      0022F6 52 06            [ 2]    1     sub sp,#VSIZE 
      0022F8                       6340 read01:	
      0022F8 C6 00 08         [ 1] 6341 	ld a,data_ofs
      0022FB C1 00 09         [ 1] 6342 	cp a,data_len 
      0022FE 27 37            [ 1] 6343 	jreq 2$ ; end of line  
      002300 CD 16 46         [ 4] 6344 	call save_context
      002303 CE 00 06         [ 2] 6345 	ldw x,data_ptr 
      002306 CF 00 04         [ 2] 6346 	ldw basicptr,x 
      002309 55 00 08 00 01   [ 1] 6347 	mov in,data_ofs 
      00230E 55 00 09 00 03   [ 1] 6348 	mov count,data_len  
      002313 CD 11 F3         [ 4] 6349 	call expression 
      002316 A1 84            [ 1] 6350 	cp a,#TK_INTGR 
      002318 27 03            [ 1] 6351 	jreq 1$ 
      00231A CC 09 1C         [ 2] 6352 	jp syntax_error 
      00231D                       6353 1$:
      00231D 1F 05            [ 2] 6354 	ldw (XSAVE,SP),x
      00231F CD 0A 0E         [ 4] 6355 	call next_token ; skip comma
      002322 CE 00 04         [ 2] 6356 	ldw x,basicptr 
      002325 CF 00 06         [ 2] 6357 	ldw data_ptr,x 
      002328 55 00 01 00 08   [ 1] 6358 	mov data_ofs,in 
      00232D CD 16 56         [ 4] 6359 	call rest_context
      002330 1E 05            [ 2] 6360 	ldw x,(XSAVE,sp)
      002332 A6 84            [ 1] 6361 	ld a,#TK_INTGR
      002334                       6362 	_drop VSIZE 
      002334 5B 06            [ 2]    1     addw sp,#VSIZE 
      002336 81               [ 4] 6363 	ret 
      002337                       6364 2$: ; end of line reached 
      002337 90 CE 00 06      [ 2] 6365 	ldw y, data_ptr 
      00233B 72 5F 00 06      [ 1] 6366 	clr data_ptr
      00233F 72 5F 00 07      [ 1] 6367 	clr data_ptr+1   
      002343 72 5F 00 08      [ 1] 6368 	clr data_ofs 
      002347 72 5F 00 09      [ 1] 6369 	clr data_len 
      00234B CD 22 E6         [ 4] 6370 	call try_next_line 
      00234E 20 A8            [ 2] 6371 	jra read01
                                   6372 
                                   6373 
                                   6374 ;---------------------------------
                                   6375 ; BASIC: SPIEN clkdiv, 0|1  
                                   6376 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6377 ; if clkdiv==-1 disable SPI
                                   6378 ; 0|1 -> disable|enable  
                                   6379 ;--------------------------------- 
                           000005  6380 SPI_CS_BIT=5
      002350                       6381 spi_enable:
      002350 CD 10 F4         [ 4] 6382 	call arg_list 
      002353 A1 02            [ 1] 6383 	cp a,#2
      002355 27 03            [ 1] 6384 	jreq 1$
      002357 CC 09 1C         [ 2] 6385 	jp syntax_error 
      00235A                       6386 1$: 
      00235A 72 12 50 C7      [ 1] 6387 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      00235E 85               [ 2] 6388 	popw x  
      00235F 5D               [ 2] 6389 	tnzw x 
      002360 27 21            [ 1] 6390 	jreq spi_disable 
      002362 85               [ 2] 6391 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002363 A6 08            [ 1] 6392 	ld a,#(1<<SPI_CR1_BR)
      002365 42               [ 4] 6393 	mul x,a 
      002366 9F               [ 1] 6394 	ld a,xl 
      002367 C7 52 00         [ 1] 6395 	ld SPI_CR1,a 
                                   6396 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00236A 72 1A 50 14      [ 1] 6397 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      00236E 72 1A 50 16      [ 1] 6398 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6399 ; configure SPI as master mode 0.	
      002372 72 14 52 00      [ 1] 6400 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6401 ; ~CS line controlled by sofware 	
      002376 72 12 52 01      [ 1] 6402 	bset SPI_CR2,#SPI_CR2_SSM 
      00237A 72 10 52 01      [ 1] 6403     bset SPI_CR2,#SPI_CR2_SSI 
                                   6404 ; enable SPI
      00237E 72 1C 52 00      [ 1] 6405 	bset SPI_CR1,#SPI_CR1_SPE 	
      002382 81               [ 4] 6406 	ret 
      002383                       6407 spi_disable:
      002383                       6408 	_drop #2; throw first argument.
      002383 5B 02            [ 2]    1     addw sp,##2 
                                   6409 ; wait spi idle 
      002385 A6 82            [ 1] 6410 1$:	ld a,#0x82 
      002387 C4 52 03         [ 1] 6411 	and a,SPI_SR
      00238A A1 02            [ 1] 6412 	cp a,#2 
      00238C 26 F7            [ 1] 6413 	jrne 1$
      00238E 72 1D 52 00      [ 1] 6414 	bres SPI_CR1,#SPI_CR1_SPE
      002392 72 13 50 C7      [ 1] 6415 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002396 72 1B 50 16      [ 1] 6416 	bres PE_DDR,#SPI_CS_BIT 
      00239A 81               [ 4] 6417 	ret 
                                   6418 
      00239B                       6419 spi_clear_error:
      00239B A6 78            [ 1] 6420 	ld a,#0x78 
      00239D C5 52 03         [ 1] 6421 	bcp a,SPI_SR 
      0023A0 27 04            [ 1] 6422 	jreq 1$
      0023A2 72 5F 52 03      [ 1] 6423 	clr SPI_SR 
      0023A6 81               [ 4] 6424 1$: ret 
                                   6425 
      0023A7                       6426 spi_send_byte:
      0023A7 88               [ 1] 6427 	push a 
      0023A8 CD 23 9B         [ 4] 6428 	call spi_clear_error
      0023AB 84               [ 1] 6429 	pop a 
      0023AC 72 03 52 03 FB   [ 2] 6430 	btjf SPI_SR,#SPI_SR_TXE,.
      0023B1 C7 52 04         [ 1] 6431 	ld SPI_DR,a
      0023B4 72 01 52 03 FB   [ 2] 6432 	btjf SPI_SR,#SPI_SR_RXNE,.  
      0023B9 C6 52 04         [ 1] 6433 	ld a,SPI_DR 
      0023BC 81               [ 4] 6434 	ret 
                                   6435 
      0023BD                       6436 spi_rcv_byte:
      0023BD A6 FF            [ 1] 6437 	ld a,#255
      0023BF 72 01 52 03 E3   [ 2] 6438 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      0023C4 C6 52 04         [ 1] 6439 	ld a,SPI_DR 
      0023C7 81               [ 4] 6440 	ret
                                   6441 
                                   6442 ;------------------------------
                                   6443 ; BASIC: SPIWR byte [,byte]
                                   6444 ; write 1 or more byte
                                   6445 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0023C8                       6446 spi_write:
      0023C8 CD 11 F3         [ 4] 6447 	call expression
      0023CB A1 84            [ 1] 6448 	cp a,#TK_INTGR 
      0023CD 27 03            [ 1] 6449 	jreq 1$
      0023CF CC 09 1C         [ 2] 6450 	jp syntax_error 
      0023D2                       6451 1$:	
      0023D2 9F               [ 1] 6452 	ld a,xl 
      0023D3 CD 23 A7         [ 4] 6453 	call spi_send_byte 
      0023D6 CD 0A 0E         [ 4] 6454 	call next_token 
      0023D9 A1 09            [ 1] 6455 	cp a,#TK_COMMA 
      0023DB 26 02            [ 1] 6456 	jrne 2$ 
      0023DD 20 E9            [ 2] 6457 	jra spi_write 
      0023DF 4D               [ 1] 6458 2$:	tnz a 
      0023E0 27 05            [ 1] 6459 	jreq 3$
      0023E2                       6460 	_unget_token  
      0023E2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0023E7 81               [ 4] 6461 3$:	ret 
                                   6462 
                                   6463 
                                   6464 ;-------------------------------
                                   6465 ; BASIC: SPIRD 	
                                   6466 ; read one byte from SPI 
                                   6467 ;-------------------------------
      0023E8                       6468 spi_read:
      0023E8 CD 23 BD         [ 4] 6469 	call spi_rcv_byte 
      0023EB 5F               [ 1] 6470 	clrw x 
      0023EC 97               [ 1] 6471 	ld xl,a 
      0023ED A6 84            [ 1] 6472 	ld a,#TK_INTGR 
      0023EF 81               [ 4] 6473 	ret 
                                   6474 
                                   6475 ;------------------------------
                                   6476 ; BASIC: SPISEL 0|1 
                                   6477 ; set state of ~CS line
                                   6478 ; 0|1 deselect|select  
                                   6479 ;------------------------------
      0023F0                       6480 spi_select:
      0023F0 CD 0A 0E         [ 4] 6481 	call next_token 
      0023F3 A1 84            [ 1] 6482 	cp a,#TK_INTGR 
      0023F5 27 03            [ 1] 6483 	jreq 1$
      0023F7 CC 09 1C         [ 2] 6484 	jp syntax_error 
      0023FA 5D               [ 2] 6485 1$: tnzw x  
      0023FB 27 05            [ 1] 6486 	jreq cs_high 
      0023FD 72 1B 50 14      [ 1] 6487 	bres PE_ODR,#SPI_CS_BIT
      002401 81               [ 4] 6488 	ret 
      002402                       6489 cs_high: 
      002402 72 1A 50 14      [ 1] 6490 	bset PE_ODR,#SPI_CS_BIT
      002406 81               [ 4] 6491 	ret 
                                   6492 
                                   6493 ;-------------------------------
                                   6494 ; BASIC: PAD 
                                   6495 ; Return pad buffer address.
                                   6496 ;------------------------------
      002407                       6497 pad_ref:
      002407 AE 16 E0         [ 2] 6498 	ldw x,#pad 
      00240A B6 84            [ 1] 6499 	ld a,TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00240C 81               [ 4] 6500 	ret 
                                   6501 
                                   6502 ;------------------------------
                                   6503 ; BASIC; XTRMT  
                                   6504 ; transmit file using xmodem protocol
                                   6505 ; via terminal serial port 
                                   6506 ;------------------------------------
                           000001  6507 	SERIAL=1 ;packet serial number
                           000001  6508 	VAR_SIZE=1
      00240D                       6509 transmit:
      00240D                       6510 	_vars VAR_SIZE
      00240D 52 01            [ 2]    1     sub sp,#VAR_SIZE 
      00240F AE 24 79         [ 2] 6511 	ldw x,#xtrmt_msg 
      002412 CD 00 00         [ 4] 6512 	call puts 
                                   6513 ; end of file marker 
      002415 CE 00 1E         [ 2] 6514 	ldw x,txtend 
      002418 90 AE 00 30      [ 2] 6515 	ldw y,#END_IDX 
      00241C FF               [ 2] 6516 	ldw (x),y 
                                   6517 ; zeroes end of file 
      00241D 1C 00 02         [ 2] 6518 	addw x,#2 
      002420 89               [ 2] 6519 	pushw x 
      002421 72 B0 00 1C      [ 2] 6520 	subw x,txtbgn 
      002425 9F               [ 1] 6521 	ld a,xl 
      002426 C7 00 0D         [ 1] 6522 	ld acc8,a 
      002429 A6 80            [ 1] 6523 	ld a,#128 
      00242B C0 00 0D         [ 1] 6524 	sub a,acc8 
      00242E C7 00 0D         [ 1] 6525 	ld acc8,a 
      002431 85               [ 2] 6526 	popw x 
      002432 7F               [ 1] 6527 1$:	clr (x)
      002433 5C               [ 1] 6528 	incw x 
      002434 72 5A 00 0D      [ 1] 6529 	dec acc8  
      002438 26 F8            [ 1] 6530 	jrne 1$
                                   6531 ; transmit on uart3 channel 
      00243A                       6532 wait_nak:
      00243A CD 03 6A         [ 4] 6533 	call uart3_getc 
      00243D A1 15            [ 1] 6534 	cp a,#NAK  
      00243F 26 F9            [ 1] 6535 	jrne wait_nak 
      002441 0F 01            [ 1] 6536 	clr (SERIAL,sp)
      002443 CE 00 1C         [ 2] 6537 	ldw x,txtbgn
      002446                       6538 tx_loop:
      002446 7B 01            [ 1] 6539 	ld a,(SERIAL,sp)
      002448 4C               [ 1] 6540 	inc a
      002449 6B 01            [ 1] 6541 	ld (SERIAL,sp),a 
      00244B CD 00 00         [ 4] 6542 	call xtrmt_block
      00244E A1 15            [ 1] 6543 	cp a,#NAK 
      002450 27 19            [ 1] 6544 	jreq tx_failed 
      002452 C3 00 1E         [ 2] 6545 	cpw x,txtend
      002455 25 EF            [ 1] 6546 	jrult tx_loop 
      002457                       6547 tx_success:
      002457 A6 04            [ 1] 6548 	ld a,#EOT 
      002459 CD 03 34         [ 4] 6549 	call uart3_putc 
      00245C 90 AE 03 E8      [ 2] 6550 	ldw y,#1000
      002460 CD 00 00         [ 4] 6551 	call getc_to  
      002463 AE 24 8A         [ 2] 6552 	ldw x,#x_success 
      002466 CD 00 00         [ 4] 6553 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002469 20 0B            [ 2] 6554 	jra tx_exit
      00246B                       6555 tx_failed:
      00246B A6 18            [ 1] 6556 	ld a,#CAN 
      00246D CD 03 34         [ 4] 6557 	call uart3_putc 
      002470 AE 24 96         [ 2] 6558 	ldw x,#x_fail 
      002473 CD 00 00         [ 4] 6559 	call puts 
      002476                       6560 tx_exit:
      002476                       6561 	_drop VAR_SIZE 
      002476 5B 01            [ 2]    1     addw sp,#VAR_SIZE 
      002478 81               [ 4] 6562 	ret
      002479 58 4D 4F 44 45 4D 20  6563 xtrmt_msg: .asciz "XMODEM transmit "	 
             74 72 61 6E 73 6D 69
             74 20 00
      00248A 73 75 63 63 65 65 64  6564 x_success: .asciz "succeeded.\n"
             65 64 2E 0A 00
      002496 66 61 69 6C 65 64 2E  6565 x_fail: .asciz "failed.\n"
             0A 00
                                   6566 
                                   6567 
                                   6568 ;------------------------------
                                   6569 ; BASIC: XRCV file_name 
                                   6570 ; receive a basic file using
                                   6571 ; xmodem protocol
                                   6572 ; via terminal serial port
                                   6573 ; file is expected to be tokenized 
                                   6574 ; BASIC file and is stored in RAM. 
                                   6575 ;------------------------------
      00249F                       6576 receive: 
      00249F AE 24 E0         [ 2] 6577 	ldw x,#xrcv_msg 
      0024A2 CD 00 00         [ 4] 6578 	call puts 
      0024A5 A6 15            [ 1] 6579 	ld a,#NAK 
      0024A7 CD 03 34         [ 4] 6580 	call uart3_putc 
      0024AA CE 00 1C         [ 2] 6581 	ldw x,txtbgn
      0024AD                       6582 rx_loop:
      0024AD CD 00 00         [ 4] 6583 	call xrcv_block
      0024B0 A1 06            [ 1] 6584 	cp a,#ACK 
      0024B2 27 F9            [ 1] 6585 	jreq rx_loop 
      0024B4 A1 04            [ 1] 6586 	cp a,#EOT
      0024B6 27 0C            [ 1] 6587 	jreq rx_success 	
      0024B8                       6588 rx_failed:
      0024B8 A6 03            [ 1] 6589 	ld a,#ETX 
      0024BA CD 03 34         [ 4] 6590 	call uart3_putc 
      0024BD AE 24 96         [ 2] 6591 	ldw x,#x_fail 
      0024C0 CD 00 00         [ 4] 6592 	call puts 
      0024C3 81               [ 4] 6593 	ret 
      0024C4                       6594 rx_success:
                                   6595 ;back to END_IDX 	
      0024C4 C3 00 1C         [ 2] 6596 	cpw x,txtbgn
      0024C7 27 0D            [ 1] 6597 	jreq 1$ 
      0024C9 90 93            [ 1] 6598 	ldw y,x 
      0024CB 90 FE            [ 2] 6599 	ldw y,(y)
      0024CD 90 A3 00 30      [ 2] 6600 	cpw y,#END_IDX 
      0024D1 27 03            [ 1] 6601 	jreq 1$
      0024D3 5A               [ 2] 6602 	decw x 
      0024D4 20 EE            [ 2] 6603 	jra rx_success
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0024D6 CF 00 1E         [ 2] 6604 1$:	ldw txtend,x 
      0024D9 AE 24 8A         [ 2] 6605 	ldw x,#x_success
      0024DC CD 00 00         [ 4] 6606 	call puts 
      0024DF 81               [ 4] 6607 	ret
      0024E0 58 4D 4F 44 45 4D 20  6608 xrcv_msg: .asciz "XMODEM receive "
             72 65 63 65 69 76 65
             20 00
                                   6609 
                                   6610 
                                   6611 ;------------------------------
                                   6612 ;      dictionary 
                                   6613 ; format:
                                   6614 ;   link:   2 bytes 
                                   6615 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6616 ;   cmd_name: 16 byte max 
                                   6617 ;   cmd_index: 2 bytes 
                                   6618 ;------------------------------
                                   6619 	.macro _dict_entry len,name,cmd_idx 
                                   6620 	.word LINK 
                                   6621 	LINK=.
                                   6622 name:
                                   6623 	.byte len 	
                                   6624 	.ascii "name"
                                   6625 	.word cmd_idx 
                                   6626 	.endm 
                                   6627 
                           000000  6628 	LINK=0
                                   6629 ; respect alphabetic order for BASIC names from Z-A
                                   6630 ; this sort order is for a cleaner WORDS cmd output. 	
      0024F0                       6631 kword_end:
      0024F0                       6632 	_dict_entry,5,XTRMT,XTRMT_IDX ; xmodem transmit
      0024F0 00 00                    1 	.word LINK 
                           0024F2     2 	LINK=.
      0024F2                          3 XTRMT:
      0024F2 05                       4 	.byte 5 	
      0024F3 58 54 52 4D 54           5 	.ascii "XTRMT"
      0024F8 00 C8                    6 	.word XTRMT_IDX 
      0024FA                       6633 	_dict_entry,4,XRCV,XRCV_IDX ; xmodem receive
      0024FA 24 F2                    1 	.word LINK 
                           0024FC     2 	LINK=.
      0024FC                          3 XRCV:
      0024FC 04                       4 	.byte 4 	
      0024FD 58 52 43 56              5 	.ascii "XRCV"
      002501 00 CA                    6 	.word XRCV_IDX 
      002503                       6634 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002503 24 FC                    1 	.word LINK 
                           002505     2 	LINK=.
      002505                          3 XOR:
      002505 43                       4 	.byte 3+F_IFUNC 	
      002506 58 4F 52                 5 	.ascii "XOR"
      002509 00 C6                    6 	.word XOR_IDX 
      00250B                       6635 	_dict_entry,5,WRITE,WRITE_IDX;write  
      00250B 25 05                    1 	.word LINK 
                           00250D     2 	LINK=.
      00250D                          3 WRITE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00250D 05                       4 	.byte 5 	
      00250E 57 52 49 54 45           5 	.ascii "WRITE"
      002513 00 C4                    6 	.word WRITE_IDX 
      002515                       6636 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002515 25 0D                    1 	.word LINK 
                           002517     2 	LINK=.
      002517                          3 WORDS:
      002517 05                       4 	.byte 5 	
      002518 57 4F 52 44 53           5 	.ascii "WORDS"
      00251D 00 C2                    6 	.word WORDS_IDX 
      00251F                       6637 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      00251F 25 17                    1 	.word LINK 
                           002521     2 	LINK=.
      002521                          3 WAIT:
      002521 04                       4 	.byte 4 	
      002522 57 41 49 54              5 	.ascii "WAIT"
      002526 00 C0                    6 	.word WAIT_IDX 
      002528                       6638 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002528 25 21                    1 	.word LINK 
                           00252A     2 	LINK=.
      00252A                          3 USR:
      00252A 43                       4 	.byte 3+F_IFUNC 	
      00252B 55 53 52                 5 	.ascii "USR"
      00252E 00 BE                    6 	.word USR_IDX 
      002530                       6639 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      002530 25 2A                    1 	.word LINK 
                           002532     2 	LINK=.
      002532                          3 UNTIL:
      002532 05                       4 	.byte 5 	
      002533 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002538 00 BC                    6 	.word UNTIL_IDX 
      00253A                       6640 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      00253A 25 32                    1 	.word LINK 
                           00253C     2 	LINK=.
      00253C                          3 UFLASH:
      00253C 46                       4 	.byte 6+F_IFUNC 	
      00253D 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002543 00 BA                    6 	.word UFLASH_IDX 
      002545                       6641 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002545 25 3C                    1 	.word LINK 
                           002547     2 	LINK=.
      002547                          3 UBOUND:
      002547 46                       4 	.byte 6+F_IFUNC 	
      002548 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00254E 00 B8                    6 	.word UBOUND_IDX 
      002550                       6642 	_dict_entry,4,TONE,TONE_IDX;tone  
      002550 25 47                    1 	.word LINK 
                           002552     2 	LINK=.
      002552                          3 TONE:
      002552 04                       4 	.byte 4 	
      002553 54 4F 4E 45              5 	.ascii "TONE"
      002557 00 B6                    6 	.word TONE_IDX 
      002559                       6643 	_dict_entry,2,TO,TO_IDX;to
      002559 25 52                    1 	.word LINK 
                           00255B     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      00255B                          3 TO:
      00255B 02                       4 	.byte 2 	
      00255C 54 4F                    5 	.ascii "TO"
      00255E 00 B4                    6 	.word TO_IDX 
      002560                       6644 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      002560 25 5B                    1 	.word LINK 
                           002562     2 	LINK=.
      002562                          3 TIMEOUT:
      002562 47                       4 	.byte 7+F_IFUNC 	
      002563 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00256A 00 B2                    6 	.word TMROUT_IDX 
      00256C                       6645 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      00256C 25 62                    1 	.word LINK 
                           00256E     2 	LINK=.
      00256E                          3 TIMER:
      00256E 05                       4 	.byte 5 	
      00256F 54 49 4D 45 52           5 	.ascii "TIMER"
      002574 00 B0                    6 	.word TIMER_IDX 
      002576                       6646 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002576 25 6E                    1 	.word LINK 
                           002578     2 	LINK=.
      002578                          3 TICKS:
      002578 45                       4 	.byte 5+F_IFUNC 	
      002579 54 49 43 4B 53           5 	.ascii "TICKS"
      00257E 00 AE                    6 	.word TICKS_IDX 
      002580                       6647 	_dict_entry,4,STOP,STOP_IDX;stop 
      002580 25 78                    1 	.word LINK 
                           002582     2 	LINK=.
      002582                          3 STOP:
      002582 04                       4 	.byte 4 	
      002583 53 54 4F 50              5 	.ascii "STOP"
      002587 00 AC                    6 	.word STOP_IDX 
      002589                       6648 	_dict_entry,4,STEP,STEP_IDX;step 
      002589 25 82                    1 	.word LINK 
                           00258B     2 	LINK=.
      00258B                          3 STEP:
      00258B 04                       4 	.byte 4 	
      00258C 53 54 45 50              5 	.ascii "STEP"
      002590 00 AA                    6 	.word STEP_IDX 
      002592                       6649 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002592 25 8B                    1 	.word LINK 
                           002594     2 	LINK=.
      002594                          3 SPIWR:
      002594 05                       4 	.byte 5 	
      002595 53 50 49 57 52           5 	.ascii "SPIWR"
      00259A 00 A8                    6 	.word SPIWR_IDX 
      00259C                       6650 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      00259C 25 94                    1 	.word LINK 
                           00259E     2 	LINK=.
      00259E                          3 SPISEL:
      00259E 06                       4 	.byte 6 	
      00259F 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0025A5 00 A6                    6 	.word SPISEL_IDX 
      0025A7                       6651 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      0025A7 25 9E                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           0025A9     2 	LINK=.
      0025A9                          3 SPIEN:
      0025A9 05                       4 	.byte 5 	
      0025AA 53 50 49 45 4E           5 	.ascii "SPIEN"
      0025AF 00 A4                    6 	.word SPIEN_IDX 
      0025B1                       6652 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      0025B1 25 A9                    1 	.word LINK 
                           0025B3     2 	LINK=.
      0025B3                          3 SPIRD:
      0025B3 45                       4 	.byte 5+F_IFUNC 	
      0025B4 53 50 49 52 44           5 	.ascii "SPIRD"
      0025B9 00 A2                    6 	.word SPIRD_IDX 
      0025BB                       6653 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      0025BB 25 B3                    1 	.word LINK 
                           0025BD     2 	LINK=.
      0025BD                          3 SLEEP:
      0025BD 05                       4 	.byte 5 	
      0025BE 53 4C 45 45 50           5 	.ascii "SLEEP"
      0025C3 00 A0                    6 	.word SLEEP_IDX 
      0025C5                       6654 	_dict_entry,4+F_IFUNC,SIZE,SIZE_IDX;size
      0025C5 25 BD                    1 	.word LINK 
                           0025C7     2 	LINK=.
      0025C7                          3 SIZE:
      0025C7 44                       4 	.byte 4+F_IFUNC 	
      0025C8 53 49 5A 45              5 	.ascii "SIZE"
      0025CC 00 9E                    6 	.word SIZE_IDX 
      0025CE                       6655     _dict_entry,4,SHOW,SHOW_IDX;show 
      0025CE 25 C7                    1 	.word LINK 
                           0025D0     2 	LINK=.
      0025D0                          3 SHOW:
      0025D0 04                       4 	.byte 4 	
      0025D1 53 48 4F 57              5 	.ascii "SHOW"
      0025D5 00 9C                    6 	.word SHOW_IDX 
      0025D7                       6656 	_dict_entry,4,SAVE,SAVE_IDX;save
      0025D7 25 D0                    1 	.word LINK 
                           0025D9     2 	LINK=.
      0025D9                          3 SAVE:
      0025D9 04                       4 	.byte 4 	
      0025DA 53 41 56 45              5 	.ascii "SAVE"
      0025DE 00 9A                    6 	.word SAVE_IDX 
      0025E0                       6657 	_dict_entry 3,RUN,RUN_IDX;run
      0025E0 25 D9                    1 	.word LINK 
                           0025E2     2 	LINK=.
      0025E2                          3 RUN:
      0025E2 03                       4 	.byte 3 	
      0025E3 52 55 4E                 5 	.ascii "RUN"
      0025E6 00 98                    6 	.word RUN_IDX 
      0025E8                       6658 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      0025E8 25 E2                    1 	.word LINK 
                           0025EA     2 	LINK=.
      0025EA                          3 RSHIFT:
      0025EA 46                       4 	.byte 6+F_IFUNC 	
      0025EB 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0025F1 00 96                    6 	.word RSHIFT_IDX 
      0025F3                       6659 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0025F3 25 EA                    1 	.word LINK 
                           0025F5     2 	LINK=.
      0025F5                          3 RND:
      0025F5 43                       4 	.byte 3+F_IFUNC 	
      0025F6 52 4E 44                 5 	.ascii "RND"
      0025F9 00 94                    6 	.word RND_IDX 
      0025FB                       6660 	_dict_entry,6,RETURN,RET_IDX;return 
      0025FB 25 F5                    1 	.word LINK 
                           0025FD     2 	LINK=.
      0025FD                          3 RETURN:
      0025FD 06                       4 	.byte 6 	
      0025FE 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002604 00 92                    6 	.word RET_IDX 
      002606                       6661 	_dict_entry,7,RESTORE,REST_IDX;restore 
      002606 25 FD                    1 	.word LINK 
                           002608     2 	LINK=.
      002608                          3 RESTORE:
      002608 07                       4 	.byte 7 	
      002609 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      002610 00 90                    6 	.word REST_IDX 
      002612                       6662 	_dict_entry 6,REMARK,REM_IDX;remark 
      002612 26 08                    1 	.word LINK 
                           002614     2 	LINK=.
      002614                          3 REMARK:
      002614 06                       4 	.byte 6 	
      002615 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      00261B 00 8E                    6 	.word REM_IDX 
      00261D                       6663 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      00261D 26 14                    1 	.word LINK 
                           00261F     2 	LINK=.
      00261F                          3 REBOOT:
      00261F 06                       4 	.byte 6 	
      002620 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002626 00 8C                    6 	.word RBT_IDX 
      002628                       6664 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      002628 26 1F                    1 	.word LINK 
                           00262A     2 	LINK=.
      00262A                          3 READ:
      00262A 44                       4 	.byte 4+F_IFUNC 	
      00262B 52 45 41 44              5 	.ascii "READ"
      00262F 00 8A                    6 	.word READ_IDX 
      002631                       6665 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      002631 26 2A                    1 	.word LINK 
                           002633     2 	LINK=.
      002633                          3 QKEY:
      002633 44                       4 	.byte 4+F_IFUNC 	
      002634 51 4B 45 59              5 	.ascii "QKEY"
      002638 00 88                    6 	.word QKEY_IDX 
      00263A                       6666 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      00263A 26 33                    1 	.word LINK 
                           00263C     2 	LINK=.
      00263C                          3 PRTI:
      00263C 44                       4 	.byte 4+F_IFUNC 	
      00263D 50 52 54 49              5 	.ascii "PRTI"
      002641 00 86                    6 	.word PRTI_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002643                       6667 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      002643 26 3C                    1 	.word LINK 
                           002645     2 	LINK=.
      002645                          3 PRTH:
      002645 44                       4 	.byte 4+F_IFUNC 	
      002646 50 52 54 48              5 	.ascii "PRTH"
      00264A 00 84                    6 	.word PRTH_IDX 
      00264C                       6668 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      00264C 26 45                    1 	.word LINK 
                           00264E     2 	LINK=.
      00264E                          3 PRTG:
      00264E 44                       4 	.byte 4+F_IFUNC 	
      00264F 50 52 54 47              5 	.ascii "PRTG"
      002653 00 82                    6 	.word PRTG_IDX 
      002655                       6669 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      002655 26 4E                    1 	.word LINK 
                           002657     2 	LINK=.
      002657                          3 PRTF:
      002657 44                       4 	.byte 4+F_IFUNC 	
      002658 50 52 54 46              5 	.ascii "PRTF"
      00265C 00 80                    6 	.word PRTF_IDX 
      00265E                       6670 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      00265E 26 57                    1 	.word LINK 
                           002660     2 	LINK=.
      002660                          3 PRTE:
      002660 44                       4 	.byte 4+F_IFUNC 	
      002661 50 52 54 45              5 	.ascii "PRTE"
      002665 00 7E                    6 	.word PRTE_IDX 
      002667                       6671 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      002667 26 60                    1 	.word LINK 
                           002669     2 	LINK=.
      002669                          3 PRTD:
      002669 44                       4 	.byte 4+F_IFUNC 	
      00266A 50 52 54 44              5 	.ascii "PRTD"
      00266E 00 7C                    6 	.word PRTD_IDX 
      002670                       6672 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      002670 26 69                    1 	.word LINK 
                           002672     2 	LINK=.
      002672                          3 PRTC:
      002672 44                       4 	.byte 4+F_IFUNC 	
      002673 50 52 54 43              5 	.ascii "PRTC"
      002677 00 7A                    6 	.word PRTC_IDX 
      002679                       6673 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      002679 26 72                    1 	.word LINK 
                           00267B     2 	LINK=.
      00267B                          3 PRTB:
      00267B 44                       4 	.byte 4+F_IFUNC 	
      00267C 50 52 54 42              5 	.ascii "PRTB"
      002680 00 78                    6 	.word PRTB_IDX 
      002682                       6674 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      002682 26 7B                    1 	.word LINK 
                           002684     2 	LINK=.
      002684                          3 PRTA:
      002684 44                       4 	.byte 4+F_IFUNC 	
      002685 50 52 54 41              5 	.ascii "PRTA"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002689 00 76                    6 	.word PRTA_IDX 
      00268B                       6675 	_dict_entry 5,PRINT,PRT_IDX;print 
      00268B 26 84                    1 	.word LINK 
                           00268D     2 	LINK=.
      00268D                          3 PRINT:
      00268D 05                       4 	.byte 5 	
      00268E 50 52 49 4E 54           5 	.ascii "PRINT"
      002693 00 74                    6 	.word PRT_IDX 
      002695                       6676 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      002695 26 8D                    1 	.word LINK 
                           002697     2 	LINK=.
      002697                          3 POUT:
      002697 44                       4 	.byte 4+F_IFUNC 	
      002698 50 4F 55 54              5 	.ascii "POUT"
      00269C 00 72                    6 	.word POUT_IDX 
      00269E                       6677 	_dict_entry,4,POKE,POKE_IDX;poke 
      00269E 26 97                    1 	.word LINK 
                           0026A0     2 	LINK=.
      0026A0                          3 POKE:
      0026A0 04                       4 	.byte 4 	
      0026A1 50 4F 4B 45              5 	.ascii "POKE"
      0026A5 00 70                    6 	.word POKE_IDX 
      0026A7                       6678 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      0026A7 26 A0                    1 	.word LINK 
                           0026A9     2 	LINK=.
      0026A9                          3 PINP:
      0026A9 44                       4 	.byte 4+F_IFUNC 	
      0026AA 50 49 4E 50              5 	.ascii "PINP"
      0026AE 00 6E                    6 	.word PINP_IDX 
      0026B0                       6679 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      0026B0 26 A9                    1 	.word LINK 
                           0026B2     2 	LINK=.
      0026B2                          3 PEEK:
      0026B2 44                       4 	.byte 4+F_IFUNC 	
      0026B3 50 45 45 4B              5 	.ascii "PEEK"
      0026B7 00 6C                    6 	.word PEEK_IDX 
      0026B9                       6680 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      0026B9 26 B2                    1 	.word LINK 
                           0026BB     2 	LINK=.
      0026BB                          3 PMODE:
      0026BB 05                       4 	.byte 5 	
      0026BC 50 4D 4F 44 45           5 	.ascii "PMODE"
      0026C1 00 6A                    6 	.word PMODE_IDX 
      0026C3                       6681 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      0026C3 26 BB                    1 	.word LINK 
                           0026C5     2 	LINK=.
      0026C5                          3 PAUSE:
      0026C5 05                       4 	.byte 5 	
      0026C6 50 41 55 53 45           5 	.ascii "PAUSE"
      0026CB 00 68                    6 	.word PAUSE_IDX 
      0026CD                       6682 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      0026CD 26 C5                    1 	.word LINK 
                           0026CF     2 	LINK=.
      0026CF                          3 PAD:
      0026CF 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0026D0 50 41 44                 5 	.ascii "PAD"
      0026D3 00 66                    6 	.word PAD_IDX 
      0026D5                       6683 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      0026D5 26 CF                    1 	.word LINK 
                           0026D7     2 	LINK=.
      0026D7                          3 OR:
      0026D7 42                       4 	.byte 2+F_IFUNC 	
      0026D8 4F 52                    5 	.ascii "OR"
      0026DA 00 64                    6 	.word OR_IDX 
      0026DC                       6684 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      0026DC 26 D7                    1 	.word LINK 
                           0026DE     2 	LINK=.
      0026DE                          3 ODR:
      0026DE 43                       4 	.byte 3+F_IFUNC 	
      0026DF 4F 44 52                 5 	.ascii "ODR"
      0026E2 00 62                    6 	.word ODR_IDX 
      0026E4                       6685 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      0026E4 26 DE                    1 	.word LINK 
                           0026E6     2 	LINK=.
      0026E6                          3 NOT:
      0026E6 43                       4 	.byte 3+F_IFUNC 	
      0026E7 4E 4F 54                 5 	.ascii "NOT"
      0026EA 00 60                    6 	.word NOT_IDX 
      0026EC                       6686 	_dict_entry,3,NEW,NEW_IDX;new
      0026EC 26 E6                    1 	.word LINK 
                           0026EE     2 	LINK=.
      0026EE                          3 NEW:
      0026EE 03                       4 	.byte 3 	
      0026EF 4E 45 57                 5 	.ascii "NEW"
      0026F2 00 5E                    6 	.word NEW_IDX 
      0026F4                       6687 	_dict_entry,4,NEXT,NEXT_IDX;next 
      0026F4 26 EE                    1 	.word LINK 
                           0026F6     2 	LINK=.
      0026F6                          3 NEXT:
      0026F6 04                       4 	.byte 4 	
      0026F7 4E 45 58 54              5 	.ascii "NEXT"
      0026FB 00 5C                    6 	.word NEXT_IDX 
      0026FD                       6688 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      0026FD 26 F6                    1 	.word LINK 
                           0026FF     2 	LINK=.
      0026FF                          3 MULDIV:
      0026FF 46                       4 	.byte 6+F_IFUNC 	
      002700 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      002706 00 5A                    6 	.word MULDIV_IDX 
      002708                       6689 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      002708 26 FF                    1 	.word LINK 
                           00270A     2 	LINK=.
      00270A                          3 LSHIFT:
      00270A 46                       4 	.byte 6+F_IFUNC 	
      00270B 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002711 00 58                    6 	.word LSHIFT_IDX 
      002713                       6690 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      002713 27 0A                    1 	.word LINK 
                           002715     2 	LINK=.
      002715                          3 LOG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      002715 43                       4 	.byte 3+F_IFUNC 	
      002716 4C 4F 47                 5 	.ascii "LOG"
      002719 00 56                    6 	.word LOG_IDX 
      00271B                       6691 	_dict_entry,4,LOAD,LOAD_IDX;load 
      00271B 27 15                    1 	.word LINK 
                           00271D     2 	LINK=.
      00271D                          3 LOAD:
      00271D 04                       4 	.byte 4 	
      00271E 4C 4F 41 44              5 	.ascii "LOAD"
      002722 00 54                    6 	.word LOAD_IDX 
      002724                       6692 	_dict_entry 4,LIST,LIST_IDX;list
      002724 27 1D                    1 	.word LINK 
                           002726     2 	LINK=.
      002726                          3 LIST:
      002726 04                       4 	.byte 4 	
      002727 4C 49 53 54              5 	.ascii "LIST"
      00272B 00 52                    6 	.word LIST_IDX 
      00272D                       6693 	_dict_entry 3,LET,LET_IDX;let 
      00272D 27 26                    1 	.word LINK 
                           00272F     2 	LINK=.
      00272F                          3 LET:
      00272F 03                       4 	.byte 3 	
      002730 4C 45 54                 5 	.ascii "LET"
      002733 00 50                    6 	.word LET_IDX 
      002735                       6694 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      002735 27 2F                    1 	.word LINK 
                           002737     2 	LINK=.
      002737                          3 KEY:
      002737 43                       4 	.byte 3+F_IFUNC 	
      002738 4B 45 59                 5 	.ascii "KEY"
      00273B 00 4E                    6 	.word KEY_IDX 
      00273D                       6695 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      00273D 27 37                    1 	.word LINK 
                           00273F     2 	LINK=.
      00273F                          3 IWDGREF:
      00273F 07                       4 	.byte 7 	
      002740 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002747 00 4C                    6 	.word IWDGREF_IDX 
      002749                       6696 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      002749 27 3F                    1 	.word LINK 
                           00274B     2 	LINK=.
      00274B                          3 IWDGEN:
      00274B 06                       4 	.byte 6 	
      00274C 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002752 00 4A                    6 	.word IWDGEN_IDX 
      002754                       6697 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      002754 27 4B                    1 	.word LINK 
                           002756     2 	LINK=.
      002756                          3 INVERT:
      002756 46                       4 	.byte 6+F_IFUNC 	
      002757 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00275D 00 48                    6 	.word INVERT_IDX 
      00275F                       6698 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      00275F 27 56                    1 	.word LINK 
                           002761     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      002761                          3 INPUT:
      002761 05                       4 	.byte 5 	
      002762 49 4E 50 55 54           5 	.ascii "INPUT"
      002767 00 46                    6 	.word INPUT_IDX 
      002769                       6699 	_dict_entry,2,IF,IF_IDX;if 
      002769 27 61                    1 	.word LINK 
                           00276B     2 	LINK=.
      00276B                          3 IF:
      00276B 02                       4 	.byte 2 	
      00276C 49 46                    5 	.ascii "IF"
      00276E 00 44                    6 	.word IF_IDX 
      002770                       6700 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      002770 27 6B                    1 	.word LINK 
                           002772     2 	LINK=.
      002772                          3 IDR:
      002772 43                       4 	.byte 3+F_IFUNC 	
      002773 49 44 52                 5 	.ascii "IDR"
      002776 00 42                    6 	.word IDR_IDX 
      002778                       6701 	_dict_entry,3,HEX,HEX_IDX;hex_base
      002778 27 72                    1 	.word LINK 
                           00277A     2 	LINK=.
      00277A                          3 HEX:
      00277A 03                       4 	.byte 3 	
      00277B 48 45 58                 5 	.ascii "HEX"
      00277E 00 40                    6 	.word HEX_IDX 
      002780                       6702 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      002780 27 7A                    1 	.word LINK 
                           002782     2 	LINK=.
      002782                          3 GPIO:
      002782 44                       4 	.byte 4+F_IFUNC 	
      002783 47 50 49 4F              5 	.ascii "GPIO"
      002787 00 3E                    6 	.word GPIO_IDX 
      002789                       6703 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      002789 27 82                    1 	.word LINK 
                           00278B     2 	LINK=.
      00278B                          3 GOTO:
      00278B 04                       4 	.byte 4 	
      00278C 47 4F 54 4F              5 	.ascii "GOTO"
      002790 00 3C                    6 	.word GOTO_IDX 
      002792                       6704 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      002792 27 8B                    1 	.word LINK 
                           002794     2 	LINK=.
      002794                          3 GOSUB:
      002794 05                       4 	.byte 5 	
      002795 47 4F 53 55 42           5 	.ascii "GOSUB"
      00279A 00 3A                    6 	.word GOSUB_IDX 
      00279C                       6705 	_dict_entry,6,FORGET,FORGET_IDX;forget 
      00279C 27 94                    1 	.word LINK 
                           00279E     2 	LINK=.
      00279E                          3 FORGET:
      00279E 06                       4 	.byte 6 	
      00279F 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0027A5 00 38                    6 	.word FORGET_IDX 
      0027A7                       6706 	_dict_entry,3,FOR,FOR_IDX;for 
      0027A7 27 9E                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                           0027A9     2 	LINK=.
      0027A9                          3 FOR:
      0027A9 03                       4 	.byte 3 	
      0027AA 46 4F 52                 5 	.ascii "FOR"
      0027AD 00 36                    6 	.word FOR_IDX 
      0027AF                       6707 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      0027AF 27 A9                    1 	.word LINK 
                           0027B1     2 	LINK=.
      0027B1                          3 FCPU:
      0027B1 04                       4 	.byte 4 	
      0027B2 46 43 50 55              5 	.ascii "FCPU"
      0027B6 00 34                    6 	.word FCPU_IDX 
      0027B8                       6708 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      0027B8 27 B1                    1 	.word LINK 
                           0027BA     2 	LINK=.
      0027BA                          3 EEPROM:
      0027BA 46                       4 	.byte 6+F_IFUNC 	
      0027BB 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0027C1 00 32                    6 	.word EEPROM_IDX 
      0027C3                       6709 	_dict_entry,3,END,END_IDX;cmd_end  
      0027C3 27 BA                    1 	.word LINK 
                           0027C5     2 	LINK=.
      0027C5                          3 END:
      0027C5 03                       4 	.byte 3 	
      0027C6 45 4E 44                 5 	.ascii "END"
      0027C9 00 30                    6 	.word END_IDX 
      0027CB                       6710 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      0027CB 27 C5                    1 	.word LINK 
                           0027CD     2 	LINK=.
      0027CD                          3 DWRITE:
      0027CD 06                       4 	.byte 6+F_CMD 	
      0027CE 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0027D4 00 2E                    6 	.word DWRITE_IDX 
      0027D6                       6711 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      0027D6 27 CD                    1 	.word LINK 
                           0027D8     2 	LINK=.
      0027D8                          3 DREAD:
      0027D8 45                       4 	.byte 5+F_IFUNC 	
      0027D9 44 52 45 41 44           5 	.ascii "DREAD"
      0027DE 00 2C                    6 	.word DREAD_IDX 
      0027E0                       6712 	_dict_entry,2,DO,DO_IDX;do_loop
      0027E0 27 D8                    1 	.word LINK 
                           0027E2     2 	LINK=.
      0027E2                          3 DO:
      0027E2 02                       4 	.byte 2 	
      0027E3 44 4F                    5 	.ascii "DO"
      0027E5 00 2A                    6 	.word DO_IDX 
      0027E7                       6713 	_dict_entry,3,DIR,DIR_IDX;directory 
      0027E7 27 E2                    1 	.word LINK 
                           0027E9     2 	LINK=.
      0027E9                          3 DIR:
      0027E9 03                       4 	.byte 3 	
      0027EA 44 49 52                 5 	.ascii "DIR"
      0027ED 00 28                    6 	.word DIR_IDX 
      0027EF                       6714 	_dict_entry,3,DEC,DEC_IDX;dec_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0027EF 27 E9                    1 	.word LINK 
                           0027F1     2 	LINK=.
      0027F1                          3 DEC:
      0027F1 03                       4 	.byte 3 	
      0027F2 44 45 43                 5 	.ascii "DEC"
      0027F5 00 26                    6 	.word DEC_IDX 
      0027F7                       6715 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      0027F7 27 F1                    1 	.word LINK 
                           0027F9     2 	LINK=.
      0027F9                          3 DDR:
      0027F9 43                       4 	.byte 3+F_IFUNC 	
      0027FA 44 44 52                 5 	.ascii "DDR"
      0027FD 00 24                    6 	.word DDR_IDX 
      0027FF                       6716 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      0027FF 27 F9                    1 	.word LINK 
                           002801     2 	LINK=.
      002801                          3 DATALN:
      002801 06                       4 	.byte 6 	
      002802 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002808 00 22                    6 	.word DATALN_IDX 
      00280A                       6717 	_dict_entry,4,DATA,DATA_IDX;data  
      00280A 28 01                    1 	.word LINK 
                           00280C     2 	LINK=.
      00280C                          3 DATA:
      00280C 04                       4 	.byte 4 	
      00280D 44 41 54 41              5 	.ascii "DATA"
      002811 00 20                    6 	.word DATA_IDX 
      002813                       6718 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      002813 28 0C                    1 	.word LINK 
                           002815     2 	LINK=.
      002815                          3 CRL:
      002815 43                       4 	.byte 3+F_IFUNC 	
      002816 43 52 4C                 5 	.ascii "CRL"
      002819 00 1E                    6 	.word CRL_IDX 
      00281B                       6719 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      00281B 28 15                    1 	.word LINK 
                           00281D     2 	LINK=.
      00281D                          3 CRH:
      00281D 43                       4 	.byte 3+F_IFUNC 	
      00281E 43 52 48                 5 	.ascii "CRH"
      002821 00 1C                    6 	.word CRH_IDX 
      002823                       6720 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      002823 28 1D                    1 	.word LINK 
                           002825     2 	LINK=.
      002825                          3 CHAR:
      002825 84                       4 	.byte 4+F_CFUNC 	
      002826 43 48 41 52              5 	.ascii "CHAR"
      00282A 00 1A                    6 	.word CHAR_IDX 
      00282C                       6721 	_dict_entry,3,BYE,BYE_IDX;bye 
      00282C 28 25                    1 	.word LINK 
                           00282E     2 	LINK=.
      00282E                          3 BYE:
      00282E 03                       4 	.byte 3 	
      00282F 42 59 45                 5 	.ascii "BYE"
      002832 00 18                    6 	.word BYE_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002834                       6722 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      002834 28 2E                    1 	.word LINK 
                           002836     2 	LINK=.
      002836                          3 BTOGL:
      002836 05                       4 	.byte 5 	
      002837 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00283C 00 16                    6 	.word BTOGL_IDX 
      00283E                       6723 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00283E 28 36                    1 	.word LINK 
                           002840     2 	LINK=.
      002840                          3 BTEST:
      002840 45                       4 	.byte 5+F_IFUNC 	
      002841 42 54 45 53 54           5 	.ascii "BTEST"
      002846 00 14                    6 	.word BTEST_IDX 
      002848                       6724 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      002848 28 40                    1 	.word LINK 
                           00284A     2 	LINK=.
      00284A                          3 BSET:
      00284A 04                       4 	.byte 4 	
      00284B 42 53 45 54              5 	.ascii "BSET"
      00284F 00 12                    6 	.word BSET_IDX 
      002851                       6725 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      002851 28 4A                    1 	.word LINK 
                           002853     2 	LINK=.
      002853                          3 BRES:
      002853 04                       4 	.byte 4 	
      002854 42 52 45 53              5 	.ascii "BRES"
      002858 00 10                    6 	.word BRES_IDX 
      00285A                       6726 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      00285A 28 53                    1 	.word LINK 
                           00285C     2 	LINK=.
      00285C                          3 BIT:
      00285C 43                       4 	.byte 3+F_IFUNC 	
      00285D 42 49 54                 5 	.ascii "BIT"
      002860 00 0E                    6 	.word BIT_IDX 
      002862                       6727 	_dict_entry,3,AWU,AWU_IDX;awu 
      002862 28 5C                    1 	.word LINK 
                           002864     2 	LINK=.
      002864                          3 AWU:
      002864 03                       4 	.byte 3 	
      002865 41 57 55                 5 	.ascii "AWU"
      002868 00 0C                    6 	.word AWU_IDX 
      00286A                       6728 	_dict_entry,7,AUTORUN,AUTORUN_IDX;autorun
      00286A 28 64                    1 	.word LINK 
                           00286C     2 	LINK=.
      00286C                          3 AUTORUN:
      00286C 07                       4 	.byte 7 	
      00286D 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002874 00 0A                    6 	.word AUTORUN_IDX 
      002876                       6729 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      002876 28 6C                    1 	.word LINK 
                           002878     2 	LINK=.
      002878                          3 ASC:
      002878 43                       4 	.byte 3+F_IFUNC 	
      002879 41 53 43                 5 	.ascii "ASC"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      00287C 00 08                    6 	.word ASC_IDX 
      00287E                       6730 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      00287E 28 78                    1 	.word LINK 
                           002880     2 	LINK=.
      002880                          3 AND:
      002880 43                       4 	.byte 3+F_IFUNC 	
      002881 41 4E 44                 5 	.ascii "AND"
      002884 00 06                    6 	.word AND_IDX 
      002886                       6731 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      002886 28 80                    1 	.word LINK 
                           002888     2 	LINK=.
      002888                          3 ADCREAD:
      002888 47                       4 	.byte 7+F_IFUNC 	
      002889 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002890 00 04                    6 	.word ADCREAD_IDX 
      002892                       6732 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      002892 28 88                    1 	.word LINK 
                           002894     2 	LINK=.
      002894                          3 ADCON:
      002894 05                       4 	.byte 5 	
      002895 41 44 43 4F 4E           5 	.ascii "ADCON"
      00289A 00 02                    6 	.word ADCON_IDX 
      00289C                       6733 kword_dict:
      00289C                       6734 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      00289C 28 94                    1 	.word LINK 
                           00289E     2 	LINK=.
      00289E                          3 ABS:
      00289E 43                       4 	.byte 3+F_IFUNC 	
      00289F 41 42 53                 5 	.ascii "ABS"
      0028A2 00 00                    6 	.word ABS_IDX 
                                   6735 
                                   6736 ;comands and fonctions address table 	
      0028A4                       6737 code_addr:
      0028A4 1F 40 19 6F 19 AB 1F  6738 	.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask ; 0..7
             54 1D E6 1E 78 1E F1
             21 A2
      0028B4 17 0D 16 FD 17 2E 17  6739 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             1E 1E 6F 1D D4 22 5C
      0028C2 22 56 22 74 22 7A 22  6740 	.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write ;16..23 
             50 12 DD 1D 1B 21 CB
             19 DF 1A 0F
      0028D4 19 1B 22 6E 1F CE 17  6741 	.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio ; 24..31 
             89 1C B4 18 84 18 69
             1E 22
      0028E4 12 D8 22 4A 17 75 16  6742 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             66 21 BC 21 4C 21 82
             1E 0D
      0028F4 13 0E 13 39 1C 84 21  6743 	.word let,list,load,log2,lshift,muldiv,next,new ; 40..47
             87 1F 9C 10 47 18 09
             1A 96
      002904 21 3F 22 44 1F 6C 24  6744 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             07 1E DE 1F DA 17 64
             22 68
      002914 17 55 22 62 15 E0 22  6745 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             0E 22 14 22 1A 22 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



             22 26
      002924 22 2C 22 32 22 38 22  6746 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             3E 1E 15 22 F6 06 78
             16 D2
      002934 22 A7 18 A4 20 56 1F  6747 	.word restore,return, random,rshift,run,save,show,size ; 72..79
             B5 18 C2 1B 87 12 97
             12 E2
      002944 1E D3 23 E8 23 50 23  6748 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             F0 23 C8 17 E2 1A 4A
             1F 3A
      002954 21 23 21 32 17 B2 19  6749 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             2B 12 EC 1E 4C 21 E0
             1E 52
      002964 16 D8 20 BD 1D 9D 1F  6750 	.word wait,words,write,bit_xor,transmit,receive ; 96..103 
             84 24 0D 24 9F
      002970 00 00                 6751 	.word 0 
                                   6752 
      002980                       6753 	.bndry 128 ; align on FLASH block.
                                   6754 ; free space for user application  
      002980                       6755 user_space:
                                   6756 ; USR() function test
      002980 89               [ 2] 6757 	pushw x 
      002981 72 1A 50 0A      [ 1] 6758 	bset PC_ODR,#5 
      002985 85               [ 2] 6759 	popw x 
      002986 CD 1E E8         [ 4] 6760 	call pause02 
      002989 72 1B 50 0A      [ 1] 6761 	bres PC_ODR,#5 
      00298D 81               [ 4] 6762 	ret
                                   6763 
                                   6764 	.area FLASH_DRIVE (ABS)
      010000                       6765 	.org 0x10000
      010000                       6766 fdrive:
                                   6767 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00289E R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      002894 R
    ADCON_ID=  000002     |   5 ADCREAD    002888 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        002880 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |   5 ASC        002878 R   |     ASC_IDX =  000008 
    ATTRIB  =  000002     |   5 AUTORUN    00286C R   |     AUTORUN_=  00000A 
    AUTORUN_=  004000     |   5 AWU        002864 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000C     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   5 BIT        00285C R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000E 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   5 BRES       002853 R   |     BRES_IDX=  000010 
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       00284A R
    BSET_IDX=  000012     |     BSIZE   =  000001     |   5 BTEST      002840 R
    BTEST_ID=  000014     |   5 BTOGL      002836 R   |     BTOGL_ID=  000016 
    BTW     =  000001     |   5 BYE        00282E R   |     BYE_IDX =  000018 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       002825 R   |     CHAR_IDX=  00001A 
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMDX    =  000001     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        00281D R   |     CRH_IDX =  00001C     |   5 CRL        002815 R
    CRL_IDX =  00001E     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       00280C R   |   5 DATALN     002801 R   |     DATALN_I=  000022 
    DATA_IDX=  000020     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |     DBL     =  000003 
    DBLDIVDN=  000006     |     DBLHI   =  000001     |     DBLLO   =  000003 
    DBL_SIZE=  000004     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   5 DDR        0027F9 R
    DDR_IDX =  000024     |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEBUG_PR=  000001     |   5 DEC        0027F1 R
    DEC_IDX =  000026     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        0027E9 R   |     DIR_IDX =  000028 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DO         0027E2 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  00002A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

  5 DREAD      0027D8 R   |     DREAD_ID=  00002C     |   5 DWRITE     0027CD R
    DWRITE_I=  00002E     |   5 EEPROM     0027BA R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  000032     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        0027C5 R   |     END_IDX =  000030 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       0027B1 R   |     FCPU_IDX=  000034     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        0027A9 R   |   5 FORGET     00279E R   |     FORGET_I=  000038 
    FOR_IDX =  000036     |     FRUN    =  000000     |     FS      =  00001C 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      002794 R
    GOSUB_ID=  00003A     |   5 GOTO       00278B R   |     GOTO_IDX=  00003C 
  5 GPIO       002782 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003E     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   5 HEX        00277A R   |     HEX_IDX =  000040 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        002772 R   |     IDR_IDX =  000042 
  5 IF         00276B R   |     IF_IDX  =  000044     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      002761 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000046     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  5 INVERT     002756 R   |     INVERT_I=  000048     |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     00274B R
    IWDGEN_I=  00004A     |   5 IWDGREF    00273F R   |     IWDGREF_=  00004C 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        002737 R   |     KEY_IDX =  00004E     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   5 LET        00272F R
    LET_IDX =  000050     |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   5 LINK    =  00289E R   |   5 LIST       002726 R
    LIST_IDX=  000052     |     LL      =  000001     |     LLEN    =  000002 
    LN_PTR  =  000005     |   5 LOAD       00271D R   |     LOAD_IDX=  000054 
  5 LOG        002715 R   |     LOG_IDX =  000056     |   5 LSHIFT     00270A R
    LSHIFT_I=  000058     |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  5 MULDIV     0026FF R   |     MULDIV_I=  00005A     |     MULOP   =  000003 
    N1      =  000001     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        0026EE R   |     NEW_FREE=  000001     |     NEW_IDX =  00005E 
  5 NEXT       0026F6 R   |     NEXT_IDX=  00005C     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    NOPTBL  =  00487F     |   5 NOT        0026E6 R   |     NOT_IDX =  000060 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000000 R   |   5 ODR        0026DE R   |     ODR_IDX =  000062 
    ONOFF   =  000003     |     OP      =  000003     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         0026D7 R   |     OR_IDX  =  000064     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |   5 PAD        0026CF R   |     PAD_IDX =  000066 
    PAD_SIZE=  000080     |   5 PAUSE      0026C5 R   |     PAUSE_ID=  000068 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       0026B2 R   |     PEEK_IDX=  00006C 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   5 PINP       0026A9 R
    PINP_IDX=  00006E     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      0026BB R
    PMODE_ID=  00006A     |   5 POKE       0026A0 R   |     POKE_IDX=  000070 
    PORT    =  000003     |   5 POUT       002697 R   |     POUT_IDX=  000072 
    PREV    =  000001     |   5 PRINT      00268D R   |   5 PRTA       002684 R
    PRTA_IDX=  000076     |   5 PRTB       00267B R   |     PRTB_IDX=  000078 
  5 PRTC       002672 R   |     PRTC_IDX=  00007A     |   5 PRTD       002669 R
    PRTD_IDX=  00007C     |   5 PRTE       002660 R   |     PRTE_IDX=  00007E 
  5 PRTF       002657 R   |     PRTF_IDX=  000080     |   5 PRTG       00264E R
    PRTG_IDX=  000082     |   5 PRTH       002645 R   |     PRTH_IDX=  000084 
  5 PRTI       00263C R   |     PRTI_IDX=  000086     |     PRT_IDX =  000074 
    PSTR    =  000003     |   5 QKEY       002633 R   |     QKEY_IDX=  000088 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
    RBT_IDX =  00008C     |   5 READ       00262A R   |     READ_IDX=  00008A 
  5 REBOOT     00261F R   |     REG     =  000001     |     REGA    =  000001 
    REGX    =  000003     |     REGY    =  000005     |     RELOP   =  000003 
  5 REMARK     002614 R   |     REM_IDX =  00008E     |   5 RESTORE    002608 R
    REST_IDX=  000090     |     RETL1   =  000001     |   5 RETURN     0025FD R
    RET_ADDR=  000003     |     RET_IDX =  000092     |     RET_INW =  000005 
  5 RND        0025F5 R   |     RND_IDX =  000094     |     ROP     =  004800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

    RS      =  00001E     |   5 RSHIFT     0025EA R   |     RSHIFT_I=  000096 
    RST_SR  =  0050B3     |   5 RUN        0025E2 R   |     RUN_IDX =  000098 
    RX_QUEUE=  000008     |   5 SAVE       0025D9 R   |     SAVEB   =  000002 
    SAVE_IDX=  00009A     |     SDIVSR  =  000005     |     SERIAL  =  000001 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       0025D0 R   |     SHOW_IDX=  00009C     |     SI      =  00000F 
    SIGN    =  000001     |   5 SIZE       0025C7 R   |     SIZE_IDX=  00009E 
    SKIP    =  000005     |   5 SLEEP      0025BD R   |     SLEEP_ID=  0000A0 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      0025A9 R   |     SPIEN_ID=  0000A4     |   5 SPIRD      0025B3 R
    SPIRD_ID=  0000A2     |   5 SPISEL     00259E R   |     SPISEL_I=  0000A6 
  5 SPIWR      002594 R   |     SPIWR_ID=  0000A8     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SQUOT   =  000006     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  0000A0     |   5 STEP       00258B R
    STEP_IDX=  0000AA     |   5 STOP       002582 R   |     STOP_IDX=  0000AC 
    STR     =  000003     |     STX     =  000002     |     SUB     =  00001A 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      002578 R   |     TICKS_ID=  0000AE     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    002562 R   |   5 TIMER      00256E R   |     TIMER_ID=  0000B0 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

    TK_CFUNC=  000082     |     TK_CHAR =  000003     |     TK_CMD  =  000080 
    TK_COLON=  000001     |     TK_COMMA=  000009     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_VAR  =  000085 
    TMROUT_I=  0000B2     |   5 TO         00255B R   |   5 TONE       002552 R
    TONE_IDX=  0000B6     |     TO_IDX  =  0000B4     |   5 Timer4Up   000078 R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     002547 R
    UBOUND_I=  0000B8     |   5 UBTN_Han   0000BA R   |   5 UFLASH     00253C R
    UFLASH_I=  0000BA     |   5 UNTIL      002532 R   |     UNTIL_ID=  0000BC 
    US      =  00001F     |   5 USER_ABO   0000C2 R   |   5 USR        00252A R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000BE     |   5 Uart1RxH   00000F R   |   5 Uart3RxH   000052 R
  5 UserButt   00008D R   |     VAR_ADDR=  000006     |     VAR_SIZE=  000001 
    VSIZ    =  000002     |     VSIZE   =  000006     |     VT      =  00000B 
  5 WAIT       002521 R   |     WAIT_IDX=  0000C0     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      002517 R   |     WORDS_ID=  0000C2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Symbol Table

  5 WRITE      00250D R   |     WRITE_ID=  0000C4     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        002505 R
    XOR_IDX =  0000C6     |   5 XRCV       0024FC R   |     XRCV_IDX=  0000CA 
    XREG    =  000003     |     XSAVE   =  000005     |   5 XTRMT      0024F2 R
    XTRMT_ID=  0000C8     |     YSAVE   =  000007     |   5 abs        001F40 R
  1 acc16      00000C GR  |   1 acc24      00000B GR  |   1 acc8       00000D GR
  5 add_char   0015A0 R   |   5 add_spac   0013CA R   |   5 analog_r   0019AB R
  5 arduino_   002036 R   |   5 arg_list   0010F4 R   |   1 array_si   000021 R
  5 ascii      001DE6 R   |   5 at_tst     000D58 R   |   5 atoi24     000E69 GR
  5 atoi_exi   000ECF R   |   5 autorun    001E78 R   |   5 autorun_   000771 R
  5 awu        001EF1 R   |   5 awu02      001EFB R   |   5 bad_port   001E47 R
  1 base       00000A R   |   1 basicptr   000004 GR  |   5 beep       001938 R
  5 beep_1kh   001922 GR  |   5 bin_exit   000C36 R   |   5 bit_and    001F54 R
  5 bit_or     001F6C R   |   5 bit_rese   00170D R   |   5 bit_set    0016FD R
  5 bit_test   00172E R   |   5 bit_togg   00171E R   |   5 bit_xor    001F84 R
  5 bitmask    0021A2 R   |   5 bkslsh_t   000D05 R   |   5 block_er   0001E3 R
  5 break_po   001A78 R   |   5 bye        001E6F R   |   5 cancel_a   000739 R
  5 char       001DD4 R   |   5 clear_ba   000786 R   |   5 clear_va   000601 R
  5 clock_in   0000DD R   |   5 cmd_end    00191B R   |   5 cmd_line   0009A6 R
  5 cmd_name   001063 R   |   5 cmp_name   001B19 R   |   5 code_add   0028A4 R
  5 cold_sta   000678 R   |   5 colon_ts   000D2C R   |   5 comma_ts   000D37 R
  5 comp_msg   0008FB R   |   5 compile    00058E R   |   5 const_cr   002256 R
  5 const_cr   00225C R   |   5 const_dd   002250 R   |   5 const_ee   00226E R
  5 const_id   00224A R   |   5 const_in   002268 R   |   5 const_od   002244 R
  5 const_ou   002262 R   |   5 const_po   00220E R   |   5 const_po   002214 R
  5 const_po   00221A R   |   5 const_po   002220 R   |   5 const_po   002226 R
  5 const_po   00222C R   |   5 const_po   002232 R   |   5 const_po   002238 R
  5 const_po   00223E R   |   5 convert_   000BAD R   |   5 copy_com   000D8D R
  1 count      000003 GR  |   5 cp_loop    0010A3 R   |   5 cpy_cmd_   0013B5 R
  5 cpy_quot   0013EE R   |   5 create_g   0004F1 R   |   5 cs_high    002402 R
  5 cstk_pro   0012B1 R   |   5 dash_tst   000D4D R   |   5 data       002274 R
  1 data_len   000009 R   |   5 data_lin   00227A R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   0022BA R   |   5 dbl_sign   000FCB R
  5 dec_base   0012DD R   |   5 decomp_l   00149F R   |   5 decompil   001458 GR
  5 del_line   0004C4 R   |   5 digital_   0019DF R   |   5 digital_   001A0F R
  5 dir_loop   001D27 R   |   5 director   001D1B R   |   5 disk_fre   001B06 R
  5 div32_16   000FD5 R   |   5 divide     00102C R   |   5 divu24_8   000AF0 R
  5 dneg       000FC0 R   |   5 do_loop    0021CB R   |   5 do_progr   0001D6 R
  5 drive_fr   001D90 R   |   5 enable_i   00214C R   |   5 eql_tst    000DE2 R
  5 equal      0015B3 R   |   5 erase_fl   000202 R   |   5 err_bad_   000866 R
  5 err_buf_   0008DC R   |   5 err_cmd_   00082A R   |   5 err_div0   0007EF R
  5 err_dupl   000844 R   |   5 err_math   0007D6 R   |   5 err_mem_   0007BB R
  5 err_msg    00079B R   |   5 err_no_a   000872 R   |   5 err_no_d   0008A5 R
  5 err_no_f   0008C9 R   |   5 err_no_l   0007FE R   |   5 err_no_p   0008B5 R
  5 err_not_   000855 R   |   5 err_run_   000814 R   |   5 err_synt   0007C8 R
  5 escaped    000BC2 R   |   5 expect     0010E2 R   |   5 expr_exi   00123C R
  5 expressi   0011F3 R   |   5 factor     001144 R   |   1 farptr     000016 R
  5 fcpu       001FCE R   |   7 fdrive     010000 R   |   1 ffree      000019 R
  5 file_cou   001D88 R   |   5 first_li   001362 R   |   1 flags      000023 R
  5 for        001789 R   |   5 forget     001CB4 R   |   1 free_ram   00006D R
  5 func_arg   0010EF R   |   5 func_not   00213F R   |   5 ge         0015B5 R
  5 get_arra   00111F R   |   5 get_cmd_   001437 R   |   5 get_targ   001853 R
  5 get_tick   001F3A R   |   5 get_toke   000C9E R   |   5 getc       00034B GR
    getc_to    ****** GX  |   5 gosub      001884 R   |   5 goto       001869 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]

Symbol Table

  5 gpio       001E22 R   |   5 gt         0015B1 R   |   5 gt_tst     000DED R
  5 hex_base   0012D8 R   |   5 hex_dump   0003F7 R   |   5 if         001775 R
  1 in         000001 R   |   1 in.saved   000002 R   |   1 in.w       000000 R
  5 incr_far   001AC6 R   |   5 input_ex   0016CF R   |   5 input_lo   001668 R
  5 input_va   001666 R   |   5 insert_l   00051D R   |   5 insert_l   00058B R
  5 interp_l   0009E7 R   |   5 interpre   0009C2 R   |   5 invert     0021BC R
  5 is_alnum   000629 R   |   5 is_alpha   00060F R   |   5 is_digit   000620 R
  5 itoa       000A8B R   |   5 itoa_loo   000AAA R   |   5 jp_to_ta   001877 R
  5 key        001E0D R   |   5 kw_loop    000C52 R   |   5 kword_di   00289C R
  5 kword_en   0024F0 R   |   5 le         0015BA R   |   5 leading_   002192 R
  5 let        00130E R   |   5 let_arra   00131C R   |   5 let_var    00131F R
  5 lines_sk   001365 R   |   5 list       001339 R   |   5 list_exi   0013A7 R
  5 list_loo   001385 R   |   5 load       001C84 R   |   5 load_aut   000748 R
  5 load_fil   001C53 R   |   5 log2       002187 R   |   5 logical_   002135 R
  5 long_div   000FA8 R   |   5 loop_bac   001836 R   |   1 loop_dep   000020 R
  5 loop_don   00184B R   |   5 lshift     001F9C R   |   5 lt         0015B8 R
  5 lt_tst     000E16 R   |   5 modulo     001042 R   |   5 move       00045E GR
  5 move_dow   00047C R   |   5 move_era   000168 R   |   5 move_exi   00049D R
  5 move_loo   000481 R   |   5 move_prg   00019C R   |   5 move_up    00046E R
  5 mul_char   0015A2 R   |   5 muldiv     001047 R   |   5 multiply   000F73 R
  5 mulu24_8   000B18 R   |   5 nbr_tst    000CD1 R   |   5 ne         0015BD R
  5 neg_acc2   000B52 R   |   5 new        001A96 R   |   5 next       001809 R
  5 next_lin   0009CA R   |   5 next_tok   000A0E R   |   5 no_match   0010B5 R
  5 other      000E3F R   |   3 pad        0016E0 R   |   5 pad_ref    002407 R
  5 parse_bi   000C14 R   |   5 parse_in   000BCA R   |   5 parse_ke   000C51 R
  5 parse_qu   000B75 R   |   5 pause      001EDE R   |   5 pause02    001EE8 R
  5 peek       001764 R   |   5 pin_mode   001FDA R   |   5 plus_tst   000DB6 R
  5 poke       001755 R   |   5 power_ad   00196F R   |   5 prcnt_ts   000DD7 R
  5 print      0015E0 R   |   5 print_ex   00163A R   |   5 print_in   000A6F R
  5 printxy    000EE6 R   |   5 program_   00017C R   |   5 program_   00019C R
  5 prt_basi   0015C0 R   |   5 prt_loop   0015E4 R   |   5 prt_tok    000389 R
  5 prti24     000A7F R   |   1 ptr16      000017 R   |   1 ptr8       000018 R
  5 putc       00032B GR  |     puts       ****** GX  |   5 qgetc      00033D GR
  5 qkey       001E15 GR  |   5 qmark_ts   000D63 R   |   5 random     002056 R
  5 read       0022F6 R   |   5 read01     0022F8 R   |     readln     ****** GX
  5 receive    00249F R   |   5 refresh_   002182 R   |   5 rel_exit   001294 R
  5 relation   00123F R   |   5 relop_st   0015A5 R   |   5 remark     0016D2 R
  5 reset_co   0015E2 R   |   5 rest_con   001656 R   |   5 restore    0022A7 R
  5 return     0018A4 R   |   5 right_al   0013DC R   |   5 row_alig   001AAB R
  5 row_eras   000141 R   |   5 row_eras   000168 R   |   5 row_loop   0003DA R
  5 rparnt_t   000D21 R   |   5 rshift     001FB5 R   |   5 rt_msg     0008E9 R
  5 run        0018C2 R   |   5 run_it     0018F4 R   |   1 rx1_head   00002D R
  1 rx1_queu   000025 R   |   1 rx1_tail   00002E R   |   1 rx3_head   000037 R
  1 rx3_queu   00002F R   |   1 rx3_tail   000038 R   |   5 rx_faile   0024B8 R
  5 rx_loop    0024AD R   |   5 rx_succe   0024C4 R   |   5 save       001B87 R
  5 save_con   001646 R   |   5 search_d   001095 R   |   5 search_e   0010DF R
  5 search_f   001B3A R   |   5 search_l   0004A0 GR  |   5 search_l   0004A8 R
  5 search_n   001099 R   |   1 seedx      000012 R   |   1 seedy      000014 R
  5 seek_fdr   001AD4 R   |   5 select_p   002026 R   |   5 set_time   002123 R
  5 sharp_ts   000D42 R   |   5 show       001297 R   |   5 show_row   0003C8 R
  5 single_c   00159B R   |   5 size       0012E2 R   |   5 skip       000ED3 R
  5 slash_ts   000DCC R   |   5 sleep      001ED3 R   |   5 software   000632 R
    spaces     ****** GX  |   5 spi_clea   00239B R   |   5 spi_disa   002383 R
  5 spi_enab   002350 R   |   5 spi_rcv_   0023BD R   |   5 spi_read   0023E8 R
  5 spi_sele   0023F0 R   |   5 spi_send   0023A7 R   |   5 spi_writ   0023C8 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]

Symbol Table

  3 stack_fu   001760 R   |   3 stack_un   001800 R   |   5 star_tst   000DC1 R
  5 step       0017E2 R   |   5 stop       001A4A R   |   5 store_lo   0017F6 R
  5 str_matc   0010C2 R   |   5 str_tst    000CC1 R   |   5 strcmp     00043F R
  5 strcpy     000450 R   |   5 strlen     000434 GR  |   5 syntax_e   00091C R
  1 tab_widt   000024 R   |   5 tb_error   00091E R   |   5 term       0011A1 R
  5 term01     0011A9 R   |   5 term_exi   0011F0 R   |   3 tib        001690 GR
  5 tick_tst   000D7B R   |   1 ticks      00000E R   |   5 timeout    002132 R
  1 timer      000010 GR  |   5 timer2_i   0000F3 R   |   5 timer4_i   000100 R
  5 tk_id      00090C R   |   5 to         0017B2 R   |   5 to_eepro   0001BF R
  5 to_flash   0001D3 R   |   5 to_upper   000E5D GR  |   5 token_ch   000E56 R
  5 token_ex   000E5A R   |   5 token_ms   0003C0 R   |   5 tone       00192B R
  5 transmit   00240D R   |   5 try_next   0022E6 R   |   5 tx_exit    002476 R
  5 tx_faile   00246B R   |   5 tx_loop    002446 R   |   5 tx_succe   002457 R
  1 txtbgn     00001C R   |   1 txtend     00001E R   |   5 uart1_ge   00034B GR
  5 uart1_in   0002E8 R   |   5 uart1_pu   00032B GR  |   5 uart1_qg   00033D GR
  5 uart1_se   0002F8 R   |   5 uart3_ge   00036A GR  |   5 uart3_in   0002A5 R
  5 uart3_pu   000334 GR  |   5 uart3_qg   000344 GR  |   5 uart3_se   0002B5 R
  5 ubound     0012EC R   |   5 udiv32_1   000F96 R   |   5 uflash     001E4C R
  5 umstar     000F39 R   |   5 unlock_e   000115 R   |   5 unlock_f   00012B R
  5 until      0021E0 R   |   5 user_int   0000A0 R   |   5 user_spa   002980 R
  5 usr        001E52 R   |   5 var_name   00142F R   |   1 vars       000039 R
  5 wait       0016D8 R   |   5 wait_nak   00243A R   |   5 warm_ini   00071B R
  5 warm_sta   0009A3 R   |   5 words      0020BD R   |   5 words_co   00210D R
  5 write      001D9D R   |   5 write_bl   000282 R   |   5 write_by   00020D R
  5 write_ee   000249 R   |   5 write_ex   00027D R   |   5 write_fl   000233 R
  5 write_ro   0001B0 R   |   5 x_fail     002496 R   |   5 x_succes   00248A R
    xrcv_blo   ****** GX  |   5 xrcv_msg   0024E0 R   |     xtrmt_bl   ****** GX
  5 xtrmt_ms   002479 R   |   5 zero_pad   001AA0 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     6D   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   298E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

