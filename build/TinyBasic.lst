ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;   constantes related to Arduino 
                                     60 ;   API mapping 
                                     61 ;-------------------------------------
                           000000    62         INP=0
                           000001    63         OUTP=1 
                                     64 
                                     65 ;--------------------------------------
                                     66 ;       token attribute
                                     67 ;--------------------------------------
                                     68         ; bits 4:5 identify token group 
                                     69         ; 0x0n -> miscelinous 
                                     70         ; 0x1n -> +|- operators 
                                     71         ; 0x2n -> *|/|% operators
                                     72         ; 0x3n -> relational operators 
                           000080    73         TK_CMD=128      ; BASIC command   
                           000081    74         TK_IFUNC=129    ; BASIC integer function
                           000082    75         TK_CFUNC=130    ; BASIC character function
                           000083    76         TK_CONST=131    ; BASIC constant 
                           000084    77         TK_INTGR=132    ; 16 bits integer 
                           000085    78         TK_VAR=133
                           000086    79         TK_FLOAT=134    ; float32 
                           000087    80         TK_NOT=135
                           000088    81         TK_AND=136      ;
                           000089    82         TK_OR=137       ;
                           00008A    83         TK_XOR=138      ; 
                           000000    84         TK_NONE=0       ; not a token 
                           000002    85         TK_QSTR=2       ; quoted string  
                           000003    86         TK_LABEL=3      ; used for defined, constants, variables
                           000004    87         TK_CHAR=4       ; ASCII character 
                           000005    88         TK_ARRAY=5     ; array variable '@' 
                           000006    89         TK_LPAREN=6     ; left parenthesis '('
                           000007    90         TK_RPAREN=7     ; right parenthesis ')'
                           000008    91         TK_COMMA=8     ; item separator ',' 
                           000009    92         TK_SHARP=9     ; print colon width '#' 
                           00000A    93         TK_COLON=0xa      ; command separator ':' 
                                     94         
                           000010    95         TK_PLUS=0x10    ; addition operator '+'
                           000011    96         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    97         TK_MULT=0x20    ; multiplication operator '*'
                           000021    98         TK_DIV=0x21     ; division operator '/'
                           000022    99         TK_MOD=0x22     ; modulo operator '%'
                                    100 
                                    101         ; don't change these token values 
                                    102         ; values chosen to be used as a mask.
                                    103         ; bit 7   1 for dictionary words else 0 
                                    104         ; bits 6  always 0 
                                    105         ; bits 5:4 identify group 
                                    106         ; bits 3:0 token identifier inside group  
                           000031   107         TK_GT=0x31      ; relation operator '>'
                           000032   108         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   109         TK_GE=0x33      ; relation operator '>='
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000034   110         TK_LT=0x34      ; relation operator '<'
                           000036   111         TK_LE=0x36      ; relation operator '<='
                           000035   112         TK_NE=0x35      ; relation operator '<>' not equal 
                                    113         ; token groups 
                           000030   114         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   115         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   116         TK_GRP_ADD=0x10  ; additive operators
                           000020   117         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   118         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   119         CMD_END=2 
                                    120 
                                    121 ;--------------------------------------
                                    122 ;   error codes 
                                    123 ;--------------------------------------
                           000000   124     ERR_NONE=0
                           000001   125     ERR_MEM_FULL=1 
                           000002   126     ERR_SYNTAX=2
                           000003   127     ERR_MATH_OVF=3
                           000004   128     ERR_DIV0=4 
                           000005   129     ERR_NO_LINE=5
                           000006   130     ERR_RUN_ONLY=6
                           000007   131     ERR_CMD_ONLY=7
                           000008   132     ERR_DUPLICATE=8
                           000009   133     ERR_NOT_FILE=9
                           00000A   134     ERR_BAD_VALUE=10
                           00000B   135     ERR_NO_ACCESS=11
                           00000C   136     ERR_NO_DATA=12 
                           00000D   137     ERR_NO_PROG=13
                           00000E   138     ERR_NO_FSPACE=14
                           00000F   139     ERR_BUF_FULL=15
                           000010   140     ERR_OVERFLOW=16 
                                    141 
                                    142 ;--------------------------------------
                                    143 ;   assembler flags 
                                    144 ;-------------------------------------
                                    145 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    146 
                                    147      .macro _usec_dly n 
                                    148     ldw x,#(16*n-2)/4
                                    149     decw x
                                    150     nop 
                                    151     jrne .-4
                                    152     .endm 
                                    153     
                                    154     ; load X register with 
                                    155     ; entry point of dictionary
                                    156     ; before calling 'search_dict'
                                    157     .macro _ldx_dict dict_name
                                    158     ldw x,#dict_name+2
                                    159     .endm 
                                    160 
                                    161     ; reset BASIC pointer
                                    162     ; to beginning of last token
                                    163     ; extracted except if it was end of line 
                                    164     .macro _unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165      mov in,in.saved  
                                    166     .endm
                                    167 
                                    168 
                                    169     ; extract code address for 
                                    170     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    171     .macro _get_code_addr
                                    172         ldw x,(x)
                                    173         inc in 
                                    174         inc in 
                                    175     .endm 
                                    176 
                                    177 
                                    178 
                                    179 ;---------------------------------------
                                    180 ;    xtack manipulation macros 
                                    181 ;    Y is used as xstack pointer  
                                    182 ;----------------------------------------
                                    183     ; pop in A:X from XSTACK 
                                    184     .macro _xpop 
                                    185     ld a,(y)
                                    186     ldw x,y 
                                    187     ldw x,(1,x)
                                    188     addw y,#CELL_SIZE 
                                    189     .endm 
                                    190 
                                    191     ; push A:X  to XSTACK 
                                    192     .macro _xpush 
                                    193     subw y,#CELL_SIZE
                                    194     ld (y),a 
                                    195     ldw (1,y),x 
                                    196     .endm 
                                    197 
                                    198     ; drop from XSTACK 
                                    199     .macro _xdrop 
                                    200     addw y,#CELL_SIZE 
                                    201     .endm 
                                    202 
                                    203     ; @T fetch top xstack 
                                    204     .macro _at_top
                                    205     ld a,(y)
                                    206     ldw x,y 
                                    207     ldw x,(1,x)
                                    208     .endm 
                                    209 
                                    210     ; @N  fetch next on xstack 
                                    211     .macro _at_next 
                                    212     ld a,(3,y)
                                    213     ldw x,y 
                                    214     ldw x,(4,x)
                                    215     .endm 
                                    216 
                                    217     ; !T put on top of xtack 
                                    218     .macro _store_top 
                                    219     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ldw (1,y),x     
                                    221     .endm 
                                    222 
                                    223     ; !N put next on xstack 
                                    224     .macro _store_next 
                                    225     ld (3,y),a 
                                    226     ldw (4,y),x 
                                    227     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTH_IDX=PRTG_IDX+2
                           000076    84     PRTI_IDX=PRTH_IDX+2
                           000078    85     QKEY_IDX=PRTI_IDX+2
                           00007A    86     READ_IDX=QKEY_IDX+2
                           00007C    87     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007E    88 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           000080    89     REST_IDX=REM_IDX+2 ; RESTORE
                           000082    90     RET_IDX=REST_IDX+2  ; RETURN 
                           000084    91     RND_IDX=RET_IDX+2 ; RANDOM 
                           000086    92     RSHIFT_IDX=RND_IDX+2
                           000088    93     RUN_IDX=RSHIFT_IDX+2
                           00008A    94     FREE_IDX=RUN_IDX+2
                           00008C    95     SLEEP_IDX=FREE_IDX+2
                           00008E    96     SPIRD_IDX=SLEEP_IDX+2
                           000090    97     SPIEN_IDX=SPIRD_IDX+2
                           000092    98     SPISEL_IDX=SPIEN_IDX+2
                           000094    99     SPIWR_IDX=SPISEL_IDX+2
                           000096   100     STEP_IDX=SPIWR_IDX+2
                           000098   101     STOP_IDX=STEP_IDX+2
                           00009A   102     TICKS_IDX=STOP_IDX+2
                           00009C   103     TIMER_IDX=TICKS_IDX+2
                           00009E   104     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000A0   105     TO_IDX=TMROUT_IDX+2
                           0000A2   106     TONE_IDX=TO_IDX+2
                           0000A4   107     UBOUND_IDX=TONE_IDX+2
                           0000A6   108     UFLASH_IDX=UBOUND_IDX+2
                           0000A8   109     UNTIL_IDX=UFLASH_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     USR_IDX=UNTIL_IDX+2
                           0000AC   111     WAIT_IDX=USR_IDX+2
                           0000AE   112     WORDS_IDX=WAIT_IDX+2
                           0000B0   113     WRITE_IDX=WORDS_IDX+2
                           0000B2   114     SIZE_IDX=WRITE_IDX+2 
                           0000B4   115     ON_IDX=SIZE_IDX+2 
                           0000B6   116     GET_IDX=ON_IDX+2
                           0000B8   117     CONST_IDX=GET_IDX+2
                           0000BA   118     EEFREE_IDX=CONST_IDX+2
                                    119      
                                    120     ; keep these 3 at end
                                    121     ; these have no entry in code_addr 
                           0000F8   122     NOT_IDX=248
                           0000FA   123     AND_IDX=250 
                           0000FC   124     OR_IDX=252 
                           0000FE   125     XOR_IDX=254    
                                    126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001690                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         44 pad:: .ds PAD_SIZE             ; working buffer
      001760                         45 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         46 xstack_unf:: ; xstack underflow 
      00179C                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 99             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 8C         [ 4]  120 	call print_registers
      000019 CD 05 37         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 68         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 16 CE         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5. CN9-6
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 C6         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1C F3         [ 4]  280 	call func_eefree 
      000121 CD 1C 2A         [ 4]  281 	call ubound 
      000124 CD 14 9E         [ 4]  282 	call clear_basic
      000127 CD 25 55         [ 4]  283 	call beep_1khz  
      00012A CD 14 4B         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 27 90         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 16 CE         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 7C         [ 4]  293 	call warm_init
      00013C AE 36 04         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 36 02      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 68         [ 4]  299 	call puts 
      00014F CD 1E 1B         [ 4]  300 	call program_info 
      000152 CC 24 F9         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016A                         37 dup24:
      00016A                         38     _at_top 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F                         39     _xpush 
      00016F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000173 90 F7            [ 1]    2     ld (y),a 
      000175 90 EF 01         [ 2]    3     ldw (1,y),x 
      000178 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      000179                         48 add24: ; ( N T -- N+T )
      000179                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000179 90 F6            [ 1]    1     ld a,(y)
      00017B 93               [ 1]    2     ldw x,y 
      00017C EE 01            [ 2]    3     ldw x,(1,x)
      00017E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000182 89               [ 2]   50     pushw x  
      000183 88               [ 1]   51     push a  
      000184                         52     _at_top  
      000184 90 F6            [ 1]    1     ld a,(y)
      000186 93               [ 1]    2     ldw x,y 
      000187 EE 01            [ 2]    3     ldw x,(1,x)
      000189 72 FB 02         [ 2]   53     addw x,(2,sp)
      00018C 19 01            [ 1]   54     adc a, (1,sp)
      00018E                         55     _store_top 
      00018E 90 F7            [ 1]    1     ld (y),a 
      000190 90 EF 01         [ 2]    2     ldw (1,y),x     
      000193                         56     _drop 3 
      000193 5B 03            [ 2]    1     addw sp,#3 
      000195 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      000196                         63 sub24: ; ( N T -- N-T ) 
      000196                         64     _xpop 
      000196 90 F6            [ 1]    1     ld a,(y)
      000198 93               [ 1]    2     ldw x,y 
      000199 EE 01            [ 2]    3     ldw x,(1,x)
      00019B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00019F 89               [ 2]   65     pushw x 
      0001A0 88               [ 1]   66     push  a
      0001A1                         67     _at_top  
      0001A1 90 F6            [ 1]    1     ld a,(y)
      0001A3 93               [ 1]    2     ldw x,y 
      0001A4 EE 01            [ 2]    3     ldw x,(1,x)
      0001A6 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001A9 12 01            [ 1]   69     sbc a, (1,sp)
      0001AB                         70     _store_top  
      0001AB 90 F7            [ 1]    1     ld (y),a 
      0001AD 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B0                         71     _drop 3 
      0001B0 5B 03            [ 2]    1     addw sp,#3 
      0001B2 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B3                         77 cp24:
      0001B3                         78     _xpop 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001BC C7 00 0C         [ 1]   79     ld acc24,a 
      0001BF CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0001C2                         81     _at_top 
      0001C2 90 F6            [ 1]    1     ld a,(y)
      0001C4 93               [ 1]    2     ldw x,y 
      0001C5 EE 01            [ 2]    3     ldw x,(1,x)
      0001C7 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001CB C2 00 0C         [ 1]   83     sbc a,acc24
      0001CE 2F 08            [ 1]   84     jrslt 1$
      0001D0 26 0A            [ 1]   85     jrne 2$
      0001D2 5D               [ 2]   86     tnzw x 
      0001D3 26 07            [ 1]   87     jrne 2$
      0001D5 4F               [ 1]   88     clr a 
      0001D6 20 06            [ 2]   89     jra 9$ 
      0001D8                         90 1$: ; i1 < i2 
      0001D8 A6 FF            [ 1]   91     ld a,#255
      0001DA 20 02            [ 2]   92     jra 9$ 
      0001DC                         93 2$: ; i1 > i2 
      0001DC A6 01            [ 1]   94     ld a,#1 
      0001DE 5F               [ 1]   95 9$: clrw x
      0001DF                         96      _store_top 
      0001DF 90 F7            [ 1]    1     ld (y),a 
      0001E1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E4 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001E5                        103 cp24_ax:
      0001E5 88               [ 1]  104     push a 
      0001E6 C3 00 0D         [ 2]  105     cpw x,acc16 
      0001E9 C2 00 0C         [ 1]  106     sbc a,acc24
      0001EC 84               [ 1]  107     pop a 
      0001ED 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001EE                        115 abs24: ; ( i -- u )
      0001EE 90 F6            [ 1]  116     ld a,(y)
      0001F0 A1 80            [ 1]  117     cp a,#0x80 
      0001F2 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F4 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001F5                        124 cpl24:  ; i -- ~i 
      0001F5 90 73            [ 1]  125     cpl (y) 
      0001F7 90 63 01         [ 1]  126     cpl (1,y)
      0001FA 90 63 02         [ 1]  127     cpl (2,y)
      0001FD 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001FE                        133 neg24: ; (i -- -i )
      0001FE                        134     _at_top
      0001FE 90 F6            [ 1]    1     ld a,(y)
      000200 93               [ 1]    2     ldw x,y 
      000201 EE 01            [ 2]    3     ldw x,(1,x)
      000203 43               [ 1]  135     cpl  a  
      000204 53               [ 2]  136     cplw x 
      000205 1C 00 01         [ 2]  137     addw x,#1
      000208 A9 00            [ 1]  138     adc a,#0
      00020A                        139     _store_top  
      00020A 90 F7            [ 1]    1     ld (y),a 
      00020C 90 EF 01         [ 2]    2     ldw (1,y),x     
      00020F 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000210                        145 neg_ax:
      000210 43               [ 1]  146     cpl  a  
      000211 53               [ 2]  147     cplw x 
      000212 1C 00 01         [ 2]  148     addw x,#1
      000215 A9 00            [ 1]  149     adc a,#0
      000217 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      000218                        155 neg_acc24: ; 
      000218 72 53 00 0C      [ 1]  156     cpl acc24 
      00021C 72 53 00 0D      [ 1]  157     cpl acc16 
      000220 72 53 00 0E      [ 1]  158     cpl acc8
      000224 72 5C 00 0E      [ 1]  159     inc acc8 
      000228 26 0A            [ 1]  160     jrne 9$
      00022A 72 5C 00 0D      [ 1]  161     inc acc16 
      00022E 26 04            [ 1]  162     jrne 9$
      000230 72 5C 00 0C      [ 1]  163     inc acc24 
      000234 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      000235                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000235 88               [ 1]  181     push a 
      000236 72 5F 00 0B      [ 1]  182 	clr acc32
      00023A 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      00023E 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000241 97               [ 1]  186     ld xl,a 
      000242 7B 01            [ 1]  187     ld a,(U8,sp)
      000244 42               [ 4]  188     mul x,a 
      000245 CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      000248 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      00024B 97               [ 1]  192     ld xl,a 
      00024C 7B 01            [ 1]  193     ld a,(U8,sp) 
      00024E 42               [ 4]  194     mul x,a 
      00024F 72 BB 00 0C      [ 2]  195     addw x,acc24
      000253 72 59 00 0B      [ 1]  196     rlc acc32 
      000257 CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025A 90 F6            [ 1]  199     ld a,(Y)
      00025C 97               [ 1]  200     ld xl,a 
      00025D 7B 01            [ 1]  201     ld a,(U8,sp)
      00025F 42               [ 4]  202     mul x,a 
      000260 72 BB 00 0B      [ 2]  203     addw x,acc32
      000264 02               [ 1]  204     rlwa x 
      000265 4D               [ 1]  205     tnz a 
      000266 27 05            [ 1]  206     jreq 1$
      000268 A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026A CC 16 44         [ 2]  208     jp tb_error 
      00026D                        209 1$:
      00026D 9E               [ 1]  210     ld a,xh  
      00026E CE 00 0D         [ 2]  211     ldw x,acc16   
      000271                        212     _drop VSIZE 
      000271 5B 01            [ 2]    1     addw sp,#VSIZE 
      000273 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000274                        224 mul24:
      000274                        225     _vars VSIZE
      000274 52 07            [ 2]    1     sub sp,#VSIZE 
      000276 5F               [ 1]  226     clrw x 
      000277 1F 01            [ 2]  227     ldw (PROD,sp),x 
      000279 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      00027B                        229     _xpop 
      00027B 90 F6            [ 1]    1     ld a,(y)
      00027D 93               [ 1]    2     ldw x,y 
      00027E EE 01            [ 2]    3     ldw x,(1,x)
      000280 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000284 4D               [ 1]  230     tnz a 
      000285 2A 05            [ 1]  231     jrpl 0$
      000287 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      000289 CD 02 10         [ 4]  233     call neg_ax 
      00028C                        234 0$:    
      00028C 6B 05            [ 1]  235     ld (N1,sp),a 
      00028E 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000290 90 7D            [ 1]  237     tnz (Y)
      000292 2A 05            [ 1]  238     jrpl 2$ 
      000294 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      000296 CD 01 FE         [ 4]  240     call neg24
      000299                        241 2$: 
      000299 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      00029B 27 0A            [ 1]  243     jreq 4$
      00029D CD 02 35         [ 4]  244     call mulu24_8
      0002A0 4D               [ 1]  245     tnz a 
      0002A1 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A3 6B 01            [ 1]  247     ld (PROD,sp),a
      0002A5 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002A7                        249 4$:
      0002A7 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002A9 27 0D            [ 1]  251     jreq 5$
      0002AB CD 02 35         [ 4]  252     call mulu24_8
      0002AE 4D               [ 1]  253     tnz a 
      0002AF 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B1 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B4 29 29            [ 1]  256     jrv 8$ ; overflow
      0002B6 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002B8                        258 5$:
      0002B8 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BA 27 10            [ 1]  260     jreq 6$
      0002BC CD 02 35         [ 4]  261     call mulu24_8
      0002BF 01               [ 1]  262     rrwa x 
      0002C0 5D               [ 2]  263     tnzw x 
      0002C1 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C3 4D               [ 1]  265     tnz a 
      0002C4 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002C6 1B 01            [ 1]  267     add a,(PROD,sp)
      0002C8 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CA 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002CC                        270 6$:
      0002CC 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002CE 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D0 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D2 27 03            [ 1]  274     jreq 9$
      0002D4 CD 02 10         [ 4]  275     call neg_ax 
      0002D7                        276 9$:
      0002D7                        277     _store_top 
      0002D7 90 F7            [ 1]    1     ld (y),a 
      0002D9 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002DC                        278     _drop VSIZE 
      0002DC 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002DE 81               [ 4]  279     ret 
      0002DF                        280 8$: ; overflow
      0002DF A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0002E1 CC 16 44         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E4                        296 divu24_8:
      0002E4 89               [ 2]  297 	pushw x ; save x
      0002E5 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002E6 CE 00 0C         [ 2]  300 	ldw x,acc24
      0002E9 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002EB 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002EC 88               [ 1]  303 	push a  ;save remainder
      0002ED CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F0 84               [ 1]  305 	pop a
      0002F1 95               [ 1]  306 	ld xh,a
      0002F2 C6 00 0E         [ 1]  307 	ld a,acc8
      0002F5 97               [ 1]  308 	ld xl,a
      0002F6 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002F8 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002F9 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002FB 9F               [ 1]  312 	ld a,xl
      0002FC C7 00 0E         [ 1]  313 	ld acc8,a
      0002FF 84               [ 1]  314 	pop a
      000300 85               [ 2]  315 	popw x
      000301 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000302                        332 div24:
      000302                        333     _vars VSIZE 
      000302 52 06            [ 2]    1     sub sp,#VSIZE 
      000304 0F 06            [ 1]  334     clr (RSIGN,sp)
      000306 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000308                        336     _xpop 
      000308 90 F6            [ 1]    1     ld a,(y)
      00030A 93               [ 1]    2     ldw x,y 
      00030B EE 01            [ 2]    3     ldw x,(1,x)
      00030D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000311 4D               [ 1]  337     tnz a 
      000312 2A 05            [ 1]  338     jrpl 0$ 
      000314 03 05            [ 1]  339     cpl (QSIGN,sp)
      000316 CD 02 10         [ 4]  340     call neg_ax
      000319                        341 0$:
      000319 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      00031B 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      00031D 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      00031F 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000321 26 05            [ 1]  346     jrne 1$ 
      000323 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      000325 CC 16 44         [ 2]  348     jp tb_error 
      000328                        349 1$: ; dividend  
      000328                        350     _at_top
      000328 90 F6            [ 1]    1     ld a,(y)
      00032A 93               [ 1]    2     ldw x,y 
      00032B EE 01            [ 2]    3     ldw x,(1,x)
      00032D 4D               [ 1]  351     tnz a 
      00032E 2A 07            [ 1]  352     jrpl 2$
      000330 CD 02 10         [ 4]  353     call neg_ax
      000333 03 05            [ 1]  354     cpl (QSIGN,sp)
      000335 03 06            [ 1]  355     cpl (RSIGN,sp)
      000337                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      000337                        359     _store_top 
      000337 90 F7            [ 1]    1     ld (y),a 
      000339 90 EF 01         [ 2]    2     ldw (1,y),x     
      00033C A6 18            [ 1]  360     ld a,#24 
      00033E 6B 04            [ 1]  361     ld (CNTR,sp),a
      000340 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000342 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000344 CD 01 E5         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      000347 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      000349 C6 00 0C         [ 1]  368     ld a,acc24 
      00034C CE 00 0D         [ 2]  369     ldw x,acc16 
      00034F 72 5F 00 0C      [ 1]  370     clr acc24 
      000353 72 5F 00 0D      [ 1]  371     clr acc16 
      000357 72 5F 00 0E      [ 1]  372     clr acc8 
      00035B 20 26            [ 2]  373     jra 6$
      00035D                        374 22$:     
      00035D 4F               [ 1]  375     clr a 
      00035E 5F               [ 1]  376     clrw x 
      00035F 98               [ 1]  377     rcf  
      000360                        378 3$: ; shift carry in acc24 bit 0 
      000360 90 69 02         [ 1]  379     rlc (2,y) 
      000363 90 69 01         [ 1]  380     rlc (1,y)
      000366 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000368 59               [ 2]  382     rlcw x  
      000369 49               [ 1]  383     rlc a
      00036A 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      00036D 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      00036F 24 05            [ 1]  386     jrnc 5$
      000371 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000374 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      000376                        389 5$: ; shift carry in QUOTIENT 
      000376 8C               [ 1]  390     ccf
      000377 0A 04            [ 1]  391     dec (CNTR,sp)
      000379 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      00037B 90 69 02         [ 1]  394     rlc (2,y)
      00037E 90 69 01         [ 1]  395     rlc (1,y) 
      000381 90 79            [ 1]  396     rlc (y) 
      000383                        397 6$:    
      000383 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      000385 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      000387 0D 05            [ 1]  400     tnz (QSIGN,sp)
      000389 27 03            [ 1]  401     jreq 8$
      00038B CD 01 FE         [ 4]  402     call neg24
      00038E                        403 8$: 
      00038E 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000390 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000392                        406 81$:
      000392 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000394 27 03            [ 1]  408     jreq 9$
      000396 CD 02 10         [ 4]  409     call neg_ax       
      000399                        410 9$: _drop VSIZE 
      000399 5B 06            [ 2]    1     addw sp,#VSIZE 
      00039B 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      00039C                        423 mod24:
      00039C CD 03 02         [ 4]  424     call div24 
      00039F                        425     _store_top  ; replace quotient by remainder 
      00039F 90 F7            [ 1]    1     ld (y),a 
      0003A1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A4 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003A5                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003A5                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003A5                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003A5                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003A5                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003A5                         37 prt_regs::
      0003A5 AE 03 E8         [ 2]   38 	ldw x,#regs_state 
      0003A8 CD 09 68         [ 4]   39 	call puts
                                     40 ; register PC
      0003AB 16 01            [ 2]   41 	ldw y,(1,sp)
      0003AD AE 05 1C         [ 2]   42 	ldw x,#REG_EPC 
      0003B0 CD 04 6D         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003B3 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003B5 AE 05 2D         [ 2]   46 	ldw x,#REG_CC 
      0003B8 CD 04 4B         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003BB 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003BD AE 05 29         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003C0 CD 04 4B         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003C3 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003C5 AE 05 25         [ 2]   54 	ldw x,#REG_X 
      0003C8 CD 04 6D         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      0003CB 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      0003CD AE 05 21         [ 2]   58 	ldw x,#REG_Y 
      0003D0 CD 04 6D         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      0003D3 90 96            [ 1]   61 	ldw y,sp
      0003D5 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      0003D9 AE 05 32         [ 2]   63 	ldw x,#REG_SP
      0003DC CD 04 6D         [ 4]   64 	call prt_reg16
      0003DF A6 0D            [ 1]   65 	ld a,#CR 
      0003E1 CD 09 0B         [ 4]   66 	call putc
      0003E4 CD 09 0B         [ 4]   67 	call putc   
      0003E7 81               [ 4]   68 	ret 
                                     69 
                                     70 
      0003E8 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      00040F                         81 prt_peek::
      00040F 89               [ 2]   82 	pushw x 
      000410 35 10 00 0A      [ 1]   83 	mov base,#16 
      000414 CD 17 93         [ 4]   84 	call prt_i16  
      000417 A6 3A            [ 1]   85 	ld a,#': 
      000419 CD 09 0B         [ 4]   86 	call putc 
      00041C A6 20            [ 1]   87 	ld a,#SPACE 
      00041E CD 09 0B         [ 4]   88 	call putc 
      000421 85               [ 2]   89 	popw x 
      000422 F6               [ 1]   90 	ld a,(x)
      000423 5F               [ 1]   91 	clrw x 
      000424 97               [ 1]   92 	ld xl,a 
      000425 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000429 CD 17 93         [ 4]   94 	call prt_i16 
      00042C 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      00042D                        102 ledon:
      00042D 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000431 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000432                        107 ledoff:
      000432 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      000436 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000437                        112 ledtoggle:
      000437 A6 20            [ 1]  113     ld a,#LED2_MASK
      000439 C8 50 0A         [ 1]  114     xor a,PC_ODR
      00043C C7 50 0A         [ 1]  115     ld PC_ODR,a
      00043F 81               [ 4]  116     ret 
                                    117 
      000440                        118 left_paren:
      000440 A6 20            [ 1]  119 	ld a,#SPACE 
      000442 CD 09 0B         [ 4]  120 	call putc
      000445 A6 28            [ 1]  121 	ld a,#'( 
      000447 CD 09 0B         [ 4]  122 	call putc 	
      00044A 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      00044B                        133 prt_reg8:
      00044B 88               [ 1]  134 	push a 
      00044C CD 09 68         [ 4]  135 	call puts 
      00044F 7B 01            [ 1]  136 	ld a,(1,sp) 
      000451 5F               [ 1]  137 	clrw x 
      000452 97               [ 1]  138 	ld xl,a 
      000453 35 10 00 0A      [ 1]  139 	mov base,#16
      000457 CD 17 93         [ 4]  140 	call prt_i16  
      00045A CD 04 40         [ 4]  141 	call left_paren 
      00045D 84               [ 1]  142 	pop a 
      00045E 5F               [ 1]  143 	clrw x 
      00045F 97               [ 1]  144 	ld xl,a 
      000460 35 0A 00 0A      [ 1]  145 	mov base,#10 
      000464 CD 17 93         [ 4]  146 	call prt_i16  
      000467 A6 29            [ 1]  147 	ld a,#') 
      000469 CD 09 0B         [ 4]  148 	call putc
      00046C 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      00046D                        159 prt_reg16: 
      00046D 90 89            [ 2]  160 	pushw y 
      00046F CD 09 68         [ 4]  161 	call puts 
      000472 1E 01            [ 2]  162 	ldw x,(1,sp) 
      000474 35 10 00 0A      [ 1]  163 	mov base,#16 
      000478 CD 17 93         [ 4]  164 	call prt_i16  
      00047B CD 04 40         [ 4]  165 	call left_paren 
      00047E 85               [ 2]  166 	popw x 
      00047F 35 0A 00 0A      [ 1]  167 	mov base,#10 
      000483 CD 17 93         [ 4]  168 	call prt_i16  
      000486 A6 29            [ 1]  169 	ld a,#') 
      000488 CD 09 0B         [ 4]  170 	call putc
      00048B 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      00048C                        177 print_registers:
      00048C AE 04 DF         [ 2]  178 	ldw x,#STATES
      00048F CD 09 68         [ 4]  179 	call puts
                                    180 ; print EPC 
      000492 AE 05 1C         [ 2]  181 	ldw x, #REG_EPC
      000495 CD 09 68         [ 4]  182 	call puts 
      000498 7B 0B            [ 1]  183 	ld a, (11,sp)
      00049A C7 00 0E         [ 1]  184 	ld acc8,a 
      00049D 7B 0A            [ 1]  185 	ld a, (10,sp) 
      00049F C7 00 0D         [ 1]  186 	ld acc16,a 
      0004A2 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004A4 C7 00 0C         [ 1]  188 	ld acc24,a
      0004A7 5F               [ 1]  189 	clrw x  
      0004A8 A6 10            [ 1]  190 	ld a,#16
      0004AA CD 17 AA         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004AD AE 05 25         [ 2]  193 	ldw x,#REG_X
      0004B0 16 05            [ 2]  194 	ldw y,(5,sp)
      0004B2 CD 04 6D         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004B5 AE 05 21         [ 2]  197 	ldw x,#REG_Y
      0004B8 16 07            [ 2]  198 	ldw y, (7,sp)
      0004BA CD 04 6D         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004BD AE 05 29         [ 2]  201 	ldw x,#REG_A
      0004C0 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004C2 CD 04 4B         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004C5 AE 05 2D         [ 2]  205 	ldw x,#REG_CC 
      0004C8 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004CA CD 04 4B         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      0004CD AE 05 32         [ 2]  209 	ldw x,#REG_SP
      0004D0 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0004D2 72 A9 00 0C      [ 2]  211 	addw y,#12
      0004D6 CD 04 6D         [ 4]  212 	call prt_reg16  
      0004D9 A6 0A            [ 1]  213 	ld a,#'\n' 
      0004DB CD 09 0B         [ 4]  214 	call putc
      0004DE 81               [ 4]  215 	ret
                                    216 
      0004DF 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00051C 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000521 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      000525 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000529 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      00052D 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000532 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000537                        235 cmd_itf:
      000537 52 01            [ 2]  236 	sub sp,#VSIZE 
      000539 72 5F 00 18      [ 1]  237 	clr farptr 
      00053D 72 5F 00 19      [ 1]  238 	clr farptr+1 
      000541 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      000545                        240 repl:
      000545 A6 0D            [ 1]  241 	ld a,#CR 
      000547 CD 09 0B         [ 4]  242 	call putc 
      00054A A6 3F            [ 1]  243 	ld a,#'? 
      00054C CD 09 0B         [ 4]  244 	call putc
      00054F 72 5F 00 00      [ 1]  245 	clr in.w 
      000553 72 5F 00 01      [ 1]  246 	clr in 
      000557 CD 0A 6D         [ 4]  247 	call readln
      00055A 90 AE 16 90      [ 2]  248 	ldw y,#tib  
      00055E 90 F6            [ 1]  249 	ld a,(y)
      000560 27 E3            [ 1]  250 	jreq repl  
      000562 72 5C 00 01      [ 1]  251 	inc in 
      000566 CD 18 29         [ 4]  252 	call to_upper 
      000569 A1 51            [ 1]  253 	cp a,#'Q 
      00056B 26 17            [ 1]  254 	jrne test_p
      00056D                        255 repl_exit:
      00056D 72 5F 16 90      [ 1]  256 	clr tib 
      000571 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000575 72 5F 00 01      [ 1]  258 	clr in 
      000579                        259 	_drop #VSIZE 	
      000579 5B 01            [ 2]    1     addw sp,##VSIZE 
      00057B 81               [ 4]  260 	ret  
      00057C                        261 invalid:
      00057C AE 05 FD         [ 2]  262 	ldw x,#invalid_cmd 
      00057F CD 09 68         [ 4]  263 	call puts 
      000582 20 C1            [ 2]  264 	jra repl 
      000584                        265 test_p:	
      000584 A1 50            [ 1]  266     cp a,#'P 
      000586 27 11            [ 1]  267 	jreq mem_peek
      000588 A1 53            [ 1]  268     cp a,#'S 
      00058A 26 F0            [ 1]  269 	jrne invalid 
      00058C                        270 print_string:	
      00058C CD 0E E2         [ 4]  271 	call get_token
      00058F A1 84            [ 1]  272 	cp a,#TK_INTGR 
      000591 26 E9            [ 1]  273 	jrne invalid 
      000593 CD 09 68         [ 4]  274 	call puts
      000596 CC 05 45         [ 2]  275 	jp repl 	
      000599                        276 mem_peek:
      000599 A6 20            [ 1]  277 	ld a,#SPACE 
      00059B CD 0E CF         [ 4]  278 	call skip  	 
      00059E 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005A2 AE 16 E0         [ 2]  280 	ldw x,#pad 
      0005A5 CD 13 A2         [ 4]  281 	call strcpy
      0005A8 AE 16 E0         [ 2]  282 	ldw x,#pad
      0005AB CD 18 35         [ 4]  283 	call atoi24 	
      0005AE C6 00 0C         [ 1]  284 	ld a, acc24 
      0005B1 CA 00 0D         [ 1]  285 	or a,acc16 
      0005B4 CA 00 0E         [ 1]  286 	or a,acc8 
      0005B7 26 02            [ 1]  287 	jrne 1$ 
      0005B9 20 0C            [ 2]  288 	jra peek_byte  
      0005BB CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005BE CF 00 18         [ 2]  290 	ldw farptr,x 
      0005C1 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005C4 C7 00 1A         [ 1]  292 	ld farptr+2,a 
      0005C7                        293 peek_byte:
      0005C7 CD 06 0C         [ 4]  294 	call print_farptr 
      0005CA A6 08            [ 1]  295 	ld a,#8 
      0005CC 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      0005CE 5F               [ 1]  297 	clrw x 
      0005CF CD 06 27         [ 4]  298 1$:	call fetchc  
      0005D2 89               [ 2]  299 	pushw x 
      0005D3 C7 00 0E         [ 1]  300 	ld acc8,a 
      0005D6 5F               [ 1]  301 	clrw x 
      0005D7 CF 00 0C         [ 2]  302 	ldw acc24,x 
      0005DA A6 90            [ 1]  303 	ld a,#16+128
      0005DC CD 17 AA         [ 4]  304 	call prt_acc24
      0005DF 85               [ 2]  305 	popw x 
      0005E0 0A 01            [ 1]  306 	dec (PSIZE,sp)
      0005E2 26 EB            [ 1]  307 	jrne 1$ 
      0005E4 A6 08            [ 1]  308 	ld a,#8 
      0005E6 CB 00 1A         [ 1]  309 	add a,farptr+2 
      0005E9 C7 00 1A         [ 1]  310 	ld farptr+2,a
      0005EC 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0005ED C9 00 19         [ 1]  312 	adc a,farptr+1 
      0005F0 C7 00 19         [ 1]  313 	ld farptr+1,a 
      0005F3 4F               [ 1]  314 	clr a 
      0005F4 C9 00 18         [ 1]  315 	adc a,farptr 
      0005F7 C7 00 18         [ 1]  316 	ld farptr,a 
      0005FA CC 05 45         [ 2]  317 	jp repl  
                                    318 
      0005FD 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      00060C                        324 print_farptr:
      00060C C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      00060F C7 00 0E         [ 1]  326 	ld acc8,a 
      000612 CE 00 18         [ 2]  327 	ldw x,farptr 
      000615 CF 00 0C         [ 2]  328 	ldw acc24,x 
      000618 5F               [ 1]  329 	clrw x 
      000619 A6 10            [ 1]  330 	ld a,#16 
      00061B CD 17 AA         [ 4]  331 	call prt_acc24
      00061E A6 20            [ 1]  332 	ld a,#SPACE 
      000620 CD 09 0B         [ 4]  333 	call putc 
      000623 CD 09 0B         [ 4]  334 	call putc 
      000626 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000627                        346 fetchc: ; @C
      000627 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      00062B 5C               [ 1]  348 	incw x
      00062C 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      00062D                        360 number:
      00062D CD 0E E2         [ 4]  361 	call get_token
      000630 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000632 27 03            [ 1]  363 	jreq 1$
      000634 CC 16 42         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000637 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000638                        380 show_row:
      000638 4D               [ 1]  381 	tnz a 
      000639 26 01            [ 1]  382 	jrne 1$
      00063B 81               [ 4]  383 	ret 
      00063C                        384 1$:	
      00063C 89               [ 2]  385 	pushw x  
      00063D 88               [ 1]  386 	push a 
      00063E 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      000642 CD 17 93         [ 4]  388 	call prt_i16 
      000645 A6 20            [ 1]  389 	ld a,#SPACE  
      000647 CD 09 0B         [ 4]  390 	call putc
      00064A                        391 row_loop:
      00064A 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      00064C F6               [ 1]  393 	ld a,(x)
      00064D 5F               [ 1]  394 	clrw x 
      00064E 97               [ 1]  395 	ld xl,a 
      00064F CD 17 93         [ 4]  396 	call prt_i16 
      000652 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      000654 5C               [ 1]  398 	incw x 
      000655 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000657 0A 01            [ 1]  400 	dec (CNT,sp)
      000659 26 EF            [ 1]  401 	jrne row_loop
      00065B                        402 	_drop VSIZE  		
      00065B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00065D 35 04 00 23      [ 1]  403 	mov tab_width,#4
      000661 A6 0D            [ 1]  404 	ld a,#CR 
      000663 CD 09 0B         [ 4]  405 	call putc 
      000666 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000667                        419 hex_dump:
      000667 88               [ 1]  420 	push a 
      000668                        421 	_vars VSIZE
      000668 52 04            [ 2]    1     sub sp,#VSIZE 
      00066A C6 00 0A         [ 1]  422 	ld a,base
      00066D 6B 03            [ 1]  423 	ld (BASE,sp),a 
      00066F 35 10 00 0A      [ 1]  424 	mov base,#16
      000673 C6 00 23         [ 1]  425 	ld a,tab_width 
      000676 6B 04            [ 1]  426 	ld (TABW,sp),a
      000678 A6 0D            [ 1]  427 	ld a,#CR 
      00067A CD 09 0B         [ 4]  428 	call putc 
      00067D 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      00067F A6 10            [ 1]  430 	ld a,#16
      000681 90 A3 00 10      [ 2]  431 	cpw y,#16
      000685 2A 02            [ 1]  432 	jrpl 2$
      000687 90 9F            [ 1]  433 	ld a,yl
      000689                        434 2$: 	
      000689 CD 06 38         [ 4]  435 	call show_row 
      00068C 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      00068E 72 A2 00 10      [ 2]  437 	subw y,#16 
      000692 90 A3 00 01      [ 2]  438 	cpw y,#1
      000696 2A E5            [ 1]  439 	jrpl 1$
      000698 7B 03            [ 1]  440 	ld a,(BASE,sp)
      00069A C7 00 0A         [ 1]  441 	ld base,a
      00069D 7B 04            [ 1]  442 	ld a,(TABW,sp)
      00069F C7 00 23         [ 1]  443 	ld tab_width,a 
      0006A2                        444 	_drop VSIZE
      0006A2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006A4 84               [ 1]  445 	pop a 
      0006A5 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006A6                         45 unlock_eeprom:
      0006A6 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006AB 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006AF 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006B3 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006B7 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006BB 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006C0 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006C1                         62 unlock_flash:
      0006C1 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006C6 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006CA 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006CE 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006D2 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006D6 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006DB 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006DC                         76 row_erase:
      0006DC 88               [ 1]   77 	push a 
      0006DD 90 89            [ 2]   78 	pushw y 
      0006DF 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006E3 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006E7 4F               [ 1]   81 	clr a 
      0006E8 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0006EA 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006EE 90 5C            [ 1]   84     incw y
      0006F0 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006F4 90 5C            [ 1]   86     incw y
      0006F6 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006FA 90 5C            [ 1]   88     incw y
      0006FC 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000700 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000705 90 85            [ 2]   91 	popw y 
      000707 84               [ 1]   92 	pop a 
      000708 81               [ 4]   93 	ret
      000709                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000709                         97 move_erase_to_ram:
      000709 89               [ 2]   98 	pushw x 
      00070A 90 89            [ 2]   99 	pushw y 
      00070C AE 07 09         [ 2]  100 	ldw x,#row_erase_end 
      00070F 1D 06 DC         [ 2]  101 	subw x,#row_erase
      000712 CF 00 0D         [ 2]  102 	ldw acc16,x 
      000715 AE 16 90         [ 2]  103 	ldw x,#tib 
      000718 90 AE 06 DC      [ 2]  104 	ldw y,#row_erase 
      00071C CD 13 B2         [ 4]  105 	call move
      00071F 90 85            [ 2]  106 	popw y
      000721 85               [ 2]  107 	popw x
      000722 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000723                        123 program_row:
      000723 88               [ 1]  124 	push a 
      000724 90 89            [ 2]  125 	pushw y 
      000726 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000728 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00072C 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000730 90 5F            [ 1]  130 	clrw y 
      000732 F6               [ 1]  131 1$:	ld a,(x)
      000733 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000737 5C               [ 1]  133 	incw x 
      000738 90 5C            [ 1]  134 	incw y 
      00073A 0A 01            [ 1]  135 	dec (BCNT,sp)
      00073C 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00073E 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000743                        139 	_drop 1 
      000743 5B 01            [ 2]    1     addw sp,#1 
      000745 90 85            [ 2]  140 	popw y 
      000747 84               [ 1]  141 	pop a 
      000748 81               [ 4]  142 	ret 
      000749                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000749                        149 move_prg_to_ram:
      000749 89               [ 2]  150 	pushw x 
      00074A 90 89            [ 2]  151 	pushw y 
      00074C AE 07 49         [ 2]  152 	ldw x,#program_row_end 
      00074F 1D 07 23         [ 2]  153 	subw x,#program_row 
      000752 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000755 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000758 90 AE 07 23      [ 2]  156 	ldw y,#program_row ; source address 
      00075C CD 13 B2         [ 4]  157 	call move
      00075F 90 85            [ 2]  158 	popw y 
      000761 85               [ 2]  159 	popw x  
      000762 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000763                        169 write_buffer:
      000763 89               [ 2]  170 	pushw x 
      000764 72 5D 00 18      [ 1]  171 	tnz farptr 
      000768 26 0D            [ 1]  172 	jrne to_flash 
      00076A CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00076D A3 36 00         [ 2]  174 	cpw x,#app_space  
      000770 24 05            [ 1]  175 	jruge to_flash 
      000772                        176 to_eeprom:
      000772 CD 06 A6         [ 4]  177 	call unlock_eeprom
      000775 20 03            [ 2]  178 	jra do_programming
      000777                        179 to_flash:
      000777 CD 06 C1         [ 4]  180 	call unlock_flash
      00077A                        181 do_programming:
      00077A 85               [ 2]  182 	popw x 
      00077B CD 16 90         [ 4]  183 	call tib
      00077E 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000782 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000786 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000787                        197 block_erase:
      000787 89               [ 2]  198 	pushw x 
      000788 C6 00 18         [ 1]  199 	ld a,farptr 
      00078B 26 14            [ 1]  200 	jrne erase_flash
      00078D CE 00 19         [ 2]  201 	ldw x,farptr+1
      000790 A3 36 00         [ 2]  202 	cpw x,#app_space 
      000793 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000795 CD 06 A6         [ 4]  205 	call unlock_eeprom 
      000798 CD 16 90         [ 4]  206 	call tib 
      00079B 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00079F 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007A1                        210 erase_flash:
      0007A1 CD 06 C1         [ 4]  211 	call unlock_flash 
      0007A4 CD 16 90         [ 4]  212 	call tib 
      0007A7 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007AB                        214 erase_exit: 
      0007AB 85               [ 2]  215 	popw x 
      0007AC 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007AD                        232 write_byte:
      0007AD 90 89            [ 2]  233 	pushw y
      0007AF                        234 	_vars VSIZE
      0007AF 52 02            [ 2]    1     sub sp,#VSIZE 
      0007B1 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007B3 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007B5 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007B9 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007BD 26 14            [ 1]  241 	jrne write_flash
      0007BF 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      0007C3 24 0E            [ 1]  243     jruge write_flash
      0007C5 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007C9 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0007CB 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007CF 22 51            [ 1]  247 	jrugt write_exit
      0007D1 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007D3                        250 write_flash:
      0007D3 CD 06 C1         [ 4]  251 	call unlock_flash 
      0007D6 9B               [ 1]  252 1$:	sim 
      0007D7 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007D9 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007DD 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007E2 9A               [ 1]  256     rim 
      0007E3 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E7 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007E9                        260 write_eeprom:
      0007E9 CD 06 A6         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007EC 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007F0 2B 08            [ 1]  264 	jrmi 1$
      0007F2 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007F6 2A 02            [ 1]  266 	jrpl 1$
      0007F8 03 02            [ 1]  267 	cpl (OPT,sp)
      0007FA                        268 1$: 
      0007FA 0D 02            [ 1]  269     tnz (OPT,sp)
      0007FC 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007FE 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000802 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000806                        274 2$: 
      000806 7B 01            [ 1]  275     ld a,(BTW,sp)
      000808 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      00080C 0D 02            [ 1]  277     tnz (OPT,sp)
      00080E 27 08            [ 1]  278     jreq 3$
      000810 5C               [ 1]  279     incw x
      000811 7B 01            [ 1]  280     ld a,(BTW,sp)
      000813 43               [ 1]  281     cpl a
      000814 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000818 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081D 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000822                        285 write_exit:
      000822                        286 	_drop VSIZE 
      000822 5B 02            [ 2]    1     addw sp,#VSIZE 
      000824 90 85            [ 2]  287 	popw y
      000826 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000827                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000827                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000827                        309 write_block::
      000827 88               [ 1]  310 	push a 
      000828                        311 	_vars VSIZE
      000828 52 02            [ 2]    1     sub sp,#VSIZE 
      00082A 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      00082C 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      00082E 27 13            [ 1]  314 	jreq 9$
      000830 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      000832 90 F6            [ 1]  316 	ld a,(y)
      000834 CD 07 AD         [ 4]  317 	call write_byte 
      000837 5C               [ 1]  318 	incw x 
      000838 90 5C            [ 1]  319 	incw y 
      00083A 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      00083C 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      00083E 5A               [ 2]  322 	decw x
      00083F 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      000841 26 ED            [ 1]  324 	jrne 1$
      000843                        325 9$:
      000843 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      000845 CD 08 7D         [ 4]  327 	call incr_farptr
      000848                        328 	_drop VSIZE
      000848 5B 02            [ 2]    1     addw sp,#VSIZE 
      00084A 84               [ 1]  329 	pop a 
      00084B 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      00084C                        347 write_nbytes:
      00084C 90 89            [ 2]  348 	pushw y
      00084E 88               [ 1]  349 	push a 
      00084F 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      000851 5F               [ 1]  351 	clrw x 
      000852                        352 1$:  
      000852 90 F6            [ 1]  353 	ld a,(y)
      000854 90 5C            [ 1]  354 	incw y
      000856 CD 07 AD         [ 4]  355 	call write_byte 
      000859 5C               [ 1]  356 	incw x 
      00085A 0A 01            [ 1]  357 	dec (1,sp)  
      00085C 26 F4            [ 1]  358 	jrne 1$ 
      00085E 84               [ 1]  359 9$: pop a 
      00085F 90 85            [ 2]  360 	popw y 
      000861 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      000862                        370 row_align:
      000862 A6 7F            [ 1]  371 	ld a,#0x7f 
      000864 C4 00 1A         [ 1]  372 	and a,farptr+2 
      000867 27 13            [ 1]  373 	jreq 1$ 
      000869 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      00086C 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      00086F 24 04            [ 1]  376 	jrnc 0$
      000871 72 5C 00 18      [ 1]  377 	inc farptr 
      000875 9F               [ 1]  378 0$: ld a,xl 
      000876 A4 80            [ 1]  379 	and a,#0x80
      000878 97               [ 1]  380 	ld xl,a
      000879 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      00087C 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      00087D                        390 incr_farptr:
      00087D 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      000881 24 04            [ 1]  392 	jrnc 1$
      000883 72 5C 00 18      [ 1]  393 	inc farptr 
      000887 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      00088A 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      00088B                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00088B 5F               [ 1]  406 	clrw x 
      00088C 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      000890 26 06            [ 1]  408 	jrne 2$
      000892 5C               [ 1]  409 	incw x 
      000893 A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      000896 25 F4            [ 1]  411 	jrult 1$ 
      000898 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      000899                         66 Uart1RxHandler: ; console receive char 
      000899 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      00089E C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008A1 A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008A3 26 06            [ 1]   70 	jrne 2$
      0008A5 CD 09 0B         [ 4]   71 	call putc 
      0008A8 CC 00 57         [ 2]   72 	jp user_interrupted
      0008AB                         73 2$:
      0008AB A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008AD 26 03            [ 1]   75 	jrne 3$
      0008AF CC 00 C3         [ 2]   76 	jp cold_start 	
      0008B2 88               [ 1]   77 3$:	push a 
      0008B3 A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008B5 CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008B8 5F               [ 1]   80 	clrw x 
      0008B9 97               [ 1]   81 	ld xl,a 
      0008BA 84               [ 1]   82 	pop a 
      0008BB F7               [ 1]   83 	ld (x),a 
      0008BC C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008BF 4C               [ 1]   85 	inc a 
      0008C0 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008C2 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008C5 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008C6                         97 uart1_init:
      0008C6 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008CA 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008CE 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008D2 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008D6                        103 uart1_set_baud: 
      0008D6 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008D7 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008D9 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008DC 27 0A            [ 1]  109 	jreq 2$ 
      0008DE                        110 1$: ; 8 Mhz 	
      0008DE 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008E2 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008E6 20 08            [ 2]  113 	jra 3$
      0008E8                        114 2$: ; 16 Mhz 	
      0008E8 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008EC 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008F0                        117 3$:
      0008F0 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008F4 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008F8 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008FC 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      000901 72 5F 00 2E      [ 1]  122     clr rx1_head 
      000905 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000909 84               [ 1]  124 	pop a  
      00090A 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      00090B                        133 putc:: ; console output always on UART1
      00090B                        134 uart1_putc:: 
      00090B 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000910 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000913 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000914                        148 qgetc::
      000914                        149 uart1_qgetc::
      000914 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000917 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      00091A 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      00091B                        161 getc:: ;console input
      00091B                        162 uart1_getc::
      00091B CD 09 14         [ 4]  163 	call uart1_qgetc
      00091E 27 FB            [ 1]  164 	jreq uart1_getc 
      000920 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000921 A6 26            [ 1]  167 	ld a,#rx1_queue
      000923 CB 00 2E         [ 1]  168 	add a,rx1_head 
      000926 5F               [ 1]  169 	clrw x  
      000927 97               [ 1]  170 	ld xl,a 
      000928 F6               [ 1]  171 	ld a,(x)
      000929 88               [ 1]  172 	push a
      00092A C6 00 2E         [ 1]  173 	ld a,rx1_head 
      00092D 4C               [ 1]  174 	inc a 
      00092E A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000930 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000933 84               [ 1]  177 	pop a  
      000934 85               [ 2]  178 	popw x
      000935 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000936 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000942                        207 get_escape:
      000942 CD 09 1B         [ 4]  208     call getc 
      000945 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000947 27 02            [ 1]  210     jreq 1$
      000949 4F               [ 1]  211     clr a
      00094A 81               [ 4]  212     ret
      00094B CD 09 1B         [ 4]  213 1$: call getc 
      00094E AE 09 36         [ 2]  214     ldw x,#convert_table
      000951                        215 2$:
      000951 F1               [ 1]  216     cp a,(x)
      000952 27 08            [ 1]  217     jreq 4$
      000954 1C 00 02         [ 2]  218     addw x,#2
      000957 7D               [ 1]  219     tnz (x)
      000958 26 F7            [ 1]  220     jrne 2$
      00095A 4F               [ 1]  221     clr a
      00095B 81               [ 4]  222     ret 
      00095C 5C               [ 1]  223 4$: incw x 
      00095D F6               [ 1]  224     ld a,(x)
      00095E A1 84            [ 1]  225     cp a,#SUP
      000960 26 05            [ 1]  226     jrne 5$
      000962 88               [ 1]  227     push a 
      000963 CD 09 1B         [ 4]  228     call getc
      000966 84               [ 1]  229     pop a 
      000967                        230 5$:
      000967 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      000968                        241 puts::
      000968 F6               [ 1]  242     ld a,(x)
      000969 27 06            [ 1]  243 	jreq 1$
      00096B CD 09 0B         [ 4]  244 	call putc 
      00096E 5C               [ 1]  245 	incw x 
      00096F 20 F7            [ 2]  246 	jra puts 
      000971 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000972                        258 bksp:
      000972 A6 08            [ 1]  259 	ld a,#BS 
      000974 CD 09 0B         [ 4]  260 	call putc 
      000977 A6 20            [ 1]  261 	ld a,#SPACE 
      000979 CD 09 0B         [ 4]  262 	call putc 
      00097C A6 08            [ 1]  263 	ld a,#BS 
      00097E CD 09 0B         [ 4]  264 	call putc 
      000981 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000982                        274 delete_nchar:
      000982 88               [ 1]  275 	push a 
      000983 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000985 27 07            [ 1]  277 	jreq 1$
      000987 CD 09 72         [ 4]  278 	call bksp 
      00098A 0A 01            [ 1]  279 	dec (1,sp)
      00098C 20 F5            [ 2]  280 	jra 0$
      00098E 84               [ 1]  281 1$:	pop a 
      00098F 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000990                        290 send_escape:
      000990 A6 1B            [ 1]  291 	ld a,#ESC 
      000992 CD 09 0B         [ 4]  292 	call putc 
      000995 A6 5B            [ 1]  293 	ld a,#'[
      000997 CD 09 0B         [ 4]  294 	call putc 
      00099A 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00099B                        311 send_parameter:
      00099B 89               [ 2]  312 	pushw x 
      00099C 5F               [ 1]  313 	clrw x 
      00099D 97               [ 1]  314 	ld xl,a 
      00099E A6 0A            [ 1]  315 	ld a,#10 
      0009A0 62               [ 2]  316 	div x,a 
      0009A1 95               [ 1]  317 	ld xh,a 
      0009A2 9F               [ 1]  318 	ld a,xl
      0009A3 4D               [ 1]  319     tnz a 
      0009A4 27 0B            [ 1]  320     jreq 2$
      0009A6 A1 09            [ 1]  321 	cp a,#9 
      0009A8 23 02            [ 2]  322 	jrule 1$
      0009AA A6 09            [ 1]  323 	ld a,#9
      0009AC                        324 1$:
      0009AC AB 30            [ 1]  325 	add a,#'0 
      0009AE CD 09 0B         [ 4]  326 	call putc
      0009B1 9E               [ 1]  327 2$:	ld a,xh 
      0009B2 AB 30            [ 1]  328 	add a,#'0
      0009B4 CD 09 0B         [ 4]  329 	call putc 
      0009B7 85               [ 2]  330 	popw x 
      0009B8 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009B9                        344 move_left:
      0009B9 88               [ 1]  345 	push a 
      0009BA CD 09 90         [ 4]  346 	call send_escape
      0009BD 84               [ 1]  347     pop a
      0009BE CD 09 9B         [ 4]  348 	call send_parameter 
      0009C1 A6 44            [ 1]  349 	ld a,#'D 
      0009C3 CD 09 0B         [ 4]  350 	call putc 
      0009C6 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0009C7                        362 move_right:
      0009C7 88               [ 1]  363 	push a 
      0009C8 CD 09 90         [ 4]  364 	call send_escape
      0009CB 84               [ 1]  365     pop a
      0009CC CD 09 9B         [ 4]  366 	call send_parameter 
      0009CF A6 43            [ 1]  367 	ld a,#'C 
      0009D1 CD 09 0B         [ 4]  368 	call putc 
      0009D4 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009D5                        379 spaces::
      0009D5 A6 20            [ 1]  380 	ld a,#SPACE 
      0009D7 5D               [ 2]  381 1$:	tnzw x
      0009D8 27 06            [ 1]  382 	jreq 9$
      0009DA CD 09 0B         [ 4]  383 	call putc 
      0009DD 5A               [ 2]  384 	decw x
      0009DE 20 F7            [ 2]  385 	jra 1$
      0009E0                        386 9$: 
      0009E0 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009E1                        405 insert_char: 
      0009E1                        406 	_vars VSIZE 
      0009E1 52 03            [ 2]    1     sub sp,#VSIZE 
      0009E3 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009E5 9E               [ 1]  408     ld a,xh 
      0009E6 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009E8 9F               [ 1]  410     ld a,xl 
      0009E9 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009EB 93               [ 1]  412     ldw x,y
      0009EC 5C               [ 1]  413     incw x 
      0009ED 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009EF 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0009F1 4C               [ 1]  416     inc a 
      0009F2 C7 00 0E         [ 1]  417     ld acc8,a 
      0009F5 72 5F 00 0D      [ 1]  418     clr acc16
      0009F9 CD 13 B2         [ 4]  419     call move
      0009FC 90 AE 16 90      [ 2]  420     ldw y,#tib 
      000A00 7B 01            [ 1]  421     ld a,(IPOS,sp)
      000A02 C7 00 0E         [ 1]  422     ld acc8,a 
      000A05 72 B9 00 0D      [ 2]  423     addw y,acc16 
      000A09 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      000A0B 90 F7            [ 1]  425     ld (y),a
      000A0D 90 5C            [ 1]  426     incw y  
      000A0F 7B 01            [ 1]  427     ld a,(IPOS,sp)
      000A11 CD 09 B9         [ 4]  428     call move_left
      000A14 AE 16 90         [ 2]  429     ldw x,#tib 
      000A17 CD 09 68         [ 4]  430     call puts 
      000A1A 7B 03            [ 1]  431     ld a,(LLEN,sp)
      000A1C 10 01            [ 1]  432     sub a,(IPOS,sp) 
      000A1E CD 09 B9         [ 4]  433     call move_left 
      000A21                        434 	_drop VSIZE 
      000A21 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A23 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      000A24                        448 delete_under:
      000A24                        449 	_vars VSIZE 
      000A24 52 02            [ 2]    1     sub sp,#VSIZE 
      000A26 6B 02            [ 1]  450     ld (LLEN,sp),a 
      000A28 9F               [ 1]  451     ld a,xl 
      000A29 6B 01            [ 1]  452     ld (CPOS,sp),a 
      000A2B 93               [ 1]  453     ldw x,y ; move destination
      000A2C 90 5C            [ 1]  454     incw y  ; move source 
      000A2E 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A30 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A32 4C               [ 1]  457     inc a ; move including zero at end.
      000A33 C7 00 0E         [ 1]  458     ld acc8,a 
      000A36 72 5F 00 0D      [ 1]  459     clr acc16 
      000A3A CD 13 B2         [ 4]  460 	call move 
      000A3D 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A41 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A43 C7 00 0E         [ 1]  463     ld acc8,a 
      000A46 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A4A 93               [ 1]  465     ldw x,y 
      000A4B CD 09 68         [ 4]  466     call puts 
      000A4E A6 20            [ 1]  467     ld a,#SPACE  
      000A50 CD 09 0B         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000A53 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A55 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A57 CD 09 B9         [ 4]  471     call move_left 
      000A5A 0A 02            [ 1]  472     dec (LLEN,sp)
      000A5C                        473 	_drop VSIZE 
      000A5C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5E 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A5F                        486 delete_line:
      000A5F CD 09 90         [ 4]  487     call send_escape
      000A62 A6 32            [ 1]  488 	ld a,#'2
      000A64 CD 09 0B         [ 4]  489 	call putc 
      000A67 A6 4B            [ 1]  490 	ld a,#'K 
      000A69 CD 09 0B         [ 4]  491 	call putc 
      000A6C 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A6D                        524 readln::
      000A6D 90 89            [ 2]  525 	pushw y 
      000A6F                        526 	_vars VSIZE 
      000A6F 52 04            [ 2]    1     sub sp,#VSIZE 
      000A71 5F               [ 1]  527 	clrw x 
      000A72 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A74 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A76 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A78 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A7C                        532 readln_loop:
      000A7C CD 09 1B         [ 4]  533 	call getc
      000A7F 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A81 A1 1B            [ 1]  535     cp a,#ESC 
      000A83 26 05            [ 1]  536     jrne 0$
      000A85 CD 09 42         [ 4]  537     call get_escape 
      000A88 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A8A A1 0D            [ 1]  539 0$:	cp a,#CR
      000A8C 26 03            [ 1]  540 	jrne 1$
      000A8E CC 0C 09         [ 2]  541 	jp readln_quit
      000A91 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A93 26 03            [ 1]  543 	jrne 2$ 
      000A95 CC 0C 09         [ 2]  544 	jp readln_quit
      000A98                        545 2$:
      000A98 A1 08            [ 1]  546 	cp a,#BS
      000A9A 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A9C 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A9E 27 DC            [ 1]  550     jreq readln_loop 
      000AA0 A6 01            [ 1]  551     ld a,#1 
      000AA2 CD 09 B9         [ 4]  552     call move_left
      000AA5 0A 03            [ 1]  553     dec (CPOS,sp)
      000AA7 90 5A            [ 2]  554     decw y 
      000AA9 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000AAB CC 0B B5         [ 2]  556     jp 12$
      000AAE                        557 3$:
      000AAE A1 04            [ 1]  558 	cp a,#CTRL_D
      000AB0 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000AB2 CD 0A 5F         [ 4]  561 	call delete_line 
      000AB5 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000AB7 4C               [ 1]  563     inc a 
      000AB8 CD 09 B9         [ 4]  564     call move_left 
      000ABB A6 3E            [ 1]  565 	ld a,#'> 
      000ABD CD 09 0B         [ 4]  566 	call putc 
      000AC0 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000AC4 90 7F            [ 1]  568 	clr (y)
      000AC6 0F 02            [ 1]  569 	clr (LL,sp)
      000AC8 0F 03            [ 1]  570 	clr (CPOS,sp)
      000ACA 20 B0            [ 2]  571 	jra readln_loop
      000ACC                        572 4$:
      000ACC A1 12            [ 1]  573 	cp a,#CTRL_R 
      000ACE 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000AD0 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000AD2 26 A8            [ 1]  577 	jrne readln_loop
      000AD4 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AD8 93               [ 1]  579 	ldw x,y
      000AD9 CD 13 86         [ 4]  580 	call strlen
      000ADC 4D               [ 1]  581 	tnz a  
      000ADD 27 9D            [ 1]  582 	jreq readln_loop
      000ADF 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AE1 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AE3 93               [ 1]  585 	ldw x,y  
      000AE4 CD 09 68         [ 4]  586 	call puts
      000AE7 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000AE9 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000AEC 20 8E            [ 2]  589 	jra readln_loop 
      000AEE                        590 5$:
      000AEE A1 05            [ 1]  591 	cp a,#CTRL_E 
      000AF0 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AF2 AE 16 90         [ 2]  594 	ldw x,#tib 
      000AF5 CD 18 35         [ 4]  595 	call atoi24
      000AF8 CE 00 0D         [ 2]  596 	ldw x,acc16
      000AFB CD 0C 45         [ 4]  597 	call search_lineno
      000AFE 5D               [ 2]  598 	tnzw x 
      000AFF 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000B01 CC 0C 09         [ 2]  603 	jp readln_quit  
      000B04                        604 51$:
      000B04 CF 00 04         [ 2]  605 	ldw basicptr,x
      000B07 E6 02            [ 1]  606 	ld a,(2,x)
      000B09 C7 00 03         [ 1]  607 	ld count,a 
      000B0C 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000B10 CD 11 A2         [ 4]  609 	call decompile 
      000B13 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  611 	ld a,#CR 
      000B17 CD 09 0B         [ 4]  612 	call putc 
      000B1A A6 3E            [ 1]  613 	ld a,#'>
      000B1C CD 09 0B         [ 4]  614 	call putc
      000B1F AE 16 90         [ 2]  615     ldw x,#tib  
      000B22 CD 13 86         [ 4]  616 	call strlen 
      000B25 6B 02            [ 1]  617 	ld (LL,sp),a 
      000B27 CD 09 68         [ 4]  618 	call puts 
      000B2A 90 93            [ 1]  619 	ldw y,x
      000B2C 7B 02            [ 1]  620     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B30 CC 0A 7C         [ 2]  622 	jp readln_loop
      000B33                        623 6$:
      000B33 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B37 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  628     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  629     jrmi 61$
      000B3D CC 0A 7C         [ 2]  630     jp readln_loop 
      000B40                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B40 A6 01            [ 1]  632     ld a,#1 
      000B42 CD 09 C7         [ 4]  633 	call move_right 
      000B45 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  635     incw y 
      000B49 CC 0A 7C         [ 2]  636     jp readln_loop 
      000B4C A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B50 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  641 	jrne 71$
      000B54 CC 0A 7C         [ 2]  642 	jp readln_loop
      000B57                        643 71$:
      000B57 A6 01            [ 1]  644     ld a,#1 
      000B59 CD 09 B9         [ 4]  645 	call move_left 
      000B5C 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  647     decw y 
      000B60 CC 0A 7C         [ 2]  648 	jp readln_loop 
      000B63 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B67 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B69 CD 09 B9         [ 4]  653     call move_left 
      000B6C 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B6E 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B72 CC 0A 7C         [ 2]  656 	jp readln_loop  
      000B75 A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B79 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  661 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  662 	jrne 91$
      000B7F CC 0A 7C         [ 2]  663 	jp readln_loop 
      000B82                        664 91$:
      000B82 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B84 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B86 CD 09 C7         [ 4]  667 	call move_right 
      000B89 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B8D 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  671     clr acc16 
      000B95 C7 00 0E         [ 1]  672     ld acc8,a 
      000B98 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B9C CC 0A 7C         [ 2]  674 	jp readln_loop 
      000B9F A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000BA5 CD 25 55         [ 4]  679 	call beep_1khz
      000BA8 CC 0A 7C         [ 2]  680 	jp readln_loop 
      000BAB A1 84            [ 1]  681 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000BAF 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  685     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000BB5                        687 12$:
      000BB5 97               [ 1]  688     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 24         [ 4]  690     call delete_under
      000BBB 0A 02            [ 1]  691     dec (LLEN,sp)
      000BBD                        692 13$:
      000BBD CC 0A 7C         [ 2]  693     jp readln_loop 
      000BC0                        694 final_test:
      000BC0 A1 20            [ 1]  695 	cp a,#SPACE
      000BC2 2A 03            [ 1]  696 	jrpl accept_char
      000BC4 CC 0A 7C         [ 2]  697 	jp readln_loop
      000BC7                        698 accept_char:
      000BC7 A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  700 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  701 	jrpl 1$
      000BCD CC 0A 7C         [ 2]  702 	jp readln_loop
      000BD0 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BD4 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  707     cp a,(LL,sp)
      000BD8 27 12            [ 1]  708     jreq overwrite
      000BDA 7B 02            [ 1]  709     ld a,(LL,sp)
      000BDC 97               [ 1]  710     ld xl,a 
      000BDD 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BDF 95               [ 1]  712     ld xh,a
      000BE0 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BE2 CD 09 E1         [ 4]  714     call insert_char
      000BE5 0C 02            [ 1]  715     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BE9 CC 0A 7C         [ 2]  717     jp readln_loop 
      000BEC                        718 overwrite:
      000BEC 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  720 	ld (y),a
      000BF0 90 5C            [ 1]  721     incw y
      000BF2 CD 09 0B         [ 4]  722     call putc 
      000BF5 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  724 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  725 	jrmi 1$
      000BFB 90 7F            [ 1]  726 	clr (y)
      000BFD 0C 02            [ 1]  727 	inc (LL,sp)
      000BFF 0C 03            [ 1]  728     inc (CPOS,sp)
      000C01 CC 0A 7C         [ 2]  729 	jp readln_loop 
      000C04                        730 1$:	
      000C04 0C 03            [ 1]  731 	inc (CPOS,sp)
      000C06 CC 0A 7C         [ 2]  732 	jp readln_loop 
      000C09                        733 readln_quit:
      000C09 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000C0D 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  737     clr (y)
      000C14 7B 02            [ 1]  738 	ld a,(LL,sp)
      000C16 C7 00 03         [ 1]  739 	ld count,a 
      000C19 A6 0D            [ 1]  740 	ld a,#CR
      000C1B CD 09 0B         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C1E                        742 	_drop VSIZE 
      000C1E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  743 	popw y 
      000C22 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000C23                        752 print_hex::
      000C23 88               [ 1]  753 	push a 
      000C24 4E               [ 1]  754 	swap a 
      000C25 CD 0C 3A         [ 4]  755 	call to_hex_char 
      000C28 CD 09 0B         [ 4]  756 	call putc 
      000C2B 7B 01            [ 1]  757     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  758 	call to_hex_char
      000C30 CD 09 0B         [ 4]  759 	call putc
      000C33 A6 20            [ 1]  760 	ld a,#SPACE 
      000C35 CD 09 0B         [ 4]  761 	call putc 
      000C38 84               [ 1]  762 	pop a 
      000C39 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C3A                        772 to_hex_char::
      000C3A A4 0F            [ 1]  773 	and a,#15 
      000C3C A1 09            [ 1]  774 	cp a,#9 
      000C3E 23 02            [ 2]  775 	jrule 1$ 
      000C40 AB 07            [ 1]  776 	add a,#7
      000C42 AB 30            [ 1]  777 1$: add a,#'0 
      000C44 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 B2         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C9A                         99 	_drop VSIZE     
      000C9A 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C9C 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C9D                        115 create_gap:
      000C9D                        116 	_vars VSIZE
      000C9D 52 06            [ 2]    1     sub sp,#VSIZE 
      000C9F 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CA1 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA3 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CA7 90 93            [ 1]  120 	ldw y,x ; SRC
      000CA9 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CAD 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CAF CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CB2 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CB5 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CB8 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CBA CD 13 B2         [ 4]  128 	call move
      000CBD CE 00 1D         [ 2]  129 	ldw x,txtend
      000CC0 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC3 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000CC6                        132 9$:	_drop VSIZE 
      000CC6 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CC8 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CC9                        150 insert_line:
      000CC9                        151 	_vars VSIZE 
      000CC9 52 08            [ 2]    1     sub sp,#VSIZE 
      000CCB CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CCE C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CD1 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD3 AE 00 02         [ 2]  156 	ldw x,#2 
      000CD6 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CDA A1 03            [ 1]  158 	cp a,#3
      000CDC 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CDE 5F               [ 1]  160 	clrw x 
      000CDF 97               [ 1]  161 	ld xl,a
      000CE0 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CE2 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CE5 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CE7 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CEA 20 38            [ 2]  166 	jra 4$
      000CEC 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CF0 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CF2 AE 00 02         [ 2]  170 	ldw x,#2 
      000CF5 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CF9 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CFA 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CFC 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CFE 4F               [ 1]  177 	clr a 
      000CFF CD 0C 45         [ 4]  178 	call search_lineno 
      000D02 5D               [ 2]  179 	tnzw x 
      000D03 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D05 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D07 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D09 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D0B CD 0C 70         [ 4]  188 	call del_line
      000D0E                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D0E A6 03            [ 1]  192 	ld a,#3
      000D10 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D12 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D14 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D16 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D19 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D1B 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D1D 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D1F CD 0C 9D         [ 4]  204 	call create_gap
      000D22 20 06            [ 2]  205 	jra 5$
      000D24                        206 4$: 
      000D24 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D27 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D2A 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D2C CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D2F 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D33 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D35 CD 13 B2         [ 4]  214 	call move 
      000D38                        215 insert_ln_exit:	
      000D38                        216 	_drop VSIZE
      000D38 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D3A 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D3B                        233 parse_quote: 
      000D3B                        234 	_vars VSIZE 
      000D3B 52 02            [ 2]    1     sub sp,#VSIZE 
      000D3D 4F               [ 1]  235 	clr a
      000D3E 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D40                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000D40 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D43 27 24            [ 1]  239 	jreq 6$
      000D45 72 5C 00 01      [ 1]  240 	inc in 
      000D49 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D4B A6 5C            [ 1]  242 	ld a,#'\
      000D4D 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D4F 26 0A            [ 1]  244 	jrne 3$
      000D51 0F 01            [ 1]  245 	clr (PREV,sp)
      000D53 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D55 AD 1C            [ 4]  247 	callr convert_escape
      000D57 F7               [ 1]  248 	ld (x),a 
      000D58 5C               [ 1]  249 	incw x 
      000D59 20 E5            [ 2]  250 	jra 2$
      000D5B                        251 3$:
      000D5B 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D5D A1 5C            [ 1]  253 	cp a,#'\'
      000D5F 27 DD            [ 1]  254 	jreq 1$
      000D61 A1 22            [ 1]  255 	cp a,#'"
      000D63 27 04            [ 1]  256 	jreq 6$ 
      000D65 F7               [ 1]  257 	ld (x),a 
      000D66 5C               [ 1]  258 	incw x 
      000D67 20 D7            [ 2]  259 	jra 2$
      000D69                        260 6$:
      000D69 7F               [ 1]  261 	clr (x)
      000D6A 5C               [ 1]  262 	incw x 
      000D6B 90 93            [ 1]  263 	ldw y,x 
      000D6D 5F               [ 1]  264 	clrw x 
      000D6E A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D70                        266 	_drop VSIZE
      000D70 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D72 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D73                        278 convert_escape:
      000D73 89               [ 2]  279 	pushw x 
      000D74 AE 0D 88         [ 2]  280 	ldw x,#escaped 
      000D77 F1               [ 1]  281 1$:	cp a,(x)
      000D78 27 06            [ 1]  282 	jreq 2$
      000D7A 7D               [ 1]  283 	tnz (x)
      000D7B 27 09            [ 1]  284 	jreq 3$
      000D7D 5C               [ 1]  285 	incw x 
      000D7E 20 F7            [ 2]  286 	jra 1$
      000D80 1D 0D 88         [ 2]  287 2$: subw x,#escaped 
      000D83 9F               [ 1]  288 	ld a,xl 
      000D84 AB 07            [ 1]  289 	add a,#7
      000D86 85               [ 2]  290 3$:	popw x 
      000D87 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    292 
      000D88 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D90                        310 parse_integer: ; { -- n }
      000D90 89               [ 2]  311 	pushw x 	
      000D91 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D93 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D95 A1 24            [ 1]  314 	cp a,#'$
      000D97 26 04            [ 1]  315 	jrne 2$ 
      000D99                        316     _drop #1
      000D99 5B 01            [ 2]    1     addw sp,##1 
      000D9B 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D9D F7               [ 1]  318 2$:	ld (x),a 
      000D9E 5C               [ 1]  319 	incw x 
      000D9F 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DA2 72 5C 00 01      [ 1]  321 	inc in 
      000DA6 CD 18 29         [ 4]  322 	call to_upper 
      000DA9 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DAB CD 0E 2D         [ 4]  324 	call is_digit 
      000DAE 25 ED            [ 1]  325 	jrc 2$
      000DB0 A6 10            [ 1]  326 	ld a,#16 
      000DB2 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB4 26 0A            [ 1]  328 	jrne 3$ 
      000DB6 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DB8 A1 41            [ 1]  330 	cp a,#'A 
      000DBA 2B 04            [ 1]  331 	jrmi 3$ 
      000DBC A1 47            [ 1]  332 	cp a,#'G 
      000DBE 2B DD            [ 1]  333 	jrmi 2$ 
      000DC0 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC4 7F               [ 1]  335     clr (x)
      000DC5 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DC7 CD 18 35         [ 4]  337 	call atoi24
      000DCA 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000DCC C6 00 0C         [ 1]  339 	ld a,acc24 
      000DCF 90 F7            [ 1]  340 	ld (y),a 
      000DD1 90 5C            [ 1]  341 	incw y  
      000DD3 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DD6 90 FF            [ 2]  343 	ldw (y),x 
      000DD8 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DDC A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DDE                        346 	_drop VSIZE  
      000DDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DE0 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE1                        364 parse_binary: ; { -- n }
      000DE1 4B 00            [ 1]  365 	push #0
      000DE3 4B 00            [ 1]  366 	push #0
      000DE5 4B 00            [ 1]  367 	push #0
      000DE7                        368 2$:	
      000DE7 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DEA 72 5C 00 01      [ 1]  370 	inc in 
      000DEE A1 30            [ 1]  371 	cp a,#'0 
      000DF0 27 06            [ 1]  372 	jreq 3$
      000DF2 A1 31            [ 1]  373 	cp a,#'1 
      000DF4 27 02            [ 1]  374 	jreq 3$ 
      000DF6 20 0B            [ 2]  375 	jra bin_exit 
      000DF8 A0 30            [ 1]  376 3$: sub a,#'0 
      000DFA 46               [ 1]  377 	rrc a
      000DFB 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DFD 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DFF 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E01 20 E4            [ 2]  381 	jra 2$  
      000E03                        382 bin_exit:
      000E03 72 5A 00 01      [ 1]  383 	dec in 
      000E07 90 93            [ 1]  384 	ldw y,x
      000E09 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E0B 90 F7            [ 1]  386 	ld (y),a 
      000E0D 90 5C            [ 1]  387 	incw y 
      000E0F 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000E11 90 FF            [ 2]  389 	ldw (y),x 
      000E13 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E17 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E19                        392 	_drop VSIZE 
      000E19 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E1B 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E1C                        402 is_alpha::
      000E1C A1 41            [ 1]  403 	cp a,#'A 
      000E1E 8C               [ 1]  404 	ccf 
      000E1F 24 0B            [ 1]  405 	jrnc 9$ 
      000E21 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E23 25 07            [ 1]  407 	jrc 9$ 
      000E25 A1 61            [ 1]  408 	cp a,#'a 
      000E27 8C               [ 1]  409 	ccf 
      000E28 24 02            [ 1]  410 	jrnc 9$
      000E2A A1 7B            [ 1]  411 	cp a,#'z+1
      000E2C 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E2D                        421 is_digit::
      000E2D A1 30            [ 1]  422 	cp a,#'0
      000E2F 25 03            [ 1]  423 	jrc 1$
      000E31 A1 3A            [ 1]  424     cp a,#'9+1
      000E33 8C               [ 1]  425 	ccf 
      000E34 8C               [ 1]  426 1$:	ccf 
      000E35 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E36                        438 is_alnum::
      000E36 CD 0E 2D         [ 4]  439 	call is_digit
      000E39 25 03            [ 1]  440 	jrc 1$ 
      000E3B CD 0E 1C         [ 4]  441 	call is_alpha
      000E3E 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E3F                        453 is_symbol_char: 
      000E3F A1 5F            [ 1]  454 	cp a,#'_ 
      000E41 26 03            [ 1]  455 	jrne 1$
      000E43 99               [ 1]  456 	scf 
      000E44 20 03            [ 2]  457 	jra 9$ 
      000E46 CD 0E 36         [ 4]  458 1$:	call is_alnum 
      000E49 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4A                        473 parse_symbol:
      000E4A 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E4B                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E4B CD 18 29         [ 4]  477 	call to_upper  
      000E4E F7               [ 1]  478 	ld (x), a 
      000E4F 5C               [ 1]  479 	incw x
      000E50 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E53 72 5C 00 01      [ 1]  481 	inc in 
      000E57 CD 0E 3F         [ 4]  482 	call is_symbol_char 
      000E5A 25 EF            [ 1]  483 	jrc symb_loop 
      000E5C 7F               [ 1]  484 	clr (x)
      000E5D 72 5A 00 01      [ 1]  485 	dec in  
      000E61 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E62                        502 parse_keyword: 
      000E62 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E63 CD 0E 4A         [ 4]  504 	call parse_symbol
      000E66 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E68 E6 02            [ 1]  506 	ld a,(2,x)
      000E6A 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E6C E6 01            [ 1]  509 	ld a,(1,x) 
      000E6E A0 41            [ 1]  510 	sub a,#'A 
      000E70 AE 00 03         [ 2]  511 	ldw x,#3 
      000E73 42               [ 4]  512 	mul x,a 
      000E74 1C 00 30         [ 2]  513 	addw x,#vars 
      000E77 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E79 20 36            [ 2]  515 	jra 4$ 
      000E7B                        516 2$: ; check for keyword, otherwise syntax error.
      000E7B                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E7B AE 33 DA         [ 2]    1     ldw x,#kword_dict+2
      000E7E 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E80 90 5C            [ 1]  519 	incw y 
      000E82 CD 18 B6         [ 4]  520 	call search_dict
      000E85 4D               [ 1]  521 	tnz a
      000E86 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E88 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8A A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E8C 90 F7            [ 1]  527 	ld (y),a 
      000E8E 90 5C            [ 1]  528 	incw y
      000E90 93               [ 1]  529 	ldw x,y 
      000E91 CD 13 86         [ 4]  530 	call strlen
      000E94 A1 0F            [ 1]  531 	cp a,#15 
      000E96 23 02            [ 2]  532 	jrule 22$ 
      000E98 A6 0F            [ 1]  533 	ld a,#15
      000E9A                        534 22$:	
      000E9A 88               [ 1]  535 	push a 
      000E9B                        536 24$:
      000E9B 90 F6            [ 1]  537     ld a,(y)
      000E9D 27 09            [ 1]  538 	jreq 3$
      000E9F 90 5C            [ 1]  539 	incw y
      000EA1 0A 01            [ 1]  540 	dec (1,sp) 
      000EA3 26 F6            [ 1]  541 	jrne 24$
      000EA5 4F               [ 1]  542 	clr a 
      000EA6 90 F7            [ 1]  543 	ld (y),a 
      000EA8 90 5C            [ 1]  544 3$: incw y 
      000EAA                        545 	_drop 1 
      000EAA 5B 01            [ 2]    1     addw sp,#1 
      000EAC A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EAE 5F               [ 1]  547 	clrw x 	
      000EAF 20 1B            [ 2]  548 	jra 5$ 
      000EB1                        549 4$:	
      000EB1 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EB3 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000EB5 2B 06            [ 1]  552 	jrmi 41$
      000EB7 90 F7            [ 1]  553 	ld (y),a 
      000EB9 90 5C            [ 1]  554 	incw y 
      000EBB 20 0F            [ 2]  555 	jra 5$ 
      000EBD                        556 41$:	
      000EBD A3 1C 35         [ 2]  557 	cpw x,#let  
      000EC0 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000EC2 90 F7            [ 1]  559 	ld (y),a 
      000EC4 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000EC6 90 FF            [ 2]  561 	ldw (y),x
      000EC8 72 A9 00 02      [ 2]  562 	addw y,#2  
      000ECC                        563 5$:	_drop VSIZE 
      000ECC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000ECE 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000ECF                        575 skip:
      000ECF 88               [ 1]  576 	push a
      000ED0 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000ED3 27 0A            [ 1]  578 	jreq 2$
      000ED5 11 01            [ 1]  579 	cp a,(C,sp)
      000ED7 26 06            [ 1]  580 	jrne 2$
      000ED9 72 5C 00 01      [ 1]  581 	inc in
      000EDD 20 F1            [ 2]  582 	jra 1$
      000EDF                        583 2$: _drop 1 
      000EDF 5B 01            [ 2]    1     addw sp,#1 
      000EE1 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EE2                        609 get_token:: 
      000EE2                        610 	_vars VSIZE
      000EE2 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EE4                        616 0$: 
      000EE4 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EE8 A6 20            [ 1]  618 	ld a,#SPACE
      000EEA CD 0E CF         [ 4]  619 	call skip
      000EED 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EF2 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EF5 26 05            [ 1]  622 	jrne 1$
      000EF7 90 93            [ 1]  623 	ldw y,x 
      000EF9 CC 10 93         [ 2]  624 	jp token_exit ; end of line 
      000EFC 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F00 CD 18 29         [ 4]  626 	call to_upper 
      000F03 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F05                        629 str_tst:  	
      000F05                        630 	_case '"' nbr_tst
      000F05 A6 22            [ 1]    1 	ld a,#'"' 
      000F07 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F09 26 0A            [ 1]    3 	jrne nbr_tst
      000F0B A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F0D F7               [ 1]  632 	ld (x),a 
      000F0E 5C               [ 1]  633 	incw x 
      000F0F CD 0D 3B         [ 4]  634 	call parse_quote
      000F12 CC 10 93         [ 2]  635 	jp token_exit
      000F15                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F15 A6 24            [ 1]  638 	ld a,#'$'
      000F17 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F19 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F1B A6 26            [ 1]  642 	ld a,#'&
      000F1D 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F1F 26 0A            [ 1]  644 	jrne 0$
      000F21 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F23 F7               [ 1]  646 	ld (x),a 
      000F24 5C               [ 1]  647 	incw x 
      000F25 CD 0D E1         [ 4]  648 	call parse_binary ; expect binary integer 
      000F28 CC 10 93         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F2B 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F2D CD 0E 2D         [ 4]  652 	call is_digit
      000F30 24 0C            [ 1]  653 	jrnc 3$
      000F32 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F34 F7               [ 1]  655 	ld (x),a 
      000F35 5C               [ 1]  656 	incw x 
      000F36 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F38 CD 0D 90         [ 4]  658 	call parse_integer 
      000F3B CC 10 93         [ 2]  659 	jp token_exit 
      000F3E                        660 3$: 
      000F3E                        661 	_case '(' bkslsh_tst 
      000F3E A6 28            [ 1]    1 	ld a,#'(' 
      000F40 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F42 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000F44 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F46 CC 10 8F         [ 2]  663 	jp token_char   	
      000F49                        664 bkslsh_tst: ; character token 
      000F49                        665 	_case '\',rparnt_tst
      000F49 A6 5C            [ 1]    1 	ld a,#'\' 
      000F4B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4D 26 16            [ 1]    3 	jrne rparnt_tst
      000F4F A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F51 F7               [ 1]  667 	ld (x),a 
      000F52 5C               [ 1]  668 	incw x 
      000F53 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F56 F7               [ 1]  670 	ld (x),a 
      000F57 5C               [ 1]  671 	incw x
      000F58 90 93            [ 1]  672 	ldw y,x 	 
      000F5A 72 5C 00 01      [ 1]  673 	inc in  
      000F5E 5F               [ 1]  674 	clrw x 
      000F5F 97               [ 1]  675 	ld xl,a 
      000F60 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F62 CC 10 93         [ 2]  677 	jp token_exit 
      000F65                        678 rparnt_tst:		
      000F65                        679 	_case ')' colon_tst 
      000F65 A6 29            [ 1]    1 	ld a,#')' 
      000F67 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F69 26 05            [ 1]    3 	jrne colon_tst
      000F6B A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F6D CC 10 8F         [ 2]  681 	jp token_char
      000F70                        682 colon_tst:
      000F70                        683 	_case ':' comma_tst 
      000F70 A6 3A            [ 1]    1 	ld a,#':' 
      000F72 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F74 26 05            [ 1]    3 	jrne comma_tst
      000F76 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F78 CC 10 8F         [ 2]  685 	jp token_char  
      000F7B                        686 comma_tst:
      000F7B                        687 	_case COMMA sharp_tst 
      000F7B A6 2C            [ 1]    1 	ld a,#COMMA 
      000F7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7F 26 05            [ 1]    3 	jrne sharp_tst
      000F81 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F83 CC 10 8F         [ 2]  689 	jp token_char
      000F86                        690 sharp_tst:
      000F86                        691 	_case SHARP dash_tst 
      000F86 A6 23            [ 1]    1 	ld a,#SHARP 
      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 05            [ 1]    3 	jrne dash_tst
      000F8C A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F8E CC 10 8F         [ 2]  693 	jp token_char  	 	 
      000F91                        694 dash_tst: 	
      000F91                        695 	_case '-' at_tst 
      000F91 A6 2D            [ 1]    1 	ld a,#'-' 
      000F93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F95 26 05            [ 1]    3 	jrne at_tst
      000F97 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F99 CC 10 8F         [ 2]  697 	jp token_char 
      000F9C                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      000F9C                        699 	_case '@' qmark_tst 
      000F9C A6 40            [ 1]    1 	ld a,#'@' 
      000F9E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA0 26 05            [ 1]    3 	jrne qmark_tst
      000FA2 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FA4 CC 10 8F         [ 2]  701 	jp token_char
      000FA7                        702 qmark_tst:
      000FA7                        703 	_case '?' tick_tst 
      000FA7 A6 3F            [ 1]    1 	ld a,#'?' 
      000FA9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FAB 26 12            [ 1]    3 	jrne tick_tst
      000FAD A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FAF F7               [ 1]  705 	ld (x),a 
      000FB0 5C               [ 1]  706 	incw x 
      000FB1 90 93            [ 1]  707 	ldw y,x 
      000FB3 AE 1F B1         [ 2]  708 	ldw x,#print
      000FB6 90 FF            [ 2]  709 	ldw (y),x 
      000FB8 72 A9 00 02      [ 2]  710 	addw y,#2
      000FBC CC 10 93         [ 2]  711 	jp token_exit
      000FBF                        712 tick_tst: ; comment 
      000FBF                        713 	_case TICK plus_tst 
      000FBF A6 27            [ 1]    1 	ld a,#TICK 
      000FC1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC3 26 2B            [ 1]    3 	jrne plus_tst
      000FC5 A6 80            [ 1]  714 	ld a,#TK_CMD
      000FC7 F7               [ 1]  715 	ld (x),a 
      000FC8 5C               [ 1]  716 	incw x
      000FC9 90 AE 20 F9      [ 2]  717 	ldw y,#remark 
      000FCD FF               [ 2]  718 	ldw (x),y 
      000FCE 1C 00 02         [ 2]  719 	addw x,#2  
      000FD1                        720 copy_comment:
      000FD1 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FD5 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FD9 90 89            [ 2]  723 	pushw y 
      000FDB CD 13 A2         [ 4]  724 	call strcpy
      000FDE 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FE1 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FE3 17 01            [ 2]  727 	ldw (1,sp),y 
      000FE5 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FE8                        729 	_drop 2 
      000FE8 5B 02            [ 2]    1     addw sp,#2 
      000FEA 4F               [ 1]  730 	clr a 
      000FEB 90 93            [ 1]  731 	ldw y,x 
      000FED CC 10 93         [ 2]  732 	jp token_exit 
      000FF0                        733 plus_tst:
      000FF0                        734 	_case '+' star_tst 
      000FF0 A6 2B            [ 1]    1 	ld a,#'+' 
      000FF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF4 26 05            [ 1]    3 	jrne star_tst
      000FF6 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FF8 CC 10 8F         [ 2]  736 	jp token_char 
      000FFB                        737 star_tst:
      000FFB                        738 	_case '*' slash_tst 
      000FFB A6 2A            [ 1]    1 	ld a,#'*' 
      000FFD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      000FFF 26 05            [ 1]    3 	jrne slash_tst
      001001 A6 20            [ 1]  739 	ld a,#TK_MULT 
      001003 CC 10 8F         [ 2]  740 	jp token_char 
      001006                        741 slash_tst: 
      001006                        742 	_case '/' prcnt_tst 
      001006 A6 2F            [ 1]    1 	ld a,#'/' 
      001008 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100A 26 05            [ 1]    3 	jrne prcnt_tst
      00100C A6 21            [ 1]  743 	ld a,#TK_DIV 
      00100E CC 10 8F         [ 2]  744 	jp token_char 
      001011                        745 prcnt_tst:
      001011                        746 	_case '%' eql_tst 
      001011 A6 25            [ 1]    1 	ld a,#'%' 
      001013 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001015 26 05            [ 1]    3 	jrne eql_tst
      001017 A6 22            [ 1]  747 	ld a,#TK_MOD
      001019 CC 10 8F         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      00101C                        750 eql_tst:
      00101C                        751 	_case '=' gt_tst 		
      00101C A6 3D            [ 1]    1 	ld a,#'=' 
      00101E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001020 26 05            [ 1]    3 	jrne gt_tst
      001022 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      001024 CC 10 8F         [ 2]  753 	jp token_char 
      001027                        754 gt_tst:
      001027                        755 	_case '>' lt_tst 
      001027 A6 3E            [ 1]    1 	ld a,#'>' 
      001029 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00102B 26 23            [ 1]    3 	jrne lt_tst
      00102D A6 31            [ 1]  756 	ld a,#TK_GT 
      00102F 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001031 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001034 72 5C 00 01      [ 1]  759 	inc in 
      001038 A1 3D            [ 1]  760 	cp a,#'=
      00103A 26 04            [ 1]  761 	jrne 1$
      00103C A6 33            [ 1]  762 	ld a,#TK_GE 
      00103E 20 4F            [ 2]  763 	jra token_char  
      001040 A1 3C            [ 1]  764 1$: cp a,#'<
      001042 26 04            [ 1]  765 	jrne 2$
      001044 A6 35            [ 1]  766 	ld a,#TK_NE 
      001046 20 47            [ 2]  767 	jra token_char 
      001048 72 5A 00 01      [ 1]  768 2$: dec in
      00104C 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      00104E 20 3F            [ 2]  770 	jra token_char 	 
      001050                        771 lt_tst:
      001050                        772 	_case '<' other
      001050 A6 3C            [ 1]    1 	ld a,#'<' 
      001052 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001054 26 23            [ 1]    3 	jrne other
      001056 A6 34            [ 1]  773 	ld a,#TK_LT 
      001058 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00105A 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      00105D 72 5C 00 01      [ 1]  776 	inc in 
      001061 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001063 26 04            [ 1]  778 	jrne 1$
      001065 A6 36            [ 1]  779 	ld a,#TK_LE 
      001067 20 26            [ 2]  780 	jra token_char 
      001069 A1 3E            [ 1]  781 1$: cp a,#'>
      00106B 26 04            [ 1]  782 	jrne 2$
      00106D A6 35            [ 1]  783 	ld a,#TK_NE 
      00106F 20 1E            [ 2]  784 	jra token_char 
      001071 72 5A 00 01      [ 1]  785 2$: dec in 
      001075 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001077 20 16            [ 2]  787 	jra token_char 	
      001079                        788 other: ; not a special character 	 
      001079 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00107B CD 0E 1C         [ 4]  790 	call is_alpha 
      00107E 25 03            [ 1]  791 	jrc 30$ 
      001080 CC 16 42         [ 2]  792 	jp syntax_error 
      001083                        793 30$: 
      001083 CD 0E 62         [ 4]  794 	call parse_keyword
      001086 A3 20 F9         [ 2]  795 	cpw x,#remark 
      001089 26 08            [ 1]  796 	jrne token_exit 
      00108B 93               [ 1]  797 	ldw x,y 
      00108C CC 0F D1         [ 2]  798 	jp copy_comment 
      00108F                        799 token_char:
      00108F F7               [ 1]  800 	ld (x),a 
      001090 5C               [ 1]  801 	incw x
      001091 90 93            [ 1]  802 	ldw y,x 
      001093                        803 token_exit:
      001093                        804 	_drop VSIZE 
      001093 5B 02            [ 2]    1     addw sp,#VSIZE 
      001095 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001096                        825 compile::
      001096 90 89            [ 2]  826 	pushw y 
      001098                        827 	_vars VSIZE 
      001098 52 02            [ 2]    1     sub sp,#VSIZE 
      00109A 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      00109F 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      0010A3 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      0010A5 AE 00 00         [ 2]  831 	ldw x,#0
      0010A8 CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      0010AB C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      0010AE AE 16 E3         [ 2]  834 	ldw x,#pad+3
      0010B1 72 5F 00 01      [ 1]  835 	clr in 
      0010B5 CD 0E E2         [ 4]  836 	call get_token
      0010B8 A1 84            [ 1]  837 	cp a,#TK_INTGR
      0010BA 26 11            [ 1]  838 	jrne 2$
      0010BC A3 00 01         [ 2]  839 	cpw x,#1 
      0010BF 2A 05            [ 1]  840 	jrpl 1$
      0010C1 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      0010C3 CC 16 44         [ 2]  842 	jp tb_error
      0010C6 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      0010C9 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      0010CD 90 A3 17 9C      [ 2]  845 2$:	cpw y,#stack_full 
      0010D1 25 05            [ 1]  846 	jrult 3$
      0010D3 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010D5 CC 16 44         [ 2]  848 	jp tb_error 
      0010D8                        849 3$:	
      0010D8 93               [ 1]  850 	ldw x,y 
      0010D9 CD 0E E2         [ 4]  851 	call get_token 
      0010DC A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010DE 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010E0 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010E4 90 9F            [ 1]  856     ld a,yl
      0010E6 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010E9 CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010EC E7 02            [ 1]  859 	ld (2,x),a 
      0010EE FE               [ 2]  860 	ldw x,(x)
      0010EF 27 09            [ 1]  861 	jreq 10$
      0010F1 CD 0C C9         [ 4]  862 	call insert_line
      0010F4 72 5F 00 03      [ 1]  863 	clr  count 
      0010F8 20 0F            [ 2]  864 	jra  11$ 
      0010FA                        865 10$: ; line# is zero 
      0010FA CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010FD CF 00 04         [ 2]  867 	ldw basicptr,x 
      001100 E6 02            [ 1]  868 	ld a,(2,x)
      001102 C7 00 03         [ 1]  869 	ld count,a 
      001105 35 03 00 01      [ 1]  870 	mov in,#3 
      001109                        871 11$:
      001109                        872 	_drop VSIZE 
      001109 5B 02            [ 2]    1     addw sp,#VSIZE 
      00110B 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      00110F 90 85            [ 2]  874 	popw y 
      001111 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001112                         48 cpy_cmd_name:
      001112 5D               [ 2]   49 	tnzw x 
      001113 27 14            [ 1]   50 	jreq 10$
      001115 F6               [ 1]   51 	ld a,(x)
      001116 5C               [ 1]   52 	incw x
      001117 A4 0F            [ 1]   53 	and a,#15  
      001119 88               [ 1]   54 	push a 
      00111A 0D 01            [ 1]   55     tnz (1,sp) 
      00111C 27 0A            [ 1]   56 	jreq 9$
      00111E F6               [ 1]   57 1$:	ld a,(x)
      00111F 90 F7            [ 1]   58 	ld (y),a  
      001121 5C               [ 1]   59 	incw x
      001122 90 5C            [ 1]   60 	incw y 
      001124 0A 01            [ 1]   61 	dec (1,sp)	 
      001126 26 F6            [ 1]   62 	jrne 1$
      001128 84               [ 1]   63 9$: pop a 
      001129                         64 10$: 
      001129 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00112A                         75 add_space:
      00112A 90 5A            [ 2]   76 	decw y 
      00112C 90 F6            [ 1]   77 	ld a,(y)
      00112E 90 5C            [ 1]   78 	incw y
      001130 A1 29            [ 1]   79 	cp a,#') 
      001132 27 05            [ 1]   80 	jreq 0$
      001134 CD 0E 36         [ 4]   81 	call is_alnum 
      001137 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001139                         83 0$: 
      001139 A6 20            [ 1]   84 	ld a,#SPACE 
      00113B 90 F7            [ 1]   85 	ld (y),a 
      00113D 90 5C            [ 1]   86 	incw y 
      00113F 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001140                         99 right_align::
      001140 88               [ 1]  100 	push a 
      001141 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001143 C1 00 23         [ 1]  102 	cp a,tab_width 
      001146 2A 08            [ 1]  103 	jrpl 1$
      001148 A6 20            [ 1]  104 	ld a,#SPACE 
      00114A 5A               [ 2]  105 	decw x
      00114B F7               [ 1]  106 	ld (x),a  
      00114C 0C 01            [ 1]  107 	inc (1,sp)
      00114E 20 F1            [ 2]  108 	jra 0$ 
      001150 84               [ 1]  109 1$: pop a 	
      001151 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001152                        123 cpy_quote:
      001152 A6 22            [ 1]  124 	ld a,#'"
      001154 90 F7            [ 1]  125 	ld (y),a 
      001156 90 5C            [ 1]  126 	incw y 
      001158 89               [ 2]  127 	pushw x 
      001159 CD 17 64         [ 4]  128 	call skip_string 
      00115C 85               [ 2]  129 	popw x 
      00115D F6               [ 1]  130 1$:	ld a,(x)
      00115E 27 30            [ 1]  131 	jreq 9$
      001160 5C               [ 1]  132 	incw x 
      001161 A1 20            [ 1]  133 	cp a,#SPACE 
      001163 25 0E            [ 1]  134 	jrult 3$
      001165 90 F7            [ 1]  135 	ld (y),a
      001167 90 5C            [ 1]  136 	incw y 
      001169 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      00116B 26 F0            [ 1]  138 	jrne 1$ 
      00116D                        139 2$:
      00116D 90 F7            [ 1]  140 	ld (y),a
      00116F 90 5C            [ 1]  141 	incw y  
      001171 20 EA            [ 2]  142 	jra 1$
      001173 88               [ 1]  143 3$: push a 
      001174 A6 5C            [ 1]  144 	ld a,#'\
      001176 90 F7            [ 1]  145 	ld (y),a 
      001178 90 5C            [ 1]  146 	incw y  
      00117A 84               [ 1]  147 	pop a 
      00117B A0 07            [ 1]  148 	sub a,#7
      00117D C7 00 0E         [ 1]  149 	ld acc8,a 
      001180 72 5F 00 0D      [ 1]  150 	clr acc16
      001184 89               [ 2]  151 	pushw x
      001185 AE 0D 88         [ 2]  152 	ldw x,#escaped 
      001188 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00118C F6               [ 1]  154 	ld a,(x)
      00118D 85               [ 2]  155 	popw x
      00118E 20 DD            [ 2]  156 	jra 2$
      001190 A6 22            [ 1]  157 9$: ld a,#'"
      001192 90 F7            [ 1]  158 	ld (y),a 
      001194 90 5C            [ 1]  159 	incw y  
      001196 5C               [ 1]  160 	incw x 
      001197 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      001198                        171 var_name::
      001198 1D 00 30         [ 2]  172 		subw x,#vars 
      00119B A6 03            [ 1]  173 		ld a,#3
      00119D 62               [ 2]  174 		div x,a 
      00119E 9F               [ 1]  175 		ld a,xl 
      00119F AB 41            [ 1]  176 		add a,#'A 
      0011A1 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011A2                        195 decompile::
      0011A2                        196 	_vars VSIZE
      0011A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0011A4 C6 00 0A         [ 1]  197 	ld a,base
      0011A7 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011A9 C6 00 23         [ 1]  199 	ld a,tab_width 
      0011AC 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011AE 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011B0 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011B4 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011B8 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011BC 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011C0 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011C3 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011C4 CD 17 D0         [ 4]  208 	call itoa  
      0011C7 CD 11 40         [ 4]  209 	call right_align 
      0011CA 88               [ 1]  210 	push a 
      0011CB 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011CD 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011CF CD 13 A2         [ 4]  213 	call strcpy 
      0011D2 90 5F            [ 1]  214 	clrw y 
      0011D4 84               [ 1]  215 	pop a 
      0011D5 90 97            [ 1]  216 	ld yl,a 
      0011D7 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011DA A6 20            [ 1]  218 	ld a,#SPACE 
      0011DC 90 F7            [ 1]  219 	ld (y),a 
      0011DE 90 5C            [ 1]  220 	incw y 
      0011E0 72 5F 00 23      [ 1]  221 	clr tab_width
      0011E4 AE 00 03         [ 2]  222 	ldw x,#3
      0011E7 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011EA                        224 decomp_loop:
      0011EA 90 89            [ 2]  225 	pushw y
      0011EC CD 17 4B         [ 4]  226 	call next_token 
      0011EF 90 85            [ 2]  227 	popw y 
      0011F1 4D               [ 1]  228 	tnz a  
      0011F2 26 03            [ 1]  229 	jrne 1$
      0011F4 CC 13 17         [ 2]  230 	jp 20$
      0011F7 2B 03            [ 1]  231 1$:	jrmi 2$
      0011F9 CC 12 88         [ 2]  232 	jp 6$
      0011FC                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011FC A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011FE 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001200 CD 11 2A         [ 4]  237 	call add_space
      001203 CD 17 73         [ 4]  238 	call get_addr   
      001206 CD 11 98         [ 4]  239 	call var_name
      001209 90 F7            [ 1]  240 	ld (y),a 
      00120B 90 5C            [ 1]  241 	incw y  
      00120D 20 DB            [ 2]  242 	jra decomp_loop
      00120F                        243 3$:
      00120F A1 84            [ 1]  244 	cp a,#TK_INTGR
      001211 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001213 CD 17 7D         [ 4]  247 	call get_int24 
      001216 C7 00 0C         [ 1]  248 	ld acc24,a 
      001219 CF 00 0D         [ 2]  249 	ldw acc16,x 
      00121C CD 11 2A         [ 4]  250 	call add_space
      00121F 90 89            [ 2]  251 	pushw y 
      001221 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001223 CD 17 D0         [ 4]  253 	call itoa  
      001226 16 01            [ 2]  254 	ldw y,(1,sp) 
      001228 88               [ 1]  255 	push a 
      001229 51               [ 1]  256 	exgw x,y 
      00122A CD 13 A2         [ 4]  257 	call strcpy 
      00122D 90 5F            [ 1]  258 	clrw y
      00122F 84               [ 1]  259 	pop a  
      001230 90 97            [ 1]  260 	ld yl,a 
      001232 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001235                        262 	_drop 2 
      001235 5B 02            [ 2]    1     addw sp,#2 
      001237 20 B1            [ 2]  263 	jra decomp_loop
      001239                        264 4$: ; dictionary keyword
      001239 A1 87            [ 1]  265 	cp a,#TK_NOT 
      00123B 24 39            [ 1]  266 	jruge 50$ 
      00123D FE               [ 2]  267 	ldw x,(x)
      00123E 72 5C 00 01      [ 1]  268 	inc in 
      001242 72 5C 00 01      [ 1]  269 	inc in 
      001246 A3 20 F9         [ 2]  270 	cpw x,#remark 
      001249 26 23            [ 1]  271 	jrne 5$
      00124B CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      00124E CD 11 2A         [ 4]  274 	call add_space
      001251 A6 27            [ 1]  275 	ld a,#''
      001253 90 F7            [ 1]  276 	ld (y),a 
      001255 90 5C            [ 1]  277 	incw y 
      001257                        278 46$:
      001257 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00125B 72 5C 00 01      [ 1]  280 	inc in  
      00125F 90 F7            [ 1]  281 	ld (y),a 
      001261 90 5C            [ 1]  282 	incw y 
      001263 C6 00 01         [ 1]  283 	ld a,in 
      001266 C1 00 03         [ 1]  284 	cp a,count 
      001269 2B EC            [ 1]  285 	jrmi 46$
      00126B CC 13 17         [ 2]  286 	jp 20$  
      00126E A3 1C 35         [ 2]  287 5$: cpw x,#let  
      001271 26 05            [ 1]  288 	jrne 54$
      001273 CC 11 EA         [ 2]  289 	jp decomp_loop ; down display LET
      001276                        290 50$:
      001276 5F               [ 1]  291 	clrw x 
      001277 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001278                        297 54$: ; insert command name 
      001278 CD 11 2A         [ 4]  298 	call add_space  
      00127B 90 89            [ 2]  299 	pushw y
      00127D CD 13 52         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001280 90 85            [ 2]  301 	popw y 
      001282 CD 11 12         [ 4]  302 	call cpy_cmd_name
      001285 CC 11 EA         [ 2]  303 	jp decomp_loop 
      001288                        304 6$:
                                    305 ; label?
      001288 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00128A 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00128C A6 20            [ 1]  309 	ld a,#32 
      00128E 90 F7            [ 1]  310 	ld (y),a 
      001290 90 5C            [ 1]  311 	incw y 
      001292                        312 61$:
      001292 89               [ 2]  313 	pushw x 
      001293 CD 17 64         [ 4]  314 	call skip_string 
      001296 85               [ 2]  315 	popw x 
      001297                        316 62$:	
      001297 F6               [ 1]  317 	ld a,(x)
      001298 27 07            [ 1]  318 	jreq 63$ 
      00129A 5C               [ 1]  319 	incw x  
      00129B 90 F7            [ 1]  320 	ld (y),a 
      00129D 90 5C            [ 1]  321 	incw y 
      00129F 20 F6            [ 2]  322 	jra 62$ 
      0012A1                        323 63$: 
      0012A1 A6 20            [ 1]  324 	ld a,#32 
      0012A3 90 F7            [ 1]  325 	ld (y),a 
      0012A5 90 5C            [ 1]  326 	incw y 
      0012A7 CC 11 EA         [ 2]  327 	jp decomp_loop
      0012AA                        328 64$:
      0012AA A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012AC 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012AE CD 11 2A         [ 4]  332 	call add_space
      0012B1 CD 11 52         [ 4]  333 	call cpy_quote  
      0012B4 CC 11 EA         [ 2]  334 	jp decomp_loop
      0012B7                        335 7$:
      0012B7 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012B9 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012BB CD 11 2A         [ 4]  339 	call add_space 
      0012BE A6 5C            [ 1]  340 	ld a,#'\ 
      0012C0 90 F7            [ 1]  341 	ld (y),a 
      0012C2 90 5C            [ 1]  342 	incw y
      0012C4 F6               [ 1]  343 	ld a,(x)
      0012C5 72 5C 00 01      [ 1]  344 	inc in  
      0012C9 20 06            [ 2]  345 	jra 81$
      0012CB A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012CD 26 09            [ 1]  347 	jrne 9$
      0012CF A6 3A            [ 1]  348 	ld a,#':
      0012D1                        349 81$:
      0012D1 90 F7            [ 1]  350 	ld (y),a 
      0012D3 90 5C            [ 1]  351 	incw y 
      0012D5                        352 82$:
      0012D5 CC 11 EA         [ 2]  353 	jp decomp_loop
      0012D8                        354 9$: 
      0012D8 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0012DA 22 0A            [ 1]  356 	jrugt 10$ 
      0012DC A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012DE 5F               [ 1]  358 	clrw x 
      0012DF 97               [ 1]  359 	ld xl,a
      0012E0 1C 13 2D         [ 2]  360 	addw x,#single_char 
      0012E3 F6               [ 1]  361 	ld a,(x)
      0012E4 20 EB            [ 2]  362 	jra 81$ 
      0012E6                        363 10$: 
      0012E6 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012E8 22 0A            [ 1]  365 	jrugt 11$
      0012EA A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012EC 5F               [ 1]  367 	clrw x 
      0012ED 97               [ 1]  368 	ld xl,a 
      0012EE 1C 13 32         [ 2]  369 	addw x,#add_char 
      0012F1 F6               [ 1]  370 	ld a,(x)
      0012F2 20 DD            [ 2]  371 	jra 81$
      0012F4                        372 11$:
      0012F4 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012F6 22 0A            [ 1]  374 	jrugt 12$
      0012F8 A0 20            [ 1]  375 	sub a,#TK_MULT
      0012FA 5F               [ 1]  376 	clrw x 
      0012FB 97               [ 1]  377 	ld xl,a 
      0012FC 1C 13 34         [ 2]  378 	addw x,#mul_char
      0012FF F6               [ 1]  379 	ld a,(x)
      001300 20 CF            [ 2]  380 	jra 81$
      001302                        381 12$:
      001302 A0 31            [ 1]  382 	sub a,#TK_GT  
      001304 48               [ 1]  383 	sll a 
      001305 5F               [ 1]  384 	clrw x 
      001306 97               [ 1]  385 	ld xl,a 
      001307 1C 13 37         [ 2]  386 	addw x,#relop_str 
      00130A FE               [ 2]  387 	ldw x,(x)
      00130B F6               [ 1]  388 	ld a,(x)
      00130C 5C               [ 1]  389 	incw x 
      00130D 90 F7            [ 1]  390 	ld (y),a
      00130F 90 5C            [ 1]  391 	incw y 
      001311 F6               [ 1]  392 	ld a,(x)
      001312 26 BD            [ 1]  393 	jrne 81$
      001314 CC 11 EA         [ 2]  394 	jp decomp_loop 
      001317                        395 20$: 
      001317 90 7F            [ 1]  396 	clr (y)
      001319 1E 03            [ 2]  397 	ldw x,(STR,sp)
      00131B 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      00131D C7 00 0A         [ 1]  399 	ld base,a 
      001320 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001322 C7 00 23         [ 1]  401 	ld tab_width,a
      001325 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      001328 90 9F            [ 1]  403 	ld a,yl 
      00132A                        404 	_drop VSIZE 
      00132A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00132C 81               [ 4]  405 	ret 
                                    406 
      00132D 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001332 2B 2D                  408 add_char: .byte '+','-'
      001334 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001337 13 43 13 45 13 47 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             4A 13 4F 13 4C
      001343 3E 00                  411 gt: .asciz ">"
      001345 3D 00                  412 equal: .asciz "="
      001347 3E 3D 00               413 ge: .asciz ">="
      00134A 3C 00                  414 lt: .asciz "<"
      00134C 3C 3D 00               415 le: .asciz "<="
      00134F 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001352                        429 cmd_name:
      001352                        430 	_vars VSIZE 
      001352 52 04            [ 2]    1     sub sp,#VSIZE 
      001354 72 5F 00 0D      [ 1]  431 	clr acc16 
      001358 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00135A AE 33 D8         [ 2]  433 	ldw x,#kword_dict	
      00135D 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      00135F E6 02            [ 1]  435 	ld a,(2,x)
      001361 A4 0F            [ 1]  436 	and a,#15 
      001363 C7 00 0E         [ 1]  437 	ld acc8,a 
      001366 1C 00 03         [ 2]  438 	addw x,#3
      001369 72 BB 00 0D      [ 2]  439 	addw x,acc16
      00136D FE               [ 2]  440 	ldw x,(x) ; code address   
      00136E 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001370 27 0C            [ 1]  442 	jreq 2$
      001372 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001374 FE               [ 2]  444 	ldw x,(x) 
      001375 1D 00 02         [ 2]  445 	subw x,#2  
      001378 26 E3            [ 1]  446 	jrne 1$
      00137A 4F               [ 1]  447 	clr a 
      00137B 5F               [ 1]  448 	clrw x 
      00137C 20 05            [ 2]  449 	jra 9$
      00137E 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001380 1C 00 02         [ 2]  451 	addw x,#2 	
      001383                        452 9$:	_drop VSIZE
      001383 5B 04            [ 2]    1     addw sp,#VSIZE 
      001385 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      001386                        116 strlen::
      001386 89               [ 2]  117 	pushw x 
      001387 4F               [ 1]  118 	clr a
      001388 7D               [ 1]  119 1$:	tnz (x) 
      001389 27 04            [ 1]  120 	jreq 9$ 
      00138B 4C               [ 1]  121 	inc a 
      00138C 5C               [ 1]  122 	incw x 
      00138D 20 F9            [ 2]  123 	jra 1$ 
      00138F 85               [ 2]  124 9$:	popw x 
      001390 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      001391                        135 strcmp:
      001391 F6               [ 1]  136 	ld a,(x)
      001392 27 0B            [ 1]  137 	jreq 5$ 
      001394 90 F1            [ 1]  138 	cp a,(y) 
      001396 26 05            [ 1]  139 	jrne 4$ 
      001398 5C               [ 1]  140 	incw x 
      001399 90 5C            [ 1]  141 	incw y 
      00139B 20 F4            [ 2]  142 	jra strcmp 
      00139D                        143 4$: ; not same  
      00139D 4F               [ 1]  144 	clr a 
      00139E 81               [ 4]  145 	ret 
      00139F                        146 5$: ; same 
      00139F A6 01            [ 1]  147 	ld a,#1 
      0013A1 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      0013A2                        159 strcpy::
      0013A2 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013A3 89               [ 2]  161 	pushw x 
      0013A4 90 F6            [ 1]  162 1$: ld a,(y)
      0013A6 27 06            [ 1]  163 	jreq 9$ 
      0013A8 F7               [ 1]  164 	ld (x),a 
      0013A9 5C               [ 1]  165 	incw x 
      0013AA 90 5C            [ 1]  166 	incw y 
      0013AC 20 F6            [ 2]  167 	jra 1$ 
      0013AE 7F               [ 1]  168 9$:	clr (x)
      0013AF 85               [ 2]  169 	popw x 
      0013B0 84               [ 1]  170 	pop a 
      0013B1 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; incrament high byte 
                           000002   183 	LB=2 ; increment low byte 
                           000002   184 	VSIZE=2
      0013B2                        185 move::
      0013B2 88               [ 1]  186 	push a 
      0013B3                        187 	_vars VSIZE 
      0013B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B5 0F 01            [ 1]  188 	clr (INCR,sp)
      0013B7 0F 02            [ 1]  189 	clr (LB,sp)
      0013B9 90 89            [ 2]  190 	pushw y 
      0013BB 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      0013BD 90 85            [ 2]  192 	popw y 
      0013BF 27 31            [ 1]  193 	jreq move_exit ; x==y 
      0013C1 2B 0E            [ 1]  194 	jrmi move_down
      0013C3                        195 move_up: ; start from top address with incr=-1
      0013C3 72 BB 00 0D      [ 2]  196 	addw x,acc16
      0013C7 72 B9 00 0D      [ 2]  197 	addw y,acc16
      0013CB 03 01            [ 1]  198 	cpl (INCR,sp)
      0013CD 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      0013CF 20 05            [ 2]  200 	jra move_loop  
      0013D1                        201 move_down: ; start from bottom address with incr=1 
      0013D1 5A               [ 2]  202     decw x 
      0013D2 90 5A            [ 2]  203 	decw y
      0013D4 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      0013D6                        205 move_loop:	
      0013D6 C6 00 0D         [ 1]  206     ld a, acc16 
      0013D9 CA 00 0E         [ 1]  207 	or a, acc8
      0013DC 27 14            [ 1]  208 	jreq move_exit 
      0013DE 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      0013E1 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      0013E4 90 F6            [ 1]  211 	ld a,(y)
      0013E6 F7               [ 1]  212 	ld (x),a 
      0013E7 89               [ 2]  213 	pushw x 
      0013E8 CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0013EB 5A               [ 2]  215 	decw x 
      0013EC CF 00 0D         [ 2]  216 	ldw acc16,x 
      0013EF 85               [ 2]  217 	popw x 
      0013F0 20 E4            [ 2]  218 	jra move_loop
      0013F2                        219 move_exit:
      0013F2                        220 	_drop VSIZE
      0013F2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013F4 84               [ 1]  221 	pop a 
      0013F5 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      0013F6                        231 clear_vars:
      0013F6 89               [ 2]  232 	pushw x 
      0013F7 88               [ 1]  233 	push a  
      0013F8 AE 00 30         [ 2]  234 	ldw x,#vars 
      0013FB A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      0013FD 7F               [ 1]  236 1$:	clr (x)
      0013FE 5C               [ 1]  237 	incw x 
      0013FF 4A               [ 1]  238 	dec a 
      001400 26 FB            [ 1]  239 	jrne 1$
      001402 84               [ 1]  240 	pop a 
      001403 85               [ 2]  241 	popw x 
      001404 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      001405 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      00144B                        253 system_information:
      00144B AE 14 05         [ 2]  254 	ldw x,#software 
      00144E CD 09 68         [ 4]  255 	call puts 
      001451 A6 02            [ 1]  256 	ld a,#MAJOR 
      001453 C7 00 0E         [ 1]  257 	ld acc8,a 
      001456 5F               [ 1]  258 	clrw x 
      001457 CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00145A 72 5F 00 23      [ 1]  260 	clr tab_width  
      00145E 35 0A 00 0A      [ 1]  261 	mov base, #10 
      001462 CD 17 AA         [ 4]  262 	call prt_acc24 
      001465 A6 2E            [ 1]  263 	ld a,#'.
      001467 CD 09 0B         [ 4]  264 	call putc 
      00146A A6 00            [ 1]  265 	ld a,#MINOR 
      00146C C7 00 0E         [ 1]  266 	ld acc8,a 
      00146F 5F               [ 1]  267 	clrw x 
      001470 CF 00 0C         [ 2]  268 	ldw acc24,x 
      001473 CD 17 AA         [ 4]  269 	call prt_acc24
      001476 A6 0D            [ 1]  270 	ld a,#CR 
      001478 CD 09 0B         [ 4]  271 	call putc
                                    272 ;call test 
      00147B 81               [ 4]  273 	ret
                                    274 
      00147C                        275 warm_init:
      00147C 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      001480 72 5F 00 22      [ 1]  277 	clr flags 
      001484 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      001488 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      00148C 35 0A 00 0A      [ 1]  280 	mov base,#10 
      001490 AE 00 00         [ 2]  281 	ldw x,#0 
      001493 CF 00 04         [ 2]  282 	ldw basicptr,x 
      001496 CF 00 00         [ 2]  283 	ldw in.w,x 
      001499 72 5F 00 03      [ 1]  284 	clr count
      00149D 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      00149E                        291 clear_basic:
      00149E 89               [ 2]  292 	pushw x 
      00149F 72 5F 00 03      [ 1]  293 	clr count
      0014A3 72 5F 00 01      [ 1]  294 	clr in  
      0014A7 AE 00 80         [ 2]  295 	ldw x,#free_ram 
      0014AA CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      0014AD CF 00 1D         [ 2]  297 	ldw txtend,x 
      0014B0 CD 13 F6         [ 4]  298 	call clear_vars 
      0014B3 85               [ 2]  299 	popw x
      0014B4 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014B5                        305 err_msg:
      0014B5 00 00 14 D7 14 E4 14   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             F2 15 0B 15 1A
      0014C1 15 30 15 46 15 60 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             71 15 82
      0014CB 15 8E 15 C1 15 D1 15   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             E5 15 F8
      0014D5 16 05                  309 	.word err_overflow 
                                    310 
      0014D7 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      0014E4 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014F2 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00150B 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00151A 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001530 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001546 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001560 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001571 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001582 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      00158E 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015C1 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015D1 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015E5 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015F8 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001605 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      00160F 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001621 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001632 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      001642                        332 syntax_error::
      001642 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      001644                        335 tb_error::
      001644 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      001649 88               [ 1]  337 	push a 
      00164A AE 16 0F         [ 2]  338 	ldw x, #rt_msg 
      00164D CD 09 68         [ 4]  339 	call puts 
      001650 84               [ 1]  340 	pop a 
      001651 AE 14 B5         [ 2]  341 	ldw x, #err_msg 
      001654 72 5F 00 0D      [ 1]  342 	clr acc16 
      001658 48               [ 1]  343 	sll a
      001659 72 59 00 0D      [ 1]  344 	rlc acc16  
      00165D C7 00 0E         [ 1]  345 	ld acc8, a 
      001660 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      001664 FE               [ 2]  347 	ldw x,(x)
      001665 CD 09 68         [ 4]  348 	call puts
      001668 CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      00166B C6 00 03         [ 1]  351 ld a,count 
      00166E 90 5F            [ 1]  352 clrw y 
      001670 90 02            [ 1]  353 rlwa y  
      001672 CD 06 67         [ 4]  354 call hex_dump
      001675 CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      001678 C6 00 01         [ 1]  357 	ld a,in 
      00167B CD 1F 8D         [ 4]  358 	call prt_basic_line
      00167E AE 16 32         [ 2]  359 	ldw x,#tk_id 
      001681 CD 09 68         [ 4]  360 	call puts 
      001684 C6 00 02         [ 1]  361 	ld a,in.saved 
      001687 5F               [ 1]  362 	clrw x 
      001688 97               [ 1]  363 	ld xl,a 
      001689 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      00168D F6               [ 1]  365 	ld a,(x)
      00168E 5F               [ 1]  366 	clrw x 
      00168F 97               [ 1]  367 	ld xl,a 
      001690 CD 17 93         [ 4]  368 	call prt_i16
      001693 20 35            [ 2]  369 	jra 6$
      001695                        370 1$:	
      001695 88               [ 1]  371 	push a 
      001696 AE 16 21         [ 2]  372 	ldw x,#comp_msg
      001699 CD 09 68         [ 4]  373 	call puts 
      00169C 84               [ 1]  374 	pop a 
      00169D AE 14 B5         [ 2]  375 	ldw x, #err_msg 
      0016A0 72 5F 00 0D      [ 1]  376 	clr acc16 
      0016A4 48               [ 1]  377 	sll a
      0016A5 72 59 00 0D      [ 1]  378 	rlc acc16  
      0016A9 C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0016AC 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      0016B0 FE               [ 2]  381 	ldw x,(x)
      0016B1 CD 09 68         [ 4]  382 	call puts
      0016B4 AE 16 90         [ 2]  383 	ldw x,#tib
      0016B7 CD 09 68         [ 4]  384 	call puts 
      0016BA A6 0D            [ 1]  385 	ld a,#CR 
      0016BC CD 09 0B         [ 4]  386 	call putc
      0016BF CE 00 00         [ 2]  387 	ldw x,in.w
      0016C2 CD 09 D5         [ 4]  388 	call spaces
      0016C5 A6 5E            [ 1]  389 	ld a,#'^
      0016C7 CD 09 0B         [ 4]  390 	call putc 
      0016CA AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      0016CD 94               [ 1]  392     ldw sp,x
                                    393 
      0016CE                        394 warm_start:
      0016CE CD 14 7C         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      0016D1                        399 cmd_line: ; user interface 
      0016D1 A6 0D            [ 1]  400 	ld a,#CR 
      0016D3 CD 09 0B         [ 4]  401 	call putc 
      0016D6 A6 3E            [ 1]  402 	ld a,#'> 
      0016D8 CD 09 0B         [ 4]  403 	call putc
      0016DB CD 0A 6D         [ 4]  404 	call readln
      0016DE 72 5D 00 03      [ 1]  405 	tnz count 
      0016E2 27 ED            [ 1]  406 	jreq cmd_line
      0016E4 CD 10 96         [ 4]  407 	call compile
                                    408 ;;;;;;;;;;;;;;;;;;;;;;	
                                    409 ;pushw y 
                                    410 ;ldw x,txtbgn  
                                    411 ;ldw y,txtend
                                    412 ;ldw acc16,x   
                                    413 ;subw y,acc16 
                                    414 ;call hex_dump
                                    415 ;popw y 
                                    416 ;;;;;;;;;;;;;;;;;;;;;;
                                    417 
                                    418 ; if text begin with a line number
                                    419 ; the compiler set count to zero    
                                    420 ; so code is not interpreted
      0016E7 72 5D 00 03      [ 1]  421 	tnz count 
      0016EB 27 E4            [ 1]  422 	jreq cmd_line
                                    423 	
                                    424 ; if direct command 
                                    425 ; it's ready to interpret 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    427 ;; This is the interpreter loop
                                    428 ;; for each BASIC code line. 
                                    429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016ED                        430 interpreter: 
      0016ED C6 00 01         [ 1]  431 	ld a,in 
      0016F0 C1 00 03         [ 1]  432 	cp a,count 
      0016F3 2B 1D            [ 1]  433 	jrmi interp_loop
      0016F5                        434 next_line:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0016F5 72 01 00 22 D7   [ 2]  435 	btjf flags, #FRUN, cmd_line
      0016FA CE 00 04         [ 2]  436 	ldw x,basicptr
      0016FD 72 BB 00 00      [ 2]  437 	addw x,in.w 
      001701 C3 00 1D         [ 2]  438 	cpw x,txtend 
      001704 2A C8            [ 1]  439 	jrpl warm_start
      001706 CF 00 04         [ 2]  440 	ldw basicptr,x ; start of next line  
      001709 E6 02            [ 1]  441 	ld a,(2,x)
      00170B C7 00 03         [ 1]  442 	ld count,a 
      00170E 35 03 00 01      [ 1]  443 	mov in,#3 ; skip first 3 bytes of line 
      001712                        444 interp_loop:
      001712 CD 17 4B         [ 4]  445 	call next_token
      001715 A1 00            [ 1]  446 	cp a,#TK_NONE 
      001717 27 DC            [ 1]  447 	jreq next_line 
      001719 A1 80            [ 1]  448 	cp a,#TK_CMD
      00171B 26 0C            [ 1]  449 	jrne 1$
      00171D                        450 	_get_code_addr
      00171D FE               [ 2]    1         ldw x,(x)
      00171E 72 5C 00 01      [ 1]    2         inc in 
      001722 72 5C 00 01      [ 1]    3         inc in 
      001726 FD               [ 4]  451 	call(x)
      001727 20 E9            [ 2]  452 	jra interp_loop 
      001729                        453 1$:	 
      001729 A1 85            [ 1]  454 	cp a,#TK_VAR
      00172B 26 05            [ 1]  455 	jrne 2$
      00172D CD 1C 48         [ 4]  456 	call let_var  
      001730 20 E0            [ 2]  457 	jra interp_loop 
      001732                        458 2$:	
      001732 A1 05            [ 1]  459 	cp a,#TK_ARRAY 
      001734 26 05            [ 1]  460 	jrne 3$
      001736 CD 1C 43         [ 4]  461 	call let_array 
      001739 20 D7            [ 2]  462 	jra interp_loop
      00173B                        463 3$:	
      00173B A1 0A            [ 1]  464 	cp a,#TK_COLON 
      00173D 27 D3            [ 1]  465 	jreq interp_loop
      00173F A1 03            [ 1]  466 4$: cp a,#TK_LABEL
      001741 26 05            [ 1]  467 	jrne 5$
      001743 CD 17 64         [ 4]  468 	call skip_string 
      001746 20 CA            [ 2]  469 	jra interp_loop 
      001748 CC 16 42         [ 2]  470 5$:	jp syntax_error 
                                    471 
                                    472 ;--------------------------
                                    473 ; extract next token from
                                    474 ; token list 
                                    475 ; basicptr -> base address 
                                    476 ; in  -> offset in list array 
                                    477 ; output:
                                    478 ;   A 		token attribute
                                    479 ;   X 		*token_value 
                                    480 ;----------------------------------------
      00174B                        481 next_token::
                                    482 ;	clrw x 
      00174B C6 00 01         [ 1]  483 	ld a,in 
      00174E C7 00 02         [ 1]  484 	ld in.saved,a ; in case "_unget_token" needed 
                                    485 ; don't replace sub by "cp a,count" 
                                    486 ; if end of line must return with A=0   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001751 C0 00 03         [ 1]  487 	sub a,count 
      001754 27 0D            [ 1]  488 	jreq 9$ ; end of line 
      001756                        489 0$: 
      001756 CE 00 04         [ 2]  490 	ldw x,basicptr 
      001759 72 BB 00 00      [ 2]  491 	addw x,in.w 
      00175D F6               [ 1]  492 	ld a,(x)
      00175E 5C               [ 1]  493 	incw x
      00175F 72 5C 00 01      [ 1]  494 	inc in   
      001763 81               [ 4]  495 9$: ret 
                                    496 
                                    497 ;-------------------------
                                    498 ;  skip .asciz in BASIC line 
                                    499 ;  name 
                                    500 ;  input:
                                    501 ;     x		* string 
                                    502 ;  output:
                                    503 ;     none 
                                    504 ;-------------------------
      001764                        505 skip_string:
      001764 F6               [ 1]  506 	ld a,(x)
      001765 27 03            [ 1]  507 	jreq 1$
      001767 5C               [ 1]  508 	incw x 
      001768 20 FA            [ 2]  509 	jra skip_string 
      00176A 5C               [ 1]  510 1$: incw x 	
      00176B 72 B0 00 04      [ 2]  511 	subw x,basicptr 
      00176F CF 00 00         [ 2]  512 	ldw in.w,x 
      001772 81               [ 4]  513 	ret 
                                    514 
                                    515 ;---------------------
                                    516 ; extract 16 bits  
                                    517 ; address from BASIC
                                    518 ; code 
                                    519 ; input:
                                    520 ;    X    *address
                                    521 ; output:
                                    522 ;    X    address 
                                    523 ;-------------------- 
      001773                        524 get_addr:
      001773 FE               [ 2]  525 	ldw x,(x)
      001774 72 5C 00 01      [ 1]  526 	inc in 
      001778 72 5C 00 01      [ 1]  527 	inc in 
      00177C 81               [ 4]  528 	ret 
                                    529 
                                    530 ;--------------------
                                    531 ; extract int24_t  
                                    532 ; value from BASIC 
                                    533 ; code 
                                    534 ; input:
                                    535 ;    X   *integer 
                                    536 ; output:
                                    537 ;    A:X   int24  
                                    538 ;--------------------
      00177D                        539 get_int24:
      00177D F6               [ 1]  540 	ld a,(x)
      00177E EE 01            [ 2]  541 	ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    542 ; skip 3 bytes 
      001780 72 5C 00 01      [ 1]  543 	inc in 
      001784 72 5C 00 01      [ 1]  544 	inc in 
      001788 72 5C 00 01      [ 1]  545 	inc in 
      00178C 81               [ 4]  546 	ret 
                                    547 
                                    548 ;-------------------------
                                    549 ; get character from 
                                    550 ; BASIC code 
                                    551 ; input:
                                    552 ;    X   *char 
                                    553 ; output:
                                    554 ;    A    char 
                                    555 ;-------------------------
      00178D                        556 get_char:
      00178D F6               [ 1]  557 	ld a,(x)
      00178E 72 5C 00 01      [ 1]  558 	inc in  
      001792 81               [ 4]  559     ret 
                                    560 
                                    561 ;-----------------------------------
                                    562 ; print a 16 bit integer 
                                    563 ; using variable 'base' as conversion
                                    564 ; format.
                                    565 ; input:
                                    566 ;    X       integer to print 
                                    567 ;   'base'    conversion base 
                                    568 ; output:
                                    569 ;   terminal  
                                    570 ;-----------------------------------
      001793                        571 prt_i16:
      001793 72 5F 00 0C      [ 1]  572 	clr acc24 
      001797 CF 00 0D         [ 2]  573 	ldw acc16,x 
      00179A A6 10            [ 1]  574 	ld a,#16
      00179C C1 00 0A         [ 1]  575 	cp a,base
      00179F 27 09            [ 1]  576 	jreq prt_acc24  
      0017A1 72 0F 00 0D 04   [ 2]  577 	btjf acc16,#7,prt_acc24
      0017A6 72 53 00 0C      [ 1]  578 	cpl acc24 ; sign extend 
                                    579 	
                                    580 ;------------------------------------
                                    581 ; print integer in acc24 
                                    582 ; input:
                                    583 ;	acc24 		integer to print 
                                    584 ;	'base' 		numerical base for conversion 
                                    585 ;   'tab_width' field width 
                                    586 ;    A 			signed||unsigned conversion
                                    587 ;  output:
                                    588 ;    A          string length
                                    589 ;------------------------------------
      0017AA                        590 prt_acc24:
      0017AA A6 FF            [ 1]  591 	ld a,#255  ; signed conversion  
      0017AC CD 17 D0         [ 4]  592     call itoa  ; conversion entier en  .asciz
      0017AF CD 11 40         [ 4]  593 	call right_align  
      0017B2 88               [ 1]  594 	push a 
      0017B3 CD 09 68         [ 4]  595 	call puts
      0017B6 84               [ 1]  596 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0017B7 81               [ 4]  597     ret	
                                    598 
                                    599 ;---------------------------------------
                                    600 ;  print value at xstack top 
                                    601 ;---------------------------------------
      0017B8                        602 print_top: 
      0017B8                        603 	_xpop 
      0017B8 90 F6            [ 1]    1     ld a,(y)
      0017BA 93               [ 1]    2     ldw x,y 
      0017BB EE 01            [ 2]    3     ldw x,(1,x)
      0017BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017C1 C7 00 0C         [ 1]  604 	ld acc24,a 
      0017C4 CF 00 0D         [ 2]  605 	ldw acc16,x 
      0017C7 CD 17 AA         [ 4]  606 	call prt_acc24 
      0017CA A6 20            [ 1]  607 	ld a,#SPACE
      0017CC CD 09 0B         [ 4]  608 	call putc 
      0017CF 81               [ 4]  609 	ret 
                                    610 
                                    611 ;------------------------------------
                                    612 ; convert integer in acc24 to string
                                    613 ; input:
                                    614 ;   'base'	conversion base 
                                    615 ;	acc24	integer to convert
                                    616 ;   A       0=unsigned, else signed 
                                    617 ; output:
                                    618 ;   X  		pointer to first char of string
                                    619 ;   A       string length
                                    620 ;------------------------------------
                           000001   621 	SIGN=1  ; integer sign 
                           000002   622 	LEN=2 
                           000003   623 	PSTR=3
                           000004   624 	VSIZE=4 ;locals size
      0017D0                        625 itoa::
      0017D0                        626 	_vars VSIZE
      0017D0 52 04            [ 2]    1     sub sp,#VSIZE 
      0017D2 0F 02            [ 1]  627 	clr (LEN,sp) ; string length  
      0017D4 0F 01            [ 1]  628 	clr (SIGN,sp)    ; sign
      0017D6 4D               [ 1]  629 	tnz A
      0017D7 27 11            [ 1]  630 	jreq 1$ ; unsigned conversion  
      0017D9 C6 00 0A         [ 1]  631 	ld a,base 
      0017DC A1 0A            [ 1]  632 	cp a,#10
      0017DE 26 0A            [ 1]  633 	jrne 1$
                                    634 	; base 10 string display with negative sign if bit 23==1
      0017E0 72 0F 00 0C 05   [ 2]  635 	btjf acc24,#7,1$
      0017E5 03 01            [ 1]  636 	cpl (SIGN,sp)
      0017E7 CD 02 18         [ 4]  637 	call neg_acc24
      0017EA                        638 1$:
                                    639 ; initialize string pointer 
      0017EA AE 16 90         [ 2]  640 	ldw x,#tib 
      0017ED 1C 00 50         [ 2]  641 	addw x,#TIB_SIZE
      0017F0 5A               [ 2]  642 	decw x 
      0017F1 7F               [ 1]  643 	clr (x)
      0017F2                        644 itoa_loop:
      0017F2 C6 00 0A         [ 1]  645     ld a,base
                                    646 ;	ldw (PSTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0017F5 CD 02 E4         [ 4]  647     call divu24_8 ; acc24/A 
                                    648 ;	ldw x,(PSTR,sp)
      0017F8 AB 30            [ 1]  649     add a,#'0  ; remainder of division
      0017FA A1 3A            [ 1]  650     cp a,#'9+1
      0017FC 2B 02            [ 1]  651     jrmi 2$
      0017FE AB 07            [ 1]  652     add a,#7 
      001800                        653 2$:	
      001800 5A               [ 2]  654 	decw x
      001801 F7               [ 1]  655     ld (x),a
      001802 0C 02            [ 1]  656 	inc (LEN,sp)
                                    657 	; if acc24==0 conversion done
      001804 C6 00 0C         [ 1]  658 	ld a,acc24
      001807 CA 00 0D         [ 1]  659 	or a,acc16
      00180A CA 00 0E         [ 1]  660 	or a,acc8
      00180D 26 E3            [ 1]  661     jrne itoa_loop
                                    662 	;conversion done, next add '$' or '-' as required
      00180F C6 00 0A         [ 1]  663 	ld a,base 
      001812 A1 10            [ 1]  664 	cp a,#16
      001814 27 08            [ 1]  665 	jreq 8$
      001816 7B 01            [ 1]  666 	ld a,(SIGN,sp)
      001818 27 0A            [ 1]  667     jreq 10$
      00181A A6 2D            [ 1]  668     ld a,#'-
      00181C 20 02            [ 2]  669 	jra 9$ 
      00181E                        670 8$:	
      00181E A6 24            [ 1]  671 	ld a,#'$ 
      001820 5A               [ 2]  672 9$: decw x
      001821 F7               [ 1]  673     ld (x),a
      001822 0C 02            [ 1]  674 	inc (LEN,sp)
      001824                        675 10$:
      001824 7B 02            [ 1]  676 	ld a,(LEN,sp)
      001826                        677 	_drop VSIZE
      001826 5B 04            [ 2]    1     addw sp,#VSIZE 
      001828 81               [ 4]  678 	ret
                                    679 
                                    680 ;------------------------------------
                                    681 ; convert alpha to uppercase
                                    682 ; input:
                                    683 ;    a  character to convert
                                    684 ; output:
                                    685 ;    a  uppercase character
                                    686 ;------------------------------------
      001829                        687 to_upper::
      001829 A1 61            [ 1]  688 	cp a,#'a
      00182B 2A 01            [ 1]  689 	jrpl 1$
      00182D 81               [ 4]  690 0$:	ret
      00182E A1 7A            [ 1]  691 1$: cp a,#'z	
      001830 22 FB            [ 1]  692 	jrugt 0$
      001832 A0 20            [ 1]  693 	sub a,#32
      001834 81               [ 4]  694 	ret
                                    695 	
                                    696 ;------------------------------------
                                    697 ; convert pad content in integer
                                    698 ; input:
                                    699 ;    x		* .asciz to convert
                                    700 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    701 ;    acc24      int24_t
                                    702 ;------------------------------------
                                    703 	; local variables
                           000001   704 	SIGN=1 ; 1 byte, 
                           000002   705 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   706 	TEMP=3 ; 1 byte, temporary storage
                           000004   707 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   708 	VSIZE=5 ; 5 bytes reserved for local storage
      001835                        709 atoi24::
      001835                        710 	_vars VSIZE
      001835 52 05            [ 2]    1     sub sp,#VSIZE 
      001837 1F 04            [ 2]  711 	ldw (XTEMP,sp),x 
                                    712 ; conversion made on xstack 
      001839 4F               [ 1]  713 	clr a 
      00183A 5F               [ 1]  714 	clrw x 
      00183B                        715 	_xpush 
      00183B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00183F 90 F7            [ 1]    2     ld (y),a 
      001841 90 EF 01         [ 2]    3     ldw (1,y),x 
      001844 0F 01            [ 1]  716 	clr (SIGN,sp)
      001846 A6 0A            [ 1]  717 	ld a,#10
      001848 6B 02            [ 1]  718 	ld (BASE,sp),a ; default base decimal
      00184A 1E 04            [ 2]  719 	ldw x,(XTEMP,sp)
      00184C F6               [ 1]  720 	ld a,(x)
      00184D 27 4E            [ 1]  721 	jreq 9$  ; completed if 0
      00184F A1 2D            [ 1]  722 	cp a,#'-
      001851 26 04            [ 1]  723 	jrne 1$
      001853 03 01            [ 1]  724 	cpl (SIGN,sp)
      001855 20 08            [ 2]  725 	jra 2$
      001857 A1 24            [ 1]  726 1$: cp a,#'$
      001859 26 08            [ 1]  727 	jrne 3$
      00185B A6 10            [ 1]  728 	ld a,#16
      00185D 6B 02            [ 1]  729 	ld (BASE,sp),a
      00185F 5C               [ 1]  730 2$:	incw x
      001860 1F 04            [ 2]  731 	ldw (XTEMP,sp),x 
      001862 F6               [ 1]  732 	ld a,(x)
      001863                        733 3$:	; char to digit 
      001863 A1 61            [ 1]  734 	cp a,#'a
      001865 2B 02            [ 1]  735 	jrmi 4$
      001867 A0 20            [ 1]  736 	sub a,#32
      001869 A1 30            [ 1]  737 4$:	cp a,#'0
      00186B 2B 30            [ 1]  738 	jrmi 9$
      00186D A0 30            [ 1]  739 	sub a,#'0
      00186F A1 0A            [ 1]  740 	cp a,#10
      001871 2B 06            [ 1]  741 	jrmi 5$
      001873 A0 07            [ 1]  742 	sub a,#7
      001875 11 02            [ 1]  743 	cp a,(BASE,sp)
      001877 2A 24            [ 1]  744 	jrpl 9$
      001879 6B 03            [ 1]  745 5$:	ld (TEMP,sp),a
      00187B 7B 02            [ 1]  746 	ld a,(BASE,sp)
      00187D CD 02 35         [ 4]  747 	call mulu24_8
      001880                        748 	_xpush 
      001880 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001884 90 F7            [ 1]    2     ld (y),a 
      001886 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      001889 5F               [ 1]  749 	clrw x 
      00188A 7B 03            [ 1]  750 	ld a,(TEMP,sp)
      00188C 02               [ 1]  751 	rlwa x 
      00188D                        752 	_xpush 
      00188D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001891 90 F7            [ 1]    2     ld (y),a 
      001893 90 EF 01         [ 2]    3     ldw (1,y),x 
      001896 CD 01 79         [ 4]  753 	call add24 
      001899 1E 04            [ 2]  754 	ldw x,(XTEMP,sp)
      00189B 20 C2            [ 2]  755 	jra 2$
      00189D 0D 01            [ 1]  756 9$:	tnz (SIGN,sp)
      00189F 27 03            [ 1]  757     jreq atoi_exit
      0018A1 CD 01 FE         [ 4]  758     call neg24
      0018A4                        759 atoi_exit:
      0018A4                        760 	_xpop 
      0018A4 90 F6            [ 1]    1     ld a,(y)
      0018A6 93               [ 1]    2     ldw x,y 
      0018A7 EE 01            [ 2]    3     ldw x,(1,x)
      0018A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018AD C7 00 0C         [ 1]  761 	ld acc24,a 
      0018B0 CF 00 0D         [ 2]  762 	ldw acc16,x  
      0018B3                        763 	_drop VSIZE
      0018B3 5B 05            [ 2]    1     addw sp,#VSIZE 
      0018B5 81               [ 4]  764 	ret
                                    765 
                                    766 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    768 ;;   TINY BASIC  operators,
                                    769 ;;   commands and functions 
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    771 
                                    772 ;---------------------------------
                                    773 ; dictionary search 
                                    774 ; input:
                                    775 ;	X 		dictionary entry point, name field  
                                    776 ;   y		.asciz name to search 
                                    777 ; output:
                                    778 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    779 ;  X		routine address|TK_OP 
                                    780 ;---------------------------------
                           000001   781 	NLEN=1 ; cmd length 
                           000002   782 	XSAVE=2
                           000004   783 	YSAVE=4
                           000005   784 	VSIZE=5 
      0018B6                        785 search_dict::
      0018B6                        786 	_vars VSIZE 
      0018B6 52 05            [ 2]    1     sub sp,#VSIZE 
      0018B8 17 04            [ 2]  787 	ldw (YSAVE,sp),y 
      0018BA                        788 search_next:
      0018BA 1F 02            [ 2]  789 	ldw (XSAVE,sp),x 
                                    790 ; get name length in dictionary	
      0018BC F6               [ 1]  791 	ld a,(x)
      0018BD A4 0F            [ 1]  792 	and a,#0xf 
      0018BF 6B 01            [ 1]  793 	ld (NLEN,sp),a  
      0018C1 16 04            [ 2]  794 	ldw y,(YSAVE,sp) ; name pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0018C3 5C               [ 1]  795 	incw x 
      0018C4                        796 cp_loop:
      0018C4 90 F6            [ 1]  797 	ld a,(y)
      0018C6 27 1B            [ 1]  798 	jreq str_match 
      0018C8 0D 01            [ 1]  799 	tnz (NLEN,sp)
      0018CA 27 0A            [ 1]  800 	jreq no_match  
      0018CC F1               [ 1]  801 	cp a,(x)
      0018CD 26 07            [ 1]  802 	jrne no_match 
      0018CF 90 5C            [ 1]  803 	incw y 
      0018D1 5C               [ 1]  804 	incw x
      0018D2 0A 01            [ 1]  805 	dec (NLEN,sp)
      0018D4 20 EE            [ 2]  806 	jra cp_loop 
      0018D6                        807 no_match:
      0018D6 1E 02            [ 2]  808 	ldw x,(XSAVE,sp) 
      0018D8 1D 00 02         [ 2]  809 	subw x,#2 ; move X to link field
      0018DB 4B 00            [ 1]  810 	push #TK_NONE 
      0018DD FE               [ 2]  811 	ldw x,(x) ; next word link 
      0018DE 84               [ 1]  812 	pop a ; TK_NONE 
      0018DF 27 1D            [ 1]  813 	jreq search_exit  ; not found  
                                    814 ;try next 
      0018E1 20 D7            [ 2]  815 	jra search_next
      0018E3                        816 str_match:
      0018E3 1E 02            [ 2]  817 	ldw x,(XSAVE,sp)
      0018E5 F6               [ 1]  818 	ld a,(X)
      0018E6 6B 01            [ 1]  819 	ld (NLEN,sp),a ; needed to test keyword type  
      0018E8 A4 0F            [ 1]  820 	and a,#NLEN_MASK 
                                    821 ; move x to procedure address field 	
      0018EA 4C               [ 1]  822 	inc a 
      0018EB C7 00 0E         [ 1]  823 	ld acc8,a 
      0018EE 72 5F 00 0D      [ 1]  824 	clr acc16 
      0018F2 72 BB 00 0D      [ 2]  825 	addw x,acc16 
      0018F6 FE               [ 2]  826 	ldw x,(x) ; routine address  
                                    827 ;determine keyword type bits 7:4 
      0018F7 7B 01            [ 1]  828 	ld a,(NLEN,sp)
      0018F9 A4 F0            [ 1]  829 	and a,#KW_TYPE_MASK 
      0018FB 4E               [ 1]  830 	swap a 
      0018FC AB 80            [ 1]  831 	add a,#128
      0018FE                        832 search_exit: 
      0018FE                        833 	_drop VSIZE 
      0018FE 5B 05            [ 2]    1     addw sp,#VSIZE 
      001900 81               [ 4]  834 	ret 
                                    835 
                                    836 ;---------------------
                                    837 ; check if next token
                                    838 ;  is of expected type 
                                    839 ; input:
                                    840 ;   A 		 expected token attribute
                                    841 ;  ouput:
                                    842 ;   none     if fail call syntax_error 
                                    843 ;--------------------
      001901                        844 expect:
      001901 88               [ 1]  845 	push a 
      001902 CD 17 4B         [ 4]  846 	call next_token 
      001905 11 01            [ 1]  847 	cp a,(1,sp)
      001907 27 03            [ 1]  848 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001909 CC 16 42         [ 2]  849 	jp syntax_error
      00190C 84               [ 1]  850 1$: pop a 
      00190D 81               [ 4]  851 	ret 
                                    852 
                                    853 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    854 ; parse arguments list 
                                    855 ; between ()
                                    856 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00190E                        857 func_args:
      00190E A6 06            [ 1]  858 	ld a,#TK_LPAREN 
      001910 CD 19 01         [ 4]  859 	call expect 
                                    860 ; expected to continue in arg_list 
                                    861 ; caller must check for TK_RPAREN 
                                    862 
                                    863 ;-------------------------------
                                    864 ; parse embedded BASIC routines 
                                    865 ; arguments list.
                                    866 ; arg_list::=  expr[','expr]*
                                    867 ; all arguments are of int24_t type
                                    868 ; and pushed on stack 
                                    869 ; input:
                                    870 ;   none
                                    871 ; output:
                                    872 ;   xstack{n}   arguments pushed on xstack
                                    873 ;   A 	number of arguments pushed on xstack  
                                    874 ;--------------------------------
      001913                        875 arg_list:
      001913 4B 00            [ 1]  876 	push #0
      001915 CD 1B 63         [ 4]  877 1$:	call condition 
      001918 4D               [ 1]  878 	tnz a 
      001919 27 12            [ 1]  879 	jreq 7$  
      00191B 0C 01            [ 1]  880 	inc (1,sp)
      00191D CD 17 4B         [ 4]  881 	call next_token 
      001920 A1 08            [ 1]  882 	cp a,#TK_COMMA 
      001922 27 F1            [ 1]  883 	jreq 1$ 
      001924 A1 07            [ 1]  884 	cp a,#TK_RPAREN
      001926 27 05            [ 1]  885 	jreq 7$
      001928                        886 	_unget_token 
      001928 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00192D 84               [ 1]  887 7$:	pop a  
      00192E 81               [ 4]  888 	ret 
                                    889 
                                    890 ;--------------------------------
                                    891 ;   BASIC commnands 
                                    892 ;--------------------------------
                                    893 
                                    894 ;--------------------------------
                                    895 ;  arithmetic and relational 
                                    896 ;  routines
                                    897 ;  operators precedence
                                    898 ;  highest to lowest
                                    899 ;  operators on same row have 
                                    900 ;  same precedence and are executed
                                    901 ;  from left to right.
                                    902 ;	'*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    903 ;   '-','+'
                                    904 ;   '=','>','<','>=','<=','<>','><'
                                    905 ;   '<>' and '><' are equivalent for not equal.
                                    906 ;--------------------------------
                                    907 
                                    908 ;---------------------
                                    909 ; return array element
                                    910 ; address from @(expr)
                                    911 ; input:
                                    912 ;   A 		TK_ARRAY
                                    913 ; output:
                                    914 ;	X 		element address 
                                    915 ;----------------------
      00192F                        916 get_array_element:
      00192F CD 19 0E         [ 4]  917 	call func_args 
      001932 A1 01            [ 1]  918 	cp a,#1
      001934 27 03            [ 1]  919 	jreq 1$
      001936 CC 16 42         [ 2]  920 	jp syntax_error
      001939                        921 1$: _xpop 
      001939 90 F6            [ 1]    1     ld a,(y)
      00193B 93               [ 1]    2     ldw x,y 
      00193C EE 01            [ 2]    3     ldw x,(1,x)
      00193E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    922     ; ignore A, index < 65536 in any case 
                                    923 	; check for bounds 
      001942 C3 00 20         [ 2]  924 	cpw x,array_size 
      001945 23 05            [ 2]  925 	jrule 3$
                                    926 ; bounds {1..array_size}	
      001947 A6 0A            [ 1]  927 2$: ld a,#ERR_BAD_VALUE 
      001949 CC 16 44         [ 2]  928 	jp tb_error 
      00194C 5D               [ 2]  929 3$: tnzw  x
      00194D 27 F8            [ 1]  930 	jreq 2$ 
      00194F 89               [ 2]  931 	pushw x 
      001950 58               [ 2]  932 	sllw x 
      001951 72 FB 01         [ 2]  933 	addw x,(1,sp) ; index*size_of(int24)
      001954 1F 01            [ 2]  934 	ldw (1,sp),x  
      001956 AE 16 90         [ 2]  935 	ldw x,#tib ; array is below tib 
      001959 72 F0 01         [ 2]  936 	subw x,(1,sp)
      00195C                        937 	_drop 2   
      00195C 5B 02            [ 2]    1     addw sp,#2 
      00195E 81               [ 4]  938 	ret 
                                    939 
                                    940 
                                    941 ;***********************************
                                    942 ;   expression parse,execute 
                                    943 ;***********************************
                                    944 ;-----------------------------------
                                    945 ; factor ::= ['+'|'-'|e]  var | @ |
                                    946 ;			 integer | function |
                                    947 ;			 '('relation')' 
                                    948 ; output:
                                    949 ;   A       token attribute 
                                    950 ;   xstack  value  
                                    951 ; ---------------------------------
                           000001   952 	NEG=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                           000001   953 	VSIZE=1
      00195F                        954 factor:
      00195F                        955 	_vars VSIZE 
      00195F 52 01            [ 2]    1     sub sp,#VSIZE 
      001961 0F 01            [ 1]  956 	clr (NEG,sp)
      001963 CD 17 4B         [ 4]  957 	call next_token
      001966 4D               [ 1]  958 	tnz a 
      001967 26 03            [ 1]  959 	jrne 1$ 
      001969 CC 1A 04         [ 2]  960 	jp 22$ 
      00196C A1 10            [ 1]  961 1$:	cp a,#TK_PLUS 
      00196E 27 06            [ 1]  962 	jreq 2$
      001970 A1 11            [ 1]  963 	cp a,#TK_MINUS 
      001972 26 05            [ 1]  964 	jrne 4$ 
      001974 03 01            [ 1]  965 	cpl (NEG,sp)
      001976                        966 2$:	
      001976 CD 17 4B         [ 4]  967 	call next_token
      001979                        968 4$:
      001979 4D               [ 1]  969 	tnz a 
      00197A 26 03            [ 1]  970 	jrne 41$ 
      00197C CC 16 42         [ 2]  971 	jp syntax_error  
      00197F                        972 41$:	
      00197F A1 81            [ 1]  973 	cp a,#TK_IFUNC 
      001981 26 0C            [ 1]  974 	jrne 5$ 
      001983                        975 	_get_code_addr 
      001983 FE               [ 2]    1         ldw x,(x)
      001984 72 5C 00 01      [ 1]    2         inc in 
      001988 72 5C 00 01      [ 1]    3         inc in 
      00198C FD               [ 4]  976 	call (x); result in A:X  
      00198D 20 63            [ 2]  977 	jra 18$ 
      00198F                        978 5$:
      00198F A1 84            [ 1]  979 	cp a,#TK_INTGR
      001991 26 05            [ 1]  980 	jrne 6$
      001993 CD 17 7D         [ 4]  981 	call get_int24 ; A:X
      001996 20 5A            [ 2]  982 	jra 18$
      001998                        983 6$:
      001998 A1 05            [ 1]  984 	cp a,#TK_ARRAY
      00199A 26 05            [ 1]  985 	jrne 7$
      00199C CD 19 2F         [ 4]  986 	call get_array_element
      00199F 20 07            [ 2]  987     jra 71$
      0019A1                        988 7$:
      0019A1 A1 85            [ 1]  989 	cp a,#TK_VAR 
      0019A3 26 08            [ 1]  990 	jrne 8$
      0019A5 CD 17 73         [ 4]  991 	call get_addr 
      0019A8                        992 71$: ; put value in A:X
      0019A8 F6               [ 1]  993 	ld a,(x)
      0019A9 EE 01            [ 2]  994 	ldw x,(1,x)
      0019AB 20 45            [ 2]  995 	jra 18$
      0019AD                        996 8$:
      0019AD A1 03            [ 1]  997 	cp a,#TK_LABEL 
      0019AF 26 10            [ 1]  998 	jrne 9$ 
      0019B1 89               [ 2]  999 	pushw x 
      0019B2 CD 17 64         [ 4] 1000 	call skip_string
      0019B5 85               [ 2] 1001 	popw x 
      0019B6 CD 1D 1C         [ 4] 1002 	call search_const 
      0019B9 5D               [ 2] 1003 	tnzw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0019BA 27 2E            [ 1] 1004 	jreq 16$
      0019BC CD 1C 78         [ 4] 1005 	call get_const_value ; in A:X 
      0019BF 20 31            [ 2] 1006 	jra 18$
      0019C1                       1007 9$: 
      0019C1 A1 82            [ 1] 1008 	cp a,#TK_CFUNC 
      0019C3 26 0E            [ 1] 1009 	jrne 12$
      0019C5                       1010 	_get_code_addr 
      0019C5 FE               [ 2]    1         ldw x,(x)
      0019C6 72 5C 00 01      [ 1]    2         inc in 
      0019CA 72 5C 00 01      [ 1]    3         inc in 
      0019CE FD               [ 4] 1011 	call(x)
      0019CF 5F               [ 1] 1012 	clrw x 
      0019D0 02               [ 1] 1013 	rlwa x  ; char>int24 in A:X 
      0019D1 20 1F            [ 2] 1014 	jra 18$ 	 
      0019D3                       1015 12$:			
      0019D3 A1 06            [ 1] 1016 	cp a,#TK_LPAREN
      0019D5 26 13            [ 1] 1017 	jrne 16$
      0019D7 CD 1A 4A         [ 4] 1018 	call expression
      0019DA A6 07            [ 1] 1019 	ld a,#TK_RPAREN 
      0019DC CD 19 01         [ 4] 1020 	call expect
      0019DF                       1021 	_xpop 
      0019DF 90 F6            [ 1]    1     ld a,(y)
      0019E1 93               [ 1]    2     ldw x,y 
      0019E2 EE 01            [ 2]    3     ldw x,(1,x)
      0019E4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0019E8 20 08            [ 2] 1022 	jra 18$	
      0019EA                       1023 16$:
      0019EA                       1024 	_unget_token 
      0019EA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019EF 4F               [ 1] 1025 	clr a 
      0019F0 20 12            [ 2] 1026 	jra 22$ 
      0019F2                       1027 18$: 
      0019F2 0D 01            [ 1] 1028 	tnz (NEG,sp)
      0019F4 27 03            [ 1] 1029 	jreq 20$
      0019F6 CD 02 10         [ 4] 1030 	call neg_ax   
      0019F9                       1031 20$:
      0019F9                       1032 	_xpush 
      0019F9 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0019FD 90 F7            [ 1]    2     ld (y),a 
      0019FF 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A02 A6 84            [ 1] 1033 	ld a,#TK_INTGR
      001A04                       1034 22$:
      001A04                       1035 	_drop VSIZE
      001A04 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A06 81               [ 4] 1036 	ret
                                   1037 
                                   1038 
                                   1039 ;-----------------------------------
                                   1040 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1041 ; output:
                                   1042 ;   A    	token attribute 
                                   1043 ;	xstack		value 
                                   1044 ;-----------------------------------
                           000001  1045 	MULOP=1
                           000001  1046 	VSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A07                       1047 term:
      001A07                       1048 	_vars VSIZE
      001A07 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1049 ; first factor 	
      001A09 CD 19 5F         [ 4] 1050 	call factor
      001A0C 4D               [ 1] 1051 	tnz a 
      001A0D 27 38            [ 1] 1052 	jreq term_exit  
      001A0F                       1053 term01:	 ; check for  operator '*'|'/'|'%' 
      001A0F CD 17 4B         [ 4] 1054 	call next_token
      001A12 6B 01            [ 1] 1055 	ld (MULOP,sp),a
      001A14 A4 30            [ 1] 1056 	and a,#TK_GRP_MASK
      001A16 A1 20            [ 1] 1057 	cp a,#TK_GRP_MULT
      001A18 27 09            [ 1] 1058 	jreq 1$
      001A1A A6 84            [ 1] 1059 	ld a,#TK_INTGR
      001A1C                       1060 	_unget_token 
      001A1C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A21 20 24            [ 2] 1061 	jra term_exit 
      001A23                       1062 1$:	; got *|/|%
                                   1063 ;second factor
      001A23 CD 19 5F         [ 4] 1064 	call factor
      001A26 4D               [ 1] 1065 	tnz a 
      001A27 26 03            [ 1] 1066 	jrne 2$ 
      001A29 CC 16 42         [ 2] 1067 	jp syntax_error 
      001A2C                       1068 2$: ; select operation 	
      001A2C 7B 01            [ 1] 1069 	ld a,(MULOP,sp) 
      001A2E A1 20            [ 1] 1070 	cp a,#TK_MULT 
      001A30 26 05            [ 1] 1071 	jrne 3$
                                   1072 ; '*' operator
      001A32 CD 02 74         [ 4] 1073 	call mul24 
      001A35 20 D8            [ 2] 1074 	jra term01
      001A37 A1 21            [ 1] 1075 3$: cp a,#TK_DIV 
      001A39 26 05            [ 1] 1076 	jrne 4$ 
                                   1077 ; '/' operator	
      001A3B CD 03 02         [ 4] 1078 	call div24 
      001A3E 20 CF            [ 2] 1079 	jra term01 
      001A40                       1080 4$: ; '%' operator
      001A40 CD 03 9C         [ 4] 1081 	call mod24
      001A43 20 CA            [ 2] 1082 	jra term01 
      001A45                       1083 9$: 
      001A45 A6 84            [ 1] 1084 	ld a,#TK_INTGR
      001A47                       1085 term_exit:
      001A47                       1086 	_drop VSIZE 
      001A47 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A49 81               [ 4] 1087 	ret 
                                   1088 
                                   1089 ;-------------------------------
                                   1090 ;  expr ::= term [['+'|'-'] term]*
                                   1091 ;  result range {-32768..32767}
                                   1092 ;  output:
                                   1093 ;   A    token attribute 
                                   1094 ;   xstack	 result    
                                   1095 ;-------------------------------
                           000001  1096 	OP=1 
                           000001  1097 	VSIZE=1 
      001A4A                       1098 expression:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A4A                       1099 	_vars VSIZE 
      001A4A 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1100 ; first term 	
      001A4C CD 1A 07         [ 4] 1101 	call term
      001A4F 4D               [ 1] 1102 	tnz a 
      001A50 27 2D            [ 1] 1103 	jreq 9$
      001A52                       1104 1$:	; operator '+'|'-'
      001A52 CD 17 4B         [ 4] 1105 	call next_token
      001A55 6B 01            [ 1] 1106 	ld (OP,sp),a 
      001A57 A4 30            [ 1] 1107 	and a,#TK_GRP_MASK
      001A59 A1 10            [ 1] 1108 	cp a,#TK_GRP_ADD 
      001A5B 27 09            [ 1] 1109 	jreq 2$ 
      001A5D                       1110 	_unget_token 
      001A5D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A62 A6 84            [ 1] 1111 	ld a,#TK_INTGR
      001A64 20 19            [ 2] 1112 	jra 9$ 
      001A66                       1113 2$: ; second term 
      001A66 CD 1A 07         [ 4] 1114 	call term
      001A69 4D               [ 1] 1115 	tnz a 
      001A6A 26 03            [ 1] 1116 	jrne 3$
      001A6C CC 16 42         [ 2] 1117 	jp syntax_error
      001A6F                       1118 3$:
      001A6F 7B 01            [ 1] 1119 	ld a,(OP,sp)
      001A71 A1 10            [ 1] 1120 	cp a,#TK_PLUS 
      001A73 26 05            [ 1] 1121 	jrne 4$
                                   1122 ; '+' operator	
      001A75 CD 01 79         [ 4] 1123 	call add24
      001A78 20 D8            [ 2] 1124 	jra 1$ 
      001A7A                       1125 4$:	; '-' operator 
      001A7A CD 01 96         [ 4] 1126 	call sub24
      001A7D 20 D3            [ 2] 1127 	jra 1$
      001A7F                       1128 9$:
      001A7F                       1129 	_drop VSIZE 
      001A7F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A81 81               [ 4] 1130 	ret 
                                   1131 
                                   1132 ;---------------------------------------------
                                   1133 ; rel ::= expr rel_op expr
                                   1134 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1135 ;  relation return  integer , zero is false 
                                   1136 ;  output:
                                   1137 ;	 xstack		value  
                                   1138 ;---------------------------------------------
                           000001  1139 	RELOP=1
                           000001  1140 	VSIZE=1 
      001A82                       1141 relation: 
      001A82                       1142 	_vars VSIZE
      001A82 52 01            [ 2]    1     sub sp,#VSIZE 
      001A84 CD 1A 4A         [ 4] 1143 	call expression
      001A87 4D               [ 1] 1144 	tnz a 
      001A88 27 54            [ 1] 1145 	jreq 9$ 
                                   1146 ; expect rel_op or leave 
      001A8A CD 17 4B         [ 4] 1147 	call next_token 
      001A8D 6B 01            [ 1] 1148 	ld (RELOP,sp),a 
      001A8F A4 30            [ 1] 1149 	and a,#TK_GRP_MASK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001A91 A1 30            [ 1] 1150 	cp a,#TK_GRP_RELOP 
      001A93 27 09            [ 1] 1151 	jreq 2$
      001A95 A6 84            [ 1] 1152 	ld a,#TK_INTGR 
      001A97                       1153 	_unget_token 
      001A97 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A9C 20 40            [ 2] 1154 	jra 9$ 
      001A9E                       1155 2$:	; expect another expression
      001A9E CD 1A 4A         [ 4] 1156 	call expression
      001AA1 4D               [ 1] 1157 	tnz a 
      001AA2 26 03            [ 1] 1158 	jrne 3$
      001AA4 CC 16 42         [ 2] 1159 	jp syntax_error 
      001AA7                       1160 3$: 
      001AA7 CD 01 B3         [ 4] 1161 	call cp24 
      001AAA                       1162 	_xpop  
      001AAA 90 F6            [ 1]    1     ld a,(y)
      001AAC 93               [ 1]    2     ldw x,y 
      001AAD EE 01            [ 2]    3     ldw x,(1,x)
      001AAF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AB3 4D               [ 1] 1163 	tnz a 
      001AB4 2B 08            [ 1] 1164 	jrmi 4$
      001AB6 26 0C            [ 1] 1165 	jrne 5$
      001AB8 35 02 00 0E      [ 1] 1166 	mov acc8,#2 ; i1==i2
      001ABC 20 0A            [ 2] 1167 	jra 6$ 
      001ABE                       1168 4$: ; i1<i2
      001ABE 35 04 00 0E      [ 1] 1169 	mov acc8,#4 
      001AC2 20 04            [ 2] 1170 	jra 6$
      001AC4                       1171 5$: ; i1>i2
      001AC4 35 01 00 0E      [ 1] 1172 	mov acc8,#1  
      001AC8                       1173 6$: ; 0=false, -1=true 
      001AC8 5F               [ 1] 1174 	clrw x 
      001AC9 C6 00 0E         [ 1] 1175 	ld a, acc8  
      001ACC 14 01            [ 1] 1176 	and a,(RELOP,sp)
      001ACE 27 03            [ 1] 1177 	jreq 7$
      001AD0 53               [ 2] 1178 	cplw x 
      001AD1 A6 FF            [ 1] 1179 	ld a,#255 
      001AD3                       1180 7$:	_xpush 
      001AD3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001AD7 90 F7            [ 1]    2     ld (y),a 
      001AD9 90 EF 01         [ 2]    3     ldw (1,y),x 
      001ADC A6 84            [ 1] 1181 	ld a,#TK_INTGR
      001ADE                       1182 9$: 
      001ADE                       1183 	_drop VSIZE
      001ADE 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AE0 81               [ 4] 1184 	ret 
                                   1185 
                                   1186 ;-------------------------------------------
                                   1187 ;  AND factor:  [NOT] relation | (condition)
                                   1188 ;  output:
                                   1189 ;     A      TK_INTGR|0
                                   1190 ;-------------------------------------------
                           000001  1191 	NOT_OP=1
      001AE1                       1192 and_factor:
      001AE1 4B 00            [ 1] 1193 	push #0 
      001AE3 CD 17 4B         [ 4] 1194 0$:	call next_token  
      001AE6 4D               [ 1] 1195 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001AE7 27 25            [ 1] 1196 	jreq 8$ 
      001AE9 A1 87            [ 1] 1197 	cp a,#TK_NOT 
      001AEB 26 04            [ 1] 1198 	jrne 1$ 
      001AED 03 01            [ 1] 1199 	cpl (NOT_OP,sp)
      001AEF 20 F2            [ 2] 1200 	jra 0$ 
      001AF1                       1201 1$:	
      001AF1 A1 06            [ 1] 1202 	cp a,#TK_LPAREN 
      001AF3 26 0A            [ 1] 1203 	jrne 2$
      001AF5 CD 1B 63         [ 4] 1204 	call condition
      001AF8 A6 07            [ 1] 1205 	ld a,#TK_RPAREN 
      001AFA CD 19 01         [ 4] 1206 	call expect
      001AFD 20 08            [ 2] 1207 	jra 3$
      001AFF                       1208 2$: _unget_token 
      001AFF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B04 CD 1A 82         [ 4] 1209 	call relation
      001B07                       1210 3$:
      001B07 0D 01            [ 1] 1211 	tnz (NOT_OP,sp)
      001B09 27 03            [ 1] 1212 	jreq 8$ 
      001B0B CD 01 F5         [ 4] 1213 	call cpl24
      001B0E                       1214 8$:
      001B0E                       1215 	_drop 1  
      001B0E 5B 01            [ 2]    1     addw sp,#1 
      001B10 81               [ 4] 1216     ret 
                                   1217 
                                   1218 
                                   1219 ;--------------------------------------------
                                   1220 ;  AND operator as priority over OR||XOR 
                                   1221 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1222 ;          
                                   1223 ;  output:
                                   1224 ;     A     TK_INTGR|0
                                   1225 ;    xtack   value 
                                   1226 ;--------------------------------------------
      001B11                       1227 and_cond:
      001B11 CD 1A E1         [ 4] 1228 	call and_factor
      001B14 4D               [ 1] 1229 	tnz a 
      001B15 27 4B            [ 1] 1230 	jreq 9$  
      001B17 CD 17 4B         [ 4] 1231 1$: call next_token 
      001B1A 4D               [ 1] 1232 	tnz a 
      001B1B 27 43            [ 1] 1233 	jreq 6$ 
      001B1D A1 88            [ 1] 1234 	cp a,#TK_AND 
      001B1F 27 07            [ 1] 1235 	jreq 3$
      001B21                       1236 	_unget_token 
      001B21 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B26 20 38            [ 2] 1237 	jra 6$ 
      001B28 CD 1A E1         [ 4] 1238 3$:	call and_factor  
      001B2B 4D               [ 1] 1239 	tnz a 
      001B2C 26 03            [ 1] 1240 	jrne 4$
      001B2E CC 16 42         [ 2] 1241 	jp syntax_error 
      001B31                       1242 4$:	
      001B31                       1243 	_xpop 
      001B31 90 F6            [ 1]    1     ld a,(y)
      001B33 93               [ 1]    2     ldw x,y 
      001B34 EE 01            [ 2]    3     ldw x,(1,x)
      001B36 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B3A C7 00 0C         [ 1] 1244 	ld acc24,a 
      001B3D CF 00 0D         [ 2] 1245 	ldw acc16,x
      001B40                       1246 	_xpop 
      001B40 90 F6            [ 1]    1     ld a,(y)
      001B42 93               [ 1]    2     ldw x,y 
      001B43 EE 01            [ 2]    3     ldw x,(1,x)
      001B45 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B49 C4 00 0C         [ 1] 1247 	and a,acc24 
      001B4C 02               [ 1] 1248 	rlwa x 
      001B4D C4 00 0D         [ 1] 1249 	and a,acc16 
      001B50 02               [ 1] 1250 	rlwa x 
      001B51 C4 00 0E         [ 1] 1251 	and a,acc8 
      001B54 02               [ 1] 1252 	rlwa x
      001B55                       1253 	_xpush
      001B55 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B59 90 F7            [ 1]    2     ld (y),a 
      001B5B 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B5E 20 B7            [ 2] 1254 	jra 1$  
      001B60 A6 84            [ 1] 1255 6$: ld a,#TK_INTGR 
      001B62 81               [ 4] 1256 9$:	ret 	 
                                   1257 
                                   1258 
                                   1259 ;--------------------------------------------
                                   1260 ; condition for IF and UNTIL 
                                   1261 ; operators: OR,XOR 
                                   1262 ; format:  and_cond [ OP and_cond ]* 
                                   1263 ; output:
                                   1264 ;    A        INTGR|0 
                                   1265 ;    xstack   value 
                                   1266 ;--------------------------------------------
                           000001  1267 	ATMP=1
                           000002  1268 	OP=2
                           000002  1269 	VSIZE=2 
      001B63                       1270 condition:
      001B63                       1271 	_vars VSIZE 
      001B63 52 02            [ 2]    1     sub sp,#VSIZE 
      001B65 CD 1B 11         [ 4] 1272 	call and_cond
      001B68 4D               [ 1] 1273 	tnz a 
      001B69 27 69            [ 1] 1274 	jreq 9$ 
      001B6B CD 17 4B         [ 4] 1275 1$:	call next_token 
      001B6E A1 89            [ 1] 1276 	cp a,#TK_OR 
      001B70 27 0B            [ 1] 1277 	jreq 2$
      001B72 A1 8A            [ 1] 1278 	cp a,#TK_XOR
      001B74 27 07            [ 1] 1279 	jreq 2$ 
      001B76                       1280 	_unget_token 
      001B76 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B7B 20 55            [ 2] 1281 	jra 8$ 
      001B7D 6B 02            [ 1] 1282 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001B7F CD 1B 11         [ 4] 1283 	call and_cond
      001B82 A1 84            [ 1] 1284 	cp a,#TK_INTGR 
      001B84 27 03            [ 1] 1285 	jreq 3$
      001B86 CC 16 42         [ 2] 1286 	jp syntax_error 
      001B89                       1287 3$:	 
      001B89                       1288 	_xpop  ; rigth arg 
      001B89 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001B8B 93               [ 1]    2     ldw x,y 
      001B8C EE 01            [ 2]    3     ldw x,(1,x)
      001B8E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B92 C7 00 0C         [ 1] 1289 	ld acc24,a 
      001B95 CF 00 0D         [ 2] 1290 	ldw acc16,x 
      001B98                       1291 	_xpop  ; left arg  
      001B98 90 F6            [ 1]    1     ld a,(y)
      001B9A 93               [ 1]    2     ldw x,y 
      001B9B EE 01            [ 2]    3     ldw x,(1,x)
      001B9D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BA1 6B 01            [ 1] 1292 	ld (ATMP,sp),a 
      001BA3 7B 02            [ 1] 1293 	ld a,(OP,sp)
      001BA5 A1 8A            [ 1] 1294 	cp a,#TK_XOR 
      001BA7 27 10            [ 1] 1295 	jreq 5$ 
      001BA9                       1296 4$: ; A:X OR acc24   
      001BA9 7B 01            [ 1] 1297 	ld a,(ATMP,sp)
      001BAB CA 00 0C         [ 1] 1298 	or a,acc24 
      001BAE 02               [ 1] 1299 	rlwa x 
      001BAF CA 00 0D         [ 1] 1300 	or a,acc16 
      001BB2 02               [ 1] 1301 	rlwa x 
      001BB3 CA 00 0E         [ 1] 1302 	or a,acc8 
      001BB6 02               [ 1] 1303 	rlwa x 
      001BB7 20 0E            [ 2] 1304 	jra 6$  
      001BB9                       1305 5$: ; A:X XOR acc24 
      001BB9 7B 01            [ 1] 1306 	ld a,(ATMP,sp)
      001BBB C8 00 0C         [ 1] 1307 	xor a,acc24 
      001BBE 02               [ 1] 1308 	rlwa x 
      001BBF C8 00 0D         [ 1] 1309 	xor a,acc16 
      001BC2 02               [ 1] 1310 	rlwa x 
      001BC3 C8 00 0E         [ 1] 1311 	xor a,acc8 
      001BC6 02               [ 1] 1312 	rlwa x 
      001BC7                       1313 6$: _xpush
      001BC7 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BCB 90 F7            [ 1]    2     ld (y),a 
      001BCD 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BD0 20 99            [ 2] 1314 	jra 1$ 
      001BD2 A6 84            [ 1] 1315 8$:	ld a,#TK_INTGR 
      001BD4                       1316 9$:	_drop VSIZE 
      001BD4 5B 02            [ 2]    1     addw sp,#VSIZE 
      001BD6 81               [ 4] 1317 	ret 
                                   1318 
                                   1319 
                                   1320 ;--------------------------------------------
                                   1321 ; BASIC: HEX 
                                   1322 ; select hexadecimal base for integer print
                                   1323 ;---------------------------------------------
      001BD7                       1324 hex_base:
      001BD7 35 10 00 0A      [ 1] 1325 	mov base,#16 
      001BDB 81               [ 4] 1326 	ret 
                                   1327 
                                   1328 ;--------------------------------------------
                                   1329 ; BASIC: DEC 
                                   1330 ; select decimal base for integer print
                                   1331 ;---------------------------------------------
      001BDC                       1332 dec_base:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001BDC 35 0A 00 0A      [ 1] 1333 	mov base,#10
      001BE0 81               [ 4] 1334 	ret 
                                   1335 
                                   1336 ;------------------------
                                   1337 ; BASIC: FREE 
                                   1338 ; return free size in RAM 
                                   1339 ; output:
                                   1340 ;   A:x		size 
                                   1341 ;--------------------------
      001BE1                       1342 free:
      001BE1 90 89            [ 2] 1343 	pushw y 
      001BE3 4F               [ 1] 1344 	clr a 
      001BE4 AE 16 90         [ 2] 1345 	ldw x,#tib 
      001BE7 90 CE 00 1D      [ 2] 1346 	ldw y,txtend 
      001BEB 90 A3 36 00      [ 2] 1347 	cpw y,#app_space
      001BEF 25 05            [ 1] 1348 	jrult 1$
      001BF1 1D 00 80         [ 2] 1349 	subw x,#free_ram 
      001BF4 20 04            [ 2] 1350 	jra 2$ 
      001BF6                       1351 1$:	
      001BF6 72 B0 00 1D      [ 2] 1352 	subw x,txtend
      001BFA 90 85            [ 2] 1353 2$:	popw y 
      001BFC 81               [ 4] 1354 	ret 
                                   1355 
                                   1356 ;------------------------------
                                   1357 ; BASIC: SIZE 
                                   1358 ; command that print 
                                   1359 ; program start addres and size 
                                   1360 ;------------------------------
      001BFD                       1361 cmd_size:
      001BFD 3B 00 0A         [ 1] 1362 	push base 
      001C00 AE 1E 5A         [ 2] 1363 	ldw x,#PROG_ADDR 
      001C03 CD 09 68         [ 4] 1364 	call puts 
      001C06 CE 00 1B         [ 2] 1365 	ldw x,txtbgn     
      001C09 35 10 00 0A      [ 1] 1366 	mov base,#16 
      001C0D CD 17 93         [ 4] 1367 	call prt_i16
      001C10 32 00 0A         [ 1] 1368 	pop base 
      001C13 AE 1E 6C         [ 2] 1369 	ldw x,#PROG_SIZE 
      001C16 CD 09 68         [ 4] 1370 	call puts 
      001C19 CE 00 1D         [ 2] 1371 	ldw x,txtend 
      001C1C 72 B0 00 1B      [ 2] 1372 	subw x,txtbgn 
      001C20 CD 17 93         [ 4] 1373 	call prt_i16
      001C23 AE 1E 7D         [ 2] 1374 	ldw x,#STR_BYTES 
      001C26 CD 09 68         [ 4] 1375 	call puts  
      001C29 81               [ 4] 1376 	ret 
                                   1377 
                                   1378 
                                   1379 ;------------------------
                                   1380 ; BASIC: UBOUND  
                                   1381 ; return array variable size 
                                   1382 ; and set 'array_size' variable 
                                   1383 ; output:
                                   1384 ;   A:X 	array_size
                                   1385 ;--------------------------
      001C2A                       1386 ubound:
      001C2A CD 1B E1         [ 4] 1387 	call free 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C2D A6 03            [ 1] 1388 	ld a,#CELL_SIZE 
      001C2F 62               [ 2] 1389 	div x,a 
      001C30 CF 00 20         [ 2] 1390 	ldw array_size,x
      001C33 4F               [ 1] 1391 	clr a 
      001C34 81               [ 4] 1392 	ret 
                                   1393 
                                   1394 ;-----------------------------
                                   1395 ; BASIC: LET var=expr 
                                   1396 ; variable assignement 
                                   1397 ; output:
                                   1398 ;   A 		TK_NONE 
                                   1399 ;-----------------------------
      001C35                       1400 let::
      001C35 CD 17 4B         [ 4] 1401 	call next_token 
      001C38 A1 85            [ 1] 1402 	cp a,#TK_VAR 
      001C3A 27 0C            [ 1] 1403 	jreq let_var
      001C3C A1 05            [ 1] 1404 	cp a,#TK_ARRAY 
      001C3E 27 03            [ 1] 1405 	jreq  let_array
      001C40 CC 16 42         [ 2] 1406 	jp syntax_error
      001C43                       1407 let_array:
      001C43 CD 19 2F         [ 4] 1408 	call get_array_element
      001C46 20 03            [ 2] 1409 	jra let_eval 
      001C48                       1410 let_var:
      001C48 CD 17 73         [ 4] 1411 	call get_addr
      001C4B                       1412 let_eval:
      001C4B CF 00 19         [ 2] 1413 	ldw ptr16,x  ; variable address 
      001C4E CD 17 4B         [ 4] 1414 	call next_token 
      001C51 A1 32            [ 1] 1415 	cp a,#TK_EQUAL
      001C53 27 03            [ 1] 1416 	jreq 1$
      001C55 CC 16 42         [ 2] 1417 	jp syntax_error
      001C58                       1418 1$:	
      001C58 CD 1B 63         [ 4] 1419 	call condition   
      001C5B A1 84            [ 1] 1420 	cp a,#TK_INTGR 
      001C5D 27 03            [ 1] 1421 	jreq 2$
      001C5F CC 16 42         [ 2] 1422 	jp syntax_error
      001C62                       1423 2$:	
      001C62                       1424 	_xpop ; value 
      001C62 90 F6            [ 1]    1     ld a,(y)
      001C64 93               [ 1]    2     ldw x,y 
      001C65 EE 01            [ 2]    3     ldw x,(1,x)
      001C67 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C6B                       1425 3$:
      001C6B 72 C7 00 19      [ 4] 1426 	ld [ptr16],a
      001C6F 72 5C 00 1A      [ 1] 1427 	inc ptr8  
      001C73 72 CF 00 19      [ 5] 1428 	ldw [ptr16],x 
      001C77 81               [ 4] 1429 	ret 
                                   1430 
                                   1431 
                                   1432 ;--------------------------
                                   1433 ; return constant value 
                                   1434 ; from it's record address
                                   1435 ; input:
                                   1436 ;	X	*const record 
                                   1437 ; output:
                                   1438 ;   A:X   const  value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1439 ;--------------------------
      001C78                       1440 get_const_value: ; -- i 
      001C78 F6               [ 1] 1441 	ld a,(x) ; record size 
      001C79 A0 03            [ 1] 1442 	sub a,#3 ; * value 
      001C7B 88               [ 1] 1443 	push a 
      001C7C 4B 00            [ 1] 1444 	push #0 
      001C7E 72 FB 01         [ 2] 1445 	addw x,(1,sp)
      001C81 F6               [ 1] 1446 	ld a,(x)
      001C82 EE 01            [ 2] 1447 	ldw x,(1,x)
      001C84                       1448 	_drop 2
      001C84 5B 02            [ 2]    1     addw sp,#2 
      001C86 81               [ 4] 1449 	ret 
                                   1450 
                                   1451 
                                   1452 ;--------------------------
                                   1453 ; list constants in EEPROM 
                                   1454 ; call when using LIST \C 
                                   1455 ;-------------------------
                           000001  1456 	COUNT=1
                           000003  1457 	YTEMP=3
                           000004  1458 	VSIZE=4 
      001C87                       1459 list_const:
      001C87 90 89            [ 2] 1460 	pushw y 
      001C89                       1461 	_vars 4 
      001C89 52 04            [ 2]    1     sub sp,#4 
      001C8B 5F               [ 1] 1462 	clrw x 
      001C8C 1F 01            [ 2] 1463 	ldw (COUNT,sp),x  
      001C8E 90 AE 40 00      [ 2] 1464 	ldw Y,#EEPROM_BASE 
      001C92 90 C3 00 24      [ 2] 1465 1$:	cpw y,free_eeprom 
      001C96 24 35            [ 1] 1466 	jruge 9$
      001C98 17 03            [ 2] 1467     ldw (YTEMP,sp),y 
      001C9A 93               [ 1] 1468 	ldw x,y
      001C9B 5C               [ 1] 1469 	incw x 
      001C9C CD 09 68         [ 4] 1470 	call puts  
      001C9F A6 3D            [ 1] 1471 	ld a,#'= 
      001CA1 CD 09 0B         [ 4] 1472 	call putc 
      001CA4 1E 03            [ 2] 1473 	ldw x,(YTEMP,sp)
      001CA6 CD 1C 78         [ 4] 1474 	call get_const_value 
      001CA9 C7 00 0C         [ 1] 1475 	ld acc24,a 
      001CAC CF 00 0D         [ 2] 1476 	ldw acc16,x 
      001CAF CD 17 AA         [ 4] 1477 	call prt_acc24
      001CB2 A6 0D            [ 1] 1478 	ld a,#CR 
      001CB4 CD 09 0B         [ 4] 1479 	call putc 
      001CB7 1E 01            [ 2] 1480 	ldw x,(COUNT,sp)
      001CB9 5C               [ 1] 1481 	incw x 
      001CBA 1F 01            [ 2] 1482 	ldw (COUNT,sp),x 
      001CBC 72 5F 00 0D      [ 1] 1483 	clr acc16 
      001CC0 16 03            [ 2] 1484 	ldw y,(YTEMP,sp)
      001CC2 90 F6            [ 1] 1485 	ld a,(y)
      001CC4 C7 00 0E         [ 1] 1486 	ld acc8,a
      001CC7 72 B9 00 0D      [ 2] 1487 	addw y,acc16 
      001CCB 20 C5            [ 2] 1488 	jra 1$ 
      001CCD                       1489 9$:	
      001CCD 1E 01            [ 2] 1490 	ldw x,(COUNT,sp)
      001CCF CD 17 93         [ 4] 1491 	call prt_i16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001CD2 AE 1C DD         [ 2] 1492 	ldw x,#CONST_COUNT 
      001CD5 CD 09 68         [ 4] 1493 	call puts 
      001CD8                       1494 	_drop VSIZE 
      001CD8 5B 04            [ 2]    1     addw sp,#VSIZE 
      001CDA 90 85            [ 2] 1495 	popw y 
      001CDC 81               [ 4] 1496 	ret 
                                   1497 
      001CDD 20 63 6F 6E 73 74 61  1498 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1499 
                                   1500 
                                   1501 ;--------------------------
                                   1502 ; BASIC: EEFREE 
                                   1503 ; eeprom_free 
                                   1504 ; search end of data  
                                   1505 ; in EEPROM 
                                   1506 ; input:
                                   1507 ;    none 
                                   1508 ; output:
                                   1509 ;    A:X     address free
                                   1510 ;-------------------------
      001CF3                       1511 func_eefree:
      001CF3 AE 40 00         [ 2] 1512 	ldw x,#EEPROM_BASE 
      001CF6 35 08 00 0E      [ 1] 1513 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001CFA A3 47 F8         [ 2] 1514     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001CFD 24 17            [ 1] 1515 	jruge 8$ ; no free space 
      001CFF F6               [ 1] 1516 2$: ld a,(x)
      001D00 26 0C            [ 1] 1517 	jrne 3$
      001D02 5C               [ 1] 1518 	incw x 
      001D03 72 5A 00 0E      [ 1] 1519 	dec acc8 
      001D07 26 F6            [ 1] 1520 	jrne 2$
      001D09 1D 00 08         [ 2] 1521 	subw x,#8 
      001D0C 20 09            [ 2] 1522 	jra 9$  
      001D0E F6               [ 1] 1523 3$: ld a,(x)
      001D0F 5C               [ 1] 1524 	incw x
      001D10 4D               [ 1] 1525 	tnz a  
      001D11 26 FB            [ 1] 1526 	jrne 3$
      001D13 5A               [ 2] 1527 	decw x   
      001D14 20 E0            [ 2] 1528 	jra 1$ 
      001D16 5F               [ 1] 1529 8$: clrw x ; no free space 
      001D17 4F               [ 1] 1530 9$: clr a 
      001D18 CF 00 24         [ 2] 1531 	ldw free_eeprom,x ; save in system variable 
      001D1B 81               [ 4] 1532 	ret 
                                   1533 
                           000005  1534 CONST_REC_XTRA_BYTES=5 
                                   1535 ;--------------------------
                                   1536 ; search constant name 
                                   1537 ; format of constant record  
                                   1538 ;   .byte record length 
                                   1539 ;         = strlen(name)+5 
                                   1540 ;   .asciz name (variable length)
                                   1541 ;   .int24 value (3 bytes )
                                   1542 ; a constant record use 7+ bytes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



                                   1543 ; constants are saved in EEPROM  
                                   1544 ; input:
                                   1545 ;    X     *name
                                   1546 ; output:
                                   1547 ;    X     address|0
                                   1548 ; use:
                                   1549 ;   A,Y, acc16 
                                   1550 ;-------------------------
                           000001  1551 	NAMEPTR=1 ; target name pointer 
                           000003  1552 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1553 	RECLEN=5  ; record length of target
                           000005  1554 	VSIZE=5
      001D1C                       1555 search_const:
      001D1C 90 89            [ 2] 1556 	pushw y 
      001D1E                       1557 	_vars VSIZE
      001D1E 52 05            [ 2]    1     sub sp,#VSIZE 
      001D20 72 5F 00 0D      [ 1] 1558 	clr acc16 
      001D24 CD 13 86         [ 4] 1559 	call strlen 
      001D27 AB 05            [ 1] 1560 	add a,#CONST_REC_XTRA_BYTES
      001D29 6B 05            [ 1] 1561 	ld (RECLEN,sp),a    
      001D2B 1F 01            [ 2] 1562 	ldw (NAMEPTR,sp),x
      001D2D 90 AE 40 00      [ 2] 1563 	ldw y,#EEPROM_BASE 
      001D31 1E 01            [ 2] 1564 1$:	ldw x,(NAMEPTR,sp)
      001D33 17 03            [ 2] 1565 	ldw (EEPTR,sp),y
      001D35 90 C3 00 24      [ 2] 1566 	cpw y, free_eeprom 
      001D39 24 1A            [ 1] 1567 	jruge 7$ ; no match found 
      001D3B 90 F6            [ 1] 1568 	ld a,(y)
      001D3D 11 05            [ 1] 1569 	cp a,(RECLEN,sp)
      001D3F 26 07            [ 1] 1570 	jrne 2$ 
      001D41 90 5C            [ 1] 1571 	incw y 
      001D43 CD 13 91         [ 4] 1572 	call strcmp
      001D46 26 11            [ 1] 1573 	jrne 8$ ; match found 
      001D48                       1574 2$: ; skip this one 	
      001D48 16 03            [ 2] 1575 	ldW Y,(EEPTR,sp)
      001D4A 90 F6            [ 1] 1576 	ld a,(y)
      001D4C C7 00 0E         [ 1] 1577 	ld acc8,a 
      001D4F 72 B9 00 0D      [ 2] 1578 	addw y,acc16 
      001D53 20 DC            [ 2] 1579 	jra 1$  
      001D55                       1580 7$: ; no match found 
      001D55 0F 03            [ 1] 1581 	clr (EEPTR,sp)
      001D57 0F 04            [ 1] 1582 	clr (EEPTR+1,sp)
      001D59                       1583 8$: ; match found 
      001D59 1E 03            [ 2] 1584 	ldw x,(EEPTR,sp) ; record address 
      001D5B                       1585 9$:	_DROP VSIZE
      001D5B 5B 05            [ 2]    1     addw sp,#VSIZE 
      001D5D 90 85            [ 2] 1586 	 popw y 
      001D5F 81               [ 4] 1587 	 ret 
                                   1588 
                                   1589 
                                   1590 ;--------------------------------------------
                                   1591 ; BASIC: CONST name=value [, name=value]*
                                   1592 ; define constant(s) saved in EEPROM
                                   1593 ;--------------------------------------------
                           000001  1594 	CNAME=1 
                           000003  1595 	BUFPTR=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                           000005  1596 	RECLEN=5
                           000006  1597 	UPDATE=6
                           000007  1598 	YSAVE=7
                           000008  1599 	VSIZE=8 
      001D60                       1600 cmd_const:
      001D60 90 89            [ 2] 1601 	pushw y 
      001D62                       1602 	_vars VSIZE 
      001D62 52 08            [ 2]    1     sub sp,#VSIZE 
      001D64 0F 06            [ 1] 1603 	clr (UPDATE,sp)
      001D66 CD 17 4B         [ 4] 1604 	call next_token 
      001D69 A1 04            [ 1] 1605 	cp a,#TK_CHAR 
      001D6B 26 0D            [ 1] 1606 	jrne 0$
      001D6D CD 17 8D         [ 4] 1607 	call get_char 
      001D70 A4 DF            [ 1] 1608 	and a,#0xDF 
      001D72 A1 55            [ 1] 1609 	cp a,#'U 
      001D74 26 08            [ 1] 1610 	jrne 1$
      001D76 03 06            [ 1] 1611 	cpl (UPDATE,sp)
      001D78 20 07            [ 2] 1612 	jra const_loop 
      001D7A A1 03            [ 1] 1613 0$: cp a,#TK_LABEL 
      001D7C 27 08            [ 1] 1614 	jreq cloop_1
      001D7E CC 16 42         [ 2] 1615 1$: jp syntax_error
      001D81                       1616 const_loop: 
      001D81 A6 03            [ 1] 1617 	ld a,#TK_LABEL 
      001D83 CD 19 01         [ 4] 1618 	call expect  
      001D86                       1619 cloop_1: 
      001D86 1F 01            [ 2] 1620 	ldw (CNAME,sp),x ; *const_name
      001D88 CD 17 64         [ 4] 1621 	call skip_string
      001D8B 1E 01            [ 2] 1622 	ldw x,(CNAME,sp)
      001D8D CD 13 86         [ 4] 1623 	call strlen  
      001D90 AB 05            [ 1] 1624 	add a,#CONST_REC_XTRA_BYTES 
      001D92 6B 05            [ 1] 1625 	ld (RECLEN,sp),a 
                                   1626 ; copy name in buffer  
      001D94 16 01            [ 2] 1627 	ldw y,(CNAME,sp) 
      001D96 AE 16 90         [ 2] 1628 	ldw x,#tib  
      001D99 7B 05            [ 1] 1629 	ld a,(RECLEN,sp)
      001D9B F7               [ 1] 1630 	ld (x),a 
      001D9C 5C               [ 1] 1631 	incw x  
      001D9D CD 13 A2         [ 4] 1632 	call strcpy 
      001DA0 1F 03            [ 2] 1633 	ldw (BUFPTR,sp),x 
                                   1634 ; x not updated by strcpy 
                                   1635 ; BUFPTR must be incremented 
                                   1636 ; to point after name 
      001DA2 5F               [ 1] 1637 	clrw x 
      001DA3 7B 05            [ 1] 1638 	ld a,(RECLEN,sp)
      001DA5 A0 04            [ 1] 1639 	sub a,#CONST_REC_XTRA_BYTES-1
      001DA7 97               [ 1] 1640 	ld xl,a  
      001DA8 72 FB 03         [ 2] 1641 	addw x,(BUFPTR,sp)
      001DAB 1F 03            [ 2] 1642 	ldw (BUFPTR,sp),x 
      001DAD A6 32            [ 1] 1643 	ld a,#TK_EQUAL 
      001DAF CD 19 01         [ 4] 1644 	call expect 
      001DB2 16 07            [ 2] 1645 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001DB4 CD 1A 4A         [ 4] 1646 	call expression 
      001DB7 A1 84            [ 1] 1647 	cp a,#TK_INTGR 
      001DB9 27 03            [ 1] 1648 	jreq 5$ 
      001DBB CC 16 42         [ 2] 1649 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001DBE                       1650 5$:	_xpop 
      001DBE 90 F6            [ 1]    1     ld a,(y)
      001DC0 93               [ 1]    2     ldw x,y 
      001DC1 EE 01            [ 2]    3     ldw x,(1,x)
      001DC3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001DC7 17 07            [ 2] 1651 	ldw (YSAVE,sp),y ; save xtack pointer 
      001DC9 16 03            [ 2] 1652 	ldw y,(BUFPTR,sp)
      001DCB 90 F7            [ 1] 1653 	ld (y),a 
      001DCD 90 EF 01         [ 2] 1654 	ldw (1,y),x 
                                   1655 ; record completed in buffer 
                                   1656 ; check if constant already exist 
                                   1657 ; if exist and \U option then update  
      001DD0 72 5F 00 18      [ 1] 1658 	clr farptr 
      001DD4 1E 01            [ 2] 1659 	ldw x,(CNAME,sp)
      001DD6 CD 1D 1C         [ 4] 1660 	call search_const 
      001DD9 5D               [ 2] 1661 	tnzw x 
      001DDA 27 06            [ 1] 1662 	jreq 6$ ; new constant  
      001DDC 0D 06            [ 1] 1663 	tnz (UPDATE,sp)
      001DDE 27 1F            [ 1] 1664 	jreq 8$ 
      001DE0 20 03            [ 2] 1665 	jra 7$	
      001DE2                       1666 6$:	
      001DE2 CE 00 24         [ 2] 1667 	ldw x,free_eeprom  
      001DE5                       1668 7$:	
      001DE5 CF 00 19         [ 2] 1669 	ldw farptr+1,x 
      001DE8 AE 16 90         [ 2] 1670 	ldw x,#tib 
      001DEB 7B 05            [ 1] 1671 	ld a,(RECLEN,sp)
      001DED CD 08 4C         [ 4] 1672 	call write_nbytes
      001DF0 0D 06            [ 1] 1673 	tnz (UPDATE,sp)
      001DF2 26 0B            [ 1] 1674 	jrne 8$ ; not a new constant, don't update free_eeprom
                                   1675 ; update free_eeprom 
      001DF4 5F               [ 1] 1676 	clrw x 
      001DF5 7B 05            [ 1] 1677 	ld a,(RECLEN,sp)
      001DF7 97               [ 1] 1678 	ld xl,a 
      001DF8 72 BB 00 24      [ 2] 1679 	addw x,free_eeprom 
      001DFC CF 00 24         [ 2] 1680 	ldw free_eeprom,x
      001DFF                       1681 8$: ; check for next constant 
      001DFF CD 17 4B         [ 4] 1682 	call next_token 
      001E02 A1 08            [ 1] 1683 	cp a,#TK_COMMA 
      001E04 26 03            [ 1] 1684 	jrne 9$ ; no other constant 
      001E06 CC 1D 81         [ 2] 1685 	jp const_loop 
      001E09                       1686 9$: 
      001E09                       1687 	_unget_token    
      001E09 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E0E                       1688 10$: 
      001E0E                       1689 	_drop VSIZE 
      001E0E 5B 08            [ 2]    1     addw sp,#VSIZE 
      001E10 90 85            [ 2] 1690 	popw y ; restore xstack pointer 
      001E12 81               [ 4] 1691 	ret 
                                   1692 
                                   1693 
                                   1694 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1695 ; return program size 
                                   1696 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E13                       1697 prog_size:
      001E13 CE 00 1D         [ 2] 1698 	ldw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E16 72 B0 00 1B      [ 2] 1699 	subw x,txtbgn 
      001E1A 81               [ 4] 1700 	ret 
                                   1701 
                                   1702 ;----------------------------
                                   1703 ; print program information 
                                   1704 ;---------------------------
      001E1B                       1705 program_info: 
      001E1B AE 1E 5A         [ 2] 1706 	ldw x,#PROG_ADDR 
      001E1E CD 09 68         [ 4] 1707 	call puts 
      001E21 CE 00 1B         [ 2] 1708 	ldw x,txtbgn 
      001E24 35 10 00 0A      [ 1] 1709 	mov base,#16 
      001E28 CD 17 93         [ 4] 1710 	call prt_i16
      001E2B 35 0A 00 0A      [ 1] 1711 	mov base,#10  
      001E2F AE 1E 6C         [ 2] 1712 	ldw x,#PROG_SIZE
      001E32 CD 09 68         [ 4] 1713 	call puts 
      001E35 CD 1E 13         [ 4] 1714 	call prog_size 
      001E38 CD 17 93         [ 4] 1715 	call prt_i16 
      001E3B AE 1E 7D         [ 2] 1716 	ldw x,#STR_BYTES 
      001E3E CD 09 68         [ 4] 1717 	call puts
      001E41 CE 00 1B         [ 2] 1718 	ldw x,txtbgn
      001E44 A3 36 04         [ 2] 1719 	cpw x,#app 
      001E47 25 05            [ 1] 1720 	jrult 2$
      001E49 AE 1E 84         [ 2] 1721 	ldw x,#FLASH_MEM 
      001E4C 20 03            [ 2] 1722 	jra 3$
      001E4E AE 1E 95         [ 2] 1723 2$: ldw x,#RAM_MEM 	 
      001E51 CD 09 68         [ 4] 1724 3$:	call puts 
      001E54 A6 0D            [ 1] 1725 	ld a,#CR 
      001E56 CD 09 0B         [ 4] 1726 	call putc
      001E59 81               [ 4] 1727 	ret 
                                   1728 
      001E5A 70 72 6F 67 72 61 6D  1729 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E6C 2C 20 70 72 6F 67 72  1730 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001E7D 20 62 79 74 65 73 00  1731 STR_BYTES: .asciz " bytes" 
      001E84 20 69 6E 20 46 4C 41  1732 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001E95 20 69 6E 20 52 41 4D  1733 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1734 
                                   1735 
                                   1736 ;----------------------------
                                   1737 ; BASIC: LIST [[start][,end]]
                                   1738 ; list program lines 
                                   1739 ; form start to end 
                                   1740 ; if empty argument list then 
                                   1741 ; list all.
                                   1742 ;----------------------------
                           000001  1743 	FIRST=1
                           000003  1744 	LAST=3 
                           000005  1745 	LN_PTR=5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                           000006  1746 	VSIZE=6 
      001EA4                       1747 list:
      001EA4 72 01 00 22 05   [ 2] 1748 	btjf flags,#FRUN,0$
      001EA9 A6 07            [ 1] 1749 	ld a,#ERR_CMD_ONLY
      001EAB CC 16 44         [ 2] 1750 	jp tb_error
      001EAE                       1751 0$:	 
      001EAE CD 17 4B         [ 4] 1752 	call next_token 
      001EB1 A1 04            [ 1] 1753 	cp a,#TK_CHAR 
      001EB3 26 10            [ 1] 1754 	jrne 2$
      001EB5 CD 17 8D         [ 4] 1755 	call get_char 
      001EB8 A4 DF            [ 1] 1756 	and a,#0xDF 
      001EBA A1 43            [ 1] 1757 	cp a,#'C 
      001EBC 26 04            [ 1] 1758 	jrne 1$
      001EBE CD 1C 87         [ 4] 1759 	call list_const
      001EC1 81               [ 4] 1760 	ret 
      001EC2 CC 16 42         [ 2] 1761 1$: jp syntax_error 
      001EC5                       1762 2$:	_unget_token 
      001EC5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ECA CD 1E 13         [ 4] 1763 	call prog_size 
      001ECD 22 01            [ 1] 1764 	jrugt 3$
      001ECF 81               [ 4] 1765 	ret 
      001ED0                       1766 3$: _vars VSIZE
      001ED0 52 06            [ 2]    1     sub sp,#VSIZE 
      001ED2 CE 00 1B         [ 2] 1767 	ldw x,txtbgn 
      001ED5 1F 05            [ 2] 1768 	ldw (LN_PTR,sp),x 
      001ED7 FE               [ 2] 1769 	ldw x,(x) 
      001ED8 1F 01            [ 2] 1770 	ldw (FIRST,sp),x ; list from first line 
      001EDA AE 7F FF         [ 2] 1771 	ldw x,#MAX_LINENO ; biggest line number 
      001EDD 1F 03            [ 2] 1772 	ldw (LAST,sp),x 
      001EDF CD 19 13         [ 4] 1773 	call arg_list
      001EE2 4D               [ 1] 1774 	tnz a
      001EE3 27 31            [ 1] 1775 	jreq list_loop 
      001EE5 A1 02            [ 1] 1776 	cp a,#2 
      001EE7 27 07            [ 1] 1777 	jreq 4$
      001EE9 A1 01            [ 1] 1778 	cp a,#1 
      001EEB 27 06            [ 1] 1779 	jreq first_line 
      001EED CC 16 42         [ 2] 1780 	jp syntax_error 
      001EF0 85               [ 2] 1781 4$:	popw x 
      001EF1 1F 05            [ 2] 1782 	ldw (LAST+2,sp),x 
      001EF3                       1783 first_line:
      001EF3 85               [ 2] 1784 	popw x
      001EF4 1F 01            [ 2] 1785 	ldw (FIRST,sp),x 
      001EF6                       1786 lines_skip:
      001EF6 CE 00 1B         [ 2] 1787 	ldw x,txtbgn
      001EF9 1F 05            [ 2] 1788 2$:	ldw (LN_PTR,sp),x 
      001EFB C3 00 1D         [ 2] 1789 	cpw x,txtend 
      001EFE 2A 38            [ 1] 1790 	jrpl list_exit 
      001F00 FE               [ 2] 1791 	ldw x,(x) ;line# 
      001F01 13 01            [ 2] 1792 	cpw x,(FIRST,sp)
      001F03 2A 11            [ 1] 1793 	jrpl list_loop 
      001F05 1E 05            [ 2] 1794 	ldw x,(LN_PTR,sp) 
      001F07 E6 02            [ 1] 1795 	ld a,(2,x)
      001F09 C7 00 0E         [ 1] 1796 	ld acc8,a 
      001F0C 72 5F 00 0D      [ 1] 1797 	clr acc16 
      001F10 72 BB 00 0D      [ 2] 1798 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001F14 20 E3            [ 2] 1799 	jra 2$ 
                                   1800 ; print loop
      001F16                       1801 list_loop:
      001F16 1E 05            [ 2] 1802 	ldw x,(LN_PTR,sp)
      001F18 E6 02            [ 1] 1803 	ld a,(2,x) 
      001F1A CD 1F 8D         [ 4] 1804 	call prt_basic_line
      001F1D 1E 05            [ 2] 1805 	ldw x,(LN_PTR,sp)
      001F1F E6 02            [ 1] 1806 	ld a,(2,x)
      001F21 C7 00 0E         [ 1] 1807 	ld acc8,a 
      001F24 72 5F 00 0D      [ 1] 1808 	clr acc16 
      001F28 72 BB 00 0D      [ 2] 1809 	addw x,acc16
      001F2C C3 00 1D         [ 2] 1810 	cpw x,txtend 
      001F2F 2A 07            [ 1] 1811 	jrpl list_exit
      001F31 1F 05            [ 2] 1812 	ldw (LN_PTR,sp),x
      001F33 FE               [ 2] 1813 	ldw x,(x)
      001F34 13 03            [ 2] 1814 	cpw x,(LAST,sp)  
      001F36 2F DE            [ 1] 1815 	jrslt list_loop
      001F38                       1816 list_exit:
      001F38 55 00 03 00 01   [ 1] 1817 	mov in,count 
      001F3D AE 16 E0         [ 2] 1818 	ldw x,#pad 
      001F40 CF 00 04         [ 2] 1819 	ldw basicptr,x 
      001F43                       1820 	_drop VSIZE 
      001F43 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F45 CD 1E 1B         [ 4] 1821 	call program_info 
      001F48 81               [ 4] 1822 	ret
                                   1823 
                                   1824 
                                   1825 ;--------------------------
                                   1826 ; BASIC: EDIT 
                                   1827 ;  copy program in FLASH 
                                   1828 ;  to RAM for edition 
                                   1829 ;-------------------------
      001F49                       1830 edit:
      001F49 CD 27 90         [ 4] 1831 	call qsign 
      001F4C 27 07            [ 1] 1832 	jreq 1$ 
      001F4E AE 1F 76         [ 2] 1833 	ldw x,#NOT_SAVED 
      001F51 CD 09 68         [ 4] 1834 	call puts 
      001F54 81               [ 4] 1835 	ret 
      001F55                       1836 1$: 
      001F55 90 AE 36 00      [ 2] 1837 	ldw y,#app_sign ; source address 
      001F59 CE 36 02         [ 2] 1838     ldw x,app_size  
      001F5C 1C 00 04         [ 2] 1839 	addw x,#4 
      001F5F CF 00 0D         [ 2] 1840 	ldw acc16,x  ; bytes to copy 
      001F62 AE 00 7C         [ 2] 1841 	ldw x,#rsign ; destination address 
      001F65 CD 13 B2         [ 4] 1842 	call move  
      001F68 AE 00 80         [ 2] 1843 	ldw x,#free_ram 
      001F6B CF 00 1B         [ 2] 1844 	ldw txtbgn,x 
      001F6E 72 BB 00 7E      [ 2] 1845 	addw x,rsize  
      001F72 CF 00 1D         [ 2] 1846 	ldw txtend,x 
      001F75 81               [ 4] 1847 	ret 
                                   1848 
      001F76 4E 6F 20 61 70 70 6C  1849 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   1850 
                                   1851 
                                   1852 ;--------------------------
                                   1853 ; decompile line from token list
                                   1854 ; and print it. 
                                   1855 ; input:
                                   1856 ;   A       stop at this position 
                                   1857 ;   X 		pointer at line
                                   1858 ; output:
                                   1859 ;   none 
                                   1860 ;--------------------------	
      001F8D                       1861 prt_basic_line:
      001F8D 90 89            [ 2] 1862 	pushw y 
      001F8F C7 00 03         [ 1] 1863 	ld count,a 
      001F92 E6 02            [ 1] 1864 	ld a,(2,x)
      001F94 C1 00 03         [ 1] 1865 	cp a,count 
      001F97 2A 03            [ 1] 1866 	jrpl 1$ 
      001F99 C7 00 03         [ 1] 1867 	ld count,a 
      001F9C CF 00 04         [ 2] 1868 1$:	ldw basicptr,x 
      001F9F 90 AE 16 90      [ 2] 1869 	ldw y,#tib  
      001FA3 CD 11 A2         [ 4] 1870 	call decompile 
      001FA6 CD 09 68         [ 4] 1871 	call puts 
      001FA9 A6 0D            [ 1] 1872 	ld a,#CR 
      001FAB CD 09 0B         [ 4] 1873 	call putc 
      001FAE 90 85            [ 2] 1874 	popw y 
      001FB0 81               [ 4] 1875 	ret 
                                   1876 
                                   1877 
                                   1878 ;---------------------------------
                                   1879 ; BASIC: PRINT|? arg_list 
                                   1880 ; print values from argument list
                                   1881 ;----------------------------------
                           000001  1882 	CCOMMA=1
                           000001  1883 	VSIZE=1
      001FB1                       1884 print:
      001FB1                       1885 	_vars VSIZE 
      001FB1 52 01            [ 2]    1     sub sp,#VSIZE 
      001FB3                       1886 reset_comma:
      001FB3 0F 01            [ 1] 1887 	clr (CCOMMA,sp)
      001FB5                       1888 prt_loop:
      001FB5 CD 17 4B         [ 4] 1889 	call next_token
      001FB8 A1 02            [ 1] 1890 	cp a,#CMD_END 
      001FBA 25 08            [ 1] 1891 	jrult 0$
      001FBC A1 0A            [ 1] 1892 	cp a,#TK_COLON 
      001FBE 27 04            [ 1] 1893 	jreq 0$
      001FC0 A1 80            [ 1] 1894 	cp a,#TK_CMD
      001FC2 26 07            [ 1] 1895 	jrne 10$
      001FC4                       1896 0$:
      001FC4                       1897 	_unget_token 
      001FC4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FC9 20 63            [ 2] 1898 	jra 8$ 
      001FCB                       1899 10$:	
      001FCB A1 02            [ 1] 1900 	cp a,#TK_QSTR
      001FCD 27 12            [ 1] 1901 	jreq 1$
      001FCF A1 04            [ 1] 1902 	cp a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      001FD1 27 1B            [ 1] 1903 	jreq 2$ 
      001FD3 A1 82            [ 1] 1904 	cp a,#TK_CFUNC 
      001FD5 27 1F            [ 1] 1905 	jreq 3$
      001FD7 A1 08            [ 1] 1906 	cp a,#TK_COMMA 
      001FD9 27 2A            [ 1] 1907 	jreq 4$
      001FDB A1 09            [ 1] 1908 	cp a,#TK_SHARP 
      001FDD 27 2A            [ 1] 1909 	jreq 5$
      001FDF 20 3D            [ 2] 1910 	jra 7$ 
      001FE1                       1911 1$:	; print string 
      001FE1 CD 09 68         [ 4] 1912 	call puts
      001FE4 5C               [ 1] 1913 	incw x
      001FE5 72 B0 00 04      [ 2] 1914 	subw x,basicptr 
      001FE9 CF 00 00         [ 2] 1915 	ldw in.w,x  
      001FEC 20 C5            [ 2] 1916 	jra reset_comma
      001FEE                       1917 2$:	; print character 
      001FEE CD 17 8D         [ 4] 1918 	call get_char 
      001FF1 CD 09 0B         [ 4] 1919 	call putc 
      001FF4 20 BD            [ 2] 1920 	jra reset_comma 
      001FF6                       1921 3$: ; print character function value  	
      001FF6                       1922 	_get_code_addr 
      001FF6 FE               [ 2]    1         ldw x,(x)
      001FF7 72 5C 00 01      [ 1]    2         inc in 
      001FFB 72 5C 00 01      [ 1]    3         inc in 
      001FFF FD               [ 4] 1923 	call (x)
      002000 CD 09 0B         [ 4] 1924 	call putc
      002003 20 AE            [ 2] 1925 	jra reset_comma 
      002005                       1926 4$: ; set comma state 
      002005 03 01            [ 1] 1927 	cpl (CCOMMA,sp)
      002007 20 AC            [ 2] 1928 	jra prt_loop   
      002009                       1929 5$: ; # character must be followed by an integer   
      002009 CD 17 4B         [ 4] 1930 	call next_token
      00200C A1 84            [ 1] 1931 	cp a,#TK_INTGR 
      00200E 27 03            [ 1] 1932 	jreq 6$
      002010 CC 16 42         [ 2] 1933 	jp syntax_error 
      002013                       1934 6$: ; set tab width
      002013 CD 17 7D         [ 4] 1935 	call get_int24 
      002016 9F               [ 1] 1936 	ld a,xl 
      002017 A4 0F            [ 1] 1937 	and a,#15 
      002019 C7 00 23         [ 1] 1938 	ld tab_width,a 
      00201C 20 95            [ 2] 1939 	jra reset_comma 
      00201E                       1940 7$:	
      00201E                       1941 	_unget_token 
      00201E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002023 CD 1B 63         [ 4] 1942 	call condition
      002026 4D               [ 1] 1943 	tnz a 
      002027 27 05            [ 1] 1944 	jreq 8$    
      002029 CD 17 B8         [ 4] 1945     call print_top
      00202C 20 85            [ 2] 1946 	jra reset_comma 
      00202E                       1947 8$:
      00202E 0D 01            [ 1] 1948 	tnz (CCOMMA,sp)
      002030 26 05            [ 1] 1949 	jrne 9$
      002032 A6 0D            [ 1] 1950 	ld a,#CR 
      002034 CD 09 0B         [ 4] 1951     call putc 
      002037                       1952 9$:	_drop VSIZE 
      002037 5B 01            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002039 81               [ 4] 1953 	ret 
                                   1954 
                                   1955 ;----------------------
                                   1956 ; 'save_context' and
                                   1957 ; 'rest_context' must be 
                                   1958 ; called at the same 
                                   1959 ; call stack depth 
                                   1960 ; i.e. SP must have the 
                                   1961 ; save value at  
                                   1962 ; entry point of both 
                                   1963 ; routine. 
                                   1964 ;---------------------
                           000004  1965 	CTXT_SIZE=4 ; size of saved data 
                                   1966 ;--------------------
                                   1967 ; save current BASIC
                                   1968 ; interpreter context 
                                   1969 ; on stack 
                                   1970 ;--------------------
      00203A                       1971 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00203A                       1972 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00203A                       1973 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      00203A                       1974 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      00203A                       1975 save_context:
      00203A CE 00 04         [ 2] 1976 	ldw x,basicptr 
      00203D 1F 03            [ 2] 1977 	ldw (BPTR,sp),x
      00203F C6 00 01         [ 1] 1978 	ld a,in 
      002042 6B 05            [ 1] 1979 	ld (IN,sp),a
      002044 C6 00 03         [ 1] 1980 	ld a,count 
      002047 6B 06            [ 1] 1981 	ld (CNT,sp),a  
      002049 81               [ 4] 1982 	ret
                                   1983 
                                   1984 ;-----------------------
                                   1985 ; restore previously saved 
                                   1986 ; BASIC interpreter context 
                                   1987 ; from stack 
                                   1988 ;-------------------------
      00204A                       1989 rest_context:
      00204A 1E 03            [ 2] 1990 	ldw x,(BPTR,sp)
      00204C CF 00 04         [ 2] 1991 	ldw basicptr,x 
      00204F 7B 05            [ 1] 1992 	ld a,(IN,sp)
      002051 C7 00 01         [ 1] 1993 	ld in,a
      002054 7B 06            [ 1] 1994 	ld a,(CNT,sp)
      002056 C7 00 03         [ 1] 1995 	ld count,a  
      002059 81               [ 4] 1996 	ret
                                   1997 
                                   1998 
                                   1999 
                                   2000 ;------------------------------------------
                                   2001 ; BASIC: INPUT [string]var[,[string]var]
                                   2002 ; input value in variables 
                                   2003 ; [string] optionally can be used as prompt 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2004 ;-----------------------------------------
                           000001  2005 	CX_BPTR=1
                           000003  2006 	CX_IN=3
                           000004  2007 	CX_CNT=4
                           000005  2008 	SKIP=5
                           000005  2009 	VSIZE=5
      00205A                       2010 input_var:
      00205A 90 89            [ 2] 2011 	pushw y 
      00205C                       2012 	_vars VSIZE 
      00205C 52 05            [ 2]    1     sub sp,#VSIZE 
      00205E                       2013 input_loop:
      00205E 0F 05            [ 1] 2014 	clr (SKIP,sp)
      002060 CD 17 4B         [ 4] 2015 	call next_token 
      002063 A1 02            [ 1] 2016 	cp a,#TK_QSTR 
      002065 26 10            [ 1] 2017 	jrne 1$ 
      002067 CD 09 68         [ 4] 2018 	call puts 
      00206A 5C               [ 1] 2019 	incw x 
      00206B 72 B0 00 04      [ 2] 2020 	subw x,basicptr 
      00206F CF 00 00         [ 2] 2021 	ldw in.w,x 
      002072 03 05            [ 1] 2022 	cpl (SKIP,sp)
      002074 CD 17 4B         [ 4] 2023 	call next_token 
      002077 A1 85            [ 1] 2024 1$: cp a,#TK_VAR  
      002079 27 03            [ 1] 2025 	jreq 2$ 
      00207B CC 16 42         [ 2] 2026 	jp syntax_error
      00207E CD 17 73         [ 4] 2027 2$:	call get_addr
      002081 CF 00 19         [ 2] 2028 	ldw ptr16,x 
      002084 0D 05            [ 1] 2029 	tnz (SKIP,sp)
      002086 26 06            [ 1] 2030 	jrne 21$ 
      002088 CD 11 98         [ 4] 2031 	call var_name 
      00208B CD 09 0B         [ 4] 2032 	call putc   
      00208E                       2033 21$:
      00208E A6 3A            [ 1] 2034 	ld a,#':
      002090 CD 09 0B         [ 4] 2035 	call putc 
      002093 CD 20 3A         [ 4] 2036 	call save_context 
      002096 72 5F 00 03      [ 1] 2037 	clr count  
      00209A CD 0A 6D         [ 4] 2038 	call readln 
      00209D AE 16 90         [ 2] 2039 	ldw x,#tib 
      0020A0 3B 00 03         [ 1] 2040 	push count
      0020A3 4B 00            [ 1] 2041 	push #0 
      0020A5 72 FB 01         [ 2] 2042 	addw x,(1,sp)
      0020A8 5C               [ 1] 2043 	incw x 
      0020A9                       2044 	_drop 2 
      0020A9 5B 02            [ 2]    1     addw sp,#2 
      0020AB 72 5F 00 01      [ 1] 2045 	clr in 
      0020AF CD 0E E2         [ 4] 2046 	call get_token
      0020B2 A1 84            [ 1] 2047 	cp a,#TK_INTGR
      0020B4 27 14            [ 1] 2048 	jreq 3$ 
      0020B6 A1 11            [ 1] 2049 	cp a,#TK_MINUS
      0020B8 26 07            [ 1] 2050 	jrne 22$
      0020BA CD 0E E2         [ 4] 2051 	call get_token 
      0020BD A1 84            [ 1] 2052 	cp a,#TK_INTGR 
      0020BF 27 06            [ 1] 2053 	jreq 23$
      0020C1                       2054 22$:
      0020C1 CD 20 4A         [ 4] 2055 	call rest_context 
      0020C4 CC 16 42         [ 2] 2056 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0020C7                       2057 23$:
      0020C7 CD 02 18         [ 4] 2058 	call neg_acc24	
      0020CA                       2059 3$: 
      0020CA C6 00 0C         [ 1] 2060 	ld a,acc24 
      0020CD CE 00 0D         [ 2] 2061 	ldw x,acc16 
      0020D0 72 C7 00 19      [ 4] 2062 	ld [ptr16],a
      0020D4 72 5C 00 1A      [ 1] 2063 	inc ptr8  
      0020D8 72 CF 00 19      [ 5] 2064 	ldw [ptr16],x 
      0020DC CD 20 4A         [ 4] 2065 	call rest_context
      0020DF CD 17 4B         [ 4] 2066 	call next_token 
      0020E2 A1 08            [ 1] 2067 	cp a,#TK_COMMA
      0020E4 26 03            [ 1] 2068 	jrne 4$ 
      0020E6 CC 20 5E         [ 2] 2069 	jp input_loop
      0020E9                       2070 4$:
      0020E9 A1 00            [ 1] 2071 	cp a,#TK_NONE 
      0020EB 27 07            [ 1] 2072 	jreq input_exit  
      0020ED A1 0A            [ 1] 2073 	cp a,#TK_COLON 
      0020EF 27 03            [ 1] 2074     jreq input_exit 
      0020F1 CC 16 42         [ 2] 2075 	jp syntax_error 
      0020F4                       2076 input_exit:
      0020F4                       2077 	_drop VSIZE 
      0020F4 5B 05            [ 2]    1     addw sp,#VSIZE 
      0020F6 90 85            [ 2] 2078 	popw y 
      0020F8 81               [ 4] 2079 	ret 
                                   2080 
                                   2081 
                                   2082 ;---------------------
                                   2083 ; BASIC: REM | ' 
                                   2084 ; skip comment to end of line 
                                   2085 ;---------------------- 
      0020F9                       2086 remark::
      0020F9 55 00 03 00 01   [ 1] 2087 	mov in,count 
      0020FE 81               [ 4] 2088  	ret 
                                   2089 
                                   2090 
                                   2091 ;---------------------
                                   2092 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2093 ; read in loop 'addr'  
                                   2094 ; apply & 'mask' to value 
                                   2095 ; loop while result==0.  
                                   2096 ; 'xor_mask' is used to 
                                   2097 ; invert the wait logic.
                                   2098 ; i.e. loop while not 0.
                                   2099 ;---------------------
                           000001  2100 	XMASK=1 
                           000002  2101 	MASK=2
                           000003  2102 	ADDR=3
                           000004  2103 	VSIZE=4
      0020FF                       2104 wait: 
      0020FF                       2105 	_vars VSIZE
      0020FF 52 04            [ 2]    1     sub sp,#VSIZE 
      002101 0F 01            [ 1] 2106 	clr (XMASK,sp) 
      002103 CD 19 13         [ 4] 2107 	call arg_list 
      002106 A1 02            [ 1] 2108 	cp a,#2
      002108 24 03            [ 1] 2109 	jruge 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00210A CC 16 42         [ 2] 2110 	jp syntax_error 
      00210D A1 03            [ 1] 2111 0$:	cp a,#3
      00210F 25 0C            [ 1] 2112 	jrult 1$
      002111                       2113 	_xpop  ; xor mask 
      002111 90 F6            [ 1]    1     ld a,(y)
      002113 93               [ 1]    2     ldw x,y 
      002114 EE 01            [ 2]    3     ldw x,(1,x)
      002116 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00211A 9F               [ 1] 2114 	ld a,xl 
      00211B 6B 01            [ 1] 2115 	ld (XMASK,sp),a 
      00211D                       2116 1$: _xpop ; mask
      00211D 90 F6            [ 1]    1     ld a,(y)
      00211F 93               [ 1]    2     ldw x,y 
      002120 EE 01            [ 2]    3     ldw x,(1,x)
      002122 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002126 9F               [ 1] 2117     ld a,xl  
      002127 6B 02            [ 1] 2118 	ld (MASK,sp),a 
      002129                       2119 	_xpop ; address 
      002129 90 F6            [ 1]    1     ld a,(y)
      00212B 93               [ 1]    2     ldw x,y 
      00212C EE 01            [ 2]    3     ldw x,(1,x)
      00212E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002132 F6               [ 1] 2120 2$:	ld a,(x)
      002133 14 02            [ 1] 2121 	and a,(MASK,sp)
      002135 18 01            [ 1] 2122 	xor a,(XMASK,sp)
      002137 27 F9            [ 1] 2123 	jreq 2$ 
      002139                       2124 	_drop VSIZE 
      002139 5B 04            [ 2]    1     addw sp,#VSIZE 
      00213B 81               [ 4] 2125 	ret 
                                   2126 
                                   2127 ;---------------------
                                   2128 ; BASIC: BSET addr,mask
                                   2129 ; set bits at 'addr' corresponding 
                                   2130 ; to those of 'mask' that are at 1.
                                   2131 ; arguments:
                                   2132 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2133 ;   mask        mask|addr
                                   2134 ; output:
                                   2135 ;	none 
                                   2136 ;--------------------------
      00213C                       2137 bit_set:
      00213C CD 19 13         [ 4] 2138 	call arg_list 
      00213F A1 02            [ 1] 2139 	cp a,#2	 
      002141 27 03            [ 1] 2140 	jreq 1$ 
      002143 CC 16 42         [ 2] 2141 	jp syntax_error
      002146                       2142 1$: 
      002146                       2143 	_xpop ; mask 
      002146 90 F6            [ 1]    1     ld a,(y)
      002148 93               [ 1]    2     ldw x,y 
      002149 EE 01            [ 2]    3     ldw x,(1,x)
      00214B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00214F 9F               [ 1] 2144 	ld a,xl
      002150 88               [ 1] 2145 	push a  
      002151                       2146 	_xpop ; addr  
      002151 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002153 93               [ 1]    2     ldw x,y 
      002154 EE 01            [ 2]    3     ldw x,(1,x)
      002156 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00215A 84               [ 1] 2147 	pop a 
      00215B FA               [ 1] 2148 	or a,(x)
      00215C F7               [ 1] 2149 	ld (x),a
      00215D 81               [ 4] 2150 	ret 
                                   2151 
                                   2152 ;---------------------
                                   2153 ; BASIC: BRES addr,mask
                                   2154 ; reset bits at 'addr' corresponding 
                                   2155 ; to those of 'mask' that are at 1.
                                   2156 ; arguments:
                                   2157 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2158 ;   mask	    ~mask&*addr  
                                   2159 ; output:
                                   2160 ;	none 
                                   2161 ;--------------------------
      00215E                       2162 bit_reset:
      00215E CD 19 13         [ 4] 2163 	call arg_list 
      002161 A1 02            [ 1] 2164 	cp a,#2  
      002163 27 03            [ 1] 2165 	jreq 1$ 
      002165 CC 16 42         [ 2] 2166 	jp syntax_error
      002168                       2167 1$: 
      002168                       2168 	_xpop ; mask 
      002168 90 F6            [ 1]    1     ld a,(y)
      00216A 93               [ 1]    2     ldw x,y 
      00216B EE 01            [ 2]    3     ldw x,(1,x)
      00216D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002171 9F               [ 1] 2169 	ld a,xl 
      002172 43               [ 1] 2170 	cpl a
      002173 88               [ 1] 2171 	push a  
      002174                       2172 	_xpop ; addr  
      002174 90 F6            [ 1]    1     ld a,(y)
      002176 93               [ 1]    2     ldw x,y 
      002177 EE 01            [ 2]    3     ldw x,(1,x)
      002179 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00217D 84               [ 1] 2173 	pop a 
      00217E F4               [ 1] 2174 	and a,(x)
      00217F F7               [ 1] 2175 	ld (x),a 
      002180 81               [ 4] 2176 	ret 
                                   2177 
                                   2178 ;---------------------
                                   2179 ; BASIC: BTOGL addr,mask
                                   2180 ; toggle bits at 'addr' corresponding 
                                   2181 ; to those of 'mask' that are at 1.
                                   2182 ; arguments:
                                   2183 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2184 ;   mask	    mask^*addr  
                                   2185 ; output:
                                   2186 ;	none 
                                   2187 ;--------------------------
      002181                       2188 bit_toggle:
      002181 CD 19 13         [ 4] 2189 	call arg_list 
      002184 A1 02            [ 1] 2190 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002186 27 03            [ 1] 2191 	jreq 1$ 
      002188 CC 16 42         [ 2] 2192 	jp syntax_error
      00218B                       2193 1$: _xpop ; mask 
      00218B 90 F6            [ 1]    1     ld a,(y)
      00218D 93               [ 1]    2     ldw x,y 
      00218E EE 01            [ 2]    3     ldw x,(1,x)
      002190 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002194 9F               [ 1] 2194 	ld a,xl
      002195 88               [ 1] 2195 	push a 
      002196                       2196 	_xpop  ; addr  
      002196 90 F6            [ 1]    1     ld a,(y)
      002198 93               [ 1]    2     ldw x,y 
      002199 EE 01            [ 2]    3     ldw x,(1,x)
      00219B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00219F 84               [ 1] 2197 	pop a 
      0021A0 F8               [ 1] 2198 	xor a,(x)
      0021A1 F7               [ 1] 2199 	ld (x),a 
      0021A2 81               [ 4] 2200 	ret 
                                   2201 
                                   2202 
                                   2203 ;---------------------
                                   2204 ; BASIC: BTEST(addr,bit)
                                   2205 ; return bit value at 'addr' 
                                   2206 ; bit is in range {0..7}.
                                   2207 ; arguments:
                                   2208 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2209 ;   bit 	    bit position {0..7}  
                                   2210 ; output:
                                   2211 ;	A:X       bit value  
                                   2212 ;--------------------------
      0021A3                       2213 bit_test:
      0021A3 CD 19 0E         [ 4] 2214 	call func_args 
      0021A6 A1 02            [ 1] 2215 	cp a,#2
      0021A8 27 03            [ 1] 2216 	jreq 0$
      0021AA CC 16 42         [ 2] 2217 	jp syntax_error
      0021AD                       2218 0$:	
      0021AD                       2219 	_xpop 
      0021AD 90 F6            [ 1]    1     ld a,(y)
      0021AF 93               [ 1]    2     ldw x,y 
      0021B0 EE 01            [ 2]    3     ldw x,(1,x)
      0021B2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B6 9F               [ 1] 2220 	ld a,xl 
      0021B7 A4 07            [ 1] 2221 	and a,#7
      0021B9 88               [ 1] 2222 	push a   
      0021BA A6 01            [ 1] 2223 	ld a,#1 
      0021BC 0D 01            [ 1] 2224 1$: tnz (1,sp)
      0021BE 27 05            [ 1] 2225 	jreq 2$
      0021C0 48               [ 1] 2226 	sll a 
      0021C1 0A 01            [ 1] 2227 	dec (1,sp)
      0021C3 20 F7            [ 2] 2228 	jra 1$
      0021C5 6B 01            [ 1] 2229 2$: ld (1,sp),a  
      0021C7                       2230 	_xpop ; address  
      0021C7 90 F6            [ 1]    1     ld a,(y)
      0021C9 93               [ 1]    2     ldw x,y 
      0021CA EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      0021CC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D0 84               [ 1] 2231 	pop a 
      0021D1 F4               [ 1] 2232 	and a,(x)
      0021D2 27 02            [ 1] 2233 	jreq 3$
      0021D4 A6 01            [ 1] 2234 	ld a,#1 
      0021D6 5F               [ 1] 2235 3$:	clrw x 
      0021D7 97               [ 1] 2236 	ld xl,a
      0021D8 4F               [ 1] 2237 	clr a  
      0021D9 81               [ 4] 2238 	ret
                                   2239 
                                   2240 ;--------------------
                                   2241 ; BASIC: POKE addr,byte
                                   2242 ; put a byte at addr 
                                   2243 ;--------------------
      0021DA                       2244 poke:
      0021DA CD 19 13         [ 4] 2245 	call arg_list 
      0021DD A1 02            [ 1] 2246 	cp a,#2
      0021DF 27 03            [ 1] 2247 	jreq 1$
      0021E1 CC 16 42         [ 2] 2248 	jp syntax_error
      0021E4                       2249 1$:	
      0021E4                       2250 	_xpop ; byte   
      0021E4 90 F6            [ 1]    1     ld a,(y)
      0021E6 93               [ 1]    2     ldw x,y 
      0021E7 EE 01            [ 2]    3     ldw x,(1,x)
      0021E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021ED 9F               [ 1] 2251     ld a,xl 
      0021EE 88               [ 1] 2252 	push a 
      0021EF                       2253 	_xpop ; address 
      0021EF 90 F6            [ 1]    1     ld a,(y)
      0021F1 93               [ 1]    2     ldw x,y 
      0021F2 EE 01            [ 2]    3     ldw x,(1,x)
      0021F4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F8 84               [ 1] 2254 	pop a 
      0021F9 F7               [ 1] 2255 	ld (x),a 
      0021FA 81               [ 4] 2256 	ret 
                                   2257 
                                   2258 ;-----------------------
                                   2259 ; BASIC: PEEK(addr)
                                   2260 ; get the byte at addr 
                                   2261 ; input:
                                   2262 ;	none 
                                   2263 ; output:
                                   2264 ;	X 		value 
                                   2265 ;-----------------------
      0021FB                       2266 peek:
      0021FB CD 19 0E         [ 4] 2267 	call func_args
      0021FE A1 01            [ 1] 2268 	cp a,#1 
      002200 27 03            [ 1] 2269 	jreq 1$
      002202 CC 16 42         [ 2] 2270 	jp syntax_error
      002205                       2271 1$: _xpop ; address  
      002205 90 F6            [ 1]    1     ld a,(y)
      002207 93               [ 1]    2     ldw x,y 
      002208 EE 01            [ 2]    3     ldw x,(1,x)
      00220A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00220E C7 00 18         [ 1] 2272 	ld farptr,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002211 CF 00 19         [ 2] 2273 	ldw ptr16,x 
      002214 92 BC 00 18      [ 5] 2274 	ldf a,[farptr]
      002218 5F               [ 1] 2275 	clrw x 
      002219 97               [ 1] 2276 	ld xl,a 
      00221A 4F               [ 1] 2277 	clr a 
      00221B 81               [ 4] 2278 	ret 
                                   2279 
                                   2280 ;---------------------------
                                   2281 ; BASIC IF expr : instructions
                                   2282 ; evaluate expr and if true 
                                   2283 ; execute instructions on same line. 
                                   2284 ;----------------------------
      00221C                       2285 if: 
      00221C CD 1B 63         [ 4] 2286 	call condition  
      00221F                       2287 	_xpop 
      00221F 90 F6            [ 1]    1     ld a,(y)
      002221 93               [ 1]    2     ldw x,y 
      002222 EE 01            [ 2]    3     ldw x,(1,x)
      002224 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002228 4D               [ 1] 2288 	tnz  a  
      002229 26 0D            [ 1] 2289 	jrne 9$
      00222B 5D               [ 2] 2290 	tnzw x 
      00222C 26 0A            [ 1] 2291 	jrne 9$  
                                   2292 ;skip to next line
      00222E 55 00 03 00 01   [ 1] 2293 	mov in,count
      002233                       2294 	_drop 2 
      002233 5B 02            [ 2]    1     addw sp,#2 
      002235 CC 16 F5         [ 2] 2295 	jp next_line
      002238 81               [ 4] 2296 9$:	ret 
                                   2297 
                                   2298 ;------------------------
                                   2299 ; BASIC: FOR var=expr 
                                   2300 ; set variable to expression 
                                   2301 ; leave variable address 
                                   2302 ; on stack and set
                                   2303 ; FLOOP bit in 'flags'
                                   2304 ;-----------------
                           000001  2305 	RETL1=1 ; return address  
                           000003  2306 	FSTEP=3  ; variable increment int24
                           000006  2307 	LIMIT=6 ; loop limit, int24  
                           000009  2308 	CVAR=9   ; control variable 
                           00000B  2309 	INW=11   ;  in.w saved
                           00000D  2310 	BPTR=13 ; baseptr saved
                           00000D  2311 	VSIZE=13  
      002239                       2312 for: ; { -- var_addr }
      002239 85               [ 2] 2313 	popw x ; call return address 
      00223A                       2314 	_vars VSIZE 
      00223A 52 0D            [ 2]    1     sub sp,#VSIZE 
      00223C 89               [ 2] 2315 	pushw x  ; RETL1 
      00223D A6 85            [ 1] 2316 	ld a,#TK_VAR 
      00223F CD 19 01         [ 4] 2317 	call expect
      002242 CD 17 73         [ 4] 2318 	call get_addr
      002245 1F 09            [ 2] 2319 	ldw (CVAR,sp),x  ; control variable 
      002247 CD 1C 4B         [ 4] 2320 	call let_eval 
      00224A 72 14 00 22      [ 1] 2321 	bset flags,#FLOOP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      00224E CD 17 4B         [ 4] 2322 	call next_token 
      002251 A1 80            [ 1] 2323 	cp a,#TK_CMD 
      002253 27 03            [ 1] 2324 	jreq 1$
      002255 CC 16 42         [ 2] 2325 	jp syntax_error
      002258                       2326 1$:  
      002258                       2327 	_get_code_addr
      002258 FE               [ 2]    1         ldw x,(x)
      002259 72 5C 00 01      [ 1]    2         inc in 
      00225D 72 5C 00 01      [ 1]    3         inc in 
      002261 A3 22 69         [ 2] 2328 	cpw x,#to   
      002264 27 03            [ 1] 2329 	jreq to
      002266 CC 16 42         [ 2] 2330 	jp syntax_error 
                                   2331 
                                   2332 ;-----------------------------------
                                   2333 ; BASIC: TO expr 
                                   2334 ; second part of FOR loop initilization
                                   2335 ; leave limit on stack and set 
                                   2336 ; FTO bit in 'flags'
                                   2337 ;-----------------------------------
      002269                       2338 to: ; { var_addr -- var_addr limit step }
      002269 72 04 00 22 03   [ 2] 2339 	btjt flags,#FLOOP,1$
      00226E CC 16 42         [ 2] 2340 	jp syntax_error
      002271 CD 1A 4A         [ 4] 2341 1$: call expression   
      002274 A1 84            [ 1] 2342 	cp a,#TK_INTGR 
      002276 27 03            [ 1] 2343 	jreq 2$ 
      002278 CC 16 42         [ 2] 2344 	jp syntax_error
      00227B                       2345 2$: _xpop
      00227B 90 F6            [ 1]    1     ld a,(y)
      00227D 93               [ 1]    2     ldw x,y 
      00227E EE 01            [ 2]    3     ldw x,(1,x)
      002280 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002284 6B 06            [ 1] 2346 	ld (LIMIT,sp),a 
      002286 1F 07            [ 2] 2347 	ldw (LIMIT+1,sp),x
      002288 CD 17 4B         [ 4] 2348 	call next_token
      00228B A1 00            [ 1] 2349 	cp a,#TK_NONE  
      00228D 27 17            [ 1] 2350 	jreq 4$ 
      00228F A1 80            [ 1] 2351 	cp a,#TK_CMD
      002291 26 0E            [ 1] 2352 	jrne 3$
      002293                       2353 	_get_code_addr
      002293 FE               [ 2]    1         ldw x,(x)
      002294 72 5C 00 01      [ 1]    2         inc in 
      002298 72 5C 00 01      [ 1]    3         inc in 
      00229C A3 22 AF         [ 2] 2354 	cpw x,#step 
      00229F 27 0E            [ 1] 2355 	jreq step
      0022A1                       2356 3$:	
      0022A1                       2357 	_unget_token   	 
      0022A1 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022A6                       2358 4$:	
      0022A6 0F 03            [ 1] 2359 	clr (FSTEP,sp) 
      0022A8 AE 00 01         [ 2] 2360 	ldw x,#1   ; default step  
      0022AB 1F 04            [ 2] 2361 	ldw (FSTEP+1,sp),x 
      0022AD 20 2F            [ 2] 2362 	jra store_loop_addr 
                                   2363 
                                   2364 
                                   2365 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2366 ; BASIC: STEP expr 
                                   2367 ; optional third par of FOR loop
                                   2368 ; initialization. 	
                                   2369 ;------------------------------------
      0022AF                       2370 step: ; {var limit -- var limit step}
      0022AF 72 04 00 22 03   [ 2] 2371 	btjt flags,#FLOOP,1$
      0022B4 CC 16 42         [ 2] 2372 	jp syntax_error
      0022B7 CD 1A 4A         [ 4] 2373 1$: call expression 
      0022BA A1 84            [ 1] 2374 	cp a,#TK_INTGR
      0022BC 27 03            [ 1] 2375 	jreq 2$
      0022BE CC 16 42         [ 2] 2376 	jp syntax_error
      0022C1                       2377 2$:	
      0022C1                       2378 	_xpop 
      0022C1 90 F6            [ 1]    1     ld a,(y)
      0022C3 93               [ 1]    2     ldw x,y 
      0022C4 EE 01            [ 2]    3     ldw x,(1,x)
      0022C6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022CA 6B 03            [ 1] 2379 	ld (FSTEP,sp),a 
      0022CC 1F 04            [ 2] 2380 	ldw (FSTEP+1,sp),x ; step
                                   2381 ; if step < 0 decrement LIMIT 
      0022CE 4D               [ 1] 2382 	tnz a
      0022CF 2A 0D            [ 1] 2383 	jrpl store_loop_addr 
      0022D1 7B 06            [ 1] 2384 	ld a,(LIMIT,sp)
      0022D3 1E 07            [ 2] 2385 	ldw x,(LIMIT+1,sp)
      0022D5 1D 00 01         [ 2] 2386 	subw x,#1 
      0022D8 A2 00            [ 1] 2387 	sbc a,#0 
      0022DA 6B 06            [ 1] 2388 	ld (LIMIT,sp),a 
      0022DC 1F 07            [ 2] 2389 	ldw (LIMIT+1,sp),x 
                                   2390 ; leave loop back entry point on cstack 
                                   2391 ; cstack is 1 call deep from interpreter
      0022DE                       2392 store_loop_addr:
      0022DE CE 00 04         [ 2] 2393 	ldw x,basicptr
      0022E1 1F 0D            [ 2] 2394 	ldw (BPTR,sp),x 
      0022E3 CE 00 00         [ 2] 2395 	ldw x,in.w 
      0022E6 1F 0B            [ 2] 2396 	ldw (INW,sp),x   
      0022E8 72 15 00 22      [ 1] 2397 	bres flags,#FLOOP 
      0022EC 72 5C 00 1F      [ 1] 2398 	inc loop_depth  
      0022F0 81               [ 4] 2399 	ret 
                                   2400 
                                   2401 ;--------------------------------
                                   2402 ; BASIC: NEXT var 
                                   2403 ; FOR loop control 
                                   2404 ; increment variable with step 
                                   2405 ; and compare with limit 
                                   2406 ; loop if threshold not crossed.
                                   2407 ; else stack. 
                                   2408 ; and decrement 'loop_depth' 
                                   2409 ;--------------------------------
      0022F1                       2410 next: ; {var limit step retl1 -- [var limit step ] }
      0022F1 72 5D 00 1F      [ 1] 2411 	tnz loop_depth 
      0022F5 26 03            [ 1] 2412 	jrne 1$ 
      0022F7 CC 16 42         [ 2] 2413 	jp syntax_error 
      0022FA                       2414 1$: 
      0022FA A6 85            [ 1] 2415 	ld a,#TK_VAR 
      0022FC CD 19 01         [ 4] 2416 	call expect
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0022FF CD 17 73         [ 4] 2417 	call get_addr 
                                   2418 ; check for good variable after NEXT 	 
      002302 13 09            [ 2] 2419 	cpw x,(CVAR,sp)
      002304 27 03            [ 1] 2420 	jreq 2$  
      002306 CC 16 42         [ 2] 2421 	jp syntax_error ; not the good one 
      002309                       2422 2$: 
      002309 CF 00 19         [ 2] 2423 	ldw ptr16,x 
                                   2424 	; increment variable 
      00230C F6               [ 1] 2425 	ld a,(x)
      00230D EE 01            [ 2] 2426 	ldw x,(1,x)  ; get var value 
      00230F 72 FB 04         [ 2] 2427 	addw x,(FSTEP+1,sp) ; var+step 
      002312 19 03            [ 1] 2428 	adc a,(FSTEP,sp)
      002314 72 C7 00 19      [ 4] 2429 	ld [ptr16],a
      002318 72 5C 00 1A      [ 1] 2430 	inc ptr8  
      00231C 72 CF 00 19      [ 5] 2431 	ldw [ptr16],x 
      002320 C7 00 0C         [ 1] 2432 	ld acc24,a 
      002323 CF 00 0D         [ 2] 2433 	ldw acc16,x 
      002326 7B 06            [ 1] 2434 	ld a,(LIMIT,sp)
      002328 1E 07            [ 2] 2435 	ldw x,(LIMIT+1,sp)
      00232A 72 B0 00 0D      [ 2] 2436 	subw x,acc16 
      00232E C2 00 0C         [ 1] 2437 	sbc a,acc24
      002331 18 03            [ 1] 2438 	xor a,(FSTEP,sp)
      002333 A8 80            [ 1] 2439 	xor a,#0x80
      002335 2B 12            [ 1] 2440 	jrmi loop_back  
      002337 20 25            [ 2] 2441 	jra loop_done   
                                   2442 ; check sign of STEP  
      002339 7B 03            [ 1] 2443 	ld a,(FSTEP,sp)
      00233B 2A 07            [ 1] 2444 	jrpl 4$
                                   2445 ;negative step
      00233D C6 00 0E         [ 1] 2446     ld a,acc8 
      002340 2F 07            [ 1] 2447 	jrslt loop_back   
      002342 20 1A            [ 2] 2448 	jra loop_done  
      002344                       2449 4$: ; positive step
      002344 72 0E 00 0E 15   [ 2] 2450 	btjt acc8,#7,loop_done 
      002349                       2451 loop_back:
      002349 1E 0D            [ 2] 2452 	ldw x,(BPTR,sp)
      00234B CF 00 04         [ 2] 2453 	ldw basicptr,x 
      00234E 72 01 00 22 05   [ 2] 2454 	btjf flags,#FRUN,1$ 
      002353 E6 02            [ 1] 2455 	ld a,(2,x)
      002355 C7 00 03         [ 1] 2456 	ld count,a
      002358 1E 0B            [ 2] 2457 1$:	ldw x,(INW,sp)
      00235A CF 00 00         [ 2] 2458 	ldw in.w,x 
      00235D 81               [ 4] 2459 	ret 
      00235E                       2460 loop_done:
                                   2461 	; remove loop data from stack  
      00235E 85               [ 2] 2462 	popw x
      00235F                       2463 	_drop VSIZE 
      00235F 5B 0D            [ 2]    1     addw sp,#VSIZE 
      002361 72 5A 00 1F      [ 1] 2464 	dec loop_depth 
      002365 FC               [ 2] 2465 	jp (x)
                                   2466 
                                   2467 ;----------------------------
                                   2468 ; called by goto/gosub
                                   2469 ; to get target line number 
                                   2470 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2471 ;    x    line address 
                                   2472 ;---------------------------
      002366                       2473 get_target_line:
      002366 CD 17 4B         [ 4] 2474 	call next_token  
      002369 A1 84            [ 1] 2475 	cp a,#TK_INTGR
      00236B 27 07            [ 1] 2476 	jreq get_target_line_addr 
      00236D A1 03            [ 1] 2477 	cp a,#TK_LABEL 
      00236F 27 26            [ 1] 2478 	jreq look_target_symbol 
      002371 CC 16 42         [ 2] 2479 	jp syntax_error
                                   2480 ; the target is a line number 
                                   2481 ; search it. 
      002374                       2482 get_target_line_addr:
      002374 90 89            [ 2] 2483 	pushw y 
      002376 CD 17 7D         [ 4] 2484 	call get_int24 ; line # 
      002379 4F               [ 1] 2485 	clr a
      00237A 90 CE 00 04      [ 2] 2486 	ldw y,basicptr 
      00237E 90 FE            [ 2] 2487 	ldw y,(y)
      002380 90 89            [ 2] 2488 	pushw y 
      002382 13 01            [ 2] 2489 	cpw x,(1,sp)
      002384                       2490 	_drop 2  
      002384 5B 02            [ 2]    1     addw sp,#2 
      002386 25 01            [ 1] 2491 	jrult 11$
      002388 4C               [ 1] 2492 	inc a 
      002389                       2493 11$: ; scan program for this line# 	
      002389 CD 0C 45         [ 4] 2494 	call search_lineno  
      00238C 5D               [ 2] 2495 	tnzw x ; 0| line# address 
      00238D 26 05            [ 1] 2496 	jrne 2$ 
      00238F A6 05            [ 1] 2497 	ld a,#ERR_NO_LINE 
      002391 CC 16 44         [ 2] 2498 	jp tb_error 
      002394 90 85            [ 2] 2499 2$:	popw y  
      002396 81               [ 4] 2500 	ret 
                                   2501 
                                   2502 ; the GOTO|GOSUB target is a symbol.
                                   2503 ; output:
                                   2504 ;    X    line address|0 
      002397                       2505 look_target_symbol:
      002397 90 89            [ 2] 2506 	pushw y 
      002399 89               [ 2] 2507 	pushw x 
      00239A CD 17 64         [ 4] 2508 	call skip_string 
      00239D 72 5F 00 0D      [ 1] 2509 	clr acc16 
      0023A1 90 CE 00 1B      [ 2] 2510 	ldw y,txtbgn 
      0023A5 90 E6 03         [ 1] 2511 1$:	ld a,(3,y) ; first TK_ID on line 
      0023A8 A1 03            [ 1] 2512 	cp a,#TK_LABEL 
      0023AA 27 15            [ 1] 2513 	jreq 3$ 
      0023AC 90 E6 02         [ 1] 2514 2$:	ld a,(2,y); line length 
      0023AF C7 00 0E         [ 1] 2515 	ld acc8,a 
      0023B2 72 B9 00 0D      [ 2] 2516 	addw y,acc16 ;point to next line 
      0023B6 90 C3 00 1D      [ 2] 2517 	cpw y,txtend 
      0023BA 25 E9            [ 1] 2518 	jrult 1$
      0023BC A6 0A            [ 1] 2519 	ld a,#ERR_BAD_VALUE
      0023BE CC 16 44         [ 2] 2520 	jp tb_error 
      0023C1                       2521 3$: ; found a TK_LABEL 
                                   2522 	; compare with GOTO|GOSUB target 
      0023C1 90 89            [ 2] 2523 	pushw y ; line address 
      0023C3 72 A9 00 04      [ 2] 2524 	addw y,#4 ; label string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0023C7 1E 03            [ 2] 2525 	ldw x,(3,sp) ; target string 
      0023C9 CD 13 91         [ 4] 2526 	call strcmp
      0023CC 26 04            [ 1] 2527 	jrne 4$
      0023CE 90 85            [ 2] 2528 	popw y 
      0023D0 20 DA            [ 2] 2529 	jra 2$ 
      0023D2                       2530 4$: ; target found 
      0023D2 85               [ 2] 2531 	popw x ;  address line target  
      0023D3                       2532 	_drop 2 ; target string 
      0023D3 5B 02            [ 2]    1     addw sp,#2 
      0023D5 90 85            [ 2] 2533 	popw y 
      0023D7 81               [ 4] 2534 	ret
                                   2535 
                                   2536 
                                   2537 ;--------------------------------
                                   2538 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2539 ; selective goto or gosub 
                                   2540 ;--------------------------------
      0023D8                       2541 cmd_on:
      0023D8 72 00 00 22 05   [ 2] 2542 	btjt flags,#FRUN,0$ 
      0023DD A6 06            [ 1] 2543 	ld a,#ERR_RUN_ONLY
      0023DF CC 16 44         [ 2] 2544 	jp tb_error 
      0023E2 CD 1A 4A         [ 4] 2545 0$:	call expression 
      0023E5 A1 84            [ 1] 2546 	cp a,#TK_INTGR
      0023E7 27 03            [ 1] 2547 	jreq 1$
      0023E9 CC 16 42         [ 2] 2548 	jp syntax_error
      0023EC                       2549 1$: _xpop
      0023EC 90 F6            [ 1]    1     ld a,(y)
      0023EE 93               [ 1]    2     ldw x,y 
      0023EF EE 01            [ 2]    3     ldw x,(1,x)
      0023F1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2550 ; the selector is the element indice 
                                   2551 ; in the list of arguments. {1..#elements} 
      0023F5 9F               [ 1] 2552 	ld a,xl ; keep only bits 7..0
      0023F6 27 68            [ 1] 2553 	jreq 9$ ; element # begin at 1. 
      0023F8 88               [ 1] 2554 	push a  ; selector  
      0023F9 CD 17 4B         [ 4] 2555 	call next_token
      0023FC A1 80            [ 1] 2556 	cp a,#TK_CMD 
      0023FE 27 03            [ 1] 2557 	jreq 2$ 
      002400 CC 16 42         [ 2] 2558 	jp syntax_error 
      002403                       2559 2$: _get_code_addr
      002403 FE               [ 2]    1         ldw x,(x)
      002404 72 5C 00 01      [ 1]    2         inc in 
      002408 72 5C 00 01      [ 1]    3         inc in 
                                   2560 ;; must be a GOTO or GOSUB 
      00240C A3 24 6A         [ 2] 2561 	cpw x,#goto 
      00240F 27 08            [ 1] 2562 	jreq 4$
      002411 A3 24 84         [ 2] 2563 	cpw x,#gosub 
      002414 27 03            [ 1] 2564 	jreq 4$ 
      002416 CC 16 42         [ 2] 2565 	jp syntax_error 
      002419                       2566 4$: 
      002419 84               [ 1] 2567 	pop a 
      00241A 89               [ 2] 2568 	pushw x ; save routine address 	
      00241B 88               [ 1] 2569 	push a  ; selector  
      00241C                       2570 5$: ; skip elements in list until selector==0 
      00241C 0A 01            [ 1] 2571 	dec (1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00241E 27 26            [ 1] 2572 	jreq 6$ 
                                   2573 ; can be a line# or a label 
      002420 CD 17 4B         [ 4] 2574 	call next_token 
      002423 A1 84            [ 1] 2575 	cp a,#TK_INTGR 
      002425 27 07            [ 1] 2576 	jreq 52$
      002427 A1 03            [ 1] 2577 	cp a,#TK_LABEL 
      002429 27 0D            [ 1] 2578 	jreq 54$
      00242B CC 16 42         [ 2] 2579 	jp syntax_error 
      00242E                       2580 52$: ; got a line number 
      00242E C6 00 01         [ 1] 2581 	ld a,in ; skip over int24 value 
      002431 AB 03            [ 1] 2582 	add a,#CELL_SIZE ; integer size  
      002433 C7 00 01         [ 1] 2583 	ld in,a 
      002436 20 03            [ 2] 2584 	jra 56$
      002438 CD 17 64         [ 4] 2585 54$: call skip_string ; skip over label 	
      00243B                       2586 56$: ; if another element comma present 
      00243B CD 17 4B         [ 4] 2587 	call next_token
      00243E A1 08            [ 1] 2588 	cp a,#TK_COMMA 
      002440 27 DA            [ 1] 2589 	jreq 5$ 
                                   2590 ; arg list exhausted, selector to big 
                                   2591 ; continue execution on next line 
      002442                       2592 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002442 5B 03            [ 2]    1     addw sp,#3 
      002444 20 1A            [ 2] 2593 	jra 9$
      002446                       2594 6$: ;at selected position  
      002446                       2595 	_drop 1 ; discard selector
      002446 5B 01            [ 2]    1     addw sp,#1 
                                   2596 ; here only the routine address 
                                   2597 ; of GOTO|GOSUB is on stack 
      002448 CD 23 66         [ 4] 2598     call get_target_line
      00244B CF 00 19         [ 2] 2599 	ldw ptr16,x 	
      00244E 55 00 03 00 01   [ 1] 2600 	mov in,count ; move to end of line  
      002453 85               [ 2] 2601 	popw x ; cmd address, GOTO||GOSUB 
      002454 A3 24 6A         [ 2] 2602 	cpw x,#goto 
      002457 26 05            [ 1] 2603 	jrne 7$ 
      002459 CE 00 19         [ 2] 2604 	ldw x,ptr16 
      00245C 20 19            [ 2] 2605 	jra jp_to_target
      00245E                       2606 7$: 
      00245E 20 35            [ 2] 2607 	jra gosub_2 ; target in ptr16 
      002460                       2608 9$: ; expr out of range skip to end of line
                                   2609     ; this will force a fall to next line  
      002460 55 00 03 00 01   [ 1] 2610 	mov in,count
      002465                       2611 	_drop 2
      002465 5B 02            [ 2]    1     addw sp,#2 
      002467 CC 16 F5         [ 2] 2612 	jp next_line  
                                   2613 
                                   2614 
                                   2615 ;------------------------
                                   2616 ; BASIC: GOTO line# 
                                   2617 ; jump to line# 
                                   2618 ; here cstack is 2 call deep from interpreter 
                                   2619 ;------------------------
      00246A                       2620 goto:
      00246A 72 00 00 22 05   [ 2] 2621 	btjt flags,#FRUN,goto_1  
      00246F A6 06            [ 1] 2622 	ld a,#ERR_RUN_ONLY
      002471 CC 16 44         [ 2] 2623 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      002474                       2624 goto_1:
      002474 CD 23 66         [ 4] 2625 	call get_target_line
      002477                       2626 jp_to_target:
      002477 CF 00 04         [ 2] 2627 	ldw basicptr,x 
      00247A E6 02            [ 1] 2628 	ld a,(2,x)
      00247C C7 00 03         [ 1] 2629 	ld count,a 
      00247F 35 03 00 01      [ 1] 2630 	mov in,#3 
      002483 81               [ 4] 2631 	ret 
                                   2632 
                                   2633 
                                   2634 ;--------------------
                                   2635 ; BASIC: GOSUB line#
                                   2636 ; basic subroutine call
                                   2637 ; actual line# and basicptr 
                                   2638 ; are saved on cstack
                                   2639 ; here cstack is 2 call deep from interpreter 
                                   2640 ;--------------------
                           000001  2641 	RET_ADDR=1 ; subroutine return address 
                           000003  2642 	RET_BPTR=3 ; basicptr return point 
                           000005  2643 	RET_INW=5  ; in.w return point 
                           000004  2644 	VSIZE=4 
      002484                       2645 gosub:
      002484 72 00 00 22 06   [ 2] 2646 	btjt flags,#FRUN,gosub_1 
      002489 A6 06            [ 1] 2647 	ld a,#ERR_RUN_ONLY
      00248B CC 16 44         [ 2] 2648 	jp tb_error 
      00248E 81               [ 4] 2649 	ret 
      00248F                       2650 gosub_1:
      00248F CD 23 66         [ 4] 2651 	call get_target_line 
      002492 CF 00 19         [ 2] 2652 	ldw ptr16,x
      002495                       2653 gosub_2: 
      002495 85               [ 2] 2654 	popw x 
      002496                       2655 	_vars VSIZE  
      002496 52 04            [ 2]    1     sub sp,#VSIZE 
      002498 89               [ 2] 2656 	pushw x ; RET_ADDR 
                                   2657 ; save BASIC subroutine return point.   
      002499 CE 00 04         [ 2] 2658 	ldw x,basicptr
      00249C 1F 03            [ 2] 2659 	ldw (RET_BPTR,sp),x 
      00249E CE 00 00         [ 2] 2660 	ldw x,in.w 
      0024A1 1F 05            [ 2] 2661 	ldw (RET_INW,sp),x
      0024A3 CE 00 19         [ 2] 2662 	ldw x,ptr16  
      0024A6 20 CF            [ 2] 2663 	jra jp_to_target
                                   2664 
                                   2665 ;------------------------
                                   2666 ; BASIC: RETURN 
                                   2667 ; exit from BASIC subroutine 
                                   2668 ;------------------------
      0024A8                       2669 return:
      0024A8 72 00 00 22 05   [ 2] 2670 	btjt flags,#FRUN,0$ 
      0024AD A6 06            [ 1] 2671 	ld a,#ERR_RUN_ONLY
      0024AF CC 16 44         [ 2] 2672 	jp tb_error 
      0024B2                       2673 0$:	
      0024B2 1E 03            [ 2] 2674 	ldw x,(RET_BPTR,sp) 
      0024B4 CF 00 04         [ 2] 2675 	ldw basicptr,x
      0024B7 E6 02            [ 1] 2676 	ld a,(2,x)
      0024B9 C7 00 03         [ 1] 2677 	ld count,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      0024BC 1E 05            [ 2] 2678 	ldw x,(RET_INW,sp)
      0024BE CF 00 00         [ 2] 2679 	ldw in.w,x 
      0024C1 85               [ 2] 2680 	popw x 
      0024C2                       2681 	_drop VSIZE 
      0024C2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024C4 FC               [ 2] 2682 	jp (x)
                                   2683 
                                   2684 
                                   2685 ;----------------------------------
                                   2686 ; BASIC: RUN
                                   2687 ; run BASIC program in RAM
                                   2688 ;----------------------------------- 
      0024C5                       2689 run: 
      0024C5 72 01 00 22 02   [ 2] 2690 	btjf flags,#FRUN,0$  
      0024CA 4F               [ 1] 2691 	clr a 
      0024CB 81               [ 4] 2692 	ret
      0024CC                       2693 0$: 
      0024CC 72 09 00 22 12   [ 2] 2694 	btjf flags,#FBREAK,1$
      0024D1                       2695 	_drop 2 
      0024D1 5B 02            [ 2]    1     addw sp,#2 
      0024D3 CD 20 4A         [ 4] 2696 	call rest_context
      0024D6                       2697 	_drop CTXT_SIZE 
      0024D6 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024D8 72 19 00 22      [ 1] 2698 	bres flags,#FBREAK 
      0024DC 72 10 00 22      [ 1] 2699 	bset flags,#FRUN 
      0024E0 CC 16 ED         [ 2] 2700 	jp interpreter 
      0024E3 CE 00 1B         [ 2] 2701 1$:	ldw x,txtbgn
      0024E6 C3 00 1D         [ 2] 2702 	cpw x,txtend 
      0024E9 2B 0C            [ 1] 2703 	jrmi run_it 
      0024EB AE 15 D1         [ 2] 2704 	ldw x,#err_no_prog
      0024EE CD 09 68         [ 4] 2705 	call puts 
      0024F1 55 00 03 00 01   [ 1] 2706 	mov in,count
      0024F6 81               [ 4] 2707 	ret 
      0024F7                       2708 run_it:	 
      0024F7                       2709 	_drop 2 ; drop return address 
      0024F7 5B 02            [ 2]    1     addw sp,#2 
      0024F9                       2710 run_it_02: 
      0024F9 CD 1C 2A         [ 4] 2711     call ubound 
      0024FC CD 13 F6         [ 4] 2712 	call clear_vars 
                                   2713 ; clear data pointer 
      0024FF 5F               [ 1] 2714 	clrw x 
      002500 CF 00 06         [ 2] 2715 	ldw data_ptr,x 
      002503 72 5F 00 08      [ 1] 2716 	clr data_ofs 
      002507 72 5F 00 09      [ 1] 2717 	clr data_len 
                                   2718 ; initialize BASIC pointer 
      00250B CE 00 1B         [ 2] 2719 	ldw x,txtbgn 
      00250E CF 00 04         [ 2] 2720 	ldw basicptr,x 
      002511 E6 02            [ 1] 2721 	ld a,(2,x)
      002513 C7 00 03         [ 1] 2722 	ld count,a
      002516 35 03 00 01      [ 1] 2723 	mov in,#3	
      00251A 72 10 00 22      [ 1] 2724 	bset flags,#FRUN 
      00251E CC 16 ED         [ 2] 2725 	jp interpreter 
                                   2726 
                                   2727 
                                   2728 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



                                   2729 ; BASIC: END
                                   2730 ; end running program
                                   2731 ;---------------------- 
      002521                       2732 cmd_end: 
                                   2733 ; clean stack 
      002521 AE 17 FF         [ 2] 2734 	ldw x,#STACK_EMPTY
      002524 94               [ 1] 2735 	ldw sp,x 
      002525 CC 16 CE         [ 2] 2736 	jp warm_start
                                   2737 
                                   2738 ;---------------------------
                                   2739 ; BASIC: GET var 
                                   2740 ; receive a key in variable 
                                   2741 ; don't wait 
                                   2742 ;---------------------------
      002528                       2743 cmd_get:
      002528 CD 17 4B         [ 4] 2744 	call next_token 
      00252B A1 85            [ 1] 2745 	cp a,#TK_VAR 
      00252D 27 03            [ 1] 2746 	jreq 0$
      00252F CC 16 42         [ 2] 2747 	jp syntax_error 
      002532 CD 17 73         [ 4] 2748 0$: call get_addr 
      002535 CF 00 19         [ 2] 2749 	ldw ptr16,x 
      002538 CD 09 14         [ 4] 2750 	call qgetc 
      00253B 27 03            [ 1] 2751 	jreq 2$
      00253D CD 09 1B         [ 4] 2752 	call getc  
      002540 72 3F 00 19      [ 4] 2753 2$: clr [ptr16]
      002544 72 5C 00 1A      [ 1] 2754 	inc ptr8 
      002548 72 3F 00 19      [ 4] 2755 	clr [ptr16]
      00254C 72 5C 00 1A      [ 1] 2756 	inc ptr8 
      002550 72 C7 00 19      [ 4] 2757 	ld [ptr16],a 
      002554 81               [ 4] 2758 	ret 
                                   2759 
                                   2760 
                                   2761 ;-----------------
                                   2762 ; 1 Khz beep 
                                   2763 ;-----------------
      002555                       2764 beep_1khz:: 
      002555 90 89            [ 2] 2765 	pushw y 
      002557 AE 00 64         [ 2] 2766 	ldw x,#100
      00255A 90 AE 03 E8      [ 2] 2767 	ldw y,#1000
      00255E 20 22            [ 2] 2768 	jra beep
                                   2769 
                                   2770 ;-----------------------
                                   2771 ; BASIC: TONE expr1,expr2
                                   2772 ; used TIMER2 channel 1
                                   2773 ; to produce a tone 
                                   2774 ; arguments:
                                   2775 ;    expr1   frequency 
                                   2776 ;    expr2   duration msec.
                                   2777 ;---------------------------
      002560                       2778 tone:
      002560 90 89            [ 2] 2779 	pushw y 
      002562 CD 19 13         [ 4] 2780 	call arg_list 
      002565 A1 02            [ 1] 2781 	cp a,#2 
      002567 27 03            [ 1] 2782 	jreq 1$
      002569 CC 16 42         [ 2] 2783 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      00256C                       2784 1$: 
      00256C                       2785 	_xpop 
      00256C 90 F6            [ 1]    1     ld a,(y)
      00256E 93               [ 1]    2     ldw x,y 
      00256F EE 01            [ 2]    3     ldw x,(1,x)
      002571 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002575 89               [ 2] 2786 	pushw x ; duration 
      002576                       2787 	_xpop ; frequency
      002576 90 F6            [ 1]    1     ld a,(y)
      002578 93               [ 1]    2     ldw x,y 
      002579 EE 01            [ 2]    3     ldw x,(1,x)
      00257B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00257F 90 93            [ 1] 2788 	ldw y,x ; frequency 
      002581 85               [ 2] 2789 	popw x  ; duration 
      002582                       2790 beep:  
      002582 89               [ 2] 2791 	pushw x 
      002583 AE F4 24         [ 2] 2792 	ldw x,#TIM2_CLK_FREQ
      002586 65               [ 2] 2793 	divw x,y ; cntr=Fclk/freq 
                                   2794 ; round to nearest integer 
      002587 90 A3 7A 12      [ 2] 2795 	cpw y,#TIM2_CLK_FREQ/2
      00258B 2B 01            [ 1] 2796 	jrmi 2$
      00258D 5C               [ 1] 2797 	incw x 
      00258E                       2798 2$:	 
      00258E 9E               [ 1] 2799 	ld a,xh 
      00258F C7 53 0D         [ 1] 2800 	ld TIM2_ARRH,a 
      002592 9F               [ 1] 2801 	ld a,xl 
      002593 C7 53 0E         [ 1] 2802 	ld TIM2_ARRL,a 
                                   2803 ; 50% duty cycle 
      002596 8C               [ 1] 2804 	ccf 
      002597 56               [ 2] 2805 	rrcw x 
      002598 9E               [ 1] 2806 	ld a,xh 
      002599 C7 53 0F         [ 1] 2807 	ld TIM2_CCR1H,a 
      00259C 9F               [ 1] 2808 	ld a,xl
      00259D C7 53 10         [ 1] 2809 	ld TIM2_CCR1L,a
      0025A0 72 10 53 08      [ 1] 2810 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025A4 72 10 53 00      [ 1] 2811 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025A8 72 10 53 04      [ 1] 2812 	bset TIM2_EGR,#TIM2_EGR_UG
      0025AC 85               [ 2] 2813 	popw x 
      0025AD CD 29 EE         [ 4] 2814 	call pause02
      0025B0 72 11 53 08      [ 1] 2815 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025B4 72 11 53 00      [ 1] 2816 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0025B8 90 85            [ 2] 2817 	popw y 
      0025BA 81               [ 4] 2818 	ret 
                                   2819 
                                   2820 ;-------------------------------
                                   2821 ; BASIC: ADCON 0|1 [,divisor]  
                                   2822 ; disable/enanble ADC 
                                   2823 ;-------------------------------
                           000003  2824 	ONOFF=3 
                           000001  2825 	DIVSOR=1
                           000004  2826 	VSIZE=4 
      0025BB                       2827 power_adc:
      0025BB CD 19 13         [ 4] 2828 	call arg_list 
      0025BE A1 02            [ 1] 2829 	cp a,#2	
      0025C0 27 12            [ 1] 2830 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0025C2 A1 01            [ 1] 2831 	cp a,#1 
      0025C4 27 03            [ 1] 2832 	jreq 0$ 
      0025C6 CC 16 42         [ 2] 2833 	jp syntax_error 
      0025C9 4F               [ 1] 2834 0$:	clr a 
      0025CA 5F               [ 1] 2835 	clrw x
      0025CB                       2836 	_xpush   ; divisor  
      0025CB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0025CF 90 F7            [ 1]    2     ld (y),a 
      0025D1 90 EF 01         [ 2]    3     ldw (1,y),x 
      0025D4                       2837 1$: _at_next 
      0025D4 90 E6 03         [ 1]    1     ld a,(3,y)
      0025D7 93               [ 1]    2     ldw x,y 
      0025D8 EE 04            [ 2]    3     ldw x,(4,x)
      0025DA 5D               [ 2] 2838 	tnzw x 
      0025DB 27 25            [ 1] 2839 	jreq 2$ 
      0025DD                       2840 	_xpop
      0025DD 90 F6            [ 1]    1     ld a,(y)
      0025DF 93               [ 1]    2     ldw x,y 
      0025E0 EE 01            [ 2]    3     ldw x,(1,x)
      0025E2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025E6                       2841 	_xdrop  
      0025E6 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0025EA 9F               [ 1] 2842 	ld a,xl
      0025EB A4 07            [ 1] 2843 	and a,#7
      0025ED 4E               [ 1] 2844 	swap a 
      0025EE C7 54 01         [ 1] 2845 	ld ADC_CR1,a
      0025F1 72 16 50 CA      [ 1] 2846 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0025F5 72 10 54 01      [ 1] 2847 	bset ADC_CR1,#ADC_CR1_ADON 
      0025F9                       2848 	_usec_dly 7 
      0025F9 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0025FC 5A               [ 2]    2     decw x
      0025FD 9D               [ 1]    3     nop 
      0025FE 26 FA            [ 1]    4     jrne .-4
      002600 20 08            [ 2] 2849 	jra 3$
      002602 72 11 54 01      [ 1] 2850 2$: bres ADC_CR1,#ADC_CR1_ADON
      002606 72 17 50 CA      [ 1] 2851 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00260A                       2852 3$:	
      00260A 81               [ 4] 2853 	ret
                                   2854 
                                   2855 ;-----------------------------
                                   2856 ; BASIC: ADCREAD (channel)
                                   2857 ; read adc channel {0..5}
                                   2858 ; output:
                                   2859 ;   A 		TK_INTGR 
                                   2860 ;   X 		value 
                                   2861 ;-----------------------------
      00260B                       2862 analog_read:
      00260B CD 19 0E         [ 4] 2863 	call func_args 
      00260E A1 01            [ 1] 2864 	cp a,#1 
      002610 27 03            [ 1] 2865 	jreq 1$
      002612 CC 16 42         [ 2] 2866 	jp syntax_error
      002615                       2867 1$: _xpop 
      002615 90 F6            [ 1]    1     ld a,(y)
      002617 93               [ 1]    2     ldw x,y 
      002618 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      00261A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00261E A3 00 05         [ 2] 2868 	cpw x,#5 
      002621 23 05            [ 2] 2869 	jrule 2$
      002623 A6 0A            [ 1] 2870 	ld a,#ERR_BAD_VALUE
      002625 CC 16 44         [ 2] 2871 	jp tb_error 
      002628 9F               [ 1] 2872 2$: ld a,xl
      002629 C7 00 0E         [ 1] 2873 	ld acc8,a 
      00262C A6 05            [ 1] 2874 	ld a,#5
      00262E C0 00 0E         [ 1] 2875 	sub a,acc8 
      002631 C7 54 00         [ 1] 2876 	ld ADC_CSR,a
      002634 72 16 54 02      [ 1] 2877 	bset ADC_CR2,#ADC_CR2_ALIGN
      002638 72 10 54 01      [ 1] 2878 	bset ADC_CR1,#ADC_CR1_ADON
      00263C 72 0F 54 00 FB   [ 2] 2879 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002641 CE 54 04         [ 2] 2880 	ldw x,ADC_DRH
      002644 A6 84            [ 1] 2881 	ld a,#TK_INTGR
      002646 81               [ 4] 2882 	ret 
                                   2883 
                                   2884 ;-----------------------
                                   2885 ; BASIC: DREAD(pin)
                                   2886 ; Arduino pins 
                                   2887 ; read state of a digital pin 
                                   2888 ; pin# {0..15}
                                   2889 ; output:
                                   2890 ;    A 		TK_INTGR
                                   2891 ;    X      0|1 
                                   2892 ;-------------------------
                           000001  2893 	PINNO=1
                           000001  2894 	VSIZE=1
      002647                       2895 digital_read:
      002647                       2896 	_vars VSIZE 
      002647 52 01            [ 2]    1     sub sp,#VSIZE 
      002649 CD 19 0E         [ 4] 2897 	call func_args
      00264C A1 01            [ 1] 2898 	cp a,#1
      00264E 27 03            [ 1] 2899 	jreq 1$
      002650 CC 16 42         [ 2] 2900 	jp syntax_error
      002653                       2901 1$: _xpop 
      002653 90 F6            [ 1]    1     ld a,(y)
      002655 93               [ 1]    2     ldw x,y 
      002656 EE 01            [ 2]    3     ldw x,(1,x)
      002658 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00265C A3 00 0F         [ 2] 2902 	cpw x,#15 
      00265F 23 05            [ 2] 2903 	jrule 2$
      002661 A6 0A            [ 1] 2904 	ld a,#ERR_BAD_VALUE
      002663 CC 16 44         [ 2] 2905 	jp tb_error 
      002666 CD 2B 33         [ 4] 2906 2$:	call select_pin 
      002669 6B 01            [ 1] 2907 	ld (PINNO,sp),a
      00266B E6 01            [ 1] 2908 	ld a,(GPIO_IDR,x)
      00266D 0D 01            [ 1] 2909 	tnz (PINNO,sp)
      00266F 27 05            [ 1] 2910 	jreq 8$
      002671 44               [ 1] 2911 3$: srl a 
      002672 0A 01            [ 1] 2912 	dec (PINNO,sp)
      002674 26 FB            [ 1] 2913 	jrne 3$ 
      002676 A4 01            [ 1] 2914 8$: and a,#1 
      002678 5F               [ 1] 2915 	clrw x 
      002679 97               [ 1] 2916 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      00267A 4F               [ 1] 2917 	clr a 
      00267B                       2918 	_drop VSIZE
      00267B 5B 01            [ 2]    1     addw sp,#VSIZE 
      00267D 81               [ 4] 2919 	ret
                                   2920 
                                   2921 
                                   2922 ;-----------------------
                                   2923 ; BASIC: DWRITE pin,0|1
                                   2924 ; Arduino pins 
                                   2925 ; write to a digital pin 
                                   2926 ; pin# {0..15}
                                   2927 ; output:
                                   2928 ;    A 		TK_INTGR
                                   2929 ;    X      0|1 
                                   2930 ;-------------------------
                           000001  2931 	PINNO=1
                           000002  2932 	PINVAL=2
                           000002  2933 	VSIZE=2
      00267E                       2934 digital_write:
      00267E                       2935 	_vars VSIZE 
      00267E 52 02            [ 2]    1     sub sp,#VSIZE 
      002680 CD 19 13         [ 4] 2936 	call arg_list  
      002683 A1 02            [ 1] 2937 	cp a,#2 
      002685 27 03            [ 1] 2938 	jreq 1$
      002687 CC 16 42         [ 2] 2939 	jp syntax_error
      00268A                       2940 1$: _xpop 
      00268A 90 F6            [ 1]    1     ld a,(y)
      00268C 93               [ 1]    2     ldw x,y 
      00268D EE 01            [ 2]    3     ldw x,(1,x)
      00268F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002693 9F               [ 1] 2941 	ld a,xl 
      002694 6B 02            [ 1] 2942 	ld (PINVAL,sp),a
      002696                       2943 	_xpop 
      002696 90 F6            [ 1]    1     ld a,(y)
      002698 93               [ 1]    2     ldw x,y 
      002699 EE 01            [ 2]    3     ldw x,(1,x)
      00269B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00269F A3 00 0F         [ 2] 2944 	cpw x,#15 
      0026A2 23 05            [ 2] 2945 	jrule 2$
      0026A4 A6 0A            [ 1] 2946 	ld a,#ERR_BAD_VALUE
      0026A6 CC 16 44         [ 2] 2947 	jp tb_error 
      0026A9 CD 2B 33         [ 4] 2948 2$:	call select_pin 
      0026AC 6B 01            [ 1] 2949 	ld (PINNO,sp),a 
      0026AE A6 01            [ 1] 2950 	ld a,#1
      0026B0 0D 01            [ 1] 2951 	tnz (PINNO,sp)
      0026B2 27 05            [ 1] 2952 	jreq 4$
      0026B4 48               [ 1] 2953 3$: sll a
      0026B5 0A 01            [ 1] 2954 	dec (PINNO,sp)
      0026B7 26 FB            [ 1] 2955 	jrne 3$
      0026B9 0D 02            [ 1] 2956 4$: tnz (PINVAL,sp)
      0026BB 26 05            [ 1] 2957 	jrne 5$
      0026BD 43               [ 1] 2958 	cpl a 
      0026BE E4 00            [ 1] 2959 	and a,(GPIO_ODR,x)
      0026C0 20 02            [ 2] 2960 	jra 8$
      0026C2 EA 00            [ 1] 2961 5$: or a,(GPIO_ODR,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026C4 E7 00            [ 1] 2962 8$: ld (GPIO_ODR,x),a 
      0026C6                       2963 	_drop VSIZE 
      0026C6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026C8 81               [ 4] 2964 	ret
                                   2965 
                                   2966 
                                   2967 ;-----------------------
                                   2968 ; BASIC: STOP
                                   2969 ; stop progam execution  
                                   2970 ; without resetting pointers 
                                   2971 ; the program is resumed
                                   2972 ; with RUN 
                                   2973 ;-------------------------
      0026C9                       2974 stop:
      0026C9 72 00 00 22 02   [ 2] 2975 	btjt flags,#FRUN,2$
      0026CE 4F               [ 1] 2976 	clr a
      0026CF 81               [ 4] 2977 	ret 
      0026D0                       2978 2$:	 
                                   2979 ; create space on cstack to save context 
      0026D0 AE 26 F7         [ 2] 2980 	ldw x,#break_point 
      0026D3 CD 09 68         [ 4] 2981 	call puts 
      0026D6                       2982 	_drop 2 ;drop return address 
      0026D6 5B 02            [ 2]    1     addw sp,#2 
      0026D8                       2983 	_vars CTXT_SIZE ; context size 
      0026D8 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0026DA CD 20 3A         [ 4] 2984 	call save_context 
      0026DD AE 16 90         [ 2] 2985 	ldw x,#tib 
      0026E0 CF 00 04         [ 2] 2986 	ldw basicptr,x
      0026E3 7F               [ 1] 2987 	clr (x)
      0026E4 72 5F 00 03      [ 1] 2988 	clr count  
      0026E8 5F               [ 1] 2989 	clrw x 
      0026E9 CF 00 00         [ 2] 2990 	ldw in.w,x
      0026EC 72 11 00 22      [ 1] 2991 	bres flags,#FRUN 
      0026F0 72 18 00 22      [ 1] 2992 	bset flags,#FBREAK
      0026F4 CC 16 ED         [ 2] 2993 	jp interpreter 
      0026F7 0A 62 72 65 61 6B 20  2994 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2995 
                                   2996 ;-----------------------
                                   2997 ; BASIC: NEW
                                   2998 ; from command line only 
                                   2999 ; free program memory
                                   3000 ; and clear variables 
                                   3001 ;------------------------
      002715                       3002 new: 
      002715 72 01 00 22 01   [ 2] 3003 	btjf flags,#FRUN,0$ 
      00271A 81               [ 4] 3004 	ret 
      00271B                       3005 0$:	
      00271B CD 14 9E         [ 4] 3006 	call clear_basic 
      00271E 81               [ 4] 3007 	ret 
                                   3008 
                                   3009 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3010 ; BASIC: ERASE \E | \F 
                                   3011 ; erase all block in range from 
                                   3012 ;  'app_space' to FLASH end (0x20000)
                                   3013 ;  or all EEPROM 
                                   3014 ; that contains a non zero byte.  
                                   3015 ;-----------------------------------
                           000001  3016 	LIMIT=1 
                           000003  3017 	VSIZE = 3 
      00271F                       3018 erase:
      00271F 72 5F 00 18      [ 1] 3019 	clr farptr 
      002723                       3020 	_vars VSIZE 
      002723 52 03            [ 2]    1     sub sp,#VSIZE 
      002725 CD 17 4B         [ 4] 3021 	call next_token 
      002728 A1 04            [ 1] 3022 	cp a,#TK_CHAR 
      00272A 27 03            [ 1] 3023 	jreq 0$ 
      00272C CC 16 42         [ 2] 3024 	jp syntax_error
      00272F CD 17 8D         [ 4] 3025 0$: call get_char 
      002732 A4 DF            [ 1] 3026 	and a,#0XDF 
      002734 A1 45            [ 1] 3027 	cp a,#'E
      002736 26 0C            [ 1] 3028 	jrne 1$
      002738 AE 40 00         [ 2] 3029 	ldw x,#EEPROM_BASE 
      00273B CF 00 19         [ 2] 3030 	ldw farptr+1,x 
      00273E AE 47 FF         [ 2] 3031 	ldw x,#EEPROM_END
      002741 4F               [ 1] 3032 	clr a 
      002742 20 15            [ 2] 3033 	jra 3$ 
      002744 A1 46            [ 1] 3034 1$: cp a,#'F 
      002746 27 06            [ 1] 3035 	jreq 2$
      002748 AE 15 82         [ 2] 3036 	ldw x,#err_bad_value
      00274B CC 16 44         [ 2] 3037 	jp tb_error
      00274E                       3038 2$:
      00274E AE 36 00         [ 2] 3039 	ldw x,#app_space  
      002751 CF 00 19         [ 2] 3040 	ldw farptr+1,x 
      002754 A6 02            [ 1] 3041 	ld a,#(FLASH_END>>16)&0XFF 
      002756 AE 7F FF         [ 2] 3042 	ldw x,#FLASH_END&0xffff
      002759                       3043 3$:
      002759 6B 01            [ 1] 3044 	ld (LIMIT,sp),a 
      00275B 1F 02            [ 2] 3045 	ldw (LIMIT+1,sp),x 
                                   3046  ; operation done from RAM
                                   3047  ; copy code to RAM in tib   
      00275D CD 07 09         [ 4] 3048 	call move_erase_to_ram
      002760                       3049 4$:	 
      002760 CD 08 8B         [ 4] 3050     call scan_block 
      002763 27 08            [ 1] 3051 	jreq 5$  ; block already erased 
      002765 A6 45            [ 1] 3052     ld a,#'E 
      002767 CD 09 0B         [ 4] 3053     call putc 
      00276A CD 07 87         [ 4] 3054 	call block_erase   
                                   3055 ; this block is clean, next  
      00276D AE 00 80         [ 2] 3056 5$:	ldw x,#BLOCK_SIZE
      002770 CD 08 7D         [ 4] 3057 	call incr_farptr
                                   3058 ; check limit, 24 bit substraction  	
      002773 7B 01            [ 1] 3059 	ld a,(LIMIT,sp)
      002775 1E 02            [ 2] 3060 	ldw x,(LIMIT+1,sp)
      002777 72 B0 00 19      [ 2] 3061 	subw x,farptr+1
      00277B C2 00 18         [ 1] 3062 	sbc a,farptr 
      00277E 22 E0            [ 1] 3063 	jrugt 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      002780 CD 14 9E         [ 4] 3064 9$: call clear_basic
      002783 1E 02            [ 2] 3065 	ldw x,(LIMIT+1,sp)
      002785 A3 47 FF         [ 2] 3066 	cpw x,#EEPROM_END
      002788 26 03            [ 1] 3067 	jrne 10$
      00278A CD 1C F3         [ 4] 3068 	call func_eefree 
      00278D                       3069 10$:
      00278D                       3070 	_drop VSIZE 
      00278D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00278F 81               [ 4] 3071 	ret 
                                   3072 	
                                   3073 
                                   3074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3075 ;  check for application signature 
                                   3076 ; output:
                                   3077 ;   Carry    0 app present 
                                   3078 ;            1 no app installed  
                                   3079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002790                       3080 qsign: 
      002790 CE 36 00         [ 2] 3081 	ldw x,app_sign 
      002793 C3 28 50         [ 2] 3082 	cpw x,SIGNATURE ; "BC" 
      002796 81               [ 4] 3083 	ret 
                                   3084 
                                   3085 ;--------------------------------------
                                   3086 ;  fill write buffer 
                                   3087 ;  input:
                                   3088 ;    y  point to output buffer 
                                   3089 ;    x  point to source 
                                   3090 ;    a  bytes to write in buffer 
                                   3091 ;  output:
                                   3092 ;    y   += A 
                                   3093 ;    X   += A 
                                   3094 ;    A   0 
                                   3095 ;---------------------------------------
      002797                       3096 fill_write_buffer:
      002797 88               [ 1] 3097 	push a 
      002798 4D               [ 1] 3098 	tnz a 
      002799 27 0A            [ 1] 3099 	jreq 9$ 
      00279B F6               [ 1] 3100 1$: ld a,(x)
      00279C 5C               [ 1] 3101 	incw x 
      00279D 90 F7            [ 1] 3102 	ld (y),a 
      00279F 90 5C            [ 1] 3103 	incw y 
      0027A1 0A 01            [ 1] 3104 	dec (1,sp) 
      0027A3 26 F6            [ 1] 3105 	jrne 1$ 
      0027A5 84               [ 1] 3106 9$:	pop a 
      0027A6 81               [ 4] 3107     ret 	
                                   3108 
                                   3109 ;--------------------------------------
                                   3110 ;  fill pad buffer with zero 
                                   3111 ;  input:
                                   3112 ;	none 
                                   3113 ;  output:
                                   3114 ;    y     buffer address  
                                   3115 ;--------------------------------------
      0027A7                       3116 clear_block_buffer:
      0027A7 88               [ 1] 3117 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027A8 90 AE 16 E0      [ 2] 3118 	ldw y,#block_buffer 
      0027AC 90 89            [ 2] 3119 	pushw y
      0027AE A6 80            [ 1] 3120 	ld a,#BLOCK_SIZE   
      0027B0 90 7F            [ 1] 3121 1$:	clr (y)
      0027B2 90 5C            [ 1] 3122 	incw y
      0027B4 4A               [ 1] 3123 	dec a  
      0027B5 26 F9            [ 1] 3124 	jrne 1$ 	
      0027B7 90 85            [ 2] 3125 9$: popw y 
      0027B9 84               [ 1] 3126 	pop a 			
      0027BA 81               [ 4] 3127 	ret 
                                   3128 
                                   3129 
                                   3130 ;---------------------------------------
                                   3131 ; BASIC: SAVE
                                   3132 ; write application from RAM to FLASH
                                   3133 ;--------------------------------------
                           000001  3134 	XTEMP=1
                           000003  3135 	COUNT=3  ; last count bytes written 
                           000004  3136 	CNT_LO=4 ; count low byte 
                           000005  3137 	TOWRITE=5 ; how bytes left to write  
                           000006  3138 	VSIZE=6 
      0027BB                       3139 save_app:
      0027BB 89               [ 2] 3140 	pushw x 
      0027BC 90 89            [ 2] 3141 	pushw y 
      0027BE                       3142 	_vars VSIZE
      0027BE 52 06            [ 2]    1     sub sp,#VSIZE 
      0027C0 CD 27 90         [ 4] 3143 	call qsign 
      0027C3 26 09            [ 1] 3144 	jrne 1$
      0027C5 AE 28 52         [ 2] 3145 	ldw x,#CANT_DO 
      0027C8 CD 09 68         [ 4] 3146 	call puts 
      0027CB CC 28 4A         [ 2] 3147 	jp 9$
      0027CE                       3148 1$: 
      0027CE CE 00 1B         [ 2] 3149 	ldw x,txtbgn
      0027D1 C3 00 1D         [ 2] 3150 	cpw x,txtend 
      0027D4 25 09            [ 1] 3151 	jrult 2$ 
      0027D6 AE 28 94         [ 2] 3152 	ldw x,#NO_APP
      0027D9 CD 09 68         [ 4] 3153 	call puts 
      0027DC CC 28 4A         [ 2] 3154 	jp 9$
      0027DF                       3155 2$: 
                                   3156 ; block programming flash
                                   3157 ; must be done from RAM
                                   3158 ; moved in tib  
      0027DF CD 07 49         [ 4] 3159 	call move_prg_to_ram
                                   3160 ; initialize farptr 
                                   3161 ; to app_sign address 
      0027E2 72 5F 00 18      [ 1] 3162 	clr farptr 
      0027E6 AE 36 00         [ 2] 3163 	ldw x,#app_sign 
      0027E9 CF 00 19         [ 2] 3164 	ldw farptr+1,x
                                   3165 ; initialize local variables 
      0027EC CD 1E 13         [ 4] 3166 	call prog_size
      0027EF 1F 05            [ 2] 3167 	ldw (TOWRITE,sp),x
      0027F1 0F 03            [ 1] 3168 	clr (COUNT,sp)
                                   3169 ; first bock 
                                   3170 ; containt signature 2 bytes 
                                   3171 ; and size 	2 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   3172 ; use Y as pointer to block_buffer
      0027F3 CD 27 A7         [ 4] 3173 	call clear_block_buffer ; -- y=*block_buffer	
                                   3174 ; write signature
      0027F6 CE 28 50         [ 2] 3175 	ldw x,SIGNATURE ; "BC" 
      0027F9 90 FF            [ 2] 3176 	ldw (y),x 
      0027FB 72 A9 00 02      [ 2] 3177 	addw y,#2
      0027FF 1E 05            [ 2] 3178 	ldw x,(TOWRITE,sp)
      002801 90 FF            [ 2] 3179 	ldw (y),x
      002803 72 A9 00 02      [ 2] 3180 	addw y,#2   
      002807 A6 7C            [ 1] 3181 	ld a,#(BLOCK_SIZE-4)
      002809 6B 04            [ 1] 3182 	ld (CNT_LO,sp),a 
      00280B A3 00 7C         [ 2] 3183 	cpw x,#(BLOCK_SIZE-4) 
      00280E 22 01            [ 1] 3184 	jrugt 3$
      002810 9F               [ 1] 3185 	ld a,xl 
      002811 6B 04            [ 1] 3186 3$:	ld (CNT_LO,sp),a   
      002813 CE 00 1B         [ 2] 3187 	ldw x,txtbgn 
      002816 1F 01            [ 2] 3188 	ldw (XTEMP,sp),x 
      002818                       3189 32$: 
      002818 1E 01            [ 2] 3190 	ldw x,(XTEMP,sp)
      00281A 7B 04            [ 1] 3191 	ld a,(CNT_LO,sp)
      00281C CD 27 97         [ 4] 3192 	call fill_write_buffer 
      00281F 1F 01            [ 2] 3193 	ldw (XTEMP,sp),x 
      002821 AE 16 E0         [ 2] 3194 	ldw x,#block_buffer
      002824 CD 07 63         [ 4] 3195 	call write_buffer
      002827 AE 00 80         [ 2] 3196 	ldw x,#BLOCK_SIZE 
      00282A CD 08 7D         [ 4] 3197 	call incr_farptr  
                                   3198 ; following blocks 
      00282D 1E 01            [ 2] 3199 	ldw x,(XTEMP,sp)
      00282F C3 00 1D         [ 2] 3200 	cpw x,txtend 
      002832 24 16            [ 1] 3201 	jruge 9$ 
      002834 1E 05            [ 2] 3202 	ldw x,(TOWRITE,sp)
      002836 72 F0 03         [ 2] 3203 	subw x,(COUNT,sp)
      002839 1F 05            [ 2] 3204 	ldw (TOWRITE,sp),x 
      00283B A6 80            [ 1] 3205 	ld a,#BLOCK_SIZE 
      00283D A3 00 80         [ 2] 3206 	cpw x,#BLOCK_SIZE 
      002840 24 01            [ 1] 3207 	jruge 4$ 
      002842 9F               [ 1] 3208 	ld a,xl 
      002843 6B 04            [ 1] 3209 4$:	ld (CNT_LO,sp),a 
      002845 CD 27 A7         [ 4] 3210 	call clear_block_buffer 
      002848 20 CE            [ 2] 3211 	jra 32$ 
      00284A                       3212 9$:	_drop VSIZE 
      00284A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00284C 90 85            [ 2] 3213     popw y 
      00284E 85               [ 2] 3214 	popw x 
      00284F 81               [ 4] 3215 	ret 
                                   3216 
                                   3217 
      002850 42 43                 3218 SIGNATURE: .ascii "BC"
      002852 43 61 6E 27 74 20 66  3219 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      002894 4E 6F 20 61 70 70 6C  3220 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3221 
                                   3222 ;---------------------
                                   3223 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3224 ; write 1 or more byte to FLASH or EEPROM
                                   3225 ; starting at address  
                                   3226 ; input:
                                   3227 ;   expr1  	is address 
                                   3228 ;   expr2,...,exprn   are bytes to write
                                   3229 ; output:
                                   3230 ;   none 
                                   3231 ;---------------------
      0028AA                       3232 write:
      0028AA CD 1A 4A         [ 4] 3233 	call expression
      0028AD A1 84            [ 1] 3234 	cp a,#TK_INTGR 
      0028AF 27 03            [ 1] 3235 	jreq 0$
      0028B1 CC 16 42         [ 2] 3236 	jp syntax_error
      0028B4                       3237 0$: _xpop 
      0028B4 90 F6            [ 1]    1     ld a,(y)
      0028B6 93               [ 1]    2     ldw x,y 
      0028B7 EE 01            [ 2]    3     ldw x,(1,x)
      0028B9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028BD C7 00 18         [ 1] 3238 	ld farptr,a 
      0028C0 CF 00 19         [ 2] 3239 	ldw ptr16,x 
      0028C3                       3240 1$:	
      0028C3 CD 17 4B         [ 4] 3241 	call next_token 
      0028C6 A1 08            [ 1] 3242 	cp a,#TK_COMMA 
      0028C8 27 02            [ 1] 3243 	jreq 2$ 
      0028CA 20 20            [ 2] 3244 	jra 9$ ; no more data 
      0028CC CD 1A 4A         [ 4] 3245 2$:	call expression
      0028CF A1 84            [ 1] 3246 	cp a,#TK_INTGR
      0028D1 27 03            [ 1] 3247 	jreq 3$
      0028D3 CC 16 42         [ 2] 3248 	jp syntax_error
      0028D6                       3249 3$:	_xpop 
      0028D6 90 F6            [ 1]    1     ld a,(y)
      0028D8 93               [ 1]    2     ldw x,y 
      0028D9 EE 01            [ 2]    3     ldw x,(1,x)
      0028DB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028DF 9F               [ 1] 3250 	ld a,xl 
      0028E0 5F               [ 1] 3251 	clrw x 
      0028E1 CD 07 AD         [ 4] 3252 	call write_byte
      0028E4 AE 00 01         [ 2] 3253 	ldw x,#1 
      0028E7 CD 08 7D         [ 4] 3254 	call incr_farptr 
      0028EA 20 D7            [ 2] 3255 	jra 1$ 
      0028EC                       3256 9$:
      0028EC 81               [ 4] 3257 	ret 
                                   3258 
                                   3259 
                                   3260 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3261 ;BASIC: CHAR(expr)
                                   3262 ; évaluate expression 
                                   3263 ; and take the 7 least 
                                   3264 ; bits as ASCII character
                                   3265 ; output: 
                                   3266 ; 	A char 
                                   3267 ;---------------------
      0028ED                       3268 func_char:
      0028ED CD 19 0E         [ 4] 3269 	call func_args 
      0028F0 A1 01            [ 1] 3270 	cp a,#1
      0028F2 27 03            [ 1] 3271 	jreq 1$
      0028F4 CC 16 42         [ 2] 3272 	jp syntax_error
      0028F7                       3273 1$:	_xpop
      0028F7 90 F6            [ 1]    1     ld a,(y)
      0028F9 93               [ 1]    2     ldw x,y 
      0028FA EE 01            [ 2]    3     ldw x,(1,x)
      0028FC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002900 9F               [ 1] 3274 	ld a,xl
      002901 A4 7F            [ 1] 3275 	and a,#0x7f 
      002903 81               [ 4] 3276 	ret
                                   3277 
                                   3278 ;---------------------
                                   3279 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3280 ; extract first character 
                                   3281 ; of string argument 
                                   3282 ; output:
                                   3283 ;    A:X    int24 
                                   3284 ;---------------------
      002904                       3285 ascii:
      002904 A6 06            [ 1] 3286 	ld a,#TK_LPAREN
      002906 CD 19 01         [ 4] 3287 	call expect 
      002909 CD 17 4B         [ 4] 3288 	call next_token 
      00290C A1 02            [ 1] 3289 	cp a,#TK_QSTR 
      00290E 27 0E            [ 1] 3290 	jreq 1$
      002910 A1 04            [ 1] 3291 	cp a,#TK_CHAR 
      002912 27 12            [ 1] 3292 	jreq 2$ 
      002914 A1 82            [ 1] 3293 	cp a,#TK_CFUNC 
      002916 27 03            [ 1] 3294 	jreq 0$
      002918 CC 16 42         [ 2] 3295 	jp syntax_error
      00291B                       3296 0$: ; cfunc 
      00291B FD               [ 4] 3297 	call (x)
      00291C 20 0B            [ 2] 3298 	jra 3$
      00291E                       3299 1$: ; quoted string 
      00291E F6               [ 1] 3300 	ld a,(x)
      00291F 88               [ 1] 3301 	push a  
      002920 CD 17 64         [ 4] 3302 	call skip_string
      002923 84               [ 1] 3303 	pop a  	
      002924 20 03            [ 2] 3304 	jra 3$ 
      002926                       3305 2$: ; character 
      002926 CD 17 8D         [ 4] 3306 	call get_char 
      002929 5F               [ 1] 3307 3$:	clrw x 
      00292A 02               [ 1] 3308 	rlwa x   
      00292B                       3309 4$:	_xpush  
      00292B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00292F 90 F7            [ 1]    2     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002931 90 EF 01         [ 2]    3     ldw (1,y),x 
      002934 A6 07            [ 1] 3310 	ld a,#TK_RPAREN 
      002936 CD 19 01         [ 4] 3311 	call expect
      002939                       3312 9$:	
      002939                       3313 	_xpop  
      002939 90 F6            [ 1]    1     ld a,(y)
      00293B 93               [ 1]    2     ldw x,y 
      00293C EE 01            [ 2]    3     ldw x,(1,x)
      00293E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002942 81               [ 4] 3314 	ret 
                                   3315 
                                   3316 ;---------------------
                                   3317 ;BASIC: KEY
                                   3318 ; wait for a character 
                                   3319 ; received from STDIN 
                                   3320 ; input:
                                   3321 ;	none 
                                   3322 ; output:
                                   3323 ;	a	 character 
                                   3324 ;---------------------
      002943                       3325 key:
      002943 CD 09 1B         [ 4] 3326 	call getc 
      002946 81               [ 4] 3327 	ret
                                   3328 
                                   3329 ;----------------------
                                   3330 ; BASIC: QKEY
                                   3331 ; Return true if there 
                                   3332 ; is a character in 
                                   3333 ; waiting in STDIN 
                                   3334 ; input:
                                   3335 ;  none 
                                   3336 ; output:
                                   3337 ;   A     0|-1
                                   3338 ;-----------------------
      002947                       3339 qkey:: 
      002947 5F               [ 1] 3340 	clrw x 
      002948 C6 00 2E         [ 1] 3341 	ld a,rx1_head
      00294B C0 00 2F         [ 1] 3342 	sub a,rx1_tail 
      00294E 27 03            [ 1] 3343 	jreq 9$ 
      002950 53               [ 2] 3344 	cplw x
      002951 A6 FF            [ 1] 3345 	ld a,#255    
      002953                       3346 9$: 
      002953 81               [ 4] 3347 	ret 
                                   3348 
                                   3349 ;---------------------
                                   3350 ; BASIC: GPIO(port,reg)
                                   3351 ; return gpio register address 
                                   3352 ; expr {PORTA..PORTI}
                                   3353 ; input:
                                   3354 ;   none 
                                   3355 ; output:
                                   3356 ;   A:X 	gpio register address
                                   3357 ;----------------------------
                                   3358 ;	N=PORT
                                   3359 ;	T=REG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002954                       3360 gpio:
      002954 CD 19 0E         [ 4] 3361 	call func_args 
      002957 A1 02            [ 1] 3362 	cp a,#2
      002959 27 03            [ 1] 3363 	jreq 1$
      00295B CC 16 42         [ 2] 3364 	jp syntax_error  
      00295E                       3365 1$:	_at_next 
      00295E 90 E6 03         [ 1]    1     ld a,(3,y)
      002961 93               [ 1]    2     ldw x,y 
      002962 EE 04            [ 2]    3     ldw x,(4,x)
      002964 A3 50 00         [ 2] 3366 	cpw x,#PA_BASE 
      002967 2B 16            [ 1] 3367 	jrmi bad_port
      002969 A3 50 29         [ 2] 3368 	cpw x,#PI_BASE+1 
      00296C 2A 11            [ 1] 3369 	jrpl bad_port
      00296E 89               [ 2] 3370 	pushw x 
      00296F                       3371 	_xpop
      00296F 90 F6            [ 1]    1     ld a,(y)
      002971 93               [ 1]    2     ldw x,y 
      002972 EE 01            [ 2]    3     ldw x,(1,x)
      002974 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002978 72 FB 01         [ 2] 3372 	addw x,(1,sp)
      00297B                       3373 	_drop 2 
      00297B 5B 02            [ 2]    1     addw sp,#2 
      00297D 4F               [ 1] 3374 	clr a 
      00297E 81               [ 4] 3375 	ret
      00297F                       3376 bad_port:
      00297F A6 0A            [ 1] 3377 	ld a,#ERR_BAD_VALUE
      002981 CC 16 44         [ 2] 3378 	jp tb_error
                                   3379 
                                   3380 
                                   3381 ;-------------------------
                                   3382 ; BASIC: UFLASH 
                                   3383 ; return free flash address
                                   3384 ; input:
                                   3385 ;  none 
                                   3386 ; output:
                                   3387 ;	A		TK_INTGR
                                   3388 ;   xstack	free address 
                                   3389 ;---------------------------
      002984                       3390 uflash:
      002984 CD 27 90         [ 4] 3391 	call qsign 
      002987 26 13            [ 1] 3392 	jrne 1$
      002989 AE 36 00         [ 2] 3393 	ldw x,#app_space 
      00298C 72 BB 36 02      [ 2] 3394 	addw x,app_size 
      002990 1C 00 04         [ 2] 3395 	addw x,#4
                                   3396 ; align on 128 bytes block 
      002993 1C 00 80         [ 2] 3397 	addw x,#BLOCK_SIZE 
      002996 9F               [ 1] 3398 	ld a,xl 
      002997 A4 80            [ 1] 3399 	and a,#0x80 
      002999 97               [ 1] 3400 	ld xl,a 
      00299A 20 03            [ 2] 3401 	jra 2$
      00299C AE 36 00         [ 2] 3402 1$:	ldw x,#app_space 
      00299F                       3403 2$:
      00299F 4F               [ 1] 3404 	clr a 
      0029A0 81               [ 4] 3405 	ret 
                                   3406 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                                   3407 
                                   3408 ;---------------------
                                   3409 ; BASIC: USR(addr,arg)
                                   3410 ; execute a function written 
                                   3411 ; in binary code.
                                   3412 ; input:
                                   3413 ;   addr	routine address 
                                   3414 ;   arg 	is an argument
                                   3415 ;           it can be ignore 
                                   3416 ;           by cally. 
                                   3417 ; output:
                                   3418 ;   xstack 	value returned by cally  
                                   3419 ;---------------------
      0029A1                       3420 usr:
      0029A1 CD 19 0E         [ 4] 3421 	call func_args 
      0029A4 A1 02            [ 1] 3422 	cp a,#2
      0029A6 27 03            [ 1] 3423 	jreq 1$  
      0029A8 CC 16 42         [ 2] 3424 	jp syntax_error 
      0029AB                       3425 1$: 
      0029AB                       3426 	_at_next ; A:X addr 
      0029AB 90 E6 03         [ 1]    1     ld a,(3,y)
      0029AE 93               [ 1]    2     ldw x,y 
      0029AF EE 04            [ 2]    3     ldw x,(4,x)
      0029B1 CF 00 19         [ 2] 3427 	ldw ptr16,X 
      0029B4                       3428 	_xpop  ; arg 
      0029B4 90 F6            [ 1]    1     ld a,(y)
      0029B6 93               [ 1]    2     ldw x,y 
      0029B7 EE 01            [ 2]    3     ldw x,(1,x)
      0029B9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029BD                       3429 	_store_top ; overwrite addr 
      0029BD 90 F7            [ 1]    1     ld (y),a 
      0029BF 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029C2 72 CD 00 19      [ 6] 3430     call [ptr16]
      0029C6 81               [ 4] 3431 	ret 
                                   3432 
                                   3433 
                                   3434 ;------------------------------
                                   3435 ; BASIC: BYE 
                                   3436 ; halt mcu in its lowest power mode 
                                   3437 ; wait for reset or external interrupt
                                   3438 ; do a cold start on wakeup.
                                   3439 ;------------------------------
      0029C7                       3440 bye:
      0029C7 72 0D 52 30 FB   [ 2] 3441 	btjf UART1_SR,#UART_SR_TC,.
      0029CC 8E               [10] 3442 	halt
      0029CD CC 00 C3         [ 2] 3443 	jp cold_start  
                                   3444 
                                   3445 ;----------------------------------
                                   3446 ; BASIC: SLEEP 
                                   3447 ; halt mcu until reset or external
                                   3448 ; interrupt.
                                   3449 ; Resume progam after SLEEP command
                                   3450 ;----------------------------------
      0029D0                       3451 sleep:
      0029D0 72 0D 52 30 FB   [ 2] 3452 	btjf UART1_SR,#UART_SR_TC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      0029D5 72 16 00 22      [ 1] 3453 	bset flags,#FSLEEP
      0029D9 8E               [10] 3454 	halt 
      0029DA 81               [ 4] 3455 	ret 
                                   3456 
                                   3457 ;-------------------------------
                                   3458 ; BASIC: PAUSE expr 
                                   3459 ; suspend execution for n msec.
                                   3460 ; input:
                                   3461 ;	none
                                   3462 ; output:
                                   3463 ;	none 
                                   3464 ;------------------------------
      0029DB                       3465 pause:
      0029DB CD 1A 4A         [ 4] 3466 	call expression
      0029DE A1 84            [ 1] 3467 	cp a,#TK_INTGR
      0029E0 27 03            [ 1] 3468 	jreq 1$ 
      0029E2 CC 16 42         [ 2] 3469 	jp syntax_error
      0029E5                       3470 1$: _xpop 
      0029E5 90 F6            [ 1]    1     ld a,(y)
      0029E7 93               [ 1]    2     ldw x,y 
      0029E8 EE 01            [ 2]    3     ldw x,(1,x)
      0029EA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029EE                       3471 pause02:
      0029EE CF 00 12         [ 2] 3472 	ldw timer,x 
      0029F1 CE 00 12         [ 2] 3473 1$: ldw x,timer 
      0029F4 5D               [ 2] 3474 	tnzw x 
      0029F5 27 03            [ 1] 3475 	jreq 2$
      0029F7 8F               [10] 3476 	wfi 
      0029F8 26 F7            [ 1] 3477 	jrne 1$
      0029FA                       3478 2$:	
      0029FA 81               [ 4] 3479 	ret 
                                   3480 
                                   3481 ;------------------------------
                                   3482 ; BASIC: AWU expr
                                   3483 ; halt mcu for 'expr' milliseconds
                                   3484 ; use Auto wakeup peripheral
                                   3485 ; all oscillators stopped except LSI
                                   3486 ; range: 1ms - 511ms
                                   3487 ; input:
                                   3488 ;  none
                                   3489 ; output:
                                   3490 ;  none:
                                   3491 ;------------------------------
      0029FB                       3492 awu:
      0029FB CD 1A 4A         [ 4] 3493   call expression
      0029FE A1 84            [ 1] 3494   cp a,#TK_INTGR
      002A00 27 03            [ 1] 3495   jreq 1$
      002A02 CC 16 42         [ 2] 3496   jp syntax_error
      002A05                       3497 1$: _xpop 
      002A05 90 F6            [ 1]    1     ld a,(y)
      002A07 93               [ 1]    2     ldw x,y 
      002A08 EE 01            [ 2]    3     ldw x,(1,x)
      002A0A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A0E                       3498 awu02:
      002A0E A3 14 00         [ 2] 3499   cpw x,#5120
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A11 2B 0C            [ 1] 3500   jrmi 1$ 
      002A13 35 0F 50 F2      [ 1] 3501   mov AWU_TBR,#15 
      002A17 A6 1E            [ 1] 3502   ld a,#30
      002A19 62               [ 2] 3503   div x,a
      002A1A A6 10            [ 1] 3504   ld a,#16
      002A1C 62               [ 2] 3505   div x,a 
      002A1D 20 1E            [ 2] 3506   jra 4$
      002A1F                       3507 1$: 
      002A1F A3 08 00         [ 2] 3508   cpw x,#2048
      002A22 2B 09            [ 1] 3509   jrmi 2$ 
      002A24 35 0E 50 F2      [ 1] 3510   mov AWU_TBR,#14
      002A28 A6 50            [ 1] 3511   ld a,#80
      002A2A 62               [ 2] 3512   div x,a 
      002A2B 20 10            [ 2] 3513   jra 4$   
      002A2D                       3514 2$:
      002A2D 35 07 50 F2      [ 1] 3515   mov AWU_TBR,#7
      002A31                       3516 3$:  
                                   3517 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A31 A3 00 40         [ 2] 3518   cpw x,#64 
      002A34 23 07            [ 2] 3519   jrule 4$ 
      002A36 72 5C 50 F2      [ 1] 3520   inc AWU_TBR 
      002A3A 54               [ 2] 3521   srlw x 
      002A3B 20 F4            [ 2] 3522   jra 3$ 
      002A3D                       3523 4$:
      002A3D 9F               [ 1] 3524   ld a, xl
      002A3E 4A               [ 1] 3525   dec a 
      002A3F 27 01            [ 1] 3526   jreq 5$
      002A41 4A               [ 1] 3527   dec a 	
      002A42                       3528 5$: 
      002A42 A4 3E            [ 1] 3529   and a,#0x3e 
      002A44 C7 50 F1         [ 1] 3530   ld AWU_APR,a 
      002A47 72 18 50 F0      [ 1] 3531   bset AWU_CSR,#AWU_CSR_AWUEN
      002A4B 8E               [10] 3532   halt 
                                   3533 
      002A4C 81               [ 4] 3534   ret 
                                   3535 
                                   3536 ;------------------------------
                                   3537 ; BASIC: TICKS
                                   3538 ; return msec ticks counter value 
                                   3539 ; input:
                                   3540 ; 	none 
                                   3541 ; output:
                                   3542 ;	X 		TK_INTGR
                                   3543 ;-------------------------------
      002A4D                       3544 get_ticks:
      002A4D C6 00 0F         [ 1] 3545 	ld a,ticks 
      002A50 CE 00 10         [ 2] 3546 	ldw x,ticks+1 
      002A53 81               [ 4] 3547 	ret 
                                   3548 
                                   3549 ;------------------------------
                                   3550 ; BASIC: ABS(expr)
                                   3551 ; return absolute value of expr.
                                   3552 ; input:
                                   3553 ;   none
                                   3554 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3555 ;   xstack    positive int24 
                                   3556 ;-------------------------------
      002A54                       3557 abs:
      002A54 CD 19 0E         [ 4] 3558 	call func_args 
      002A57 A1 01            [ 1] 3559 	cp a,#1 
      002A59 27 03            [ 1] 3560 	jreq 0$ 
      002A5B CC 16 42         [ 2] 3561 	jp syntax_error
      002A5E                       3562 0$:  
      002A5E CD 01 EE         [ 4] 3563 	call abs24 
      002A61                       3564 	_xpop 
      002A61 90 F6            [ 1]    1     ld a,(y)
      002A63 93               [ 1]    2     ldw x,y 
      002A64 EE 01            [ 2]    3     ldw x,(1,x)
      002A66 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A6A 81               [ 4] 3565 	ret 
                                   3566 
                                   3567 ;------------------------------
                                   3568 ; BASIC: LSHIFT(expr1,expr2)
                                   3569 ; logical shift left expr1 by 
                                   3570 ; expr2 bits 
                                   3571 ; output:
                                   3572 ; 	A 		TK_INTGR
                                   3573 ;   X 		result 
                                   3574 ;------------------------------
      002A6B                       3575 lshift:
      002A6B CD 19 0E         [ 4] 3576 	call func_args
      002A6E A1 02            [ 1] 3577 	cp a,#2 
      002A70 27 03            [ 1] 3578 	jreq 1$
      002A72 CC 16 42         [ 2] 3579 	jp syntax_error
      002A75                       3580 1$: _xpop 
      002A75 90 F6            [ 1]    1     ld a,(y)
      002A77 93               [ 1]    2     ldw x,y 
      002A78 EE 01            [ 2]    3     ldw x,(1,x)
      002A7A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A7E 90 93            [ 1] 3581     ldw y,x    
      002A80                       3582 	_at_top  ; T@ 
      002A80 90 F6            [ 1]    1     ld a,(y)
      002A82 93               [ 1]    2     ldw x,y 
      002A83 EE 01            [ 2]    3     ldw x,(1,x)
      002A85 90 5D            [ 2] 3583 	tnzw y 
      002A87 27 07            [ 1] 3584 	jreq 4$
      002A89 98               [ 1] 3585 2$:	rcf 
      002A8A 59               [ 2] 3586 	rlcw x 
      002A8B 49               [ 1] 3587 	rlc a 
      002A8C 90 5A            [ 2] 3588 	decw y 
      002A8E 26 F9            [ 1] 3589 	jrne 2$
      002A90                       3590 4$: _store_top  ; T! 
      002A90 90 F7            [ 1]    1     ld (y),a 
      002A92 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A95 A6 84            [ 1] 3591 	ld a,#TK_INTGR
      002A97 81               [ 4] 3592 	ret
                                   3593 
                                   3594 ;------------------------------
                                   3595 ; BASIC: RSHIFT(expr1,expr2)
                                   3596 ; logical shift right expr1 by 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3597 ; expr2 bits.
                                   3598 ; output:
                                   3599 ; 	A 		TK_INTGR
                                   3600 ;   X 		result 
                                   3601 ;------------------------------
      002A98                       3602 rshift:
      002A98 CD 19 0E         [ 4] 3603 	call func_args
      002A9B A1 02            [ 1] 3604 	cp a,#2 
      002A9D 27 03            [ 1] 3605 	jreq 1$
      002A9F CC 16 42         [ 2] 3606 	jp syntax_error
      002AA2                       3607 1$: _xpop 
      002AA2 90 F6            [ 1]    1     ld a,(y)
      002AA4 93               [ 1]    2     ldw x,y 
      002AA5 EE 01            [ 2]    3     ldw x,(1,x)
      002AA7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AAB 90 93            [ 1] 3608     ldw y,x   
      002AAD                       3609 	_at_top  ; T@  
      002AAD 90 F6            [ 1]    1     ld a,(y)
      002AAF 93               [ 1]    2     ldw x,y 
      002AB0 EE 01            [ 2]    3     ldw x,(1,x)
      002AB2 90 5D            [ 2] 3610 	tnzw y 
      002AB4 27 07            [ 1] 3611 	jreq 4$
      002AB6 98               [ 1] 3612 2$:	rcf 
      002AB7 56               [ 2] 3613 	rrcw x
      002AB8 46               [ 1] 3614 	rrc a  
      002AB9 90 5A            [ 2] 3615 	decw y 
      002ABB 26 F9            [ 1] 3616 	jrne 2$
      002ABD                       3617 4$: _store_top  ; T! 
      002ABD 90 F7            [ 1]    1     ld (y),a 
      002ABF 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AC2 A6 84            [ 1] 3618 	ld a,#TK_INTGR
      002AC4 81               [ 4] 3619 	ret
                                   3620 
                                   3621 ;--------------------------
                                   3622 ; BASIC: FCPU integer
                                   3623 ; set CPU frequency 
                                   3624 ;-------------------------- 
                                   3625 
      002AC5                       3626 fcpu:
      002AC5 A6 84            [ 1] 3627 	ld a,#TK_INTGR
      002AC7 CD 19 01         [ 4] 3628 	call expect 
      002ACA CD 17 7D         [ 4] 3629 	call get_int24 
      002ACD 9F               [ 1] 3630 	ld a,xl 
      002ACE A4 07            [ 1] 3631 	and a,#7 
      002AD0 C7 50 C6         [ 1] 3632 	ld CLK_CKDIVR,a 
      002AD3 81               [ 4] 3633 	ret 
                                   3634 
                                   3635 ;------------------------------
                                   3636 ; BASIC: PMODE pin#, mode 
                                   3637 ; Arduino pin. 
                                   3638 ; define pin as input or output
                                   3639 ; pin#: {0..15}
                                   3640 ; mode: INPUT|OUTPUT  
                                   3641 ;------------------------------
                           000001  3642 	PINNO=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                           000001  3643 	VSIZE=1
      002AD4                       3644 pin_mode:
      002AD4                       3645 	_vars VSIZE 
      002AD4 52 01            [ 2]    1     sub sp,#VSIZE 
      002AD6 CD 19 13         [ 4] 3646 	call arg_list 
      002AD9 A1 02            [ 1] 3647 	cp a,#2 
      002ADB 27 03            [ 1] 3648 	jreq 1$
      002ADD CC 16 42         [ 2] 3649 	jp syntax_error 
      002AE0                       3650 1$: _xpop 
      002AE0 90 F6            [ 1]    1     ld a,(y)
      002AE2 93               [ 1]    2     ldw x,y 
      002AE3 EE 01            [ 2]    3     ldw x,(1,x)
      002AE5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AE9 CF 00 19         [ 2] 3651 	ldw ptr16,x ; mode 
      002AEC                       3652 	_xpop ; Dx pin 
      002AEC 90 F6            [ 1]    1     ld a,(y)
      002AEE 93               [ 1]    2     ldw x,y 
      002AEF EE 01            [ 2]    3     ldw x,(1,x)
      002AF1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AF5 CD 2B 33         [ 4] 3653 	call select_pin 
      002AF8 6B 01            [ 1] 3654 	ld (PINNO,sp),a  
      002AFA A6 01            [ 1] 3655 	ld a,#1 
      002AFC 0D 01            [ 1] 3656 	tnz (PINNO,sp)
      002AFE 27 0D            [ 1] 3657 	jreq 4$
      002B00 48               [ 1] 3658 2$:	sll a 
      002B01 0A 01            [ 1] 3659 	dec (PINNO,sp)
      002B03 26 FB            [ 1] 3660 	jrne 2$ 
      002B05 6B 01            [ 1] 3661 	ld (PINNO,sp),a
      002B07 7B 01            [ 1] 3662 	ld a,(PINNO,sp)
      002B09 EA 03            [ 1] 3663 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B0B E7 03            [ 1] 3664 	ld (GPIO_CR1,x),a 
      002B0D A6 01            [ 1] 3665 4$:	ld a,#OUTP
      002B0F C1 00 0E         [ 1] 3666 	cp a,acc8 
      002B12 27 10            [ 1] 3667 	jreq 6$
                                   3668 ; input mode
                                   3669 ; disable external interrupt 
      002B14 7B 01            [ 1] 3670 	ld a,(PINNO,sp)
      002B16 43               [ 1] 3671 	cpl a 
      002B17 E4 04            [ 1] 3672 	and a,(GPIO_CR2,x)
      002B19 E7 04            [ 1] 3673 	ld (GPIO_CR2,x),a 
                                   3674 ;clear bit in DDR for input mode 
      002B1B 7B 01            [ 1] 3675 	ld a,(PINNO,sp)
      002B1D 43               [ 1] 3676 	cpl a 
      002B1E E4 02            [ 1] 3677 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B20 E7 02            [ 1] 3678 	ld (GPIO_DDR,x),a 
      002B22 20 0C            [ 2] 3679 	jra 9$
      002B24                       3680 6$: ;output mode  
      002B24 7B 01            [ 1] 3681 	ld a,(PINNO,sp)
      002B26 EA 02            [ 1] 3682 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B28 E7 02            [ 1] 3683 	ld (GPIO_DDR,x),a 
      002B2A 7B 01            [ 1] 3684 	ld a,(PINNO,sp)
      002B2C EA 04            [ 1] 3685 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B2E E7 04            [ 1] 3686 	ld (GPIO_CR2,x),a 
      002B30                       3687 9$:	
      002B30                       3688 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B30 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B32 81               [ 4] 3689 	ret
                                   3690 
                                   3691 ;------------------------
                                   3692 ; select Arduino pin 
                                   3693 ; input:
                                   3694 ;   X 	 {0..15} Arduino Dx 
                                   3695 ; output:
                                   3696 ;   A     stm8s208 pin 
                                   3697 ;   X     base address s208 GPIO port 
                                   3698 ;---------------------------
      002B33                       3699 select_pin:
      002B33 58               [ 2] 3700 	sllw x 
      002B34 1C 2B 43         [ 2] 3701 	addw x,#arduino_to_8s208 
      002B37 FE               [ 2] 3702 	ldw x,(x)
      002B38 9F               [ 1] 3703 	ld a,xl 
      002B39 88               [ 1] 3704 	push a 
      002B3A 5E               [ 1] 3705 	swapw x 
      002B3B A6 05            [ 1] 3706 	ld a,#5 
      002B3D 42               [ 4] 3707 	mul x,a 
      002B3E 1C 50 00         [ 2] 3708 	addw x,#GPIO_BASE 
      002B41 84               [ 1] 3709 	pop a 
      002B42 81               [ 4] 3710 	ret 
                                   3711 ; translation from Arduino D0..D15 to stm8s208rb 
      002B43                       3712 arduino_to_8s208:
      002B43 03 06                 3713 .byte 3,6 ; D0 
      002B45 03 05                 3714 .byte 3,5 ; D1 
      002B47 04 00                 3715 .byte 4,0 ; D2 
      002B49 02 01                 3716 .byte 2,1 ; D3
      002B4B 06 00                 3717 .byte 6,0 ; D4
      002B4D 02 02                 3718 .byte 2,2 ; D5
      002B4F 02 03                 3719 .byte 2,3 ; D6
      002B51 03 01                 3720 .byte 3,1 ; D7
      002B53 03 03                 3721 .byte 3,3 ; D8
      002B55 02 04                 3722 .byte 2,4 ; D9
      002B57 04 05                 3723 .byte 4,5 ; D10
      002B59 02 06                 3724 .byte 2,6 ; D11
      002B5B 02 07                 3725 .byte 2,7 ; D12
      002B5D 02 05                 3726 .byte 2,5 ; D13
      002B5F 04 02                 3727 .byte 4,2 ; D14
      002B61 04 01                 3728 .byte 4,1 ; D15
                                   3729 
                                   3730 
                                   3731 ;------------------------------
                                   3732 ; BASIC: RND(expr)
                                   3733 ; return random number 
                                   3734 ; between 1 and expr inclusive
                                   3735 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3736 ; input:
                                   3737 ; 	none 
                                   3738 ; output:
                                   3739 ;	xstack 	random positive integer 
                                   3740 ;------------------------------
      002B63                       3741 random:
      002B63 CD 19 0E         [ 4] 3742 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002B66 A1 01            [ 1] 3743 	cp a,#1
      002B68 27 03            [ 1] 3744 	jreq 1$
      002B6A CC 16 42         [ 2] 3745 	jp syntax_error
      002B6D                       3746 1$:  
      002B6D                       3747 	_xpop   
      002B6D 90 F6            [ 1]    1     ld a,(y)
      002B6F 93               [ 1]    2     ldw x,y 
      002B70 EE 01            [ 2]    3     ldw x,(1,x)
      002B72 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B76 89               [ 2] 3748 	pushw x 
      002B77 88               [ 1] 3749 	push a  
      002B78 A6 80            [ 1] 3750 	ld a,#0x80 
      002B7A 15 01            [ 1] 3751 	bcp a,(1,sp)
      002B7C 27 05            [ 1] 3752 	jreq 2$
      002B7E A6 0A            [ 1] 3753 	ld a,#ERR_BAD_VALUE
      002B80 CC 16 44         [ 2] 3754 	jp tb_error
      002B83                       3755 2$: 
                                   3756 ; acc16=(x<<5)^x 
      002B83 CE 00 14         [ 2] 3757 	ldw x,seedx 
      002B86 58               [ 2] 3758 	sllw x 
      002B87 58               [ 2] 3759 	sllw x 
      002B88 58               [ 2] 3760 	sllw x 
      002B89 58               [ 2] 3761 	sllw x 
      002B8A 58               [ 2] 3762 	sllw x 
      002B8B 9E               [ 1] 3763 	ld a,xh 
      002B8C C8 00 14         [ 1] 3764 	xor a,seedx 
      002B8F C7 00 0D         [ 1] 3765 	ld acc16,a 
      002B92 9F               [ 1] 3766 	ld a,xl 
      002B93 C8 00 15         [ 1] 3767 	xor a,seedx+1 
      002B96 C7 00 0E         [ 1] 3768 	ld acc8,a 
                                   3769 ; seedx=seedy 
      002B99 CE 00 16         [ 2] 3770 	ldw x,seedy 
      002B9C CF 00 14         [ 2] 3771 	ldw seedx,x  
                                   3772 ; seedy=seedy^(seedy>>1)
      002B9F CE 00 16         [ 2] 3773 	ldw x,seedy 
      002BA2 54               [ 2] 3774 	srlw x 
      002BA3 9E               [ 1] 3775 	ld a,xh 
      002BA4 C8 00 16         [ 1] 3776 	xor a,seedy 
      002BA7 C7 00 16         [ 1] 3777 	ld seedy,a  
      002BAA 9F               [ 1] 3778 	ld a,xl 
      002BAB C8 00 17         [ 1] 3779 	xor a,seedy+1 
      002BAE C7 00 17         [ 1] 3780 	ld seedy+1,a 
                                   3781 ; acc16>>3 
      002BB1 CE 00 0D         [ 2] 3782 	ldw x,acc16 
      002BB4 54               [ 2] 3783 	srlw x 
      002BB5 54               [ 2] 3784 	srlw x 
      002BB6 54               [ 2] 3785 	srlw x 
                                   3786 ; x=acc16^x 
      002BB7 9E               [ 1] 3787 	ld a,xh 
      002BB8 C8 00 0D         [ 1] 3788 	xor a,acc16 
      002BBB C7 00 0D         [ 1] 3789 	ld acc16,a 
      002BBE 9F               [ 1] 3790 	ld a,xl 
      002BBF C8 00 0E         [ 1] 3791 	xor a,acc8 
      002BC2 C7 00 0E         [ 1] 3792 	ld acc8,a 
                                   3793 ; seedy=acc16^seedy 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002BC5 C8 00 17         [ 1] 3794 	xor a,seedy+1
      002BC8 97               [ 1] 3795 	ld xl,a 
      002BC9 C6 00 0D         [ 1] 3796 	ld a,acc16 
      002BCC C8 00 16         [ 1] 3797 	xor a,seedy
      002BCF 95               [ 1] 3798 	ld xh,a 
      002BD0 CF 00 16         [ 2] 3799 	ldw seedy,x 
                                   3800 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002BD3 C6 00 15         [ 1] 3801 	ld a,seedx+1
      002BD6 A4 7F            [ 1] 3802 	and a,#127
      002BD8                       3803 	_xpush 
      002BD8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BDC 90 F7            [ 1]    2     ld (y),a 
      002BDE 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BE1 84               [ 1] 3804 	pop a 
      002BE2 85               [ 2] 3805 	popw x 
      002BE3                       3806 	_xpush 
      002BE3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BE7 90 F7            [ 1]    2     ld (y),a 
      002BE9 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BEC CD 03 9C         [ 4] 3807 	call mod24 
      002BEF                       3808 	_xpop
      002BEF 90 F6            [ 1]    1     ld a,(y)
      002BF1 93               [ 1]    2     ldw x,y 
      002BF2 EE 01            [ 2]    3     ldw x,(1,x)
      002BF4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BF8 1C 00 01         [ 2] 3809 	addw x,#1 
      002BFB A9 00            [ 1] 3810 	adc a,#0  
      002BFD 81               [ 4] 3811 	ret 
                                   3812 
                                   3813 ;---------------------------------
                                   3814 ; BASIC: WORDS 
                                   3815 ; affiche la listes des mots du
                                   3816 ; dictionnaire ainsi que le nombre
                                   3817 ; de mots.
                                   3818 ;---------------------------------
                           000001  3819 	WLEN=1 ; word length
                           000002  3820 	LLEN=2 ; character sent to console
                           000003  3821 	WCNT=3 ; count words printed 
                           000003  3822 	VSIZE=3 
      002BFE                       3823 words:
      002BFE 90 89            [ 2] 3824 	pushw y
      002C00                       3825 	_vars VSIZE
      002C00 52 03            [ 2]    1     sub sp,#VSIZE 
      002C02 0F 02            [ 1] 3826 	clr (LLEN,sp)
      002C04 0F 03            [ 1] 3827 	clr (WCNT,sp)
      002C06 90 AE 33 DA      [ 2] 3828 	ldw y,#kword_dict+2
      002C0A 93               [ 1] 3829 0$:	ldw x,y
      002C0B F6               [ 1] 3830 	ld a,(x)
      002C0C A4 0F            [ 1] 3831 	and a,#15 
      002C0E 6B 01            [ 1] 3832 	ld (WLEN,sp),a 
      002C10 0C 03            [ 1] 3833 	inc (WCNT,sp)
      002C12 5C               [ 1] 3834 1$:	incw x 
      002C13 F6               [ 1] 3835 	ld a,(x)
      002C14 CD 09 0B         [ 4] 3836 	call putc 
      002C17 0C 02            [ 1] 3837 	inc (LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C19 0A 01            [ 1] 3838 	dec (WLEN,sp)
      002C1B 26 F5            [ 1] 3839 	jrne 1$
      002C1D A6 46            [ 1] 3840 	ld a,#70
      002C1F 11 02            [ 1] 3841 	cp a,(LLEN,sp)
      002C21 2B 09            [ 1] 3842 	jrmi 2$   
      002C23 A6 20            [ 1] 3843 	ld a,#SPACE 
      002C25 CD 09 0B         [ 4] 3844 	call putc 
      002C28 0C 02            [ 1] 3845 	inc (LLEN,sp) 
      002C2A 20 07            [ 2] 3846 	jra 3$
      002C2C A6 0D            [ 1] 3847 2$: ld a,#CR 
      002C2E CD 09 0B         [ 4] 3848 	call putc 
      002C31 0F 02            [ 1] 3849 	clr (LLEN,sp)
      002C33 72 A2 00 02      [ 2] 3850 3$:	subw y,#2 
      002C37 90 FE            [ 2] 3851 	ldw y,(y)
      002C39 26 CF            [ 1] 3852 	jrne 0$ 
      002C3B A6 0D            [ 1] 3853 	ld a,#CR 
      002C3D CD 09 0B         [ 4] 3854 	call putc  
      002C40 5F               [ 1] 3855 	clrw x 
      002C41 7B 03            [ 1] 3856 	ld a,(WCNT,sp)
      002C43 97               [ 1] 3857 	ld xl,a 
      002C44 CD 17 93         [ 4] 3858 	call prt_i16 
      002C47 AE 2C 52         [ 2] 3859 	ldw x,#words_count_msg
      002C4A CD 09 68         [ 4] 3860 	call puts 
      002C4D                       3861 	_drop VSIZE 
      002C4D 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C4F 90 85            [ 2] 3862 	popw y 
      002C51 81               [ 4] 3863 	ret 
      002C52 20 77 6F 72 64 73 20  3864 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3865 
                                   3866 
                                   3867 ;-----------------------------
                                   3868 ; BASIC: TIMER expr 
                                   3869 ; initialize count down timer 
                                   3870 ;-----------------------------
      002C68                       3871 set_timer:
      002C68 CD 19 13         [ 4] 3872 	call arg_list
      002C6B A1 01            [ 1] 3873 	cp a,#1 
      002C6D 27 03            [ 1] 3874 	jreq 1$
      002C6F CC 16 42         [ 2] 3875 	jp syntax_error
      002C72                       3876 1$: 
      002C72                       3877 	_xpop  
      002C72 90 F6            [ 1]    1     ld a,(y)
      002C74 93               [ 1]    2     ldw x,y 
      002C75 EE 01            [ 2]    3     ldw x,(1,x)
      002C77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C7B CF 00 12         [ 2] 3878 	ldw timer,x 
      002C7E 81               [ 4] 3879 	ret 
                                   3880 
                                   3881 ;------------------------------
                                   3882 ; BASIC: TIMEOUT 
                                   3883 ; return state of timer 
                                   3884 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   3885 ;   A:X     0 not timeout 
                                   3886 ;   A:X     -1 timeout 
                                   3887 ;------------------------------
      002C7F                       3888 timeout:
      002C7F 4F               [ 1] 3889 	clr a 
      002C80 CE 00 12         [ 2] 3890 	ldw x,timer 
      002C83 27 02            [ 1] 3891 	jreq 1$
      002C85 5F               [ 1] 3892 	clrw x
      002C86 81               [ 4] 3893 	ret  
      002C87 43               [ 1] 3894 1$:	cpl a
      002C88 53               [ 2] 3895 	cplw x 
      002C89 81               [ 4] 3896 	ret 
                                   3897  	
                                   3898 
                                   3899 
                                   3900 
                                   3901 ;-----------------------------------
                                   3902 ; BASIC: IWDGEN expr1 
                                   3903 ; enable independant watchdog timer
                                   3904 ; expr1 is delay in multiple of 62.5µsec
                                   3905 ; expr1 -> {1..16383}
                                   3906 ;-----------------------------------
      002C8A                       3907 enable_iwdg:
      002C8A CD 19 13         [ 4] 3908 	call arg_list
      002C8D A1 01            [ 1] 3909 	cp a,#1 
      002C8F 27 03            [ 1] 3910 	jreq 1$
      002C91 CC 16 42         [ 2] 3911 	jp syntax_error 
      002C94                       3912 1$: _xpop  
      002C94 90 F6            [ 1]    1     ld a,(y)
      002C96 93               [ 1]    2     ldw x,y 
      002C97 EE 01            [ 2]    3     ldw x,(1,x)
      002C99 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C9D 4B 00            [ 1] 3913 	push #0
      002C9F 35 CC 50 E0      [ 1] 3914 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CA3 9E               [ 1] 3915 	ld a,xh 
      002CA4 A4 3F            [ 1] 3916 	and a,#0x3f
      002CA6 95               [ 1] 3917 	ld xh,a  
      002CA7 A3 00 FF         [ 2] 3918 2$:	cpw x,#255
      002CAA 23 06            [ 2] 3919 	jrule 3$
      002CAC 0C 01            [ 1] 3920 	inc (1,sp)
      002CAE 98               [ 1] 3921 	rcf 
      002CAF 56               [ 2] 3922 	rrcw x 
      002CB0 20 F5            [ 2] 3923 	jra 2$
      002CB2 35 55 50 E0      [ 1] 3924 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CB6 84               [ 1] 3925 	pop a  
      002CB7 C7 50 E1         [ 1] 3926 	ld IWDG_PR,a 
      002CBA 9F               [ 1] 3927 	ld a,xl
      002CBB 4A               [ 1] 3928 	dec a 
      002CBC 35 55 50 E0      [ 1] 3929 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CC0 C7 50 E2         [ 1] 3930 	ld IWDG_RLR,a 
      002CC3 35 AA 50 E0      [ 1] 3931 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002CC7 81               [ 4] 3932 	ret 
                                   3933 
                                   3934 
                                   3935 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   3936 ; BASIC: IWDGREF  
                                   3937 ; refresh independant watchdog count down 
                                   3938 ; timer before it reset MCU. 
                                   3939 ;-----------------------------------
      002CC8                       3940 refresh_iwdg:
      002CC8 35 AA 50 E0      [ 1] 3941 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CCC 81               [ 4] 3942 	ret 
                                   3943 
                                   3944 
                                   3945 ;-------------------------------------
                                   3946 ; BASIC: LOG2(expr)
                                   3947 ; return logarithm base 2 of expr 
                                   3948 ; this is the position of most significant
                                   3949 ; bit set. 
                                   3950 ; input: 
                                   3951 ; output:
                                   3952 ;   A     TK_INTGR 
                                   3953 ;   xstack log2 
                                   3954 ;*********************************
      002CCD                       3955 log2:
      002CCD CD 19 0E         [ 4] 3956 	call func_args 
      002CD0 A1 01            [ 1] 3957 	cp a,#1 
      002CD2 27 03            [ 1] 3958 	jreq 1$
      002CD4 CC 16 42         [ 2] 3959 	jp syntax_error 
      002CD7                       3960 1$: 
      002CD7                       3961 	_xpop    
      002CD7 90 F6            [ 1]    1     ld a,(y)
      002CD9 93               [ 1]    2     ldw x,y 
      002CDA EE 01            [ 2]    3     ldw x,(1,x)
      002CDC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CE0 4D               [ 1] 3962 	tnz a
      002CE1 26 08            [ 1] 3963 	jrne 2$ 
      002CE3 5D               [ 2] 3964 	tnzw x 
      002CE4 26 05            [ 1] 3965 	jrne 2$
      002CE6 A6 0A            [ 1] 3966 	ld a,#ERR_BAD_VALUE
      002CE8 CC 16 44         [ 2] 3967 	jp tb_error 
      002CEB 4B 18            [ 1] 3968 2$: push #24 
      002CED 59               [ 2] 3969 3$: rlcw x 
      002CEE 49               [ 1] 3970     rlc a 
      002CEF 25 04            [ 1] 3971 	jrc 4$
      002CF1 0A 01            [ 1] 3972 	dec (1,sp) 
      002CF3 26 F8            [ 1] 3973 	jrne 3$
      002CF5 5F               [ 1] 3974 4$: clrw x 
      002CF6 84               [ 1] 3975     pop a 
      002CF7 4A               [ 1] 3976 	dec a
      002CF8 02               [ 1] 3977 	rlwa x  
      002CF9                       3978 9$:	
      002CF9 81               [ 4] 3979 	ret 
                                   3980 
                                   3981 ;-----------------------------------
                                   3982 ; BASIC: BIT(expr) 
                                   3983 ; expr ->{0..23}
                                   3984 ; return 2^expr 
                                   3985 ; output:
                                   3986 ;    A:X    2^expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   3987 ;-----------------------------------
      002CFA                       3988 bitmask:
      002CFA CD 19 0E         [ 4] 3989     call func_args 
      002CFD A1 01            [ 1] 3990 	cp a,#1
      002CFF 27 03            [ 1] 3991 	jreq 1$
      002D01 CC 16 42         [ 2] 3992 	jp syntax_error 
      002D04                       3993 1$: _xpop 
      002D04 90 F6            [ 1]    1     ld a,(y)
      002D06 93               [ 1]    2     ldw x,y 
      002D07 EE 01            [ 2]    3     ldw x,(1,x)
      002D09 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D0D 9F               [ 1] 3994 	ld a,xl 
      002D0E AE 00 01         [ 2] 3995 	ldw x,#1 
      002D11 A4 17            [ 1] 3996 	and a,#23
      002D13 27 0A            [ 1] 3997 	jreq 9$
      002D15 88               [ 1] 3998 	push a 
      002D16 4F               [ 1] 3999 	clr a 
      002D17                       4000 2$: 
      002D17 58               [ 2] 4001 	slaw x 
      002D18 49               [ 1] 4002 	rlc a 	
      002D19 0A 01            [ 1] 4003 	dec (1,sp)
      002D1B 26 FA            [ 1] 4004 	jrne 2$ 
      002D1D                       4005 4$:
      002D1D                       4006     _drop 1 
      002D1D 5B 01            [ 2]    1     addw sp,#1 
      002D1F 81               [ 4] 4007 9$:	ret 
                                   4008 
                                   4009 ;------------------------------
                                   4010 ; BASIC: DO 
                                   4011 ; initiate a DO ... UNTIL loop 
                                   4012 ;------------------------------
                           000003  4013 	DOLP_ADR=3 
                           000005  4014 	DOLP_INW=5
                           000004  4015 	VSIZE=4 
      002D20                       4016 do_loop:
      002D20 85               [ 2] 4017 	popw x 
      002D21                       4018 	_vars VSIZE 
      002D21 52 04            [ 2]    1     sub sp,#VSIZE 
      002D23 89               [ 2] 4019 	pushw x 
      002D24 CE 00 04         [ 2] 4020 	ldw x,basicptr 
      002D27 1F 03            [ 2] 4021 	ldw (DOLP_ADR,sp),x
      002D29 CE 00 00         [ 2] 4022 	ldw x,in.w 
      002D2C 1F 05            [ 2] 4023 	ldw (DOLP_INW,sp),x
      002D2E 72 5C 00 1F      [ 1] 4024 	inc loop_depth 
      002D32 81               [ 4] 4025 	ret 
                                   4026 
                                   4027 ;--------------------------------
                                   4028 ; BASIC: UNTIL expr 
                                   4029 ; loop if exprssion is false 
                                   4030 ; else terminate loop
                                   4031 ;--------------------------------
      002D33                       4032 until: 
      002D33 72 5D 00 1F      [ 1] 4033 	tnz loop_depth 
      002D37 26 03            [ 1] 4034 	jrne 1$ 
      002D39 CC 16 42         [ 2] 4035 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D3C                       4036 1$: 
      002D3C CD 1B 63         [ 4] 4037 	call condition  
      002D3F                       4038 	_xpop 
      002D3F 90 F6            [ 1]    1     ld a,(y)
      002D41 93               [ 1]    2     ldw x,y 
      002D42 EE 01            [ 2]    3     ldw x,(1,x)
      002D44 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D48 4D               [ 1] 4039 	tnz a 
      002D49 26 13            [ 1] 4040 	jrne 9$ 
      002D4B 5D               [ 2] 4041 	tnzw x 
      002D4C 26 10            [ 1] 4042 	jrne 9$ 
      002D4E 1E 03            [ 2] 4043 	ldw x,(DOLP_ADR,sp)
      002D50 CF 00 04         [ 2] 4044 	ldw basicptr,x 
      002D53 E6 02            [ 1] 4045 	ld a,(2,x)
      002D55 C7 00 03         [ 1] 4046 	ld count,a 
      002D58 1E 05            [ 2] 4047 	ldw x,(DOLP_INW,sp)
      002D5A CF 00 00         [ 2] 4048 	ldw in.w,x 
      002D5D 81               [ 4] 4049 	ret 
      002D5E                       4050 9$:	; remove loop data from stack  
      002D5E 85               [ 2] 4051 	popw x
      002D5F                       4052 	_drop VSIZE
      002D5F 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D61 72 5A 00 1F      [ 1] 4053 	dec loop_depth 
      002D65 FC               [ 2] 4054 	jp (x)
                                   4055 
                                   4056 ;--------------------------
                                   4057 ; BASIC: PORTA...PORTI  
                                   4058 ;  return constant value 
                                   4059 ;  PORT  base address 
                                   4060 ;---------------------------
      002D66                       4061 const_porta:
      002D66 AE 50 00         [ 2] 4062 	ldw x,#PA_BASE 
      002D69 4F               [ 1] 4063 	clr a 
      002D6A 81               [ 4] 4064 	ret 
      002D6B                       4065 const_portb:
      002D6B AE 50 05         [ 2] 4066 	ldw x,#PB_BASE 
      002D6E 4F               [ 1] 4067 	clr a 
      002D6F 81               [ 4] 4068 	ret 
      002D70                       4069 const_portc:
      002D70 AE 50 0A         [ 2] 4070 	ldw x,#PC_BASE 
      002D73 4F               [ 1] 4071 	clr a 
      002D74 81               [ 4] 4072 	ret 
      002D75                       4073 const_portd:
      002D75 AE 50 0F         [ 2] 4074 	ldw x,#PD_BASE 
      002D78 4F               [ 1] 4075 	clr a 
      002D79 81               [ 4] 4076 	ret 
      002D7A                       4077 const_porte:
      002D7A AE 50 14         [ 2] 4078 	ldw x,#PE_BASE 
      002D7D 4F               [ 1] 4079 	clr a 
      002D7E 81               [ 4] 4080 	ret 
      002D7F                       4081 const_portf:
      002D7F AE 50 19         [ 2] 4082 	ldw x,#PF_BASE 
      002D82 4F               [ 1] 4083 	clr a 
      002D83 81               [ 4] 4084 	ret 
      002D84                       4085 const_portg:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002D84 AE 50 1E         [ 2] 4086 	ldw x,#PG_BASE 
      002D87 4F               [ 1] 4087 	clr a 
      002D88 81               [ 4] 4088 	ret 
      002D89                       4089 const_porth:
      002D89 AE 50 23         [ 2] 4090 	ldw x,#PH_BASE 
      002D8C 4F               [ 1] 4091 	clr a 
      002D8D 81               [ 4] 4092 	ret 
      002D8E                       4093 const_porti:
      002D8E AE 50 28         [ 2] 4094 	ldw x,#PI_BASE 
      002D91 4F               [ 1] 4095 	clr a 
      002D92 81               [ 4] 4096 	ret 
                                   4097 
                                   4098 ;-------------------------------
                                   4099 ; following return constant 
                                   4100 ; related to GPIO register offset 
                                   4101 ;---------------------------------
      002D93                       4102 const_odr:
      002D93 4F               [ 1] 4103 	clr a 
      002D94 AE 00 00         [ 2] 4104 	ldw x,#GPIO_ODR
      002D97 81               [ 4] 4105 	ret 
      002D98                       4106 const_idr:
      002D98 4F               [ 1] 4107 	clr a 
      002D99 AE 00 01         [ 2] 4108 	ldw x,#GPIO_IDR
      002D9C 81               [ 4] 4109 	ret 
      002D9D                       4110 const_ddr:
      002D9D 4F               [ 1] 4111 	clr a
      002D9E AE 00 02         [ 2] 4112 	ldw x,#GPIO_DDR
      002DA1 81               [ 4] 4113 	ret 
      002DA2                       4114 const_cr1:
      002DA2 4F               [ 1] 4115 	clr a 
      002DA3 AE 00 03         [ 2] 4116 	ldw x,#GPIO_CR1
      002DA6 81               [ 4] 4117 	ret 
      002DA7                       4118 const_cr2:
      002DA7 4F               [ 1] 4119 	clr a
      002DA8 AE 00 04         [ 2] 4120 	ldw x,#GPIO_CR2
      002DAB 81               [ 4] 4121 	ret 
                                   4122 ;-------------------------
                                   4123 ; BASIC: POUT 
                                   4124 ;  constant for port mode
                                   4125 ;  used by PMODE 
                                   4126 ;  to set pin as output
                                   4127 ;------------------------
      002DAC                       4128 const_output:
      002DAC 4F               [ 1] 4129 	clr a 
      002DAD AE 00 01         [ 2] 4130 	ldw x,#OUTP
      002DB0 81               [ 4] 4131 	ret 
                                   4132 
                                   4133 ;-------------------------
                                   4134 ; BASIC: PINP 
                                   4135 ;  constant for port mode
                                   4136 ;  used by PMODE 
                                   4137 ;  to set pin as input
                                   4138 ;------------------------
      002DB1                       4139 const_input:
      002DB1 4F               [ 1] 4140 	clr a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002DB2 AE 00 00         [ 2] 4141 	ldw x,#INP 
      002DB5 81               [ 4] 4142 	ret 
                                   4143 	
                                   4144 ;-----------------------
                                   4145 ; memory area constants
                                   4146 ;-----------------------
      002DB6                       4147 const_eeprom_base:
      002DB6 4F               [ 1] 4148 	clr a  
      002DB7 AE 40 00         [ 2] 4149 	ldw x,#EEPROM_BASE 
      002DBA 81               [ 4] 4150 	ret 
                                   4151 
                                   4152 ;---------------------------
                                   4153 ; BASIC: DATA 
                                   4154 ; when the interpreter find 
                                   4155 ; a DATA line it skip it.
                                   4156 ;---------------------------
      002DBB                       4157 data:
      002DBB 55 00 03 00 01   [ 1] 4158 	mov in,count 
      002DC0 81               [ 4] 4159 	ret 
                                   4160 
                                   4161 ;------------------------------
                                   4162 ; check if it is a DATA line 
                                   4163 ; input: 
                                   4164 ;    X    line address 
                                   4165 ; output:
                                   4166 ;    Z    set if DATA line 
                                   4167 ;----------------------------
      002DC1                       4168 is_data_line:
      002DC1 89               [ 2] 4169 	pushw x 
      002DC2 E6 03            [ 1] 4170 	ld a,(3,x)
      002DC4 A1 80            [ 1] 4171 	cp a,#TK_CMD 
      002DC6 26 05            [ 1] 4172 	jrne 9$
      002DC8 EE 04            [ 2] 4173 	ldw x,(4,x)
      002DCA A3 2D BB         [ 2] 4174 	cpw x,#data  
      002DCD 85               [ 2] 4175 9$: popw x 
      002DCE 81               [ 4] 4176 	ret 
                                   4177 
                                   4178 ;---------------------------------
                                   4179 ; BASIC: RESTORE [line#]
                                   4180 ; set data_ptr to first data line
                                   4181 ; if no DATA found pointer set to
                                   4182 ; zero.
                                   4183 ; if a line# is given as argument 
                                   4184 ; a data line with that number 
                                   4185 ; is searched and the data pointer 
                                   4186 ; is set to it. If there is no 
                                   4187 ; data line with that number 
                                   4188 ; the program is interrupted. 
                                   4189 ;---------------------------------
      002DCF                       4190 restore:
      002DCF 5F               [ 1] 4191 	clrw x 
      002DD0 CF 00 06         [ 2] 4192 	ldw data_ptr,x 
      002DD3 CF 00 08         [ 2] 4193 	ldw data_ofs,x 
      002DD6 CE 00 1B         [ 2] 4194 	ldw x,txtbgn 
      002DD9 CD 17 4B         [ 4] 4195 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002DDC A1 84            [ 1] 4196 	cp a,#TK_INTGR
      002DDE 26 10            [ 1] 4197 	jrne 0$
      002DE0 CD 17 7D         [ 4] 4198 	call get_int24
      002DE3 90 89            [ 2] 4199 	pushw y 
      002DE5 4F               [ 1] 4200 	clr a 
      002DE6 CD 0C 45         [ 4] 4201 	call search_lineno  
      002DE9 90 85            [ 2] 4202 	popw y 
      002DEB 5D               [ 2] 4203 	tnzw x 
      002DEC 26 17            [ 1] 4204 	jrne set_data_pointer 
      002DEE 20 44            [ 2] 4205 	jra data_error 
      002DF0                       4206 0$:
      002DF0                       4207 	_unget_token  
      002DF0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4208 ; search first DATA line 	
      002DF5 C3 00 1D         [ 2] 4209 1$:	cpw x,txtend
      002DF8 24 3A            [ 1] 4210 	jruge data_error 
      002DFA                       4211 2$:	
      002DFA CD 2D C1         [ 4] 4212 	call is_data_line 
      002DFD 26 00            [ 1] 4213 	jrne 4$
      002DFF CD 2E 12         [ 4] 4214 4$:	call try_next_line 
      002E02 26 FB            [ 1] 4215 	jrne 4$ 
      002E04 81               [ 4] 4216 	ret 
                                   4217 
                                   4218 ;---------------------
                                   4219 ; set data pointer 
                                   4220 ; variables at new line 
                                   4221 ; input:
                                   4222 ;    X    line address 
                                   4223 ;----------------------
      002E05                       4224 set_data_pointer:
      002E05 CF 00 06         [ 2] 4225 	ldw data_ptr,x
      002E08 E6 02            [ 1] 4226 	ld a,(2,x)
      002E0A C7 00 09         [ 1] 4227 	ld data_len,a 
      002E0D 35 06 00 08      [ 1] 4228 	mov data_ofs,#FIRST_DATA_ITEM
      002E11 81               [ 4] 4229 	ret 
                                   4230 
                                   4231 
                                   4232 ;--------------------
                                   4233 ; at end of data line 
                                   4234 ; check if next line 
                                   4235 ; is a data line 
                                   4236 ; input:
                                   4237 ;    X   actual line address 
                                   4238 ;  
                                   4239 ;-------------------
      002E12                       4240 try_next_line: 
      002E12 E6 02            [ 1] 4241 	ld a,(2,x)
      002E14 C7 00 0E         [ 1] 4242 	ld acc8,a 
      002E17 72 5F 00 0D      [ 1] 4243 	clr acc16 
      002E1B 72 BB 00 0D      [ 2] 4244 	addw x,acc16 
      002E1F C3 00 1D         [ 2] 4245 	cpw x,txtend 
      002E22 25 02            [ 1] 4246 	jrult 1$
      002E24 20 0E            [ 2] 4247 	jra data_error 
      002E26                       4248 1$:	
      002E26 CD 2D C1         [ 4] 4249 	call is_data_line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002E29 27 04            [ 1] 4250 	jreq 2$
      002E2B A6 01            [ 1] 4251 	ld a,#1  
      002E2D 20 04            [ 2] 4252 	jra 9$
      002E2F CD 2E 05         [ 4] 4253 2$:	call set_data_pointer
      002E32 4F               [ 1] 4254 	clr a  
      002E33 81               [ 4] 4255 9$:	ret 
      002E34                       4256 data_error:	
      002E34 A6 0C            [ 1] 4257     ld a,#ERR_NO_DATA 
      002E36 CC 16 44         [ 2] 4258 	jp tb_error 
                                   4259 
                                   4260 
                                   4261 ;---------------------------------
                                   4262 ; BASIC: READ 
                                   4263 ; return next data item | 0 
                                   4264 ;---------------------------------
                           000001  4265 	CTX_BPTR=1 
                           000003  4266 	CTX_IN=3 
                           000004  4267 	CTX_COUNT=4 
                           000005  4268 	INT24=5
                           000007  4269 	VSIZE=7 
      002E39                       4270 read:
      002E39                       4271 	_vars  VSIZE 
      002E39 52 07            [ 2]    1     sub sp,#VSIZE 
      002E3B CD 20 3A         [ 4] 4272 	call save_context
      002E3E                       4273 read01:	
      002E3E C6 00 08         [ 1] 4274 	ld a,data_ofs
      002E41 C1 00 09         [ 1] 4275 	cp a,data_len 
      002E44 27 37            [ 1] 4276 	jreq 2$ ; end of line  
      002E46                       4277 0$:
      002E46 CE 00 06         [ 2] 4278 	ldw x,data_ptr 
      002E49 CF 00 04         [ 2] 4279 	ldw basicptr,x 
      002E4C 55 00 08 00 01   [ 1] 4280 	mov in,data_ofs 
      002E51 55 00 09 00 03   [ 1] 4281 	mov count,data_len  
      002E56 CD 1A 4A         [ 4] 4282 	call expression 
      002E59 A1 84            [ 1] 4283 	cp a,#TK_INTGR 
      002E5B 27 03            [ 1] 4284 	jreq 1$ 
      002E5D CC 16 42         [ 2] 4285 	jp syntax_error 
      002E60                       4286 1$:
      002E60 CD 17 4B         [ 4] 4287 	call next_token ; skip comma
      002E63 CE 00 04         [ 2] 4288 	ldw x,basicptr 
      002E66 CF 00 06         [ 2] 4289 	ldw data_ptr,x 
      002E69 55 00 01 00 08   [ 1] 4290 	mov data_ofs,in 
      002E6E CD 20 4A         [ 4] 4291 	call rest_context
      002E71                       4292 	_xpop 
      002E71 90 F6            [ 1]    1     ld a,(y)
      002E73 93               [ 1]    2     ldw x,y 
      002E74 EE 01            [ 2]    3     ldw x,(1,x)
      002E76 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E7A                       4293 	_drop VSIZE 
      002E7A 5B 07            [ 2]    1     addw sp,#VSIZE 
      002E7C 81               [ 4] 4294 	ret 
      002E7D                       4295 2$: ; end of line reached 
                                   4296 	; try next line 
      002E7D CE 00 06         [ 2] 4297 	ldw x,data_ptr  
      002E80 CD 2E 12         [ 4] 4298 	call try_next_line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002E83 27 C1            [ 1] 4299 	jreq 0$ 
      002E85 20 AD            [ 2] 4300 	jra data_error 
                                   4301 
                                   4302 ;---------------------------------
                                   4303 ; BASIC: SPIEN clkdiv, 0|1  
                                   4304 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4305 ; if clkdiv==-1 disable SPI
                                   4306 ; 0|1 -> disable|enable  
                                   4307 ;--------------------------------- 
                           000005  4308 SPI_CS_BIT=5
      002E87                       4309 spi_enable:
      002E87 CD 19 13         [ 4] 4310 	call arg_list 
      002E8A A1 02            [ 1] 4311 	cp a,#2
      002E8C 27 03            [ 1] 4312 	jreq 1$
      002E8E CC 16 42         [ 2] 4313 	jp syntax_error 
      002E91                       4314 1$: 
      002E91 72 12 50 C7      [ 1] 4315 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002E95 85               [ 2] 4316 	popw x  
      002E96 5D               [ 2] 4317 	tnzw x 
      002E97 27 21            [ 1] 4318 	jreq spi_disable 
      002E99 85               [ 2] 4319 	popw x 
      002E9A A6 08            [ 1] 4320 	ld a,#(1<<SPI_CR1_BR)
      002E9C 42               [ 4] 4321 	mul x,a 
      002E9D 9F               [ 1] 4322 	ld a,xl 
      002E9E C7 52 00         [ 1] 4323 	ld SPI_CR1,a 
                                   4324 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EA1 72 1A 50 14      [ 1] 4325 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EA5 72 1A 50 16      [ 1] 4326 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4327 ; configure SPI as master mode 0.	
      002EA9 72 14 52 00      [ 1] 4328 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4329 ; ~CS line controlled by sofware 	
      002EAD 72 12 52 01      [ 1] 4330 	bset SPI_CR2,#SPI_CR2_SSM 
      002EB1 72 10 52 01      [ 1] 4331     bset SPI_CR2,#SPI_CR2_SSI 
                                   4332 ; enable SPI
      002EB5 72 1C 52 00      [ 1] 4333 	bset SPI_CR1,#SPI_CR1_SPE 	
      002EB9 81               [ 4] 4334 	ret 
      002EBA                       4335 spi_disable:
      002EBA                       4336 	_drop #2; throw first argument.
      002EBA 5B 02            [ 2]    1     addw sp,##2 
                                   4337 ; wait spi idle 
      002EBC A6 82            [ 1] 4338 1$:	ld a,#0x82 
      002EBE C4 52 03         [ 1] 4339 	and a,SPI_SR
      002EC1 A1 02            [ 1] 4340 	cp a,#2 
      002EC3 26 F7            [ 1] 4341 	jrne 1$
      002EC5 72 1D 52 00      [ 1] 4342 	bres SPI_CR1,#SPI_CR1_SPE
      002EC9 72 13 50 C7      [ 1] 4343 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002ECD 72 1B 50 16      [ 1] 4344 	bres PE_DDR,#SPI_CS_BIT 
      002ED1 81               [ 4] 4345 	ret 
                                   4346 
      002ED2                       4347 spi_clear_error:
      002ED2 A6 78            [ 1] 4348 	ld a,#0x78 
      002ED4 C5 52 03         [ 1] 4349 	bcp a,SPI_SR 
      002ED7 27 04            [ 1] 4350 	jreq 1$
      002ED9 72 5F 52 03      [ 1] 4351 	clr SPI_SR 
      002EDD 81               [ 4] 4352 1$: ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4353 
      002EDE                       4354 spi_send_byte:
      002EDE 88               [ 1] 4355 	push a 
      002EDF CD 2E D2         [ 4] 4356 	call spi_clear_error
      002EE2 84               [ 1] 4357 	pop a 
      002EE3 72 03 52 03 FB   [ 2] 4358 	btjf SPI_SR,#SPI_SR_TXE,.
      002EE8 C7 52 04         [ 1] 4359 	ld SPI_DR,a
      002EEB 72 01 52 03 FB   [ 2] 4360 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002EF0 C6 52 04         [ 1] 4361 	ld a,SPI_DR 
      002EF3 81               [ 4] 4362 	ret 
                                   4363 
      002EF4                       4364 spi_rcv_byte:
      002EF4 A6 FF            [ 1] 4365 	ld a,#255
      002EF6 72 01 52 03 E3   [ 2] 4366 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002EFB C6 52 04         [ 1] 4367 	ld a,SPI_DR 
      002EFE 81               [ 4] 4368 	ret
                                   4369 
                                   4370 ;------------------------------
                                   4371 ; BASIC: SPIWR byte [,byte]
                                   4372 ; write 1 or more byte
                                   4373 ;------------------------------
      002EFF                       4374 spi_write:
      002EFF CD 1A 4A         [ 4] 4375 	call expression
      002F02 A1 84            [ 1] 4376 	cp a,#TK_INTGR 
      002F04 27 03            [ 1] 4377 	jreq 1$
      002F06 CC 16 42         [ 2] 4378 	jp syntax_error 
      002F09                       4379 1$:	
      002F09 9F               [ 1] 4380 	ld a,xl 
      002F0A CD 2E DE         [ 4] 4381 	call spi_send_byte 
      002F0D CD 17 4B         [ 4] 4382 	call next_token 
      002F10 A1 08            [ 1] 4383 	cp a,#TK_COMMA 
      002F12 26 02            [ 1] 4384 	jrne 2$ 
      002F14 20 E9            [ 2] 4385 	jra spi_write 
      002F16 4D               [ 1] 4386 2$:	tnz a 
      002F17 27 05            [ 1] 4387 	jreq 3$
      002F19                       4388 	_unget_token  
      002F19 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F1E 81               [ 4] 4389 3$:	ret 
                                   4390 
                                   4391 
                                   4392 ;-------------------------------
                                   4393 ; BASIC: SPIRD 	
                                   4394 ; read one byte from SPI 
                                   4395 ;-------------------------------
      002F1F                       4396 spi_read:
      002F1F CD 2E F4         [ 4] 4397 	call spi_rcv_byte 
      002F22 5F               [ 1] 4398 	clrw x 
      002F23 97               [ 1] 4399 	ld xl,a 
      002F24 4F               [ 1] 4400 	clr a  
      002F25 81               [ 4] 4401 	ret 
                                   4402 
                                   4403 ;------------------------------
                                   4404 ; BASIC: SPISEL 0|1 
                                   4405 ; set state of ~CS line
                                   4406 ; 0|1 deselect|select  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4407 ;------------------------------
      002F26                       4408 spi_select:
      002F26 CD 17 4B         [ 4] 4409 	call next_token 
      002F29 A1 84            [ 1] 4410 	cp a,#TK_INTGR 
      002F2B 27 03            [ 1] 4411 	jreq 1$
      002F2D CC 16 42         [ 2] 4412 	jp syntax_error 
      002F30 5D               [ 2] 4413 1$: tnzw x  
      002F31 27 05            [ 1] 4414 	jreq cs_high 
      002F33 72 1B 50 14      [ 1] 4415 	bres PE_ODR,#SPI_CS_BIT
      002F37 81               [ 4] 4416 	ret 
      002F38                       4417 cs_high: 
      002F38 72 1A 50 14      [ 1] 4418 	bset PE_ODR,#SPI_CS_BIT
      002F3C 81               [ 4] 4419 	ret 
                                   4420 
                                   4421 ;-------------------------------
                                   4422 ; BASIC: PAD 
                                   4423 ; Return pad buffer address.
                                   4424 ;------------------------------
      002F3D                       4425 pad_ref:
      002F3D AE 16 E0         [ 2] 4426 	ldw x,#pad 
      002F40 4F               [ 1] 4427 	clr a
      002F41 81               [ 4] 4428 	ret 
                                   4429 
                                   4430 ;****************************
                                   4431 ; expression stack 
                                   4432 ; manipulation routines
                                   4433 ;****************************
                                   4434 
                                   4435 ;-----------------------------
                                   4436 ; BASIC: PUSH expr|rel|cond 
                                   4437 ; push the result on xtack
                                   4438 ;-----------------------------
      002F42                       4439 xpush:
      002F42 CD 1B 63         [ 4] 4440 	call condition 
      002F45 81               [ 4] 4441 	ret 
                                   4442 
                                   4443 ;------------------------------
                                   4444 ; BASIC: POP 
                                   4445 ; pop top of xstack 
                                   4446 ;------------------------------
      002F46                       4447 xpop:
      002F46                       4448 	_xpop 
      002F46 90 F6            [ 1]    1     ld a,(y)
      002F48 93               [ 1]    2     ldw x,y 
      002F49 EE 01            [ 2]    3     ldw x,(1,x)
      002F4B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F4F 81               [ 4] 4449 	ret 
                                   4450 
                                   4451 
                                   4452 ;------------------------------
                                   4453 ; BASIC: ALLOC expr 
                                   4454 ; allocate expr element on xtack 
                                   4455 ;-------------------------------
      002F50                       4456 xalloc: 
      002F50 CD 1A 4A         [ 4] 4457 	call expression 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002F53 A1 84            [ 1] 4458 	cp a,#TK_INTGR
      002F55 27 03            [ 1] 4459 	jreq 1$ 
      002F57 CC 16 42         [ 2] 4460 	jp syntax_error
      002F5A                       4461 1$: _xpop 
      002F5A 90 F6            [ 1]    1     ld a,(y)
      002F5C 93               [ 1]    2     ldw x,y 
      002F5D EE 01            [ 2]    3     ldw x,(1,x)
      002F5F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F63 4D               [ 1] 4462 	tnz a 
      002F64 27 05            [ 1] 4463 	jreq 3$ 
      002F66 A6 0A            [ 1] 4464 2$:	ld a,#ERR_BAD_VALUE
      002F68 CC 16 44         [ 2] 4465 	jp tb_error 
      002F6B A3 00 14         [ 2] 4466 3$: cpw x,#XSTACK_SIZE 
      002F6E 22 F6            [ 1] 4467 	jrugt 2$
      002F70 A6 03            [ 1] 4468 	ld a,#CELL_SIZE 
      002F72 42               [ 4] 4469 	mul x,a 
      002F73 CF 00 0D         [ 2] 4470 	ldw acc16,x 
      002F76 72 B2 00 0D      [ 2] 4471 	subw y,acc16 
      002F7A 90 A3 17 60      [ 2] 4472 	cpw y,#xstack_full
      002F7E 22 05            [ 1] 4473 	jrugt 9$
      002F80 A6 01            [ 1] 4474 	ld a,#ERR_MEM_FULL
      002F82 CC 16 44         [ 2] 4475 	jp tb_error 
      002F85                       4476 9$:	 
      002F85 81               [ 4] 4477 	ret 
                                   4478 
                                   4479 
                                   4480 ;------------------------------
                                   4481 ;  BASIC DROP expr 
                                   4482 ;  expr in range {0..XSTACK_SIZE}
                                   4483 ;  discard n elements from xtack
                                   4484 ;------------------------------
      002F86                       4485 xdrop:
      002F86 CD 1A 4A         [ 4] 4486 	call expression 
      002F89 A1 84            [ 1] 4487 	cp a,#TK_INTGR
      002F8B 27 03            [ 1] 4488 	jreq 1$ 
      002F8D CC 16 42         [ 2] 4489 	jp syntax_error 
      002F90                       4490 1$:	_xpop 
      002F90 90 F6            [ 1]    1     ld a,(y)
      002F92 93               [ 1]    2     ldw x,y 
      002F93 EE 01            [ 2]    3     ldw x,(1,x)
      002F95 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F99 9F               [ 1] 4491 	ld a,xl 
      002F9A A4 1F            [ 1] 4492 	and a,#0x1f 
      002F9C 5F               [ 1] 4493 	clrw x 
      002F9D 97               [ 1] 4494 	ld xl,a 
      002F9E A6 03            [ 1] 4495 	ld a,#CELL_SIZE 
      002FA0 42               [ 4] 4496 	mul x,a 
      002FA1 CF 00 0D         [ 2] 4497 	ldw acc16,x  
      002FA4 72 B9 00 0D      [ 2] 4498 	addw y,acc16 
      002FA8 90 A3 17 73      [ 2] 4499 	cpw y,#XSTACK_EMPTY 
      002FAC 23 04            [ 2] 4500 	jrule 9$
      002FAE 90 AE 17 73      [ 2] 4501 	ldw y,#XSTACK_EMPTY 
      002FB2 81               [ 4] 4502 9$:	ret 
                                   4503 
                                   4504 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



                                   4505 ; check if value in A:X 
                                   4506 ; is inside xstack bound
                                   4507 ; output:
                                   4508 ;    X     slot address  
                                   4509 ;-----------------------
      002FB3                       4510 xstack_bound:
      002FB3 4D               [ 1] 4511 	tnz a 
      002FB4 26 16            [ 1] 4512 	jrne 8$ 
      002FB6 A3 00 14         [ 2] 4513 1$: cpw x,#XSTACK_SIZE 
      002FB9 22 11            [ 1] 4514 	jrugt 8$
      002FBB A6 03            [ 1] 4515 	ld a,#CELL_SIZE 
      002FBD 42               [ 4] 4516 	mul x,a
      002FBE CF 00 0D         [ 2] 4517 	ldw acc16,x 
      002FC1 93               [ 1] 4518 	ldw x,y 
      002FC2 72 BB 00 0D      [ 2] 4519 	addw x,acc16 
      002FC6 A3 17 73         [ 2] 4520 	cpw x,#XSTACK_EMPTY 
      002FC9 24 01            [ 1] 4521 	jruge 8$  
      002FCB 81               [ 4] 4522 	ret 
      002FCC A6 0A            [ 1] 4523 8$: ld a,#ERR_BAD_VALUE
      002FCE CC 16 44         [ 2] 4524 	jp tb_error 
                                   4525 
                                   4526 ;-------------------------
                                   4527 ; BASIC: PUT expr, cond 
                                   4528 ; expr -> slot 
                                   4529 ; cond -> valut to put 
                                   4530 ; on xstack 
                                   4531 ;-------------------------
      002FD1                       4532 xput:
      002FD1 CD 19 13         [ 4] 4533 	call arg_list 
      002FD4 A1 02            [ 1] 4534 	cp a,#2 
      002FD6 27 03            [ 1] 4535 	jreq 1$ 
      002FD8 CC 16 42         [ 2] 4536 0$:	jp syntax_error
      002FDB                       4537 1$: _xpop   ; value to put 
      002FDB 90 F6            [ 1]    1     ld a,(y)
      002FDD 93               [ 1]    2     ldw x,y 
      002FDE EE 01            [ 2]    3     ldw x,(1,x)
      002FE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FE4 89               [ 2] 4538 	pushw x 
      002FE5 88               [ 1] 4539 	push a 
      002FE6                       4540 	_xpop    ; slot 
      002FE6 90 F6            [ 1]    1     ld a,(y)
      002FE8 93               [ 1]    2     ldw x,y 
      002FE9 EE 01            [ 2]    3     ldw x,(1,x)
      002FEB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FEF CD 2F B3         [ 4] 4541 	call xstack_bound
      002FF2 CF 00 19         [ 2] 4542     ldw ptr16,x 
      002FF5 84               [ 1] 4543 	pop a 
      002FF6 85               [ 2] 4544 	popw x 
      002FF7 72 C7 00 19      [ 4] 4545 	ld [ptr16],a 
      002FFB 72 5C 00 1A      [ 1] 4546 	inc ptr8 
      002FFF 72 CF 00 19      [ 5] 4547 	ldw [ptr16],x 
      003003 81               [ 4] 4548 	ret 
                                   4549 
                                   4550 ;------------------------
                                   4551 ; BASIC: PICK expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



                                   4552 ; get nième element on 
                                   4553 ; xtack. 
                                   4554 ;-----------------------
      003004                       4555 xpick:
      003004 CD 19 0E         [ 4] 4556 	call func_args 
      003007 A1 01            [ 1] 4557 	cp a,#1 
      003009 27 03            [ 1] 4558 	jreq 1$
      00300B CC 16 42         [ 2] 4559 	jp syntax_error 
      00300E                       4560 1$: _xpop 
      00300E 90 F6            [ 1]    1     ld a,(y)
      003010 93               [ 1]    2     ldw x,y 
      003011 EE 01            [ 2]    3     ldw x,(1,x)
      003013 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003017 CD 2F B3         [ 4] 4561 	call xstack_bound
      00301A F6               [ 1] 4562     ld a,(x)
      00301B EE 01            [ 2] 4563 	ldw x,(1,x)				
      00301D 81               [ 4] 4564 	ret 
                                   4565 
                                   4566 
                                   4567 
                                   4568 ;------------------------------
                                   4569 ;      dictionary 
                                   4570 ; format:
                                   4571 ;   link:   2 bytes 
                                   4572 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4573 ;   cmd_name: 16 byte max 
                                   4574 ;   code_addr: 2 bytes 
                                   4575 ;------------------------------
                                   4576 	.macro _dict_entry len,name,code_addr 
                                   4577 	.word LINK 
                                   4578 	LINK=.
                                   4579 name:
                                   4580 	.byte len   	
                                   4581 	.ascii "name"
                                   4582 	.word code_addr  
                                   4583 	.endm 
                                   4584 
                           000000  4585 	LINK=0
                                   4586 ; respect alphabetic order for BASIC names from Z-A
                                   4587 ; this sort order is for a cleaner WORDS cmd output. 	
      00301E                       4588 kword_end:
      00301E                       4589 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      00301E 00 00                    1 	.word LINK 
                           003020     2 	LINK=.
      003020                          3 XOR:
      003020 A3                       4 	.byte 3+F_XOR   	
      003021 58 4F 52                 5 	.ascii "XOR"
      003024 00 8A                    6 	.word TK_XOR  
      003026                       4590 	_dict_entry,5,WRITE,write  
      003026 30 20                    1 	.word LINK 
                           003028     2 	LINK=.
      003028                          3 WRITE:
      003028 05                       4 	.byte 5   	
      003029 57 52 49 54 45           5 	.ascii "WRITE"
      00302E 28 AA                    6 	.word write  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003030                       4591 	_dict_entry,5,WORDS,words 
      003030 30 28                    1 	.word LINK 
                           003032     2 	LINK=.
      003032                          3 WORDS:
      003032 05                       4 	.byte 5   	
      003033 57 4F 52 44 53           5 	.ascii "WORDS"
      003038 2B FE                    6 	.word words  
      00303A                       4592 	_dict_entry 4,WAIT,wait 
      00303A 30 32                    1 	.word LINK 
                           00303C     2 	LINK=.
      00303C                          3 WAIT:
      00303C 04                       4 	.byte 4   	
      00303D 57 41 49 54              5 	.ascii "WAIT"
      003041 20 FF                    6 	.word wait  
      003043                       4593 	_dict_entry,3+F_IFUNC,USR,usr
      003043 30 3C                    1 	.word LINK 
                           003045     2 	LINK=.
      003045                          3 USR:
      003045 13                       4 	.byte 3+F_IFUNC   	
      003046 55 53 52                 5 	.ascii "USR"
      003049 29 A1                    6 	.word usr  
      00304B                       4594 	_dict_entry,5,UNTIL,until 
      00304B 30 45                    1 	.word LINK 
                           00304D     2 	LINK=.
      00304D                          3 UNTIL:
      00304D 05                       4 	.byte 5   	
      00304E 55 4E 54 49 4C           5 	.ascii "UNTIL"
      003053 2D 33                    6 	.word until  
      003055                       4595 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      003055 30 4D                    1 	.word LINK 
                           003057     2 	LINK=.
      003057                          3 UFLASH:
      003057 16                       4 	.byte 6+F_IFUNC   	
      003058 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      00305E 29 84                    6 	.word uflash  
      003060                       4596 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003060 30 57                    1 	.word LINK 
                           003062     2 	LINK=.
      003062                          3 UBOUND:
      003062 16                       4 	.byte 6+F_IFUNC   	
      003063 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      003069 1C 2A                    6 	.word ubound  
      00306B                       4597 	_dict_entry,4,TONE,tone  
      00306B 30 62                    1 	.word LINK 
                           00306D     2 	LINK=.
      00306D                          3 TONE:
      00306D 04                       4 	.byte 4   	
      00306E 54 4F 4E 45              5 	.ascii "TONE"
      003072 25 60                    6 	.word tone  
      003074                       4598 	_dict_entry,2,TO,to
      003074 30 6D                    1 	.word LINK 
                           003076     2 	LINK=.
      003076                          3 TO:
      003076 02                       4 	.byte 2   	
      003077 54 4F                    5 	.ascii "TO"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      003079 22 69                    6 	.word to  
      00307B                       4599 	_dict_entry,5,TIMER,set_timer
      00307B 30 76                    1 	.word LINK 
                           00307D     2 	LINK=.
      00307D                          3 TIMER:
      00307D 05                       4 	.byte 5   	
      00307E 54 49 4D 45 52           5 	.ascii "TIMER"
      003083 2C 68                    6 	.word set_timer  
      003085                       4600 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      003085 30 7D                    1 	.word LINK 
                           003087     2 	LINK=.
      003087                          3 TIMEOUT:
      003087 17                       4 	.byte 7+F_IFUNC   	
      003088 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00308F 2C 7F                    6 	.word timeout  
      003091                       4601 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      003091 30 87                    1 	.word LINK 
                           003093     2 	LINK=.
      003093                          3 TICKS:
      003093 15                       4 	.byte 5+F_IFUNC   	
      003094 54 49 43 4B 53           5 	.ascii "TICKS"
      003099 2A 4D                    6 	.word get_ticks  
      00309B                       4602 	_dict_entry,4,STOP,stop 
      00309B 30 93                    1 	.word LINK 
                           00309D     2 	LINK=.
      00309D                          3 STOP:
      00309D 04                       4 	.byte 4   	
      00309E 53 54 4F 50              5 	.ascii "STOP"
      0030A2 26 C9                    6 	.word stop  
      0030A4                       4603 	_dict_entry,4,STEP,step 
      0030A4 30 9D                    1 	.word LINK 
                           0030A6     2 	LINK=.
      0030A6                          3 STEP:
      0030A6 04                       4 	.byte 4   	
      0030A7 53 54 45 50              5 	.ascii "STEP"
      0030AB 22 AF                    6 	.word step  
      0030AD                       4604 	_dict_entry,5,SPIWR,spi_write
      0030AD 30 A6                    1 	.word LINK 
                           0030AF     2 	LINK=.
      0030AF                          3 SPIWR:
      0030AF 05                       4 	.byte 5   	
      0030B0 53 50 49 57 52           5 	.ascii "SPIWR"
      0030B5 2E FF                    6 	.word spi_write  
      0030B7                       4605 	_dict_entry,6,SPISEL,spi_select
      0030B7 30 AF                    1 	.word LINK 
                           0030B9     2 	LINK=.
      0030B9                          3 SPISEL:
      0030B9 06                       4 	.byte 6   	
      0030BA 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0030C0 2F 26                    6 	.word spi_select  
      0030C2                       4606 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      0030C2 30 B9                    1 	.word LINK 
                           0030C4     2 	LINK=.
      0030C4                          3 SPIRD:
      0030C4 15                       4 	.byte 5+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0030C5 53 50 49 52 44           5 	.ascii "SPIRD"
      0030CA 2F 1F                    6 	.word spi_read  
      0030CC                       4607 	_dict_entry,5,SPIEN,spi_enable 
      0030CC 30 C4                    1 	.word LINK 
                           0030CE     2 	LINK=.
      0030CE                          3 SPIEN:
      0030CE 05                       4 	.byte 5   	
      0030CF 53 50 49 45 4E           5 	.ascii "SPIEN"
      0030D4 2E 87                    6 	.word spi_enable  
      0030D6                       4608 	_dict_entry,5,SLEEP,sleep 
      0030D6 30 CE                    1 	.word LINK 
                           0030D8     2 	LINK=.
      0030D8                          3 SLEEP:
      0030D8 05                       4 	.byte 5   	
      0030D9 53 4C 45 45 50           5 	.ascii "SLEEP"
      0030DE 29 D0                    6 	.word sleep  
      0030E0                       4609     _dict_entry,4,SIZE,cmd_size 
      0030E0 30 D8                    1 	.word LINK 
                           0030E2     2 	LINK=.
      0030E2                          3 SIZE:
      0030E2 04                       4 	.byte 4   	
      0030E3 53 49 5A 45              5 	.ascii "SIZE"
      0030E7 1B FD                    6 	.word cmd_size  
      0030E9                       4610 	_dict_entry,4,SAVE,save_app 
      0030E9 30 E2                    1 	.word LINK 
                           0030EB     2 	LINK=.
      0030EB                          3 SAVE:
      0030EB 04                       4 	.byte 4   	
      0030EC 53 41 56 45              5 	.ascii "SAVE"
      0030F0 27 BB                    6 	.word save_app  
      0030F2                       4611 	_dict_entry 3,RUN,run
      0030F2 30 EB                    1 	.word LINK 
                           0030F4     2 	LINK=.
      0030F4                          3 RUN:
      0030F4 03                       4 	.byte 3   	
      0030F5 52 55 4E                 5 	.ascii "RUN"
      0030F8 24 C5                    6 	.word run  
      0030FA                       4612 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0030FA 30 F4                    1 	.word LINK 
                           0030FC     2 	LINK=.
      0030FC                          3 RSHIFT:
      0030FC 16                       4 	.byte 6+F_IFUNC   	
      0030FD 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      003103 2A 98                    6 	.word rshift  
      003105                       4613 	_dict_entry,3+F_IFUNC,RND,random 
      003105 30 FC                    1 	.word LINK 
                           003107     2 	LINK=.
      003107                          3 RND:
      003107 13                       4 	.byte 3+F_IFUNC   	
      003108 52 4E 44                 5 	.ascii "RND"
      00310B 2B 63                    6 	.word random  
      00310D                       4614 	_dict_entry,6,RETURN,return 
      00310D 31 07                    1 	.word LINK 
                           00310F     2 	LINK=.
      00310F                          3 RETURN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      00310F 06                       4 	.byte 6   	
      003110 52 45 54 55 52 4E        5 	.ascii "RETURN"
      003116 24 A8                    6 	.word return  
      003118                       4615 	_dict_entry,7,RESTORE,restore 
      003118 31 0F                    1 	.word LINK 
                           00311A     2 	LINK=.
      00311A                          3 RESTORE:
      00311A 07                       4 	.byte 7   	
      00311B 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003122 2D CF                    6 	.word restore  
      003124                       4616 	_dict_entry 3,REM,remark 
      003124 31 1A                    1 	.word LINK 
                           003126     2 	LINK=.
      003126                          3 REM:
      003126 03                       4 	.byte 3   	
      003127 52 45 4D                 5 	.ascii "REM"
      00312A 20 F9                    6 	.word remark  
      00312C                       4617 	_dict_entry,6,REBOOT,cold_start
      00312C 31 26                    1 	.word LINK 
                           00312E     2 	LINK=.
      00312E                          3 REBOOT:
      00312E 06                       4 	.byte 6   	
      00312F 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      003135 00 C3                    6 	.word cold_start  
      003137                       4618 	_dict_entry,4+F_IFUNC,READ,read  
      003137 31 2E                    1 	.word LINK 
                           003139     2 	LINK=.
      003139                          3 READ:
      003139 14                       4 	.byte 4+F_IFUNC   	
      00313A 52 45 41 44              5 	.ascii "READ"
      00313E 2E 39                    6 	.word read  
      003140                       4619 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003140 31 39                    1 	.word LINK 
                           003142     2 	LINK=.
      003142                          3 QKEY:
      003142 14                       4 	.byte 4+F_IFUNC   	
      003143 51 4B 45 59              5 	.ascii "QKEY"
      003147 29 47                    6 	.word qkey  
      003149                       4620 	_dict_entry,3,PUT,xput 
      003149 31 42                    1 	.word LINK 
                           00314B     2 	LINK=.
      00314B                          3 PUT:
      00314B 03                       4 	.byte 3   	
      00314C 50 55 54                 5 	.ascii "PUT"
      00314F 2F D1                    6 	.word xput  
      003151                       4621 	_dict_entry,4,PUSH,xpush   
      003151 31 4B                    1 	.word LINK 
                           003153     2 	LINK=.
      003153                          3 PUSH:
      003153 04                       4 	.byte 4   	
      003154 50 55 53 48              5 	.ascii "PUSH"
      003158 2F 42                    6 	.word xpush  
      00315A                       4622 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      00315A 31 53                    1 	.word LINK 
                           00315C     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      00315C                          3 PORTI:
      00315C 15                       4 	.byte 5+F_IFUNC   	
      00315D 50 4F 52 54 49           5 	.ascii "PORTI"
      003162 2D 8E                    6 	.word const_porti  
      003164                       4623 	_dict_entry,5+F_IFUNC,PORTH,const_porth 
      003164 31 5C                    1 	.word LINK 
                           003166     2 	LINK=.
      003166                          3 PORTH:
      003166 15                       4 	.byte 5+F_IFUNC   	
      003167 50 4F 52 54 48           5 	.ascii "PORTH"
      00316C 2D 89                    6 	.word const_porth  
      00316E                       4624 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      00316E 31 66                    1 	.word LINK 
                           003170     2 	LINK=.
      003170                          3 PORTG:
      003170 15                       4 	.byte 5+F_IFUNC   	
      003171 50 4F 52 54 47           5 	.ascii "PORTG"
      003176 2D 84                    6 	.word const_portg  
      003178                       4625 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003178 31 70                    1 	.word LINK 
                           00317A     2 	LINK=.
      00317A                          3 PORTF:
      00317A 15                       4 	.byte 5+F_IFUNC   	
      00317B 50 4F 52 54 46           5 	.ascii "PORTF"
      003180 2D 7F                    6 	.word const_portf  
      003182                       4626 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      003182 31 7A                    1 	.word LINK 
                           003184     2 	LINK=.
      003184                          3 PORTE:
      003184 15                       4 	.byte 5+F_IFUNC   	
      003185 50 4F 52 54 45           5 	.ascii "PORTE"
      00318A 2D 7A                    6 	.word const_porte  
      00318C                       4627 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      00318C 31 84                    1 	.word LINK 
                           00318E     2 	LINK=.
      00318E                          3 PORTD:
      00318E 15                       4 	.byte 5+F_IFUNC   	
      00318F 50 4F 52 54 44           5 	.ascii "PORTD"
      003194 2D 75                    6 	.word const_portd  
      003196                       4628 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003196 31 8E                    1 	.word LINK 
                           003198     2 	LINK=.
      003198                          3 PORTC:
      003198 15                       4 	.byte 5+F_IFUNC   	
      003199 50 4F 52 54 43           5 	.ascii "PORTC"
      00319E 2D 70                    6 	.word const_portc  
      0031A0                       4629 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      0031A0 31 98                    1 	.word LINK 
                           0031A2     2 	LINK=.
      0031A2                          3 PORTB:
      0031A2 15                       4 	.byte 5+F_IFUNC   	
      0031A3 50 4F 52 54 42           5 	.ascii "PORTB"
      0031A8 2D 6B                    6 	.word const_portb  
      0031AA                       4630 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      0031AA 31 A2                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



                           0031AC     2 	LINK=.
      0031AC                          3 PORTA:
      0031AC 15                       4 	.byte 5+F_IFUNC   	
      0031AD 50 4F 52 54 41           5 	.ascii "PORTA"
      0031B2 2D 66                    6 	.word const_porta  
      0031B4                       4631 	_dict_entry 5,PRINT,print 
      0031B4 31 AC                    1 	.word LINK 
                           0031B6     2 	LINK=.
      0031B6                          3 PRINT:
      0031B6 05                       4 	.byte 5   	
      0031B7 50 52 49 4E 54           5 	.ascii "PRINT"
      0031BC 1F B1                    6 	.word print  
      0031BE                       4632 	_dict_entry,4+F_IFUNC,POUT,const_output
      0031BE 31 B6                    1 	.word LINK 
                           0031C0     2 	LINK=.
      0031C0                          3 POUT:
      0031C0 14                       4 	.byte 4+F_IFUNC   	
      0031C1 50 4F 55 54              5 	.ascii "POUT"
      0031C5 2D AC                    6 	.word const_output  
      0031C7                       4633 	_dict_entry,3+F_IFUNC,POP,xpop 
      0031C7 31 C0                    1 	.word LINK 
                           0031C9     2 	LINK=.
      0031C9                          3 POP:
      0031C9 13                       4 	.byte 3+F_IFUNC   	
      0031CA 50 4F 50                 5 	.ascii "POP"
      0031CD 2F 46                    6 	.word xpop  
      0031CF                       4634 	_dict_entry,4,POKE,poke 
      0031CF 31 C9                    1 	.word LINK 
                           0031D1     2 	LINK=.
      0031D1                          3 POKE:
      0031D1 04                       4 	.byte 4   	
      0031D2 50 4F 4B 45              5 	.ascii "POKE"
      0031D6 21 DA                    6 	.word poke  
      0031D8                       4635 	_dict_entry,5,PMODE,pin_mode 
      0031D8 31 D1                    1 	.word LINK 
                           0031DA     2 	LINK=.
      0031DA                          3 PMODE:
      0031DA 05                       4 	.byte 5   	
      0031DB 50 4D 4F 44 45           5 	.ascii "PMODE"
      0031E0 2A D4                    6 	.word pin_mode  
      0031E2                       4636 	_dict_entry,4+F_IFUNC,PINP,const_input
      0031E2 31 DA                    1 	.word LINK 
                           0031E4     2 	LINK=.
      0031E4                          3 PINP:
      0031E4 14                       4 	.byte 4+F_IFUNC   	
      0031E5 50 49 4E 50              5 	.ascii "PINP"
      0031E9 2D B1                    6 	.word const_input  
      0031EB                       4637 	_dict_entry,4+F_IFUNC,PICK,xpick 
      0031EB 31 E4                    1 	.word LINK 
                           0031ED     2 	LINK=.
      0031ED                          3 PICK:
      0031ED 14                       4 	.byte 4+F_IFUNC   	
      0031EE 50 49 43 4B              5 	.ascii "PICK"
      0031F2 30 04                    6 	.word xpick  
      0031F4                       4638 	_dict_entry,4+F_IFUNC,PEEK,peek 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      0031F4 31 ED                    1 	.word LINK 
                           0031F6     2 	LINK=.
      0031F6                          3 PEEK:
      0031F6 14                       4 	.byte 4+F_IFUNC   	
      0031F7 50 45 45 4B              5 	.ascii "PEEK"
      0031FB 21 FB                    6 	.word peek  
      0031FD                       4639 	_dict_entry,5,PAUSE,pause 
      0031FD 31 F6                    1 	.word LINK 
                           0031FF     2 	LINK=.
      0031FF                          3 PAUSE:
      0031FF 05                       4 	.byte 5   	
      003200 50 41 55 53 45           5 	.ascii "PAUSE"
      003205 29 DB                    6 	.word pause  
      003207                       4640 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      003207 31 FF                    1 	.word LINK 
                           003209     2 	LINK=.
      003209                          3 PAD:
      003209 13                       4 	.byte 3+F_IFUNC   	
      00320A 50 41 44                 5 	.ascii "PAD"
      00320D 2F 3D                    6 	.word pad_ref  
      00320F                       4641 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      00320F 32 09                    1 	.word LINK 
                           003211     2 	LINK=.
      003211                          3 OR:
      003211 92                       4 	.byte 2+F_OR   	
      003212 4F 52                    5 	.ascii "OR"
      003214 00 89                    6 	.word TK_OR  
      003216                       4642 	_dict_entry,2,ON,cmd_on 
      003216 32 11                    1 	.word LINK 
                           003218     2 	LINK=.
      003218                          3 ON:
      003218 02                       4 	.byte 2   	
      003219 4F 4E                    5 	.ascii "ON"
      00321B 23 D8                    6 	.word cmd_on  
      00321D                       4643 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00321D 32 18                    1 	.word LINK 
                           00321F     2 	LINK=.
      00321F                          3 ODR:
      00321F 13                       4 	.byte 3+F_IFUNC   	
      003220 4F 44 52                 5 	.ascii "ODR"
      003223 2D 93                    6 	.word const_odr  
      003225                       4644 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      003225 32 1F                    1 	.word LINK 
                           003227     2 	LINK=.
      003227                          3 NOT:
      003227 73                       4 	.byte 3+F_NOT   	
      003228 4E 4F 54                 5 	.ascii "NOT"
      00322B 00 87                    6 	.word TK_NOT  
      00322D                       4645 	_dict_entry,4,NEXT,next 
      00322D 32 27                    1 	.word LINK 
                           00322F     2 	LINK=.
      00322F                          3 NEXT:
      00322F 04                       4 	.byte 4   	
      003230 4E 45 58 54              5 	.ascii "NEXT"
      003234 22 F1                    6 	.word next  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003236                       4646 	_dict_entry,3,NEW,new
      003236 32 2F                    1 	.word LINK 
                           003238     2 	LINK=.
      003238                          3 NEW:
      003238 03                       4 	.byte 3   	
      003239 4E 45 57                 5 	.ascii "NEW"
      00323C 27 15                    6 	.word new  
      00323E                       4647 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00323E 32 38                    1 	.word LINK 
                           003240     2 	LINK=.
      003240                          3 LSHIFT:
      003240 16                       4 	.byte 6+F_IFUNC   	
      003241 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003247 2A 6B                    6 	.word lshift  
      003249                       4648 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003249 32 40                    1 	.word LINK 
                           00324B     2 	LINK=.
      00324B                          3 LOG2:
      00324B 14                       4 	.byte 4+F_IFUNC   	
      00324C 4C 4F 47 32              5 	.ascii "LOG2"
      003250 2C CD                    6 	.word log2  
      003252                       4649 	_dict_entry 4,LIST,list
      003252 32 4B                    1 	.word LINK 
                           003254     2 	LINK=.
      003254                          3 LIST:
      003254 04                       4 	.byte 4   	
      003255 4C 49 53 54              5 	.ascii "LIST"
      003259 1E A4                    6 	.word list  
      00325B                       4650 	_dict_entry 3,LET,let 
      00325B 32 54                    1 	.word LINK 
                           00325D     2 	LINK=.
      00325D                          3 LET:
      00325D 03                       4 	.byte 3   	
      00325E 4C 45 54                 5 	.ascii "LET"
      003261 1C 35                    6 	.word let  
      003263                       4651 	_dict_entry,3+F_CFUNC,KEY,key 
      003263 32 5D                    1 	.word LINK 
                           003265     2 	LINK=.
      003265                          3 KEY:
      003265 23                       4 	.byte 3+F_CFUNC   	
      003266 4B 45 59                 5 	.ascii "KEY"
      003269 29 43                    6 	.word key  
      00326B                       4652 	_dict_entry,7,IWDGREF,refresh_iwdg
      00326B 32 65                    1 	.word LINK 
                           00326D     2 	LINK=.
      00326D                          3 IWDGREF:
      00326D 07                       4 	.byte 7   	
      00326E 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003275 2C C8                    6 	.word refresh_iwdg  
      003277                       4653 	_dict_entry,6,IWDGEN,enable_iwdg
      003277 32 6D                    1 	.word LINK 
                           003279     2 	LINK=.
      003279                          3 IWDGEN:
      003279 06                       4 	.byte 6   	
      00327A 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      003280 2C 8A                    6 	.word enable_iwdg  
      003282                       4654 	_dict_entry,5,INPUT,input_var  
      003282 32 79                    1 	.word LINK 
                           003284     2 	LINK=.
      003284                          3 INPUT:
      003284 05                       4 	.byte 5   	
      003285 49 4E 50 55 54           5 	.ascii "INPUT"
      00328A 20 5A                    6 	.word input_var  
      00328C                       4655 	_dict_entry,2,IF,if 
      00328C 32 84                    1 	.word LINK 
                           00328E     2 	LINK=.
      00328E                          3 IF:
      00328E 02                       4 	.byte 2   	
      00328F 49 46                    5 	.ascii "IF"
      003291 22 1C                    6 	.word if  
      003293                       4656 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003293 32 8E                    1 	.word LINK 
                           003295     2 	LINK=.
      003295                          3 IDR:
      003295 13                       4 	.byte 3+F_IFUNC   	
      003296 49 44 52                 5 	.ascii "IDR"
      003299 2D 98                    6 	.word const_idr  
      00329B                       4657 	_dict_entry,3,HEX,hex_base
      00329B 32 95                    1 	.word LINK 
                           00329D     2 	LINK=.
      00329D                          3 HEX:
      00329D 03                       4 	.byte 3   	
      00329E 48 45 58                 5 	.ascii "HEX"
      0032A1 1B D7                    6 	.word hex_base  
      0032A3                       4658 	_dict_entry,4,GOTO,goto 
      0032A3 32 9D                    1 	.word LINK 
                           0032A5     2 	LINK=.
      0032A5                          3 GOTO:
      0032A5 04                       4 	.byte 4   	
      0032A6 47 4F 54 4F              5 	.ascii "GOTO"
      0032AA 24 6A                    6 	.word goto  
      0032AC                       4659 	_dict_entry,5,GOSUB,gosub 
      0032AC 32 A5                    1 	.word LINK 
                           0032AE     2 	LINK=.
      0032AE                          3 GOSUB:
      0032AE 05                       4 	.byte 5   	
      0032AF 47 4F 53 55 42           5 	.ascii "GOSUB"
      0032B4 24 84                    6 	.word gosub  
      0032B6                       4660 	_dict_entry,3,GET,cmd_get 
      0032B6 32 AE                    1 	.word LINK 
                           0032B8     2 	LINK=.
      0032B8                          3 GET:
      0032B8 03                       4 	.byte 3   	
      0032B9 47 45 54                 5 	.ascii "GET"
      0032BC 25 28                    6 	.word cmd_get  
      0032BE                       4661 	_dict_entry,4+F_IFUNC,FREE,free
      0032BE 32 B8                    1 	.word LINK 
                           0032C0     2 	LINK=.
      0032C0                          3 FREE:
      0032C0 14                       4 	.byte 4+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0032C1 46 52 45 45              5 	.ascii "FREE"
      0032C5 1B E1                    6 	.word free  
      0032C7                       4662 	_dict_entry,3,FOR,for 
      0032C7 32 C0                    1 	.word LINK 
                           0032C9     2 	LINK=.
      0032C9                          3 FOR:
      0032C9 03                       4 	.byte 3   	
      0032CA 46 4F 52                 5 	.ascii "FOR"
      0032CD 22 39                    6 	.word for  
      0032CF                       4663 	_dict_entry,4,FCPU,fcpu 
      0032CF 32 C9                    1 	.word LINK 
                           0032D1     2 	LINK=.
      0032D1                          3 FCPU:
      0032D1 04                       4 	.byte 4   	
      0032D2 46 43 50 55              5 	.ascii "FCPU"
      0032D6 2A C5                    6 	.word fcpu  
      0032D8                       4664 	_dict_entry,5,ERASE,erase 
      0032D8 32 D1                    1 	.word LINK 
                           0032DA     2 	LINK=.
      0032DA                          3 ERASE:
      0032DA 05                       4 	.byte 5   	
      0032DB 45 52 41 53 45           5 	.ascii "ERASE"
      0032E0 27 1F                    6 	.word erase  
      0032E2                       4665 	_dict_entry,3,END,cmd_end  
      0032E2 32 DA                    1 	.word LINK 
                           0032E4     2 	LINK=.
      0032E4                          3 END:
      0032E4 03                       4 	.byte 3   	
      0032E5 45 4E 44                 5 	.ascii "END"
      0032E8 25 21                    6 	.word cmd_end  
      0032EA                       4666 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0032EA 32 E4                    1 	.word LINK 
                           0032EC     2 	LINK=.
      0032EC                          3 EEPROM:
      0032EC 16                       4 	.byte 6+F_IFUNC   	
      0032ED 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0032F3 2D B6                    6 	.word const_eeprom_base  
      0032F5                       4667 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0032F5 32 EC                    1 	.word LINK 
                           0032F7     2 	LINK=.
      0032F7                          3 EEFREE:
      0032F7 16                       4 	.byte 6+F_IFUNC   	
      0032F8 45 45 46 52 45 45        5 	.ascii "EEFREE"
      0032FE 1C F3                    6 	.word func_eefree  
      003300                       4668 	_dict_entry,4,EDIT,edit 
      003300 32 F7                    1 	.word LINK 
                           003302     2 	LINK=.
      003302                          3 EDIT:
      003302 04                       4 	.byte 4   	
      003303 45 44 49 54              5 	.ascii "EDIT"
      003307 1F 49                    6 	.word edit  
      003309                       4669 	_dict_entry,6+F_CMD,DWRITE,digital_write
      003309 33 02                    1 	.word LINK 
                           00330B     2 	LINK=.
      00330B                          3 DWRITE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      00330B 06                       4 	.byte 6+F_CMD   	
      00330C 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003312 26 7E                    6 	.word digital_write  
      003314                       4670 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      003314 33 0B                    1 	.word LINK 
                           003316     2 	LINK=.
      003316                          3 DROP:
      003316 04                       4 	.byte 4   	
      003317 44 52 4F 50              5 	.ascii "DROP"
      00331B 2F 86                    6 	.word xdrop  
      00331D                       4671 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00331D 33 16                    1 	.word LINK 
                           00331F     2 	LINK=.
      00331F                          3 DREAD:
      00331F 15                       4 	.byte 5+F_IFUNC   	
      003320 44 52 45 41 44           5 	.ascii "DREAD"
      003325 26 47                    6 	.word digital_read  
      003327                       4672 	_dict_entry,2,DO,do_loop
      003327 33 1F                    1 	.word LINK 
                           003329     2 	LINK=.
      003329                          3 DO:
      003329 02                       4 	.byte 2   	
      00332A 44 4F                    5 	.ascii "DO"
      00332C 2D 20                    6 	.word do_loop  
      00332E                       4673 	_dict_entry,3,DEC,dec_base
      00332E 33 29                    1 	.word LINK 
                           003330     2 	LINK=.
      003330                          3 DEC:
      003330 03                       4 	.byte 3   	
      003331 44 45 43                 5 	.ascii "DEC"
      003334 1B DC                    6 	.word dec_base  
      003336                       4674 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      003336 33 30                    1 	.word LINK 
                           003338     2 	LINK=.
      003338                          3 DDR:
      003338 13                       4 	.byte 3+F_IFUNC   	
      003339 44 44 52                 5 	.ascii "DDR"
      00333C 2D 9D                    6 	.word const_ddr  
      00333E                       4675 	_dict_entry,4,DATA,data  
      00333E 33 38                    1 	.word LINK 
                           003340     2 	LINK=.
      003340                          3 DATA:
      003340 04                       4 	.byte 4   	
      003341 44 41 54 41              5 	.ascii "DATA"
      003345 2D BB                    6 	.word data  
      003347                       4676 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003347 33 40                    1 	.word LINK 
                           003349     2 	LINK=.
      003349                          3 CR2:
      003349 13                       4 	.byte 3+F_IFUNC   	
      00334A 43 52 32                 5 	.ascii "CR2"
      00334D 2D A7                    6 	.word const_cr2  
      00334F                       4677 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00334F 33 49                    1 	.word LINK 
                           003351     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003351                          3 CR1:
      003351 13                       4 	.byte 3+F_IFUNC   	
      003352 43 52 31                 5 	.ascii "CR1"
      003355 2D A2                    6 	.word const_cr1  
      003357                       4678 	_dict_entry,5,CONST,cmd_const 
      003357 33 51                    1 	.word LINK 
                           003359     2 	LINK=.
      003359                          3 CONST:
      003359 05                       4 	.byte 5   	
      00335A 43 4F 4E 53 54           5 	.ascii "CONST"
      00335F 1D 60                    6 	.word cmd_const  
      003361                       4679 	_dict_entry,4+F_CFUNC,CHAR,func_char
      003361 33 59                    1 	.word LINK 
                           003363     2 	LINK=.
      003363                          3 CHAR:
      003363 24                       4 	.byte 4+F_CFUNC   	
      003364 43 48 41 52              5 	.ascii "CHAR"
      003368 28 ED                    6 	.word func_char  
      00336A                       4680 	_dict_entry,3,BYE,bye 
      00336A 33 63                    1 	.word LINK 
                           00336C     2 	LINK=.
      00336C                          3 BYE:
      00336C 03                       4 	.byte 3   	
      00336D 42 59 45                 5 	.ascii "BYE"
      003370 29 C7                    6 	.word bye  
      003372                       4681 	_dict_entry,5,BTOGL,bit_toggle
      003372 33 6C                    1 	.word LINK 
                           003374     2 	LINK=.
      003374                          3 BTOGL:
      003374 05                       4 	.byte 5   	
      003375 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00337A 21 81                    6 	.word bit_toggle  
      00337C                       4682 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00337C 33 74                    1 	.word LINK 
                           00337E     2 	LINK=.
      00337E                          3 BTEST:
      00337E 15                       4 	.byte 5+F_IFUNC   	
      00337F 42 54 45 53 54           5 	.ascii "BTEST"
      003384 21 A3                    6 	.word bit_test  
      003386                       4683 	_dict_entry,4,BSET,bit_set 
      003386 33 7E                    1 	.word LINK 
                           003388     2 	LINK=.
      003388                          3 BSET:
      003388 04                       4 	.byte 4   	
      003389 42 53 45 54              5 	.ascii "BSET"
      00338D 21 3C                    6 	.word bit_set  
      00338F                       4684 	_dict_entry,4,BRES,bit_reset
      00338F 33 88                    1 	.word LINK 
                           003391     2 	LINK=.
      003391                          3 BRES:
      003391 04                       4 	.byte 4   	
      003392 42 52 45 53              5 	.ascii "BRES"
      003396 21 5E                    6 	.word bit_reset  
      003398                       4685 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003398 33 91                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



                           00339A     2 	LINK=.
      00339A                          3 BIT:
      00339A 13                       4 	.byte 3+F_IFUNC   	
      00339B 42 49 54                 5 	.ascii "BIT"
      00339E 2C FA                    6 	.word bitmask  
      0033A0                       4686 	_dict_entry,3,AWU,awu 
      0033A0 33 9A                    1 	.word LINK 
                           0033A2     2 	LINK=.
      0033A2                          3 AWU:
      0033A2 03                       4 	.byte 3   	
      0033A3 41 57 55                 5 	.ascii "AWU"
      0033A6 29 FB                    6 	.word awu  
      0033A8                       4687 	_dict_entry,3+F_IFUNC,ASC,ascii
      0033A8 33 A2                    1 	.word LINK 
                           0033AA     2 	LINK=.
      0033AA                          3 ASC:
      0033AA 13                       4 	.byte 3+F_IFUNC   	
      0033AB 41 53 43                 5 	.ascii "ASC"
      0033AE 29 04                    6 	.word ascii  
      0033B0                       4688 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0033B0 33 AA                    1 	.word LINK 
                           0033B2     2 	LINK=.
      0033B2                          3 AND:
      0033B2 83                       4 	.byte 3+F_AND   	
      0033B3 41 4E 44                 5 	.ascii "AND"
      0033B6 00 88                    6 	.word TK_AND  
      0033B8                       4689 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      0033B8 33 B2                    1 	.word LINK 
                           0033BA     2 	LINK=.
      0033BA                          3 ALLOC:
      0033BA 05                       4 	.byte 5   	
      0033BB 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      0033C0 2F 50                    6 	.word xalloc  
      0033C2                       4690 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0033C2 33 BA                    1 	.word LINK 
                           0033C4     2 	LINK=.
      0033C4                          3 ADCREAD:
      0033C4 17                       4 	.byte 7+F_IFUNC   	
      0033C5 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0033CC 26 0B                    6 	.word analog_read  
      0033CE                       4691 	_dict_entry,5,ADCON,power_adc 
      0033CE 33 C4                    1 	.word LINK 
                           0033D0     2 	LINK=.
      0033D0                          3 ADCON:
      0033D0 05                       4 	.byte 5   	
      0033D1 41 44 43 4F 4E           5 	.ascii "ADCON"
      0033D6 25 BB                    6 	.word power_adc  
      0033D8                       4692 kword_dict::
      0033D8                       4693 	_dict_entry,3+F_IFUNC,ABS,abs
      0033D8 33 D0                    1 	.word LINK 
                           0033DA     2 	LINK=.
      0033DA                          3 ABS:
      0033DA 13                       4 	.byte 3+F_IFUNC   	
      0033DB 41 42 53                 5 	.ascii "ABS"
      0033DE 2A 54                    6 	.word abs  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



                                   4694 
                           000000  4695 INDIRECT=0 
                           000000  4696 .if INDIRECT 
                                   4697 ;comands and fonctions address table 	
                                   4698 code_addr::
                                   4699 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4700 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4701 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4702 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4703 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4704 	.word let,list,log2,lshift,next,new ; 40..47
                                   4705 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4706 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4707 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4708 	.word restore,return, random,rshift,run,free ; 72..79
                                   4709 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4710 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4711 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4712 	.word func_eefree,0 
                                   4713 .endif 
                                   4714 
                                   4715 
                                   4716 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0033E0                         30 test:
      0033E0                         31     _vars VSIZE 
      0033E0 52 08            [ 2]    1     sub sp,#VSIZE 
      0033E2 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0033E5 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0033E7 CE 00 0F         [ 2]   34     ldw x,ticks 
      0033EA 1F 01            [ 2]   35     ldw (T,sp),x
      0033EC                         36 1$: ; test add24 
      0033EC A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0033EE AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0033F1 C7 00 0C         [ 1]   39     ld acc24,a 
      0033F4 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0033F7 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0033F9 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0033FC CD 01 79         [ 4]   43     call add24 
      0033FF 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003401 1D 00 01         [ 2]   45     subw x,#1
      003404 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      003406 26 E4            [ 1]   47     jrne 1$
      003408 CD 17 AA         [ 4]   48     call prt_acc24
      00340B A6 20            [ 1]   49     ld a,#SPACE 
      00340D CD 09 0B         [ 4]   50     call putc 
      003410 CE 00 0F         [ 2]   51     ldw x,ticks 
      003413 72 F0 01         [ 2]   52     subw x,(T,sp)
      003416 CD 17 93         [ 4]   53     call prt_i16  
      003419 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      00341B CD 09 0B         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      00341E CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003421 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003423 CE 00 0F         [ 2]   60     ldw x,ticks 
      003426 1F 01            [ 2]   61     ldw (T,sp),x 
      003428                         62 2$: 
      003428 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00342A AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      00342D C7 00 0C         [ 1]   65     ld acc24,a 
      003430 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003433 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003435 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003438 CD 02 74         [ 4]   69     call mul24 
      00343B 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      00343D 1D 00 01         [ 2]   71     subw x,#1
      003440 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003442 26 E4            [ 1]   73     jrne 2$ 
      003444 CD 17 AA         [ 4]   74    call prt_acc24 
      003447 A6 20            [ 1]   75    ld a,#SPACE 
      003449 CD 09 0B         [ 4]   76    call putc 
      00344C CE 00 0F         [ 2]   77     ldw x,ticks 
      00344F 72 F0 01         [ 2]   78     subw x,(T,sp)
      003452 CD 17 93         [ 4]   79     call prt_i16 
      003455 A6 0D            [ 1]   80     ld a,#CR 
      003457 CD 09 0B         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00345A CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00345D 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      00345F CE 00 0F         [ 2]   85     ldw x,ticks 
      003462 1F 01            [ 2]   86     ldw (T,sp),x 
      003464                         87 3$: 
      003464 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003466 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003469 C7 00 0C         [ 1]   90     ld acc24,a 
      00346C CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00346F A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003471 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003474 CD 02 74         [ 4]   94     call mul24 
      003477 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003479 1D 00 01         [ 2]   96     subw x,#1
      00347C 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00347E 26 E4            [ 1]   98     jrne 3$ 
      003480 CD 17 AA         [ 4]   99     call prt_acc24    
      003483 A6 20            [ 1]  100     ld a,#SPACE 
      003485 CD 09 0B         [ 4]  101     call putc 
      003488 CE 00 0F         [ 2]  102     ldw x,ticks 
      00348B 72 F0 01         [ 2]  103     subw x,(T,sp)
      00348E CD 17 93         [ 4]  104     call prt_i16 
      003491 A6 0D            [ 1]  105     ld a,#CR 
      003493 CD 09 0B         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003496 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003499 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      00349B CE 00 0F         [ 2]  110     ldw x,ticks 
      00349E 1F 01            [ 2]  111     ldw (T,sp),x 
      0034A0                        112 4$:
      0034A0 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034A2 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0034A5 C7 00 0C         [ 1]  115     ld acc24,a 
      0034A8 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0034AB A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0034AD AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0034B0 CD 02 74         [ 4]  119     call mul24 
      0034B3 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0034B5 1D 00 01         [ 2]  121     subw x,#1
      0034B8 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0034BA 26 E4            [ 1]  123     jrne 4$ 
      0034BC CD 17 AA         [ 4]  124     call prt_acc24 
      0034BF A6 20            [ 1]  125     ld a,#SPACE 
      0034C1 CD 09 0B         [ 4]  126     call putc 
      0034C4 CE 00 0F         [ 2]  127     ldw x,ticks 
      0034C7 72 F0 01         [ 2]  128     subw x,(T,sp)
      0034CA CD 17 93         [ 4]  129     call prt_i16 
      0034CD A6 0D            [ 1]  130     ld a,#CR 
      0034CF CD 09 0B         [ 4]  131     call putc 
                                    132 ; test abs24 
      0034D2 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0034D5 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0034D7 CE 00 0F         [ 2]  135     ldw x,ticks 
      0034DA 1F 01            [ 2]  136     ldw (T,sp),x 
      0034DC                        137 5$: 
      0034DC A6 FF            [ 1]  138     ld a,#0xff
      0034DE AE FF FF         [ 2]  139     ldw x,#0xffff
      0034E1 CD 01 EE         [ 4]  140     call abs24 
      0034E4 C7 00 0C         [ 1]  141     ld acc24,a 
      0034E7 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0034EA 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0034EC 1D 00 01         [ 2]  144     subw x,#1
      0034EF 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0034F1 26 E9            [ 1]  146     jrne 5$ 
      0034F3 CD 17 AA         [ 4]  147     call prt_acc24 
      0034F6 A6 20            [ 1]  148     ld a,#SPACE 
      0034F8 CD 09 0B         [ 4]  149     call putc 
      0034FB CE 00 0F         [ 2]  150     ldw x,ticks 
      0034FE 72 F0 01         [ 2]  151     subw x,(T,sp)
      003501 CD 17 93         [ 4]  152     call prt_i16 
      003504                        153 6$:
      003504 A6 0D            [ 1]  154     ld a,#CR 
      003506 CD 09 0B         [ 4]  155     call putc 
      003509 CD 35 4F         [ 4]  156     call read_integer 
      00350C 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003511 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      003516 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      00351B CD 35 4F         [ 4]  160     call read_integer 
      00351E C6 00 0C         [ 1]  161     ld a,acc24 
      003521 CE 00 0D         [ 2]  162     ldw x,acc16 
      003524 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      003529 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



      00352E 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003533 CD 03 02         [ 4]  166     call div24 
      003536 88               [ 1]  167     push a 
      003537 89               [ 2]  168     pushw x 
      003538 CD 17 AA         [ 4]  169     call prt_acc24 
      00353B A6 20            [ 1]  170     ld a,#SPACE 
      00353D CD 09 0B         [ 4]  171     call putc 
      003540 85               [ 2]  172     popw x
      003541 CF 00 0D         [ 2]  173     ldw acc16,x  
      003544 32 00 0C         [ 1]  174     pop acc24 
      003547 CD 17 AA         [ 4]  175     call prt_acc24
      00354A 20 B8            [ 2]  176     jra 6$
      00354C                        177     _drop VSIZE 
      00354C 5B 08            [ 2]    1     addw sp,#VSIZE 
      00354E 81               [ 4]  178     ret 
                                    179 
                                    180 
      00354F                        181 read_integer:
      00354F A6 3F            [ 1]  182     ld a,#'? 
      003551 CD 09 0B         [ 4]  183     call putc  
      003554 72 5F 00 03      [ 1]  184 	clr count  
      003558 CD 0A 6D         [ 4]  185 	call readln 
      00355B AE 16 90         [ 2]  186 	ldw x,#tib 
      00355E 3B 00 03         [ 1]  187 	push count
      003561 4B 00            [ 1]  188 	push #0 
      003563 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003566 5C               [ 1]  190 	incw x 
      003567                        191 	_drop 2 
      003567 5B 02            [ 2]    1     addw sp,#2 
      003569 72 5F 00 01      [ 1]  192 	clr in 
      00356D CD 0E E2         [ 4]  193 	call get_token
      003570 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003572 27 0F            [ 1]  195 	jreq 3$ 
      003574 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003576 CD 0E E2         [ 4]  197 	call get_token 
      003579 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00357B 27 03            [ 1]  199 	jreq 2$
      00357D CC 16 42         [ 2]  200 	jp syntax_error
      003580                        201 2$:
      003580 CD 02 18         [ 4]  202 	call neg_acc24  	
      003583                        203 3$: 
      003583 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0033DA R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0033D0 R
    ADCON_ID=  000002     |   4 ADCREAD    0033C4 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      0033BA R   |   4 AND        0033B2 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        0033AA R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   000157 R   |   4 AWU        0033A2 R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        00339A R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       003391 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       003388 R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      00337E R
    BTEST_ID=  000010     |   4 BTOGL      003374 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |     BUFPTR  =  000003     |   4 BYE        00336C R
    BYE_IDX =  000014     |     C       =  000001     |     CAN     =  000018 
  4 CANT_DO    002852 R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CCOMMA  =  000001     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000003     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   4 CHAR       003363 R   |     CHAR_IDX=  000016 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNAME   =  000001     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     CODE_ADD=  000001 
    COMMA   =  00002C     |   4 CONST      003359 R   |   4 CONST_CO   001CDD R
    CONST_ID=  0000B8     |     CONST_RE=  000005     |     COUNT   =  000003 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   4 CR1        003351 R   |     CR1_IDX =  00001A 
  4 CR2        003349 R   |     CR2_IDX =  000018     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000004     |     CTX_BPTR=  000001 
    CTX_COUN=  000004     |     CTX_IN  =  000003     |     CURR    =  000002 
    CVAR    =  000009     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   4 DATA       003340 R   |     DATA_IDX=  00001C 
    DBG_A   =  000008     |     DBG_CC  =  000009     |     DBG_X   =  000006 
    DBG_Y   =  000004     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   4 DDR        003338 R
    DDR_IDX =  00001E     |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   4 DEC        003330 R   |     DEC_IDX =  000020 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         003329 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      00331F R   |     DREAD_ID=  000024     |   4 DROP       003316 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

  4 DWRITE     00330B R   |     DWRITE_I=  000026     |   4 EDIT       003302 R
    EDIT_IDX=  000028     |   4 EEFREE     0032F7 R   |     EEFREE_I=  0000BA 
  4 EEPROM     0032EC R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EEPTR   =  000003 
    EM      =  000019     |   4 END        0032E4 R   |     END_IDX =  00002C 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
  4 ERASE      0032DA R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_OVER=  000010     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       0032D1 R
    FCPU_IDX=  000030     |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |   4 FLASH_ME   001E84 R
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        0032C9 R   |     FOR_IDX =  000034     |   4 FREE       0032C0 R
    FREE_IDX=  00008A     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_AND   =  000080     |     F_CFUNC =  000020     |     F_CMD   =  000000 
    F_CONST =  000030     |     F_IFUNC =  000010     |     F_NOT   =  000070 
    F_OR    =  000090     |     F_XOR   =  0000A0     |   4 GET        0032B8 R
    GET_IDX =  0000B6     |   4 GOSUB      0032AE R   |     GOSUB_ID=  000036 
  4 GOTO       0032A5 R   |     GOTO_IDX=  000038     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        00329D R   |     HEX_IDX =  00003A 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        003295 R
    IDR_IDX =  00003C     |   4 IF         00328E R   |     IF_IDX  =  00003E 
    IN      =  000005     |     INCR    =  000001     |     INDIRECT=  000000 
    INP     =  000000     |   4 INPUT      003284 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000040 
    INPUT_PU=  000001     |     INT24   =  000005     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     003279 R   |     IWDGEN_I=  000042 
  4 IWDGREF    00326D R   |     IWDGREF_=  000044     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        003265 R   |     KEY_END =  000083     |     KEY_IDX =  000046 
    KW_TYPE_=  0000F0     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        00325D R   |     LET_IDX =  000048 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  0033DA R   |   4 LIST       003254 R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       00324B R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     003240 R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000005 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000001 
    NCLKOPT =  004808     |     NEG     =  000001     |   4 NEW        003238 R
    NEW_IDX =  000052     |   4 NEXT       00322F R   |     NEXT_IDX=  000050 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
    NLEN_MAS=  00000F     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        003227 R   |     NOT_IDX =  0000F8     |     NOT_OP  =  000001 
  4 NOT_SAVE   001F76 R   |   4 NO_APP     002894 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R
  4 ODR        00321F R   |     ODR_IDX =  000054     |   4 ON         003218 R
    ONOFF   =  000003     |     ON_IDX  =  0000B4     |     OP      =  000002 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   4 OR         003211 R   |     OR_IDX  =  0000FC 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        003209 R   |     PAD_IDX =  000056 
    PAD_SIZE=  000080     |   4 PAUSE      0031FF R   |     PAUSE_ID=  000058 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       0031F6 R   |     PEEK_IDX=  00005C 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   4 PICK       0031ED R   |     PINNO   =  000001 
  4 PINP       0031E4 R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      0031DA R   |     PMODE_ID=  00005A     |   4 POKE       0031D1 R
    POKE_IDX=  000060     |   4 POP        0031C9 R   |   4 PORTA      0031AC R
  4 PORTB      0031A2 R   |   4 PORTC      003198 R   |   4 PORTD      00318E R
  4 PORTE      003184 R   |   4 PORTF      00317A R   |   4 PORTG      003170 R
  4 PORTH      003166 R   |   4 PORTI      00315C R   |   4 POUT       0031C0 R
    POUT_IDX=  000062     |     PREV    =  000001     |   4 PRINT      0031B6 R
    PROD    =  000001     |     PROD_SIG=  000004     |   4 PROG_ADD   001E5A R
  4 PROG_SIZ   001E6C R   |     PRTA_IDX=  000066     |     PRTB_IDX=  000068 
    PRTC_IDX=  00006A     |     PRTD_IDX=  00006C     |     PRTE_IDX=  00006E 
    PRTF_IDX=  000070     |     PRTG_IDX=  000072     |     PRTH_IDX=  000074 
    PRTI_IDX=  000076     |     PRT_IDX =  000064     |     PSIZE   =  000001 
    PSTR    =  000003     |   4 PUSH       003153 R   |   4 PUT        00314B R
  4 QKEY       003142 R   |     QKEY_IDX=  000078     |     QSIGN   =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001E95 R
    RAM_SIZE=  001800     |     RBT_IDX =  00007C     |   4 READ       003139 R
    READ_IDX=  00007A     |   4 REBOOT     00312E R   |     RECLEN  =  000005 
  4 REG_A      000529 R   |   4 REG_CC     00052D R   |   4 REG_EPC    00051C R
  4 REG_SP     000532 R   |   4 REG_X      000525 R   |   4 REG_Y      000521 R
    RELOP   =  000001     |   4 REM        003126 R   |     REM_IDX =  00007E 
  4 RESTORE    00311A R   |     REST_IDX=  000080     |     RETL1   =  000001 
  4 RETURN     00310F R   |     RET_ADDR=  000001     |     RET_BPTR=  000003 
    RET_IDX =  000082     |     RET_INW =  000005     |   4 RND        003107 R
    RND_IDX =  000084     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     0030FC R   |     RSHIFT_I=  000086     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        0030F4 R   |     RUN_IDX =  000088 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  4 SAVE       0030EB R   |     SAVE_IDX=  000032     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   002850 R
  4 SIZE       0030E2 R   |     SIZE_IDX=  0000B2     |     SKIP    =  000005 
  4 SLEEP      0030D8 R   |     SLEEP_ID=  00008C     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      0030CE R
    SPIEN_ID=  000090     |   4 SPIRD      0030C4 R   |     SPIRD_ID=  00008E 
  4 SPISEL     0030B9 R   |     SPISEL_I=  000092     |   4 SPIWR      0030AF R
    SPIWR_ID=  000094     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     0004DF R   |   4 STEP       0030A6 R   |     STEP_IDX=  000096 
  4 STOP       00309D R   |     STOP_IDX=  000098     |     STR     =  000003 
  4 STR_BYTE   001E7D R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      003093 R
    TICKS_ID=  00009A     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    003087 R
  4 TIMER      00307D R   |     TIMER_ID=  00009C     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000088     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_NOT  =  000087     |     TK_OR   =  000089     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000007     |     TK_SHARP=  000009 
    TK_VAR  =  000085     |     TK_XOR  =  00008A     |     TMROUT_I=  00009E 
  4 TO         003076 R   |   4 TONE       00306D R   |     TONE_IDX=  0000A2 
    TOWRITE =  000005     |     TO_IDX  =  0000A0     |   4 Timer4Up   000021 R
  4 TrapHand   000012 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     003062 R
    UBOUND_I=  0000A4     |   4 UBTN_Han   000068 R   |   4 UFLASH     003057 R
    UFLASH_I=  0000A6     |   4 UNTIL      00304D R   |     UNTIL_ID=  0000A8 
    UPDATE  =  000006     |     US      =  00001F     |   4 USER_ABO   000070 R
  4 USR        003045 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000AA     |   4 Uart1RxH   000899 R
  4 UserButt   000044 R   |     VAL1    =  02FFFF     |     VAL2    =  00002A 
    VAL3    =  000003     |     VAL4    =  0005FF     |     VAL5    =  FFFFFFFD 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       00303C R
    WAIT_IDX=  0000AC     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  4 WORDS      003032 R   |     WORDS_ID=  0000AE     |   4 WRITE      003028 R
    WRITE_ID=  0000B0     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        003020 R   |     XOR_IDX =  0000FE 
    XSAVE   =  000002     |     XSTACK_E=  001773     |     XSTACK_S=  000014 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000003 
  4 abs        002A54 R   |   4 abs24      0001EE R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000BC7 R   |   4 add24      000179 R   |   4 add_char   001332 R
  4 add_spac   00112A R   |   4 analog_r   00260B R   |   4 and_cond   001B11 R
  4 and_fact   001AE1 R   |   4 app        003604 R   |   4 app_sign   003600 R
  4 app_size   003602 R   |   4 app_spac   003600 GR  |   4 arduino_   002B43 R
  4 arg_list   001913 R   |   5 array_si   000020 R   |   4 ascii      002904 R
  4 at_tst     000F9C R   |   4 atoi24     001835 GR  |   4 atoi_exi   0018A4 R
  4 awu        0029FB R   |   4 awu02      002A0E R   |   4 bad_port   00297F R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       002582 R
  4 beep_1kh   002555 GR  |   4 bin_exit   000E03 R   |   4 bit_rese   00215E R
  4 bit_set    00213C R   |   4 bit_test   0021A3 R   |   4 bit_togg   002181 R
  4 bitmask    002CFA R   |   4 bkslsh_t   000F49 R   |   4 bksp       000972 R
  2 block_bu   0016E0 GR  |   4 block_er   000787 R   |   4 break_po   0026F7 R
  4 bye        0029C7 R   |   4 clear_ba   00149E R   |   4 clear_bl   0027A7 R
  4 clear_va   0013F6 R   |   4 clock_in   00008B R   |   4 cloop_1    001D86 R
  4 cmd_cons   001D60 R   |   4 cmd_end    002521 R   |   4 cmd_get    002528 R
  4 cmd_itf    000537 R   |   4 cmd_line   0016D1 R   |   4 cmd_name   001352 R
  4 cmd_on     0023D8 R   |   4 cmd_size   001BFD R   |   4 cold_sta   0000C3 R
  4 colon_ts   000F70 R   |   4 comma_ts   000F7B R   |   4 comp_msg   001621 R
  4 compile    001096 GR  |   4 conditio   001B63 R   |   4 const_cr   002DA2 R
  4 const_cr   002DA7 R   |   4 const_dd   002D9D R   |   4 const_ee   002DB6 R
  4 const_id   002D98 R   |   4 const_in   002DB1 R   |   4 const_lo   001D81 R
  4 const_od   002D93 R   |   4 const_ou   002DAC R   |   4 const_po   002D66 R
  4 const_po   002D6B R   |   4 const_po   002D70 R   |   4 const_po   002D75 R
  4 const_po   002D7A R   |   4 const_po   002D7F R   |   4 const_po   002D84 R
  4 const_po   002D89 R   |   4 const_po   002D8E R   |   4 convert_   000D73 R
  4 convert_   000936 R   |   4 copy_com   000FD1 R   |   5 count      000003 GR
  4 cp24       0001B3 R   |   4 cp24_ax    0001E5 R   |   4 cp_loop    0018C4 R
  4 cpl24      0001F5 R   |   4 cpy_cmd_   001112 R   |   4 cpy_quot   001152 R
  4 create_g   000C9D R   |   4 cs_high    002F38 R   |   4 dash_tst   000F91 R
  4 data       002DBB R   |   4 data_err   002E34 R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001BDC R
  4 decomp_l   0011EA R   |   4 decompil   0011A2 GR  |   4 del_line   000C70 R
  4 delete_l   000A5F R   |   4 delete_n   000982 R   |   4 delete_u   000A24 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

  4 digital_   002647 R   |   4 digital_   00267E R   |   4 div24      000302 R
  4 divu24_8   0002E4 R   |   4 do_loop    002D20 R   |   4 do_progr   00077A R
  4 dup24      00016A R   |   4 edit       001F49 R   |   4 enable_i   002C8A R
  4 eql_tst    00101C R   |   4 equal      001345 R   |   4 erase      00271F R
  4 erase_ex   0007AB R   |   4 erase_fl   0007A1 R   |   4 err_bad_   001582 R
  4 err_buf_   0015F8 R   |   4 err_cmd_   001546 R   |   4 err_div0   00150B R
  4 err_dupl   001560 R   |   4 err_math   0014F2 R   |   4 err_mem_   0014D7 R
  4 err_msg    0014B5 R   |   4 err_no_a   00158E R   |   4 err_no_d   0015C1 R
  4 err_no_f   0015E5 R   |   4 err_no_l   00151A R   |   4 err_no_p   0015D1 R
  4 err_not_   001571 R   |   4 err_over   001605 R   |   4 err_run_   001530 R
  4 err_synt   0014E4 R   |   4 escaped    000D88 GR  |   4 expect     001901 R
  4 expressi   001A4A R   |   4 factor     00195F R   |   5 farptr     000018 R
  4 fcpu       002AC5 R   |   4 fetchc     000627 R   |   4 fill_wri   002797 R
  4 final_te   000BC0 R   |   4 first_li   001EF3 R   |   5 flags      000022 GR
  4 for        002239 R   |   4 free       001BE1 R   |   5 free_eep   000024 R
  7 free_ram   000080 R   |   4 func_arg   00190E R   |   4 func_cha   0028ED R
  4 func_eef   001CF3 R   |   4 ge         001347 R   |   4 get_addr   001773 R
  4 get_arra   00192F R   |   4 get_char   00178D R   |   4 get_cons   001C78 R
  4 get_esca   000942 R   |   4 get_int2   00177D R   |   4 get_targ   002366 R
  4 get_targ   002374 R   |   4 get_tick   002A4D R   |   4 get_toke   000EE2 GR
  4 getc       00091B GR  |   4 gosub      002484 R   |   4 gosub_1    00248F R
  4 gosub_2    002495 R   |   4 goto       00246A R   |   4 goto_1     002474 R
  4 gpio       002954 R   |   4 gt         001343 R   |   4 gt_tst     001027 R
  4 hex_base   001BD7 R   |   4 hex_dump   000667 R   |   4 if         00221C R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   00087D R   |   4 input_ex   0020F4 R   |   4 input_lo   00205E R
  4 input_va   00205A R   |   4 insert_c   0009E1 R   |   4 insert_l   000CC9 R
  4 insert_l   000D38 R   |   4 interp_l   001712 R   |   4 interpre   0016ED R
  4 invalid    00057C R   |   4 invalid_   0005FD R   |   4 is_alnum   000E36 GR
  4 is_alpha   000E1C GR  |   4 is_data_   002DC1 R   |   4 is_digit   000E2D GR
  4 is_symbo   000E3F R   |   4 itoa       0017D0 GR  |   4 itoa_loo   0017F2 R
  4 jp_to_ta   002477 R   |   4 key        002943 R   |   4 kword_di   0033D8 GR
  4 kword_en   00301E R   |   4 le         00134C R   |   4 ledoff     000432 R
  4 ledon      00042D R   |   4 ledtoggl   000437 R   |   4 left_par   000440 R
  4 let        001C35 GR  |   4 let_arra   001C43 R   |   4 let_eval   001C4B R
  4 let_var    001C48 R   |   4 lines_sk   001EF6 R   |   4 list       001EA4 R
  4 list_con   001C87 R   |   4 list_exi   001F38 R   |   4 list_loo   001F16 R
  4 log2       002CCD R   |   4 look_tar   002397 R   |   4 loop_bac   002349 R
  5 loop_dep   00001F R   |   4 loop_don   00235E R   |   4 lshift     002A6B R
  4 lt         00134A R   |   4 lt_tst     001050 R   |   4 mem_peek   000599 R
  4 mod24      00039C R   |   4 move       0013B2 GR  |   4 move_dow   0013D1 R
  4 move_era   000709 R   |   4 move_exi   0013F2 R   |   4 move_lef   0009B9 R
  4 move_loo   0013D6 R   |   4 move_prg   000749 R   |   4 move_rig   0009C7 R
  4 move_up    0013C3 R   |   4 mul24      000274 R   |   4 mul_char   001334 R
  4 mulu24_8   000235 R   |   4 nbr_tst    000F15 R   |   4 ne         00134F R
  4 neg24      0001FE R   |   4 neg_acc2   000218 R   |   4 neg_ax     000210 R
  4 new        002715 R   |   4 next       0022F1 R   |   4 next_lin   0016F5 R
  4 next_tok   00174B GR  |   4 no_match   0018D6 R   |   4 number     00062D R
  4 other      001079 R   |   4 overwrit   000BEC R   |   2 pad        0016E0 GR
  4 pad_ref    002F3D R   |   4 parse_bi   000DE1 R   |   4 parse_in   000D90 R
  4 parse_ke   000E62 R   |   4 parse_qu   000D3B R   |   4 parse_sy   000E4A R
  4 pause      0029DB R   |   4 pause02    0029EE R   |   4 peek       0021FB R
  4 peek_byt   0005C7 R   |   4 pin_mode   002AD4 R   |   4 plus_tst   000FF0 R
  4 poke       0021DA R   |   4 power_ad   0025BB R   |   4 prcnt_ts   001011 R
  4 print      001FB1 R   |   4 print_fa   00060C R   |   4 print_he   000C23 GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

  4 print_re   00048C R   |   4 print_st   00058C R   |   4 print_to   0017B8 R
  4 prog_siz   001E13 R   |   4 program_   001E1B R   |   4 program_   000723 R
  4 program_   000749 R   |   4 prt_acc2   0017AA R   |   4 prt_basi   001F8D R
  4 prt_i16    001793 R   |   4 prt_loop   001FB5 R   |   4 prt_peek   00040F GR
  4 prt_reg1   00046D R   |   4 prt_reg8   00044B R   |   4 prt_regs   0003A5 GR
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       00090B GR
  4 puts       000968 GR  |   4 qgetc      000914 GR  |   4 qkey       002947 GR
  4 qmark_ts   000FA7 R   |   4 qsign      002790 R   |   4 random     002B63 R
  4 read       002E39 R   |   4 read01     002E3E R   |   4 read_int   00354F R
  4 readln     000A6D GR  |   4 readln_l   000A7C R   |   4 readln_q   000C09 R
  4 refresh_   002CC8 R   |   4 regs_sta   0003E8 R   |   4 relation   001A82 R
  4 relop_st   001337 R   |   4 remark     0020F9 GR  |   4 repl       000545 R
  4 repl_exi   00056D R   |   4 reset_co   001FB3 R   |   4 rest_con   00204A R
  4 restore    002DCF R   |   4 return     0024A8 R   |   4 right_al   001140 GR
  4 row_alig   000862 R   |   4 row_eras   0006DC R   |   4 row_eras   000709 R
  4 row_loop   00064A R   |   4 rparnt_t   000F65 R   |   4 rshift     002A98 R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     00160F R
  4 run        0024C5 R   |   4 run_app    000135 R   |   4 run_it     0024F7 R
  4 run_it_0   0024F9 R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   0027BB R   |   4 save_con   00203A R
  4 scan_blo   00088B R   |   4 search_c   001D1C R   |   4 search_d   0018B6 GR
  4 search_e   0018FE R   |   4 search_l   000C45 GR  |   4 search_l   000C54 R
  4 search_n   0018BA R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002B33 R   |   4 send_esc   000990 R   |   4 send_par   00099B R
  4 set_data   002E05 R   |   4 set_time   002C68 R   |   4 sharp_ts   000F86 R
  4 show_row   000638 R   |   4 single_c   00132D R   |   4 skip       000ECF R
  4 skip_str   001764 R   |   4 slash_ts   001006 R   |   4 sleep      0029D0 R
  4 software   001405 R   |   4 spaces     0009D5 GR  |   4 spi_clea   002ED2 R
  4 spi_disa   002EBA R   |   4 spi_enab   002E87 R   |   4 spi_rcv_   002EF4 R
  4 spi_read   002F1F R   |   4 spi_sele   002F26 R   |   4 spi_send   002EDE R
  4 spi_writ   002EFF R   |   2 stack_fu   00179C GR  |   2 stack_un   001828 R
  4 star_tst   000FFB R   |   4 step       0022AF R   |   4 stop       0026C9 R
  4 store_lo   0022DE R   |   4 str_matc   0018E3 R   |   4 str_tst    000F05 R
  4 strcmp     001391 R   |   4 strcpy     0013A2 GR  |   4 strlen     001386 GR
  4 sub24      000196 R   |   4 symb_loo   000E4B R   |   4 syntax_e   001642 GR
  4 system_i   00144B R   |   5 tab_widt   000023 GR  |   4 tb_error   001644 GR
  4 term       001A07 R   |   4 term01     001A0F R   |   4 term_exi   001A47 R
  4 test       0033E0 R   |   4 test_p     000584 R   |   2 tib        001690 GR
  4 tick_tst   000FBF R   |   5 ticks      00000F R   |   4 timeout    002C7F R
  5 timer      000012 GR  |   4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R
  4 tk_id      001632 R   |   4 to         002269 R   |   4 to_eepro   000772 R
  4 to_flash   000777 R   |   4 to_hex_c   000C3A GR  |   4 to_upper   001829 GR
  4 token_ch   00108F R   |   4 token_ex   001093 R   |   4 tone       002560 R
  4 try_next   002E12 R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   00091B GR  |   4 uart1_in   0008C6 R   |   4 uart1_pu   00090B GR
  4 uart1_qg   000914 GR  |   4 uart1_se   0008D6 R   |   4 ubound     001C2A R
  4 uflash     002984 R   |   4 unlock_e   0006A6 R   |   4 unlock_f   0006C1 R
  4 until      002D33 R   |   4 user_int   000057 R   |   4 usr        0029A1 R
  4 var_name   001198 GR  |   5 vars       000030 GR  |   4 wait       0020FF R
  4 warm_ini   00147C R   |   4 warm_sta   0016CE R   |   4 words      002BFE R
  4 words_co   002C52 R   |   4 write      0028AA R   |   4 write_bl   000827 GR
  4 write_bu   000763 R   |   4 write_by   0007AD R   |   4 write_ee   0007E9 R
  4 write_ex   000822 R   |   4 write_fl   0007D3 R   |   4 write_nb   00084C R
  4 xalloc     002F50 R   |   4 xdrop      002F86 R   |   4 xpick      003004 R
  4 xpop       002F46 R   |   4 xpush      002F42 R   |   4 xput       002FD1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

  4 xstack_b   002FB3 R   |   2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

